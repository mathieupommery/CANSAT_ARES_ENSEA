
code_sat_freertos_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002614  08016bc8  08016bc8  00017bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080191dc  080191dc  0001b210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080191dc  080191dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080191e4  080191e4  0001b210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080191e4  080191e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080191e8  080191e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080191ec  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047fc  20000210  080193fc  0001b210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a0c  080193fc  0001ba0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fa66  00000000  00000000  0001b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d34  00000000  00000000  0004aca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002708  00000000  00000000  000519e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e25  00000000  00000000  000540e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029025  00000000  00000000  00055f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003537a  00000000  00000000  0007ef32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeb6e  00000000  00000000  000b42ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a2e1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba88  00000000  00000000  001a2e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001ae8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016bac 	.word	0x08016bac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08016bac 	.word	0x08016bac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f011 fd8e 	bl	8012baa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001096:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001098:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b8:	2208      	movs	r2, #8
 80010ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010be:	2200      	movs	r2, #0
 80010c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4825      	ldr	r0, [pc, #148]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010fa:	f003 fcad 	bl	8004a58 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001104:	f001 f8a6 	bl	8002254 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	481f      	ldr	r0, [pc, #124]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001114:	f004 fe72 	bl	8005dfc <HAL_ADCEx_MultiModeConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800111e:	f001 f899 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_ADC1_Init+0x124>)
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001140:	f004 f8fa 	bl	8005338 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800114a:	f001 f883 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC1_Init+0x128>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001152:	230c      	movs	r3, #12
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x120>)
 800115c:	f004 f8ec 	bl	8005338 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001166:	f001 f875 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_ADC1_Init+0x12c>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800116e:	2312      	movs	r3, #18
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001178:	f004 f8de 	bl	8005338 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001182:	f001 f867 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	@ 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000022c 	.word	0x2000022c
 8001194:	cb840000 	.word	0xcb840000
 8001198:	c3210000 	.word	0xc3210000
 800119c:	0c900008 	.word	0x0c900008

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	@ 0x68
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2244      	movs	r2, #68	@ 0x44
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f011 fcf2 	bl	8012baa <memset>
  if(adcHandle->Instance==ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ce:	d167      	bne.n	80012a0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 ff4f 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011ec:	f001 f832 	bl	8002254 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f005 faa3 	bl	8006780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_ADC_MspInit+0x110>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001242:	2205      	movs	r2, #5
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001276:	f004 ff45 	bl	8006104 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001280:	f000 ffe8 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2012      	movs	r0, #18
 8001296:	f004 ff0d 	bl	80060b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800129a:	2012      	movs	r0, #18
 800129c:	f004 ff24 	bl	80060e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3768      	adds	r7, #104	@ 0x68
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	20000298 	.word	0x20000298
 80012b0:	4002001c 	.word	0x4002001c
 80012b4:	00000000 	.word	0x00000000

080012b8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	f040 8097 	bne.w	80013fc <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80012ce:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f94e 	bl	8000574 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	a14a      	add	r1, pc, #296	@ (adr r1, 8001408 <HAL_ADC_ConvCpltCallback+0x150>)
 80012de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e2:	f7ff fadb 	bl	800089c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fca3 	bl	8000c38 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80012f6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80012f8:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	4943      	ldr	r1, [pc, #268]	@ (8001428 <HAL_ADC_ConvCpltCallback+0x170>)
 800131a:	f7ff fabf 	bl	800089c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4690      	mov	r8, r2
 8001324:	4699      	mov	r9, r3
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <__aeabi_i2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 8001344:	f7ff faaa 	bl	800089c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f97a 	bl	8000648 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f919 	bl	8000598 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7fe ffb3 	bl	80002d8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	ee07 0a10 	vmov	s14, r0
 800138e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_ADC_ConvCpltCallback+0x178>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8e7 	bl	8000574 <__aeabi_i2d>
 80013a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001410 <HAL_ADC_ConvCpltCallback+0x158>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa76 	bl	800089c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 80013be:	f7ff f943 	bl	8000648 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f934 	bl	8000648 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc26 	bl	8000c38 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_ADC_ConvCpltCallback+0x17c>)
 80013f0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 80013f2:	2203      	movs	r2, #3
 80013f4:	4908      	ldr	r1, [pc, #32]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x180>)
 80013f8:	f003 fcb2 	bl	8004d60 <HAL_ADC_Start_DMA>

	}

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001406:	bf00      	nop
 8001408:	d70a3d70 	.word	0xd70a3d70
 800140c:	40b36323 	.word	0x40b36323
 8001410:	00000000 	.word	0x00000000
 8001414:	40affe00 	.word	0x40affe00
 8001418:	20000aec 	.word	0x20000aec
 800141c:	20000af8 	.word	0x20000af8
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	40590000 	.word	0x40590000
 800142c:	40080000 	.word	0x40080000
 8001430:	20000af4 	.word	0x20000af4
 8001434:	20000afc 	.word	0x20000afc
 8001438:	2000022c 	.word	0x2000022c

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001446:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800144a:	4618      	mov	r0, r3
 800144c:	f00d ff61 	bl	800f312 <osMutexCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <MX_FREERTOS_Init+0xec>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 800145a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800145e:	4618      	mov	r0, r3
 8001460:	f00d ff57 	bl	800f312 <osMutexCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a31      	ldr	r2, [pc, #196]	@ (800152c <MX_FREERTOS_Init+0xf0>)
 8001468:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 800146e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001472:	4618      	mov	r0, r3
 8001474:	f00d ff4d 	bl	800f312 <osMutexCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <MX_FREERTOS_Init+0xf4>)
 800147c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartTxDone */
  osSemaphoreDef(uartTxDone);
 800147e:	2300      	movs	r3, #0
 8001480:	643b      	str	r3, [r7, #64]	@ 0x40
  uartTxDoneHandle = osSemaphoreCreate(osSemaphore(uartTxDone), 1);
 8001482:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f00d ffd3 	bl	800f434 <osSemaphoreCreate>
 800148e:	4603      	mov	r3, r0
 8001490:	4a28      	ldr	r2, [pc, #160]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001492:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(uartTxDoneHandle, 0);
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f00d ffe8 	bl	800f470 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <MX_FREERTOS_Init+0xfc>)
 80014a2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80014a6:	461d      	mov	r5, r3
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 80014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d ff04 	bl	800f2c4 <osThreadCreate>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <MX_FREERTOS_Init+0x100>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_FREERTOS_Init+0x104>)
 80014c4:	f107 0418 	add.w	r4, r7, #24
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f00d fef3 	bl	800f2c4 <osThreadCreate>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <MX_FREERTOS_Init+0x108>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_FREERTOS_Init+0x10c>)
 80014e6:	1d3c      	adds	r4, r7, #4
 80014e8:	461d      	mov	r5, r3
 80014ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00d fee4 	bl	800f2c4 <osThreadCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <MX_FREERTOS_Init+0x110>)
 8001500:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800150c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	@ 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}
 8001528:	20000360 	.word	0x20000360
 800152c:	20000364 	.word	0x20000364
 8001530:	20000368 	.word	0x20000368
 8001534:	2000036c 	.word	0x2000036c
 8001538:	08016bd8 	.word	0x08016bd8
 800153c:	20000354 	.word	0x20000354
 8001540:	08016bf8 	.word	0x08016bf8
 8001544:	20000358 	.word	0x20000358
 8001548:	08016c1c 	.word	0x08016c1c
 800154c:	2000035c 	.word	0x2000035c
 8001550:	e000edf0 	.word	0xe000edf0
 8001554:	e0001000 	.word	0xe0001000

08001558 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001560:	f00f fa02 	bl	8010968 <xTaskGetTickCount>
 8001564:	4603      	mov	r3, r0
 8001566:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  //lcd_clear();

	  if(flag_fin==0){
 8001568:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <Startstatemachine+0x1bc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 80bb 	bne.w	80016e8 <Startstatemachine+0x190>

		  if(led_flag==0){
 8001572:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <Startstatemachine+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <Startstatemachine+0x3c>
			  LED_Setcolour(255, 0, 0,0, 0, 255);
 800157a:	23ff      	movs	r3, #255	@ 0xff
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	20ff      	movs	r0, #255	@ 0xff
 800158a:	f000 fc71 	bl	8001e70 <LED_Setcolour>
			  LED_Update();
 800158e:	f000 fcff 	bl	8001f90 <LED_Update>
 8001592:	e00b      	b.n	80015ac <Startstatemachine+0x54>

		  }
		  else{
			  LED_Setcolour(0, 0, 255,255, 0, 0);
 8001594:	2300      	movs	r3, #0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	23ff      	movs	r3, #255	@ 0xff
 800159e:	22ff      	movs	r2, #255	@ 0xff
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 fc64 	bl	8001e70 <LED_Setcolour>
			  LED_Update();
 80015a8:	f000 fcf2 	bl	8001f90 <LED_Update>
		  }
		  led_flag=1-led_flag;
 80015ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001718 <Startstatemachine+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1c3 0301 	rsb	r3, r3, #1
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <Startstatemachine+0x1c0>)
 80015b6:	6013      	str	r3, [r2, #0]

		  if ((vraiRSSI >= 0) || (vraiRSSI < -120) || (NVALUE <= 0.0f)) {
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <Startstatemachine+0x1c4>)
 80015ba:	f993 3000 	ldrsb.w	r3, [r3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da05      	bge.n	80015ce <Startstatemachine+0x76>
 80015c2:	4b56      	ldr	r3, [pc, #344]	@ (800171c <Startstatemachine+0x1c4>)
 80015c4:	f993 3000 	ldrsb.w	r3, [r3]
 80015c8:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 80015cc:	da03      	bge.n	80015d6 <Startstatemachine+0x7e>
		 	        distance_RSSI= -1.0f; // Valeur invalide
 80015ce:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <Startstatemachine+0x1c8>)
 80015d0:	4a54      	ldr	r2, [pc, #336]	@ (8001724 <Startstatemachine+0x1cc>)
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e01e      	b.n	8001614 <Startstatemachine+0xbc>
		 	    }
		 	    else{
		 	    	float exponent= 0.0f;
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
		 		    exponent = ((float)RSSI0 - (float)vraiRSSI) / (10.0f * NVALUE);
 80015dc:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <Startstatemachine+0x1c4>)
 80015de:	f993 3000 	ldrsb.w	r3, [r3]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001728 <Startstatemachine+0x1d0>
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	edc7 7a03 	vstr	s15, [r7, #12]
		 		    distance_RSSI= powf(10.0f, exponent);
 80015fe:	edd7 0a03 	vldr	s1, [r7, #12]
 8001602:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001606:	f014 ff09 	bl	801641c <powf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <Startstatemachine+0x1c8>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
		 	    }



	ssd1306_Fill(Black);
 8001614:	2000      	movs	r0, #0
 8001616:	f000 ffc3 	bl	80025a0 <ssd1306_Fill>
	ssd1306_SetCursor(32, 32);
 800161a:	2120      	movs	r1, #32
 800161c:	2020      	movs	r0, #32
 800161e:	f001 f901 	bl	8002824 <ssd1306_SetCursor>
	ssd1306_WriteString("H_baro", Font_6x8, White);
 8001622:	4a42      	ldr	r2, [pc, #264]	@ (800172c <Startstatemachine+0x1d4>)
 8001624:	2301      	movs	r3, #1
 8001626:	ca06      	ldmia	r2, {r1, r2}
 8001628:	4841      	ldr	r0, [pc, #260]	@ (8001730 <Startstatemachine+0x1d8>)
 800162a:	f001 f8d5 	bl	80027d8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 40);
 800162e:	2128      	movs	r1, #40	@ 0x28
 8001630:	2020      	movs	r0, #32
 8001632:	f001 f8f7 	bl	8002824 <ssd1306_SetCursor>
	snprintf((char *)lcdbuffer,30,"%0.2f  ",OTHERData.altitude_baro);
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <Startstatemachine+0x1dc>)
 8001638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ffac 	bl	8000598 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	e9cd 2300 	strd	r2, r3, [sp]
 8001648:	4a3b      	ldr	r2, [pc, #236]	@ (8001738 <Startstatemachine+0x1e0>)
 800164a:	211e      	movs	r1, #30
 800164c:	483b      	ldr	r0, [pc, #236]	@ (800173c <Startstatemachine+0x1e4>)
 800164e:	f011 fa11 	bl	8012a74 <sniprintf>
	ssd1306_WriteString((char *)lcdbuffer, Font_6x8, White);
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <Startstatemachine+0x1d4>)
 8001654:	2301      	movs	r3, #1
 8001656:	ca06      	ldmia	r2, {r1, r2}
 8001658:	4838      	ldr	r0, [pc, #224]	@ (800173c <Startstatemachine+0x1e4>)
 800165a:	f001 f8bd 	bl	80027d8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 48);
 800165e:	2130      	movs	r1, #48	@ 0x30
 8001660:	2020      	movs	r0, #32
 8001662:	f001 f8df 	bl	8002824 <ssd1306_SetCursor>
	ssd1306_WriteString("H_RSSI", Font_6x8, White);
 8001666:	4a31      	ldr	r2, [pc, #196]	@ (800172c <Startstatemachine+0x1d4>)
 8001668:	2301      	movs	r3, #1
 800166a:	ca06      	ldmia	r2, {r1, r2}
 800166c:	4834      	ldr	r0, [pc, #208]	@ (8001740 <Startstatemachine+0x1e8>)
 800166e:	f001 f8b3 	bl	80027d8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 8001672:	2138      	movs	r1, #56	@ 0x38
 8001674:	2020      	movs	r0, #32
 8001676:	f001 f8d5 	bl	8002824 <ssd1306_SetCursor>
	snprintf((char *)lcdbuffer,30,"%0.1fm   ",distance_RSSI);
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <Startstatemachine+0x1c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff8a 	bl	8000598 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	e9cd 2300 	strd	r2, r3, [sp]
 800168c:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <Startstatemachine+0x1ec>)
 800168e:	211e      	movs	r1, #30
 8001690:	482a      	ldr	r0, [pc, #168]	@ (800173c <Startstatemachine+0x1e4>)
 8001692:	f011 f9ef 	bl	8012a74 <sniprintf>
	ssd1306_WriteString((char *)lcdbuffer, Font_6x8, White);
 8001696:	4a25      	ldr	r2, [pc, #148]	@ (800172c <Startstatemachine+0x1d4>)
 8001698:	2301      	movs	r3, #1
 800169a:	ca06      	ldmia	r2, {r1, r2}
 800169c:	4827      	ldr	r0, [pc, #156]	@ (800173c <Startstatemachine+0x1e4>)
 800169e:	f001 f89b 	bl	80027d8 <ssd1306_WriteString>
	create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,0.0,0.0,distance_RSSI,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,timeindex);
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <Startstatemachine+0x1c8>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <Startstatemachine+0x1f0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 800174c <Startstatemachine+0x1f4>
 80016b2:	eddf 4a26 	vldr	s9, [pc, #152]	@ 800174c <Startstatemachine+0x1f4>
 80016b6:	ed9f 4a25 	vldr	s8, [pc, #148]	@ 800174c <Startstatemachine+0x1f4>
 80016ba:	eddf 3a24 	vldr	s7, [pc, #144]	@ 800174c <Startstatemachine+0x1f4>
 80016be:	ed9f 3a23 	vldr	s6, [pc, #140]	@ 800174c <Startstatemachine+0x1f4>
 80016c2:	eddf 2a22 	vldr	s5, [pc, #136]	@ 800174c <Startstatemachine+0x1f4>
 80016c6:	ed9f 2a21 	vldr	s4, [pc, #132]	@ 800174c <Startstatemachine+0x1f4>
 80016ca:	eddf 1a20 	vldr	s3, [pc, #128]	@ 800174c <Startstatemachine+0x1f4>
 80016ce:	eeb0 1a67 	vmov.f32	s2, s15
 80016d2:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 800174c <Startstatemachine+0x1f4>
 80016d6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800174c <Startstatemachine+0x1f4>
 80016da:	2310      	movs	r3, #16
 80016dc:	2201      	movs	r2, #1
 80016de:	215a      	movs	r1, #90	@ 0x5a
 80016e0:	481b      	ldr	r0, [pc, #108]	@ (8001750 <Startstatemachine+0x1f8>)
 80016e2:	f001 fcc7 	bl	8003074 <create_and_send_payload>
 80016e6:	e00c      	b.n	8001702 <Startstatemachine+0x1aa>
	  }
	  else{
		  ssd1306_Fill(Black);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 ff59 	bl	80025a0 <ssd1306_Fill>
		  ssd1306_SetCursor(32, 32);
 80016ee:	2120      	movs	r1, #32
 80016f0:	2020      	movs	r0, #32
 80016f2:	f001 f897 	bl	8002824 <ssd1306_SetCursor>
		  ssd1306_WriteString("FIN", Font_16x24, White);
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <Startstatemachine+0x1fc>)
 80016f8:	2301      	movs	r3, #1
 80016fa:	ca06      	ldmia	r2, {r1, r2}
 80016fc:	4816      	ldr	r0, [pc, #88]	@ (8001758 <Startstatemachine+0x200>)
 80016fe:	f001 f86b 	bl	80027d8 <ssd1306_WriteString>

	  }

	  ssd1306_UpdateScreen();
 8001702:	f000 ff65 	bl	80025d0 <ssd1306_UpdateScreen>


	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	21c8      	movs	r1, #200	@ 0xc8
 800170c:	4618      	mov	r0, r3
 800170e:	f00e fee3 	bl	80104d8 <vTaskDelayUntil>
	  if(flag_fin==0){
 8001712:	e729      	b.n	8001568 <Startstatemachine+0x10>
 8001714:	20000cc4 	.word	0x20000cc4
 8001718:	20000310 	.word	0x20000310
 800171c:	200002fc 	.word	0x200002fc
 8001720:	20000300 	.word	0x20000300
 8001724:	bf800000 	.word	0xbf800000
 8001728:	c2600000 	.word	0xc2600000
 800172c:	20000008 	.word	0x20000008
 8001730:	08016c30 	.word	0x08016c30
 8001734:	20000b00 	.word	0x20000b00
 8001738:	08016c38 	.word	0x08016c38
 800173c:	20000314 	.word	0x20000314
 8001740:	08016c40 	.word	0x08016c40
 8001744:	08016c48 	.word	0x08016c48
 8001748:	20000ccc 	.word	0x20000ccc
 800174c:	00000000 	.word	0x00000000
 8001750:	200003c4 	.word	0x200003c4
 8001754:	20000018 	.word	0x20000018
 8001758:	08016c54 	.word	0x08016c54

0800175c <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 8001768:	2201      	movs	r2, #1
 800176a:	493b      	ldr	r1, [pc, #236]	@ (8001858 <StartSdcard+0xfc>)
 800176c:	483b      	ldr	r0, [pc, #236]	@ (800185c <StartSdcard+0x100>)
 800176e:	f00c fcf1 	bl	800e154 <f_mount>
 8001772:	4603      	mov	r3, r0
 8001774:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001776:	f00f f8f7 	bl	8010968 <xTaskGetTickCount>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <StartSdcard+0x104>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
		  //osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);

		  blinker_sd_flag=1-blinker_sd_flag;
 8001784:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <StartSdcard+0x108>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1c3 0301 	rsb	r3, r3, #1
 800178c:	4a35      	ldr	r2, [pc, #212]	@ (8001864 <StartSdcard+0x108>)
 800178e:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 8001790:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <StartSdcard+0x108>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d10a      	bne.n	80017ae <StartSdcard+0x52>
			  LED_Setcolour(0,0,0,255,255,255);
 8001798:	23ff      	movs	r3, #255	@ 0xff
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	23ff      	movs	r3, #255	@ 0xff
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	23ff      	movs	r3, #255	@ 0xff
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fb62 	bl	8001e70 <LED_Setcolour>
 80017ac:	e009      	b.n	80017c2 <StartSdcard+0x66>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 fb57 	bl	8001e70 <LED_Setcolour>
		  }

		  if(flag_drop==0){
 80017c2:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <StartSdcard+0x10c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d112      	bne.n	80017f0 <StartSdcard+0x94>

			  if(sd_counter==5){
 80017ca:	4b28      	ldr	r3, [pc, #160]	@ (800186c <StartSdcard+0x110>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d108      	bne.n	80017e4 <StartSdcard+0x88>
				  fres=store_in_sd(fres);
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fd43 	bl	8002260 <store_in_sd>
 80017da:	4603      	mov	r3, r0
 80017dc:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 80017de:	4b23      	ldr	r3, [pc, #140]	@ (800186c <StartSdcard+0x110>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <StartSdcard+0x110>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a20      	ldr	r2, [pc, #128]	@ (800186c <StartSdcard+0x110>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e005      	b.n	80017fc <StartSdcard+0xa0>

		  }
		  else{
			  fres=store_in_sd(fres);
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd34 	bl	8002260 <store_in_sd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	77fb      	strb	r3, [r7, #31]



		  //osMutexRelease(SDCard_mutexeHandle);

			if(flag_fin==1){
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <StartSdcard+0x114>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <StartSdcard+0xb8>

				f_mount(NULL, "", 0);
 8001804:	2200      	movs	r2, #0
 8001806:	4914      	ldr	r1, [pc, #80]	@ (8001858 <StartSdcard+0xfc>)
 8001808:	2000      	movs	r0, #0
 800180a:	f00c fca3 	bl	800e154 <f_mount>
				osThreadSuspend(NULL);
 800180e:	2000      	movs	r0, #0
 8001810:	f00d fec5 	bl	800f59e <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <StartSdcard+0x104>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <StartSdcard+0x118>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001838:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8001878 <StartSdcard+0x11c>
 800183c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <StartSdcard+0x120>)
 8001846:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	21c8      	movs	r1, #200	@ 0xc8
 8001850:	4618      	mov	r0, r3
 8001852:	f00e fe41 	bl	80104d8 <vTaskDelayUntil>
  {
 8001856:	e792      	b.n	800177e <StartSdcard+0x22>
 8001858:	08016c58 	.word	0x08016c58
 800185c:	20000684 	.word	0x20000684
 8001860:	e0001000 	.word	0xe0001000
 8001864:	20000304 	.word	0x20000304
 8001868:	20000cb8 	.word	0x20000cb8
 800186c:	200002f8 	.word	0x200002f8
 8001870:	20000cc4 	.word	0x20000cc4
 8001874:	20000020 	.word	0x20000020
 8001878:	49742400 	.word	0x49742400
 800187c:	20000308 	.word	0x20000308

08001880 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b09d      	sub	sp, #116	@ 0x74
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001888:	f00f f86e 	bl	8010968 <xTaskGetTickCount>
 800188c:	6638      	str	r0, [r7, #96]	@ 0x60
	 uint8_t temp_trame[TRAME_SIZE];
		      uint8_t temp5[5];
		      uint8_t data_index = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001894:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac4 <startTarvosDecode+0x244>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	65fb      	str	r3, [r7, #92]	@ 0x5c



	          while (read_index != write_index) {
 800189a:	e0e3      	b.n	8001a64 <startTarvosDecode+0x1e4>
	              // Recherche de l'entête principale
	              if (circular_buffer[read_index] == 0x02 &&
 800189c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac8 <startTarvosDecode+0x248>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b89      	ldr	r3, [pc, #548]	@ (8001acc <startTarvosDecode+0x24c>)
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f040 80cb 	bne.w	8001a44 <startTarvosDecode+0x1c4>
	                  circular_buffer[(read_index + 1) % CIRC_BUF_SIZE] == 0x81)
 80018ae:	4b86      	ldr	r3, [pc, #536]	@ (8001ac8 <startTarvosDecode+0x248>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3301      	adds	r3, #1
 80018b6:	425a      	negs	r2, r3
 80018b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018c0:	bf58      	it	pl
 80018c2:	4253      	negpl	r3, r2
 80018c4:	4a81      	ldr	r2, [pc, #516]	@ (8001acc <startTarvosDecode+0x24c>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
	              if (circular_buffer[read_index] == 0x02 &&
 80018c8:	2b81      	cmp	r3, #129	@ 0x81
 80018ca:	f040 80bb 	bne.w	8001a44 <startTarvosDecode+0x1c4>
	              {
	                  data_index = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	                  while (data_index < TRAME_SIZE) {
 80018d4:	e082      	b.n	80019dc <startTarvosDecode+0x15c>
	                      // Vérifie s’il reste au moins 5 octets
	                      uint16_t available = (write_index >= read_index)
 80018d6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad0 <startTarvosDecode+0x250>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac8 <startTarvosDecode+0x248>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d308      	bcc.n	80018f8 <startTarvosDecode+0x78>
	                          ? (write_index - read_index)
 80018e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad0 <startTarvosDecode+0x250>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b76      	ldr	r3, [pc, #472]	@ (8001ac8 <startTarvosDecode+0x248>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	e00a      	b.n	800190e <startTarvosDecode+0x8e>
	                          : (CIRC_BUF_SIZE - read_index + write_index);
 80018f8:	4b75      	ldr	r3, [pc, #468]	@ (8001ad0 <startTarvosDecode+0x250>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8001908:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800190c:	b29b      	uxth	r3, r3
 800190e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	                      if (available < 5) {
 8001912:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001916:	2b04      	cmp	r3, #4
 8001918:	d966      	bls.n	80019e8 <startTarvosDecode+0x168>
	                          break; // attendre plus de données
	                      }

	                      // Copie 5 octets
	                      for (int i = 0; i < 5; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800191e:	e017      	b.n	8001950 <startTarvosDecode+0xd0>
	                          temp5[i] = circular_buffer[(read_index + i) % CIRC_BUF_SIZE];
 8001920:	4b69      	ldr	r3, [pc, #420]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800192a:	4413      	add	r3, r2
 800192c:	425a      	negs	r2, r3
 800192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	4a64      	ldr	r2, [pc, #400]	@ (8001acc <startTarvosDecode+0x24c>)
 800193c:	5cd1      	ldrb	r1, [r2, r3]
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001944:	4413      	add	r3, r2
 8001946:	460a      	mov	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
	                      for (int i = 0; i < 5; i++) {
 800194a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800194c:	3301      	adds	r3, #1
 800194e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001952:	2b04      	cmp	r3, #4
 8001954:	dde4      	ble.n	8001920 <startTarvosDecode+0xa0>
	                      }

	                      // Confirmation TX ? (trame parasite)
	                      if (temp5[0] == 0x02 && temp5[1] == 0x40 && temp5[2] == 0x01) {
 8001956:	7b3b      	ldrb	r3, [r7, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d114      	bne.n	8001986 <startTarvosDecode+0x106>
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	d111      	bne.n	8001986 <startTarvosDecode+0x106>
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10e      	bne.n	8001986 <startTarvosDecode+0x106>
	                          // Skip trame de confirmation
	                          read_index = (read_index + 5) % CIRC_BUF_SIZE;
 8001968:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <startTarvosDecode+0x248>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	3305      	adds	r3, #5
 8001970:	425a      	negs	r2, r3
 8001972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800197a:	bf58      	it	pl
 800197c:	4253      	negpl	r3, r2
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001982:	801a      	strh	r2, [r3, #0]
	                          continue;
 8001984:	e02a      	b.n	80019dc <startTarvosDecode+0x15c>
	                      }

	                      // Sinon : partie utile, on ajoute à la trame
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	667b      	str	r3, [r7, #100]	@ 0x64
 800198a:	e012      	b.n	80019b2 <startTarvosDecode+0x132>
	                          temp_trame[data_index++] = temp5[i];
 800198c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8001996:	4619      	mov	r1, r3
 8001998:	f107 020c 	add.w	r2, r7, #12
 800199c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800199e:	4413      	add	r3, r2
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 80019a6:	443b      	add	r3, r7
 80019a8:	f803 2c5c 	strb.w	r2, [r3, #-92]
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80019ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019ae:	3301      	adds	r3, #1
 80019b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80019b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	dc03      	bgt.n	80019c0 <startTarvosDecode+0x140>
 80019b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80019be:	d9e5      	bls.n	800198c <startTarvosDecode+0x10c>
	                      }

	                      read_index = (read_index + 5) % CIRC_BUF_SIZE;
 80019c0:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <startTarvosDecode+0x248>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3305      	adds	r3, #5
 80019c8:	425a      	negs	r2, r3
 80019ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019d2:	bf58      	it	pl
 80019d4:	4253      	negpl	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <startTarvosDecode+0x248>)
 80019da:	801a      	strh	r2, [r3, #0]
	                  while (data_index < TRAME_SIZE) {
 80019dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80019e2:	f67f af78 	bls.w	80018d6 <startTarvosDecode+0x56>
 80019e6:	e000      	b.n	80019ea <startTarvosDecode+0x16a>
	                          break; // attendre plus de données
 80019e8:	bf00      	nop
	                  }

	                  if (data_index == TRAME_SIZE) {
 80019ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80019f0:	d137      	bne.n	8001a62 <startTarvosDecode+0x1e2>

	                	  if (tarvos_checksum(temp_trame, TRAME_SIZE) == temp_trame[TRAME_SIZE - 1]) {
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	213c      	movs	r1, #60	@ 0x3c
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fca5 	bl	8003348 <tarvos_checksum>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d12b      	bne.n	8001a62 <startTarvosDecode+0x1e2>

	                      memcpy(tarvos_DATA, temp_trame, TRAME_SIZE);
 8001a0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <startTarvosDecode+0x254>)
 8001a0c:	f107 0414 	add.w	r4, r7, #20
 8001a10:	469c      	mov	ip, r3
 8001a12:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001a16:	4665      	mov	r5, ip
 8001a18:	4626      	mov	r6, r4
 8001a1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a1c:	6028      	str	r0, [r5, #0]
 8001a1e:	6069      	str	r1, [r5, #4]
 8001a20:	60aa      	str	r2, [r5, #8]
 8001a22:	60eb      	str	r3, [r5, #12]
 8001a24:	3410      	adds	r4, #16
 8001a26:	f10c 0c10 	add.w	ip, ip, #16
 8001a2a:	4574      	cmp	r4, lr
 8001a2c:	d1f3      	bne.n	8001a16 <startTarvosDecode+0x196>
 8001a2e:	4665      	mov	r5, ip
 8001a30:	4623      	mov	r3, r4
 8001a32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a34:	6028      	str	r0, [r5, #0]
 8001a36:	6069      	str	r1, [r5, #4]
 8001a38:	60aa      	str	r2, [r5, #8]
	                      decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8001a3a:	4926      	ldr	r1, [pc, #152]	@ (8001ad4 <startTarvosDecode+0x254>)
 8001a3c:	4826      	ldr	r0, [pc, #152]	@ (8001ad8 <startTarvosDecode+0x258>)
 8001a3e:	f001 fb95 	bl	800316c <decode_payload>
	                  if (data_index == TRAME_SIZE) {
 8001a42:	e00e      	b.n	8001a62 <startTarvosDecode+0x1e2>
	                	  }

	                  }
	              } else {
	                  // Entête invalide : skip 1 octet
	                  read_index = (read_index + 1) % CIRC_BUF_SIZE;
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	425a      	negs	r2, r3
 8001a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a56:	bf58      	it	pl
 8001a58:	4253      	negpl	r3, r2
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	e000      	b.n	8001a64 <startTarvosDecode+0x1e4>
	                  if (data_index == TRAME_SIZE) {
 8001a62:	bf00      	nop
	          while (read_index != write_index) {
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <startTarvosDecode+0x248>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <startTarvosDecode+0x250>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f47f af13 	bne.w	800189c <startTarvosDecode+0x1c>
	          }




		if(flag_fin==1){
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <startTarvosDecode+0x25c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <startTarvosDecode+0x204>

			osThreadSuspend(NULL);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f00d fd8d 	bl	800f59e <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <startTarvosDecode+0x244>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t cycles= end1-start1;
 8001a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	657b      	str	r3, [r7, #84]	@ 0x54

		  timedecode=(float) cycles/(SystemCoreClock/1000000.0f);
 8001a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <startTarvosDecode+0x260>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa8:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8001ae4 <startTarvosDecode+0x264>
 8001aac:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <startTarvosDecode+0x268>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]

vTaskDelay(pdMS_TO_TICKS(30));
 8001aba:	201e      	movs	r0, #30
 8001abc:	f00e fd8c 	bl	80105d8 <vTaskDelay>
  {
 8001ac0:	e6e8      	b.n	8001894 <startTarvosDecode+0x14>
 8001ac2:	bf00      	nop
 8001ac4:	e0001000 	.word	0xe0001000
 8001ac8:	200016aa 	.word	0x200016aa
 8001acc:	200014a8 	.word	0x200014a8
 8001ad0:	200016a8 	.word	0x200016a8
 8001ad4:	20000444 	.word	0x20000444
 8001ad8:	20000b00 	.word	0x20000b00
 8001adc:	20000cc4 	.word	0x20000cc4
 8001ae0:	20000020 	.word	0x20000020
 8001ae4:	49742400 	.word	0x49742400
 8001ae8:	2000030c 	.word	0x2000030c

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_DMA_Init+0x80>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	200b      	movs	r0, #11
 8001b28:	f004 fac4 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b2c:	200b      	movs	r0, #11
 8001b2e:	f004 fadb 	bl	80060e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	200c      	movs	r0, #12
 8001b38:	f004 fabc 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f004 fad3 	bl	80060e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2105      	movs	r1, #5
 8001b46:	200d      	movs	r0, #13
 8001b48:	f004 fab4 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f004 facb 	bl	80060e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	200e      	movs	r0, #14
 8001b58:	f004 faac 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	f004 fac3 	bl	80060e8 <HAL_NVIC_EnableIRQ>

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	4a48      	ldr	r2, [pc, #288]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b92:	4b46      	ldr	r3, [pc, #280]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a42      	ldr	r2, [pc, #264]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a3c      	ldr	r2, [pc, #240]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	4831      	ldr	r0, [pc, #196]	@ (8001cb0 <MX_GPIO_Init+0x140>)
 8001bec:	f004 ff4a 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001bf6:	482f      	ldr	r0, [pc, #188]	@ (8001cb4 <MX_GPIO_Init+0x144>)
 8001bf8:	f004 ff44 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c00:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c14:	f004 fdb4 	bl	8006780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c18:	2310      	movs	r3, #16
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4820      	ldr	r0, [pc, #128]	@ (8001cb0 <MX_GPIO_Init+0x140>)
 8001c30:	f004 fda6 	bl	8006780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c34:	2302      	movs	r3, #2
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c38:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	481a      	ldr	r0, [pc, #104]	@ (8001cb4 <MX_GPIO_Init+0x144>)
 8001c4a:	f004 fd99 	bl	8006780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4814      	ldr	r0, [pc, #80]	@ (8001cb4 <MX_GPIO_Init+0x144>)
 8001c62:	f004 fd8d 	bl	8006780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001c66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <MX_GPIO_Init+0x144>)
 8001c80:	f004 fd7e 	bl	8006780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2105      	movs	r1, #5
 8001c88:	2007      	movs	r0, #7
 8001c8a:	f004 fa13 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c8e:	2007      	movs	r0, #7
 8001c90:	f004 fa2a 	bl	80060e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f004 fa0b 	bl	80060b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f004 fa22 	bl	80060e8 <HAL_NVIC_EnableIRQ>

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <MX_I2C3_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40621236;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <MX_I2C3_Init+0x7c>)
 8001cc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cf4:	f004 ff01 	bl	8006afa <HAL_I2C_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001cfe:	f000 faa9 	bl	8002254 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4809      	ldr	r0, [pc, #36]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001d06:	f005 fb15 	bl	8007334 <HAL_I2CEx_ConfigAnalogFilter>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f000 faa0 	bl	8002254 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001d18:	f005 fb57 	bl	80073ca <HAL_I2CEx_ConfigDigitalFilter>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f000 fa97 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000370 	.word	0x20000370
 8001d30:	40007800 	.word	0x40007800
 8001d34:	40621236 	.word	0x40621236

08001d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09c      	sub	sp, #112	@ 0x70
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	2244      	movs	r2, #68	@ 0x44
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f010 ff26 	bl	8012baa <memset>
  if(i2cHandle->Instance==I2C3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <HAL_I2C_MspInit+0xe4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d155      	bne.n	8001e14 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 f984 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d82:	f000 fa67 	bl	8002254 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	4a25      	ldr	r2, [pc, #148]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd6:	f004 fcd3 	bl	8006780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001dec:	2308      	movs	r3, #8
 8001dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001df4:	4619      	mov	r1, r3
 8001df6:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <HAL_I2C_MspInit+0xec>)
 8001df8:	f004 fcc2 	bl	8006780 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001e02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e14:	bf00      	nop
 8001e16:	3770      	adds	r7, #112	@ 0x70
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40007800 	.word	0x40007800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000800 	.word	0x48000800

08001e28 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <LED_Init+0x3c>)
 8001e30:	f007 f808 	bl	8008e44 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	80fb      	strh	r3, [r7, #6]
 8001e3c:	e006      	b.n	8001e4c <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <LED_Init+0x40>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	80fb      	strh	r3, [r7, #6]
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001e52:	d9f4      	bls.n	8001e3e <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <LED_Init+0x44>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001e5a:	797b      	ldrb	r3, [r7, #5]




}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20001264 	.word	0x20001264
 8001e68:	20000b7c 	.word	0x20000b7c
 8001e6c:	20000cb5 	.word	0x20000cb5

08001e70 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b08b      	sub	sp, #44	@ 0x2c
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	4603      	mov	r3, r0
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	460b      	mov	r3, r1
 8001e88:	717b      	strb	r3, [r7, #5]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001e9e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001ea2:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001ea4:	793b      	ldrb	r3, [r7, #4]
 8001ea6:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001ea8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001eac:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	e007      	b.n	8001ec4 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001eb4:	4a35      	ldr	r2, [pc, #212]	@ (8001f8c <LED_Setcolour+0x11c>)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	4413      	add	r3, r2
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001eca:	ddf3      	ble.n	8001eb4 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77fb      	strb	r3, [r7, #31]
 8001ed0:	e032      	b.n	8001f38 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	77bb      	strb	r3, [r7, #30]
 8001ed6:	e029      	b.n	8001f2c <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e020      	b.n	8001f20 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001ede:	7ffa      	ldrb	r2, [r7, #31]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	441a      	add	r2, r3
 8001ee6:	7fbb      	ldrb	r3, [r7, #30]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3328      	adds	r3, #40	@ 0x28
 8001eec:	443b      	add	r3, r7
 8001eee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa42 f303 	asr.w	r3, r2, r3
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001f02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f04:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <LED_Setcolour+0x11c>)
 8001f06:	2199      	movs	r1, #153	@ 0x99
 8001f08:	54d1      	strb	r1, [r2, r3]
 8001f0a:	e003      	b.n	8001f14 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001f0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <LED_Setcolour+0x11c>)
 8001f10:	2133      	movs	r1, #51	@ 0x33
 8001f12:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001f14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f16:	3301      	adds	r3, #1
 8001f18:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b07      	cmp	r3, #7
 8001f24:	dddb      	ble.n	8001ede <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8001f26:	7fbb      	ldrb	r3, [r7, #30]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	77bb      	strb	r3, [r7, #30]
 8001f2c:	7fbb      	ldrb	r3, [r7, #30]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d9d2      	bls.n	8001ed8 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	3301      	adds	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d9c9      	bls.n	8001ed2 <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e009      	b.n	8001f58 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8001f44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <LED_Setcolour+0x11c>)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8001f4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f4e:	3301      	adds	r3, #1
 8001f50:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f5e:	dbf1      	blt.n	8001f44 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e009      	b.n	8001f7a <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8001f66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f68:	4a08      	ldr	r2, [pc, #32]	@ (8001f8c <LED_Setcolour+0x11c>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8001f6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f70:	3301      	adds	r3, #1
 8001f72:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	3301      	adds	r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	ddf2      	ble.n	8001f66 <LED_Setcolour+0xf6>
		}

	LED_Update();
 8001f80:	f000 f806 	bl	8001f90 <LED_Update>

}
 8001f84:	bf00      	nop
 8001f86:	372c      	adds	r7, #44	@ 0x2c
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000b7c 	.word	0x20000b7c

08001f90 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8001f96:	f240 1339 	movw	r3, #313	@ 0x139
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <LED_Update+0x30>)
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <LED_Update+0x34>)
 8001fa0:	f006 ffb2 	bl	8008f08 <HAL_TIM_PWM_Start_DMA>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <LED_Update+0x38>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000b7c 	.word	0x20000b7c
 8001fc4:	20001264 	.word	0x20001264
 8001fc8:	20000cb5 	.word	0x20000cb5

08001fcc <LED_Callback>:



void LED_Callback(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <LED_Callback+0x18>)
 8001fd4:	f007 f9b0 	bl	8009338 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <LED_Callback+0x1c>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]


}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20001264 	.word	0x20001264
 8001fe8:	20000cb5 	.word	0x20000cb5

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8001ff4:	f7ff ffea 	bl	8001fcc <LED_Callback>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002006:	f002 fa8e 	bl	8004526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200a:	f000 f8c7 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200e:	f7ff fdaf 	bl	8001b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002012:	f7ff fd6b 	bl	8001aec <MX_DMA_Init>
  MX_ADC1_Init();
 8002016:	f7ff f82b 	bl	8001070 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800201a:	f001 fbd1 	bl	80037c0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800201e:	f001 fa2b 	bl	8003478 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002022:	f001 f9b3 	bl	800338c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002026:	f000 f997 	bl	8002358 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800202a:	f00a fa97 	bl	800c55c <MX_FATFS_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <main+0x38>
    Error_Handler();
 8002034:	f000 f90e 	bl	8002254 <Error_Handler>
  }
  MX_TIM4_Init();
 8002038:	f001 fa96 	bl	8003568 <MX_TIM4_Init>
  MX_I2C3_Init();
 800203c:	f7ff fe3c 	bl	8001cb8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002040:	f000 fa44 	bl	80024cc <ssd1306_Init>
    ssd1306_Fill(Black);
 8002044:	2000      	movs	r0, #0
 8002046:	f000 faab 	bl	80025a0 <ssd1306_Fill>
    ssd1306_SetCursor(32, 40);
 800204a:	2128      	movs	r1, #40	@ 0x28
 800204c:	2020      	movs	r0, #32
 800204e:	f000 fbe9 	bl	8002824 <ssd1306_SetCursor>
    ssd1306_WriteString("Init...", Font_7x10, White);
 8002052:	4a42      	ldr	r2, [pc, #264]	@ (800215c <main+0x15c>)
 8002054:	2301      	movs	r3, #1
 8002056:	ca06      	ldmia	r2, {r1, r2}
 8002058:	4841      	ldr	r0, [pc, #260]	@ (8002160 <main+0x160>)
 800205a:	f000 fbbd 	bl	80027d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800205e:	f000 fab7 	bl	80025d0 <ssd1306_UpdateScreen>



  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002068:	483e      	ldr	r0, [pc, #248]	@ (8002164 <main+0x164>)
 800206a:	f004 fd0b 	bl	8006a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002074:	483b      	ldr	r0, [pc, #236]	@ (8002164 <main+0x164>)
 8002076:	f004 fd05 	bl	8006a84 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 800207a:	200a      	movs	r0, #10
 800207c:	f002 fa8a 	bl	8004594 <HAL_Delay>

  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002080:	2203      	movs	r2, #3
 8002082:	4939      	ldr	r1, [pc, #228]	@ (8002168 <main+0x168>)
 8002084:	4839      	ldr	r0, [pc, #228]	@ (800216c <main+0x16c>)
 8002086:	f002 fe6b 	bl	8004d60 <HAL_ADC_Start_DMA>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <main+0x96>
 	 pbmseeker=1;
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <main+0x170>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
   }



  if(  LED_Init()!=HAL_OK){
 8002096:	f7ff fec7 	bl	8001e28 <LED_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <main+0xa6>
 	 pbmseeker=1;
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <main+0x170>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]


   }

  if( INIT_PERM_TARVOS(SAT_ADDR, GROUND_ADDR)!=HAL_OK){
 80020a6:	2101      	movs	r1, #1
 80020a8:	2010      	movs	r0, #16
 80020aa:	f000 fe3b 	bl	8002d24 <INIT_PERM_TARVOS>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <main+0xba>
 	 pbmseeker=1;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <main+0x170>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]


   }


  HAL_Delay(100);
 80020ba:	2064      	movs	r0, #100	@ 0x64
 80020bc:	f002 fa6a 	bl	8004594 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 80020c0:	482c      	ldr	r0, [pc, #176]	@ (8002174 <main+0x174>)
 80020c2:	f008 fd59 	bl	800ab78 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, dma_rx_buffer, DMA_CHUNK_SIZE)!=HAL_OK){
 80020c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ca:	492b      	ldr	r1, [pc, #172]	@ (8002178 <main+0x178>)
 80020cc:	4829      	ldr	r0, [pc, #164]	@ (8002174 <main+0x174>)
 80020ce:	f008 fd07 	bl	800aae0 <HAL_UART_Receive_DMA>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <main+0xde>
 	pbmseeker=1;
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <main+0x170>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 80020de:	4827      	ldr	r0, [pc, #156]	@ (800217c <main+0x17c>)
 80020e0:	f006 fe46 	bl	8008d70 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80020e4:	200a      	movs	r0, #10
 80020e6:	f002 fa55 	bl	8004594 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 80020ea:	2201      	movs	r2, #1
 80020ec:	4924      	ldr	r1, [pc, #144]	@ (8002180 <main+0x180>)
 80020ee:	4825      	ldr	r0, [pc, #148]	@ (8002184 <main+0x184>)
 80020f0:	f00c f830 	bl	800e154 <f_mount>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <main+0x188>)
 80020fa:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 80020fc:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <main+0x188>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d125      	bne.n	8002150 <main+0x150>
  			  fres = f_mkdir("DEMO");
 8002104:	4821      	ldr	r0, [pc, #132]	@ (800218c <main+0x18c>)
 8002106:	f00c fef9 	bl	800eefc <f_mkdir>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <main+0x188>)
 8002110:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8002112:	2212      	movs	r2, #18
 8002114:	491e      	ldr	r1, [pc, #120]	@ (8002190 <main+0x190>)
 8002116:	481f      	ldr	r0, [pc, #124]	@ (8002194 <main+0x194>)
 8002118:	f00c f880 	bl	800e21c <f_open>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <main+0x188>)
 8002122:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <main+0x188>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10c      	bne.n	8002146 <main+0x146>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	220b      	movs	r2, #11
 8002130:	4919      	ldr	r1, [pc, #100]	@ (8002198 <main+0x198>)
 8002132:	4818      	ldr	r0, [pc, #96]	@ (8002194 <main+0x194>)
 8002134:	f00c fa33 	bl	800e59e <f_write>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <main+0x188>)
 800213e:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002140:	4814      	ldr	r0, [pc, #80]	@ (8002194 <main+0x194>)
 8002142:	f00c fc59 	bl	800e9f8 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002146:	2200      	movs	r2, #0
 8002148:	490d      	ldr	r1, [pc, #52]	@ (8002180 <main+0x180>)
 800214a:	2000      	movs	r0, #0
 800214c:	f00c f802 	bl	800e154 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002150:	f7ff f974 	bl	800143c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002154:	f00d f8af 	bl	800f2b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <main+0x158>
 800215c:	20000010 	.word	0x20000010
 8002160:	08016c5c 	.word	0x08016c5c
 8002164:	48000400 	.word	0x48000400
 8002168:	20000aec 	.word	0x20000aec
 800216c:	2000022c 	.word	0x2000022c
 8002170:	20000cc8 	.word	0x20000cc8
 8002174:	200016ac 	.word	0x200016ac
 8002178:	200013a8 	.word	0x200013a8
 800217c:	200012fc 	.word	0x200012fc
 8002180:	08016c64 	.word	0x08016c64
 8002184:	20000684 	.word	0x20000684
 8002188:	200008b8 	.word	0x200008b8
 800218c:	08016c68 	.word	0x08016c68
 8002190:	08016c70 	.word	0x08016c70
 8002194:	200008bc 	.word	0x200008bc
 8002198:	08016c80 	.word	0x08016c80

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	@ 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2238      	movs	r2, #56	@ 0x38
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f010 fcfd 	bl	8012baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021be:	2000      	movs	r0, #0
 80021c0:	f005 f950 	bl	8007464 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	2303      	movs	r3, #3
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80021d6:	2304      	movs	r3, #4
 80021d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80021da:	2355      	movs	r3, #85	@ 0x55
 80021dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021de:	2302      	movs	r3, #2
 80021e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021e6:	2302      	movs	r3, #2
 80021e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ea:	f107 0318 	add.w	r3, r7, #24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 f9ec 	bl	80075cc <HAL_RCC_OscConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80021fa:	f000 f82b 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fe:	230f      	movs	r3, #15
 8002200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2303      	movs	r3, #3
 8002204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2104      	movs	r1, #4
 8002216:	4618      	mov	r0, r3
 8002218:	f005 fcea 	bl	8007bf0 <HAL_RCC_ClockConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002222:	f000 f817 	bl	8002254 <Error_Handler>
  }
}
 8002226:	bf00      	nop
 8002228:	3750      	adds	r7, #80	@ 0x50
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002242:	f002 f989 	bl	8004558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <Error_Handler+0x8>

08002260 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 8002260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002264:	b08f      	sub	sp, #60	@ 0x3c
 8002266:	af0a      	add	r7, sp, #40	@ 0x28
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]

	uint16_t sizeligne=0;
 800226c:	2300      	movs	r3, #0
 800226e:	81fb      	strh	r3, [r7, #14]

	sizeligne=snprintf((char *)sdcardbuffer,256,"%0.1f,%0.1f,%d,%0.2f,%lu\n\r",temp,vbat,vraiRSSI,distance_RSSI,timeindex);
 8002270:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <store_in_sd+0xcc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f98f 	bl	8000598 <__aeabi_f2d>
 800227a:	4604      	mov	r4, r0
 800227c:	460d      	mov	r5, r1
 800227e:	4b2c      	ldr	r3, [pc, #176]	@ (8002330 <store_in_sd+0xd0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f988 	bl	8000598 <__aeabi_f2d>
 8002288:	4680      	mov	r8, r0
 800228a:	4689      	mov	r9, r1
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <store_in_sd+0xd4>)
 800228e:	f993 3000 	ldrsb.w	r3, [r3]
 8002292:	461e      	mov	r6, r3
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <store_in_sd+0xd8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f97d 	bl	8000598 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4926      	ldr	r1, [pc, #152]	@ (800233c <store_in_sd+0xdc>)
 80022a4:	6809      	ldr	r1, [r1, #0]
 80022a6:	9108      	str	r1, [sp, #32]
 80022a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022ac:	9604      	str	r6, [sp, #16]
 80022ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022b2:	e9cd 4500 	strd	r4, r5, [sp]
 80022b6:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <store_in_sd+0xe0>)
 80022b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022bc:	4821      	ldr	r0, [pc, #132]	@ (8002344 <store_in_sd+0xe4>)
 80022be:	f010 fbd9 	bl	8012a74 <sniprintf>
 80022c2:	4603      	mov	r3, r0
 80022c4:	81fb      	strh	r3, [r7, #14]




			  if (fres == FR_OK) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d129      	bne.n	8002320 <store_in_sd+0xc0>
				  if(flag_drop==0){
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <store_in_sd+0xe8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <store_in_sd+0x84>
			  fres = f_open(&fil, (uint8_t *) "SAT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80022d4:	2212      	movs	r2, #18
 80022d6:	491d      	ldr	r1, [pc, #116]	@ (800234c <store_in_sd+0xec>)
 80022d8:	481d      	ldr	r0, [pc, #116]	@ (8002350 <store_in_sd+0xf0>)
 80022da:	f00b ff9f 	bl	800e21c <f_open>
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e006      	b.n	80022f2 <store_in_sd+0x92>

				  }
				  else{
					  fres = f_open(&fil, (uint8_t *) "SAT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80022e4:	2212      	movs	r2, #18
 80022e6:	491b      	ldr	r1, [pc, #108]	@ (8002354 <store_in_sd+0xf4>)
 80022e8:	4819      	ldr	r0, [pc, #100]	@ (8002350 <store_in_sd+0xf0>)
 80022ea:	f00b ff97 	bl	800e21c <f_open>
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]

				  }
				  if (fres == FR_OK) {
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d113      	bne.n	8002320 <store_in_sd+0xc0>
					  fres=f_lseek(&fil, f_size(&fil));
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <store_in_sd+0xf0>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	@ (8002350 <store_in_sd+0xf0>)
 8002300:	f00c fba9 	bl	800ea56 <f_lseek>
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 8002308:	89fa      	ldrh	r2, [r7, #14]
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <store_in_sd+0xe4>)
 8002310:	480f      	ldr	r0, [pc, #60]	@ (8002350 <store_in_sd+0xf0>)
 8002312:	f00c f944 	bl	800e59e <f_write>
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
					  f_close(&fil);
 800231a:	480d      	ldr	r0, [pc, #52]	@ (8002350 <store_in_sd+0xf0>)
 800231c:	f00c fb6c 	bl	800e9f8 <f_close>
				  }

			  }


	return fres;
 8002320:	79fb      	ldrb	r3, [r7, #7]

}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800232c:	20000af4 	.word	0x20000af4
 8002330:	20000afc 	.word	0x20000afc
 8002334:	200002fc 	.word	0x200002fc
 8002338:	20000300 	.word	0x20000300
 800233c:	20000ccc 	.word	0x20000ccc
 8002340:	08016c8c 	.word	0x08016c8c
 8002344:	20000484 	.word	0x20000484
 8002348:	20000cb8 	.word	0x20000cb8
 800234c:	08016ca8 	.word	0x08016ca8
 8002350:	200008bc 	.word	0x200008bc
 8002354:	08016cb4 	.word	0x08016cb4

08002358 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <MX_SPI1_Init+0x74>)
 800235e:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <MX_SPI1_Init+0x78>)
 8002360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <MX_SPI1_Init+0x74>)
 8002364:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <MX_SPI1_Init+0x74>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <MX_SPI1_Init+0x74>)
 8002372:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <MX_SPI1_Init+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800237e:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <MX_SPI1_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_SPI1_Init+0x74>)
 8002386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_SPI1_Init+0x74>)
 800238e:	2220      	movs	r2, #32
 8002390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_SPI1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_SPI1_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <MX_SPI1_Init+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_SPI1_Init+0x74>)
 80023a6:	2207      	movs	r2, #7
 80023a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <MX_SPI1_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_SPI1_Init+0x74>)
 80023b2:	2208      	movs	r2, #8
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_SPI1_Init+0x74>)
 80023b8:	f006 f854 	bl	8008464 <HAL_SPI_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023c2:	f7ff ff47 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000cd0 	.word	0x20000cd0
 80023d0:	40013000 	.word	0x40013000

080023d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_SPI_MspInit+0x7c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d128      	bne.n	8002448 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f6:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fa:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 80023fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002400:	6613      	str	r3, [r2, #96]	@ 0x60
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 8002404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_SPI_MspInit+0x80>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002426:	23e0      	movs	r3, #224	@ 0xe0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002436:	2305      	movs	r3, #5
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002444:	f004 f99c 	bl	8006780 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40013000 	.word	0x40013000
 8002454:	40021000 	.word	0x40021000

08002458 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af04      	add	r7, sp, #16
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2301      	movs	r3, #1
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2301      	movs	r3, #1
 8002482:	2200      	movs	r2, #0
 8002484:	2178      	movs	r1, #120	@ 0x78
 8002486:	4803      	ldr	r0, [pc, #12]	@ (8002494 <ssd1306_WriteCommand+0x2c>)
 8002488:	f004 fbd2 	bl	8006c30 <HAL_I2C_Mem_Write>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000370 	.word	0x20000370

08002498 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af04      	add	r7, sp, #16
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295
 80024aa:	9202      	str	r2, [sp, #8]
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2240      	movs	r2, #64	@ 0x40
 80024b6:	2178      	movs	r1, #120	@ 0x78
 80024b8:	4803      	ldr	r0, [pc, #12]	@ (80024c8 <ssd1306_WriteData+0x30>)
 80024ba:	f004 fbb9 	bl	8006c30 <HAL_I2C_Mem_Write>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000370 	.word	0x20000370

080024cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80024d0:	f7ff ffc2 	bl	8002458 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80024d4:	2064      	movs	r0, #100	@ 0x64
 80024d6:	f002 f85d 	bl	8004594 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f9ce 	bl	800287c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80024e0:	2020      	movs	r0, #32
 80024e2:	f7ff ffc1 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7ff ffbe 	bl	8002468 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024ec:	20b0      	movs	r0, #176	@ 0xb0
 80024ee:	f7ff ffbb 	bl	8002468 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80024f2:	20c8      	movs	r0, #200	@ 0xc8
 80024f4:	f7ff ffb8 	bl	8002468 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff ffb5 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80024fe:	2010      	movs	r0, #16
 8002500:	f7ff ffb2 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002504:	2040      	movs	r0, #64	@ 0x40
 8002506:	f7ff ffaf 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800250a:	20ff      	movs	r0, #255	@ 0xff
 800250c:	f000 f9a2 	bl	8002854 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002510:	20a1      	movs	r0, #161	@ 0xa1
 8002512:	f7ff ffa9 	bl	8002468 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002516:	20a6      	movs	r0, #166	@ 0xa6
 8002518:	f7ff ffa6 	bl	8002468 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800251c:	20a8      	movs	r0, #168	@ 0xa8
 800251e:	f7ff ffa3 	bl	8002468 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002522:	203f      	movs	r0, #63	@ 0x3f
 8002524:	f7ff ffa0 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002528:	20a4      	movs	r0, #164	@ 0xa4
 800252a:	f7ff ff9d 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800252e:	20d3      	movs	r0, #211	@ 0xd3
 8002530:	f7ff ff9a 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff ff97 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800253a:	20d5      	movs	r0, #213	@ 0xd5
 800253c:	f7ff ff94 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002540:	20f0      	movs	r0, #240	@ 0xf0
 8002542:	f7ff ff91 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002546:	20d9      	movs	r0, #217	@ 0xd9
 8002548:	f7ff ff8e 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800254c:	2022      	movs	r0, #34	@ 0x22
 800254e:	f7ff ff8b 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002552:	20da      	movs	r0, #218	@ 0xda
 8002554:	f7ff ff88 	bl	8002468 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002558:	2012      	movs	r0, #18
 800255a:	f7ff ff85 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800255e:	20db      	movs	r0, #219	@ 0xdb
 8002560:	f7ff ff82 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002564:	2020      	movs	r0, #32
 8002566:	f7ff ff7f 	bl	8002468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800256a:	208d      	movs	r0, #141	@ 0x8d
 800256c:	f7ff ff7c 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002570:	2014      	movs	r0, #20
 8002572:	f7ff ff79 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002576:	2001      	movs	r0, #1
 8002578:	f000 f980 	bl	800287c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800257c:	2000      	movs	r0, #0
 800257e:	f000 f80f 	bl	80025a0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002582:	f000 f825 	bl	80025d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <ssd1306_Init+0xd0>)
 8002588:	2200      	movs	r2, #0
 800258a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <ssd1306_Init+0xd0>)
 800258e:	2200      	movs	r2, #0
 8002590:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002592:	4b02      	ldr	r3, [pc, #8]	@ (800259c <ssd1306_Init+0xd0>)
 8002594:	2201      	movs	r2, #1
 8002596:	711a      	strb	r2, [r3, #4]
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001134 	.word	0x20001134

080025a0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <ssd1306_Fill+0x14>
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <ssd1306_Fill+0x16>
 80025b4:	23ff      	movs	r3, #255	@ 0xff
 80025b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ba:	4619      	mov	r1, r3
 80025bc:	4803      	ldr	r0, [pc, #12]	@ (80025cc <ssd1306_Fill+0x2c>)
 80025be:	f010 faf4 	bl	8012baa <memset>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000d34 	.word	0x20000d34

080025d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	e016      	b.n	800260a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	3b50      	subs	r3, #80	@ 0x50
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff40 	bl	8002468 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff ff3d 	bl	8002468 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80025ee:	2010      	movs	r0, #16
 80025f0:	f7ff ff3a 	bl	8002468 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4a08      	ldr	r2, [pc, #32]	@ (800261c <ssd1306_UpdateScreen+0x4c>)
 80025fa:	4413      	add	r3, r2
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff4a 	bl	8002498 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	3301      	adds	r3, #1
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d9e5      	bls.n	80025dc <ssd1306_UpdateScreen+0xc>
    }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000d34 	.word	0x20000d34

08002620 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db3d      	blt.n	80026b6 <ssd1306_DrawPixel+0x96>
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	2b3f      	cmp	r3, #63	@ 0x3f
 800263e:	d83a      	bhi.n	80026b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002640:	797b      	ldrb	r3, [r7, #5]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d11a      	bne.n	800267c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	b2d8      	uxtb	r0, r3
 800264e:	4603      	mov	r3, r0
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	4413      	add	r3, r2
 8002654:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <ssd1306_DrawPixel+0xa4>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	b25a      	sxtb	r2, r3
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b259      	sxtb	r1, r3
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	4603      	mov	r3, r0
 8002670:	01db      	lsls	r3, r3, #7
 8002672:	4413      	add	r3, r2
 8002674:	b2c9      	uxtb	r1, r1
 8002676:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <ssd1306_DrawPixel+0xa4>)
 8002678:	54d1      	strb	r1, [r2, r3]
 800267a:	e01d      	b.n	80026b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	b2d8      	uxtb	r0, r3
 8002684:	4603      	mov	r3, r0
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	4413      	add	r3, r2
 800268a:	4a0e      	ldr	r2, [pc, #56]	@ (80026c4 <ssd1306_DrawPixel+0xa4>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	b25a      	sxtb	r2, r3
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	b25b      	sxtb	r3, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	4013      	ands	r3, r2
 80026a4:	b259      	sxtb	r1, r3
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	4603      	mov	r3, r0
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <ssd1306_DrawPixel+0xa4>)
 80026b2:	54d1      	strb	r1, [r2, r3]
 80026b4:	e000      	b.n	80026b8 <ssd1306_DrawPixel+0x98>
        return;
 80026b6:	bf00      	nop
    }
}
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000d34 	.word	0x20000d34

080026c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4604      	mov	r4, r0
 80026d0:	1d38      	adds	r0, r7, #4
 80026d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80026d6:	461a      	mov	r2, r3
 80026d8:	4623      	mov	r3, r4
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	4613      	mov	r3, r2
 80026de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b1f      	cmp	r3, #31
 80026e4:	d902      	bls.n	80026ec <ssd1306_WriteChar+0x24>
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80026ea:	d901      	bls.n	80026f0 <ssd1306_WriteChar+0x28>
        return 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e06c      	b.n	80027ca <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80026f0:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	793b      	ldrb	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	2b80      	cmp	r3, #128	@ 0x80
 80026fc:	dc06      	bgt.n	800270c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80026fe:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 8002700:	885b      	ldrh	r3, [r3, #2]
 8002702:	461a      	mov	r2, r3
 8002704:	797b      	ldrb	r3, [r7, #5]
 8002706:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002708:	2b40      	cmp	r3, #64	@ 0x40
 800270a:	dd01      	ble.n	8002710 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800270c:	2300      	movs	r3, #0
 800270e:	e05c      	b.n	80027ca <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e04c      	b.n	80027b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3b20      	subs	r3, #32
 800271c:	7979      	ldrb	r1, [r7, #5]
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4619      	mov	r1, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	440b      	add	r3, r1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e034      	b.n	80027a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4413      	add	r3, r2
 8002752:	b2d8      	uxtb	r0, r3
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 8002756:	885b      	ldrh	r3, [r3, #2]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	7bba      	ldrb	r2, [r7, #14]
 8002764:	4619      	mov	r1, r3
 8002766:	f7ff ff5b 	bl	8002620 <ssd1306_DrawPixel>
 800276a:	e016      	b.n	800279a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800276c:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4413      	add	r3, r2
 8002778:	b2d8      	uxtb	r0, r3
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 800277c:	885b      	ldrh	r3, [r3, #2]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4413      	add	r3, r2
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	f7ff ff43 	bl	8002620 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	793b      	ldrb	r3, [r7, #4]
 80027a2:	461a      	mov	r2, r3
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d3c5      	bcc.n	8002736 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	797b      	ldrb	r3, [r7, #5]
 80027b2:	461a      	mov	r2, r3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d3ad      	bcc.n	8002716 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	793a      	ldrb	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <ssd1306_WriteChar+0x10c>)
 80027c6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20001134 	.word	0x20001134

080027d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	1d38      	adds	r0, r7, #4
 80027e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80027e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80027e8:	e012      	b.n	8002810 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	7818      	ldrb	r0, [r3, #0]
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	1d3a      	adds	r2, r7, #4
 80027f2:	ca06      	ldmia	r2, {r1, r2}
 80027f4:	f7ff ff68 	bl	80026c8 <ssd1306_WriteChar>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d002      	beq.n	800280a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	e008      	b.n	800281c <ssd1306_WriteString+0x44>
        }
        str++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e8      	bne.n	80027ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	781b      	ldrb	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	71fb      	strb	r3, [r7, #7]
 8002830:	4613      	mov	r3, r2
 8002832:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <ssd1306_SetCursor+0x2c>)
 800283a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <ssd1306_SetCursor+0x2c>)
 8002842:	805a      	strh	r2, [r3, #2]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20001134 	.word	0x20001134

08002854 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800285e:	2381      	movs	r3, #129	@ 0x81
 8002860:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fdff 	bl	8002468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fdfb 	bl	8002468 <ssd1306_WriteCommand>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800288c:	23af      	movs	r3, #175	@ 0xaf
 800288e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002890:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <ssd1306_SetDisplayOn+0x38>)
 8002892:	2201      	movs	r2, #1
 8002894:	715a      	strb	r2, [r3, #5]
 8002896:	e004      	b.n	80028a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002898:	23ae      	movs	r3, #174	@ 0xae
 800289a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <ssd1306_SetDisplayOn+0x38>)
 800289e:	2200      	movs	r2, #0
 80028a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fddf 	bl	8002468 <ssd1306_WriteCommand>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20001134 	.word	0x20001134

080028b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_MspInit+0x50>)
 80028c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c2:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_MspInit+0x50>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_MspInit+0x50>)
 80028cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_MspInit+0x50>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <HAL_MspInit+0x50>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_MspInit+0x50>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	210f      	movs	r1, #15
 80028f2:	f06f 0001 	mvn.w	r0, #1
 80028f6:	f003 fbdd 	bl	80060b4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028fa:	f004 fe57 	bl	80075ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	@ 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800291c:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_InitTick+0xc4>)
 800291e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002920:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <HAL_InitTick+0xc4>)
 8002922:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002926:	6613      	str	r3, [r2, #96]	@ 0x60
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_InitTick+0xc4>)
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002934:	f107 020c 	add.w	r2, r7, #12
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f005 fb2a 	bl	8007f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002944:	f005 fb12 	bl	8007f6c <HAL_RCC_GetPCLK2Freq>
 8002948:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <HAL_InitTick+0xc8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3b01      	subs	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002958:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_InitTick+0xcc>)
 800295a:	4a20      	ldr	r2, [pc, #128]	@ (80029dc <HAL_InitTick+0xd0>)
 800295c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_InitTick+0xcc>)
 8002960:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_InitTick+0xcc>)
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_InitTick+0xcc>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_InitTick+0xcc>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002978:	4817      	ldr	r0, [pc, #92]	@ (80029d8 <HAL_InitTick+0xcc>)
 800297a:	f006 f9a1 	bl	8008cc0 <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d11b      	bne.n	80029c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800298c:	4812      	ldr	r0, [pc, #72]	@ (80029d8 <HAL_InitTick+0xcc>)
 800298e:	f006 f9ef 	bl	8008d70 <HAL_TIM_Base_Start_IT>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029a0:	2019      	movs	r0, #25
 80029a2:	f003 fba1 	bl	80060e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d808      	bhi.n	80029be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	2019      	movs	r0, #25
 80029b2:	f003 fb7f 	bl	80060b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_InitTick+0xd4>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e002      	b.n	80029c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80029c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3730      	adds	r7, #48	@ 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	2000113c 	.word	0x2000113c
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	20000028 	.word	0x20000028

080029e4 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b092      	sub	sp, #72	@ 0x48
 80029e8:	af08      	add	r7, sp, #32
 80029ea:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	9306      	str	r3, [sp, #24]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	9305      	str	r3, [sp, #20]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	9303      	str	r3, [sp, #12]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	4a03      	ldr	r2, [pc, #12]	@ (8002a48 <hard_fault_handler_c+0x64>)
 8002a3c:	21c8      	movs	r1, #200	@ 0xc8
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <hard_fault_handler_c+0x68>)
 8002a40:	f010 f818 	bl	8012a74 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <hard_fault_handler_c+0x60>
 8002a48:	08016cc0 	.word	0x08016cc0
 8002a4c:	20001188 	.word	0x20001188

08002a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <NMI_Handler+0x4>

08002a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8002a5c:	f01e 0f04 	tst.w	lr, #4
 8002a60:	bf0c      	ite	eq
 8002a62:	f3ef 8008 	mrseq	r0, MSP
 8002a66:	f3ef 8009 	mrsne	r0, PSP
 8002a6a:	f7ff bfbb 	b.w	80029e4 <hard_fault_handler_c>
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <HardFault_Handler+0x16>

08002a72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <MemManage_Handler+0x4>

08002a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <BusFault_Handler+0x4>

08002a82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <UsageFault_Handler+0x4>

08002a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f004 f809 	bl	8006ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002aaa:	2010      	movs	r0, #16
 8002aac:	f004 f802 	bl	8006ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <DMA1_Channel1_IRQHandler+0x10>)
 8002aba:	f003 fd06 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20001348 	.word	0x20001348

08002ac8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <DMA1_Channel2_IRQHandler+0x10>)
 8002ace:	f003 fcfc 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000298 	.word	0x20000298

08002adc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <DMA1_Channel3_IRQHandler+0x10>)
 8002ae2:	f003 fcf2 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20001740 	.word	0x20001740

08002af0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <DMA1_Channel4_IRQHandler+0x10>)
 8002af6:	f003 fce8 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200017a0 	.word	0x200017a0

08002b04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <ADC1_2_IRQHandler+0x10>)
 8002b0a:	f002 f9dd 	bl	8004ec8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000022c 	.word	0x2000022c

08002b18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b1e:	f006 fd03 	bl	8009528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000113c 	.word	0x2000113c

08002b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <TIM2_IRQHandler+0x10>)
 8002b32:	f006 fcf9 	bl	8009528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20001264 	.word	0x20001264

08002b40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <TIM4_IRQHandler+0x18>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a03      	ldr	r2, [pc, #12]	@ (8002b58 <TIM4_IRQHandler+0x18>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b4e:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <TIM4_IRQHandler+0x1c>)
 8002b50:	f006 fcea 	bl	8009528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000ccc 	.word	0x20000ccc
 8002b5c:	200012fc 	.word	0x200012fc

08002b60 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <LPUART1_IRQHandler+0x10>)
 8002b66:	f008 f915 	bl	800ad94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200016ac 	.word	0x200016ac

08002b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return 1;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_kill>:

int _kill(int pid, int sig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b8e:	f010 f8bd 	bl	8012d0c <__errno>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2216      	movs	r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
  return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_exit>:

void _exit (int status)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffe7 	bl	8002b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <_exit+0x12>

08002bba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e00a      	b.n	8002be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	60ba      	str	r2, [r7, #8]
 8002bd8:	b2ca      	uxtb	r2, r1
 8002bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dbf0      	blt.n	8002bcc <_read+0x12>
  }

  return len;
 8002bea:	687b      	ldr	r3, [r7, #4]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e009      	b.n	8002c1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	dbf1      	blt.n	8002c06 <_write+0x12>
  }
  return len;
 8002c22:	687b      	ldr	r3, [r7, #4]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_close>:

int _close(int file)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c54:	605a      	str	r2, [r3, #4]
  return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_isatty>:

int _isatty(int file)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f010 f822 	bl	8012d0c <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20008000 	.word	0x20008000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	20001250 	.word	0x20001250
 8002cfc:	20004a10 	.word	0x20004a10

08002d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	@ 0x38
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8002d34:	2306      	movs	r3, #6
 8002d36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8002d46:	4a6f      	ldr	r2, [pc, #444]	@ (8002f04 <INIT_PERM_TARVOS+0x1e0>)
 8002d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d50:	6018      	str	r0, [r3, #0]
 8002d52:	3304      	adds	r3, #4
 8002d54:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, CHANNEL, 0x00}; // 869.5 MHz -> 130 = 0x82
 8002d56:	4a6c      	ldr	r2, [pc, #432]	@ (8002f08 <INIT_PERM_TARVOS+0x1e4>)
 8002d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d60:	6018      	str	r0, [r3, #0]
 8002d62:	3304      	adds	r3, #4
 8002d64:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8002d66:	4a69      	ldr	r2, [pc, #420]	@ (8002f0c <INIT_PERM_TARVOS+0x1e8>)
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d70:	6018      	str	r0, [r3, #0]
 8002d72:	3304      	adds	r3, #4
 8002d74:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8002d76:	2302      	movs	r3, #2
 8002d78:	753b      	strb	r3, [r7, #20]
 8002d7a:	2309      	movs	r3, #9
 8002d7c:	757b      	strb	r3, [r7, #21]
 8002d7e:	2302      	movs	r3, #2
 8002d80:	75bb      	strb	r3, [r7, #22]
 8002d82:	230b      	movs	r3, #11
 8002d84:	75fb      	strb	r3, [r7, #23]
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	763b      	strb	r3, [r7, #24]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8002d8e:	2302      	movs	r3, #2
 8002d90:	733b      	strb	r3, [r7, #12]
 8002d92:	2309      	movs	r3, #9
 8002d94:	737b      	strb	r3, [r7, #13]
 8002d96:	2302      	movs	r3, #2
 8002d98:	73bb      	strb	r3, [r7, #14]
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	79bb      	ldrb	r3, [r7, #6]
 8002da0:	743b      	strb	r3, [r7, #16]
 8002da2:	2300      	movs	r3, #0
 8002da4:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8002da6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <INIT_PERM_TARVOS+0x1ec>)
 8002da8:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8002daa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8ac 	bl	8002f18 <Get_CRC8>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8002dc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002dd0:	2364      	movs	r3, #100	@ 0x64
 8002dd2:	4850      	ldr	r0, [pc, #320]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002dd4:	f007 fd76 	bl	800a8c4 <HAL_UART_Transmit>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8002de4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f88f 	bl	8002f18 <Get_CRC8>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8002e00:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002e0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e0e:	4841      	ldr	r0, [pc, #260]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002e10:	f007 fd58 	bl	800a8c4 <HAL_UART_Transmit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8002e20:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f871 	bl	8002f18 <Get_CRC8>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8002e3c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f107 011c 	add.w	r1, r7, #28
 8002e46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e4a:	4832      	ldr	r0, [pc, #200]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002e4c:	f007 fd3a 	bl	800a8c4 <HAL_UART_Transmit>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8002e5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f853 	bl	8002f18 <Get_CRC8>
 8002e72:	4603      	mov	r3, r0
 8002e74:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8002e76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f107 0114 	add.w	r1, r7, #20
 8002e80:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e84:	4823      	ldr	r0, [pc, #140]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002e86:	f007 fd1d 	bl	800a8c4 <HAL_UART_Transmit>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8002e96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f836 	bl	8002f18 <Get_CRC8>
 8002eac:	4603      	mov	r3, r0
 8002eae:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8002eb0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	f107 010c 	add.w	r1, r7, #12
 8002eba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ebe:	4815      	ldr	r0, [pc, #84]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002ec0:	f007 fd00 	bl	800a8c4 <HAL_UART_Transmit>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8002ed0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	f107 0108 	add.w	r1, r7, #8
 8002eda:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ede:	480d      	ldr	r0, [pc, #52]	@ (8002f14 <INIT_PERM_TARVOS+0x1f0>)
 8002ee0:	f007 fcf0 	bl	800a8c4 <HAL_UART_Transmit>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8002ef0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ef4:	f001 fb4e 	bl	8004594 <HAL_Delay>
    return status;
 8002ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3738      	adds	r7, #56	@ 0x38
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08016d4c 	.word	0x08016d4c
 8002f08:	08016d54 	.word	0x08016d54
 8002f0c:	08016d5c 	.word	0x08016d5c
 8002f10:	07000502 	.word	0x07000502
 8002f14:	200016ac 	.word	0x200016ac

08002f18 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002f28:	2300      	movs	r3, #0
 8002f2a:	81bb      	strh	r3, [r7, #12]
 8002f2c:	e009      	b.n	8002f42 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8002f2e:	89bb      	ldrh	r3, [r7, #12]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	4053      	eors	r3, r2
 8002f3a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002f3c:	89bb      	ldrh	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	81bb      	strh	r3, [r7, #12]
 8002f42:	89ba      	ldrh	r2, [r7, #12]
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3f1      	bcc.n	8002f2e <Get_CRC8+0x16>
	}
	return crc;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <SEND_DATA_NETW1>:


void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	b088      	sub	sp, #32
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	72fb      	strb	r3, [r7, #11]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	72bb      	strb	r3, [r7, #10]
 8002f6c:	466b      	mov	r3, sp
 8002f6e:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1d9e      	adds	r6, r3, #6
 8002f74:	1e73      	subs	r3, r6, #1
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	4632      	mov	r2, r6
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	4690      	mov	r8, r2
 8002f7e:	4699      	mov	r9, r3
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f94:	4632      	mov	r2, r6
 8002f96:	2300      	movs	r3, #0
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	00eb      	lsls	r3, r5, #3
 8002fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002faa:	00e2      	lsls	r2, r4, #3
 8002fac:	4633      	mov	r3, r6
 8002fae:	3307      	adds	r3, #7
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	ebad 0d03 	sub.w	sp, sp, r3
 8002fb8:	466b      	mov	r3, sp
 8002fba:	3300      	adds	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3302      	adds	r3, #2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	7afa      	ldrb	r2, [r7, #11]
 8002fda:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	7aba      	ldrb	r2, [r7, #10]
 8002fe0:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e00a      	b.n	8002ffe <SEND_DATA_NETW1+0xa6>
        trame[5 + i] = data[i];
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	441a      	add	r2, r3
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	3305      	adds	r3, #5
 8002ff2:	7811      	ldrb	r1, [r2, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	dcf0      	bgt.n	8002fe8 <SEND_DATA_NETW1+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	b29b      	uxth	r3, r3
 800300a:	3305      	adds	r3, #5
 800300c:	b29a      	uxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1d5c      	adds	r4, r3, #5
 8003012:	4611      	mov	r1, r2
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff ff7f 	bl	8002f18 <Get_CRC8>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	551a      	strb	r2, [r3, r4]


    // Transmission de la trame
    //HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
    if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003022:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <SEND_DATA_NETW1+0x110>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f04f 31ff 	mov.w	r1, #4294967295
 800302a:	4618      	mov	r0, r3
 800302c:	f00c f97e 	bl	800f32c <osMutexWait>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d111      	bne.n	800305a <SEND_DATA_NETW1+0x102>
    {
    HAL_UART_Transmit_DMA(&hlpuart1, trame, sizeof(trame));
 8003036:	b2b3      	uxth	r3, r6
 8003038:	461a      	mov	r2, r3
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	480b      	ldr	r0, [pc, #44]	@ (800306c <SEND_DATA_NETW1+0x114>)
 800303e:	f007 fccf 	bl	800a9e0 <HAL_UART_Transmit_DMA>
    osSemaphoreWait(uartTxDoneHandle, osWaitForever);
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <SEND_DATA_NETW1+0x118>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f04f 31ff 	mov.w	r1, #4294967295
 800304a:	4618      	mov	r0, r3
 800304c:	f00c fa10 	bl	800f470 <osSemaphoreWait>
    osMutexRelease(uartmutexHandle);
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <SEND_DATA_NETW1+0x110>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f00c f9b7 	bl	800f3c8 <osMutexRelease>
 800305a:	46d5      	mov	sp, sl
}

    //uint8_t bufferreceivetest[10];
    //HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);

}
 800305c:	bf00      	nop
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003066:	bf00      	nop
 8003068:	20000368 	.word	0x20000368
 800306c:	200016ac 	.word	0x200016ac
 8003070:	2000036c 	.word	0x2000036c

08003074 <create_and_send_payload>:


//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,
		float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,
		float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 8003074:	b580      	push	{r7, lr}
 8003076:	b09c      	sub	sp, #112	@ 0x70
 8003078:	af00      	add	r7, sp, #0
 800307a:	6378      	str	r0, [r7, #52]	@ 0x34
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8003086:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 800308a:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 800308e:	edc7 1a08 	vstr	s3, [r7, #32]
 8003092:	ed87 2a07 	vstr	s4, [r7, #28]
 8003096:	edc7 2a06 	vstr	s5, [r7, #24]
 800309a:	ed87 3a05 	vstr	s6, [r7, #20]
 800309e:	edc7 3a04 	vstr	s7, [r7, #16]
 80030a2:	ed87 4a03 	vstr	s8, [r7, #12]
 80030a6:	edc7 4a02 	vstr	s9, [r7, #8]
 80030aa:	ed87 5a01 	vstr	s10, [r7, #4]
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80030b4:	460b      	mov	r3, r1
 80030b6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80030ba:	4613      	mov	r3, r2
 80030bc:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 80030be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 80030ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 80030d2:	4b22      	ldr	r3, [pc, #136]	@ (800315c <create_and_send_payload+0xe8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 80030dc:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <create_and_send_payload+0xec>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 80030e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <create_and_send_payload+0xf0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_fin;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <create_and_send_payload+0xf4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 80030fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fc:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 800313c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800313e:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 8003142:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003146:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 800314a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800314e:	2336      	movs	r3, #54	@ 0x36
 8003150:	f7ff ff02 	bl	8002f58 <SEND_DATA_NETW1>

}
 8003154:	bf00      	nop
 8003156:	3770      	adds	r7, #112	@ 0x70
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000cc0 	.word	0x20000cc0
 8003160:	20000cb8 	.word	0x20000cb8
 8003164:	20000cbc 	.word	0x20000cbc
 8003168:	20000cc4 	.word	0x20000cc4

0800316c <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	f040 80cb 	bne.w	8003316 <decode_payload+0x1aa>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b81      	cmp	r3, #129	@ 0x81
 8003188:	f040 80c5 	bne.w	8003316 <decode_payload+0x1aa>
		return;
	}
	if(receivingbuffer[2]!=56){
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	3302      	adds	r3, #2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b38      	cmp	r3, #56	@ 0x38
 8003194:	f040 80c1 	bne.w	800331a <decode_payload+0x1ae>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	78da      	ldrb	r2, [r3, #3]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3304      	adds	r3, #4
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3305      	adds	r3, #5
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	799a      	ldrb	r2, [r3, #6]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	79da      	ldrb	r2, [r3, #7]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	7a1a      	ldrb	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7a5a      	ldrb	r2, [r3, #9]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45



    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3348      	adds	r3, #72	@ 0x48
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	320a      	adds	r2, #10
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	334c      	adds	r3, #76	@ 0x4c
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	320e      	adds	r2, #14
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3350      	adds	r3, #80	@ 0x50
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	3212      	adds	r2, #18
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3354      	adds	r3, #84	@ 0x54
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	3216      	adds	r2, #22
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3358      	adds	r3, #88	@ 0x58
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	321a      	adds	r2, #26
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	335c      	adds	r3, #92	@ 0x5c
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	321e      	adds	r2, #30
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3360      	adds	r3, #96	@ 0x60
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	3222      	adds	r2, #34	@ 0x22
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3370      	adds	r3, #112	@ 0x70
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	3226      	adds	r2, #38	@ 0x26
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3364      	adds	r3, #100	@ 0x64
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	322a      	adds	r2, #42	@ 0x2a
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3368      	adds	r3, #104	@ 0x68
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	322e      	adds	r2, #46	@ 0x2e
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	336c      	adds	r3, #108	@ 0x6c
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	3232      	adds	r2, #50	@ 0x32
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3374      	adds	r3, #116	@ 0x74
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	3236      	adds	r2, #54	@ 0x36
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3378      	adds	r3, #120	@ 0x78
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	323a      	adds	r2, #58	@ 0x3a
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	701a      	strb	r2, [r3, #0]


    vraiRSSI=(int8_t)out->RSSI;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800328c:	b25a      	sxtb	r2, r3
 800328e:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <decode_payload+0x1b8>)
 8003290:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 8003292:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <decode_payload+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <decode_payload+0x144>
    if(receivingbuffer[6]==1){
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3306      	adds	r3, #6
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <decode_payload+0x144>
    	flag_calib=1;
 80032a4:	4b21      	ldr	r3, [pc, #132]	@ (800332c <decode_payload+0x1c0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 80032aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <decode_payload+0x1bc>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <decode_payload+0x1c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <decode_payload+0x162>
    if(receivingbuffer[7]==1){
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3307      	adds	r3, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <decode_payload+0x162>
    	flag_drop=1;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <decode_payload+0x1c8>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <decode_payload+0x1c4>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 80032ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <decode_payload+0x1cc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <decode_payload+0x180>
    if(receivingbuffer[8]==1){
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <decode_payload+0x180>
    	flag_separation=1;
 80032e0:	4b16      	ldr	r3, [pc, #88]	@ (800333c <decode_payload+0x1d0>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 80032e6:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <decode_payload+0x1cc>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    }

    }

    if(noreturn_flag4==0){
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <decode_payload+0x1d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <decode_payload+0x19e>
    if(receivingbuffer[9]==1){
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3309      	adds	r3, #9
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <decode_payload+0x19e>
    	flag_fin=1;
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <decode_payload+0x1d8>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    	noreturn_flag4=1;
 8003304:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <decode_payload+0x1d4>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    }




    memset((uint8_t *)receivingbuffer,0,64);
 800330a:	2240      	movs	r2, #64	@ 0x40
 800330c:	2100      	movs	r1, #0
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	f00f fc4b 	bl	8012baa <memset>
 8003314:	e002      	b.n	800331c <decode_payload+0x1b0>
		return;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <decode_payload+0x1b0>
		return;
 800331a:	bf00      	nop
}
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200002fc 	.word	0x200002fc
 8003328:	2000125c 	.word	0x2000125c
 800332c:	20000cc0 	.word	0x20000cc0
 8003330:	20001254 	.word	0x20001254
 8003334:	20000cb8 	.word	0x20000cb8
 8003338:	20001258 	.word	0x20001258
 800333c:	20000cbc 	.word	0x20000cbc
 8003340:	20001260 	.word	0x20001260
 8003344:	20000cc4 	.word	0x20000cc4

08003348 <tarvos_checksum>:

uint8_t tarvos_checksum(uint8_t *data, uint16_t len)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0x00;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8003358:	2300      	movs	r3, #0
 800335a:	81bb      	strh	r3, [r7, #12]
 800335c:	e009      	b.n	8003372 <tarvos_checksum+0x2a>
        checksum ^= data[i];
 800335e:	89bb      	ldrh	r3, [r7, #12]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4053      	eors	r3, r2
 800336a:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 800336c:	89bb      	ldrh	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	81bb      	strh	r3, [r7, #12]
 8003372:	89ba      	ldrh	r2, [r7, #12]
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	3b01      	subs	r3, #1
 8003378:	429a      	cmp	r2, r3
 800337a:	dbf0      	blt.n	800335e <tarvos_checksum+0x16>
    }
    return checksum;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	@ 0x38
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ac:	463b      	mov	r3, r7
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	611a      	str	r2, [r3, #16]
 80033ba:	615a      	str	r2, [r3, #20]
 80033bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033be:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80033c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033cc:	4b29      	ldr	r3, [pc, #164]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 80033d2:	4b28      	ldr	r3, [pc, #160]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033d4:	22cb      	movs	r2, #203	@ 0xcb
 80033d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033de:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033e4:	4823      	ldr	r0, [pc, #140]	@ (8003474 <MX_TIM2_Init+0xe8>)
 80033e6:	f005 fc6b 	bl	8008cc0 <HAL_TIM_Base_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80033f0:	f7fe ff30 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033fe:	4619      	mov	r1, r3
 8003400:	481c      	ldr	r0, [pc, #112]	@ (8003474 <MX_TIM2_Init+0xe8>)
 8003402:	f006 faf5 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800340c:	f7fe ff22 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003410:	4818      	ldr	r0, [pc, #96]	@ (8003474 <MX_TIM2_Init+0xe8>)
 8003412:	f005 fd17 	bl	8008e44 <HAL_TIM_PWM_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800341c:	f7fe ff1a 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	4811      	ldr	r0, [pc, #68]	@ (8003474 <MX_TIM2_Init+0xe8>)
 8003430:	f007 f930 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800343a:	f7fe ff0b 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800343e:	2360      	movs	r3, #96	@ 0x60
 8003440:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800344a:	2304      	movs	r3, #4
 800344c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800344e:	463b      	mov	r3, r7
 8003450:	2204      	movs	r2, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4807      	ldr	r0, [pc, #28]	@ (8003474 <MX_TIM2_Init+0xe8>)
 8003456:	f006 f9b7 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003460:	f7fe fef8 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003464:	4803      	ldr	r0, [pc, #12]	@ (8003474 <MX_TIM2_Init+0xe8>)
 8003466:	f000 f951 	bl	800370c <HAL_TIM_MspPostInit>

}
 800346a:	bf00      	nop
 800346c:	3738      	adds	r7, #56	@ 0x38
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20001264 	.word	0x20001264

08003478 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	@ 0x38
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800347e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800348c:	f107 031c 	add.w	r3, r7, #28
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003498:	463b      	mov	r3, r7
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	615a      	str	r2, [r3, #20]
 80034a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003564 <MX_TIM3_Init+0xec>)
 80034ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 80034b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034b2:	22a9      	movs	r2, #169	@ 0xa9
 80034b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80034bc:	4b28      	ldr	r3, [pc, #160]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80034c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c4:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034ca:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034d0:	4823      	ldr	r0, [pc, #140]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034d2:	f005 fbf5 	bl	8008cc0 <HAL_TIM_Base_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80034dc:	f7fe feba 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ea:	4619      	mov	r1, r3
 80034ec:	481c      	ldr	r0, [pc, #112]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034ee:	f006 fa7f 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80034f8:	f7fe feac 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034fc:	4818      	ldr	r0, [pc, #96]	@ (8003560 <MX_TIM3_Init+0xe8>)
 80034fe:	f005 fca1 	bl	8008e44 <HAL_TIM_PWM_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003508:	f7fe fea4 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4619      	mov	r1, r3
 800351a:	4811      	ldr	r0, [pc, #68]	@ (8003560 <MX_TIM3_Init+0xe8>)
 800351c:	f007 f8ba 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003526:	f7fe fe95 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352a:	2360      	movs	r3, #96	@ 0x60
 800352c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800353a:	463b      	mov	r3, r7
 800353c:	2200      	movs	r2, #0
 800353e:	4619      	mov	r1, r3
 8003540:	4807      	ldr	r0, [pc, #28]	@ (8003560 <MX_TIM3_Init+0xe8>)
 8003542:	f006 f941 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800354c:	f7fe fe82 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003550:	4803      	ldr	r0, [pc, #12]	@ (8003560 <MX_TIM3_Init+0xe8>)
 8003552:	f000 f8db 	bl	800370c <HAL_TIM_MspPostInit>

}
 8003556:	bf00      	nop
 8003558:	3738      	adds	r7, #56	@ 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200012b0 	.word	0x200012b0
 8003564:	40000400 	.word	0x40000400

08003568 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800356e:	f107 0310 	add.w	r3, r7, #16
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357c:	1d3b      	adds	r3, r7, #4
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003586:	4b1e      	ldr	r3, [pc, #120]	@ (8003600 <MX_TIM4_Init+0x98>)
 8003588:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <MX_TIM4_Init+0x9c>)
 800358a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 800358c:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <MX_TIM4_Init+0x98>)
 800358e:	f244 2267 	movw	r2, #16999	@ 0x4267
 8003592:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <MX_TIM4_Init+0x98>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800359a:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <MX_TIM4_Init+0x98>)
 800359c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80035a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a2:	4b17      	ldr	r3, [pc, #92]	@ (8003600 <MX_TIM4_Init+0x98>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a8:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <MX_TIM4_Init+0x98>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035ae:	4814      	ldr	r0, [pc, #80]	@ (8003600 <MX_TIM4_Init+0x98>)
 80035b0:	f005 fb86 	bl	8008cc0 <HAL_TIM_Base_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80035ba:	f7fe fe4b 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	480d      	ldr	r0, [pc, #52]	@ (8003600 <MX_TIM4_Init+0x98>)
 80035cc:	f006 fa10 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80035d6:	f7fe fe3d 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4806      	ldr	r0, [pc, #24]	@ (8003600 <MX_TIM4_Init+0x98>)
 80035e8:	f007 f854 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80035f2:	f7fe fe2f 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80035f6:	bf00      	nop
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200012fc 	.word	0x200012fc
 8003604:	40000800 	.word	0x40000800

08003608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003618:	d13e      	bne.n	8003698 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800361a:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a36      	ldr	r2, [pc, #216]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
 8003626:	4b34      	ldr	r3, [pc, #208]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8003632:	4b32      	ldr	r3, [pc, #200]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003634:	4a32      	ldr	r2, [pc, #200]	@ (8003700 <HAL_TIM_Base_MspInit+0xf8>)
 8003636:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8003638:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 800363a:	2239      	movs	r2, #57	@ 0x39
 800363c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800363e:	4b2f      	ldr	r3, [pc, #188]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003640:	2210      	movs	r2, #16
 8003642:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003650:	4b2a      	ldr	r3, [pc, #168]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003656:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003658:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003666:	2200      	movs	r2, #0
 8003668:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 800366a:	4824      	ldr	r0, [pc, #144]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 800366c:	f002 fd4a 	bl	8006104 <HAL_DMA_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8003676:	f7fe fded 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 800367e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003680:	4a1e      	ldr	r2, [pc, #120]	@ (80036fc <HAL_TIM_Base_MspInit+0xf4>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2105      	movs	r1, #5
 800368a:	201c      	movs	r0, #28
 800368c:	f002 fd12 	bl	80060b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003690:	201c      	movs	r0, #28
 8003692:	f002 fd29 	bl	80060e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003696:	e02a      	b.n	80036ee <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <HAL_TIM_Base_MspInit+0xfc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
}
 80036ba:	e018      	b.n	80036ee <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a11      	ldr	r2, [pc, #68]	@ (8003708 <HAL_TIM_Base_MspInit+0x100>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d113      	bne.n	80036ee <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_TIM_Base_MspInit+0xf0>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2106      	movs	r1, #6
 80036e2:	201e      	movs	r0, #30
 80036e4:	f002 fce6 	bl	80060b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036e8:	201e      	movs	r0, #30
 80036ea:	f002 fcfd 	bl	80060e8 <HAL_NVIC_EnableIRQ>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	20001348 	.word	0x20001348
 8003700:	40020008 	.word	0x40020008
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800

0800370c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	@ 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d11d      	bne.n	800376a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003746:	2302      	movs	r3, #2
 8003748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003752:	2301      	movs	r3, #1
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003764:	f003 f80c 	bl	8006780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003768:	e020      	b.n	80037ac <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <HAL_TIM_MspPostInit+0xac>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003774:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003778:	4a0e      	ldr	r2, [pc, #56]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <HAL_TIM_MspPostInit+0xa8>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800378c:	2340      	movs	r3, #64	@ 0x40
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800379c:	2302      	movs	r3, #2
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	4805      	ldr	r0, [pc, #20]	@ (80037bc <HAL_TIM_MspPostInit+0xb0>)
 80037a8:	f002 ffea 	bl	8006780 <HAL_GPIO_Init>
}
 80037ac:	bf00      	nop
 80037ae:	3728      	adds	r7, #40	@ 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	48000800 	.word	0x48000800

080037c0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037c6:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <MX_LPUART1_UART_Init+0x90>)
 80037c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80037de:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ea:	4b18      	ldr	r3, [pc, #96]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f0:	4b16      	ldr	r3, [pc, #88]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037f6:	4b15      	ldr	r3, [pc, #84]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003802:	4812      	ldr	r0, [pc, #72]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 8003804:	f007 f80e 	bl	800a824 <HAL_UART_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800380e:	f7fe fd21 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003812:	2100      	movs	r1, #0
 8003814:	480d      	ldr	r0, [pc, #52]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 8003816:	f008 fdd6 	bl	800c3c6 <HAL_UARTEx_SetTxFifoThreshold>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003820:	f7fe fd18 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003824:	2100      	movs	r1, #0
 8003826:	4809      	ldr	r0, [pc, #36]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 8003828:	f008 fe0b 	bl	800c442 <HAL_UARTEx_SetRxFifoThreshold>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003832:	f7fe fd0f 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003836:	4805      	ldr	r0, [pc, #20]	@ (800384c <MX_LPUART1_UART_Init+0x8c>)
 8003838:	f008 fd8c 	bl	800c354 <HAL_UARTEx_DisableFifoMode>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003842:	f7fe fd07 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200016ac 	.word	0x200016ac
 8003850:	40008000 	.word	0x40008000

08003854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b09c      	sub	sp, #112	@ 0x70
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800386c:	f107 0318 	add.w	r3, r7, #24
 8003870:	2244      	movs	r2, #68	@ 0x44
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f00f f998 	bl	8012baa <memset>
  if(uartHandle->Instance==LPUART1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5b      	ldr	r2, [pc, #364]	@ (80039ec <HAL_UART_MspInit+0x198>)
 8003880:	4293      	cmp	r3, r2
 8003882:	f040 80af 	bne.w	80039e4 <HAL_UART_MspInit+0x190>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003886:	2320      	movs	r3, #32
 8003888:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800388a:	2300      	movs	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800388e:	f107 0318 	add.w	r3, r7, #24
 8003892:	4618      	mov	r0, r3
 8003894:	f004 fbf6 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800389e:	f7fe fcd9 	bl	8002254 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80038a2:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	4a52      	ldr	r2, [pc, #328]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80038ae:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038be:	4a4c      	ldr	r2, [pc, #304]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	4a46      	ldr	r2, [pc, #280]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038de:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_UART_MspInit+0x19c>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038ea:	2308      	movs	r3, #8
 80038ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ee:	2302      	movs	r3, #2
 80038f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	2300      	movs	r3, #0
 80038f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80038fa:	230c      	movs	r3, #12
 80038fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003902:	4619      	mov	r1, r3
 8003904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003908:	f002 ff3a 	bl	8006780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800390c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003910:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	2300      	movs	r3, #0
 800391c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800391e:	2308      	movs	r3, #8
 8003920:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003922:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003926:	4619      	mov	r1, r3
 8003928:	4832      	ldr	r0, [pc, #200]	@ (80039f4 <HAL_UART_MspInit+0x1a0>)
 800392a:	f002 ff29 	bl	8006780 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800392e:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003930:	4a32      	ldr	r2, [pc, #200]	@ (80039fc <HAL_UART_MspInit+0x1a8>)
 8003932:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003934:	4b30      	ldr	r3, [pc, #192]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003936:	2222      	movs	r2, #34	@ 0x22
 8003938:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800393a:	4b2f      	ldr	r3, [pc, #188]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003940:	4b2d      	ldr	r3, [pc, #180]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003946:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800394c:	4b2a      	ldr	r3, [pc, #168]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 800395a:	2220      	movs	r2, #32
 800395c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800395e:	4b26      	ldr	r3, [pc, #152]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003960:	2200      	movs	r2, #0
 8003962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003964:	4824      	ldr	r0, [pc, #144]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003966:	f002 fbcd 	bl	8006104 <HAL_DMA_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003970:	f7fe fc70 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a20      	ldr	r2, [pc, #128]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 8003978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800397c:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <HAL_UART_MspInit+0x1a4>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8003982:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 8003984:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <HAL_UART_MspInit+0x1b0>)
 8003986:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003988:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 800398a:	2223      	movs	r2, #35	@ 0x23
 800398c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800398e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 8003990:	2210      	movs	r2, #16
 8003992:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800399a:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a0:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a6:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80039ac:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039b2:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80039b8:	4811      	ldr	r0, [pc, #68]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039ba:	f002 fba3 	bl	8006104 <HAL_DMA_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80039c4:	f7fe fc46 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80039ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <HAL_UART_MspInit+0x1ac>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2105      	movs	r1, #5
 80039d8:	205b      	movs	r0, #91	@ 0x5b
 80039da:	f002 fb6b 	bl	80060b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80039de:	205b      	movs	r0, #91	@ 0x5b
 80039e0:	f002 fb82 	bl	80060e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80039e4:	bf00      	nop
 80039e6:	3770      	adds	r7, #112	@ 0x70
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40008000 	.word	0x40008000
 80039f0:	40021000 	.word	0x40021000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	20001740 	.word	0x20001740
 80039fc:	40020030 	.word	0x40020030
 8003a00:	200017a0 	.word	0x200017a0
 8003a04:	40020044 	.word	0x40020044

08003a08 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <HAL_UART_RxCpltCallback+0x60>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d120      	bne.n	8003a5c <HAL_UART_RxCpltCallback+0x54>
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e01a      	b.n	8003a56 <HAL_UART_RxCpltCallback+0x4e>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8003a20:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <HAL_UART_RxCpltCallback+0x64>)
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	4a11      	ldr	r2, [pc, #68]	@ (8003a70 <HAL_UART_RxCpltCallback+0x68>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	781a      	ldrb	r2, [r3, #0]
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <HAL_UART_RxCpltCallback+0x6c>)
 8003a32:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 8003a34:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <HAL_UART_RxCpltCallback+0x64>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	425a      	negs	r2, r3
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a46:	bf58      	it	pl
 8003a48:	4253      	negpl	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <HAL_UART_RxCpltCallback+0x64>)
 8003a4e:	801a      	strh	r2, [r3, #0]
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2bff      	cmp	r3, #255	@ 0xff
 8003a5a:	dde1      	ble.n	8003a20 <HAL_UART_RxCpltCallback+0x18>
        }
	}


}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40008000 	.word	0x40008000
 8003a6c:	200016a8 	.word	0x200016a8
 8003a70:	200013a8 	.word	0x200013a8
 8003a74:	200014a8 	.word	0x200014a8

08003a78 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <HAL_UART_RxHalfCpltCallback+0x60>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d120      	bne.n	8003acc <HAL_UART_RxHalfCpltCallback+0x54>
    {
        // Copier les 1ers 64 octets
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e01a      	b.n	8003ac6 <HAL_UART_RxHalfCpltCallback+0x4e>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_UART_RxHalfCpltCallback+0x64>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4619      	mov	r1, r3
 8003a98:	4a11      	ldr	r2, [pc, #68]	@ (8003ae0 <HAL_UART_RxHalfCpltCallback+0x68>)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8003aa2:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_UART_RxHalfCpltCallback+0x64>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	425a      	negs	r2, r3
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab6:	bf58      	it	pl
 8003ab8:	4253      	negpl	r3, r2
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <HAL_UART_RxHalfCpltCallback+0x64>)
 8003abe:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003aca:	dde1      	ble.n	8003a90 <HAL_UART_RxHalfCpltCallback+0x18>
        }
    }
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40008000 	.word	0x40008000
 8003adc:	200016a8 	.word	0x200016a8
 8003ae0:	200013a8 	.word	0x200013a8
 8003ae4:	200014a8 	.word	0x200014a8

08003ae8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <HAL_UART_TxCpltCallback+0x24>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d104      	bne.n	8003b04 <HAL_UART_TxCpltCallback+0x1c>
    {
        osSemaphoreRelease(uartTxDoneHandle);
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_UART_TxCpltCallback+0x28>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00b fd04 	bl	800f50c <osSemaphoreRelease>
    }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	2000036c 	.word	0x2000036c

08003b14 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003b1c:	f000 fd2e 	bl	800457c <HAL_GetTick>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4a04      	ldr	r2, [pc, #16]	@ (8003b34 <SPI_Timer_On+0x20>)
 8003b24:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003b26:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <SPI_Timer_On+0x24>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20001804 	.word	0x20001804
 8003b38:	20001808 	.word	0x20001808

08003b3c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003b40:	f000 fd1c 	bl	800457c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <SPI_Timer_Status+0x24>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <SPI_Timer_Status+0x28>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	bf34      	ite	cc
 8003b54:	2301      	movcc	r3, #1
 8003b56:	2300      	movcs	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20001804 	.word	0x20001804
 8003b64:	20001808 	.word	0x20001808

08003b68 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003b72:	f107 020f 	add.w	r2, r7, #15
 8003b76:	1df9      	adds	r1, r7, #7
 8003b78:	2332      	movs	r3, #50	@ 0x32
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4804      	ldr	r0, [pc, #16]	@ (8003b90 <xchg_spi+0x28>)
 8003b80:	f004 fd1b 	bl	80085ba <HAL_SPI_TransmitReceive>
    return rxDat;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000cd0 	.word	0x20000cd0

08003b94 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e00a      	b.n	8003bba <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	18d4      	adds	r4, r2, r3
 8003baa:	20ff      	movs	r0, #255	@ 0xff
 8003bac:	f7ff ffdc 	bl	8003b68 <xchg_spi>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3f0      	bcc.n	8003ba4 <rcvr_spi_multi+0x10>
	}
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}

08003bcc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e009      	b.n	8003bf0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ffbf 	bl	8003b68 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d3f1      	bcc.n	8003bdc <xmit_spi_multi+0x10>
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003c0a:	f000 fcb7 	bl	800457c <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003c14:	20ff      	movs	r0, #255	@ 0xff
 8003c16:	f7ff ffa7 	bl	8003b68 <xchg_spi>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2bff      	cmp	r3, #255	@ 0xff
 8003c22:	d007      	beq.n	8003c34 <wait_ready+0x32>
 8003c24:	f000 fcaa 	bl	800457c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8ef      	bhi.n	8003c14 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2bff      	cmp	r3, #255	@ 0xff
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2110      	movs	r1, #16
 8003c50:	4803      	ldr	r0, [pc, #12]	@ (8003c60 <despiselect+0x18>)
 8003c52:	f002 ff17 	bl	8006a84 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003c56:	20ff      	movs	r0, #255	@ 0xff
 8003c58:	f7ff ff86 	bl	8003b68 <xchg_spi>

}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	48000800 	.word	0x48000800

08003c64 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	4809      	ldr	r0, [pc, #36]	@ (8003c94 <spiselect+0x30>)
 8003c6e:	f002 ff09 	bl	8006a84 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003c72:	20ff      	movs	r0, #255	@ 0xff
 8003c74:	f7ff ff78 	bl	8003b68 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003c78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c7c:	f7ff ffc1 	bl	8003c02 <wait_ready>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <spiselect+0x26>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e002      	b.n	8003c90 <spiselect+0x2c>

	despiselect();
 8003c8a:	f7ff ffdd 	bl	8003c48 <despiselect>
	return 0;	/* Timeout */
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	48000800 	.word	0x48000800

08003c98 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003ca2:	20c8      	movs	r0, #200	@ 0xc8
 8003ca4:	f7ff ff36 	bl	8003b14 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003ca8:	20ff      	movs	r0, #255	@ 0xff
 8003caa:	f7ff ff5d 	bl	8003b68 <xchg_spi>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2bff      	cmp	r3, #255	@ 0xff
 8003cb6:	d104      	bne.n	8003cc2 <rcvr_datablock+0x2a>
 8003cb8:	f7ff ff40 	bl	8003b3c <SPI_Timer_Status>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f2      	bne.n	8003ca8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8003cc6:	d001      	beq.n	8003ccc <rcvr_datablock+0x34>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e00a      	b.n	8003ce2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ff60 	bl	8003b94 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003cd4:	20ff      	movs	r0, #255	@ 0xff
 8003cd6:	f7ff ff47 	bl	8003b68 <xchg_spi>
 8003cda:	20ff      	movs	r0, #255	@ 0xff
 8003cdc:	f7ff ff44 	bl	8003b68 <xchg_spi>

	return 1;						/* Function succeeded */
 8003ce0:	2301      	movs	r3, #1
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cfa:	f7ff ff82 	bl	8003c02 <wait_ready>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <xmit_datablock+0x1e>
 8003d04:	2300      	movs	r3, #0
 8003d06:	e01e      	b.n	8003d46 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff2c 	bl	8003b68 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2bfd      	cmp	r3, #253	@ 0xfd
 8003d14:	d016      	beq.n	8003d44 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003d16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff56 	bl	8003bcc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003d20:	20ff      	movs	r0, #255	@ 0xff
 8003d22:	f7ff ff21 	bl	8003b68 <xchg_spi>
 8003d26:	20ff      	movs	r0, #255	@ 0xff
 8003d28:	f7ff ff1e 	bl	8003b68 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003d2c:	20ff      	movs	r0, #255	@ 0xff
 8003d2e:	f7ff ff1b 	bl	8003b68 <xchg_spi>
 8003d32:	4603      	mov	r3, r0
 8003d34:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d001      	beq.n	8003d44 <xmit_datablock+0x5a>
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <xmit_datablock+0x5c>
	}
	return 1;
 8003d44:	2301      	movs	r3, #1
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	6039      	str	r1, [r7, #0]
 8003d58:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da0e      	bge.n	8003d80 <send_cmd+0x32>
		cmd &= 0x7F;
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d68:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2037      	movs	r0, #55	@ 0x37
 8003d6e:	f7ff ffee 	bl	8003d4e <send_cmd>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003d76:	7bbb      	ldrb	r3, [r7, #14]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d901      	bls.n	8003d80 <send_cmd+0x32>
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	e051      	b.n	8003e24 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d008      	beq.n	8003d98 <send_cmd+0x4a>
		despiselect();
 8003d86:	f7ff ff5f 	bl	8003c48 <despiselect>
		if (!spiselect()) return 0xFF;
 8003d8a:	f7ff ff6b 	bl	8003c64 <spiselect>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <send_cmd+0x4a>
 8003d94:	23ff      	movs	r3, #255	@ 0xff
 8003d96:	e045      	b.n	8003e24 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fee1 	bl	8003b68 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fedb 	bl	8003b68 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fed5 	bl	8003b68 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fecf 	bl	8003b68 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff feca 	bl	8003b68 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <send_cmd+0x94>
 8003dde:	2395      	movs	r3, #149	@ 0x95
 8003de0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d101      	bne.n	8003dec <send_cmd+0x9e>
 8003de8:	2387      	movs	r3, #135	@ 0x87
 8003dea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff feba 	bl	8003b68 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d102      	bne.n	8003e00 <send_cmd+0xb2>
 8003dfa:	20ff      	movs	r0, #255	@ 0xff
 8003dfc:	f7ff feb4 	bl	8003b68 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003e00:	230a      	movs	r3, #10
 8003e02:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003e04:	20ff      	movs	r0, #255	@ 0xff
 8003e06:	f7ff feaf 	bl	8003b68 <xchg_spi>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da05      	bge.n	8003e22 <send_cmd+0xd4>
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <USER_SPI_initialize+0x14>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0d6      	b.n	8003fee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003e40:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <USER_SPI_initialize+0x2a>
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e0cb      	b.n	8003fee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003e56:	4b69      	ldr	r3, [pc, #420]	@ (8003ffc <USER_SPI_initialize+0x1d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003e60:	4b66      	ldr	r3, [pc, #408]	@ (8003ffc <USER_SPI_initialize+0x1d0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003e68:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003e6a:	230a      	movs	r3, #10
 8003e6c:	73fb      	strb	r3, [r7, #15]
 8003e6e:	e005      	b.n	8003e7c <USER_SPI_initialize+0x50>
 8003e70:	20ff      	movs	r0, #255	@ 0xff
 8003e72:	f7ff fe79 	bl	8003b68 <xchg_spi>
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f6      	bne.n	8003e70 <USER_SPI_initialize+0x44>

	ty = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003e86:	2100      	movs	r1, #0
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7ff ff60 	bl	8003d4e <send_cmd>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f040 808b 	bne.w	8003fac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003e96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e9a:	f7ff fe3b 	bl	8003b14 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003e9e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003ea2:	2008      	movs	r0, #8
 8003ea4:	f7ff ff53 	bl	8003d4e <send_cmd>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d151      	bne.n	8003f52 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e00d      	b.n	8003ed0 <USER_SPI_initialize+0xa4>
 8003eb4:	7bfc      	ldrb	r4, [r7, #15]
 8003eb6:	20ff      	movs	r0, #255	@ 0xff
 8003eb8:	f7ff fe56 	bl	8003b68 <xchg_spi>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f104 0310 	add.w	r3, r4, #16
 8003ec4:	443b      	add	r3, r7
 8003ec6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d9ee      	bls.n	8003eb4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003ed6:	7abb      	ldrb	r3, [r7, #10]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d167      	bne.n	8003fac <USER_SPI_initialize+0x180>
 8003edc:	7afb      	ldrb	r3, [r7, #11]
 8003ede:	2baa      	cmp	r3, #170	@ 0xaa
 8003ee0:	d164      	bne.n	8003fac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003ee2:	bf00      	nop
 8003ee4:	f7ff fe2a 	bl	8003b3c <SPI_Timer_Status>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <USER_SPI_initialize+0xd2>
 8003eee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003ef2:	20a9      	movs	r0, #169	@ 0xa9
 8003ef4:	f7ff ff2b 	bl	8003d4e <send_cmd>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f2      	bne.n	8003ee4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003efe:	f7ff fe1d 	bl	8003b3c <SPI_Timer_Status>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d051      	beq.n	8003fac <USER_SPI_initialize+0x180>
 8003f08:	2100      	movs	r1, #0
 8003f0a:	203a      	movs	r0, #58	@ 0x3a
 8003f0c:	f7ff ff1f 	bl	8003d4e <send_cmd>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d14a      	bne.n	8003fac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e00d      	b.n	8003f38 <USER_SPI_initialize+0x10c>
 8003f1c:	7bfc      	ldrb	r4, [r7, #15]
 8003f1e:	20ff      	movs	r0, #255	@ 0xff
 8003f20:	f7ff fe22 	bl	8003b68 <xchg_spi>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	f104 0310 	add.w	r3, r4, #16
 8003f2c:	443b      	add	r3, r7
 8003f2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	3301      	adds	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d9ee      	bls.n	8003f1c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003f3e:	7a3b      	ldrb	r3, [r7, #8]
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <USER_SPI_initialize+0x120>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	e000      	b.n	8003f4e <USER_SPI_initialize+0x122>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	737b      	strb	r3, [r7, #13]
 8003f50:	e02c      	b.n	8003fac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003f52:	2100      	movs	r1, #0
 8003f54:	20a9      	movs	r0, #169	@ 0xa9
 8003f56:	f7ff fefa 	bl	8003d4e <send_cmd>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d804      	bhi.n	8003f6a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003f60:	2302      	movs	r3, #2
 8003f62:	737b      	strb	r3, [r7, #13]
 8003f64:	23a9      	movs	r3, #169	@ 0xa9
 8003f66:	73bb      	strb	r3, [r7, #14]
 8003f68:	e003      	b.n	8003f72 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	737b      	strb	r3, [r7, #13]
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003f72:	bf00      	nop
 8003f74:	f7ff fde2 	bl	8003b3c <SPI_Timer_Status>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <USER_SPI_initialize+0x162>
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fee3 	bl	8003d4e <send_cmd>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f2      	bne.n	8003f74 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003f8e:	f7ff fdd5 	bl	8003b3c <SPI_Timer_Status>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <USER_SPI_initialize+0x17c>
 8003f98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f9c:	2010      	movs	r0, #16
 8003f9e:	f7ff fed6 	bl	8003d4e <send_cmd>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <USER_SPI_initialize+0x180>
				ty = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <USER_SPI_initialize+0x1d4>)
 8003fae:	7b7b      	ldrb	r3, [r7, #13]
 8003fb0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003fb2:	f7ff fe49 	bl	8003c48 <despiselect>

	if (ty) {			/* OK */
 8003fb6:	7b7b      	ldrb	r3, [r7, #13]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <USER_SPI_initialize+0x1d0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <USER_SPI_initialize+0x1d0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0210 	orr.w	r2, r2, #16
 8003fce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003fe2:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	@ (8003ff8 <USER_SPI_initialize+0x1cc>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000024 	.word	0x20000024
 8003ffc:	20000cd0 	.word	0x20000cd0
 8004000:	20001800 	.word	0x20001800

08004004 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <USER_SPI_status+0x14>
 8004014:	2301      	movs	r3, #1
 8004016:	e002      	b.n	800401e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <USER_SPI_status+0x28>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000024 	.word	0x20000024

08004030 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <USER_SPI_read+0x1c>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <USER_SPI_read+0x20>
 800404c:	2304      	movs	r3, #4
 800404e:	e04d      	b.n	80040ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004050:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <USER_SPI_read+0xc4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <USER_SPI_read+0x32>
 800405e:	2303      	movs	r3, #3
 8004060:	e044      	b.n	80040ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004062:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <USER_SPI_read+0xc8>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <USER_SPI_read+0x44>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	025b      	lsls	r3, r3, #9
 8004072:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d111      	bne.n	800409e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	2011      	movs	r0, #17
 800407e:	f7ff fe66 	bl	8003d4e <send_cmd>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d129      	bne.n	80040dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004088:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800408c:	68b8      	ldr	r0, [r7, #8]
 800408e:	f7ff fe03 	bl	8003c98 <rcvr_datablock>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d021      	beq.n	80040dc <USER_SPI_read+0xac>
			count = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	e01e      	b.n	80040dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	2012      	movs	r0, #18
 80040a2:	f7ff fe54 	bl	8003d4e <send_cmd>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d117      	bne.n	80040dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80040ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040b0:	68b8      	ldr	r0, [r7, #8]
 80040b2:	f7ff fdf1 	bl	8003c98 <rcvr_datablock>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <USER_SPI_read+0xa2>
				buff += 512;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ed      	bne.n	80040ac <USER_SPI_read+0x7c>
 80040d0:	e000      	b.n	80040d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80040d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80040d4:	2100      	movs	r1, #0
 80040d6:	200c      	movs	r0, #12
 80040d8:	f7ff fe39 	bl	8003d4e <send_cmd>
		}
	}
	despiselect();
 80040dc:	f7ff fdb4 	bl	8003c48 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000024 	.word	0x20000024
 80040f8:	20001800 	.word	0x20001800

080040fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4603      	mov	r3, r0
 800410a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <USER_SPI_write+0x1c>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <USER_SPI_write+0x20>
 8004118:	2304      	movs	r3, #4
 800411a:	e063      	b.n	80041e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800411c:	4b33      	ldr	r3, [pc, #204]	@ (80041ec <USER_SPI_write+0xf0>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <USER_SPI_write+0x32>
 800412a:	2303      	movs	r3, #3
 800412c:	e05a      	b.n	80041e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <USER_SPI_write+0xf0>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <USER_SPI_write+0x44>
 800413c:	2302      	movs	r3, #2
 800413e:	e051      	b.n	80041e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004140:	4b2b      	ldr	r3, [pc, #172]	@ (80041f0 <USER_SPI_write+0xf4>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <USER_SPI_write+0x56>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	025b      	lsls	r3, r3, #9
 8004150:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	2018      	movs	r0, #24
 800415c:	f7ff fdf7 	bl	8003d4e <send_cmd>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d136      	bne.n	80041d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004166:	21fe      	movs	r1, #254	@ 0xfe
 8004168:	68b8      	ldr	r0, [r7, #8]
 800416a:	f7ff fdbe 	bl	8003cea <xmit_datablock>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02f      	beq.n	80041d4 <USER_SPI_write+0xd8>
			count = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	e02c      	b.n	80041d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800417a:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <USER_SPI_write+0xf4>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <USER_SPI_write+0x92>
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	2097      	movs	r0, #151	@ 0x97
 800418a:	f7ff fde0 	bl	8003d4e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	2019      	movs	r0, #25
 8004192:	f7ff fddc 	bl	8003d4e <send_cmd>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d11b      	bne.n	80041d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800419c:	21fc      	movs	r1, #252	@ 0xfc
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f7ff fda3 	bl	8003cea <xmit_datablock>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <USER_SPI_write+0xc4>
				buff += 512;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80041b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ee      	bne.n	800419c <USER_SPI_write+0xa0>
 80041be:	e000      	b.n	80041c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80041c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80041c2:	21fd      	movs	r1, #253	@ 0xfd
 80041c4:	2000      	movs	r0, #0
 80041c6:	f7ff fd90 	bl	8003cea <xmit_datablock>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <USER_SPI_write+0xd8>
 80041d0:	2301      	movs	r3, #1
 80041d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80041d4:	f7ff fd38 	bl	8003c48 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000024 	.word	0x20000024
 80041f0:	20001800 	.word	0x20001800

080041f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	@ 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	603a      	str	r2, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
 8004200:	460b      	mov	r3, r1
 8004202:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <USER_SPI_ioctl+0x1a>
 800420a:	2304      	movs	r3, #4
 800420c:	e15a      	b.n	80044c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800420e:	4baf      	ldr	r3, [pc, #700]	@ (80044cc <USER_SPI_ioctl+0x2d8>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <USER_SPI_ioctl+0x2c>
 800421c:	2303      	movs	r3, #3
 800421e:	e151      	b.n	80044c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004226:	79bb      	ldrb	r3, [r7, #6]
 8004228:	2b04      	cmp	r3, #4
 800422a:	f200 8136 	bhi.w	800449a <USER_SPI_ioctl+0x2a6>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <USER_SPI_ioctl+0x40>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004249 	.word	0x08004249
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800449b 	.word	0x0800449b
 8004240:	08004309 	.word	0x08004309
 8004244:	080043ff 	.word	0x080043ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004248:	f7ff fd0c 	bl	8003c64 <spiselect>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8127 	beq.w	80044a2 <USER_SPI_ioctl+0x2ae>
 8004254:	2300      	movs	r3, #0
 8004256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800425a:	e122      	b.n	80044a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800425c:	2100      	movs	r1, #0
 800425e:	2009      	movs	r0, #9
 8004260:	f7ff fd75 	bl	8003d4e <send_cmd>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 811d 	bne.w	80044a6 <USER_SPI_ioctl+0x2b2>
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	2110      	movs	r1, #16
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fd10 	bl	8003c98 <rcvr_datablock>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8113 	beq.w	80044a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004280:	7b3b      	ldrb	r3, [r7, #12]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d111      	bne.n	80042ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800428a:	7d7b      	ldrb	r3, [r7, #21]
 800428c:	461a      	mov	r2, r3
 800428e:	7d3b      	ldrb	r3, [r7, #20]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4413      	add	r3, r2
 8004294:	461a      	mov	r2, r3
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800429e:	4413      	add	r3, r2
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	029a      	lsls	r2, r3, #10
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e028      	b.n	8004300 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80042ae:	7c7b      	ldrb	r3, [r7, #17]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	7dbb      	ldrb	r3, [r7, #22]
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4413      	add	r3, r2
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	7d7b      	ldrb	r3, [r7, #21]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3302      	adds	r3, #2
 80042d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80042d6:	7d3b      	ldrb	r3, [r7, #20]
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	7cbb      	ldrb	r3, [r7, #18]
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042ec:	4413      	add	r3, r2
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80042f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042f6:	3b09      	subs	r3, #9
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	409a      	lsls	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004306:	e0ce      	b.n	80044a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004308:	4b71      	ldr	r3, [pc, #452]	@ (80044d0 <USER_SPI_ioctl+0x2dc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d031      	beq.n	8004378 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004314:	2100      	movs	r1, #0
 8004316:	208d      	movs	r0, #141	@ 0x8d
 8004318:	f7ff fd19 	bl	8003d4e <send_cmd>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 80c3 	bne.w	80044aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004324:	20ff      	movs	r0, #255	@ 0xff
 8004326:	f7ff fc1f 	bl	8003b68 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	2110      	movs	r1, #16
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fcb1 	bl	8003c98 <rcvr_datablock>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80b6 	beq.w	80044aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800433e:	2330      	movs	r3, #48	@ 0x30
 8004340:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004344:	e007      	b.n	8004356 <USER_SPI_ioctl+0x162>
 8004346:	20ff      	movs	r0, #255	@ 0xff
 8004348:	f7ff fc0e 	bl	8003b68 <xchg_spi>
 800434c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004350:	3b01      	subs	r3, #1
 8004352:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f3      	bne.n	8004346 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	2310      	movs	r3, #16
 8004368:	fa03 f202 	lsl.w	r2, r3, r2
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004376:	e098      	b.n	80044aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004378:	2100      	movs	r1, #0
 800437a:	2009      	movs	r0, #9
 800437c:	f7ff fce7 	bl	8003d4e <send_cmd>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 8091 	bne.w	80044aa <USER_SPI_ioctl+0x2b6>
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	2110      	movs	r1, #16
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fc82 	bl	8003c98 <rcvr_datablock>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8087 	beq.w	80044aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800439c:	4b4c      	ldr	r3, [pc, #304]	@ (80044d0 <USER_SPI_ioctl+0x2dc>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80043a8:	7dbb      	ldrb	r3, [r7, #22]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80043b0:	7dfa      	ldrb	r2, [r7, #23]
 80043b2:	09d2      	lsrs	r2, r2, #7
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4413      	add	r3, r2
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	7e7b      	ldrb	r3, [r7, #25]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e013      	b.n	80043f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80043ce:	7dbb      	ldrb	r3, [r7, #22]
 80043d0:	109b      	asrs	r3, r3, #2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	3301      	adds	r3, #1
 80043da:	7dfa      	ldrb	r2, [r7, #23]
 80043dc:	00d2      	lsls	r2, r2, #3
 80043de:	f002 0218 	and.w	r2, r2, #24
 80043e2:	7df9      	ldrb	r1, [r7, #23]
 80043e4:	0949      	lsrs	r1, r1, #5
 80043e6:	b2c9      	uxtb	r1, r1
 80043e8:	440a      	add	r2, r1
 80043ea:	3201      	adds	r2, #1
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80043fc:	e055      	b.n	80044aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80043fe:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <USER_SPI_ioctl+0x2dc>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f003 0306 	and.w	r3, r3, #6
 8004406:	2b00      	cmp	r3, #0
 8004408:	d051      	beq.n	80044ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800440a:	f107 020c 	add.w	r2, r7, #12
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	210b      	movs	r1, #11
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff feee 	bl	80041f4 <USER_SPI_ioctl>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d149      	bne.n	80044b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800441e:	7b3b      	ldrb	r3, [r7, #12]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <USER_SPI_ioctl+0x23e>
 8004428:	7dbb      	ldrb	r3, [r7, #22]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d041      	beq.n	80044b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004442:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <USER_SPI_ioctl+0x2dc>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004450:	025b      	lsls	r3, r3, #9
 8004452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	025b      	lsls	r3, r3, #9
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800445a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445c:	2020      	movs	r0, #32
 800445e:	f7ff fc76 	bl	8003d4e <send_cmd>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d128      	bne.n	80044ba <USER_SPI_ioctl+0x2c6>
 8004468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800446a:	2021      	movs	r0, #33	@ 0x21
 800446c:	f7ff fc6f 	bl	8003d4e <send_cmd>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d121      	bne.n	80044ba <USER_SPI_ioctl+0x2c6>
 8004476:	2100      	movs	r1, #0
 8004478:	2026      	movs	r0, #38	@ 0x26
 800447a:	f7ff fc68 	bl	8003d4e <send_cmd>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11a      	bne.n	80044ba <USER_SPI_ioctl+0x2c6>
 8004484:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004488:	f7ff fbbb 	bl	8003c02 <wait_ready>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004492:	2300      	movs	r3, #0
 8004494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004498:	e00f      	b.n	80044ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800449a:	2304      	movs	r3, #4
 800449c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80044a0:	e00c      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		break;
 80044a2:	bf00      	nop
 80044a4:	e00a      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		break;
 80044a6:	bf00      	nop
 80044a8:	e008      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		break;
 80044aa:	bf00      	nop
 80044ac:	e006      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80044ae:	bf00      	nop
 80044b0:	e004      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80044b2:	bf00      	nop
 80044b4:	e002      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80044b6:	bf00      	nop
 80044b8:	e000      	b.n	80044bc <USER_SPI_ioctl+0x2c8>
		break;
 80044ba:	bf00      	nop
	}

	despiselect();
 80044bc:	f7ff fbc4 	bl	8003c48 <despiselect>

	return res;
 80044c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3730      	adds	r7, #48	@ 0x30
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000024 	.word	0x20000024
 80044d0:	20001800 	.word	0x20001800

080044d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044d4:	480d      	ldr	r0, [pc, #52]	@ (800450c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80044d8:	f7fe fc12 	bl	8002d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044dc:	480c      	ldr	r0, [pc, #48]	@ (8004510 <LoopForever+0x6>)
  ldr r1, =_edata
 80044de:	490d      	ldr	r1, [pc, #52]	@ (8004514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <LoopForever+0xe>)
  movs r3, #0
 80044e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044e4:	e002      	b.n	80044ec <LoopCopyDataInit>

080044e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ea:	3304      	adds	r3, #4

080044ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f0:	d3f9      	bcc.n	80044e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f2:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <LoopForever+0x12>)
  ldr r4, =_ebss
 80044f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004520 <LoopForever+0x16>)
  movs r3, #0
 80044f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044f8:	e001      	b.n	80044fe <LoopFillZerobss>

080044fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044fc:	3204      	adds	r2, #4

080044fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004500:	d3fb      	bcc.n	80044fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004502:	f00e fc09 	bl	8012d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004506:	f7fd fd7b 	bl	8002000 <main>

0800450a <LoopForever>:

LoopForever:
    b LoopForever
 800450a:	e7fe      	b.n	800450a <LoopForever>
  ldr   r0, =_estack
 800450c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004514:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004518:	080191ec 	.word	0x080191ec
  ldr r2, =_sbss
 800451c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004520:	20004a0c 	.word	0x20004a0c

08004524 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004524:	e7fe      	b.n	8004524 <COMP1_2_3_IRQHandler>

08004526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004530:	2003      	movs	r0, #3
 8004532:	f001 fdb4 	bl	800609e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004536:	200f      	movs	r0, #15
 8004538:	f7fe f9e8 	bl	800290c <HAL_InitTick>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	71fb      	strb	r3, [r7, #7]
 8004546:	e001      	b.n	800454c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004548:	f7fe f9b6 	bl	80028b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800454c:	79fb      	ldrb	r3, [r7, #7]

}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_IncTick+0x1c>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_IncTick+0x20>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4413      	add	r3, r2
 8004566:	4a03      	ldr	r2, [pc, #12]	@ (8004574 <HAL_IncTick+0x1c>)
 8004568:	6013      	str	r3, [r2, #0]
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	2000180c 	.word	0x2000180c
 8004578:	2000002c 	.word	0x2000002c

0800457c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return uwTick;
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <HAL_GetTick+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	2000180c 	.word	0x2000180c

08004594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff ffee 	bl	800457c <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d004      	beq.n	80045b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_Delay+0x40>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045b8:	bf00      	nop
 80045ba:	f7ff ffdf 	bl	800457c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d8f7      	bhi.n	80045ba <HAL_Delay+0x26>
  {
  }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	2000002c 	.word	0x2000002c

080045d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3360      	adds	r3, #96	@ 0x60
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <LL_ADC_SetOffset+0x44>)
 8004662:	4013      	ands	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	03fff000 	.word	0x03fff000

08004688 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3360      	adds	r3, #96	@ 0x60
 8004696:	461a      	mov	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3360      	adds	r3, #96	@ 0x60
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	431a      	orrs	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b087      	sub	sp, #28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3360      	adds	r3, #96	@ 0x60
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	431a      	orrs	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3360      	adds	r3, #96	@ 0x60
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	615a      	str	r2, [r3, #20]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b087      	sub	sp, #28
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3330      	adds	r3, #48	@ 0x30
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	4413      	add	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	211f      	movs	r1, #31
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 011f 	and.w	r1, r3, #31
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004806:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3314      	adds	r3, #20
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0e5b      	lsrs	r3, r3, #25
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	4413      	add	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	0d1b      	lsrs	r3, r3, #20
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2107      	movs	r1, #7
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	401a      	ands	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0d1b      	lsrs	r3, r3, #20
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	431a      	orrs	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	43db      	mvns	r3, r3
 8004892:	401a      	ands	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0318 	and.w	r3, r3, #24
 800489a:	4908      	ldr	r1, [pc, #32]	@ (80048bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800489c:	40d9      	lsrs	r1, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	400b      	ands	r3, r1
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	431a      	orrs	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	0007ffff 	.word	0x0007ffff

080048c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 031f 	and.w	r3, r3, #31
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6093      	str	r3, [r2, #8]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800492c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004930:	d101      	bne.n	8004936 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004958:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004980:	d101      	bne.n	8004986 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <LL_ADC_IsEnabled+0x18>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_ADC_IsEnabled+0x1a>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d101      	bne.n	8004a22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d101      	bne.n	8004a48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b089      	sub	sp, #36	@ 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e167      	b.n	8004d42 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fb8d 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff3f 	bl	800491c <LL_ADC_IsDeepPowerDownEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff25 	bl	80048f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff5a 	bl	800496c <LL_ADC_IsInternalRegulatorEnabled>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d115      	bne.n	8004aea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff3e 	bl	8004944 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8004d4c <HAL_ADC_Init+0x2f4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	4aa0      	ldr	r2, [pc, #640]	@ (8004d50 <HAL_ADC_Init+0x2f8>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004adc:	e002      	b.n	8004ae4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f9      	bne.n	8004ade <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff3c 	bl	800496c <LL_ADC_IsInternalRegulatorEnabled>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afe:	f043 0210 	orr.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ff75 	bl	8004a0a <LL_ADC_REG_IsConversionOngoing>
 8004b20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8100 	bne.w	8004d30 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 80fc 	bne.w	8004d30 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b40:	f043 0202 	orr.w	r2, r3, #2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff35 	bl	80049bc <LL_ADC_IsEnabled>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d111      	bne.n	8004b7c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b5c:	f7ff ff2e 	bl	80049bc <LL_ADC_IsEnabled>
 8004b60:	4604      	mov	r4, r0
 8004b62:	487c      	ldr	r0, [pc, #496]	@ (8004d54 <HAL_ADC_Init+0x2fc>)
 8004b64:	f7ff ff2a 	bl	80049bc <LL_ADC_IsEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4323      	orrs	r3, r4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4619      	mov	r1, r3
 8004b76:	4878      	ldr	r0, [pc, #480]	@ (8004d58 <HAL_ADC_Init+0x300>)
 8004b78:	f7ff fd2e 	bl	80045d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7f5b      	ldrb	r3, [r3, #29]
 8004b80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d106      	bne.n	8004bb8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	045b      	lsls	r3, r3, #17
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <HAL_ADC_Init+0x304>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	69b9      	ldr	r1, [r7, #24]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ff14 	bl	8004a30 <LL_ADC_INJ_IsConversionOngoing>
 8004c08:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d16d      	bne.n	8004cec <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d16a      	bne.n	8004cec <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c1a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c32:	f023 0302 	bic.w	r3, r3, #2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	69b9      	ldr	r1, [r7, #24]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6911      	ldr	r1, [r2, #16]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004c76:	e013      	b.n	8004ca0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c9c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d118      	bne.n	8004cdc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	e007      	b.n	8004cec <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10c      	bne.n	8004d0e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfa:	f023 010f 	bic.w	r1, r3, #15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d0c:	e007      	b.n	8004d1e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 020f 	bic.w	r2, r2, #15
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d2e:	e007      	b.n	8004d40 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	f043 0210 	orr.w	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000020 	.word	0x20000020
 8004d50:	053e2d63 	.word	0x053e2d63
 8004d54:	50000100 	.word	0x50000100
 8004d58:	50000300 	.word	0x50000300
 8004d5c:	fff04007 	.word	0xfff04007

08004d60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d6c:	4851      	ldr	r0, [pc, #324]	@ (8004eb4 <HAL_ADC_Start_DMA+0x154>)
 8004d6e:	f7ff fda7 	bl	80048c0 <LL_ADC_GetMultimode>
 8004d72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fe46 	bl	8004a0a <LL_ADC_REG_IsConversionOngoing>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 808f 	bne.w	8004ea4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_ADC_Start_DMA+0x34>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e08a      	b.n	8004eaa <HAL_ADC_Start_DMA+0x14a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d002      	beq.n	8004dae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	d173      	bne.n	8004e96 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 feb2 	bl	8005b18 <ADC_Enable>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d166      	bne.n	8004e8c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <HAL_ADC_Start_DMA+0x158>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d002      	beq.n	8004de2 <HAL_ADC_Start_DMA+0x82>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	e001      	b.n	8004de6 <HAL_ADC_Start_DMA+0x86>
 8004de2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d002      	beq.n	8004df4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e10:	f023 0206 	bic.w	r2, r3, #6
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e18:	e002      	b.n	8004e20 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <HAL_ADC_Start_DMA+0x15c>)
 8004e26:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2c:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <HAL_ADC_Start_DMA+0x160>)
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e34:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <HAL_ADC_Start_DMA+0x164>)
 8004e36:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	221c      	movs	r2, #28
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0210 	orr.w	r2, r2, #16
 8004e56:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3340      	adds	r3, #64	@ 0x40
 8004e72:	4619      	mov	r1, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f001 f9ec 	bl	8006254 <HAL_DMA_Start_IT>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fdac 	bl	80049e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004e8a:	e00d      	b.n	8004ea8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004e94:	e008      	b.n	8004ea8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004ea2:	e001      	b.n	8004ea8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	50000300 	.word	0x50000300
 8004eb8:	50000100 	.word	0x50000100
 8004ebc:	08005c25 	.word	0x08005c25
 8004ec0:	08005cfd 	.word	0x08005cfd
 8004ec4:	08005d19 	.word	0x08005d19

08004ec8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ee4:	4883      	ldr	r0, [pc, #524]	@ (80050f4 <HAL_ADC_IRQHandler+0x22c>)
 8004ee6:	f7ff fceb 	bl	80048c0 <LL_ADC_GetMultimode>
 8004eea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <HAL_ADC_IRQHandler+0x5e>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d012      	beq.n	8004f26 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ff65 	bl	8005de8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2202      	movs	r2, #2
 8004f24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <HAL_ADC_IRQHandler+0x72>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8085 	beq.w	8005050 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07f      	beq.n	8005050 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fc05 	bl	800477c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d064      	beq.n	8005042 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80050f8 <HAL_ADC_IRQHandler+0x230>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d002      	beq.n	8004f88 <HAL_ADC_IRQHandler+0xc0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	e001      	b.n	8004f8c <HAL_ADC_IRQHandler+0xc4>
 8004f88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d008      	beq.n	8004fa6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d002      	beq.n	8004fa6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	d104      	bne.n	8004fb0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	e00d      	b.n	8004fcc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a50      	ldr	r2, [pc, #320]	@ (80050f8 <HAL_ADC_IRQHandler+0x230>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d002      	beq.n	8004fc0 <HAL_ADC_IRQHandler+0xf8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	e001      	b.n	8004fc4 <HAL_ADC_IRQHandler+0xfc>
 8004fc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004fc4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d135      	bne.n	8005042 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d12e      	bne.n	8005042 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fd0e 	bl	8004a0a <LL_ADC_REG_IsConversionOngoing>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11a      	bne.n	800502a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 020c 	bic.w	r2, r2, #12
 8005002:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d112      	bne.n	8005042 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	f043 0201 	orr.w	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005028:	e00b      	b.n	8005042 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502e:	f043 0210 	orr.w	r2, r3, #16
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	f043 0201 	orr.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc f938 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	220c      	movs	r2, #12
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_ADC_IRQHandler+0x19c>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 809e 	beq.w	80051ac <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8098 	beq.w	80051ac <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fbae 	bl	80047fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800509e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fb69 	bl	800477c <LL_ADC_REG_IsTriggerSourceSWStart>
 80050aa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a11      	ldr	r2, [pc, #68]	@ (80050f8 <HAL_ADC_IRQHandler+0x230>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d002      	beq.n	80050bc <HAL_ADC_IRQHandler+0x1f4>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	e001      	b.n	80050c0 <HAL_ADC_IRQHandler+0x1f8>
 80050bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d008      	beq.n	80050da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d002      	beq.n	80050da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d104      	bne.n	80050e4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e011      	b.n	8005108 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a03      	ldr	r2, [pc, #12]	@ (80050f8 <HAL_ADC_IRQHandler+0x230>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d006      	beq.n	80050fc <HAL_ADC_IRQHandler+0x234>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	e005      	b.n	8005100 <HAL_ADC_IRQHandler+0x238>
 80050f4:	50000300 	.word	0x50000300
 80050f8:	50000100 	.word	0x50000100
 80050fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005100:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d047      	beq.n	800519e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_ADC_IRQHandler+0x260>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d03f      	beq.n	800519e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13a      	bne.n	800519e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d133      	bne.n	800519e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d12e      	bne.n	800519e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fc73 	bl	8004a30 <LL_ADC_INJ_IsConversionOngoing>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800515e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d112      	bne.n	800519e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005184:	e00b      	b.n	800519e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fdfa 	bl	8005d98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2260      	movs	r2, #96	@ 0x60
 80051aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <HAL_ADC_IRQHandler+0x312>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f89f 	bl	8005310 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2280      	movs	r2, #128	@ 0x80
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d012      	beq.n	800520a <HAL_ADC_IRQHandler+0x342>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00d      	beq.n	800520a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fde0 	bl	8005dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005208:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005210:	2b00      	cmp	r3, #0
 8005212:	d012      	beq.n	800523a <HAL_ADC_IRQHandler+0x372>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fdd2 	bl	8005dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d036      	beq.n	80052b2 <HAL_ADC_IRQHandler+0x3ea>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b00      	cmp	r3, #0
 800524c:	d031      	beq.n	80052b2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8005256:	2301      	movs	r3, #1
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
 800525a:	e014      	b.n	8005286 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005262:	4825      	ldr	r0, [pc, #148]	@ (80052f8 <HAL_ADC_IRQHandler+0x430>)
 8005264:	f7ff fb3a 	bl	80048dc <LL_ADC_GetMultiDMATransfer>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800526e:	2301      	movs	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
 8005272:	e008      	b.n	8005286 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005282:	2301      	movs	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	2b01      	cmp	r3, #1
 800528a:	d10e      	bne.n	80052aa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005290:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529c:	f043 0202 	orr.w	r2, r3, #2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f83d 	bl	8005324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2210      	movs	r2, #16
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d018      	beq.n	80052ee <HAL_ADC_IRQHandler+0x426>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d6:	f043 0208 	orr.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fd5f 	bl	8005dac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80052ee:	bf00      	nop
 80052f0:	3728      	adds	r7, #40	@ 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	50000300 	.word	0x50000300

080052fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b0b6      	sub	sp, #216	@ 0xd8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_ADC_ConfigChannel+0x22>
 8005356:	2302      	movs	r3, #2
 8005358:	e3c8      	b.n	8005aec <HAL_ADC_ConfigChannel+0x7b4>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fb4f 	bl	8004a0a <LL_ADC_REG_IsConversionOngoing>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 83ad 	bne.w	8005ace <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	f7ff fa0e 	bl	80047a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fb3d 	bl	8004a0a <LL_ADC_REG_IsConversionOngoing>
 8005390:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fb49 	bl	8004a30 <LL_ADC_INJ_IsConversionOngoing>
 800539e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 81d9 	bne.w	800575e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 81d4 	bne.w	800575e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053be:	d10f      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2200      	movs	r2, #0
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7ff fa28 	bl	8004820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f9bc 	bl	8004756 <LL_ADC_SetSamplingTimeCommonConfig>
 80053de:	e00e      	b.n	80053fe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	461a      	mov	r2, r3
 80053ee:	f7ff fa17 	bl	8004820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f9ac 	bl	8004756 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	08db      	lsrs	r3, r3, #3
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d022      	beq.n	8005466 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6919      	ldr	r1, [r3, #16]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005430:	f7ff f906 	bl	8004640 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6919      	ldr	r1, [r3, #16]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	461a      	mov	r2, r3
 8005442:	f7ff f952 	bl	80046ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005452:	2b01      	cmp	r3, #1
 8005454:	d102      	bne.n	800545c <HAL_ADC_ConfigChannel+0x124>
 8005456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800545a:	e000      	b.n	800545e <HAL_ADC_ConfigChannel+0x126>
 800545c:	2300      	movs	r3, #0
 800545e:	461a      	mov	r2, r3
 8005460:	f7ff f95e 	bl	8004720 <LL_ADC_SetOffsetSaturation>
 8005464:	e17b      	b.n	800575e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff f90b 	bl	8004688 <LL_ADC_GetOffsetChannel>
 8005472:	4603      	mov	r3, r0
 8005474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x15a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff f900 	bl	8004688 <LL_ADC_GetOffsetChannel>
 8005488:	4603      	mov	r3, r0
 800548a:	0e9b      	lsrs	r3, r3, #26
 800548c:	f003 021f 	and.w	r2, r3, #31
 8005490:	e01e      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x198>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff f8f5 	bl	8004688 <LL_ADC_GetOffsetChannel>
 800549e:	4603      	mov	r3, r0
 80054a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80054c0:	2320      	movs	r3, #32
 80054c2:	e004      	b.n	80054ce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80054c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054c8:	fab3 f383 	clz	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_ADC_ConfigChannel+0x1b0>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	e018      	b.n	800551a <HAL_ADC_ConfigChannel+0x1e2>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80054fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800550c:	2320      	movs	r3, #32
 800550e:	e004      	b.n	800551a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005514:	fab3 f383 	clz	r3, r3
 8005518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800551a:	429a      	cmp	r2, r3
 800551c:	d106      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff f8c4 	bl	80046b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2101      	movs	r1, #1
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff f8a8 	bl	8004688 <LL_ADC_GetOffsetChannel>
 8005538:	4603      	mov	r3, r0
 800553a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x220>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff f89d 	bl	8004688 <LL_ADC_GetOffsetChannel>
 800554e:	4603      	mov	r3, r0
 8005550:	0e9b      	lsrs	r3, r3, #26
 8005552:	f003 021f 	and.w	r2, r3, #31
 8005556:	e01e      	b.n	8005596 <HAL_ADC_ConfigChannel+0x25e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f892 	bl	8004688 <LL_ADC_GetOffsetChannel>
 8005564:	4603      	mov	r3, r0
 8005566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800556e:	fa93 f3a3 	rbit	r3, r3
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800557a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800557e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005586:	2320      	movs	r3, #32
 8005588:	e004      	b.n	8005594 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800558a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x276>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	0e9b      	lsrs	r3, r3, #26
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	e018      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x2a8>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80055c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80055ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80055d2:	2320      	movs	r3, #32
 80055d4:	e004      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80055d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d106      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff f861 	bl	80046b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2102      	movs	r1, #2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff f845 	bl	8004688 <LL_ADC_GetOffsetChannel>
 80055fe:	4603      	mov	r3, r0
 8005600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <HAL_ADC_ConfigChannel+0x2e6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2102      	movs	r1, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff f83a 	bl	8004688 <LL_ADC_GetOffsetChannel>
 8005614:	4603      	mov	r3, r0
 8005616:	0e9b      	lsrs	r3, r3, #26
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	e01e      	b.n	800565c <HAL_ADC_ConfigChannel+0x324>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff f82f 	bl	8004688 <LL_ADC_GetOffsetChannel>
 800562a:	4603      	mov	r3, r0
 800562c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005630:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800563c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005644:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800564c:	2320      	movs	r3, #32
 800564e:	e004      	b.n	800565a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005650:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x33c>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0e9b      	lsrs	r3, r3, #26
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	e016      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x36a>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005680:	fa93 f3a3 	rbit	r3, r3
 8005684:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800568c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005694:	2320      	movs	r3, #32
 8005696:	e004      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800569c:	fab3 f383 	clz	r3, r3
 80056a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d106      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	2102      	movs	r1, #2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff f800 	bl	80046b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2103      	movs	r1, #3
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe ffe4 	bl	8004688 <LL_ADC_GetOffsetChannel>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x3a8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2103      	movs	r1, #3
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe ffd9 	bl	8004688 <LL_ADC_GetOffsetChannel>
 80056d6:	4603      	mov	r3, r0
 80056d8:	0e9b      	lsrs	r3, r3, #26
 80056da:	f003 021f 	and.w	r2, r3, #31
 80056de:	e017      	b.n	8005710 <HAL_ADC_ConfigChannel+0x3d8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2103      	movs	r1, #3
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe ffce 	bl	8004688 <LL_ADC_GetOffsetChannel>
 80056ec:	4603      	mov	r3, r0
 80056ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80056f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80056fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8005702:	2320      	movs	r3, #32
 8005704:	e003      	b.n	800570e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8005706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x3f0>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0e9b      	lsrs	r3, r3, #26
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	e011      	b.n	800574c <HAL_ADC_ConfigChannel+0x414>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005730:	fa93 f3a3 	rbit	r3, r3
 8005734:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005738:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800573a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005740:	2320      	movs	r3, #32
 8005742:	e003      	b.n	800574c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800574c:	429a      	cmp	r2, r3
 800574e:	d106      	bne.n	800575e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2103      	movs	r1, #3
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe ffab 	bl	80046b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f92a 	bl	80049bc <LL_ADC_IsEnabled>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8140 	bne.w	80059f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6819      	ldr	r1, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	461a      	mov	r2, r3
 800577e:	f7ff f87b 	bl	8004878 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4a8f      	ldr	r2, [pc, #572]	@ (80059c4 <HAL_ADC_ConfigChannel+0x68c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	f040 8131 	bne.w	80059f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x47e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	0e9b      	lsrs	r3, r3, #26
 80057a4:	3301      	adds	r3, #1
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	bf94      	ite	ls
 80057ae:	2301      	movls	r3, #1
 80057b0:	2300      	movhi	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	e019      	b.n	80057ea <HAL_ADC_ConfigChannel+0x4b2>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80057c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80057c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80057ce:	2320      	movs	r3, #32
 80057d0:	e003      	b.n	80057da <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80057d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d4:	fab3 f383 	clz	r3, r3
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	bf94      	ite	ls
 80057e4:	2301      	movls	r3, #1
 80057e6:	2300      	movhi	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d079      	beq.n	80058e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d107      	bne.n	800580a <HAL_ADC_ConfigChannel+0x4d2>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	0e9b      	lsrs	r3, r3, #26
 8005800:	3301      	adds	r3, #1
 8005802:	069b      	lsls	r3, r3, #26
 8005804:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005808:	e015      	b.n	8005836 <HAL_ADC_ConfigChannel+0x4fe>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005812:	fa93 f3a3 	rbit	r3, r3
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800581c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005822:	2320      	movs	r3, #32
 8005824:	e003      	b.n	800582e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005828:	fab3 f383 	clz	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	3301      	adds	r3, #1
 8005830:	069b      	lsls	r3, r3, #26
 8005832:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x51e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	0e9b      	lsrs	r3, r3, #26
 8005848:	3301      	adds	r3, #1
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	e017      	b.n	8005886 <HAL_ADC_ConfigChannel+0x54e>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800586e:	2320      	movs	r3, #32
 8005870:	e003      	b.n	800587a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005874:	fab3 f383 	clz	r3, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	3301      	adds	r3, #1
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2101      	movs	r1, #1
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	ea42 0103 	orr.w	r1, r2, r3
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <HAL_ADC_ConfigChannel+0x574>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	0e9b      	lsrs	r3, r3, #26
 800589c:	3301      	adds	r3, #1
 800589e:	f003 021f 	and.w	r2, r3, #31
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	051b      	lsls	r3, r3, #20
 80058aa:	e018      	b.n	80058de <HAL_ADC_ConfigChannel+0x5a6>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80058c4:	2320      	movs	r3, #32
 80058c6:	e003      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80058c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ca:	fab3 f383 	clz	r3, r3
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	f003 021f 	and.w	r2, r3, #31
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058de:	430b      	orrs	r3, r1
 80058e0:	e081      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x5c6>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	0e9b      	lsrs	r3, r3, #26
 80058f4:	3301      	adds	r3, #1
 80058f6:	069b      	lsls	r3, r3, #26
 80058f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058fc:	e015      	b.n	800592a <HAL_ADC_ConfigChannel+0x5f2>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005916:	2320      	movs	r3, #32
 8005918:	e003      	b.n	8005922 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	fab3 f383 	clz	r3, r3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3301      	adds	r3, #1
 8005924:	069b      	lsls	r3, r3, #26
 8005926:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <HAL_ADC_ConfigChannel+0x612>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	0e9b      	lsrs	r3, r3, #26
 800593c:	3301      	adds	r3, #1
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	e017      	b.n	800597a <HAL_ADC_ConfigChannel+0x642>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	61fb      	str	r3, [r7, #28]
  return result;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005962:	2320      	movs	r3, #32
 8005964:	e003      	b.n	800596e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	fab3 f383 	clz	r3, r3
 800596c:	b2db      	uxtb	r3, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	ea42 0103 	orr.w	r1, r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x66e>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	0e9b      	lsrs	r3, r3, #26
 8005990:	3301      	adds	r3, #1
 8005992:	f003 021f 	and.w	r2, r3, #31
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	3b1e      	subs	r3, #30
 800599e:	051b      	lsls	r3, r3, #20
 80059a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059a4:	e01e      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x6ac>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	613b      	str	r3, [r7, #16]
  return result;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80059be:	2320      	movs	r3, #32
 80059c0:	e006      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x698>
 80059c2:	bf00      	nop
 80059c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f003 021f 	and.w	r2, r3, #31
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	3b1e      	subs	r3, #30
 80059de:	051b      	lsls	r3, r3, #20
 80059e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059ea:	4619      	mov	r1, r3
 80059ec:	f7fe ff18 	bl	8004820 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <HAL_ADC_ConfigChannel+0x7bc>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d071      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059fc:	483e      	ldr	r0, [pc, #248]	@ (8005af8 <HAL_ADC_ConfigChannel+0x7c0>)
 80059fe:	f7fe fe11 	bl	8004624 <LL_ADC_GetCommonPathInternalCh>
 8005a02:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8005afc <HAL_ADC_ConfigChannel+0x7c4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_ADC_ConfigChannel+0x6e2>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a3a      	ldr	r2, [pc, #232]	@ (8005b00 <HAL_ADC_ConfigChannel+0x7c8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d127      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d121      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a2e:	d157      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a38:	4619      	mov	r1, r3
 8005a3a:	482f      	ldr	r0, [pc, #188]	@ (8005af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a3c:	f7fe fddf 	bl	80045fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a40:	4b30      	ldr	r3, [pc, #192]	@ (8005b04 <HAL_ADC_ConfigChannel+0x7cc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <HAL_ADC_ConfigChannel+0x7d0>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	099b      	lsrs	r3, r3, #6
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a5a:	e002      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f9      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a68:	e03a      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <HAL_ADC_ConfigChannel+0x7d4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d113      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	@ (8005b10 <HAL_ADC_ConfigChannel+0x7d8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02a      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a92:	4619      	mov	r1, r3
 8005a94:	4818      	ldr	r0, [pc, #96]	@ (8005af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a96:	f7fe fdb2 	bl	80045fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a9a:	e021      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <HAL_ADC_ConfigChannel+0x7dc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <HAL_ADC_ConfigChannel+0x7d8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d011      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	480c      	ldr	r0, [pc, #48]	@ (8005af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005ac8:	f7fe fd99 	bl	80045fe <LL_ADC_SetCommonPathInternalCh>
 8005acc:	e008      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ae8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	37d8      	adds	r7, #216	@ 0xd8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	80080000 	.word	0x80080000
 8005af8:	50000300 	.word	0x50000300
 8005afc:	c3210000 	.word	0xc3210000
 8005b00:	90c00010 	.word	0x90c00010
 8005b04:	20000020 	.word	0x20000020
 8005b08:	053e2d63 	.word	0x053e2d63
 8005b0c:	c7520000 	.word	0xc7520000
 8005b10:	50000100 	.word	0x50000100
 8005b14:	cb840000 	.word	0xcb840000

08005b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ff47 	bl	80049bc <LL_ADC_IsEnabled>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d169      	bne.n	8005c08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	4b36      	ldr	r3, [pc, #216]	@ (8005c14 <ADC_Enable+0xfc>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e055      	b.n	8005c0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe ff16 	bl	8004994 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b68:	482b      	ldr	r0, [pc, #172]	@ (8005c18 <ADC_Enable+0x100>)
 8005b6a:	f7fe fd5b 	bl	8004624 <LL_ADC_GetCommonPathInternalCh>
 8005b6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b78:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <ADC_Enable+0x104>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	099b      	lsrs	r3, r3, #6
 8005b7e:	4a28      	ldr	r2, [pc, #160]	@ (8005c20 <ADC_Enable+0x108>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b92:	e002      	b.n	8005b9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f9      	bne.n	8005b94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ba0:	f7fe fcec 	bl	800457c <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ba6:	e028      	b.n	8005bfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe ff05 	bl	80049bc <LL_ADC_IsEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fee9 	bl	8004994 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bc2:	f7fe fcdb 	bl	800457c <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d914      	bls.n	8005bfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00d      	beq.n	8005bfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be2:	f043 0210 	orr.w	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e007      	b.n	8005c0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d1cf      	bne.n	8005ba8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	8000003f 	.word	0x8000003f
 8005c18:	50000300 	.word	0x50000300
 8005c1c:	20000020 	.word	0x20000020
 8005c20:	053e2d63 	.word	0x053e2d63

08005c24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d14b      	bne.n	8005cd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d021      	beq.n	8005c9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fd8d 	bl	800477c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d032      	beq.n	8005cce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12b      	bne.n	8005cce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d11f      	bne.n	8005cce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c92:	f043 0201 	orr.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c9a:	e018      	b.n	8005cce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d111      	bne.n	8005cce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7fb faf2 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cd4:	e00e      	b.n	8005cf4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fb1e 	bl	8005324 <HAL_ADC_ErrorCallback>
}
 8005ce8:	e004      	b.n	8005cf4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff faf6 	bl	80052fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d36:	f043 0204 	orr.w	r2, r3, #4
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff faf0 	bl	8005324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <LL_ADC_IsEnabled>:
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <LL_ADC_IsEnabled+0x18>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <LL_ADC_IsEnabled+0x1a>
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_ADC_REG_IsConversionOngoing>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d101      	bne.n	8005d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b0a1      	sub	sp, #132	@ 0x84
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e08b      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e22:	2300      	movs	r3, #0
 8005e24:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e26:	2300      	movs	r3, #0
 8005e28:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e32:	d102      	bne.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e34:	4b41      	ldr	r3, [pc, #260]	@ (8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e36:	60bb      	str	r3, [r7, #8]
 8005e38:	e001      	b.n	8005e3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f043 0220 	orr.w	r2, r3, #32
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e06a      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff87 	bl	8005d72 <LL_ADC_REG_IsConversionOngoing>
 8005e64:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff81 	bl	8005d72 <LL_ADC_REG_IsConversionOngoing>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d14c      	bne.n	8005f10 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d149      	bne.n	8005f10 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e7c:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005e7e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d028      	beq.n	8005eda <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	6859      	ldr	r1, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e9a:	035b      	lsls	r3, r3, #13
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ea4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ea8:	f7ff ff50 	bl	8005d4c <LL_ADC_IsEnabled>
 8005eac:	4604      	mov	r4, r0
 8005eae:	4823      	ldr	r0, [pc, #140]	@ (8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005eb0:	f7ff ff4c 	bl	8005d4c <LL_ADC_IsEnabled>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	4323      	orrs	r3, r4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d133      	bne.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ec4:	f023 030f 	bic.w	r3, r3, #15
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	6811      	ldr	r1, [r2, #0]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	6892      	ldr	r2, [r2, #8]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ed6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed8:	e024      	b.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ee4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ee6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005eea:	f7ff ff2f 	bl	8005d4c <LL_ADC_IsEnabled>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4812      	ldr	r0, [pc, #72]	@ (8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ef2:	f7ff ff2b 	bl	8005d4c <LL_ADC_IsEnabled>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4323      	orrs	r3, r4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d112      	bne.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f06:	f023 030f 	bic.w	r3, r3, #15
 8005f0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f0e:	e009      	b.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f22:	e000      	b.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3784      	adds	r7, #132	@ 0x84
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	50000100 	.word	0x50000100
 8005f40:	50000300 	.word	0x50000300

08005f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <__NVIC_SetPriorityGrouping+0x44>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f60:	4013      	ands	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f76:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <__NVIC_SetPriorityGrouping+0x44>)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	60d3      	str	r3, [r2, #12]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f90:	4b04      	ldr	r3, [pc, #16]	@ (8005fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	f003 0307 	and.w	r3, r3, #7
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	e000ed00 	.word	0xe000ed00

08005fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db0b      	blt.n	8005fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	f003 021f 	and.w	r2, r3, #31
 8005fc0:	4907      	ldr	r1, [pc, #28]	@ (8005fe0 <__NVIC_EnableIRQ+0x38>)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	2001      	movs	r0, #1
 8005fca:	fa00 f202 	lsl.w	r2, r0, r2
 8005fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	e000e100 	.word	0xe000e100

08005fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	6039      	str	r1, [r7, #0]
 8005fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db0a      	blt.n	800600e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	490c      	ldr	r1, [pc, #48]	@ (8006030 <__NVIC_SetPriority+0x4c>)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	0112      	lsls	r2, r2, #4
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	440b      	add	r3, r1
 8006008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800600c:	e00a      	b.n	8006024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4908      	ldr	r1, [pc, #32]	@ (8006034 <__NVIC_SetPriority+0x50>)
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	3b04      	subs	r3, #4
 800601c:	0112      	lsls	r2, r2, #4
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	440b      	add	r3, r1
 8006022:	761a      	strb	r2, [r3, #24]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	e000e100 	.word	0xe000e100
 8006034:	e000ed00 	.word	0xe000ed00

08006038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	@ 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f1c3 0307 	rsb	r3, r3, #7
 8006052:	2b04      	cmp	r3, #4
 8006054:	bf28      	it	cs
 8006056:	2304      	movcs	r3, #4
 8006058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3304      	adds	r3, #4
 800605e:	2b06      	cmp	r3, #6
 8006060:	d902      	bls.n	8006068 <NVIC_EncodePriority+0x30>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3b03      	subs	r3, #3
 8006066:	e000      	b.n	800606a <NVIC_EncodePriority+0x32>
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	401a      	ands	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006080:	f04f 31ff 	mov.w	r1, #4294967295
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	43d9      	mvns	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006090:	4313      	orrs	r3, r2
         );
}
 8006092:	4618      	mov	r0, r3
 8006094:	3724      	adds	r7, #36	@ 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ff4c 	bl	8005f44 <__NVIC_SetPriorityGrouping>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060c2:	f7ff ff63 	bl	8005f8c <__NVIC_GetPriorityGrouping>
 80060c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	6978      	ldr	r0, [r7, #20]
 80060ce:	f7ff ffb3 	bl	8006038 <NVIC_EncodePriority>
 80060d2:	4602      	mov	r2, r0
 80060d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff ff82 	bl	8005fe4 <__NVIC_SetPriority>
}
 80060e0:	bf00      	nop
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff ff56 	bl	8005fa8 <__NVIC_EnableIRQ>
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e08d      	b.n	8006232 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	4b47      	ldr	r3, [pc, #284]	@ (800623c <HAL_DMA_Init+0x138>)
 800611e:	429a      	cmp	r2, r3
 8006120:	d80f      	bhi.n	8006142 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	4b45      	ldr	r3, [pc, #276]	@ (8006240 <HAL_DMA_Init+0x13c>)
 800612a:	4413      	add	r3, r2
 800612c:	4a45      	ldr	r2, [pc, #276]	@ (8006244 <HAL_DMA_Init+0x140>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	009a      	lsls	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a42      	ldr	r2, [pc, #264]	@ (8006248 <HAL_DMA_Init+0x144>)
 800613e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006140:	e00e      	b.n	8006160 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	4b40      	ldr	r3, [pc, #256]	@ (800624c <HAL_DMA_Init+0x148>)
 800614a:	4413      	add	r3, r2
 800614c:	4a3d      	ldr	r2, [pc, #244]	@ (8006244 <HAL_DMA_Init+0x140>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	009a      	lsls	r2, r3, #2
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a3c      	ldr	r2, [pc, #240]	@ (8006250 <HAL_DMA_Init+0x14c>)
 800615e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa82 	bl	80066bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061c0:	d102      	bne.n	80061c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <HAL_DMA_Init+0x104>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d80c      	bhi.n	8006208 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 faa2 	bl	8006738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	e008      	b.n	800621a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40020407 	.word	0x40020407
 8006240:	bffdfff8 	.word	0xbffdfff8
 8006244:	cccccccd 	.word	0xcccccccd
 8006248:	40020000 	.word	0x40020000
 800624c:	bffdfbf8 	.word	0xbffdfbf8
 8006250:	40020400 	.word	0x40020400

08006254 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_DMA_Start_IT+0x20>
 8006270:	2302      	movs	r3, #2
 8006272:	e066      	b.n	8006342 <HAL_DMA_Start_IT+0xee>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d155      	bne.n	8006334 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f9c7 	bl	8006640 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 020e 	orr.w	r2, r2, #14
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e00f      	b.n	80062ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 020a 	orr.w	r2, r2, #10
 80062ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006308:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006320:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e005      	b.n	8006340 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800633c:	2302      	movs	r3, #2
 800633e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d005      	beq.n	800636e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2204      	movs	r2, #4
 8006366:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e037      	b.n	80063de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 020e 	bic.w	r2, r2, #14
 800637c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006388:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800638c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a2:	f003 021f 	and.w	r2, r3, #31
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	2101      	movs	r1, #1
 80063ac:	fa01 f202 	lsl.w	r2, r1, r2
 80063b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80063ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00c      	beq.n	80063de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d00d      	beq.n	8006430 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2204      	movs	r2, #4
 8006418:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e047      	b.n	80064c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 020e 	bic.w	r2, r2, #14
 800643e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800645e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006464:	f003 021f 	and.w	r2, r3, #31
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646c:	2101      	movs	r1, #1
 800646e:	fa01 f202 	lsl.w	r2, r1, r2
 8006472:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800647c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006494:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800649e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	4798      	blx	r3
    }
  }
  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	2204      	movs	r2, #4
 80064ec:	409a      	lsls	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d026      	beq.n	8006544 <HAL_DMA_IRQHandler+0x7a>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d021      	beq.n	8006544 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0204 	bic.w	r2, r2, #4
 800651c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	f003 021f 	and.w	r2, r3, #31
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	2104      	movs	r1, #4
 800652c:	fa01 f202 	lsl.w	r2, r1, r2
 8006530:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006536:	2b00      	cmp	r3, #0
 8006538:	d071      	beq.n	800661e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006542:	e06c      	b.n	800661e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2202      	movs	r2, #2
 800654e:	409a      	lsls	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d02e      	beq.n	80065b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d029      	beq.n	80065b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 020a 	bic.w	r2, r2, #10
 800657e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658c:	f003 021f 	and.w	r2, r3, #31
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	2102      	movs	r1, #2
 8006596:	fa01 f202 	lsl.w	r2, r1, r2
 800659a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d038      	beq.n	800661e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80065b4:	e033      	b.n	800661e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2208      	movs	r2, #8
 80065c0:	409a      	lsls	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d02a      	beq.n	8006620 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d025      	beq.n	8006620 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020e 	bic.w	r2, r2, #14
 80065e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e8:	f003 021f 	and.w	r2, r3, #31
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f202 	lsl.w	r2, r1, r2
 80065f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800661e:	bf00      	nop
 8006620:	bf00      	nop
}
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006656:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006668:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f003 021f 	and.w	r2, r3, #31
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	2101      	movs	r1, #1
 8006678:	fa01 f202 	lsl.w	r2, r1, r2
 800667c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b10      	cmp	r3, #16
 800668c:	d108      	bne.n	80066a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800669e:	e007      	b.n	80066b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b16      	ldr	r3, [pc, #88]	@ (8006724 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d802      	bhi.n	80066d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80066d0:	4b15      	ldr	r3, [pc, #84]	@ (8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e001      	b.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80066d6:	4b15      	ldr	r3, [pc, #84]	@ (800672c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80066d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3b08      	subs	r3, #8
 80066e6:	4a12      	ldr	r2, [pc, #72]	@ (8006730 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	009a      	lsls	r2, r3, #2
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a0b      	ldr	r2, [pc, #44]	@ (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006706:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2201      	movs	r2, #1
 8006710:	409a      	lsls	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40020407 	.word	0x40020407
 8006728:	40020800 	.word	0x40020800
 800672c:	40020820 	.word	0x40020820
 8006730:	cccccccd 	.word	0xcccccccd
 8006734:	40020880 	.word	0x40020880

08006738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a08      	ldr	r2, [pc, #32]	@ (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800675a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	1000823f 	.word	0x1000823f
 800677c:	40020940 	.word	0x40020940

08006780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800678e:	e15a      	b.n	8006a46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	2101      	movs	r1, #1
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	fa01 f303 	lsl.w	r3, r1, r3
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 814c 	beq.w	8006a40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d005      	beq.n	80067c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d130      	bne.n	8006822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	2203      	movs	r2, #3
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067f6:	2201      	movs	r2, #1
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4013      	ands	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0201 	and.w	r2, r3, #1
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d017      	beq.n	800685e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	2203      	movs	r2, #3
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4013      	ands	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d123      	bne.n	80068b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	08da      	lsrs	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3208      	adds	r2, #8
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	220f      	movs	r2, #15
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4013      	ands	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	08da      	lsrs	r2, r3, #3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3208      	adds	r2, #8
 80068ac:	6939      	ldr	r1, [r7, #16]
 80068ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	2203      	movs	r2, #3
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 0203 	and.w	r2, r3, #3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80a6 	beq.w	8006a40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a64 <HAL_GPIO_Init+0x2e4>)
 80068f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006a64 <HAL_GPIO_Init+0x2e4>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006900:	4b58      	ldr	r3, [pc, #352]	@ (8006a64 <HAL_GPIO_Init+0x2e4>)
 8006902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800690c:	4a56      	ldr	r2, [pc, #344]	@ (8006a68 <HAL_GPIO_Init+0x2e8>)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	3302      	adds	r3, #2
 8006914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	220f      	movs	r2, #15
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43db      	mvns	r3, r3
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4013      	ands	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006936:	d01f      	beq.n	8006978 <HAL_GPIO_Init+0x1f8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a4c      	ldr	r2, [pc, #304]	@ (8006a6c <HAL_GPIO_Init+0x2ec>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d019      	beq.n	8006974 <HAL_GPIO_Init+0x1f4>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a4b      	ldr	r2, [pc, #300]	@ (8006a70 <HAL_GPIO_Init+0x2f0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_GPIO_Init+0x1f0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a74 <HAL_GPIO_Init+0x2f4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00d      	beq.n	800696c <HAL_GPIO_Init+0x1ec>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a49      	ldr	r2, [pc, #292]	@ (8006a78 <HAL_GPIO_Init+0x2f8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <HAL_GPIO_Init+0x1e8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a48      	ldr	r2, [pc, #288]	@ (8006a7c <HAL_GPIO_Init+0x2fc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d101      	bne.n	8006964 <HAL_GPIO_Init+0x1e4>
 8006960:	2305      	movs	r3, #5
 8006962:	e00a      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 8006964:	2306      	movs	r3, #6
 8006966:	e008      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 8006968:	2304      	movs	r3, #4
 800696a:	e006      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 800696c:	2303      	movs	r3, #3
 800696e:	e004      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 8006970:	2302      	movs	r3, #2
 8006972:	e002      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <HAL_GPIO_Init+0x1fa>
 8006978:	2300      	movs	r3, #0
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f002 0203 	and.w	r2, r2, #3
 8006980:	0092      	lsls	r2, r2, #2
 8006982:	4093      	lsls	r3, r2
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800698a:	4937      	ldr	r1, [pc, #220]	@ (8006a68 <HAL_GPIO_Init+0x2e8>)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	089b      	lsrs	r3, r3, #2
 8006990:	3302      	adds	r3, #2
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006998:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069bc:	4a30      	ldr	r2, [pc, #192]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069e6:	4a26      	ldr	r2, [pc, #152]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80069ec:	4b24      	ldr	r3, [pc, #144]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	43db      	mvns	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a10:	4a1b      	ldr	r2, [pc, #108]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a16:	4b1a      	ldr	r3, [pc, #104]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a3a:	4a11      	ldr	r2, [pc, #68]	@ (8006a80 <HAL_GPIO_Init+0x300>)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3301      	adds	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f47f ae9d 	bne.w	8006790 <HAL_GPIO_Init+0x10>
  }
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40021000 	.word	0x40021000
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	48000400 	.word	0x48000400
 8006a70:	48000800 	.word	0x48000800
 8006a74:	48000c00 	.word	0x48000c00
 8006a78:	48001000 	.word	0x48001000
 8006a7c:	48001400 	.word	0x48001400
 8006a80:	40010400 	.word	0x40010400

08006a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a94:	787b      	ldrb	r3, [r7, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006aa0:	e002      	b.n	8006aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aa2:	887a      	ldrh	r2, [r7, #2]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006aca:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f806 	bl	8006ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40010400 	.word	0x40010400

08006ae4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e08d      	b.n	8006c28 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fb f909 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2224      	movs	r2, #36	@ 0x24
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0201 	bic.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d107      	bne.n	8006b74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	e006      	b.n	8006b82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d108      	bne.n	8006b9c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e007      	b.n	8006bac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006baa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bbe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69d9      	ldr	r1, [r3, #28]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1a      	ldr	r2, [r3, #32]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4603      	mov	r3, r0
 8006c40:	817b      	strh	r3, [r7, #10]
 8006c42:	460b      	mov	r3, r1
 8006c44:	813b      	strh	r3, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	f040 80f9 	bne.w	8006e4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_I2C_Mem_Write+0x34>
 8006c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0ed      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_I2C_Mem_Write+0x4e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0e6      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c86:	f7fd fc79 	bl	800457c <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2319      	movs	r3, #25
 8006c92:	2201      	movs	r2, #1
 8006c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f955 	bl	8006f48 <I2C_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0d1      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2221      	movs	r2, #33	@ 0x21
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a3a      	ldr	r2, [r7, #32]
 8006cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cd0:	88f8      	ldrh	r0, [r7, #6]
 8006cd2:	893a      	ldrh	r2, [r7, #8]
 8006cd4:	8979      	ldrh	r1, [r7, #10]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4603      	mov	r3, r0
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f8b9 	bl	8006e58 <I2C_RequestMemoryWrite>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0a9      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2bff      	cmp	r3, #255	@ 0xff
 8006d00:	d90e      	bls.n	8006d20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	22ff      	movs	r2, #255	@ 0xff
 8006d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	8979      	ldrh	r1, [r7, #10]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fad9 	bl	80072d0 <I2C_TransferConfig>
 8006d1e:	e00f      	b.n	8006d40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	8979      	ldrh	r1, [r7, #10]
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fac8 	bl	80072d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f958 	bl	8006ffa <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e07b      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d034      	beq.n	8006df8 <HAL_I2C_Mem_Write+0x1c8>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d130      	bne.n	8006df8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f8d1 	bl	8006f48 <I2C_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e04d      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2bff      	cmp	r3, #255	@ 0xff
 8006db8:	d90e      	bls.n	8006dd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	@ 0xff
 8006dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	8979      	ldrh	r1, [r7, #10]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fa7d 	bl	80072d0 <I2C_TransferConfig>
 8006dd6:	e00f      	b.n	8006df8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	8979      	ldrh	r1, [r7, #10]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fa6c 	bl	80072d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d19e      	bne.n	8006d40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f93e 	bl	8007088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e01a      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <HAL_I2C_Mem_Write+0x224>)
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	fe00e800 	.word	0xfe00e800

08006e58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	817b      	strh	r3, [r7, #10]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	813b      	strh	r3, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	8979      	ldrh	r1, [r7, #10]
 8006e78:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <I2C_RequestMemoryWrite+0xa4>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fa25 	bl	80072d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	69b9      	ldr	r1, [r7, #24]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f8b5 	bl	8006ffa <I2C_WaitOnTXISFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e02c      	b.n	8006ef4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d105      	bne.n	8006eac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea0:	893b      	ldrh	r3, [r7, #8]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006eaa:	e015      	b.n	8006ed8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006eac:	893b      	ldrh	r3, [r7, #8]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f89b 	bl	8006ffa <I2C_WaitOnTXISFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e012      	b.n	8006ef4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ece:	893b      	ldrh	r3, [r7, #8]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2180      	movs	r1, #128	@ 0x80
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f830 	bl	8006f48 <I2C_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	80002000 	.word	0x80002000

08006f00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d103      	bne.n	8006f1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d007      	beq.n	8006f3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	619a      	str	r2, [r3, #24]
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f58:	e03b      	b.n	8006fd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f8d6 	bl	8007110 <I2C_IsErrorOccurred>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e041      	b.n	8006ff2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d02d      	beq.n	8006fd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f76:	f7fd fb01 	bl	800457c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d122      	bne.n	8006fd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2301      	moveq	r3, #1
 8006f9e:	2300      	movne	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d113      	bne.n	8006fd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e00f      	b.n	8006ff2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699a      	ldr	r2, [r3, #24]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	bf0c      	ite	eq
 8006fe2:	2301      	moveq	r3, #1
 8006fe4:	2300      	movne	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d0b4      	beq.n	8006f5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007006:	e033      	b.n	8007070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f87f 	bl	8007110 <I2C_IsErrorOccurred>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e031      	b.n	8007080 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d025      	beq.n	8007070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007024:	f7fd faaa 	bl	800457c <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	429a      	cmp	r2, r3
 8007032:	d302      	bcc.n	800703a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d11a      	bne.n	8007070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d013      	beq.n	8007070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704c:	f043 0220 	orr.w	r2, r3, #32
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e007      	b.n	8007080 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d1c4      	bne.n	8007008 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007094:	e02f      	b.n	80070f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f838 	bl	8007110 <I2C_IsErrorOccurred>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e02d      	b.n	8007106 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fd fa67 	bl	800457c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d11a      	bne.n	80070f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d013      	beq.n	80070f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f043 0220 	orr.w	r2, r3, #32
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e007      	b.n	8007106 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b20      	cmp	r3, #32
 8007102:	d1c8      	bne.n	8007096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	@ 0x28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f003 0310 	and.w	r3, r3, #16
 8007138:	2b00      	cmp	r3, #0
 800713a:	d068      	beq.n	800720e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2210      	movs	r2, #16
 8007142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007144:	e049      	b.n	80071da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d045      	beq.n	80071da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800714e:	f7fd fa15 	bl	800457c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <I2C_IsErrorOccurred+0x54>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d13a      	bne.n	80071da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800716e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007186:	d121      	bne.n	80071cc <I2C_IsErrorOccurred+0xbc>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800718e:	d01d      	beq.n	80071cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007190:	7cfb      	ldrb	r3, [r7, #19]
 8007192:	2b20      	cmp	r3, #32
 8007194:	d01a      	beq.n	80071cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80071a6:	f7fd f9e9 	bl	800457c <HAL_GetTick>
 80071aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	e00e      	b.n	80071cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071ae:	f7fd f9e5 	bl	800457c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b19      	cmp	r3, #25
 80071ba:	d907      	bls.n	80071cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f043 0320 	orr.w	r3, r3, #32
 80071c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80071ca:	e006      	b.n	80071da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d1e9      	bne.n	80071ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d003      	beq.n	80071f0 <I2C_IsErrorOccurred+0xe0>
 80071e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0aa      	beq.n	8007146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2220      	movs	r2, #32
 80071fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	f043 0304 	orr.w	r3, r3, #4
 8007206:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f043 0308 	orr.w	r3, r3, #8
 8007248:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007252:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007274:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800727c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01c      	beq.n	80072be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff fe3b 	bl	8006f00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6859      	ldr	r1, [r3, #4]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <I2C_IsErrorOccurred+0x1bc>)
 8007296:	400b      	ands	r3, r1
 8007298:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80072be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3728      	adds	r7, #40	@ 0x28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	fe00e800 	.word	0xfe00e800

080072d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	817b      	strh	r3, [r7, #10]
 80072de:	4613      	mov	r3, r2
 80072e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072e2:	897b      	ldrh	r3, [r7, #10]
 80072e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072e8:	7a7b      	ldrb	r3, [r7, #9]
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	0d5b      	lsrs	r3, r3, #21
 800730a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800730e:	4b08      	ldr	r3, [pc, #32]	@ (8007330 <I2C_TransferConfig+0x60>)
 8007310:	430b      	orrs	r3, r1
 8007312:	43db      	mvns	r3, r3
 8007314:	ea02 0103 	and.w	r1, r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	03ff63ff 	.word	0x03ff63ff

08007334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b20      	cmp	r3, #32
 8007348:	d138      	bne.n	80073bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007354:	2302      	movs	r3, #2
 8007356:	e032      	b.n	80073be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2224      	movs	r2, #36	@ 0x24
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d139      	bne.n	8007454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e033      	b.n	8007456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2224      	movs	r2, #36	@ 0x24
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800741c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0201 	orr.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d141      	bne.n	80074f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007472:	4b4b      	ldr	r3, [pc, #300]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800747a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747e:	d131      	bne.n	80074e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007480:	4b47      	ldr	r3, [pc, #284]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007486:	4a46      	ldr	r2, [pc, #280]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800748c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007490:	4b43      	ldr	r3, [pc, #268]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007498:	4a41      	ldr	r2, [pc, #260]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800749a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800749e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074a0:	4b40      	ldr	r3, [pc, #256]	@ (80075a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2232      	movs	r2, #50	@ 0x32
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	4a3f      	ldr	r2, [pc, #252]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80074ac:	fba2 2303 	umull	r2, r3, r2, r3
 80074b0:	0c9b      	lsrs	r3, r3, #18
 80074b2:	3301      	adds	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074b6:	e002      	b.n	80074be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074be:	4b38      	ldr	r3, [pc, #224]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ca:	d102      	bne.n	80074d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f2      	bne.n	80074b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074d2:	4b33      	ldr	r3, [pc, #204]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074de:	d158      	bne.n	8007592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e057      	b.n	8007594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074e4:	4b2e      	ldr	r3, [pc, #184]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ea:	4a2d      	ldr	r2, [pc, #180]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80074f4:	e04d      	b.n	8007592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fc:	d141      	bne.n	8007582 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074fe:	4b28      	ldr	r3, [pc, #160]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750a:	d131      	bne.n	8007570 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800750c:	4b24      	ldr	r3, [pc, #144]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800750e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007512:	4a23      	ldr	r2, [pc, #140]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007518:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800751c:	4b20      	ldr	r3, [pc, #128]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007524:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800752a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800752c:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2232      	movs	r2, #50	@ 0x32
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	0c9b      	lsrs	r3, r3, #18
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007542:	e002      	b.n	800754a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3b01      	subs	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800754a:	4b15      	ldr	r3, [pc, #84]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007556:	d102      	bne.n	800755e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f2      	bne.n	8007544 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800755e:	4b10      	ldr	r3, [pc, #64]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756a:	d112      	bne.n	8007592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e011      	b.n	8007594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007576:	4a0a      	ldr	r2, [pc, #40]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800757c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007580:	e007      	b.n	8007592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007582:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800758a:	4a05      	ldr	r2, [pc, #20]	@ (80075a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800758c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007590:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40007000 	.word	0x40007000
 80075a4:	20000020 	.word	0x20000020
 80075a8:	431bde83 	.word	0x431bde83

080075ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80075b0:	4b05      	ldr	r3, [pc, #20]	@ (80075c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80075b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075ba:	6093      	str	r3, [r2, #8]
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40007000 	.word	0x40007000

080075cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e2fe      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d075      	beq.n	80076d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ea:	4b97      	ldr	r3, [pc, #604]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075f4:	4b94      	ldr	r3, [pc, #592]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b0c      	cmp	r3, #12
 8007602:	d102      	bne.n	800760a <HAL_RCC_OscConfig+0x3e>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d002      	beq.n	8007610 <HAL_RCC_OscConfig+0x44>
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d10b      	bne.n	8007628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	4b8d      	ldr	r3, [pc, #564]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <HAL_RCC_OscConfig+0x108>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d157      	bne.n	80076d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e2d9      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x74>
 8007632:	4b85      	ldr	r3, [pc, #532]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a84      	ldr	r2, [pc, #528]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e01d      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x98>
 800764a:	4b7f      	ldr	r3, [pc, #508]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a7e      	ldr	r2, [pc, #504]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b7c      	ldr	r3, [pc, #496]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a7b      	ldr	r2, [pc, #492]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800765c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007664:	4b78      	ldr	r3, [pc, #480]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a77      	ldr	r2, [pc, #476]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800766a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	4b75      	ldr	r3, [pc, #468]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a74      	ldr	r2, [pc, #464]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800767a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fc ff7a 	bl	800457c <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800768c:	f7fc ff76 	bl	800457c <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	@ 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e29e      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800769e:	4b6a      	ldr	r3, [pc, #424]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCC_OscConfig+0xc0>
 80076aa:	e014      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ac:	f7fc ff66 	bl	800457c <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076b4:	f7fc ff62 	bl	800457c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	@ 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e28a      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80076c6:	4b60      	ldr	r3, [pc, #384]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0xe8>
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d075      	beq.n	80077ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e2:	4b59      	ldr	r3, [pc, #356]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076ec:	4b56      	ldr	r3, [pc, #344]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	d102      	bne.n	8007702 <HAL_RCC_OscConfig+0x136>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d002      	beq.n	8007708 <HAL_RCC_OscConfig+0x13c>
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b04      	cmp	r3, #4
 8007706:	d11f      	bne.n	8007748 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007708:	4b4f      	ldr	r3, [pc, #316]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_RCC_OscConfig+0x154>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e25d      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007720:	4b49      	ldr	r3, [pc, #292]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	4946      	ldr	r1, [pc, #280]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007734:	4b45      	ldr	r3, [pc, #276]	@ (800784c <HAL_RCC_OscConfig+0x280>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f7fb f8e7 	bl	800290c <HAL_InitTick>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d043      	beq.n	80077cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e249      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d023      	beq.n	8007798 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007750:	4b3d      	ldr	r3, [pc, #244]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a3c      	ldr	r2, [pc, #240]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fc ff0e 	bl	800457c <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007764:	f7fc ff0a 	bl	800457c <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e232      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007776:	4b34      	ldr	r3, [pc, #208]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007782:	4b31      	ldr	r3, [pc, #196]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	061b      	lsls	r3, r3, #24
 8007790:	492d      	ldr	r1, [pc, #180]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	604b      	str	r3, [r1, #4]
 8007796:	e01a      	b.n	80077ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007798:	4b2b      	ldr	r3, [pc, #172]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2a      	ldr	r2, [pc, #168]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800779e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fc feea 	bl	800457c <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ac:	f7fc fee6 	bl	800457c <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e20e      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80077be:	4b22      	ldr	r3, [pc, #136]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0x1e0>
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0308 	and.w	r3, r3, #8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d041      	beq.n	800785e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01c      	beq.n	800781c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077e2:	4b19      	ldr	r3, [pc, #100]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80077e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077e8:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f2:	f7fc fec3 	bl	800457c <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077fa:	f7fc febf 	bl	800457c <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e1e7      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800780c:	4b0e      	ldr	r3, [pc, #56]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800780e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0ef      	beq.n	80077fa <HAL_RCC_OscConfig+0x22e>
 800781a:	e020      	b.n	800785e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007822:	4a09      	ldr	r2, [pc, #36]	@ (8007848 <HAL_RCC_OscConfig+0x27c>)
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782c:	f7fc fea6 	bl	800457c <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007832:	e00d      	b.n	8007850 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007834:	f7fc fea2 	bl	800457c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d906      	bls.n	8007850 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e1ca      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
 8007846:	bf00      	nop
 8007848:	40021000 	.word	0x40021000
 800784c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007850:	4b8c      	ldr	r3, [pc, #560]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1ea      	bne.n	8007834 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 80a6 	beq.w	80079b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800786c:	2300      	movs	r3, #0
 800786e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007870:	4b84      	ldr	r3, [pc, #528]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCC_OscConfig+0x2b4>
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <HAL_RCC_OscConfig+0x2b6>
 8007880:	2300      	movs	r3, #0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007886:	4b7f      	ldr	r3, [pc, #508]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800788c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6593      	str	r3, [r2, #88]	@ 0x58
 8007892:	4b7c      	ldr	r3, [pc, #496]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800789e:	2301      	movs	r3, #1
 80078a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078a2:	4b79      	ldr	r3, [pc, #484]	@ (8007a88 <HAL_RCC_OscConfig+0x4bc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d118      	bne.n	80078e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078ae:	4b76      	ldr	r3, [pc, #472]	@ (8007a88 <HAL_RCC_OscConfig+0x4bc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a75      	ldr	r2, [pc, #468]	@ (8007a88 <HAL_RCC_OscConfig+0x4bc>)
 80078b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ba:	f7fc fe5f 	bl	800457c <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c2:	f7fc fe5b 	bl	800457c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e183      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a88 <HAL_RCC_OscConfig+0x4bc>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0f0      	beq.n	80078c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d108      	bne.n	80078fa <HAL_RCC_OscConfig+0x32e>
 80078e8:	4b66      	ldr	r3, [pc, #408]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ee:	4a65      	ldr	r2, [pc, #404]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078f8:	e024      	b.n	8007944 <HAL_RCC_OscConfig+0x378>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d110      	bne.n	8007924 <HAL_RCC_OscConfig+0x358>
 8007902:	4b60      	ldr	r3, [pc, #384]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007908:	4a5e      	ldr	r2, [pc, #376]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800790a:	f043 0304 	orr.w	r3, r3, #4
 800790e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007912:	4b5c      	ldr	r3, [pc, #368]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007918:	4a5a      	ldr	r2, [pc, #360]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007922:	e00f      	b.n	8007944 <HAL_RCC_OscConfig+0x378>
 8007924:	4b57      	ldr	r3, [pc, #348]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792a:	4a56      	ldr	r2, [pc, #344]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007934:	4b53      	ldr	r3, [pc, #332]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793a:	4a52      	ldr	r2, [pc, #328]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800793c:	f023 0304 	bic.w	r3, r3, #4
 8007940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d016      	beq.n	800797a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794c:	f7fc fe16 	bl	800457c <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007952:	e00a      	b.n	800796a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007954:	f7fc fe12 	bl	800457c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007962:	4293      	cmp	r3, r2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e138      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800796a:	4b46      	ldr	r3, [pc, #280]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0ed      	beq.n	8007954 <HAL_RCC_OscConfig+0x388>
 8007978:	e015      	b.n	80079a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797a:	f7fc fdff 	bl	800457c <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007980:	e00a      	b.n	8007998 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007982:	f7fc fdfb 	bl	800457c <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e121      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007998:	4b3a      	ldr	r3, [pc, #232]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 800799a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1ed      	bne.n	8007982 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d105      	bne.n	80079b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ac:	4b35      	ldr	r3, [pc, #212]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80079ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b0:	4a34      	ldr	r2, [pc, #208]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80079b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d03c      	beq.n	8007a3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01c      	beq.n	8007a06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80079ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079dc:	f7fc fdce 	bl	800457c <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079e4:	f7fc fdca 	bl	800457c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e0f2      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079f6:	4b23      	ldr	r3, [pc, #140]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ef      	beq.n	80079e4 <HAL_RCC_OscConfig+0x418>
 8007a04:	e01b      	b.n	8007a3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a06:	4b1f      	ldr	r3, [pc, #124]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a0e:	f023 0301 	bic.w	r3, r3, #1
 8007a12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a16:	f7fc fdb1 	bl	800457c <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a1e:	f7fc fdad 	bl	800457c <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e0d5      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a30:	4b14      	ldr	r3, [pc, #80]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1ef      	bne.n	8007a1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80c9 	beq.w	8007bda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a48:	4b0e      	ldr	r3, [pc, #56]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	f000 8083 	beq.w	8007b5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d15e      	bne.n	8007b1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5e:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a08      	ldr	r2, [pc, #32]	@ (8007a84 <HAL_RCC_OscConfig+0x4b8>)
 8007a64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6a:	f7fc fd87 	bl	800457c <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a70:	e00c      	b.n	8007a8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a72:	f7fc fd83 	bl	800457c <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d905      	bls.n	8007a8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e0ab      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a8c:	4b55      	ldr	r3, [pc, #340]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1ec      	bne.n	8007a72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a98:	4b52      	ldr	r3, [pc, #328]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	4b52      	ldr	r3, [pc, #328]	@ (8007be8 <HAL_RCC_OscConfig+0x61c>)
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6a11      	ldr	r1, [r2, #32]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007aa8:	3a01      	subs	r2, #1
 8007aaa:	0112      	lsls	r2, r2, #4
 8007aac:	4311      	orrs	r1, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007ab2:	0212      	lsls	r2, r2, #8
 8007ab4:	4311      	orrs	r1, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007aba:	0852      	lsrs	r2, r2, #1
 8007abc:	3a01      	subs	r2, #1
 8007abe:	0552      	lsls	r2, r2, #21
 8007ac0:	4311      	orrs	r1, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ac6:	0852      	lsrs	r2, r2, #1
 8007ac8:	3a01      	subs	r2, #1
 8007aca:	0652      	lsls	r2, r2, #25
 8007acc:	4311      	orrs	r1, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ad2:	06d2      	lsls	r2, r2, #27
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	4943      	ldr	r1, [pc, #268]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007adc:	4b41      	ldr	r3, [pc, #260]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a40      	ldr	r2, [pc, #256]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4a3d      	ldr	r2, [pc, #244]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007af2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af4:	f7fc fd42 	bl	800457c <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007afc:	f7fc fd3e 	bl	800457c <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e066      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b0e:	4b35      	ldr	r3, [pc, #212]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f0      	beq.n	8007afc <HAL_RCC_OscConfig+0x530>
 8007b1a:	e05e      	b.n	8007bda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1c:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a30      	ldr	r2, [pc, #192]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fc fd28 	bl	800457c <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b30:	f7fc fd24 	bl	800457c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e04c      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b42:	4b28      	ldr	r3, [pc, #160]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f0      	bne.n	8007b30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007b4e:	4b25      	ldr	r3, [pc, #148]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	4924      	ldr	r1, [pc, #144]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b54:	4b25      	ldr	r3, [pc, #148]	@ (8007bec <HAL_RCC_OscConfig+0x620>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	60cb      	str	r3, [r1, #12]
 8007b5a:	e03e      	b.n	8007bda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e039      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007b68:	4b1e      	ldr	r3, [pc, #120]	@ (8007be4 <HAL_RCC_OscConfig+0x618>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f003 0203 	and.w	r2, r3, #3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d12c      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	3b01      	subs	r3, #1
 8007b88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d123      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d11b      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d113      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d109      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d001      	beq.n	8007bda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40021000 	.word	0x40021000
 8007be8:	019f800c 	.word	0x019f800c
 8007bec:	feeefffc 	.word	0xfeeefffc

08007bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e11e      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c08:	4b91      	ldr	r3, [pc, #580]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d910      	bls.n	8007c38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c16:	4b8e      	ldr	r3, [pc, #568]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f023 020f 	bic.w	r2, r3, #15
 8007c1e:	498c      	ldr	r1, [pc, #560]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c26:	4b8a      	ldr	r3, [pc, #552]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d001      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e106      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d073      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d129      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c4c:	4b81      	ldr	r3, [pc, #516]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0f4      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007c5c:	f000 f9ce 	bl	8007ffc <RCC_GetSysClockFreqFromPLLSource>
 8007c60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4a7c      	ldr	r2, [pc, #496]	@ (8007e58 <HAL_RCC_ClockConfig+0x268>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d93f      	bls.n	8007cea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d033      	beq.n	8007cea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d12f      	bne.n	8007cea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c8a:	4b72      	ldr	r3, [pc, #456]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c92:	4a70      	ldr	r2, [pc, #448]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e024      	b.n	8007cea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d107      	bne.n	8007cb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e0c6      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cb8:	4b66      	ldr	r3, [pc, #408]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e0be      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007cc8:	f000 f8ce 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 8007ccc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	4a61      	ldr	r2, [pc, #388]	@ (8007e58 <HAL_RCC_ClockConfig+0x268>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d909      	bls.n	8007cea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cde:	4a5d      	ldr	r2, [pc, #372]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007ce6:	2380      	movs	r3, #128	@ 0x80
 8007ce8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cea:	4b5a      	ldr	r3, [pc, #360]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f023 0203 	bic.w	r2, r3, #3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4957      	ldr	r1, [pc, #348]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cfc:	f7fc fc3e 	bl	800457c <HAL_GetTick>
 8007d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d02:	e00a      	b.n	8007d1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d04:	f7fc fc3a 	bl	800457c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e095      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 020c 	and.w	r2, r3, #12
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d1eb      	bne.n	8007d04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d023      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d44:	4b43      	ldr	r3, [pc, #268]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4a42      	ldr	r2, [pc, #264]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d64:	4a3b      	ldr	r2, [pc, #236]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d6c:	4b39      	ldr	r3, [pc, #228]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4936      	ldr	r1, [pc, #216]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b80      	cmp	r3, #128	@ 0x80
 8007d84:	d105      	bne.n	8007d92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d86:	4b33      	ldr	r3, [pc, #204]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	4a32      	ldr	r2, [pc, #200]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007d8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d92:	4b2f      	ldr	r3, [pc, #188]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d21d      	bcs.n	8007ddc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f023 020f 	bic.w	r2, r3, #15
 8007da8:	4929      	ldr	r1, [pc, #164]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007db0:	f7fc fbe4 	bl	800457c <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db8:	f7fc fbe0 	bl	800457c <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e03b      	b.n	8007e46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dce:	4b20      	ldr	r3, [pc, #128]	@ (8007e50 <HAL_RCC_ClockConfig+0x260>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d1ed      	bne.n	8007db8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	4917      	ldr	r1, [pc, #92]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	490f      	ldr	r1, [pc, #60]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e1a:	f000 f825 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	4b0c      	ldr	r3, [pc, #48]	@ (8007e54 <HAL_RCC_ClockConfig+0x264>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	091b      	lsrs	r3, r3, #4
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	490c      	ldr	r1, [pc, #48]	@ (8007e5c <HAL_RCC_ClockConfig+0x26c>)
 8007e2c:	5ccb      	ldrb	r3, [r1, r3]
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	4a0a      	ldr	r2, [pc, #40]	@ (8007e60 <HAL_RCC_ClockConfig+0x270>)
 8007e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e64 <HAL_RCC_ClockConfig+0x274>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fa fd64 	bl	800290c <HAL_InitTick>
 8007e44:	4603      	mov	r3, r0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40022000 	.word	0x40022000
 8007e54:	40021000 	.word	0x40021000
 8007e58:	04c4b400 	.word	0x04c4b400
 8007e5c:	08018cdc 	.word	0x08018cdc
 8007e60:	20000020 	.word	0x20000020
 8007e64:	20000028 	.word	0x20000028

08007e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 030c 	and.w	r3, r3, #12
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d102      	bne.n	8007e80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8007f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	e047      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007e80:	4b27      	ldr	r3, [pc, #156]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e8c:	4b25      	ldr	r3, [pc, #148]	@ (8007f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e8e:	613b      	str	r3, [r7, #16]
 8007e90:	e03e      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007e92:	4b23      	ldr	r3, [pc, #140]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 030c 	and.w	r3, r3, #12
 8007e9a:	2b0c      	cmp	r3, #12
 8007e9c:	d136      	bne.n	8007f0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e9e:	4b20      	ldr	r3, [pc, #128]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d10c      	bne.n	8007ed6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ebc:	4a19      	ldr	r2, [pc, #100]	@ (8007f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec4:	4a16      	ldr	r2, [pc, #88]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ec6:	68d2      	ldr	r2, [r2, #12]
 8007ec8:	0a12      	lsrs	r2, r2, #8
 8007eca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	617b      	str	r3, [r7, #20]
      break;
 8007ed4:	e00c      	b.n	8007ef0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ed6:	4a13      	ldr	r2, [pc, #76]	@ (8007f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	4a10      	ldr	r2, [pc, #64]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ee0:	68d2      	ldr	r2, [r2, #12]
 8007ee2:	0a12      	lsrs	r2, r2, #8
 8007ee4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	617b      	str	r3, [r7, #20]
      break;
 8007eee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	0e5b      	lsrs	r3, r3, #25
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	3301      	adds	r3, #1
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	e001      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007f10:	693b      	ldr	r3, [r7, #16]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
 8007f24:	00f42400 	.word	0x00f42400

08007f28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f2c:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000020 	.word	0x20000020

08007f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f44:	f7ff fff0 	bl	8007f28 <HAL_RCC_GetHCLKFreq>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4b06      	ldr	r3, [pc, #24]	@ (8007f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f56:	5ccb      	ldrb	r3, [r1, r3]
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40021000 	.word	0x40021000
 8007f68:	08018cec 	.word	0x08018cec

08007f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f70:	f7ff ffda 	bl	8007f28 <HAL_RCC_GetHCLKFreq>
 8007f74:	4602      	mov	r2, r0
 8007f76:	4b06      	ldr	r3, [pc, #24]	@ (8007f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	0adb      	lsrs	r3, r3, #11
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	4904      	ldr	r1, [pc, #16]	@ (8007f94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f82:	5ccb      	ldrb	r3, [r1, r3]
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000
 8007f94:	08018cec 	.word	0x08018cec

08007f98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220f      	movs	r2, #15
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007fa8:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f003 0203 	and.w	r2, r3, #3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007fcc:	4b09      	ldr	r3, [pc, #36]	@ (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007fda:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <HAL_RCC_GetClockConfig+0x60>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 020f 	and.w	r2, r3, #15
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	40022000 	.word	0x40022000

08007ffc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008002:	4b1e      	ldr	r3, [pc, #120]	@ (800807c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800800c:	4b1b      	ldr	r3, [pc, #108]	@ (800807c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d10c      	bne.n	800803a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008020:	4a17      	ldr	r2, [pc, #92]	@ (8008080 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	4a14      	ldr	r2, [pc, #80]	@ (800807c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800802a:	68d2      	ldr	r2, [r2, #12]
 800802c:	0a12      	lsrs	r2, r2, #8
 800802e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	617b      	str	r3, [r7, #20]
    break;
 8008038:	e00c      	b.n	8008054 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800803a:	4a11      	ldr	r2, [pc, #68]	@ (8008080 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008042:	4a0e      	ldr	r2, [pc, #56]	@ (800807c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008044:	68d2      	ldr	r2, [r2, #12]
 8008046:	0a12      	lsrs	r2, r2, #8
 8008048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
    break;
 8008052:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008054:	4b09      	ldr	r3, [pc, #36]	@ (800807c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	0e5b      	lsrs	r3, r3, #25
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	3301      	adds	r3, #1
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	fbb2 f3f3 	udiv	r3, r2, r3
 800806c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800806e:	687b      	ldr	r3, [r7, #4]
}
 8008070:	4618      	mov	r0, r3
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40021000 	.word	0x40021000
 8008080:	00f42400 	.word	0x00f42400

08008084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800808c:	2300      	movs	r3, #0
 800808e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008090:	2300      	movs	r3, #0
 8008092:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8098 	beq.w	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080a2:	2300      	movs	r3, #0
 80080a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a6:	4b43      	ldr	r3, [pc, #268]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10d      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080b2:	4b40      	ldr	r3, [pc, #256]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b6:	4a3f      	ldr	r2, [pc, #252]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80080be:	4b3d      	ldr	r3, [pc, #244]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080c6:	60bb      	str	r3, [r7, #8]
 80080c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ca:	2301      	movs	r3, #1
 80080cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080ce:	4b3a      	ldr	r3, [pc, #232]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a39      	ldr	r2, [pc, #228]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080da:	f7fc fa4f 	bl	800457c <HAL_GetTick>
 80080de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080e0:	e009      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e2:	f7fc fa4b 	bl	800457c <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d902      	bls.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	74fb      	strb	r3, [r7, #19]
        break;
 80080f4:	e005      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f6:	4b30      	ldr	r3, [pc, #192]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0ef      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008102:	7cfb      	ldrb	r3, [r7, #19]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d159      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008108:	4b2a      	ldr	r3, [pc, #168]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008112:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01e      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	429a      	cmp	r2, r3
 8008122:	d019      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008124:	4b23      	ldr	r3, [pc, #140]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800812e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008130:	4b20      	ldr	r3, [pc, #128]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	4a1f      	ldr	r2, [pc, #124]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800813c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008140:	4b1c      	ldr	r3, [pc, #112]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008146:	4a1b      	ldr	r2, [pc, #108]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800814c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008150:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d016      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008162:	f7fc fa0b 	bl	800457c <HAL_GetTick>
 8008166:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008168:	e00b      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800816a:	f7fc fa07 	bl	800457c <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008178:	4293      	cmp	r3, r2
 800817a:	d902      	bls.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	74fb      	strb	r3, [r7, #19]
            break;
 8008180:	e006      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ec      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008190:	7cfb      	ldrb	r3, [r7, #19]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008196:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a4:	4903      	ldr	r1, [pc, #12]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80081ac:	e008      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ae:	7cfb      	ldrb	r3, [r7, #19]
 80081b0:	74bb      	strb	r3, [r7, #18]
 80081b2:	e005      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80081b4:	40021000 	.word	0x40021000
 80081b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	7cfb      	ldrb	r3, [r7, #19]
 80081be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081c0:	7c7b      	ldrb	r3, [r7, #17]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d105      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081c6:	4ba6      	ldr	r3, [pc, #664]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ca:	4aa5      	ldr	r2, [pc, #660]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081de:	4ba0      	ldr	r3, [pc, #640]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e4:	f023 0203 	bic.w	r2, r3, #3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	499c      	ldr	r1, [pc, #624]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008200:	4b97      	ldr	r3, [pc, #604]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008206:	f023 020c 	bic.w	r2, r3, #12
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	4994      	ldr	r1, [pc, #592]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008222:	4b8f      	ldr	r3, [pc, #572]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008228:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	498b      	ldr	r1, [pc, #556]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008244:	4b86      	ldr	r3, [pc, #536]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800824a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	4983      	ldr	r1, [pc, #524]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008266:	4b7e      	ldr	r3, [pc, #504]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	497a      	ldr	r1, [pc, #488]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008288:	4b75      	ldr	r3, [pc, #468]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	4972      	ldr	r1, [pc, #456]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008298:	4313      	orrs	r3, r2
 800829a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082aa:	4b6d      	ldr	r3, [pc, #436]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	4969      	ldr	r1, [pc, #420]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082cc:	4b64      	ldr	r3, [pc, #400]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	4961      	ldr	r1, [pc, #388]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ee:	4b5c      	ldr	r3, [pc, #368]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fc:	4958      	ldr	r1, [pc, #352]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800830c:	2b00      	cmp	r3, #0
 800830e:	d015      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008310:	4b53      	ldr	r3, [pc, #332]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831e:	4950      	ldr	r1, [pc, #320]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800832e:	d105      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008330:	4b4b      	ldr	r3, [pc, #300]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4a4a      	ldr	r2, [pc, #296]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800833a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008344:	2b00      	cmp	r3, #0
 8008346:	d015      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008348:	4b45      	ldr	r3, [pc, #276]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800834e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	4942      	ldr	r1, [pc, #264]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008366:	d105      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008368:	4b3d      	ldr	r3, [pc, #244]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	4a3c      	ldr	r2, [pc, #240]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800836e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008372:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d015      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008380:	4b37      	ldr	r3, [pc, #220]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008386:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838e:	4934      	ldr	r1, [pc, #208]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800839e:	d105      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d015      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083b8:	4b29      	ldr	r3, [pc, #164]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c6:	4926      	ldr	r1, [pc, #152]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083d6:	d105      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083d8:	4b21      	ldr	r3, [pc, #132]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	4a20      	ldr	r2, [pc, #128]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d015      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fe:	4918      	ldr	r1, [pc, #96]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800840e:	d105      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008410:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4a12      	ldr	r2, [pc, #72]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800841a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008428:	4b0d      	ldr	r3, [pc, #52]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008436:	490a      	ldr	r1, [pc, #40]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008438:	4313      	orrs	r3, r2
 800843a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008446:	d105      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008448:	4b05      	ldr	r3, [pc, #20]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800844e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008452:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008454:	7cbb      	ldrb	r3, [r7, #18]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40021000 	.word	0x40021000

08008464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e09d      	b.n	80085b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d108      	bne.n	8008490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008486:	d009      	beq.n	800849c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	61da      	str	r2, [r3, #28]
 800848e:	e005      	b.n	800849c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 ff8c 	bl	80023d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084dc:	d902      	bls.n	80084e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e002      	b.n	80084ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80084f2:	d007      	beq.n	8008504 <HAL_SPI_Init+0xa0>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084fc:	d002      	beq.n	8008504 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008546:	ea42 0103 	orr.w	r1, r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	0c1b      	lsrs	r3, r3, #16
 8008560:	f003 0204 	and.w	r2, r3, #4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008580:	ea42 0103 	orr.w	r1, r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b08a      	sub	sp, #40	@ 0x28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085c8:	2301      	movs	r3, #1
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085cc:	f7fb ffd6 	bl	800457c <HAL_GetTick>
 80085d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80085e0:	887b      	ldrh	r3, [r7, #2]
 80085e2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80085e4:	887b      	ldrh	r3, [r7, #2]
 80085e6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085e8:	7ffb      	ldrb	r3, [r7, #31]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d00c      	beq.n	8008608 <HAL_SPI_TransmitReceive+0x4e>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085f4:	d106      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x4a>
 80085fe:	7ffb      	ldrb	r3, [r7, #31]
 8008600:	2b04      	cmp	r3, #4
 8008602:	d001      	beq.n	8008608 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
 8008606:	e1f3      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <HAL_SPI_TransmitReceive+0x60>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <HAL_SPI_TransmitReceive+0x60>
 8008614:	887b      	ldrh	r3, [r7, #2]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e1e8      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_SPI_TransmitReceive+0x72>
 8008628:	2302      	movs	r3, #2
 800862a:	e1e1      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b04      	cmp	r3, #4
 800863e:	d003      	beq.n	8008648 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2205      	movs	r2, #5
 8008644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	887a      	ldrh	r2, [r7, #2]
 8008658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	887a      	ldrh	r2, [r7, #2]
 8008660:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	887a      	ldrh	r2, [r7, #2]
 800866e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	887a      	ldrh	r2, [r7, #2]
 8008674:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800868a:	d802      	bhi.n	8008692 <HAL_SPI_TransmitReceive+0xd8>
 800868c:	8abb      	ldrh	r3, [r7, #20]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d908      	bls.n	80086a4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	e007      	b.n	80086b4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086be:	2b40      	cmp	r3, #64	@ 0x40
 80086c0:	d007      	beq.n	80086d2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086da:	f240 8083 	bls.w	80087e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x132>
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d16f      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f0:	881a      	ldrh	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	1c9a      	adds	r2, r3, #2
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008706:	b29b      	uxth	r3, r3
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008710:	e05c      	b.n	80087cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d11b      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x19e>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d016      	beq.n	8008758 <HAL_SPI_TransmitReceive+0x19e>
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	2b01      	cmp	r3, #1
 800872e:	d113      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008734:	881a      	ldrh	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008740:	1c9a      	adds	r2, r3, #2
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b01      	cmp	r3, #1
 8008764:	d11c      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x1e6>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800877c:	b292      	uxth	r2, r2
 800877e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008784:	1c9a      	adds	r2, r3, #2
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800879c:	2301      	movs	r3, #1
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087a0:	f7fb feec 	bl	800457c <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d80d      	bhi.n	80087cc <HAL_SPI_TransmitReceive+0x212>
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d009      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e111      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d19d      	bne.n	8008712 <HAL_SPI_TransmitReceive+0x158>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d197      	bne.n	8008712 <HAL_SPI_TransmitReceive+0x158>
 80087e2:	e0e5      	b.n	80089b0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <HAL_SPI_TransmitReceive+0x23a>
 80087ec:	8afb      	ldrh	r3, [r7, #22]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	f040 80d1 	bne.w	8008996 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d912      	bls.n	8008824 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	1c9a      	adds	r2, r3, #2
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b02      	subs	r3, #2
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008822:	e0b8      	b.n	8008996 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800884a:	e0a4      	b.n	8008996 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d134      	bne.n	80088c4 <HAL_SPI_TransmitReceive+0x30a>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d02f      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0x30a>
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	2b01      	cmp	r3, #1
 8008868:	d12c      	bne.n	80088c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d912      	bls.n	800889a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	881a      	ldrh	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008884:	1c9a      	adds	r2, r3, #2
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b02      	subs	r3, #2
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008898:	e012      	b.n	80088c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	330c      	adds	r3, #12
 80088a4:	7812      	ldrb	r2, [r2, #0]
 80088a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d148      	bne.n	8008964 <HAL_SPI_TransmitReceive+0x3aa>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d042      	beq.n	8008964 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d923      	bls.n	8008932 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f4:	b292      	uxth	r2, r2
 80088f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	1c9a      	adds	r2, r3, #2
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b02      	subs	r3, #2
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	d81f      	bhi.n	8008960 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	e016      	b.n	8008960 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f103 020c 	add.w	r2, r3, #12
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008960:	2301      	movs	r3, #1
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008964:	f7fb fe0a 	bl	800457c <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008970:	429a      	cmp	r2, r3
 8008972:	d803      	bhi.n	800897c <HAL_SPI_TransmitReceive+0x3c2>
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d102      	bne.n	8008982 <HAL_SPI_TransmitReceive+0x3c8>
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e02c      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f af55 	bne.w	800884c <HAL_SPI_TransmitReceive+0x292>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af4e 	bne.w	800884c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089b0:	6a3a      	ldr	r2, [r7, #32]
 80089b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f93d 	bl	8008c34 <SPI_EndRxTxTransaction>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d008      	beq.n	80089d2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e00e      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	@ 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	4613      	mov	r3, r2
 8008a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a08:	f7fb fdb8 	bl	800457c <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a10:	1a9b      	subs	r3, r3, r2
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a18:	f7fb fdb0 	bl	800457c <HAL_GetTick>
 8008a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a1e:	4b39      	ldr	r3, [pc, #228]	@ (8008b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	015b      	lsls	r3, r3, #5
 8008a24:	0d1b      	lsrs	r3, r3, #20
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a2e:	e054      	b.n	8008ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d050      	beq.n	8008ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a38:	f7fb fda0 	bl	800457c <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d902      	bls.n	8008a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d13d      	bne.n	8008aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a66:	d111      	bne.n	8008a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a70:	d004      	beq.n	8008a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a7a:	d107      	bne.n	8008a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a94:	d10f      	bne.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e017      	b.n	8008afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	bf0c      	ite	eq
 8008aea:	2301      	moveq	r3, #1
 8008aec:	2300      	movne	r3, #0
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d19b      	bne.n	8008a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3720      	adds	r7, #32
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000020 	.word	0x20000020

08008b08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	@ 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b1a:	f7fb fd2f 	bl	800457c <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	4413      	add	r3, r2
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008b2a:	f7fb fd27 	bl	800457c <HAL_GetTick>
 8008b2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b38:	4b3d      	ldr	r3, [pc, #244]	@ (8008c30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	00da      	lsls	r2, r3, #3
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	0d1b      	lsrs	r3, r3, #20
 8008b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b4a:	fb02 f303 	mul.w	r3, r2, r3
 8008b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b50:	e060      	b.n	8008c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b58:	d107      	bne.n	8008b6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b70:	d050      	beq.n	8008c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b72:	f7fb fd03 	bl	800457c <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d902      	bls.n	8008b88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13d      	bne.n	8008c04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ba0:	d111      	bne.n	8008bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008baa:	d004      	beq.n	8008bb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb4:	d107      	bne.n	8008bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bce:	d10f      	bne.n	8008bf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e010      	b.n	8008c26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d196      	bne.n	8008b52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3728      	adds	r7, #40	@ 0x28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000020 	.word	0x20000020

08008c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff ff5b 	bl	8008b08 <SPI_WaitFifoStateUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c5c:	f043 0220 	orr.w	r2, r3, #32
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e027      	b.n	8008cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2180      	movs	r1, #128	@ 0x80
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fec0 	bl	80089f8 <SPI_WaitFlagStateUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d007      	beq.n	8008c8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e014      	b.n	8008cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff ff34 	bl	8008b08 <SPI_WaitFifoStateUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d007      	beq.n	8008cb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e000      	b.n	8008cb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e049      	b.n	8008d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7fa fc8e 	bl	8003608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f001 f874 	bl	8009dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d001      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e04a      	b.n	8008e1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a21      	ldr	r2, [pc, #132]	@ (8008e2c <HAL_TIM_Base_Start_IT+0xbc>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d018      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0x6c>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008db2:	d013      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0x6c>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e30 <HAL_TIM_Base_Start_IT+0xc0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00e      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0x6c>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d009      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0x6c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0x6c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a19      	ldr	r2, [pc, #100]	@ (8008e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d115      	bne.n	8008e08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	4b17      	ldr	r3, [pc, #92]	@ (8008e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b06      	cmp	r3, #6
 8008dec:	d015      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0xaa>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008df4:	d011      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e06:	e008      	b.n	8008e1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e000      	b.n	8008e1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40000400 	.word	0x40000400
 8008e34:	40000800 	.word	0x40000800
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	00010007 	.word	0x00010007

08008e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e049      	b.n	8008eea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f841 	bl	8008ef2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f000 ffb2 	bl	8009dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	e03c      	b.n	8008fae <HAL_TIM_PWM_Start_DMA+0xa6>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d109      	bne.n	8008f4e <HAL_TIM_PWM_Start_DMA+0x46>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	bf0c      	ite	eq
 8008f46:	2301      	moveq	r3, #1
 8008f48:	2300      	movne	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	e02f      	b.n	8008fae <HAL_TIM_PWM_Start_DMA+0xa6>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d109      	bne.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x60>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	bf0c      	ite	eq
 8008f60:	2301      	moveq	r3, #1
 8008f62:	2300      	movne	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	e022      	b.n	8008fae <HAL_TIM_PWM_Start_DMA+0xa6>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b0c      	cmp	r3, #12
 8008f6c:	d109      	bne.n	8008f82 <HAL_TIM_PWM_Start_DMA+0x7a>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	bf0c      	ite	eq
 8008f7a:	2301      	moveq	r3, #1
 8008f7c:	2300      	movne	r3, #0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	e015      	b.n	8008fae <HAL_TIM_PWM_Start_DMA+0xa6>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d109      	bne.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x94>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	bf0c      	ite	eq
 8008f94:	2301      	moveq	r3, #1
 8008f96:	2300      	movne	r3, #0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	e008      	b.n	8008fae <HAL_TIM_PWM_Start_DMA+0xa6>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e1a6      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	bf0c      	ite	eq
 8008fc8:	2301      	moveq	r3, #1
 8008fca:	2300      	movne	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	e03c      	b.n	800904a <HAL_TIM_PWM_Start_DMA+0x142>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d109      	bne.n	8008fea <HAL_TIM_PWM_Start_DMA+0xe2>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	e02f      	b.n	800904a <HAL_TIM_PWM_Start_DMA+0x142>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d109      	bne.n	8009004 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2301      	moveq	r3, #1
 8008ffe:	2300      	movne	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	e022      	b.n	800904a <HAL_TIM_PWM_Start_DMA+0x142>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b0c      	cmp	r3, #12
 8009008:	d109      	bne.n	800901e <HAL_TIM_PWM_Start_DMA+0x116>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b01      	cmp	r3, #1
 8009014:	bf0c      	ite	eq
 8009016:	2301      	moveq	r3, #1
 8009018:	2300      	movne	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	e015      	b.n	800904a <HAL_TIM_PWM_Start_DMA+0x142>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b10      	cmp	r3, #16
 8009022:	d109      	bne.n	8009038 <HAL_TIM_PWM_Start_DMA+0x130>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b01      	cmp	r3, #1
 800902e:	bf0c      	ite	eq
 8009030:	2301      	moveq	r3, #1
 8009032:	2300      	movne	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	e008      	b.n	800904a <HAL_TIM_PWM_Start_DMA+0x142>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	bf0c      	ite	eq
 8009044:	2301      	moveq	r3, #1
 8009046:	2300      	movne	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d034      	beq.n	80090b8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_TIM_PWM_Start_DMA+0x152>
 8009054:	887b      	ldrh	r3, [r7, #2]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e152      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <HAL_TIM_PWM_Start_DMA+0x166>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800906c:	e026      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b04      	cmp	r3, #4
 8009072:	d104      	bne.n	800907e <HAL_TIM_PWM_Start_DMA+0x176>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800907c:	e01e      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b08      	cmp	r3, #8
 8009082:	d104      	bne.n	800908e <HAL_TIM_PWM_Start_DMA+0x186>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800908c:	e016      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b0c      	cmp	r3, #12
 8009092:	d104      	bne.n	800909e <HAL_TIM_PWM_Start_DMA+0x196>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800909c:	e00e      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_PWM_Start_DMA+0x1a6>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ac:	e006      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090b6:	e001      	b.n	80090bc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e123      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b0c      	cmp	r3, #12
 80090c0:	f200 80ae 	bhi.w	8009220 <HAL_TIM_PWM_Start_DMA+0x318>
 80090c4:	a201      	add	r2, pc, #4	@ (adr r2, 80090cc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	08009101 	.word	0x08009101
 80090d0:	08009221 	.word	0x08009221
 80090d4:	08009221 	.word	0x08009221
 80090d8:	08009221 	.word	0x08009221
 80090dc:	08009149 	.word	0x08009149
 80090e0:	08009221 	.word	0x08009221
 80090e4:	08009221 	.word	0x08009221
 80090e8:	08009221 	.word	0x08009221
 80090ec:	08009191 	.word	0x08009191
 80090f0:	08009221 	.word	0x08009221
 80090f4:	08009221 	.word	0x08009221
 80090f8:	08009221 	.word	0x08009221
 80090fc:	080091d9 	.word	0x080091d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009104:	4a81      	ldr	r2, [pc, #516]	@ (800930c <HAL_TIM_PWM_Start_DMA+0x404>)
 8009106:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910c:	4a80      	ldr	r2, [pc, #512]	@ (8009310 <HAL_TIM_PWM_Start_DMA+0x408>)
 800910e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009114:	4a7f      	ldr	r2, [pc, #508]	@ (8009314 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009116:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3334      	adds	r3, #52	@ 0x34
 8009124:	461a      	mov	r2, r3
 8009126:	887b      	ldrh	r3, [r7, #2]
 8009128:	f7fd f894 	bl	8006254 <HAL_DMA_Start_IT>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e0e6      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009144:	60da      	str	r2, [r3, #12]
      break;
 8009146:	e06e      	b.n	8009226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914c:	4a6f      	ldr	r2, [pc, #444]	@ (800930c <HAL_TIM_PWM_Start_DMA+0x404>)
 800914e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	4a6e      	ldr	r2, [pc, #440]	@ (8009310 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009156:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	4a6d      	ldr	r2, [pc, #436]	@ (8009314 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800915e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3338      	adds	r3, #56	@ 0x38
 800916c:	461a      	mov	r2, r3
 800916e:	887b      	ldrh	r3, [r7, #2]
 8009170:	f7fd f870 	bl	8006254 <HAL_DMA_Start_IT>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e0c2      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800918c:	60da      	str	r2, [r3, #12]
      break;
 800918e:	e04a      	b.n	8009226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	4a5d      	ldr	r2, [pc, #372]	@ (800930c <HAL_TIM_PWM_Start_DMA+0x404>)
 8009196:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919c:	4a5c      	ldr	r2, [pc, #368]	@ (8009310 <HAL_TIM_PWM_Start_DMA+0x408>)
 800919e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a5b      	ldr	r2, [pc, #364]	@ (8009314 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80091a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	333c      	adds	r3, #60	@ 0x3c
 80091b4:	461a      	mov	r2, r3
 80091b6:	887b      	ldrh	r3, [r7, #2]
 80091b8:	f7fd f84c 	bl	8006254 <HAL_DMA_Start_IT>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e09e      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091d4:	60da      	str	r2, [r3, #12]
      break;
 80091d6:	e026      	b.n	8009226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091dc:	4a4b      	ldr	r2, [pc, #300]	@ (800930c <HAL_TIM_PWM_Start_DMA+0x404>)
 80091de:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e4:	4a4a      	ldr	r2, [pc, #296]	@ (8009310 <HAL_TIM_PWM_Start_DMA+0x408>)
 80091e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ec:	4a49      	ldr	r2, [pc, #292]	@ (8009314 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80091ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3340      	adds	r3, #64	@ 0x40
 80091fc:	461a      	mov	r2, r3
 80091fe:	887b      	ldrh	r3, [r7, #2]
 8009200:	f7fd f828 	bl	8006254 <HAL_DMA_Start_IT>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e07a      	b.n	8009304 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800921c:	60da      	str	r2, [r3, #12]
      break;
 800921e:	e002      	b.n	8009226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
      break;
 8009224:	bf00      	nop
  }

  if (status == HAL_OK)
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d16a      	bne.n	8009302 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2201      	movs	r2, #1
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	4618      	mov	r0, r3
 8009236:	f001 fa07 	bl	800a648 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a36      	ldr	r2, [pc, #216]	@ (8009318 <HAL_TIM_PWM_Start_DMA+0x410>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d013      	beq.n	800926c <HAL_TIM_PWM_Start_DMA+0x364>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a34      	ldr	r2, [pc, #208]	@ (800931c <HAL_TIM_PWM_Start_DMA+0x414>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00e      	beq.n	800926c <HAL_TIM_PWM_Start_DMA+0x364>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a33      	ldr	r2, [pc, #204]	@ (8009320 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_TIM_PWM_Start_DMA+0x364>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a31      	ldr	r2, [pc, #196]	@ (8009324 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d004      	beq.n	800926c <HAL_TIM_PWM_Start_DMA+0x364>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a30      	ldr	r2, [pc, #192]	@ (8009328 <HAL_TIM_PWM_Start_DMA+0x420>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d101      	bne.n	8009270 <HAL_TIM_PWM_Start_DMA+0x368>
 800926c:	2301      	movs	r3, #1
 800926e:	e000      	b.n	8009272 <HAL_TIM_PWM_Start_DMA+0x36a>
 8009270:	2300      	movs	r3, #0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a23      	ldr	r2, [pc, #140]	@ (8009318 <HAL_TIM_PWM_Start_DMA+0x410>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d018      	beq.n	80092c2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009298:	d013      	beq.n	80092c2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a23      	ldr	r2, [pc, #140]	@ (800932c <HAL_TIM_PWM_Start_DMA+0x424>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00e      	beq.n	80092c2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a21      	ldr	r2, [pc, #132]	@ (8009330 <HAL_TIM_PWM_Start_DMA+0x428>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d009      	beq.n	80092c2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1a      	ldr	r2, [pc, #104]	@ (800931c <HAL_TIM_PWM_Start_DMA+0x414>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d004      	beq.n	80092c2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <HAL_TIM_PWM_Start_DMA+0x418>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d115      	bne.n	80092ee <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009334 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b06      	cmp	r3, #6
 80092d2:	d015      	beq.n	8009300 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092da:	d011      	beq.n	8009300 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0201 	orr.w	r2, r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ec:	e008      	b.n	8009300 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0201 	orr.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e000      	b.n	8009302 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009300:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	08009cdb 	.word	0x08009cdb
 8009310:	08009d83 	.word	0x08009d83
 8009314:	08009c49 	.word	0x08009c49
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40013400 	.word	0x40013400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800
 800932c:	40000400 	.word	0x40000400
 8009330:	40000800 	.word	0x40000800
 8009334:	00010007 	.word	0x00010007

08009338 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	d855      	bhi.n	80093f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800934c:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	08009389 	.word	0x08009389
 8009358:	080093f9 	.word	0x080093f9
 800935c:	080093f9 	.word	0x080093f9
 8009360:	080093f9 	.word	0x080093f9
 8009364:	080093a5 	.word	0x080093a5
 8009368:	080093f9 	.word	0x080093f9
 800936c:	080093f9 	.word	0x080093f9
 8009370:	080093f9 	.word	0x080093f9
 8009374:	080093c1 	.word	0x080093c1
 8009378:	080093f9 	.word	0x080093f9
 800937c:	080093f9 	.word	0x080093f9
 8009380:	080093f9 	.word	0x080093f9
 8009384:	080093dd 	.word	0x080093dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	4618      	mov	r0, r3
 800939e:	f7fd f82d 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 80093a2:	e02c      	b.n	80093fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fd f81f 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 80093be:	e01e      	b.n	80093fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd f811 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 80093da:	e010      	b.n	80093fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd f803 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 80093f6:	e002      	b.n	80093fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 8081 	bne.w	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2200      	movs	r2, #0
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f001 f91a 	bl	800a648 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a3e      	ldr	r2, [pc, #248]	@ (8009514 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d013      	beq.n	8009446 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a3d      	ldr	r2, [pc, #244]	@ (8009518 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00e      	beq.n	8009446 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a3b      	ldr	r2, [pc, #236]	@ (800951c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d009      	beq.n	8009446 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a3a      	ldr	r2, [pc, #232]	@ (8009520 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d004      	beq.n	8009446 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a38      	ldr	r2, [pc, #224]	@ (8009524 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d101      	bne.n	800944a <HAL_TIM_PWM_Stop_DMA+0x112>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <HAL_TIM_PWM_Stop_DMA+0x114>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d017      	beq.n	8009480 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a1a      	ldr	r2, [r3, #32]
 8009456:	f241 1311 	movw	r3, #4369	@ 0x1111
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10f      	bne.n	8009480 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6a1a      	ldr	r2, [r3, #32]
 8009466:	f244 4344 	movw	r3, #17476	@ 0x4444
 800946a:	4013      	ands	r3, r2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d107      	bne.n	8009480 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800947e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	f241 1311 	movw	r3, #4369	@ 0x1111
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10f      	bne.n	80094b0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a1a      	ldr	r2, [r3, #32]
 8009496:	f244 4344 	movw	r3, #17476	@ 0x4444
 800949a:	4013      	ands	r3, r2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d107      	bne.n	80094b0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094be:	e023      	b.n	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d104      	bne.n	80094d0 <HAL_TIM_PWM_Stop_DMA+0x198>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094ce:	e01b      	b.n	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b08      	cmp	r3, #8
 80094d4:	d104      	bne.n	80094e0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094de:	e013      	b.n	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b0c      	cmp	r3, #12
 80094e4:	d104      	bne.n	80094f0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094ee:	e00b      	b.n	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	d104      	bne.n	8009500 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094fe:	e003      	b.n	8009508 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40013400 	.word	0x40013400
 800951c:	40014000 	.word	0x40014000
 8009520:	40014400 	.word	0x40014400
 8009524:	40014800 	.word	0x40014800

08009528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d020      	beq.n	800958c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01b      	beq.n	800958c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0202 	mvn.w	r2, #2
 800955c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fb40 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 8009578:	e005      	b.n	8009586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb32 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7f8 fd33 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d020      	beq.n	80095d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01b      	beq.n	80095d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0204 	mvn.w	r2, #4
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fb1a 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fb0c 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7f8 fd0d 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d020      	beq.n	8009624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f003 0308 	and.w	r3, r3, #8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01b      	beq.n	8009624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0208 	mvn.w	r2, #8
 80095f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2204      	movs	r2, #4
 80095fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 faf4 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 8009610:	e005      	b.n	800961e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fae6 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7f8 fce7 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b00      	cmp	r3, #0
 800962c:	d020      	beq.n	8009670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01b      	beq.n	8009670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0210 	mvn.w	r2, #16
 8009640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2208      	movs	r2, #8
 8009646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 face 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 800965c:	e005      	b.n	800966a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fac0 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7f8 fcc1 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00c      	beq.n	8009694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d007      	beq.n	8009694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f06f 0201 	mvn.w	r2, #1
 800968c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7f8 fdce 	bl	8002230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80096ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f875 	bl	800a7ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00c      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d007      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80096de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 f86d 	bl	800a7c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00c      	beq.n	800970a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fa8b 	bl	8009c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00c      	beq.n	800972e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f06f 0220 	mvn.w	r2, #32
 8009726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 f835 	bl	800a798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00c      	beq.n	8009752 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800974a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f841 	bl	800a7d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00c      	beq.n	8009776 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800976e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f839 	bl	800a7e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f831 	bl	800a7fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00c      	beq.n	80097be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d007      	beq.n	80097be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80097b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 f829 	bl	800a810 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e0ff      	b.n	80099e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b14      	cmp	r3, #20
 80097f2:	f200 80f0 	bhi.w	80099d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097f6:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	08009851 	.word	0x08009851
 8009800:	080099d7 	.word	0x080099d7
 8009804:	080099d7 	.word	0x080099d7
 8009808:	080099d7 	.word	0x080099d7
 800980c:	08009891 	.word	0x08009891
 8009810:	080099d7 	.word	0x080099d7
 8009814:	080099d7 	.word	0x080099d7
 8009818:	080099d7 	.word	0x080099d7
 800981c:	080098d3 	.word	0x080098d3
 8009820:	080099d7 	.word	0x080099d7
 8009824:	080099d7 	.word	0x080099d7
 8009828:	080099d7 	.word	0x080099d7
 800982c:	08009913 	.word	0x08009913
 8009830:	080099d7 	.word	0x080099d7
 8009834:	080099d7 	.word	0x080099d7
 8009838:	080099d7 	.word	0x080099d7
 800983c:	08009955 	.word	0x08009955
 8009840:	080099d7 	.word	0x080099d7
 8009844:	080099d7 	.word	0x080099d7
 8009848:	080099d7 	.word	0x080099d7
 800984c:	08009995 	.word	0x08009995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fb64 	bl	8009f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0204 	bic.w	r2, r2, #4
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	619a      	str	r2, [r3, #24]
      break;
 800988e:	e0a5      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fbd4 	bl	800a044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	619a      	str	r2, [r3, #24]
      break;
 80098d0:	e084      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fc3d 	bl	800a158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0208 	orr.w	r2, r2, #8
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0204 	bic.w	r2, r2, #4
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	61da      	str	r2, [r3, #28]
      break;
 8009910:	e064      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fca5 	bl	800a268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800992c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800993c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69d9      	ldr	r1, [r3, #28]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	021a      	lsls	r2, r3, #8
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	61da      	str	r2, [r3, #28]
      break;
 8009952:	e043      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fd0e 	bl	800a37c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0208 	orr.w	r2, r2, #8
 800996e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0204 	bic.w	r2, r2, #4
 800997e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009992:	e023      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fd52 	bl	800a444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	021a      	lsls	r2, r3, #8
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80099d4:	e002      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
      break;
 80099da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e0de      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x1da>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009a2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a63      	ldr	r2, [pc, #396]	@ (8009bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	f000 80a9 	beq.w	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009a4c:	4a61      	ldr	r2, [pc, #388]	@ (8009bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	f200 80ae 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a54:	4a60      	ldr	r2, [pc, #384]	@ (8009bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	f000 80a1 	beq.w	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8009bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f200 80a6 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a64:	4a5d      	ldr	r2, [pc, #372]	@ (8009bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	f000 8099 	beq.w	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8009bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	f200 809e 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a74:	4a5a      	ldr	r2, [pc, #360]	@ (8009be0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	f000 8091 	beq.w	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009a7c:	4a58      	ldr	r2, [pc, #352]	@ (8009be0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	f200 8096 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a88:	f000 8089 	beq.w	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009a8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a90:	f200 808e 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a98:	d03e      	beq.n	8009b18 <HAL_TIM_ConfigClockSource+0x128>
 8009a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a9e:	f200 8087 	bhi.w	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa6:	f000 8086 	beq.w	8009bb6 <HAL_TIM_ConfigClockSource+0x1c6>
 8009aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aae:	d87f      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ab0:	2b70      	cmp	r3, #112	@ 0x70
 8009ab2:	d01a      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0xfa>
 8009ab4:	2b70      	cmp	r3, #112	@ 0x70
 8009ab6:	d87b      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ab8:	2b60      	cmp	r3, #96	@ 0x60
 8009aba:	d050      	beq.n	8009b5e <HAL_TIM_ConfigClockSource+0x16e>
 8009abc:	2b60      	cmp	r3, #96	@ 0x60
 8009abe:	d877      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ac0:	2b50      	cmp	r3, #80	@ 0x50
 8009ac2:	d03c      	beq.n	8009b3e <HAL_TIM_ConfigClockSource+0x14e>
 8009ac4:	2b50      	cmp	r3, #80	@ 0x50
 8009ac6:	d873      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ac8:	2b40      	cmp	r3, #64	@ 0x40
 8009aca:	d058      	beq.n	8009b7e <HAL_TIM_ConfigClockSource+0x18e>
 8009acc:	2b40      	cmp	r3, #64	@ 0x40
 8009ace:	d86f      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ad0:	2b30      	cmp	r3, #48	@ 0x30
 8009ad2:	d064      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009ad4:	2b30      	cmp	r3, #48	@ 0x30
 8009ad6:	d86b      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d060      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d867      	bhi.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d05c      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009ae4:	2b10      	cmp	r3, #16
 8009ae6:	d05a      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8009ae8:	e062      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009afa:	f000 fd85 	bl	800a608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	609a      	str	r2, [r3, #8]
      break;
 8009b16:	e04f      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b28:	f000 fd6e 	bl	800a608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b3a:	609a      	str	r2, [r3, #8]
      break;
 8009b3c:	e03c      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f000 fce0 	bl	800a510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2150      	movs	r1, #80	@ 0x50
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fd39 	bl	800a5ce <TIM_ITRx_SetConfig>
      break;
 8009b5c:	e02c      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f000 fcff 	bl	800a56e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2160      	movs	r1, #96	@ 0x60
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fd29 	bl	800a5ce <TIM_ITRx_SetConfig>
      break;
 8009b7c:	e01c      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f000 fcc0 	bl	800a510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2140      	movs	r1, #64	@ 0x40
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fd19 	bl	800a5ce <TIM_ITRx_SetConfig>
      break;
 8009b9c:	e00c      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f000 fd10 	bl	800a5ce <TIM_ITRx_SetConfig>
      break;
 8009bae:	e003      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb4:	e000      	b.n	8009bb8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	00100070 	.word	0x00100070
 8009bd8:	00100040 	.word	0x00100040
 8009bdc:	00100030 	.word	0x00100030
 8009be0:	00100020 	.word	0x00100020

08009be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d107      	bne.n	8009c70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2201      	movs	r2, #1
 8009c64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c6e:	e02a      	b.n	8009cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d107      	bne.n	8009c8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c88:	e01d      	b.n	8009cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d107      	bne.n	8009ca4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2204      	movs	r2, #4
 8009c98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ca2:	e010      	b.n	8009cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d107      	bne.n	8009cbe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2208      	movs	r2, #8
 8009cb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cbc:	e003      	b.n	8009cc6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff ffb4 	bl	8009c34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	771a      	strb	r2, [r3, #28]
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d10b      	bne.n	8009d0a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d136      	bne.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d08:	e031      	b.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d10b      	bne.n	8009d2c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2202      	movs	r2, #2
 8009d18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d125      	bne.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d2a:	e020      	b.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d10b      	bne.n	8009d4e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d114      	bne.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d4c:	e00f      	b.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d10a      	bne.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d103      	bne.n	8009d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7f8 f93c 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	771a      	strb	r2, [r3, #28]
}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d103      	bne.n	8009da2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	771a      	strb	r2, [r3, #28]
 8009da0:	e019      	b.n	8009dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d103      	bne.n	8009db4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2202      	movs	r2, #2
 8009db0:	771a      	strb	r2, [r3, #28]
 8009db2:	e010      	b.n	8009dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d103      	bne.n	8009dc6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	771a      	strb	r2, [r3, #28]
 8009dc4:	e007      	b.n	8009dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d102      	bne.n	8009dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2208      	movs	r2, #8
 8009dd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff ff18 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	771a      	strb	r2, [r3, #28]
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a42      	ldr	r2, [pc, #264]	@ (8009f08 <TIM_Base_SetConfig+0x11c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00f      	beq.n	8009e24 <TIM_Base_SetConfig+0x38>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e0a:	d00b      	beq.n	8009e24 <TIM_Base_SetConfig+0x38>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8009f0c <TIM_Base_SetConfig+0x120>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d007      	beq.n	8009e24 <TIM_Base_SetConfig+0x38>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a3e      	ldr	r2, [pc, #248]	@ (8009f10 <TIM_Base_SetConfig+0x124>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d003      	beq.n	8009e24 <TIM_Base_SetConfig+0x38>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8009f14 <TIM_Base_SetConfig+0x128>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d108      	bne.n	8009e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a33      	ldr	r2, [pc, #204]	@ (8009f08 <TIM_Base_SetConfig+0x11c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d01b      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e44:	d017      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a30      	ldr	r2, [pc, #192]	@ (8009f0c <TIM_Base_SetConfig+0x120>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d013      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a2f      	ldr	r2, [pc, #188]	@ (8009f10 <TIM_Base_SetConfig+0x124>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00f      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a2e      	ldr	r2, [pc, #184]	@ (8009f14 <TIM_Base_SetConfig+0x128>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00b      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a2d      	ldr	r2, [pc, #180]	@ (8009f18 <TIM_Base_SetConfig+0x12c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d007      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a2c      	ldr	r2, [pc, #176]	@ (8009f1c <TIM_Base_SetConfig+0x130>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d003      	beq.n	8009e76 <TIM_Base_SetConfig+0x8a>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a2b      	ldr	r2, [pc, #172]	@ (8009f20 <TIM_Base_SetConfig+0x134>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d108      	bne.n	8009e88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a16      	ldr	r2, [pc, #88]	@ (8009f08 <TIM_Base_SetConfig+0x11c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00f      	beq.n	8009ed4 <TIM_Base_SetConfig+0xe8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a17      	ldr	r2, [pc, #92]	@ (8009f14 <TIM_Base_SetConfig+0x128>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d00b      	beq.n	8009ed4 <TIM_Base_SetConfig+0xe8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a16      	ldr	r2, [pc, #88]	@ (8009f18 <TIM_Base_SetConfig+0x12c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d007      	beq.n	8009ed4 <TIM_Base_SetConfig+0xe8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a15      	ldr	r2, [pc, #84]	@ (8009f1c <TIM_Base_SetConfig+0x130>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d003      	beq.n	8009ed4 <TIM_Base_SetConfig+0xe8>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a14      	ldr	r2, [pc, #80]	@ (8009f20 <TIM_Base_SetConfig+0x134>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d103      	bne.n	8009edc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	691a      	ldr	r2, [r3, #16]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d105      	bne.n	8009efa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f023 0201 	bic.w	r2, r3, #1
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	611a      	str	r2, [r3, #16]
  }
}
 8009efa:	bf00      	nop
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40012c00 	.word	0x40012c00
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40013400 	.word	0x40013400
 8009f18:	40014000 	.word	0x40014000
 8009f1c:	40014400 	.word	0x40014400
 8009f20:	40014800 	.word	0x40014800

08009f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	f023 0201 	bic.w	r2, r3, #1
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0303 	bic.w	r3, r3, #3
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f023 0302 	bic.w	r3, r3, #2
 8009f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a2c      	ldr	r2, [pc, #176]	@ (800a030 <TIM_OC1_SetConfig+0x10c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00f      	beq.n	8009fa4 <TIM_OC1_SetConfig+0x80>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a2b      	ldr	r2, [pc, #172]	@ (800a034 <TIM_OC1_SetConfig+0x110>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00b      	beq.n	8009fa4 <TIM_OC1_SetConfig+0x80>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a2a      	ldr	r2, [pc, #168]	@ (800a038 <TIM_OC1_SetConfig+0x114>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d007      	beq.n	8009fa4 <TIM_OC1_SetConfig+0x80>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a29      	ldr	r2, [pc, #164]	@ (800a03c <TIM_OC1_SetConfig+0x118>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d003      	beq.n	8009fa4 <TIM_OC1_SetConfig+0x80>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a28      	ldr	r2, [pc, #160]	@ (800a040 <TIM_OC1_SetConfig+0x11c>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d10c      	bne.n	8009fbe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f023 0308 	bic.w	r3, r3, #8
 8009faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f023 0304 	bic.w	r3, r3, #4
 8009fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a1b      	ldr	r2, [pc, #108]	@ (800a030 <TIM_OC1_SetConfig+0x10c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00f      	beq.n	8009fe6 <TIM_OC1_SetConfig+0xc2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a1a      	ldr	r2, [pc, #104]	@ (800a034 <TIM_OC1_SetConfig+0x110>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00b      	beq.n	8009fe6 <TIM_OC1_SetConfig+0xc2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a19      	ldr	r2, [pc, #100]	@ (800a038 <TIM_OC1_SetConfig+0x114>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d007      	beq.n	8009fe6 <TIM_OC1_SetConfig+0xc2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a18      	ldr	r2, [pc, #96]	@ (800a03c <TIM_OC1_SetConfig+0x118>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d003      	beq.n	8009fe6 <TIM_OC1_SetConfig+0xc2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a17      	ldr	r2, [pc, #92]	@ (800a040 <TIM_OC1_SetConfig+0x11c>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d111      	bne.n	800a00a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	621a      	str	r2, [r3, #32]
}
 800a024:	bf00      	nop
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	40012c00 	.word	0x40012c00
 800a034:	40013400 	.word	0x40013400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800

0800a044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f023 0210 	bic.w	r2, r3, #16
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f023 0320 	bic.w	r3, r3, #32
 800a092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a28      	ldr	r2, [pc, #160]	@ (800a144 <TIM_OC2_SetConfig+0x100>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d003      	beq.n	800a0b0 <TIM_OC2_SetConfig+0x6c>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a27      	ldr	r2, [pc, #156]	@ (800a148 <TIM_OC2_SetConfig+0x104>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10d      	bne.n	800a0cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	011b      	lsls	r3, r3, #4
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a144 <TIM_OC2_SetConfig+0x100>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00f      	beq.n	800a0f4 <TIM_OC2_SetConfig+0xb0>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a148 <TIM_OC2_SetConfig+0x104>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00b      	beq.n	800a0f4 <TIM_OC2_SetConfig+0xb0>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a1b      	ldr	r2, [pc, #108]	@ (800a14c <TIM_OC2_SetConfig+0x108>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d007      	beq.n	800a0f4 <TIM_OC2_SetConfig+0xb0>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a150 <TIM_OC2_SetConfig+0x10c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_OC2_SetConfig+0xb0>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a19      	ldr	r2, [pc, #100]	@ (800a154 <TIM_OC2_SetConfig+0x110>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d113      	bne.n	800a11c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	621a      	str	r2, [r3, #32]
}
 800a136:	bf00      	nop
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40012c00 	.word	0x40012c00
 800a148:	40013400 	.word	0x40013400
 800a14c:	40014000 	.word	0x40014000
 800a150:	40014400 	.word	0x40014400
 800a154:	40014800 	.word	0x40014800

0800a158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a27      	ldr	r2, [pc, #156]	@ (800a254 <TIM_OC3_SetConfig+0xfc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <TIM_OC3_SetConfig+0x6a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a26      	ldr	r2, [pc, #152]	@ (800a258 <TIM_OC3_SetConfig+0x100>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d10d      	bne.n	800a1de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a254 <TIM_OC3_SetConfig+0xfc>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00f      	beq.n	800a206 <TIM_OC3_SetConfig+0xae>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a258 <TIM_OC3_SetConfig+0x100>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00b      	beq.n	800a206 <TIM_OC3_SetConfig+0xae>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a25c <TIM_OC3_SetConfig+0x104>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d007      	beq.n	800a206 <TIM_OC3_SetConfig+0xae>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a19      	ldr	r2, [pc, #100]	@ (800a260 <TIM_OC3_SetConfig+0x108>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d003      	beq.n	800a206 <TIM_OC3_SetConfig+0xae>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a18      	ldr	r2, [pc, #96]	@ (800a264 <TIM_OC3_SetConfig+0x10c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d113      	bne.n	800a22e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a20c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	621a      	str	r2, [r3, #32]
}
 800a248:	bf00      	nop
 800a24a:	371c      	adds	r7, #28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	40012c00 	.word	0x40012c00
 800a258:	40013400 	.word	0x40013400
 800a25c:	40014000 	.word	0x40014000
 800a260:	40014400 	.word	0x40014400
 800a264:	40014800 	.word	0x40014800

0800a268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	031b      	lsls	r3, r3, #12
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a28      	ldr	r2, [pc, #160]	@ (800a368 <TIM_OC4_SetConfig+0x100>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d003      	beq.n	800a2d4 <TIM_OC4_SetConfig+0x6c>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a27      	ldr	r2, [pc, #156]	@ (800a36c <TIM_OC4_SetConfig+0x104>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d10d      	bne.n	800a2f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a2da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	031b      	lsls	r3, r3, #12
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a1d      	ldr	r2, [pc, #116]	@ (800a368 <TIM_OC4_SetConfig+0x100>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00f      	beq.n	800a318 <TIM_OC4_SetConfig+0xb0>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a36c <TIM_OC4_SetConfig+0x104>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00b      	beq.n	800a318 <TIM_OC4_SetConfig+0xb0>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a1b      	ldr	r2, [pc, #108]	@ (800a370 <TIM_OC4_SetConfig+0x108>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d007      	beq.n	800a318 <TIM_OC4_SetConfig+0xb0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a1a      	ldr	r2, [pc, #104]	@ (800a374 <TIM_OC4_SetConfig+0x10c>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d003      	beq.n	800a318 <TIM_OC4_SetConfig+0xb0>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a19      	ldr	r2, [pc, #100]	@ (800a378 <TIM_OC4_SetConfig+0x110>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d113      	bne.n	800a340 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a31e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a326:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	019b      	lsls	r3, r3, #6
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4313      	orrs	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	019b      	lsls	r3, r3, #6
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40012c00 	.word	0x40012c00
 800a36c:	40013400 	.word	0x40013400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800

0800a37c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a3c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	041b      	lsls	r3, r3, #16
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a17      	ldr	r2, [pc, #92]	@ (800a430 <TIM_OC5_SetConfig+0xb4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d00f      	beq.n	800a3f6 <TIM_OC5_SetConfig+0x7a>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a16      	ldr	r2, [pc, #88]	@ (800a434 <TIM_OC5_SetConfig+0xb8>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00b      	beq.n	800a3f6 <TIM_OC5_SetConfig+0x7a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a15      	ldr	r2, [pc, #84]	@ (800a438 <TIM_OC5_SetConfig+0xbc>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d007      	beq.n	800a3f6 <TIM_OC5_SetConfig+0x7a>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a14      	ldr	r2, [pc, #80]	@ (800a43c <TIM_OC5_SetConfig+0xc0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d003      	beq.n	800a3f6 <TIM_OC5_SetConfig+0x7a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a13      	ldr	r2, [pc, #76]	@ (800a440 <TIM_OC5_SetConfig+0xc4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d109      	bne.n	800a40a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	621a      	str	r2, [r3, #32]
}
 800a424:	bf00      	nop
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	40012c00 	.word	0x40012c00
 800a434:	40013400 	.word	0x40013400
 800a438:	40014000 	.word	0x40014000
 800a43c:	40014400 	.word	0x40014400
 800a440:	40014800 	.word	0x40014800

0800a444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	4313      	orrs	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a48a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	051b      	lsls	r3, r3, #20
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	4313      	orrs	r3, r2
 800a496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a18      	ldr	r2, [pc, #96]	@ (800a4fc <TIM_OC6_SetConfig+0xb8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d00f      	beq.n	800a4c0 <TIM_OC6_SetConfig+0x7c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a17      	ldr	r2, [pc, #92]	@ (800a500 <TIM_OC6_SetConfig+0xbc>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00b      	beq.n	800a4c0 <TIM_OC6_SetConfig+0x7c>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a16      	ldr	r2, [pc, #88]	@ (800a504 <TIM_OC6_SetConfig+0xc0>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d007      	beq.n	800a4c0 <TIM_OC6_SetConfig+0x7c>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a15      	ldr	r2, [pc, #84]	@ (800a508 <TIM_OC6_SetConfig+0xc4>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d003      	beq.n	800a4c0 <TIM_OC6_SetConfig+0x7c>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a14      	ldr	r2, [pc, #80]	@ (800a50c <TIM_OC6_SetConfig+0xc8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d109      	bne.n	800a4d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	029b      	lsls	r3, r3, #10
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	621a      	str	r2, [r3, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40012c00 	.word	0x40012c00
 800a500:	40013400 	.word	0x40013400
 800a504:	40014000 	.word	0x40014000
 800a508:	40014400 	.word	0x40014400
 800a50c:	40014800 	.word	0x40014800

0800a510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f023 0201 	bic.w	r2, r3, #1
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a53a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f023 030a 	bic.w	r3, r3, #10
 800a54c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4313      	orrs	r3, r2
 800a554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	621a      	str	r2, [r3, #32]
}
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a56e:	b480      	push	{r7}
 800a570:	b087      	sub	sp, #28
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	f023 0210 	bic.w	r2, r3, #16
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	031b      	lsls	r3, r3, #12
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a5e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f043 0307 	orr.w	r3, r3, #7
 800a5f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	609a      	str	r2, [r3, #8]
}
 800a5fc:	bf00      	nop
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	021a      	lsls	r2, r3, #8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	431a      	orrs	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4313      	orrs	r3, r2
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	609a      	str	r2, [r3, #8]
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f003 031f 	and.w	r3, r3, #31
 800a65a:	2201      	movs	r2, #1
 800a65c:	fa02 f303 	lsl.w	r3, r2, r3
 800a660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1a      	ldr	r2, [r3, #32]
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	43db      	mvns	r3, r3
 800a66a:	401a      	ands	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a1a      	ldr	r2, [r3, #32]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	fa01 f303 	lsl.w	r3, r1, r3
 800a680:	431a      	orrs	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	621a      	str	r2, [r3, #32]
}
 800a686:	bf00      	nop
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
	...

0800a694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e065      	b.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d004      	beq.n	800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a2b      	ldr	r2, [pc, #172]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d108      	bne.n	800a6f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a6f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a1b      	ldr	r2, [pc, #108]	@ (800a784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d018      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a722:	d013      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a18      	ldr	r2, [pc, #96]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d00e      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a17      	ldr	r2, [pc, #92]	@ (800a790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d009      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a12      	ldr	r2, [pc, #72]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d004      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a13      	ldr	r2, [pc, #76]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d10c      	bne.n	800a766 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	40012c00 	.word	0x40012c00
 800a788:	40013400 	.word	0x40013400
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40014000 	.word	0x40014000

0800a798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e042      	b.n	800a8bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7f9 f803 	bl	8003854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2224      	movs	r2, #36	@ 0x24
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0201 	bic.w	r2, r2, #1
 800a864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 f8be 	bl	800b9f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fdef 	bl	800b458 <UART_SetConfig>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e01b      	b.n	800a8bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f93d 	bl	800bb34 <UART_CheckIdleState>
 800a8ba:	4603      	mov	r3, r0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08a      	sub	sp, #40	@ 0x28
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	d17b      	bne.n	800a9d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_UART_Transmit+0x26>
 800a8e4:	88fb      	ldrh	r3, [r7, #6]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e074      	b.n	800a9d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2221      	movs	r2, #33	@ 0x21
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8fe:	f7f9 fe3d 	bl	800457c <HAL_GetTick>
 800a902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	88fa      	ldrh	r2, [r7, #6]
 800a908:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	88fa      	ldrh	r2, [r7, #6]
 800a910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a91c:	d108      	bne.n	800a930 <HAL_UART_Transmit+0x6c>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	e003      	b.n	800a938 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a938:	e030      	b.n	800a99c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2200      	movs	r2, #0
 800a942:	2180      	movs	r1, #128	@ 0x80
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f001 f99f 	bl	800bc88 <UART_WaitOnFlagUntilTimeout>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2220      	movs	r2, #32
 800a954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e03d      	b.n	800a9d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a970:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3302      	adds	r3, #2
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e007      	b.n	800a98a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	781a      	ldrb	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	3301      	adds	r3, #1
 800a988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1c8      	bne.n	800a93a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2140      	movs	r1, #64	@ 0x40
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f001 f968 	bl	800bc88 <UART_WaitOnFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e006      	b.n	800a9d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2220      	movs	r2, #32
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e000      	b.n	800a9d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a9d6:	2302      	movs	r3, #2
  }
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	@ 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d167      	bne.n	800aac8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_UART_Transmit_DMA+0x24>
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e060      	b.n	800aaca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	88fa      	ldrh	r2, [r7, #6]
 800aa12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	88fa      	ldrh	r2, [r7, #6]
 800aa1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2221      	movs	r2, #33	@ 0x21
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d028      	beq.n	800aa88 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa3a:	4a26      	ldr	r2, [pc, #152]	@ (800aad4 <HAL_UART_Transmit_DMA+0xf4>)
 800aa3c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa42:	4a25      	ldr	r2, [pc, #148]	@ (800aad8 <HAL_UART_Transmit_DMA+0xf8>)
 800aa44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa4a:	4a24      	ldr	r2, [pc, #144]	@ (800aadc <HAL_UART_Transmit_DMA+0xfc>)
 800aa4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa52:	2200      	movs	r2, #0
 800aa54:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa5e:	4619      	mov	r1, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3328      	adds	r3, #40	@ 0x28
 800aa66:	461a      	mov	r2, r3
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	f7fb fbf3 	bl	8006254 <HAL_DMA_Start_IT>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2210      	movs	r2, #16
 800aa78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e020      	b.n	800aaca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2240      	movs	r2, #64	@ 0x40
 800aa8e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3308      	adds	r3, #8
 800aa96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3308      	adds	r3, #8
 800aaae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aab0:	623a      	str	r2, [r7, #32]
 800aab2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	6a3a      	ldr	r2, [r7, #32]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e5      	bne.n	800aa90 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e000      	b.n	800aaca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aac8:	2302      	movs	r3, #2
  }
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3728      	adds	r7, #40	@ 0x28
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	0800bfff 	.word	0x0800bfff
 800aad8:	0800c099 	.word	0x0800c099
 800aadc:	0800c21f 	.word	0x0800c21f

0800aae0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	@ 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	d137      	bne.n	800ab68 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <HAL_UART_Receive_DMA+0x24>
 800aafe:	88fb      	ldrh	r3, [r7, #6]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e030      	b.n	800ab6a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a18      	ldr	r2, [pc, #96]	@ (800ab74 <HAL_UART_Receive_DMA+0x94>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d01f      	beq.n	800ab58 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d018      	beq.n	800ab58 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	613b      	str	r3, [r7, #16]
   return(result);
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	623b      	str	r3, [r7, #32]
 800ab46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	69f9      	ldr	r1, [r7, #28]
 800ab4a:	6a3a      	ldr	r2, [r7, #32]
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e6      	bne.n	800ab26 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab58:	88fb      	ldrh	r3, [r7, #6]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f001 f900 	bl	800bd64 <UART_Start_Receive_DMA>
 800ab64:	4603      	mov	r3, r0
 800ab66:	e000      	b.n	800ab6a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab68:	2302      	movs	r3, #2
  }
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3728      	adds	r7, #40	@ 0x28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40008000 	.word	0x40008000

0800ab78 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b0a0      	sub	sp, #128	@ 0x80
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ab8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab90:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ab94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aba0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aba4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800abac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e6      	bne.n	800ab80 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800abc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abc4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3308      	adds	r3, #8
 800abd4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800abd6:	657a      	str	r2, [r7, #84]	@ 0x54
 800abd8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800abdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e3      	bne.n	800abb2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d118      	bne.n	800ac24 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfa:	e853 3f00 	ldrex	r3, [r3]
 800abfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	f023 0310 	bic.w	r3, r3, #16
 800ac06:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac10:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e6      	bne.n	800abf2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2e:	2b80      	cmp	r3, #128	@ 0x80
 800ac30:	d137      	bne.n	800aca2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3308      	adds	r3, #8
 800ac38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac48:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3308      	adds	r3, #8
 800ac50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ac52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e5      	bne.n	800ac32 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d019      	beq.n	800aca2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac72:	2200      	movs	r2, #0
 800ac74:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fb fb65 	bl	800634a <HAL_DMA_Abort>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00d      	beq.n	800aca2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fb fccc 	bl	8006628 <HAL_DMA_GetError>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d105      	bne.n	800aca2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2210      	movs	r2, #16
 800ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e073      	b.n	800ad8a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acac:	2b40      	cmp	r3, #64	@ 0x40
 800acae:	d13b      	bne.n	800ad28 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3308      	adds	r3, #8
 800acb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3308      	adds	r3, #8
 800acce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acd0:	61ba      	str	r2, [r7, #24]
 800acd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6979      	ldr	r1, [r7, #20]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	613b      	str	r3, [r7, #16]
   return(result);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e5      	bne.n	800acb0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01c      	beq.n	800ad28 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf4:	2200      	movs	r2, #0
 800acf6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fb fb23 	bl	800634a <HAL_DMA_Abort>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00e      	beq.n	800ad28 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fb fc89 	bl	8006628 <HAL_DMA_GetError>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d105      	bne.n	800ad28 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2210      	movs	r2, #16
 800ad20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e030      	b.n	800ad8a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	220f      	movs	r2, #15
 800ad3e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad48:	d107      	bne.n	800ad5a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f042 0210 	orr.w	r2, r2, #16
 800ad58:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f042 0208 	orr.w	r2, r2, #8
 800ad68:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3780      	adds	r7, #128	@ 0x80
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b0ba      	sub	sp, #232	@ 0xe8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800adba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800adbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800adc2:	4013      	ands	r3, r2
 800adc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800adc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d11b      	bne.n	800ae08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800add0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800add4:	f003 0320 	and.w	r3, r3, #32
 800add8:	2b00      	cmp	r3, #0
 800adda:	d015      	beq.n	800ae08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800addc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ade0:	f003 0320 	and.w	r3, r3, #32
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d105      	bne.n	800adf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ade8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 8300 	beq.w	800b3fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	4798      	blx	r3
      }
      return;
 800ae06:	e2fa      	b.n	800b3fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 8123 	beq.w	800b058 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ae12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae16:	4b8d      	ldr	r3, [pc, #564]	@ (800b04c <HAL_UART_IRQHandler+0x2b8>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d106      	bne.n	800ae2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ae1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ae22:	4b8b      	ldr	r3, [pc, #556]	@ (800b050 <HAL_UART_IRQHandler+0x2bc>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 8116 	beq.w	800b058 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_UART_IRQHandler+0xc8>
 800ae38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae52:	f043 0201 	orr.w	r2, r3, #1
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <HAL_UART_IRQHandler+0xf8>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	f043 0204 	orr.w	r2, r3, #4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d011      	beq.n	800aebc <HAL_UART_IRQHandler+0x128>
 800ae98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00b      	beq.n	800aebc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2204      	movs	r2, #4
 800aeaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb2:	f043 0202 	orr.w	r2, r3, #2
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec0:	f003 0308 	and.w	r3, r3, #8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d017      	beq.n	800aef8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d105      	bne.n	800aee0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aed4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aed8:	4b5c      	ldr	r3, [pc, #368]	@ (800b04c <HAL_UART_IRQHandler+0x2b8>)
 800aeda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2208      	movs	r2, #8
 800aee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeee:	f043 0208 	orr.w	r2, r3, #8
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aefc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af00:	2b00      	cmp	r3, #0
 800af02:	d012      	beq.n	800af2a <HAL_UART_IRQHandler+0x196>
 800af04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00c      	beq.n	800af2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af20:	f043 0220 	orr.w	r2, r3, #32
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 8266 	beq.w	800b402 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d013      	beq.n	800af6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af46:	f003 0320 	and.w	r3, r3, #32
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d105      	bne.n	800af5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7e:	2b40      	cmp	r3, #64	@ 0x40
 800af80:	d005      	beq.n	800af8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d054      	beq.n	800b038 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 ffcf 	bl	800bf32 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9e:	2b40      	cmp	r3, #64	@ 0x40
 800afa0:	d146      	bne.n	800b030 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3308      	adds	r3, #8
 800afa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3308      	adds	r3, #8
 800afca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800afda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800afe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1d9      	bne.n	800afa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d017      	beq.n	800b028 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800affe:	4a15      	ldr	r2, [pc, #84]	@ (800b054 <HAL_UART_IRQHandler+0x2c0>)
 800b000:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fb f9f7 	bl	80063fc <HAL_DMA_Abort_IT>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d019      	beq.n	800b048 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b022:	4610      	mov	r0, r2
 800b024:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b026:	e00f      	b.n	800b048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f9ff 	bl	800b42c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b02e:	e00b      	b.n	800b048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f9fb 	bl	800b42c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b036:	e007      	b.n	800b048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9f7 	bl	800b42c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b046:	e1dc      	b.n	800b402 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b048:	bf00      	nop
    return;
 800b04a:	e1da      	b.n	800b402 <HAL_UART_IRQHandler+0x66e>
 800b04c:	10000001 	.word	0x10000001
 800b050:	04000120 	.word	0x04000120
 800b054:	0800c29f 	.word	0x0800c29f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	f040 8170 	bne.w	800b342 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8169 	beq.w	800b342 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8162 	beq.w	800b342 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2210      	movs	r2, #16
 800b084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b090:	2b40      	cmp	r3, #64	@ 0x40
 800b092:	f040 80d8 	bne.w	800b246 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 80af 	beq.w	800b20c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	f080 80a7 	bcs.w	800b20c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f040 8087 	bne.w	800b1ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b10a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b112:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b11e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1da      	bne.n	800b0dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3308      	adds	r3, #8
 800b146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b14a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b14e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b152:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b15c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e1      	bne.n	800b126 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3308      	adds	r3, #8
 800b168:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3308      	adds	r3, #8
 800b182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b186:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b188:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b18c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e3      	bne.n	800b162 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2220      	movs	r2, #32
 800b19e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1b8:	f023 0310 	bic.w	r3, r3, #16
 800b1bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e4      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fb f8b0 	bl	800634a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	b29b      	uxth	r3, r3
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f91b 	bl	800b440 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b20a:	e0fc      	b.n	800b406 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b216:	429a      	cmp	r2, r3
 800b218:	f040 80f5 	bne.w	800b406 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	f040 80eb 	bne.w	800b406 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f8fe 	bl	800b440 <HAL_UARTEx_RxEventCallback>
      return;
 800b244:	e0df      	b.n	800b406 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b252:	b29b      	uxth	r3, r3
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80d1 	beq.w	800b40a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80cc 	beq.w	800b40a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	e853 3f00 	ldrex	r3, [r3]
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b294:	647b      	str	r3, [r7, #68]	@ 0x44
 800b296:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e4      	bne.n	800b272 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	623b      	str	r3, [r7, #32]
   return(result);
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3308      	adds	r3, #8
 800b2cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e1      	bne.n	800b2a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	60fb      	str	r3, [r7, #12]
   return(result);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f023 0310 	bic.w	r3, r3, #16
 800b30c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31e:	69b9      	ldr	r1, [r7, #24]
 800b320:	69fa      	ldr	r2, [r7, #28]
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	617b      	str	r3, [r7, #20]
   return(result);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1e4      	bne.n	800b2f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2202      	movs	r2, #2
 800b332:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f880 	bl	800b440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b340:	e063      	b.n	800b40a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00e      	beq.n	800b36c <HAL_UART_IRQHandler+0x5d8>
 800b34e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b362:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 ffd7 	bl	800c318 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b36a:	e051      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b374:	2b00      	cmp	r3, #0
 800b376:	d014      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b37c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b380:	2b00      	cmp	r3, #0
 800b382:	d105      	bne.n	800b390 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d008      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b394:	2b00      	cmp	r3, #0
 800b396:	d03a      	beq.n	800b40e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	4798      	blx	r3
    }
    return;
 800b3a0:	e035      	b.n	800b40e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x62e>
 800b3ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 ff81 	bl	800c2c2 <UART_EndTransmit_IT>
    return;
 800b3c0:	e026      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x64e>
 800b3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 ffb0 	bl	800c340 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3e0:	e016      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d010      	beq.n	800b410 <HAL_UART_IRQHandler+0x67c>
 800b3ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da0c      	bge.n	800b410 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 ff98 	bl	800c32c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3fc:	e008      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
      return;
 800b3fe:	bf00      	nop
 800b400:	e006      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
    return;
 800b402:	bf00      	nop
 800b404:	e004      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
      return;
 800b406:	bf00      	nop
 800b408:	e002      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
      return;
 800b40a:	bf00      	nop
 800b40c:	e000      	b.n	800b410 <HAL_UART_IRQHandler+0x67c>
    return;
 800b40e:	bf00      	nop
  }
}
 800b410:	37e8      	adds	r7, #232	@ 0xe8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop

0800b418 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b45c:	b08c      	sub	sp, #48	@ 0x30
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	431a      	orrs	r2, r3
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	431a      	orrs	r2, r3
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	4bab      	ldr	r3, [pc, #684]	@ (800b734 <UART_SetConfig+0x2dc>)
 800b488:	4013      	ands	r3, r2
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b490:	430b      	orrs	r3, r1
 800b492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4aa0      	ldr	r2, [pc, #640]	@ (800b738 <UART_SetConfig+0x2e0>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d004      	beq.n	800b4c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b4ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	6812      	ldr	r2, [r2, #0]
 800b4d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e2:	f023 010f 	bic.w	r1, r3, #15
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a91      	ldr	r2, [pc, #580]	@ (800b73c <UART_SetConfig+0x2e4>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d125      	bne.n	800b548 <UART_SetConfig+0xf0>
 800b4fc:	4b90      	ldr	r3, [pc, #576]	@ (800b740 <UART_SetConfig+0x2e8>)
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d81a      	bhi.n	800b540 <UART_SetConfig+0xe8>
 800b50a:	a201      	add	r2, pc, #4	@ (adr r2, 800b510 <UART_SetConfig+0xb8>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b521 	.word	0x0800b521
 800b514:	0800b531 	.word	0x0800b531
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b539 	.word	0x0800b539
 800b520:	2301      	movs	r3, #1
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b526:	e0d6      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b528:	2302      	movs	r3, #2
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52e:	e0d2      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b530:	2304      	movs	r3, #4
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b536:	e0ce      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b538:	2308      	movs	r3, #8
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53e:	e0ca      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b540:	2310      	movs	r3, #16
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b546:	e0c6      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a7d      	ldr	r2, [pc, #500]	@ (800b744 <UART_SetConfig+0x2ec>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d138      	bne.n	800b5c4 <UART_SetConfig+0x16c>
 800b552:	4b7b      	ldr	r3, [pc, #492]	@ (800b740 <UART_SetConfig+0x2e8>)
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b558:	f003 030c 	and.w	r3, r3, #12
 800b55c:	2b0c      	cmp	r3, #12
 800b55e:	d82d      	bhi.n	800b5bc <UART_SetConfig+0x164>
 800b560:	a201      	add	r2, pc, #4	@ (adr r2, 800b568 <UART_SetConfig+0x110>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b59d 	.word	0x0800b59d
 800b56c:	0800b5bd 	.word	0x0800b5bd
 800b570:	0800b5bd 	.word	0x0800b5bd
 800b574:	0800b5bd 	.word	0x0800b5bd
 800b578:	0800b5ad 	.word	0x0800b5ad
 800b57c:	0800b5bd 	.word	0x0800b5bd
 800b580:	0800b5bd 	.word	0x0800b5bd
 800b584:	0800b5bd 	.word	0x0800b5bd
 800b588:	0800b5a5 	.word	0x0800b5a5
 800b58c:	0800b5bd 	.word	0x0800b5bd
 800b590:	0800b5bd 	.word	0x0800b5bd
 800b594:	0800b5bd 	.word	0x0800b5bd
 800b598:	0800b5b5 	.word	0x0800b5b5
 800b59c:	2300      	movs	r3, #0
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5a2:	e098      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5aa:	e094      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5b2:	e090      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5b4:	2308      	movs	r3, #8
 800b5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ba:	e08c      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5bc:	2310      	movs	r3, #16
 800b5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5c2:	e088      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a5f      	ldr	r2, [pc, #380]	@ (800b748 <UART_SetConfig+0x2f0>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d125      	bne.n	800b61a <UART_SetConfig+0x1c2>
 800b5ce:	4b5c      	ldr	r3, [pc, #368]	@ (800b740 <UART_SetConfig+0x2e8>)
 800b5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b5d8:	2b30      	cmp	r3, #48	@ 0x30
 800b5da:	d016      	beq.n	800b60a <UART_SetConfig+0x1b2>
 800b5dc:	2b30      	cmp	r3, #48	@ 0x30
 800b5de:	d818      	bhi.n	800b612 <UART_SetConfig+0x1ba>
 800b5e0:	2b20      	cmp	r3, #32
 800b5e2:	d00a      	beq.n	800b5fa <UART_SetConfig+0x1a2>
 800b5e4:	2b20      	cmp	r3, #32
 800b5e6:	d814      	bhi.n	800b612 <UART_SetConfig+0x1ba>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <UART_SetConfig+0x19a>
 800b5ec:	2b10      	cmp	r3, #16
 800b5ee:	d008      	beq.n	800b602 <UART_SetConfig+0x1aa>
 800b5f0:	e00f      	b.n	800b612 <UART_SetConfig+0x1ba>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f8:	e06d      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b600:	e069      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b602:	2304      	movs	r3, #4
 800b604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b608:	e065      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b60a:	2308      	movs	r3, #8
 800b60c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b610:	e061      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b612:	2310      	movs	r3, #16
 800b614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b618:	e05d      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a4b      	ldr	r2, [pc, #300]	@ (800b74c <UART_SetConfig+0x2f4>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d125      	bne.n	800b670 <UART_SetConfig+0x218>
 800b624:	4b46      	ldr	r3, [pc, #280]	@ (800b740 <UART_SetConfig+0x2e8>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b62e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b630:	d016      	beq.n	800b660 <UART_SetConfig+0x208>
 800b632:	2bc0      	cmp	r3, #192	@ 0xc0
 800b634:	d818      	bhi.n	800b668 <UART_SetConfig+0x210>
 800b636:	2b80      	cmp	r3, #128	@ 0x80
 800b638:	d00a      	beq.n	800b650 <UART_SetConfig+0x1f8>
 800b63a:	2b80      	cmp	r3, #128	@ 0x80
 800b63c:	d814      	bhi.n	800b668 <UART_SetConfig+0x210>
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <UART_SetConfig+0x1f0>
 800b642:	2b40      	cmp	r3, #64	@ 0x40
 800b644:	d008      	beq.n	800b658 <UART_SetConfig+0x200>
 800b646:	e00f      	b.n	800b668 <UART_SetConfig+0x210>
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b64e:	e042      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b650:	2302      	movs	r3, #2
 800b652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b656:	e03e      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b658:	2304      	movs	r3, #4
 800b65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b65e:	e03a      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b660:	2308      	movs	r3, #8
 800b662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b666:	e036      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b668:	2310      	movs	r3, #16
 800b66a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b66e:	e032      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a30      	ldr	r2, [pc, #192]	@ (800b738 <UART_SetConfig+0x2e0>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d12a      	bne.n	800b6d0 <UART_SetConfig+0x278>
 800b67a:	4b31      	ldr	r3, [pc, #196]	@ (800b740 <UART_SetConfig+0x2e8>)
 800b67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b688:	d01a      	beq.n	800b6c0 <UART_SetConfig+0x268>
 800b68a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b68e:	d81b      	bhi.n	800b6c8 <UART_SetConfig+0x270>
 800b690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b694:	d00c      	beq.n	800b6b0 <UART_SetConfig+0x258>
 800b696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b69a:	d815      	bhi.n	800b6c8 <UART_SetConfig+0x270>
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <UART_SetConfig+0x250>
 800b6a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6a4:	d008      	beq.n	800b6b8 <UART_SetConfig+0x260>
 800b6a6:	e00f      	b.n	800b6c8 <UART_SetConfig+0x270>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ae:	e012      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6b6:	e00e      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6be:	e00a      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b6c0:	2308      	movs	r3, #8
 800b6c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6c6:	e006      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ce:	e002      	b.n	800b6d6 <UART_SetConfig+0x27e>
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	@ (800b738 <UART_SetConfig+0x2e0>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	f040 80a8 	bne.w	800b832 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d834      	bhi.n	800b754 <UART_SetConfig+0x2fc>
 800b6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f0 <UART_SetConfig+0x298>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b755 	.word	0x0800b755
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b755 	.word	0x0800b755
 800b700:	0800b723 	.word	0x0800b723
 800b704:	0800b755 	.word	0x0800b755
 800b708:	0800b755 	.word	0x0800b755
 800b70c:	0800b755 	.word	0x0800b755
 800b710:	0800b72b 	.word	0x0800b72b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b714:	f7fc fc14 	bl	8007f40 <HAL_RCC_GetPCLK1Freq>
 800b718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b71a:	e021      	b.n	800b760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b71c:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <UART_SetConfig+0x2f8>)
 800b71e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b720:	e01e      	b.n	800b760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b722:	f7fc fba1 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 800b726:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b728:	e01a      	b.n	800b760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b72e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b730:	e016      	b.n	800b760 <UART_SetConfig+0x308>
 800b732:	bf00      	nop
 800b734:	cfff69f3 	.word	0xcfff69f3
 800b738:	40008000 	.word	0x40008000
 800b73c:	40013800 	.word	0x40013800
 800b740:	40021000 	.word	0x40021000
 800b744:	40004400 	.word	0x40004400
 800b748:	40004800 	.word	0x40004800
 800b74c:	40004c00 	.word	0x40004c00
 800b750:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b75e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 812a 	beq.w	800b9bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b76c:	4a9e      	ldr	r2, [pc, #632]	@ (800b9e8 <UART_SetConfig+0x590>)
 800b76e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b772:	461a      	mov	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	fbb3 f3f2 	udiv	r3, r3, r2
 800b77a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	4413      	add	r3, r2
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d305      	bcc.n	800b798 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d903      	bls.n	800b7a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b79e:	e10d      	b.n	800b9bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	60bb      	str	r3, [r7, #8]
 800b7a6:	60fa      	str	r2, [r7, #12]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ac:	4a8e      	ldr	r2, [pc, #568]	@ (800b9e8 <UART_SetConfig+0x590>)
 800b7ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7c2:	f7f5 fa89 	bl	8000cd8 <__aeabi_uldivmod>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f04f 0200 	mov.w	r2, #0
 800b7d2:	f04f 0300 	mov.w	r3, #0
 800b7d6:	020b      	lsls	r3, r1, #8
 800b7d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7dc:	0202      	lsls	r2, r0, #8
 800b7de:	6979      	ldr	r1, [r7, #20]
 800b7e0:	6849      	ldr	r1, [r1, #4]
 800b7e2:	0849      	lsrs	r1, r1, #1
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	eb12 0804 	adds.w	r8, r2, r4
 800b7ee:	eb43 0905 	adc.w	r9, r3, r5
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	4693      	mov	fp, r2
 800b7fc:	4652      	mov	r2, sl
 800b7fe:	465b      	mov	r3, fp
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f5 fa68 	bl	8000cd8 <__aeabi_uldivmod>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4613      	mov	r3, r2
 800b80e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b816:	d308      	bcc.n	800b82a <UART_SetConfig+0x3d2>
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b81e:	d204      	bcs.n	800b82a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6a3a      	ldr	r2, [r7, #32]
 800b826:	60da      	str	r2, [r3, #12]
 800b828:	e0c8      	b.n	800b9bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b830:	e0c4      	b.n	800b9bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b83a:	d167      	bne.n	800b90c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b83c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b840:	2b08      	cmp	r3, #8
 800b842:	d828      	bhi.n	800b896 <UART_SetConfig+0x43e>
 800b844:	a201      	add	r2, pc, #4	@ (adr r2, 800b84c <UART_SetConfig+0x3f4>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b881 	.word	0x0800b881
 800b858:	0800b897 	.word	0x0800b897
 800b85c:	0800b887 	.word	0x0800b887
 800b860:	0800b897 	.word	0x0800b897
 800b864:	0800b897 	.word	0x0800b897
 800b868:	0800b897 	.word	0x0800b897
 800b86c:	0800b88f 	.word	0x0800b88f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b870:	f7fc fb66 	bl	8007f40 <HAL_RCC_GetPCLK1Freq>
 800b874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b876:	e014      	b.n	800b8a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b878:	f7fc fb78 	bl	8007f6c <HAL_RCC_GetPCLK2Freq>
 800b87c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b87e:	e010      	b.n	800b8a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b880:	4b5a      	ldr	r3, [pc, #360]	@ (800b9ec <UART_SetConfig+0x594>)
 800b882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b884:	e00d      	b.n	800b8a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b886:	f7fc faef 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 800b88a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b88c:	e009      	b.n	800b8a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b88e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b894:	e005      	b.n	800b8a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b8a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 8089 	beq.w	800b9bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ae:	4a4e      	ldr	r2, [pc, #312]	@ (800b9e8 <UART_SetConfig+0x590>)
 800b8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8bc:	005a      	lsls	r2, r3, #1
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	085b      	lsrs	r3, r3, #1
 800b8c4:	441a      	add	r2, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	2b0f      	cmp	r3, #15
 800b8d4:	d916      	bls.n	800b904 <UART_SetConfig+0x4ac>
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8dc:	d212      	bcs.n	800b904 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	f023 030f 	bic.w	r3, r3, #15
 800b8e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	085b      	lsrs	r3, r3, #1
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	8bfb      	ldrh	r3, [r7, #30]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	8bfa      	ldrh	r2, [r7, #30]
 800b900:	60da      	str	r2, [r3, #12]
 800b902:	e05b      	b.n	800b9bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b90a:	e057      	b.n	800b9bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b90c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b910:	2b08      	cmp	r3, #8
 800b912:	d828      	bhi.n	800b966 <UART_SetConfig+0x50e>
 800b914:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <UART_SetConfig+0x4c4>)
 800b916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91a:	bf00      	nop
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b949 	.word	0x0800b949
 800b924:	0800b951 	.word	0x0800b951
 800b928:	0800b967 	.word	0x0800b967
 800b92c:	0800b957 	.word	0x0800b957
 800b930:	0800b967 	.word	0x0800b967
 800b934:	0800b967 	.word	0x0800b967
 800b938:	0800b967 	.word	0x0800b967
 800b93c:	0800b95f 	.word	0x0800b95f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b940:	f7fc fafe 	bl	8007f40 <HAL_RCC_GetPCLK1Freq>
 800b944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b946:	e014      	b.n	800b972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b948:	f7fc fb10 	bl	8007f6c <HAL_RCC_GetPCLK2Freq>
 800b94c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b94e:	e010      	b.n	800b972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b950:	4b26      	ldr	r3, [pc, #152]	@ (800b9ec <UART_SetConfig+0x594>)
 800b952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b954:	e00d      	b.n	800b972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b956:	f7fc fa87 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 800b95a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b95c:	e009      	b.n	800b972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b95e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b964:	e005      	b.n	800b972 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b970:	bf00      	nop
    }

    if (pclk != 0U)
 800b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b974:	2b00      	cmp	r3, #0
 800b976:	d021      	beq.n	800b9bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97c:	4a1a      	ldr	r2, [pc, #104]	@ (800b9e8 <UART_SetConfig+0x590>)
 800b97e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b982:	461a      	mov	r2, r3
 800b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b986:	fbb3 f2f2 	udiv	r2, r3, r2
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	085b      	lsrs	r3, r3, #1
 800b990:	441a      	add	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	2b0f      	cmp	r3, #15
 800b9a0:	d909      	bls.n	800b9b6 <UART_SetConfig+0x55e>
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9a8:	d205      	bcs.n	800b9b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	60da      	str	r2, [r3, #12]
 800b9b4:	e002      	b.n	800b9bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3730      	adds	r7, #48	@ 0x30
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9e6:	bf00      	nop
 800b9e8:	08018cf4 	.word	0x08018cf4
 800b9ec:	00f42400 	.word	0x00f42400

0800b9f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fc:	f003 0308 	and.w	r3, r3, #8
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00a      	beq.n	800ba1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00a      	beq.n	800ba5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba62:	f003 0304 	and.w	r3, r3, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00a      	beq.n	800ba80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	430a      	orrs	r2, r1
 800ba7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba84:	f003 0310 	and.w	r3, r3, #16
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00a      	beq.n	800baa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa6:	f003 0320 	and.w	r3, r3, #32
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	430a      	orrs	r2, r1
 800bac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01a      	beq.n	800bb06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baee:	d10a      	bne.n	800bb06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	605a      	str	r2, [r3, #4]
  }
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b098      	sub	sp, #96	@ 0x60
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb44:	f7f8 fd1a 	bl	800457c <HAL_GetTick>
 800bb48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0308 	and.w	r3, r3, #8
 800bb54:	2b08      	cmp	r3, #8
 800bb56:	d12f      	bne.n	800bbb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb60:	2200      	movs	r2, #0
 800bb62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f88e 	bl	800bc88 <UART_WaitOnFlagUntilTimeout>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d022      	beq.n	800bbb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb86:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb90:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb98:	e841 2300 	strex	r3, r2, [r1]
 800bb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e6      	bne.n	800bb72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2220      	movs	r2, #32
 800bba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e063      	b.n	800bc80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f003 0304 	and.w	r3, r3, #4
 800bbc2:	2b04      	cmp	r3, #4
 800bbc4:	d149      	bne.n	800bc5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f857 	bl	800bc88 <UART_WaitOnFlagUntilTimeout>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d03c      	beq.n	800bc5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	e853 3f00 	ldrex	r3, [r3]
 800bbec:	623b      	str	r3, [r7, #32]
   return(result);
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e6      	bne.n	800bbe0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3308      	adds	r3, #8
 800bc18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f023 0301 	bic.w	r3, r3, #1
 800bc28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3308      	adds	r3, #8
 800bc30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc32:	61fa      	str	r2, [r7, #28]
 800bc34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	69b9      	ldr	r1, [r7, #24]
 800bc38:	69fa      	ldr	r2, [r7, #28]
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e5      	bne.n	800bc12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e012      	b.n	800bc80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2220      	movs	r2, #32
 800bc66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3758      	adds	r7, #88	@ 0x58
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4613      	mov	r3, r2
 800bc96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc98:	e04f      	b.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca0:	d04b      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bca2:	f7f8 fc6b 	bl	800457c <HAL_GetTick>
 800bca6:	4602      	mov	r2, r0
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	69ba      	ldr	r2, [r7, #24]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d302      	bcc.n	800bcb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d101      	bne.n	800bcbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e04e      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0304 	and.w	r3, r3, #4
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d037      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	2b80      	cmp	r3, #128	@ 0x80
 800bcce:	d034      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b40      	cmp	r3, #64	@ 0x40
 800bcd4:	d031      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b08      	cmp	r3, #8
 800bce2:	d110      	bne.n	800bd06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2208      	movs	r2, #8
 800bcea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 f920 	bl	800bf32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e029      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd14:	d111      	bne.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 f906 	bl	800bf32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e00f      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	69da      	ldr	r2, [r3, #28]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4013      	ands	r3, r2
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	bf0c      	ite	eq
 800bd4a:	2301      	moveq	r3, #1
 800bd4c:	2300      	movne	r3, #0
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d0a0      	beq.n	800bc9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b096      	sub	sp, #88	@ 0x58
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	88fa      	ldrh	r2, [r7, #6]
 800bd7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2222      	movs	r2, #34	@ 0x22
 800bd8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d02d      	beq.n	800bdf6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda0:	4a40      	ldr	r2, [pc, #256]	@ (800bea4 <UART_Start_Receive_DMA+0x140>)
 800bda2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdaa:	4a3f      	ldr	r2, [pc, #252]	@ (800bea8 <UART_Start_Receive_DMA+0x144>)
 800bdac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb4:	4a3d      	ldr	r2, [pc, #244]	@ (800beac <UART_Start_Receive_DMA+0x148>)
 800bdb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3324      	adds	r3, #36	@ 0x24
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	f7fa fa3c 	bl	8006254 <HAL_DMA_Start_IT>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2210      	movs	r2, #16
 800bde6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e051      	b.n	800be9a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d018      	beq.n	800be30 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be12:	657b      	str	r3, [r7, #84]	@ 0x54
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e6      	bne.n	800bdfe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3308      	adds	r3, #8
 800be36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	653b      	str	r3, [r7, #80]	@ 0x50
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3308      	adds	r3, #8
 800be4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be50:	637a      	str	r2, [r7, #52]	@ 0x34
 800be52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e5      	bne.n	800be30 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	613b      	str	r3, [r7, #16]
   return(result);
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3308      	adds	r3, #8
 800be82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be84:	623a      	str	r2, [r7, #32]
 800be86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	69f9      	ldr	r1, [r7, #28]
 800be8a:	6a3a      	ldr	r2, [r7, #32]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	61bb      	str	r3, [r7, #24]
   return(result);
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e5      	bne.n	800be64 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3758      	adds	r7, #88	@ 0x58
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	0800c0b5 	.word	0x0800c0b5
 800bea8:	0800c1e1 	.word	0x0800c1e1
 800beac:	0800c21f 	.word	0x0800c21f

0800beb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b08f      	sub	sp, #60	@ 0x3c
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800becc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bed8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bedc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e6      	bne.n	800beb8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	60bb      	str	r3, [r7, #8]
   return(result);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bf00:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3308      	adds	r3, #8
 800bf08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0a:	61ba      	str	r2, [r7, #24]
 800bf0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	6979      	ldr	r1, [r7, #20]
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	613b      	str	r3, [r7, #16]
   return(result);
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e5      	bne.n	800beea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bf26:	bf00      	nop
 800bf28:	373c      	adds	r7, #60	@ 0x3c
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b095      	sub	sp, #84	@ 0x54
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	461a      	mov	r2, r3
 800bf56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf58:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf60:	e841 2300 	strex	r3, r2, [r1]
 800bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e6      	bne.n	800bf3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3308      	adds	r3, #8
 800bf72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	e853 3f00 	ldrex	r3, [r3]
 800bf7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf82:	f023 0301 	bic.w	r3, r3, #1
 800bf86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e3      	bne.n	800bf6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d118      	bne.n	800bfde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f023 0310 	bic.w	r3, r3, #16
 800bfc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfca:	61bb      	str	r3, [r7, #24]
 800bfcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6979      	ldr	r1, [r7, #20]
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e6      	bne.n	800bfac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bff2:	bf00      	nop
 800bff4:	3754      	adds	r7, #84	@ 0x54
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b090      	sub	sp, #64	@ 0x40
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b00      	cmp	r3, #0
 800c018:	d137      	bne.n	800c08a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3308      	adds	r3, #8
 800c028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	623b      	str	r3, [r7, #32]
   return(result);
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c042:	633a      	str	r2, [r7, #48]	@ 0x30
 800c044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1e5      	bne.n	800c022 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	60fb      	str	r3, [r7, #12]
   return(result);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c06a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c074:	61fb      	str	r3, [r7, #28]
 800c076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	69b9      	ldr	r1, [r7, #24]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	617b      	str	r3, [r7, #20]
   return(result);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e6      	bne.n	800c056 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c088:	e002      	b.n	800c090 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c08a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c08c:	f7f7 fd2c 	bl	8003ae8 <HAL_UART_TxCpltCallback>
}
 800c090:	bf00      	nop
 800c092:	3740      	adds	r7, #64	@ 0x40
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff f9b6 	bl	800b418 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ac:	bf00      	nop
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b09c      	sub	sp, #112	@ 0x70
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d171      	bne.n	800c1b4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e6      	bne.n	800c0d8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3308      	adds	r3, #8
 800c110:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	667b      	str	r3, [r7, #100]	@ 0x64
 800c122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c12a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c12c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e5      	bne.n	800c10a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c13e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3308      	adds	r3, #8
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	623b      	str	r3, [r7, #32]
   return(result);
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c154:	663b      	str	r3, [r7, #96]	@ 0x60
 800c156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3308      	adds	r3, #8
 800c15c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c15e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e5      	bne.n	800c13e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c174:	2220      	movs	r2, #32
 800c176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c17c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d118      	bne.n	800c1b4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	e853 3f00 	ldrex	r3, [r3]
 800c18e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f023 0310 	bic.w	r3, r3, #16
 800c196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	69b9      	ldr	r1, [r7, #24]
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e6      	bne.n	800c182 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d107      	bne.n	800c1d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c1cc:	f7ff f938 	bl	800b440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1d0:	e002      	b.n	800c1d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c1d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c1d4:	f7f7 fc18 	bl	8003a08 <HAL_UART_RxCpltCallback>
}
 800c1d8:	bf00      	nop
 800c1da:	3770      	adds	r7, #112	@ 0x70
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d109      	bne.n	800c210 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	b29b      	uxth	r3, r3
 800c206:	4619      	mov	r1, r3
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff f919 	bl	800b440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c20e:	e002      	b.n	800c216 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f7f7 fc31 	bl	8003a78 <HAL_UART_RxHalfCpltCallback>
}
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c232:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c246:	2b80      	cmp	r3, #128	@ 0x80
 800c248:	d109      	bne.n	800c25e <UART_DMAError+0x40>
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b21      	cmp	r3, #33	@ 0x21
 800c24e:	d106      	bne.n	800c25e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2200      	movs	r2, #0
 800c254:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c258:	6978      	ldr	r0, [r7, #20]
 800c25a:	f7ff fe29 	bl	800beb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c268:	2b40      	cmp	r3, #64	@ 0x40
 800c26a:	d109      	bne.n	800c280 <UART_DMAError+0x62>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b22      	cmp	r3, #34	@ 0x22
 800c270:	d106      	bne.n	800c280 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2200      	movs	r2, #0
 800c276:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c27a:	6978      	ldr	r0, [r7, #20]
 800c27c:	f7ff fe59 	bl	800bf32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c286:	f043 0210 	orr.w	r2, r3, #16
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f7ff f8cb 	bl	800b42c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c296:	bf00      	nop
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff f8b9 	bl	800b42c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2ba:	bf00      	nop
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b088      	sub	sp, #32
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	61bb      	str	r3, [r7, #24]
 800c2ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ec:	6979      	ldr	r1, [r7, #20]
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	e841 2300 	strex	r3, r2, [r1]
 800c2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e6      	bne.n	800c2ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7f7 fbec 	bl	8003ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c310:	bf00      	nop
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c362:	2b01      	cmp	r3, #1
 800c364:	d101      	bne.n	800c36a <HAL_UARTEx_DisableFifoMode+0x16>
 800c366:	2302      	movs	r3, #2
 800c368:	e027      	b.n	800c3ba <HAL_UARTEx_DisableFifoMode+0x66>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2224      	movs	r2, #36	@ 0x24
 800c376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f022 0201 	bic.w	r2, r2, #1
 800c390:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c398:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2220      	movs	r2, #32
 800c3ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b084      	sub	sp, #16
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d101      	bne.n	800c3de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3da:	2302      	movs	r3, #2
 800c3dc:	e02d      	b.n	800c43a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2224      	movs	r2, #36	@ 0x24
 800c3ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f022 0201 	bic.w	r2, r2, #1
 800c404:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	430a      	orrs	r2, r1
 800c418:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f850 	bl	800c4c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c456:	2302      	movs	r3, #2
 800c458:	e02d      	b.n	800c4b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2224      	movs	r2, #36	@ 0x24
 800c466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0201 	bic.w	r2, r2, #1
 800c480:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	430a      	orrs	r2, r1
 800c494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f812 	bl	800c4c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d108      	bne.n	800c4e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4e0:	e031      	b.n	800c546 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4e2:	2308      	movs	r3, #8
 800c4e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4e6:	2308      	movs	r3, #8
 800c4e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	0e5b      	lsrs	r3, r3, #25
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f003 0307 	and.w	r3, r3, #7
 800c4f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	0f5b      	lsrs	r3, r3, #29
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 0307 	and.w	r3, r3, #7
 800c508:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	7b3a      	ldrb	r2, [r7, #12]
 800c50e:	4911      	ldr	r1, [pc, #68]	@ (800c554 <UARTEx_SetNbDataToProcess+0x94>)
 800c510:	5c8a      	ldrb	r2, [r1, r2]
 800c512:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c516:	7b3a      	ldrb	r2, [r7, #12]
 800c518:	490f      	ldr	r1, [pc, #60]	@ (800c558 <UARTEx_SetNbDataToProcess+0x98>)
 800c51a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c51c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c520:	b29a      	uxth	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	7b7a      	ldrb	r2, [r7, #13]
 800c52c:	4909      	ldr	r1, [pc, #36]	@ (800c554 <UARTEx_SetNbDataToProcess+0x94>)
 800c52e:	5c8a      	ldrb	r2, [r1, r2]
 800c530:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c534:	7b7a      	ldrb	r2, [r7, #13]
 800c536:	4908      	ldr	r1, [pc, #32]	@ (800c558 <UARTEx_SetNbDataToProcess+0x98>)
 800c538:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c53a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c53e:	b29a      	uxth	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c546:	bf00      	nop
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	08018d0c 	.word	0x08018d0c
 800c558:	08018d14 	.word	0x08018d14

0800c55c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800c560:	4907      	ldr	r1, [pc, #28]	@ (800c580 <MX_FATFS_Init+0x24>)
 800c562:	4808      	ldr	r0, [pc, #32]	@ (800c584 <MX_FATFS_Init+0x28>)
 800c564:	f002 fe24 	bl	800f1b0 <FATFS_LinkDriver>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
 800c572:	e003      	b.n	800c57c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800c574:	4b04      	ldr	r3, [pc, #16]	@ (800c588 <MX_FATFS_Init+0x2c>)
 800c576:	2201      	movs	r2, #1
 800c578:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800c57a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20001810 	.word	0x20001810
 800c584:	20000030 	.word	0x20000030
 800c588:	20001814 	.word	0x20001814

0800c58c <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c590:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c592:	4618      	mov	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7f7 fc3f 	bl	8003e2c <USER_SPI_initialize>
 800c5ae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7f7 fd1d 	bl	8004004 <USER_SPI_status>
 800c5ca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800c5e4:	7bf8      	ldrb	r0, [r7, #15]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	f7f7 fd20 	bl	8004030 <USER_SPI_read>
 800c5f0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
 800c606:	4603      	mov	r3, r0
 800c608:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800c60a:	7bf8      	ldrb	r0, [r7, #15]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	f7f7 fd73 	bl	80040fc <USER_SPI_write>
 800c616:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	603a      	str	r2, [r7, #0]
 800c62a:	71fb      	strb	r3, [r7, #7]
 800c62c:	460b      	mov	r3, r1
 800c62e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800c630:	79b9      	ldrb	r1, [r7, #6]
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f7f7 fddc 	bl	80041f4 <USER_SPI_ioctl>
 800c63c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	4a08      	ldr	r2, [pc, #32]	@ (800c678 <disk_status+0x30>)
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	79fa      	ldrb	r2, [r7, #7]
 800c660:	4905      	ldr	r1, [pc, #20]	@ (800c678 <disk_status+0x30>)
 800c662:	440a      	add	r2, r1
 800c664:	7a12      	ldrb	r2, [r2, #8]
 800c666:	4610      	mov	r0, r2
 800c668:	4798      	blx	r3
 800c66a:	4603      	mov	r3, r0
 800c66c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20001840 	.word	0x20001840

0800c67c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c4 <disk_initialize+0x48>)
 800c68e:	5cd3      	ldrb	r3, [r2, r3]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d111      	bne.n	800c6b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	4a0b      	ldr	r2, [pc, #44]	@ (800c6c4 <disk_initialize+0x48>)
 800c698:	2101      	movs	r1, #1
 800c69a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	4a09      	ldr	r2, [pc, #36]	@ (800c6c4 <disk_initialize+0x48>)
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	79fa      	ldrb	r2, [r7, #7]
 800c6aa:	4906      	ldr	r1, [pc, #24]	@ (800c6c4 <disk_initialize+0x48>)
 800c6ac:	440a      	add	r2, r1
 800c6ae:	7a12      	ldrb	r2, [r2, #8]
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4798      	blx	r3
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001840 	.word	0x20001840

0800c6c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c6c8:	b590      	push	{r4, r7, lr}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	4a0a      	ldr	r2, [pc, #40]	@ (800c704 <disk_read+0x3c>)
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	689c      	ldr	r4, [r3, #8]
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	4a07      	ldr	r2, [pc, #28]	@ (800c704 <disk_read+0x3c>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	7a18      	ldrb	r0, [r3, #8]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	47a0      	blx	r4
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd90      	pop	{r4, r7, pc}
 800c702:	bf00      	nop
 800c704:	20001840 	.word	0x20001840

0800c708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c708:	b590      	push	{r4, r7, lr}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	4a0a      	ldr	r2, [pc, #40]	@ (800c744 <disk_write+0x3c>)
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	68dc      	ldr	r4, [r3, #12]
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	4a07      	ldr	r2, [pc, #28]	@ (800c744 <disk_write+0x3c>)
 800c728:	4413      	add	r3, r2
 800c72a:	7a18      	ldrb	r0, [r3, #8]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	47a0      	blx	r4
 800c734:	4603      	mov	r3, r0
 800c736:	75fb      	strb	r3, [r7, #23]
  return res;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	371c      	adds	r7, #28
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd90      	pop	{r4, r7, pc}
 800c742:	bf00      	nop
 800c744:	20001840 	.word	0x20001840

0800c748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	4603      	mov	r3, r0
 800c750:	603a      	str	r2, [r7, #0]
 800c752:	71fb      	strb	r3, [r7, #7]
 800c754:	460b      	mov	r3, r1
 800c756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	4a09      	ldr	r2, [pc, #36]	@ (800c780 <disk_ioctl+0x38>)
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	79fa      	ldrb	r2, [r7, #7]
 800c766:	4906      	ldr	r1, [pc, #24]	@ (800c780 <disk_ioctl+0x38>)
 800c768:	440a      	add	r2, r1
 800c76a:	7a10      	ldrb	r0, [r2, #8]
 800c76c:	79b9      	ldrb	r1, [r7, #6]
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	4798      	blx	r3
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
  return res;
 800c776:	7bfb      	ldrb	r3, [r7, #15]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	20001840 	.word	0x20001840

0800c784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3301      	adds	r3, #1
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	b21a      	sxth	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	b21b      	sxth	r3, r3
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	b21b      	sxth	r3, r3
 800c7a6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c7a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3303      	adds	r3, #3
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	3202      	adds	r2, #2
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	3201      	adds	r2, #1
 800c7dc:	7812      	ldrb	r2, [r2, #0]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	7812      	ldrb	r2, [r2, #0]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
	return rv;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	607a      	str	r2, [r7, #4]
 800c80e:	887a      	ldrh	r2, [r7, #2]
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	887b      	ldrh	r3, [r7, #2]
 800c816:	0a1b      	lsrs	r3, r3, #8
 800c818:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	887a      	ldrh	r2, [r7, #2]
 800c822:	b2d2      	uxtb	r2, r2
 800c824:	701a      	strb	r2, [r3, #0]
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	607a      	str	r2, [r7, #4]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	701a      	strb	r2, [r3, #0]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	0a1b      	lsrs	r3, r3, #8
 800c84c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	0a1b      	lsrs	r3, r3, #8
 800c85e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	607a      	str	r2, [r7, #4]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	0a1b      	lsrs	r3, r3, #8
 800c870:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	607a      	str	r2, [r7, #4]
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c88a:	b480      	push	{r7}
 800c88c:	b087      	sub	sp, #28
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00d      	beq.n	800c8c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	1c53      	adds	r3, r2, #1
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	1c59      	adds	r1, r3, #1
 800c8ae:	6179      	str	r1, [r7, #20]
 800c8b0:	7812      	ldrb	r2, [r2, #0]
 800c8b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f1      	bne.n	800c8a4 <mem_cpy+0x1a>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	371c      	adds	r7, #28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	617a      	str	r2, [r7, #20]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	607b      	str	r3, [r7, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f3      	bne.n	800c8dc <mem_set+0x10>
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	371c      	adds	r7, #28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c902:	b480      	push	{r7}
 800c904:	b089      	sub	sp, #36	@ 0x24
 800c906:	af00      	add	r7, sp, #0
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	60b9      	str	r1, [r7, #8]
 800c90c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	61fa      	str	r2, [r7, #28]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	4619      	mov	r1, r3
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	61ba      	str	r2, [r7, #24]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	1acb      	subs	r3, r1, r3
 800c92e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3b01      	subs	r3, #1
 800c934:	607b      	str	r3, [r7, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <mem_cmp+0x40>
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0eb      	beq.n	800c91a <mem_cmp+0x18>

	return r;
 800c942:	697b      	ldr	r3, [r7, #20]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3724      	adds	r7, #36	@ 0x24
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c95a:	e002      	b.n	800c962 <chk_chr+0x12>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3301      	adds	r3, #1
 800c960:	607b      	str	r3, [r7, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d005      	beq.n	800c976 <chk_chr+0x26>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	4293      	cmp	r3, r2
 800c974:	d1f2      	bne.n	800c95c <chk_chr+0xc>
	return *str;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	781b      	ldrb	r3, [r3, #0]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d009      	beq.n	800c9a8 <lock_fs+0x22>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	4618      	mov	r0, r3
 800c99a:	f002 fc42 	bl	800f222 <ff_req_grant>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <lock_fs+0x22>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <lock_fs+0x24>
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00d      	beq.n	800c9e0 <unlock_fs+0x2e>
 800c9c4:	78fb      	ldrb	r3, [r7, #3]
 800c9c6:	2b0c      	cmp	r3, #12
 800c9c8:	d00a      	beq.n	800c9e0 <unlock_fs+0x2e>
 800c9ca:	78fb      	ldrb	r3, [r7, #3]
 800c9cc:	2b0b      	cmp	r3, #11
 800c9ce:	d007      	beq.n	800c9e0 <unlock_fs+0x2e>
 800c9d0:	78fb      	ldrb	r3, [r7, #3]
 800c9d2:	2b0f      	cmp	r3, #15
 800c9d4:	d004      	beq.n	800c9e0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f002 fc36 	bl	800f24c <ff_rel_grant>
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60bb      	str	r3, [r7, #8]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	e029      	b.n	800ca50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c9fc:	4a27      	ldr	r2, [pc, #156]	@ (800ca9c <chk_lock+0xb4>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	4413      	add	r3, r2
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d01d      	beq.n	800ca46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca0a:	4a24      	ldr	r2, [pc, #144]	@ (800ca9c <chk_lock+0xb4>)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	4413      	add	r3, r2
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d116      	bne.n	800ca4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ca1c:	4a1f      	ldr	r2, [pc, #124]	@ (800ca9c <chk_lock+0xb4>)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	4413      	add	r3, r2
 800ca24:	3304      	adds	r3, #4
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d10c      	bne.n	800ca4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca30:	4a1a      	ldr	r2, [pc, #104]	@ (800ca9c <chk_lock+0xb4>)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	011b      	lsls	r3, r3, #4
 800ca36:	4413      	add	r3, r2
 800ca38:	3308      	adds	r3, #8
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d102      	bne.n	800ca4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca44:	e007      	b.n	800ca56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca46:	2301      	movs	r3, #1
 800ca48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d9d2      	bls.n	800c9fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d109      	bne.n	800ca70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d102      	bne.n	800ca68 <chk_lock+0x80>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d101      	bne.n	800ca6c <chk_lock+0x84>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	e010      	b.n	800ca8e <chk_lock+0xa6>
 800ca6c:	2312      	movs	r3, #18
 800ca6e:	e00e      	b.n	800ca8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d108      	bne.n	800ca88 <chk_lock+0xa0>
 800ca76:	4a09      	ldr	r2, [pc, #36]	@ (800ca9c <chk_lock+0xb4>)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	4413      	add	r3, r2
 800ca7e:	330c      	adds	r3, #12
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca86:	d101      	bne.n	800ca8c <chk_lock+0xa4>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	e000      	b.n	800ca8e <chk_lock+0xa6>
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	20001820 	.word	0x20001820

0800caa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800caa6:	2300      	movs	r3, #0
 800caa8:	607b      	str	r3, [r7, #4]
 800caaa:	e002      	b.n	800cab2 <enq_lock+0x12>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3301      	adds	r3, #1
 800cab0:	607b      	str	r3, [r7, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d806      	bhi.n	800cac6 <enq_lock+0x26>
 800cab8:	4a09      	ldr	r2, [pc, #36]	@ (800cae0 <enq_lock+0x40>)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	011b      	lsls	r3, r3, #4
 800cabe:	4413      	add	r3, r2
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1f2      	bne.n	800caac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b02      	cmp	r3, #2
 800caca:	bf14      	ite	ne
 800cacc:	2301      	movne	r3, #1
 800cace:	2300      	moveq	r3, #0
 800cad0:	b2db      	uxtb	r3, r3
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20001820 	.word	0x20001820

0800cae4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e01f      	b.n	800cb34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800caf4:	4a41      	ldr	r2, [pc, #260]	@ (800cbfc <inc_lock+0x118>)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	011b      	lsls	r3, r3, #4
 800cafa:	4413      	add	r3, r2
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d113      	bne.n	800cb2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb06:	4a3d      	ldr	r2, [pc, #244]	@ (800cbfc <inc_lock+0x118>)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	011b      	lsls	r3, r3, #4
 800cb0c:	4413      	add	r3, r2
 800cb0e:	3304      	adds	r3, #4
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d109      	bne.n	800cb2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb1a:	4a38      	ldr	r2, [pc, #224]	@ (800cbfc <inc_lock+0x118>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	011b      	lsls	r3, r3, #4
 800cb20:	4413      	add	r3, r2
 800cb22:	3308      	adds	r3, #8
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d006      	beq.n	800cb3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3301      	adds	r3, #1
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d9dc      	bls.n	800caf4 <inc_lock+0x10>
 800cb3a:	e000      	b.n	800cb3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cb3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d132      	bne.n	800cbaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e002      	b.n	800cb50 <inc_lock+0x6c>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d806      	bhi.n	800cb64 <inc_lock+0x80>
 800cb56:	4a29      	ldr	r2, [pc, #164]	@ (800cbfc <inc_lock+0x118>)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	011b      	lsls	r3, r3, #4
 800cb5c:	4413      	add	r3, r2
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1f2      	bne.n	800cb4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d101      	bne.n	800cb6e <inc_lock+0x8a>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e040      	b.n	800cbf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4922      	ldr	r1, [pc, #136]	@ (800cbfc <inc_lock+0x118>)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	011b      	lsls	r3, r3, #4
 800cb78:	440b      	add	r3, r1
 800cb7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	491e      	ldr	r1, [pc, #120]	@ (800cbfc <inc_lock+0x118>)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	011b      	lsls	r3, r3, #4
 800cb86:	440b      	add	r3, r1
 800cb88:	3304      	adds	r3, #4
 800cb8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	695a      	ldr	r2, [r3, #20]
 800cb90:	491a      	ldr	r1, [pc, #104]	@ (800cbfc <inc_lock+0x118>)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	440b      	add	r3, r1
 800cb98:	3308      	adds	r3, #8
 800cb9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cb9c:	4a17      	ldr	r2, [pc, #92]	@ (800cbfc <inc_lock+0x118>)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	011b      	lsls	r3, r3, #4
 800cba2:	4413      	add	r3, r2
 800cba4:	330c      	adds	r3, #12
 800cba6:	2200      	movs	r2, #0
 800cba8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d009      	beq.n	800cbc4 <inc_lock+0xe0>
 800cbb0:	4a12      	ldr	r2, [pc, #72]	@ (800cbfc <inc_lock+0x118>)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	011b      	lsls	r3, r3, #4
 800cbb6:	4413      	add	r3, r2
 800cbb8:	330c      	adds	r3, #12
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <inc_lock+0xe0>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e015      	b.n	800cbf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d108      	bne.n	800cbdc <inc_lock+0xf8>
 800cbca:	4a0c      	ldr	r2, [pc, #48]	@ (800cbfc <inc_lock+0x118>)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	011b      	lsls	r3, r3, #4
 800cbd0:	4413      	add	r3, r2
 800cbd2:	330c      	adds	r3, #12
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	e001      	b.n	800cbe0 <inc_lock+0xfc>
 800cbdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbe0:	4906      	ldr	r1, [pc, #24]	@ (800cbfc <inc_lock+0x118>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	011b      	lsls	r3, r3, #4
 800cbe6:	440b      	add	r3, r1
 800cbe8:	330c      	adds	r3, #12
 800cbea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3301      	adds	r3, #1
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr
 800cbfc:	20001820 	.word	0x20001820

0800cc00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	607b      	str	r3, [r7, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d825      	bhi.n	800cc60 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc14:	4a17      	ldr	r2, [pc, #92]	@ (800cc74 <dec_lock+0x74>)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	4413      	add	r3, r2
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cc22:	89fb      	ldrh	r3, [r7, #14]
 800cc24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc28:	d101      	bne.n	800cc2e <dec_lock+0x2e>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cc2e:	89fb      	ldrh	r3, [r7, #14]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <dec_lock+0x3a>
 800cc34:	89fb      	ldrh	r3, [r7, #14]
 800cc36:	3b01      	subs	r3, #1
 800cc38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cc3a:	4a0e      	ldr	r2, [pc, #56]	@ (800cc74 <dec_lock+0x74>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	011b      	lsls	r3, r3, #4
 800cc40:	4413      	add	r3, r2
 800cc42:	330c      	adds	r3, #12
 800cc44:	89fa      	ldrh	r2, [r7, #14]
 800cc46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc48:	89fb      	ldrh	r3, [r7, #14]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d105      	bne.n	800cc5a <dec_lock+0x5a>
 800cc4e:	4a09      	ldr	r2, [pc, #36]	@ (800cc74 <dec_lock+0x74>)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	4413      	add	r3, r2
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	737b      	strb	r3, [r7, #13]
 800cc5e:	e001      	b.n	800cc64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc60:	2302      	movs	r3, #2
 800cc62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc64:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	20001820 	.word	0x20001820

0800cc78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cc80:	2300      	movs	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e010      	b.n	800cca8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc86:	4a0d      	ldr	r2, [pc, #52]	@ (800ccbc <clear_lock+0x44>)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	4413      	add	r3, r2
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d105      	bne.n	800cca2 <clear_lock+0x2a>
 800cc96:	4a09      	ldr	r2, [pc, #36]	@ (800ccbc <clear_lock+0x44>)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	011b      	lsls	r3, r3, #4
 800cc9c:	4413      	add	r3, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d9eb      	bls.n	800cc86 <clear_lock+0xe>
	}
}
 800ccae:	bf00      	nop
 800ccb0:	bf00      	nop
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	20001820 	.word	0x20001820

0800ccc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	78db      	ldrb	r3, [r3, #3]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d034      	beq.n	800cd3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7858      	ldrb	r0, [r3, #1]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cce4:	2301      	movs	r3, #1
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	f7ff fd0e 	bl	800c708 <disk_write>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	73fb      	strb	r3, [r7, #15]
 800ccf6:	e022      	b.n	800cd3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	1ad2      	subs	r2, r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d217      	bcs.n	800cd3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	789b      	ldrb	r3, [r3, #2]
 800cd12:	613b      	str	r3, [r7, #16]
 800cd14:	e010      	b.n	800cd38 <sync_window+0x78>
					wsect += fs->fsize;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	7858      	ldrb	r0, [r3, #1]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	f7ff fceb 	bl	800c708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d8eb      	bhi.n	800cd16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d01b      	beq.n	800cd98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff ffad 	bl	800ccc0 <sync_window>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d113      	bne.n	800cd98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7858      	ldrb	r0, [r3, #1]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	f7ff fca3 	bl	800c6c8 <disk_read>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d004      	beq.n	800cd92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cd88:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff ff87 	bl	800ccc0 <sync_window>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d158      	bne.n	800ce6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d148      	bne.n	800ce56 <sync_fs+0xb2>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	791b      	ldrb	r3, [r3, #4]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d144      	bne.n	800ce56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3334      	adds	r3, #52	@ 0x34
 800cdd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fd78 	bl	800c8cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3334      	adds	r3, #52	@ 0x34
 800cde0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cde4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7ff fd07 	bl	800c7fc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3334      	adds	r3, #52	@ 0x34
 800cdf2:	4921      	ldr	r1, [pc, #132]	@ (800ce78 <sync_fs+0xd4>)
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff fd1c 	bl	800c832 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3334      	adds	r3, #52	@ 0x34
 800cdfe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce02:	491e      	ldr	r1, [pc, #120]	@ (800ce7c <sync_fs+0xd8>)
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fd14 	bl	800c832 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3334      	adds	r3, #52	@ 0x34
 800ce0e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	4619      	mov	r1, r3
 800ce18:	4610      	mov	r0, r2
 800ce1a:	f7ff fd0a 	bl	800c832 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3334      	adds	r3, #52	@ 0x34
 800ce22:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	f7ff fd00 	bl	800c832 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7858      	ldrb	r0, [r3, #1]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	f7ff fc5c 	bl	800c708 <disk_write>
			fs->fsi_flag = 0;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	785b      	ldrb	r3, [r3, #1]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fc72 	bl	800c748 <disk_ioctl>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <sync_fs+0xca>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	41615252 	.word	0x41615252
 800ce7c:	61417272 	.word	0x61417272

0800ce80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	3b02      	subs	r3, #2
 800ce8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	3b02      	subs	r3, #2
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d301      	bcc.n	800cea0 <clust2sect+0x20>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e008      	b.n	800ceb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	895b      	ldrh	r3, [r3, #10]
 800cea4:	461a      	mov	r2, r3
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	fb03 f202 	mul.w	r2, r3, r2
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb0:	4413      	add	r3, r2
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d904      	bls.n	800cede <get_fat+0x20>
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d302      	bcc.n	800cee4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cede:	2301      	movs	r3, #1
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	e08e      	b.n	800d002 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	2b03      	cmp	r3, #3
 800cef0:	d061      	beq.n	800cfb6 <get_fat+0xf8>
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	dc7b      	bgt.n	800cfee <get_fat+0x130>
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d002      	beq.n	800cf00 <get_fat+0x42>
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d041      	beq.n	800cf82 <get_fat+0xc4>
 800cefe:	e076      	b.n	800cfee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	085b      	lsrs	r3, r3, #1
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	0a5b      	lsrs	r3, r3, #9
 800cf16:	4413      	add	r3, r2
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f7ff ff14 	bl	800cd48 <move_window>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d166      	bne.n	800cff4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	60fa      	str	r2, [r7, #12]
 800cf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	4413      	add	r3, r2
 800cf34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	0a5b      	lsrs	r3, r3, #9
 800cf42:	4413      	add	r3, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	6938      	ldr	r0, [r7, #16]
 800cf48:	f7ff fefe 	bl	800cd48 <move_window>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d152      	bne.n	800cff8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf58:	693a      	ldr	r2, [r7, #16]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf60:	021b      	lsls	r3, r3, #8
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <get_fat+0xba>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	091b      	lsrs	r3, r3, #4
 800cf76:	e002      	b.n	800cf7e <get_fat+0xc0>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf7e:	617b      	str	r3, [r7, #20]
			break;
 800cf80:	e03f      	b.n	800d002 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	0a1b      	lsrs	r3, r3, #8
 800cf8a:	4413      	add	r3, r2
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6938      	ldr	r0, [r7, #16]
 800cf90:	f7ff feda 	bl	800cd48 <move_window>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d130      	bne.n	800cffc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cfa8:	4413      	add	r3, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fbea 	bl	800c784 <ld_word>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	617b      	str	r3, [r7, #20]
			break;
 800cfb4:	e025      	b.n	800d002 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	09db      	lsrs	r3, r3, #7
 800cfbe:	4413      	add	r3, r2
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6938      	ldr	r0, [r7, #16]
 800cfc4:	f7ff fec0 	bl	800cd48 <move_window>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d118      	bne.n	800d000 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cfdc:	4413      	add	r3, r2
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff fbe9 	bl	800c7b6 <ld_dword>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cfea:	617b      	str	r3, [r7, #20]
			break;
 800cfec:	e009      	b.n	800d002 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cfee:	2301      	movs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	e006      	b.n	800d002 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff4:	bf00      	nop
 800cff6:	e004      	b.n	800d002 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff8:	bf00      	nop
 800cffa:	e002      	b.n	800d002 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cffc:	bf00      	nop
 800cffe:	e000      	b.n	800d002 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d000:	bf00      	nop
		}
	}

	return val;
 800d002:	697b      	ldr	r3, [r7, #20]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d00c:	b590      	push	{r4, r7, lr}
 800d00e:	b089      	sub	sp, #36	@ 0x24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d018:	2302      	movs	r3, #2
 800d01a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	f240 80d9 	bls.w	800d1d6 <put_fat+0x1ca>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	f080 80d3 	bcs.w	800d1d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b03      	cmp	r3, #3
 800d036:	f000 8096 	beq.w	800d166 <put_fat+0x15a>
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	f300 80cb 	bgt.w	800d1d6 <put_fat+0x1ca>
 800d040:	2b01      	cmp	r3, #1
 800d042:	d002      	beq.n	800d04a <put_fat+0x3e>
 800d044:	2b02      	cmp	r3, #2
 800d046:	d06e      	beq.n	800d126 <put_fat+0x11a>
 800d048:	e0c5      	b.n	800d1d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	085b      	lsrs	r3, r3, #1
 800d052:	69ba      	ldr	r2, [r7, #24]
 800d054:	4413      	add	r3, r2
 800d056:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	0a5b      	lsrs	r3, r3, #9
 800d060:	4413      	add	r3, r2
 800d062:	4619      	mov	r1, r3
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f7ff fe6f 	bl	800cd48 <move_window>
 800d06a:	4603      	mov	r3, r0
 800d06c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d06e:	7ffb      	ldrb	r3, [r7, #31]
 800d070:	2b00      	cmp	r3, #0
 800d072:	f040 80a9 	bne.w	800d1c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	1c59      	adds	r1, r3, #1
 800d080:	61b9      	str	r1, [r7, #24]
 800d082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d086:	4413      	add	r3, r2
 800d088:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00d      	beq.n	800d0b0 <put_fat+0xa4>
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	b25b      	sxtb	r3, r3
 800d09a:	f003 030f 	and.w	r3, r3, #15
 800d09e:	b25a      	sxtb	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	b25b      	sxtb	r3, r3
 800d0a4:	011b      	lsls	r3, r3, #4
 800d0a6:	b25b      	sxtb	r3, r3
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	b25b      	sxtb	r3, r3
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	e001      	b.n	800d0b4 <put_fat+0xa8>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	0a5b      	lsrs	r3, r3, #9
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7ff fe3c 	bl	800cd48 <move_window>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0d4:	7ffb      	ldrb	r3, [r7, #31]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d178      	bne.n	800d1cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e6:	4413      	add	r3, r2
 800d0e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d003      	beq.n	800d0fc <put_fat+0xf0>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	091b      	lsrs	r3, r3, #4
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	e00e      	b.n	800d11a <put_fat+0x10e>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	b25b      	sxtb	r3, r3
 800d102:	f023 030f 	bic.w	r3, r3, #15
 800d106:	b25a      	sxtb	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	0a1b      	lsrs	r3, r3, #8
 800d10c:	b25b      	sxtb	r3, r3
 800d10e:	f003 030f 	and.w	r3, r3, #15
 800d112:	b25b      	sxtb	r3, r3
 800d114:	4313      	orrs	r3, r2
 800d116:	b25b      	sxtb	r3, r3
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2201      	movs	r2, #1
 800d122:	70da      	strb	r2, [r3, #3]
			break;
 800d124:	e057      	b.n	800d1d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	0a1b      	lsrs	r3, r3, #8
 800d12e:	4413      	add	r3, r2
 800d130:	4619      	mov	r1, r3
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f7ff fe08 	bl	800cd48 <move_window>
 800d138:	4603      	mov	r3, r0
 800d13a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d13c:	7ffb      	ldrb	r3, [r7, #31]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d146      	bne.n	800d1d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d150:	4413      	add	r3, r2
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	b292      	uxth	r2, r2
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fb4f 	bl	800c7fc <st_word>
			fs->wflag = 1;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2201      	movs	r2, #1
 800d162:	70da      	strb	r2, [r3, #3]
			break;
 800d164:	e037      	b.n	800d1d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	09db      	lsrs	r3, r3, #7
 800d16e:	4413      	add	r3, r2
 800d170:	4619      	mov	r1, r3
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff fde8 	bl	800cd48 <move_window>
 800d178:	4603      	mov	r3, r0
 800d17a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d17c:	7ffb      	ldrb	r3, [r7, #31]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d128      	bne.n	800d1d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d196:	4413      	add	r3, r2
 800d198:	4618      	mov	r0, r3
 800d19a:	f7ff fb0c 	bl	800c7b6 <ld_dword>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d1a4:	4323      	orrs	r3, r4
 800d1a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d1b6:	4413      	add	r3, r2
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff fb39 	bl	800c832 <st_dword>
			fs->wflag = 1;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	70da      	strb	r2, [r3, #3]
			break;
 800d1c6:	e006      	b.n	800d1d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d1c8:	bf00      	nop
 800d1ca:	e004      	b.n	800d1d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d1cc:	bf00      	nop
 800d1ce:	e002      	b.n	800d1d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d1d0:	bf00      	nop
 800d1d2:	e000      	b.n	800d1d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d1d4:	bf00      	nop
		}
	}
	return res;
 800d1d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3724      	adds	r7, #36	@ 0x24
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd90      	pop	{r4, r7, pc}

0800d1e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d904      	bls.n	800d206 <remove_chain+0x26>
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	429a      	cmp	r2, r3
 800d204:	d301      	bcc.n	800d20a <remove_chain+0x2a>
 800d206:	2302      	movs	r3, #2
 800d208:	e04b      	b.n	800d2a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00c      	beq.n	800d22a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d210:	f04f 32ff 	mov.w	r2, #4294967295
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	69b8      	ldr	r0, [r7, #24]
 800d218:	f7ff fef8 	bl	800d00c <put_fat>
 800d21c:	4603      	mov	r3, r0
 800d21e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d220:	7ffb      	ldrb	r3, [r7, #31]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <remove_chain+0x4a>
 800d226:	7ffb      	ldrb	r3, [r7, #31]
 800d228:	e03b      	b.n	800d2a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d22a:	68b9      	ldr	r1, [r7, #8]
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff fe46 	bl	800cebe <get_fat>
 800d232:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d031      	beq.n	800d29e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d101      	bne.n	800d244 <remove_chain+0x64>
 800d240:	2302      	movs	r3, #2
 800d242:	e02e      	b.n	800d2a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24a:	d101      	bne.n	800d250 <remove_chain+0x70>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e028      	b.n	800d2a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d250:	2200      	movs	r2, #0
 800d252:	68b9      	ldr	r1, [r7, #8]
 800d254:	69b8      	ldr	r0, [r7, #24]
 800d256:	f7ff fed9 	bl	800d00c <put_fat>
 800d25a:	4603      	mov	r3, r0
 800d25c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d25e:	7ffb      	ldrb	r3, [r7, #31]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <remove_chain+0x88>
 800d264:	7ffb      	ldrb	r3, [r7, #31]
 800d266:	e01c      	b.n	800d2a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	695a      	ldr	r2, [r3, #20]
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	3b02      	subs	r3, #2
 800d272:	429a      	cmp	r2, r3
 800d274:	d20b      	bcs.n	800d28e <remove_chain+0xae>
			fs->free_clst++;
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	791b      	ldrb	r3, [r3, #4]
 800d284:	f043 0301 	orr.w	r3, r3, #1
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d3c6      	bcc.n	800d22a <remove_chain+0x4a>
 800d29c:	e000      	b.n	800d2a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d29e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b088      	sub	sp, #32
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10d      	bne.n	800d2dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d004      	beq.n	800d2d6 <create_chain+0x2c>
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	69ba      	ldr	r2, [r7, #24]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d31b      	bcc.n	800d30e <create_chain+0x64>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	61bb      	str	r3, [r7, #24]
 800d2da:	e018      	b.n	800d30e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7ff fded 	bl	800cebe <get_fat>
 800d2e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d801      	bhi.n	800d2f0 <create_chain+0x46>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e070      	b.n	800d3d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f6:	d101      	bne.n	800d2fc <create_chain+0x52>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	e06a      	b.n	800d3d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	429a      	cmp	r2, r3
 800d304:	d201      	bcs.n	800d30a <create_chain+0x60>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	e063      	b.n	800d3d2 <create_chain+0x128>
		scl = clst;
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	3301      	adds	r3, #1
 800d316:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	69fa      	ldr	r2, [r7, #28]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d307      	bcc.n	800d332 <create_chain+0x88>
				ncl = 2;
 800d322:	2302      	movs	r3, #2
 800d324:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d326:	69fa      	ldr	r2, [r7, #28]
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d901      	bls.n	800d332 <create_chain+0x88>
 800d32e:	2300      	movs	r3, #0
 800d330:	e04f      	b.n	800d3d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d332:	69f9      	ldr	r1, [r7, #28]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff fdc2 	bl	800cebe <get_fat>
 800d33a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00e      	beq.n	800d360 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d003      	beq.n	800d350 <create_chain+0xa6>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34e:	d101      	bne.n	800d354 <create_chain+0xaa>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	e03e      	b.n	800d3d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d354:	69fa      	ldr	r2, [r7, #28]
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d1da      	bne.n	800d312 <create_chain+0x68>
 800d35c:	2300      	movs	r3, #0
 800d35e:	e038      	b.n	800d3d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d360:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d362:	f04f 32ff 	mov.w	r2, #4294967295
 800d366:	69f9      	ldr	r1, [r7, #28]
 800d368:	6938      	ldr	r0, [r7, #16]
 800d36a:	f7ff fe4f 	bl	800d00c <put_fat>
 800d36e:	4603      	mov	r3, r0
 800d370:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d372:	7dfb      	ldrb	r3, [r7, #23]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d109      	bne.n	800d38c <create_chain+0xe2>
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d006      	beq.n	800d38c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d37e:	69fa      	ldr	r2, [r7, #28]
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	6938      	ldr	r0, [r7, #16]
 800d384:	f7ff fe42 	bl	800d00c <put_fat>
 800d388:	4603      	mov	r3, r0
 800d38a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d116      	bne.n	800d3c0 <create_chain+0x116>
		fs->last_clst = ncl;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	69fa      	ldr	r2, [r7, #28]
 800d396:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	695a      	ldr	r2, [r3, #20]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	3b02      	subs	r3, #2
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d804      	bhi.n	800d3b0 <create_chain+0x106>
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	1e5a      	subs	r2, r3, #1
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	791b      	ldrb	r3, [r3, #4]
 800d3b4:	f043 0301 	orr.w	r3, r3, #1
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	711a      	strb	r2, [r3, #4]
 800d3be:	e007      	b.n	800d3d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d102      	bne.n	800d3cc <create_chain+0x122>
 800d3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ca:	e000      	b.n	800d3ce <create_chain+0x124>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d3d0:	69fb      	ldr	r3, [r7, #28]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3720      	adds	r7, #32
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b087      	sub	sp, #28
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	0a5b      	lsrs	r3, r3, #9
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	8952      	ldrh	r2, [r2, #10]
 800d3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	1d1a      	adds	r2, r3, #4
 800d404:	613a      	str	r2, [r7, #16]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <clmt_clust+0x3a>
 800d410:	2300      	movs	r3, #0
 800d412:	e010      	b.n	800d436 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d307      	bcc.n	800d42c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	617b      	str	r3, [r7, #20]
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	3304      	adds	r3, #4
 800d428:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d42a:	e7e9      	b.n	800d400 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d42c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	4413      	add	r3, r2
}
 800d436:	4618      	mov	r0, r3
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b086      	sub	sp, #24
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d458:	d204      	bcs.n	800d464 <dir_sdi+0x22>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	f003 031f 	and.w	r3, r3, #31
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d464:	2302      	movs	r3, #2
 800d466:	e063      	b.n	800d530 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <dir_sdi+0x46>
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d902      	bls.n	800d488 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10c      	bne.n	800d4a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	095b      	lsrs	r3, r3, #5
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	8912      	ldrh	r2, [r2, #8]
 800d496:	4293      	cmp	r3, r2
 800d498:	d301      	bcc.n	800d49e <dir_sdi+0x5c>
 800d49a:	2302      	movs	r3, #2
 800d49c:	e048      	b.n	800d530 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	61da      	str	r2, [r3, #28]
 800d4a6:	e029      	b.n	800d4fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	025b      	lsls	r3, r3, #9
 800d4ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4b0:	e019      	b.n	800d4e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6979      	ldr	r1, [r7, #20]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fd01 	bl	800cebe <get_fat>
 800d4bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c4:	d101      	bne.n	800d4ca <dir_sdi+0x88>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e032      	b.n	800d530 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d904      	bls.n	800d4da <dir_sdi+0x98>
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d301      	bcc.n	800d4de <dir_sdi+0x9c>
 800d4da:	2302      	movs	r3, #2
 800d4dc:	e028      	b.n	800d530 <dir_sdi+0xee>
			ofs -= csz;
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d2e1      	bcs.n	800d4b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	6938      	ldr	r0, [r7, #16]
 800d4f2:	f7ff fcc5 	bl	800ce80 <clust2sect>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <dir_sdi+0xcc>
 800d50a:	2302      	movs	r3, #2
 800d50c:	e010      	b.n	800d530 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	69da      	ldr	r2, [r3, #28]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	0a5b      	lsrs	r3, r3, #9
 800d516:	441a      	add	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d528:	441a      	add	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	3320      	adds	r3, #32
 800d54e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	69db      	ldr	r3, [r3, #28]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <dir_next+0x28>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d55e:	d301      	bcc.n	800d564 <dir_next+0x2c>
 800d560:	2304      	movs	r3, #4
 800d562:	e0aa      	b.n	800d6ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f040 8098 	bne.w	800d6a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	8912      	ldrh	r2, [r2, #8]
 800d58a:	4293      	cmp	r3, r2
 800d58c:	f0c0 8088 	bcc.w	800d6a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	61da      	str	r2, [r3, #28]
 800d596:	2304      	movs	r3, #4
 800d598:	e08f      	b.n	800d6ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	0a5b      	lsrs	r3, r3, #9
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	8952      	ldrh	r2, [r2, #10]
 800d5a2:	3a01      	subs	r2, #1
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d17a      	bne.n	800d6a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7ff fc83 	bl	800cebe <get_fat>
 800d5b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d801      	bhi.n	800d5c4 <dir_next+0x8c>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e07a      	b.n	800d6ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d101      	bne.n	800d5d0 <dir_next+0x98>
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e074      	b.n	800d6ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d358      	bcc.n	800d68c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d104      	bne.n	800d5ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	61da      	str	r2, [r3, #28]
 800d5e6:	2304      	movs	r3, #4
 800d5e8:	e067      	b.n	800d6ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	f7ff fe59 	bl	800d2aa <create_chain>
 800d5f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <dir_next+0xcc>
 800d600:	2307      	movs	r3, #7
 800d602:	e05a      	b.n	800d6ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d101      	bne.n	800d60e <dir_next+0xd6>
 800d60a:	2302      	movs	r3, #2
 800d60c:	e055      	b.n	800d6ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d614:	d101      	bne.n	800d61a <dir_next+0xe2>
 800d616:	2301      	movs	r3, #1
 800d618:	e04f      	b.n	800d6ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f7ff fb50 	bl	800ccc0 <sync_window>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <dir_next+0xf2>
 800d626:	2301      	movs	r3, #1
 800d628:	e047      	b.n	800d6ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	3334      	adds	r3, #52	@ 0x34
 800d62e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d632:	2100      	movs	r1, #0
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff f949 	bl	800c8cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d63a:	2300      	movs	r3, #0
 800d63c:	613b      	str	r3, [r7, #16]
 800d63e:	6979      	ldr	r1, [r7, #20]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fc1d 	bl	800ce80 <clust2sect>
 800d646:	4602      	mov	r2, r0
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d64c:	e012      	b.n	800d674 <dir_next+0x13c>
						fs->wflag = 1;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2201      	movs	r2, #1
 800d652:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fb33 	bl	800ccc0 <sync_window>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <dir_next+0x12c>
 800d660:	2301      	movs	r3, #1
 800d662:	e02a      	b.n	800d6ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3301      	adds	r3, #1
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	631a      	str	r2, [r3, #48]	@ 0x30
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	895b      	ldrh	r3, [r3, #10]
 800d678:	461a      	mov	r2, r3
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d3e6      	bcc.n	800d64e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	1ad2      	subs	r2, r2, r3
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d692:	6979      	ldr	r1, [r7, #20]
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff fbf3 	bl	800ce80 <clust2sect>
 800d69a:	4602      	mov	r2, r0
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b2:	441a      	add	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b086      	sub	sp, #24
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff feb4 	bl	800d442 <dir_sdi>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d12b      	bne.n	800d73c <dir_alloc+0x7a>
		n = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	69db      	ldr	r3, [r3, #28]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f7ff fb2a 	bl	800cd48 <move_window>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d11d      	bne.n	800d73a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a1b      	ldr	r3, [r3, #32]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2be5      	cmp	r3, #229	@ 0xe5
 800d706:	d004      	beq.n	800d712 <dir_alloc+0x50>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d107      	bne.n	800d722 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	3301      	adds	r3, #1
 800d716:	613b      	str	r3, [r7, #16]
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d102      	bne.n	800d726 <dir_alloc+0x64>
 800d720:	e00c      	b.n	800d73c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d722:	2300      	movs	r3, #0
 800d724:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d726:	2101      	movs	r1, #1
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff ff05 	bl	800d538 <dir_next>
 800d72e:	4603      	mov	r3, r0
 800d730:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0d7      	beq.n	800d6e8 <dir_alloc+0x26>
 800d738:	e000      	b.n	800d73c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d73a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d101      	bne.n	800d746 <dir_alloc+0x84>
 800d742:	2307      	movs	r3, #7
 800d744:	75fb      	strb	r3, [r7, #23]
	return res;
 800d746:	7dfb      	ldrb	r3, [r7, #23]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	331a      	adds	r3, #26
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff f810 	bl	800c784 <ld_word>
 800d764:	4603      	mov	r3, r0
 800d766:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b03      	cmp	r3, #3
 800d76e:	d109      	bne.n	800d784 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	3314      	adds	r3, #20
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff f805 	bl	800c784 <ld_word>
 800d77a:	4603      	mov	r3, r0
 800d77c:	041b      	lsls	r3, r3, #16
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	4313      	orrs	r3, r2
 800d782:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d784:	68fb      	ldr	r3, [r7, #12]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	331a      	adds	r3, #26
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	b292      	uxth	r2, r2
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff f829 	bl	800c7fc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d109      	bne.n	800d7c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f103 0214 	add.w	r2, r3, #20
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	0c1b      	lsrs	r3, r3, #16
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	4619      	mov	r1, r3
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	f7ff f81b 	bl	800c7fc <st_word>
	}
}
 800d7c6:	bf00      	nop
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d7dc:	2100      	movs	r1, #0
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fe2f 	bl	800d442 <dir_sdi>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <dir_find+0x24>
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	e03e      	b.n	800d870 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6938      	ldr	r0, [r7, #16]
 800d7fa:	f7ff faa5 	bl	800cd48 <move_window>
 800d7fe:	4603      	mov	r3, r0
 800d800:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d12f      	bne.n	800d868 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d810:	7bfb      	ldrb	r3, [r7, #15]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <dir_find+0x4e>
 800d816:	2304      	movs	r3, #4
 800d818:	75fb      	strb	r3, [r7, #23]
 800d81a:	e028      	b.n	800d86e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a1b      	ldr	r3, [r3, #32]
 800d820:	330b      	adds	r3, #11
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	330b      	adds	r3, #11
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	f003 0308 	and.w	r3, r3, #8
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10a      	bne.n	800d854 <dir_find+0x86>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a18      	ldr	r0, [r3, #32]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	3324      	adds	r3, #36	@ 0x24
 800d846:	220b      	movs	r2, #11
 800d848:	4619      	mov	r1, r3
 800d84a:	f7ff f85a 	bl	800c902 <mem_cmp>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00b      	beq.n	800d86c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d854:	2100      	movs	r1, #0
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7ff fe6e 	bl	800d538 <dir_next>
 800d85c:	4603      	mov	r3, r0
 800d85e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0c5      	beq.n	800d7f2 <dir_find+0x24>
 800d866:	e002      	b.n	800d86e <dir_find+0xa0>
		if (res != FR_OK) break;
 800d868:	bf00      	nop
 800d86a:	e000      	b.n	800d86e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d86c:	bf00      	nop

	return res;
 800d86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3718      	adds	r7, #24
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d886:	2101      	movs	r1, #1
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff ff1a 	bl	800d6c2 <dir_alloc>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d11c      	bne.n	800d8d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	69db      	ldr	r3, [r3, #28]
 800d89c:	4619      	mov	r1, r3
 800d89e:	68b8      	ldr	r0, [r7, #8]
 800d8a0:	f7ff fa52 	bl	800cd48 <move_window>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d111      	bne.n	800d8d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff f808 	bl	800c8cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a18      	ldr	r0, [r3, #32]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	3324      	adds	r3, #36	@ 0x24
 800d8c4:	220b      	movs	r2, #11
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	f7fe ffdf 	bl	800c88a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	60fb      	str	r3, [r7, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3324      	adds	r3, #36	@ 0x24
 800d8f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d8f2:	220b      	movs	r2, #11
 800d8f4:	2120      	movs	r1, #32
 800d8f6:	68b8      	ldr	r0, [r7, #8]
 800d8f8:	f7fe ffe8 	bl	800c8cc <mem_set>
	si = i = 0; ni = 8;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	61fb      	str	r3, [r7, #28]
 800d904:	2308      	movs	r3, #8
 800d906:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	61fa      	str	r2, [r7, #28]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	4413      	add	r3, r2
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d916:	7efb      	ldrb	r3, [r7, #27]
 800d918:	2b20      	cmp	r3, #32
 800d91a:	d94e      	bls.n	800d9ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d91c:	7efb      	ldrb	r3, [r7, #27]
 800d91e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d920:	d006      	beq.n	800d930 <create_name+0x54>
 800d922:	7efb      	ldrb	r3, [r7, #27]
 800d924:	2b5c      	cmp	r3, #92	@ 0x5c
 800d926:	d110      	bne.n	800d94a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d928:	e002      	b.n	800d930 <create_name+0x54>
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	3301      	adds	r3, #1
 800d92e:	61fb      	str	r3, [r7, #28]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	4413      	add	r3, r2
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b2f      	cmp	r3, #47	@ 0x2f
 800d93a:	d0f6      	beq.n	800d92a <create_name+0x4e>
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	4413      	add	r3, r2
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b5c      	cmp	r3, #92	@ 0x5c
 800d946:	d0f0      	beq.n	800d92a <create_name+0x4e>
			break;
 800d948:	e038      	b.n	800d9bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d94a:	7efb      	ldrb	r3, [r7, #27]
 800d94c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d94e:	d003      	beq.n	800d958 <create_name+0x7c>
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	429a      	cmp	r2, r3
 800d956:	d30c      	bcc.n	800d972 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b0b      	cmp	r3, #11
 800d95c:	d002      	beq.n	800d964 <create_name+0x88>
 800d95e:	7efb      	ldrb	r3, [r7, #27]
 800d960:	2b2e      	cmp	r3, #46	@ 0x2e
 800d962:	d001      	beq.n	800d968 <create_name+0x8c>
 800d964:	2306      	movs	r3, #6
 800d966:	e044      	b.n	800d9f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d968:	2308      	movs	r3, #8
 800d96a:	613b      	str	r3, [r7, #16]
 800d96c:	230b      	movs	r3, #11
 800d96e:	617b      	str	r3, [r7, #20]
			continue;
 800d970:	e022      	b.n	800d9b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d972:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d976:	2b00      	cmp	r3, #0
 800d978:	da04      	bge.n	800d984 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d97a:	7efb      	ldrb	r3, [r7, #27]
 800d97c:	3b80      	subs	r3, #128	@ 0x80
 800d97e:	4a1f      	ldr	r2, [pc, #124]	@ (800d9fc <create_name+0x120>)
 800d980:	5cd3      	ldrb	r3, [r2, r3]
 800d982:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d984:	7efb      	ldrb	r3, [r7, #27]
 800d986:	4619      	mov	r1, r3
 800d988:	481d      	ldr	r0, [pc, #116]	@ (800da00 <create_name+0x124>)
 800d98a:	f7fe ffe1 	bl	800c950 <chk_chr>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <create_name+0xbc>
 800d994:	2306      	movs	r3, #6
 800d996:	e02c      	b.n	800d9f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d998:	7efb      	ldrb	r3, [r7, #27]
 800d99a:	2b60      	cmp	r3, #96	@ 0x60
 800d99c:	d905      	bls.n	800d9aa <create_name+0xce>
 800d99e:	7efb      	ldrb	r3, [r7, #27]
 800d9a0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d9a2:	d802      	bhi.n	800d9aa <create_name+0xce>
 800d9a4:	7efb      	ldrb	r3, [r7, #27]
 800d9a6:	3b20      	subs	r3, #32
 800d9a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	613a      	str	r2, [r7, #16]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	7efa      	ldrb	r2, [r7, #27]
 800d9b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d9b8:	e7a6      	b.n	800d908 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d9ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	441a      	add	r2, r3
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <create_name+0xf4>
 800d9cc:	2306      	movs	r3, #6
 800d9ce:	e010      	b.n	800d9f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2be5      	cmp	r3, #229	@ 0xe5
 800d9d6:	d102      	bne.n	800d9de <create_name+0x102>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2205      	movs	r2, #5
 800d9dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d9de:	7efb      	ldrb	r3, [r7, #27]
 800d9e0:	2b20      	cmp	r3, #32
 800d9e2:	d801      	bhi.n	800d9e8 <create_name+0x10c>
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	e000      	b.n	800d9ea <create_name+0x10e>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	330b      	adds	r3, #11
 800d9ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d9f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3720      	adds	r7, #32
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08018d1c 	.word	0x08018d1c
 800da00:	08016d64 	.word	0x08016d64

0800da04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800da18:	e002      	b.n	800da20 <follow_path+0x1c>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b2f      	cmp	r3, #47	@ 0x2f
 800da26:	d0f8      	beq.n	800da1a <follow_path+0x16>
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800da2e:	d0f4      	beq.n	800da1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	2200      	movs	r2, #0
 800da34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b1f      	cmp	r3, #31
 800da3c:	d80a      	bhi.n	800da54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2280      	movs	r2, #128	@ 0x80
 800da42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800da46:	2100      	movs	r1, #0
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff fcfa 	bl	800d442 <dir_sdi>
 800da4e:	4603      	mov	r3, r0
 800da50:	75fb      	strb	r3, [r7, #23]
 800da52:	e043      	b.n	800dadc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da54:	463b      	mov	r3, r7
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff ff3f 	bl	800d8dc <create_name>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d134      	bne.n	800dad2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff feb0 	bl	800d7ce <dir_find>
 800da6e:	4603      	mov	r3, r0
 800da70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800da78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da80:	7dfb      	ldrb	r3, [r7, #23]
 800da82:	2b04      	cmp	r3, #4
 800da84:	d127      	bne.n	800dad6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da86:	7afb      	ldrb	r3, [r7, #11]
 800da88:	f003 0304 	and.w	r3, r3, #4
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d122      	bne.n	800dad6 <follow_path+0xd2>
 800da90:	2305      	movs	r3, #5
 800da92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800da94:	e01f      	b.n	800dad6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da96:	7afb      	ldrb	r3, [r7, #11]
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d11c      	bne.n	800dada <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	799b      	ldrb	r3, [r3, #6]
 800daa4:	f003 0310 	and.w	r3, r3, #16
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d102      	bne.n	800dab2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800daac:	2305      	movs	r3, #5
 800daae:	75fb      	strb	r3, [r7, #23]
 800dab0:	e014      	b.n	800dadc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dac0:	4413      	add	r3, r2
 800dac2:	4619      	mov	r1, r3
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f7ff fe43 	bl	800d750 <ld_clust>
 800daca:	4602      	mov	r2, r0
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dad0:	e7c0      	b.n	800da54 <follow_path+0x50>
			if (res != FR_OK) break;
 800dad2:	bf00      	nop
 800dad4:	e002      	b.n	800dadc <follow_path+0xd8>
				break;
 800dad6:	bf00      	nop
 800dad8:	e000      	b.n	800dadc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dada:	bf00      	nop
			}
		}
	}

	return res;
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b087      	sub	sp, #28
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800daee:	f04f 33ff 	mov.w	r3, #4294967295
 800daf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d031      	beq.n	800db60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	617b      	str	r3, [r7, #20]
 800db02:	e002      	b.n	800db0a <get_ldnumber+0x24>
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3301      	adds	r3, #1
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b20      	cmp	r3, #32
 800db10:	d903      	bls.n	800db1a <get_ldnumber+0x34>
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	2b3a      	cmp	r3, #58	@ 0x3a
 800db18:	d1f4      	bne.n	800db04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b3a      	cmp	r3, #58	@ 0x3a
 800db20:	d11c      	bne.n	800db5c <get_ldnumber+0x76>
			tp = *path;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	60fa      	str	r2, [r7, #12]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	3b30      	subs	r3, #48	@ 0x30
 800db32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b09      	cmp	r3, #9
 800db38:	d80e      	bhi.n	800db58 <get_ldnumber+0x72>
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d10a      	bne.n	800db58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d107      	bne.n	800db58 <get_ldnumber+0x72>
					vol = (int)i;
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	3301      	adds	r3, #1
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	697a      	ldr	r2, [r7, #20]
 800db56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	e002      	b.n	800db62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800db5c:	2300      	movs	r3, #0
 800db5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800db60:	693b      	ldr	r3, [r7, #16]
}
 800db62:	4618      	mov	r0, r3
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
	...

0800db70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	70da      	strb	r2, [r3, #3]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f04f 32ff 	mov.w	r2, #4294967295
 800db86:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff f8dc 	bl	800cd48 <move_window>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <check_fs+0x2a>
 800db96:	2304      	movs	r3, #4
 800db98:	e038      	b.n	800dc0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3334      	adds	r3, #52	@ 0x34
 800db9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fdee 	bl	800c784 <ld_word>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d001      	beq.n	800dbb8 <check_fs+0x48>
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e029      	b.n	800dc0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbbe:	2be9      	cmp	r3, #233	@ 0xe9
 800dbc0:	d009      	beq.n	800dbd6 <check_fs+0x66>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbc8:	2beb      	cmp	r3, #235	@ 0xeb
 800dbca:	d11e      	bne.n	800dc0a <check_fs+0x9a>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800dbd2:	2b90      	cmp	r3, #144	@ 0x90
 800dbd4:	d119      	bne.n	800dc0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3334      	adds	r3, #52	@ 0x34
 800dbda:	3336      	adds	r3, #54	@ 0x36
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fe fdea 	bl	800c7b6 <ld_dword>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dbe8:	4a0a      	ldr	r2, [pc, #40]	@ (800dc14 <check_fs+0xa4>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d101      	bne.n	800dbf2 <check_fs+0x82>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e00c      	b.n	800dc0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	3334      	adds	r3, #52	@ 0x34
 800dbf6:	3352      	adds	r3, #82	@ 0x52
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fddc 	bl	800c7b6 <ld_dword>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4a05      	ldr	r2, [pc, #20]	@ (800dc18 <check_fs+0xa8>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d101      	bne.n	800dc0a <check_fs+0x9a>
 800dc06:	2300      	movs	r3, #0
 800dc08:	e000      	b.n	800dc0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc0a:	2302      	movs	r3, #2
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	00544146 	.word	0x00544146
 800dc18:	33544146 	.word	0x33544146

0800dc1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b096      	sub	sp, #88	@ 0x58
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	4613      	mov	r3, r2
 800dc28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f7ff ff58 	bl	800dae6 <get_ldnumber>
 800dc36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da01      	bge.n	800dc42 <find_volume+0x26>
 800dc3e:	230b      	movs	r3, #11
 800dc40:	e235      	b.n	800e0ae <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dc42:	4aa5      	ldr	r2, [pc, #660]	@ (800ded8 <find_volume+0x2bc>)
 800dc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <find_volume+0x3a>
 800dc52:	230c      	movs	r3, #12
 800dc54:	e22b      	b.n	800e0ae <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800dc56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc58:	f7fe fe95 	bl	800c986 <lock_fs>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <find_volume+0x4a>
 800dc62:	230f      	movs	r3, #15
 800dc64:	e223      	b.n	800e0ae <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dc6c:	79fb      	ldrb	r3, [r7, #7]
 800dc6e:	f023 0301 	bic.w	r3, r3, #1
 800dc72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d01a      	beq.n	800dcb2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7e:	785b      	ldrb	r3, [r3, #1]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fce1 	bl	800c648 <disk_status>
 800dc86:	4603      	mov	r3, r0
 800dc88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10c      	bne.n	800dcb2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dc98:	79fb      	ldrb	r3, [r7, #7]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d007      	beq.n	800dcae <find_volume+0x92>
 800dc9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dca2:	f003 0304 	and.w	r3, r3, #4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dcaa:	230a      	movs	r3, #10
 800dcac:	e1ff      	b.n	800e0ae <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e1fd      	b.n	800e0ae <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dcb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe fcd9 	bl	800c67c <disk_initialize>
 800dcca:	4603      	mov	r3, r0
 800dccc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dcd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dcdc:	2303      	movs	r3, #3
 800dcde:	e1e6      	b.n	800e0ae <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d007      	beq.n	800dcf6 <find_volume+0xda>
 800dce6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcea:	f003 0304 	and.w	r3, r3, #4
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dcf2:	230a      	movs	r3, #10
 800dcf4:	e1db      	b.n	800e0ae <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dcfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dcfc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dcfe:	f7ff ff37 	bl	800db70 <check_fs>
 800dd02:	4603      	mov	r3, r0
 800dd04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dd08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d149      	bne.n	800dda4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd10:	2300      	movs	r3, #0
 800dd12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd14:	e01e      	b.n	800dd54 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd1e:	011b      	lsls	r3, r3, #4
 800dd20:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dd24:	4413      	add	r3, r2
 800dd26:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d006      	beq.n	800dd40 <find_volume+0x124>
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	3308      	adds	r3, #8
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe fd3d 	bl	800c7b6 <ld_dword>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	e000      	b.n	800dd42 <find_volume+0x126>
 800dd40:	2200      	movs	r2, #0
 800dd42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	3358      	adds	r3, #88	@ 0x58
 800dd48:	443b      	add	r3, r7
 800dd4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd50:	3301      	adds	r3, #1
 800dd52:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d9dd      	bls.n	800dd16 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dd5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <find_volume+0x14e>
 800dd64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd66:	3b01      	subs	r3, #1
 800dd68:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dd6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	3358      	adds	r3, #88	@ 0x58
 800dd70:	443b      	add	r3, r7
 800dd72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd76:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d005      	beq.n	800dd8a <find_volume+0x16e>
 800dd7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd82:	f7ff fef5 	bl	800db70 <check_fs>
 800dd86:	4603      	mov	r3, r0
 800dd88:	e000      	b.n	800dd8c <find_volume+0x170>
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dd90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d905      	bls.n	800dda4 <find_volume+0x188>
 800dd98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d9e2      	bls.n	800dd6a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dda4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	d101      	bne.n	800ddb0 <find_volume+0x194>
 800ddac:	2301      	movs	r3, #1
 800ddae:	e17e      	b.n	800e0ae <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ddb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d901      	bls.n	800ddbc <find_volume+0x1a0>
 800ddb8:	230d      	movs	r3, #13
 800ddba:	e178      	b.n	800e0ae <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ddbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddbe:	3334      	adds	r3, #52	@ 0x34
 800ddc0:	330b      	adds	r3, #11
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fe fcde 	bl	800c784 <ld_word>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddce:	d001      	beq.n	800ddd4 <find_volume+0x1b8>
 800ddd0:	230d      	movs	r3, #13
 800ddd2:	e16c      	b.n	800e0ae <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ddd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd6:	3334      	adds	r3, #52	@ 0x34
 800ddd8:	3316      	adds	r3, #22
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fcd2 	bl	800c784 <ld_word>
 800dde0:	4603      	mov	r3, r0
 800dde2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dde4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <find_volume+0x1dc>
 800ddea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddec:	3334      	adds	r3, #52	@ 0x34
 800ddee:	3324      	adds	r3, #36	@ 0x24
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fe fce0 	bl	800c7b6 <ld_dword>
 800ddf6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddfc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de00:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800de04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	789b      	ldrb	r3, [r3, #2]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d005      	beq.n	800de1c <find_volume+0x200>
 800de10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de12:	789b      	ldrb	r3, [r3, #2]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d001      	beq.n	800de1c <find_volume+0x200>
 800de18:	230d      	movs	r3, #13
 800de1a:	e148      	b.n	800e0ae <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800de1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1e:	789b      	ldrb	r3, [r3, #2]
 800de20:	461a      	mov	r2, r3
 800de22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de24:	fb02 f303 	mul.w	r3, r2, r3
 800de28:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de30:	461a      	mov	r2, r3
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800de36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de38:	895b      	ldrh	r3, [r3, #10]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d008      	beq.n	800de50 <find_volume+0x234>
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	895b      	ldrh	r3, [r3, #10]
 800de42:	461a      	mov	r2, r3
 800de44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de46:	895b      	ldrh	r3, [r3, #10]
 800de48:	3b01      	subs	r3, #1
 800de4a:	4013      	ands	r3, r2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d001      	beq.n	800de54 <find_volume+0x238>
 800de50:	230d      	movs	r3, #13
 800de52:	e12c      	b.n	800e0ae <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800de54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de56:	3334      	adds	r3, #52	@ 0x34
 800de58:	3311      	adds	r3, #17
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe fc92 	bl	800c784 <ld_word>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6a:	891b      	ldrh	r3, [r3, #8]
 800de6c:	f003 030f 	and.w	r3, r3, #15
 800de70:	b29b      	uxth	r3, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <find_volume+0x25e>
 800de76:	230d      	movs	r3, #13
 800de78:	e119      	b.n	800e0ae <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7c:	3334      	adds	r3, #52	@ 0x34
 800de7e:	3313      	adds	r3, #19
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fc7f 	bl	800c784 <ld_word>
 800de86:	4603      	mov	r3, r0
 800de88:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d106      	bne.n	800de9e <find_volume+0x282>
 800de90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de92:	3334      	adds	r3, #52	@ 0x34
 800de94:	3320      	adds	r3, #32
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe fc8d 	bl	800c7b6 <ld_dword>
 800de9c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800de9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea0:	3334      	adds	r3, #52	@ 0x34
 800dea2:	330e      	adds	r3, #14
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fe fc6d 	bl	800c784 <ld_word>
 800deaa:	4603      	mov	r3, r0
 800deac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800deae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <find_volume+0x29c>
 800deb4:	230d      	movs	r3, #13
 800deb6:	e0fa      	b.n	800e0ae <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800deb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800deba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800debc:	4413      	add	r3, r2
 800debe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dec0:	8912      	ldrh	r2, [r2, #8]
 800dec2:	0912      	lsrs	r2, r2, #4
 800dec4:	b292      	uxth	r2, r2
 800dec6:	4413      	add	r3, r2
 800dec8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800deca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800decc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dece:	429a      	cmp	r2, r3
 800ded0:	d204      	bcs.n	800dedc <find_volume+0x2c0>
 800ded2:	230d      	movs	r3, #13
 800ded4:	e0eb      	b.n	800e0ae <find_volume+0x492>
 800ded6:	bf00      	nop
 800ded8:	20001818 	.word	0x20001818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dedc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dee4:	8952      	ldrh	r2, [r2, #10]
 800dee6:	fbb3 f3f2 	udiv	r3, r3, r2
 800deea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800deec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <find_volume+0x2da>
 800def2:	230d      	movs	r3, #13
 800def4:	e0db      	b.n	800e0ae <find_volume+0x492>
		fmt = FS_FAT32;
 800def6:	2303      	movs	r3, #3
 800def8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800defc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defe:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800df02:	4293      	cmp	r3, r2
 800df04:	d802      	bhi.n	800df0c <find_volume+0x2f0>
 800df06:	2302      	movs	r3, #2
 800df08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800df12:	4293      	cmp	r3, r2
 800df14:	d802      	bhi.n	800df1c <find_volume+0x300>
 800df16:	2301      	movs	r3, #1
 800df18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800df1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1e:	1c9a      	adds	r2, r3, #2
 800df20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df22:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800df24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df28:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800df2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800df2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2e:	441a      	add	r2, r3
 800df30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df32:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800df34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df38:	441a      	add	r2, r3
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800df3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df42:	2b03      	cmp	r3, #3
 800df44:	d11e      	bne.n	800df84 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800df46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df48:	3334      	adds	r3, #52	@ 0x34
 800df4a:	332a      	adds	r3, #42	@ 0x2a
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fc19 	bl	800c784 <ld_word>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <find_volume+0x340>
 800df58:	230d      	movs	r3, #13
 800df5a:	e0a8      	b.n	800e0ae <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5e:	891b      	ldrh	r3, [r3, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <find_volume+0x34c>
 800df64:	230d      	movs	r3, #13
 800df66:	e0a2      	b.n	800e0ae <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6a:	3334      	adds	r3, #52	@ 0x34
 800df6c:	332c      	adds	r3, #44	@ 0x2c
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fe fc21 	bl	800c7b6 <ld_dword>
 800df74:	4602      	mov	r2, r0
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	647b      	str	r3, [r7, #68]	@ 0x44
 800df82:	e01f      	b.n	800dfc4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df86:	891b      	ldrh	r3, [r3, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <find_volume+0x374>
 800df8c:	230d      	movs	r3, #13
 800df8e:	e08e      	b.n	800e0ae <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800df90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df96:	441a      	add	r2, r3
 800df98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800df9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d103      	bne.n	800dfac <find_volume+0x390>
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	e00a      	b.n	800dfc2 <find_volume+0x3a6>
 800dfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfae:	699a      	ldr	r2, [r3, #24]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	085a      	lsrs	r2, r3, #1
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dfc2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc6:	69da      	ldr	r2, [r3, #28]
 800dfc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfca:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800dfce:	0a5b      	lsrs	r3, r3, #9
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d201      	bcs.n	800dfd8 <find_volume+0x3bc>
 800dfd4:	230d      	movs	r3, #13
 800dfd6:	e06a      	b.n	800e0ae <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfda:	f04f 32ff 	mov.w	r2, #4294967295
 800dfde:	615a      	str	r2, [r3, #20]
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	695a      	ldr	r2, [r3, #20]
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfea:	2280      	movs	r2, #128	@ 0x80
 800dfec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dfee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d149      	bne.n	800e08a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff8:	3334      	adds	r3, #52	@ 0x34
 800dffa:	3330      	adds	r3, #48	@ 0x30
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fbc1 	bl	800c784 <ld_word>
 800e002:	4603      	mov	r3, r0
 800e004:	2b01      	cmp	r3, #1
 800e006:	d140      	bne.n	800e08a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e00a:	3301      	adds	r3, #1
 800e00c:	4619      	mov	r1, r3
 800e00e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e010:	f7fe fe9a 	bl	800cd48 <move_window>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d137      	bne.n	800e08a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01c:	2200      	movs	r2, #0
 800e01e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e022:	3334      	adds	r3, #52	@ 0x34
 800e024:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe fbab 	bl	800c784 <ld_word>
 800e02e:	4603      	mov	r3, r0
 800e030:	461a      	mov	r2, r3
 800e032:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e036:	429a      	cmp	r2, r3
 800e038:	d127      	bne.n	800e08a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03c:	3334      	adds	r3, #52	@ 0x34
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fbb9 	bl	800c7b6 <ld_dword>
 800e044:	4603      	mov	r3, r0
 800e046:	4a1c      	ldr	r2, [pc, #112]	@ (800e0b8 <find_volume+0x49c>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d11e      	bne.n	800e08a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04e:	3334      	adds	r3, #52	@ 0x34
 800e050:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe fbae 	bl	800c7b6 <ld_dword>
 800e05a:	4603      	mov	r3, r0
 800e05c:	4a17      	ldr	r2, [pc, #92]	@ (800e0bc <find_volume+0x4a0>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d113      	bne.n	800e08a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e064:	3334      	adds	r3, #52	@ 0x34
 800e066:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fba3 	bl	800c7b6 <ld_dword>
 800e070:	4602      	mov	r2, r0
 800e072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e074:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e078:	3334      	adds	r3, #52	@ 0x34
 800e07a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fb99 	bl	800c7b6 <ld_dword>
 800e084:	4602      	mov	r2, r0
 800e086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e088:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e090:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e092:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c0 <find_volume+0x4a4>)
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	3301      	adds	r3, #1
 800e098:	b29a      	uxth	r2, r3
 800e09a:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <find_volume+0x4a4>)
 800e09c:	801a      	strh	r2, [r3, #0]
 800e09e:	4b08      	ldr	r3, [pc, #32]	@ (800e0c0 <find_volume+0x4a4>)
 800e0a0:	881a      	ldrh	r2, [r3, #0]
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e0a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0a8:	f7fe fde6 	bl	800cc78 <clear_lock>
#endif
	return FR_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3758      	adds	r7, #88	@ 0x58
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	41615252 	.word	0x41615252
 800e0bc:	61417272 	.word	0x61417272
 800e0c0:	2000181c 	.word	0x2000181c

0800e0c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e0ce:	2309      	movs	r3, #9
 800e0d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d02e      	beq.n	800e136 <validate+0x72>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d02a      	beq.n	800e136 <validate+0x72>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d025      	beq.n	800e136 <validate+0x72>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	889a      	ldrh	r2, [r3, #4]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	88db      	ldrh	r3, [r3, #6]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d11e      	bne.n	800e136 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe fc42 	bl	800c986 <lock_fs>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d014      	beq.n	800e132 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	785b      	ldrb	r3, [r3, #1]
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe fa9a 	bl	800c648 <disk_status>
 800e114:	4603      	mov	r3, r0
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d102      	bne.n	800e124 <validate+0x60>
				res = FR_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	73fb      	strb	r3, [r7, #15]
 800e122:	e008      	b.n	800e136 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2100      	movs	r1, #0
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fe fc41 	bl	800c9b2 <unlock_fs>
 800e130:	e001      	b.n	800e136 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e132:	230f      	movs	r3, #15
 800e134:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <validate+0x7e>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	e000      	b.n	800e144 <validate+0x80>
 800e142:	2300      	movs	r3, #0
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	6013      	str	r3, [r2, #0]
	return res;
 800e148:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	4613      	mov	r3, r2
 800e160:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e166:	f107 0310 	add.w	r3, r7, #16
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff fcbb 	bl	800dae6 <get_ldnumber>
 800e170:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	2b00      	cmp	r3, #0
 800e176:	da01      	bge.n	800e17c <f_mount+0x28>
 800e178:	230b      	movs	r3, #11
 800e17a:	e048      	b.n	800e20e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e17c:	4a26      	ldr	r2, [pc, #152]	@ (800e218 <f_mount+0xc4>)
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e184:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00f      	beq.n	800e1ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e18c:	69b8      	ldr	r0, [r7, #24]
 800e18e:	f7fe fd73 	bl	800cc78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	4618      	mov	r0, r3
 800e198:	f001 f837 	bl	800f20a <ff_del_syncobj>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <f_mount+0x52>
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	e033      	b.n	800e20e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00f      	beq.n	800e1d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	330c      	adds	r3, #12
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f001 f803 	bl	800f1ce <ff_cre_syncobj>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <f_mount+0x7e>
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	e01d      	b.n	800e20e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	4910      	ldr	r1, [pc, #64]	@ (800e218 <f_mount+0xc4>)
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <f_mount+0x94>
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d001      	beq.n	800e1ec <f_mount+0x98>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	e010      	b.n	800e20e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e1ec:	f107 010c 	add.w	r1, r7, #12
 800e1f0:	f107 0308 	add.w	r3, r7, #8
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7ff fd10 	bl	800dc1c <find_volume>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	7dfa      	ldrb	r2, [r7, #23]
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fbd3 	bl	800c9b2 <unlock_fs>
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3720      	adds	r7, #32
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20001818 	.word	0x20001818

0800e21c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b098      	sub	sp, #96	@ 0x60
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	4613      	mov	r3, r2
 800e228:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <f_open+0x18>
 800e230:	2309      	movs	r3, #9
 800e232:	e1b0      	b.n	800e596 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e234:	79fb      	ldrb	r3, [r7, #7]
 800e236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e23a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e23c:	79fa      	ldrb	r2, [r7, #7]
 800e23e:	f107 0110 	add.w	r1, r7, #16
 800e242:	f107 0308 	add.w	r3, r7, #8
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fce8 	bl	800dc1c <find_volume>
 800e24c:	4603      	mov	r3, r0
 800e24e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e256:	2b00      	cmp	r3, #0
 800e258:	f040 818d 	bne.w	800e576 <f_open+0x35a>
		dj.obj.fs = fs;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	f107 0314 	add.w	r3, r7, #20
 800e266:	4611      	mov	r1, r2
 800e268:	4618      	mov	r0, r3
 800e26a:	f7ff fbcb 	bl	800da04 <follow_path>
 800e26e:	4603      	mov	r3, r0
 800e270:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e274:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d118      	bne.n	800e2ae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e27c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e280:	b25b      	sxtb	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	da03      	bge.n	800e28e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e286:	2306      	movs	r3, #6
 800e288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e28c:	e00f      	b.n	800e2ae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	2b01      	cmp	r3, #1
 800e292:	bf8c      	ite	hi
 800e294:	2301      	movhi	r3, #1
 800e296:	2300      	movls	r3, #0
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	461a      	mov	r2, r3
 800e29c:	f107 0314 	add.w	r3, r7, #20
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fba0 	bl	800c9e8 <chk_lock>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e2ae:	79fb      	ldrb	r3, [r7, #7]
 800e2b0:	f003 031c 	and.w	r3, r3, #28
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d07f      	beq.n	800e3b8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e2b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d017      	beq.n	800e2f0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e2c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2c4:	2b04      	cmp	r3, #4
 800e2c6:	d10e      	bne.n	800e2e6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e2c8:	f7fe fbea 	bl	800caa0 <enq_lock>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d006      	beq.n	800e2e0 <f_open+0xc4>
 800e2d2:	f107 0314 	add.w	r3, r7, #20
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff face 	bl	800d878 <dir_register>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	e000      	b.n	800e2e2 <f_open+0xc6>
 800e2e0:	2312      	movs	r3, #18
 800e2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	f043 0308 	orr.w	r3, r3, #8
 800e2ec:	71fb      	strb	r3, [r7, #7]
 800e2ee:	e010      	b.n	800e312 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e2f0:	7ebb      	ldrb	r3, [r7, #26]
 800e2f2:	f003 0311 	and.w	r3, r3, #17
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <f_open+0xe6>
					res = FR_DENIED;
 800e2fa:	2307      	movs	r3, #7
 800e2fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e300:	e007      	b.n	800e312 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	f003 0304 	and.w	r3, r3, #4
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <f_open+0xf6>
 800e30c:	2308      	movs	r3, #8
 800e30e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e312:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e316:	2b00      	cmp	r3, #0
 800e318:	d168      	bne.n	800e3ec <f_open+0x1d0>
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	f003 0308 	and.w	r3, r3, #8
 800e320:	2b00      	cmp	r3, #0
 800e322:	d063      	beq.n	800e3ec <f_open+0x1d0>
				dw = GET_FATTIME();
 800e324:	f7fe f932 	bl	800c58c <get_fattime>
 800e328:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e32c:	330e      	adds	r3, #14
 800e32e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fa7e 	bl	800c832 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e338:	3316      	adds	r3, #22
 800e33a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fe fa78 	bl	800c832 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e344:	330b      	adds	r3, #11
 800e346:	2220      	movs	r2, #32
 800e348:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e34e:	4611      	mov	r1, r2
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff f9fd 	bl	800d750 <ld_clust>
 800e356:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e35c:	2200      	movs	r2, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff fa15 	bl	800d78e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e366:	331c      	adds	r3, #28
 800e368:	2100      	movs	r1, #0
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fa61 	bl	800c832 <st_dword>
					fs->wflag = 1;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	2201      	movs	r2, #1
 800e374:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d037      	beq.n	800e3ec <f_open+0x1d0>
						dw = fs->winsect;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e380:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e382:	f107 0314 	add.w	r3, r7, #20
 800e386:	2200      	movs	r2, #0
 800e388:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe ff28 	bl	800d1e0 <remove_chain>
 800e390:	4603      	mov	r3, r0
 800e392:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e396:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d126      	bne.n	800e3ec <f_open+0x1d0>
							res = move_window(fs, dw);
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe fcd0 	bl	800cd48 <move_window>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3b2:	3a01      	subs	r2, #1
 800e3b4:	611a      	str	r2, [r3, #16]
 800e3b6:	e019      	b.n	800e3ec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e3b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d115      	bne.n	800e3ec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e3c0:	7ebb      	ldrb	r3, [r7, #26]
 800e3c2:	f003 0310 	and.w	r3, r3, #16
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e3ca:	2304      	movs	r3, #4
 800e3cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e3d0:	e00c      	b.n	800e3ec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	f003 0302 	and.w	r3, r3, #2
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d007      	beq.n	800e3ec <f_open+0x1d0>
 800e3dc:	7ebb      	ldrb	r3, [r7, #26]
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d002      	beq.n	800e3ec <f_open+0x1d0>
						res = FR_DENIED;
 800e3e6:	2307      	movs	r3, #7
 800e3e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d126      	bne.n	800e442 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	f003 0308 	and.w	r3, r3, #8
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e404:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e40e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e414:	79fb      	ldrb	r3, [r7, #7]
 800e416:	2b01      	cmp	r3, #1
 800e418:	bf8c      	ite	hi
 800e41a:	2301      	movhi	r3, #1
 800e41c:	2300      	movls	r3, #0
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	461a      	mov	r2, r3
 800e422:	f107 0314 	add.w	r3, r7, #20
 800e426:	4611      	mov	r1, r2
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fb5b 	bl	800cae4 <inc_lock>
 800e42e:	4602      	mov	r2, r0
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <f_open+0x226>
 800e43c:	2302      	movs	r3, #2
 800e43e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e442:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e446:	2b00      	cmp	r3, #0
 800e448:	f040 8095 	bne.w	800e576 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e450:	4611      	mov	r1, r2
 800e452:	4618      	mov	r0, r3
 800e454:	f7ff f97c 	bl	800d750 <ld_clust>
 800e458:	4602      	mov	r2, r0
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e460:	331c      	adds	r3, #28
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe f9a7 	bl	800c7b6 <ld_dword>
 800e468:	4602      	mov	r2, r0
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	88da      	ldrh	r2, [r3, #6]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	79fa      	ldrb	r2, [r7, #7]
 800e486:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2200      	movs	r2, #0
 800e48c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2200      	movs	r2, #0
 800e498:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3330      	adds	r3, #48	@ 0x30
 800e49e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe fa11 	bl	800c8cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	f003 0320 	and.w	r3, r3, #32
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d060      	beq.n	800e576 <f_open+0x35a>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d05c      	beq.n	800e576 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	68da      	ldr	r2, [r3, #12]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	025b      	lsls	r3, r3, #9
 800e4ca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4d8:	e016      	b.n	800e508 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe fced 	bl	800cebe <get_fat>
 800e4e4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e4e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d802      	bhi.n	800e4f2 <f_open+0x2d6>
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e4f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f8:	d102      	bne.n	800e500 <f_open+0x2e4>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e500:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	657b      	str	r3, [r7, #84]	@ 0x54
 800e508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d103      	bne.n	800e518 <f_open+0x2fc>
 800e510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e514:	429a      	cmp	r2, r3
 800e516:	d8e0      	bhi.n	800e4da <f_open+0x2be>
				}
				fp->clust = clst;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e51c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e51e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e522:	2b00      	cmp	r3, #0
 800e524:	d127      	bne.n	800e576 <f_open+0x35a>
 800e526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d022      	beq.n	800e576 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fca3 	bl	800ce80 <clust2sect>
 800e53a:	6478      	str	r0, [r7, #68]	@ 0x44
 800e53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d103      	bne.n	800e54a <f_open+0x32e>
						res = FR_INT_ERR;
 800e542:	2302      	movs	r3, #2
 800e544:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e548:	e015      	b.n	800e576 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e54c:	0a5a      	lsrs	r2, r3, #9
 800e54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e550:	441a      	add	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	7858      	ldrb	r0, [r3, #1]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6a1a      	ldr	r2, [r3, #32]
 800e564:	2301      	movs	r3, #1
 800e566:	f7fe f8af 	bl	800c6c8 <disk_read>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <f_open+0x35a>
 800e570:	2301      	movs	r3, #1
 800e572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e576:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <f_open+0x368>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fe fa10 	bl	800c9b2 <unlock_fs>
 800e592:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e596:	4618      	mov	r0, r3
 800e598:	3760      	adds	r7, #96	@ 0x60
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b08c      	sub	sp, #48	@ 0x30
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	60f8      	str	r0, [r7, #12]
 800e5a6:	60b9      	str	r1, [r7, #8]
 800e5a8:	607a      	str	r2, [r7, #4]
 800e5aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f107 0210 	add.w	r2, r7, #16
 800e5bc:	4611      	mov	r1, r2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7ff fd80 	bl	800e0c4 <validate>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d107      	bne.n	800e5e2 <f_write+0x44>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	7d5b      	ldrb	r3, [r3, #21]
 800e5d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e5da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d009      	beq.n	800e5f6 <f_write+0x58>
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe f9e1 	bl	800c9b2 <unlock_fs>
 800e5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5f4:	e173      	b.n	800e8de <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	7d1b      	ldrb	r3, [r3, #20]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d106      	bne.n	800e610 <f_write+0x72>
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	2107      	movs	r1, #7
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe f9d3 	bl	800c9b2 <unlock_fs>
 800e60c:	2307      	movs	r3, #7
 800e60e:	e166      	b.n	800e8de <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	699a      	ldr	r2, [r3, #24]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	699b      	ldr	r3, [r3, #24]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	f080 814b 	bcs.w	800e8b8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	699b      	ldr	r3, [r3, #24]
 800e626:	43db      	mvns	r3, r3
 800e628:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e62a:	e145      	b.n	800e8b8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 8101 	bne.w	800e83c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	0a5b      	lsrs	r3, r3, #9
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	8952      	ldrh	r2, [r2, #10]
 800e644:	3a01      	subs	r2, #1
 800e646:	4013      	ands	r3, r2
 800e648:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d14d      	bne.n	800e6ec <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	699b      	ldr	r3, [r3, #24]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10c      	bne.n	800e672 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e660:	2b00      	cmp	r3, #0
 800e662:	d11a      	bne.n	800e69a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2100      	movs	r1, #0
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe fe1e 	bl	800d2aa <create_chain>
 800e66e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e670:	e013      	b.n	800e69a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	4619      	mov	r1, r3
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f7fe feaa 	bl	800d3da <clmt_clust>
 800e686:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e688:	e007      	b.n	800e69a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	69db      	ldr	r3, [r3, #28]
 800e690:	4619      	mov	r1, r3
 800e692:	4610      	mov	r0, r2
 800e694:	f7fe fe09 	bl	800d2aa <create_chain>
 800e698:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 8110 	beq.w	800e8c2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d109      	bne.n	800e6bc <f_write+0x11e>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	755a      	strb	r2, [r3, #21]
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2102      	movs	r1, #2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe f97d 	bl	800c9b2 <unlock_fs>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e110      	b.n	800e8de <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c2:	d109      	bne.n	800e6d8 <f_write+0x13a>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	755a      	strb	r2, [r3, #21]
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe f96f 	bl	800c9b2 <unlock_fs>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e102      	b.n	800e8de <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <f_write+0x14e>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	b25b      	sxtb	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	da1d      	bge.n	800e732 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	7858      	ldrb	r0, [r3, #1]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6a1a      	ldr	r2, [r3, #32]
 800e704:	2301      	movs	r3, #1
 800e706:	f7fd ffff 	bl	800c708 <disk_write>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d009      	beq.n	800e724 <f_write+0x186>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2201      	movs	r2, #1
 800e714:	755a      	strb	r2, [r3, #21]
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	2101      	movs	r1, #1
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fe f949 	bl	800c9b2 <unlock_fs>
 800e720:	2301      	movs	r3, #1
 800e722:	e0dc      	b.n	800e8de <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	7d1b      	ldrb	r3, [r3, #20]
 800e728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	69db      	ldr	r3, [r3, #28]
 800e738:	4619      	mov	r1, r3
 800e73a:	4610      	mov	r0, r2
 800e73c:	f7fe fba0 	bl	800ce80 <clust2sect>
 800e740:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d109      	bne.n	800e75c <f_write+0x1be>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2202      	movs	r2, #2
 800e74c:	755a      	strb	r2, [r3, #21]
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	2102      	movs	r1, #2
 800e752:	4618      	mov	r0, r3
 800e754:	f7fe f92d 	bl	800c9b2 <unlock_fs>
 800e758:	2302      	movs	r3, #2
 800e75a:	e0c0      	b.n	800e8de <f_write+0x340>
			sect += csect;
 800e75c:	697a      	ldr	r2, [r7, #20]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	4413      	add	r3, r2
 800e762:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	0a5b      	lsrs	r3, r3, #9
 800e768:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d041      	beq.n	800e7f4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	4413      	add	r3, r2
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	8952      	ldrh	r2, [r2, #10]
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d905      	bls.n	800e78a <f_write+0x1ec>
					cc = fs->csize - csect;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	895b      	ldrh	r3, [r3, #10]
 800e782:	461a      	mov	r2, r3
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	7858      	ldrb	r0, [r3, #1]
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	69f9      	ldr	r1, [r7, #28]
 800e794:	f7fd ffb8 	bl	800c708 <disk_write>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d009      	beq.n	800e7b2 <f_write+0x214>
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	755a      	strb	r2, [r3, #21]
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe f902 	bl	800c9b2 <unlock_fs>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e095      	b.n	800e8de <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6a1a      	ldr	r2, [r3, #32]
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	6a3a      	ldr	r2, [r7, #32]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d915      	bls.n	800e7ec <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6a1a      	ldr	r2, [r3, #32]
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	025b      	lsls	r3, r3, #9
 800e7d0:	69fa      	ldr	r2, [r7, #28]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f7fe f856 	bl	800c88a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	7d1b      	ldrb	r3, [r3, #20]
 800e7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e7ec:	6a3b      	ldr	r3, [r7, #32]
 800e7ee:	025b      	lsls	r3, r3, #9
 800e7f0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e7f2:	e044      	b.n	800e87e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	697a      	ldr	r2, [r7, #20]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d01b      	beq.n	800e836 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	699a      	ldr	r2, [r3, #24]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e806:	429a      	cmp	r2, r3
 800e808:	d215      	bcs.n	800e836 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	7858      	ldrb	r0, [r3, #1]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e814:	2301      	movs	r3, #1
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	f7fd ff56 	bl	800c6c8 <disk_read>
 800e81c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d009      	beq.n	800e836 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2201      	movs	r2, #1
 800e826:	755a      	strb	r2, [r3, #21]
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	2101      	movs	r1, #1
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fe f8c0 	bl	800c9b2 <unlock_fs>
 800e832:	2301      	movs	r3, #1
 800e834:	e053      	b.n	800e8de <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	697a      	ldr	r2, [r7, #20]
 800e83a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e844:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e848:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e84a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d901      	bls.n	800e856 <f_write+0x2b8>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e864:	4413      	add	r3, r2
 800e866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e868:	69f9      	ldr	r1, [r7, #28]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe f80d 	bl	800c88a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	7d1b      	ldrb	r3, [r3, #20]
 800e874:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e87e:	69fa      	ldr	r2, [r7, #28]
 800e880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e882:	4413      	add	r3, r2
 800e884:	61fb      	str	r3, [r7, #28]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	699a      	ldr	r2, [r3, #24]
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	441a      	add	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	619a      	str	r2, [r3, #24]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	68da      	ldr	r2, [r3, #12]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	bf38      	it	cc
 800e89e:	461a      	movcc	r2, r3
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	60da      	str	r2, [r3, #12]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8aa:	441a      	add	r2, r3
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f47f aeb6 	bne.w	800e62c <f_write+0x8e>
 800e8c0:	e000      	b.n	800e8c4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e8c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	7d1b      	ldrb	r3, [r3, #20]
 800e8c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe f86b 	bl	800c9b2 <unlock_fs>
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3730      	adds	r7, #48	@ 0x30
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b086      	sub	sp, #24
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f107 0208 	add.w	r2, r7, #8
 800e8f4:	4611      	mov	r1, r2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fbe4 	bl	800e0c4 <validate>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e900:	7dfb      	ldrb	r3, [r7, #23]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d16d      	bne.n	800e9e2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7d1b      	ldrb	r3, [r3, #20]
 800e90a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d067      	beq.n	800e9e2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	7d1b      	ldrb	r3, [r3, #20]
 800e916:	b25b      	sxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	da1a      	bge.n	800e952 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	7858      	ldrb	r0, [r3, #1]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a1a      	ldr	r2, [r3, #32]
 800e92a:	2301      	movs	r3, #1
 800e92c:	f7fd feec 	bl	800c708 <disk_write>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d006      	beq.n	800e944 <f_sync+0x5e>
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	2101      	movs	r1, #1
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe f839 	bl	800c9b2 <unlock_fs>
 800e940:	2301      	movs	r3, #1
 800e942:	e055      	b.n	800e9f0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	7d1b      	ldrb	r3, [r3, #20]
 800e948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e952:	f7fd fe1b 	bl	800c58c <get_fattime>
 800e956:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fe f9f1 	bl	800cd48 <move_window>
 800e966:	4603      	mov	r3, r0
 800e968:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e96a:	7dfb      	ldrb	r3, [r7, #23]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d138      	bne.n	800e9e2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e974:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	330b      	adds	r3, #11
 800e97a:	781a      	ldrb	r2, [r3, #0]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	330b      	adds	r3, #11
 800e980:	f042 0220 	orr.w	r2, r2, #32
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6818      	ldr	r0, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	461a      	mov	r2, r3
 800e992:	68f9      	ldr	r1, [r7, #12]
 800e994:	f7fe fefb 	bl	800d78e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f103 021c 	add.w	r2, r3, #28
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	f7fd ff44 	bl	800c832 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3316      	adds	r3, #22
 800e9ae:	6939      	ldr	r1, [r7, #16]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fd ff3e 	bl	800c832 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3312      	adds	r3, #18
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fd ff1d 	bl	800c7fc <st_word>
					fs->wflag = 1;
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe f9ea 	bl	800cda4 <sync_fs>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	7d1b      	ldrb	r3, [r3, #20]
 800e9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	7dfa      	ldrb	r2, [r7, #23]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd ffe2 	bl	800c9b2 <unlock_fs>
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff ff70 	bl	800e8e6 <f_sync>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ea0a:	7bfb      	ldrb	r3, [r7, #15]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d11d      	bne.n	800ea4c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f107 0208 	add.w	r2, r7, #8
 800ea16:	4611      	mov	r1, r2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fb53 	bl	800e0c4 <validate>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d111      	bne.n	800ea4c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe f8e7 	bl	800cc00 <dec_lock>
 800ea32:	4603      	mov	r3, r0
 800ea34:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2100      	movs	r1, #0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fd ffb3 	bl	800c9b2 <unlock_fs>
#endif
		}
	}
	return res;
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3710      	adds	r7, #16
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b090      	sub	sp, #64	@ 0x40
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f107 0208 	add.w	r2, r7, #8
 800ea66:	4611      	mov	r1, r2
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fb2b 	bl	800e0c4 <validate>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ea74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d103      	bne.n	800ea84 <f_lseek+0x2e>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	7d5b      	ldrb	r3, [r3, #21]
 800ea80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ea84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d009      	beq.n	800eaa0 <f_lseek+0x4a>
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fd ff8c 	bl	800c9b2 <unlock_fs>
 800ea9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea9e:	e229      	b.n	800eef4 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f000 80ea 	beq.w	800ec7e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab0:	d164      	bne.n	800eb7c <f_lseek+0x126>
			tbl = fp->cltbl;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	1d1a      	adds	r2, r3, #4
 800eabc:	627a      	str	r2, [r7, #36]	@ 0x24
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	617b      	str	r3, [r7, #20]
 800eac2:	2302      	movs	r3, #2
 800eac4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d044      	beq.n	800eb5c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ead2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead4:	613b      	str	r3, [r7, #16]
 800ead6:	2300      	movs	r3, #0
 800ead8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eadc:	3302      	adds	r3, #2
 800eade:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae6:	3301      	adds	r3, #1
 800eae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fe f9e5 	bl	800cebe <get_fat>
 800eaf4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d809      	bhi.n	800eb10 <f_lseek+0xba>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2202      	movs	r2, #2
 800eb00:	755a      	strb	r2, [r3, #21]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	2102      	movs	r1, #2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fd ff53 	bl	800c9b2 <unlock_fs>
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	e1f1      	b.n	800eef4 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb16:	d109      	bne.n	800eb2c <f_lseek+0xd6>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	755a      	strb	r2, [r3, #21]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2101      	movs	r1, #1
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fd ff45 	bl	800c9b2 <unlock_fs>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e1e3      	b.n	800eef4 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d0d4      	beq.n	800eae0 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eb36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d809      	bhi.n	800eb52 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800eb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb40:	1d1a      	adds	r2, r3, #4
 800eb42:	627a      	str	r2, [r7, #36]	@ 0x24
 800eb44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4a:	1d1a      	adds	r2, r3, #4
 800eb4c:	627a      	str	r2, [r7, #36]	@ 0x24
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d3ba      	bcc.n	800ead2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb62:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eb64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d803      	bhi.n	800eb74 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	e1b6      	b.n	800eee2 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eb74:	2311      	movs	r3, #17
 800eb76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800eb7a:	e1b2      	b.n	800eee2 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d902      	bls.n	800eb8c <f_lseek+0x136>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 81a4 	beq.w	800eee2 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4619      	mov	r1, r3
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7fe fc1a 	bl	800d3da <clmt_clust>
 800eba6:	4602      	mov	r2, r0
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	f7fe f963 	bl	800ce80 <clust2sect>
 800ebba:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d109      	bne.n	800ebd6 <f_lseek+0x180>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	755a      	strb	r2, [r3, #21]
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2102      	movs	r1, #2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fd fef0 	bl	800c9b2 <unlock_fs>
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	e18e      	b.n	800eef4 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	0a5b      	lsrs	r3, r3, #9
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	8952      	ldrh	r2, [r2, #10]
 800ebe0:	3a01      	subs	r2, #1
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	69ba      	ldr	r2, [r7, #24]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	699b      	ldr	r3, [r3, #24]
 800ebee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 8175 	beq.w	800eee2 <f_lseek+0x48c>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	69ba      	ldr	r2, [r7, #24]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	f000 816f 	beq.w	800eee2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	7d1b      	ldrb	r3, [r3, #20]
 800ec08:	b25b      	sxtb	r3, r3
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	da1d      	bge.n	800ec4a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	7858      	ldrb	r0, [r3, #1]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a1a      	ldr	r2, [r3, #32]
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	f7fd fd73 	bl	800c708 <disk_write>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d009      	beq.n	800ec3c <f_lseek+0x1e6>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	755a      	strb	r2, [r3, #21]
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2101      	movs	r1, #1
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fd febd 	bl	800c9b2 <unlock_fs>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e15b      	b.n	800eef4 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7d1b      	ldrb	r3, [r3, #20]
 800ec40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	7858      	ldrb	r0, [r3, #1]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec54:	2301      	movs	r3, #1
 800ec56:	69ba      	ldr	r2, [r7, #24]
 800ec58:	f7fd fd36 	bl	800c6c8 <disk_read>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d009      	beq.n	800ec76 <f_lseek+0x220>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	755a      	strb	r2, [r3, #21]
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2101      	movs	r1, #1
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fd fea0 	bl	800c9b2 <unlock_fs>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e13e      	b.n	800eef4 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	69ba      	ldr	r2, [r7, #24]
 800ec7a:	621a      	str	r2, [r3, #32]
 800ec7c:	e131      	b.n	800eee2 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d908      	bls.n	800ec9a <f_lseek+0x244>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	7d1b      	ldrb	r3, [r3, #20]
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eca8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 80c0 	beq.w	800ee32 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	895b      	ldrh	r3, [r3, #10]
 800ecb6:	025b      	lsls	r3, r3, #9
 800ecb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01b      	beq.n	800ecf8 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	1e5a      	subs	r2, r3, #1
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	fbb2 f2f3 	udiv	r2, r2, r3
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	1e59      	subs	r1, r3, #1
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d30f      	bcc.n	800ecf8 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ecd8:	6a3b      	ldr	r3, [r7, #32]
 800ecda:	1e5a      	subs	r2, r3, #1
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	425b      	negs	r3, r3
 800ece0:	401a      	ands	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	69db      	ldr	r3, [r3, #28]
 800ecf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ecf6:	e02c      	b.n	800ed52 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d123      	bne.n	800ed4c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2100      	movs	r1, #0
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fe face 	bl	800d2aa <create_chain>
 800ed0e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d109      	bne.n	800ed2a <f_lseek+0x2d4>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2202      	movs	r2, #2
 800ed1a:	755a      	strb	r2, [r3, #21]
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	2102      	movs	r1, #2
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fd fe46 	bl	800c9b2 <unlock_fs>
 800ed26:	2302      	movs	r3, #2
 800ed28:	e0e4      	b.n	800eef4 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed30:	d109      	bne.n	800ed46 <f_lseek+0x2f0>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	755a      	strb	r2, [r3, #21]
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fd fe38 	bl	800c9b2 <unlock_fs>
 800ed42:	2301      	movs	r3, #1
 800ed44:	e0d6      	b.n	800eef4 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed4a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed50:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ed52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d06c      	beq.n	800ee32 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800ed58:	e044      	b.n	800ede4 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	603b      	str	r3, [r7, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	699a      	ldr	r2, [r3, #24]
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	441a      	add	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	7d1b      	ldrb	r3, [r3, #20]
 800ed72:	f003 0302 	and.w	r3, r3, #2
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00b      	beq.n	800ed92 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe fa93 	bl	800d2aa <create_chain>
 800ed84:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ed86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d108      	bne.n	800ed9e <f_lseek+0x348>
							ofs = 0; break;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	e02c      	b.n	800edec <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe f891 	bl	800cebe <get_fat>
 800ed9c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda4:	d109      	bne.n	800edba <f_lseek+0x364>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2201      	movs	r2, #1
 800edaa:	755a      	strb	r2, [r3, #21]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	2101      	movs	r1, #1
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fd fdfe 	bl	800c9b2 <unlock_fs>
 800edb6:	2301      	movs	r3, #1
 800edb8:	e09c      	b.n	800eef4 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800edba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d904      	bls.n	800edca <f_lseek+0x374>
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d309      	bcc.n	800edde <f_lseek+0x388>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2202      	movs	r2, #2
 800edce:	755a      	strb	r2, [r3, #21]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	2102      	movs	r1, #2
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fd fdec 	bl	800c9b2 <unlock_fs>
 800edda:	2302      	movs	r3, #2
 800eddc:	e08a      	b.n	800eef4 <f_lseek+0x49e>
					fp->clust = clst;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ede2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d8b6      	bhi.n	800ed5a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	699a      	ldr	r2, [r3, #24]
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	441a      	add	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d017      	beq.n	800ee32 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fe f83a 	bl	800ce80 <clust2sect>
 800ee0c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ee0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d109      	bne.n	800ee28 <f_lseek+0x3d2>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2202      	movs	r2, #2
 800ee18:	755a      	strb	r2, [r3, #21]
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2102      	movs	r1, #2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fd fdc7 	bl	800c9b2 <unlock_fs>
 800ee24:	2302      	movs	r3, #2
 800ee26:	e065      	b.n	800eef4 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	0a5b      	lsrs	r3, r3, #9
 800ee2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee2e:	4413      	add	r3, r2
 800ee30:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	699a      	ldr	r2, [r3, #24]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d90a      	bls.n	800ee54 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	699a      	ldr	r2, [r3, #24]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	7d1b      	ldrb	r3, [r3, #20]
 800ee4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d040      	beq.n	800eee2 <f_lseek+0x48c>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6a1b      	ldr	r3, [r3, #32]
 800ee64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d03b      	beq.n	800eee2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	7d1b      	ldrb	r3, [r3, #20]
 800ee6e:	b25b      	sxtb	r3, r3
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	da1d      	bge.n	800eeb0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	7858      	ldrb	r0, [r3, #1]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a1a      	ldr	r2, [r3, #32]
 800ee82:	2301      	movs	r3, #1
 800ee84:	f7fd fc40 	bl	800c708 <disk_write>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <f_lseek+0x44c>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	755a      	strb	r2, [r3, #21]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	2101      	movs	r1, #1
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fd fd8a 	bl	800c9b2 <unlock_fs>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e028      	b.n	800eef4 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	7858      	ldrb	r0, [r3, #1]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eeba:	2301      	movs	r3, #1
 800eebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eebe:	f7fd fc03 	bl	800c6c8 <disk_read>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d009      	beq.n	800eedc <f_lseek+0x486>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	755a      	strb	r2, [r3, #21]
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2101      	movs	r1, #1
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fd fd6d 	bl	800c9b2 <unlock_fs>
 800eed8:	2301      	movs	r3, #1
 800eeda:	e00b      	b.n	800eef4 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eee0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fd fd61 	bl	800c9b2 <unlock_fs>
 800eef0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3740      	adds	r7, #64	@ 0x40
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b096      	sub	sp, #88	@ 0x58
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ef04:	f107 0108 	add.w	r1, r7, #8
 800ef08:	1d3b      	adds	r3, r7, #4
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fe fe85 	bl	800dc1c <find_volume>
 800ef12:	4603      	mov	r3, r0
 800ef14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800ef1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f040 80ec 	bne.w	800f0fe <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	f107 030c 	add.w	r3, r7, #12
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe fd68 	bl	800da04 <follow_path>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ef3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d102      	bne.n	800ef48 <f_mkdir+0x4c>
 800ef42:	2308      	movs	r3, #8
 800ef44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ef48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef4c:	2b04      	cmp	r3, #4
 800ef4e:	f040 80d6 	bne.w	800f0fe <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ef52:	f107 030c 	add.w	r3, r7, #12
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fe f9a6 	bl	800d2aa <create_chain>
 800ef5e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	895b      	ldrh	r3, [r3, #10]
 800ef64:	025b      	lsls	r3, r3, #9
 800ef66:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ef6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <f_mkdir+0x7e>
 800ef74:	2307      	movs	r3, #7
 800ef76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800ef7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d102      	bne.n	800ef86 <f_mkdir+0x8a>
 800ef80:	2302      	movs	r3, #2
 800ef82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ef86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8c:	d102      	bne.n	800ef94 <f_mkdir+0x98>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ef94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <f_mkdir+0xae>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fd fe8e 	bl	800ccc0 <sync_window>
 800efa4:	4603      	mov	r3, r0
 800efa6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800efaa:	f7fd faef 	bl	800c58c <get_fattime>
 800efae:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800efb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d16a      	bne.n	800f08e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fd ff5f 	bl	800ce80 <clust2sect>
 800efc2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	3334      	adds	r3, #52	@ 0x34
 800efc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800efca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efce:	2100      	movs	r1, #0
 800efd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800efd2:	f7fd fc7b 	bl	800c8cc <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800efd6:	220b      	movs	r2, #11
 800efd8:	2120      	movs	r1, #32
 800efda:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800efdc:	f7fd fc76 	bl	800c8cc <mem_set>
					dir[DIR_Name] = '.';
 800efe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe2:	222e      	movs	r2, #46	@ 0x2e
 800efe4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800efe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe8:	330b      	adds	r3, #11
 800efea:	2210      	movs	r2, #16
 800efec:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800efee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff0:	3316      	adds	r3, #22
 800eff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fc1c 	bl	800c832 <st_dword>
					st_clust(fs, dir, dcl);
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800effe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fbc4 	bl	800d78e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f008:	3320      	adds	r3, #32
 800f00a:	2220      	movs	r2, #32
 800f00c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fd fc3b 	bl	800c88a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f016:	3321      	adds	r3, #33	@ 0x21
 800f018:	222e      	movs	r2, #46	@ 0x2e
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b03      	cmp	r3, #3
 800f026:	d106      	bne.n	800f036 <f_mkdir+0x13a>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f02e:	429a      	cmp	r2, r3
 800f030:	d101      	bne.n	800f036 <f_mkdir+0x13a>
 800f032:	2300      	movs	r3, #0
 800f034:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800f036:	68b8      	ldr	r0, [r7, #8]
 800f038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f03a:	3320      	adds	r3, #32
 800f03c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f03e:	4619      	mov	r1, r3
 800f040:	f7fe fba5 	bl	800d78e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	895b      	ldrh	r3, [r3, #10]
 800f048:	653b      	str	r3, [r7, #80]	@ 0x50
 800f04a:	e01b      	b.n	800f084 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800f04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f04e:	1c5a      	adds	r2, r3, #1
 800f050:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	2201      	movs	r2, #1
 800f05a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fd fe2e 	bl	800ccc0 <sync_window>
 800f064:	4603      	mov	r3, r0
 800f066:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800f06a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10c      	bne.n	800f08c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800f072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f076:	2100      	movs	r1, #0
 800f078:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f07a:	f7fd fc27 	bl	800c8cc <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f080:	3b01      	subs	r3, #1
 800f082:	653b      	str	r3, [r7, #80]	@ 0x50
 800f084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1e0      	bne.n	800f04c <f_mkdir+0x150>
 800f08a:	e000      	b.n	800f08e <f_mkdir+0x192>
					if (res != FR_OK) break;
 800f08c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f08e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f092:	2b00      	cmp	r3, #0
 800f094:	d107      	bne.n	800f0a6 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f096:	f107 030c 	add.w	r3, r7, #12
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe fbec 	bl	800d878 <dir_register>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800f0a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d120      	bne.n	800f0f0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0b4:	3316      	adds	r3, #22
 800f0b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd fbba 	bl	800c832 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe fb62 	bl	800d78e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0cc:	330b      	adds	r3, #11
 800f0ce:	2210      	movs	r2, #16
 800f0d0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10e      	bne.n	800f0fe <f_mkdir+0x202>
					res = sync_fs(fs);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fd fe5e 	bl	800cda4 <sync_fs>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800f0ee:	e006      	b.n	800f0fe <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f0f0:	f107 030c 	add.w	r3, r7, #12
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe f871 	bl	800d1e0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f104:	4611      	mov	r1, r2
 800f106:	4618      	mov	r0, r3
 800f108:	f7fd fc53 	bl	800c9b2 <unlock_fs>
 800f10c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800f110:	4618      	mov	r0, r3
 800f112:	3758      	adds	r7, #88	@ 0x58
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	4613      	mov	r3, r2
 800f124:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f126:	2301      	movs	r3, #1
 800f128:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f12e:	4b1f      	ldr	r3, [pc, #124]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f130:	7a5b      	ldrb	r3, [r3, #9]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d131      	bne.n	800f19c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f138:	4b1c      	ldr	r3, [pc, #112]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f13a:	7a5b      	ldrb	r3, [r3, #9]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	461a      	mov	r2, r3
 800f140:	4b1a      	ldr	r3, [pc, #104]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f142:	2100      	movs	r1, #0
 800f144:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f146:	4b19      	ldr	r3, [pc, #100]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f148:	7a5b      	ldrb	r3, [r3, #9]
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	4a17      	ldr	r2, [pc, #92]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4413      	add	r3, r2
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f156:	4b15      	ldr	r3, [pc, #84]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f158:	7a5b      	ldrb	r3, [r3, #9]
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	461a      	mov	r2, r3
 800f15e:	4b13      	ldr	r3, [pc, #76]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f160:	4413      	add	r3, r2
 800f162:	79fa      	ldrb	r2, [r7, #7]
 800f164:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f166:	4b11      	ldr	r3, [pc, #68]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f168:	7a5b      	ldrb	r3, [r3, #9]
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	b2d1      	uxtb	r1, r2
 800f170:	4a0e      	ldr	r2, [pc, #56]	@ (800f1ac <FATFS_LinkDriverEx+0x94>)
 800f172:	7251      	strb	r1, [r2, #9]
 800f174:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f176:	7dbb      	ldrb	r3, [r7, #22]
 800f178:	3330      	adds	r3, #48	@ 0x30
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	3301      	adds	r3, #1
 800f184:	223a      	movs	r2, #58	@ 0x3a
 800f186:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	3302      	adds	r3, #2
 800f18c:	222f      	movs	r2, #47	@ 0x2f
 800f18e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	3303      	adds	r3, #3
 800f194:	2200      	movs	r2, #0
 800f196:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	20001840 	.word	0x20001840

0800f1b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7ff ffaa 	bl	800f118 <FATFS_LinkDriverEx>
 800f1c4:	4603      	mov	r3, r0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b084      	sub	sp, #16
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	6039      	str	r1, [r7, #0]
 800f1d8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f1de:	f107 0308 	add.w	r3, r7, #8
 800f1e2:	2101      	movs	r1, #1
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 f925 	bl	800f434 <osSemaphoreCreate>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	bf14      	ite	ne
 800f1f8:	2301      	movne	r3, #1
 800f1fa:	2300      	moveq	r3, #0
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	60fb      	str	r3, [r7, #12]

    return ret;
 800f200:	68fb      	ldr	r3, [r7, #12]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f9b0 	bl	800f578 <osSemaphoreDelete>
#endif
    return 1;
 800f218:	2301      	movs	r3, #1
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f22e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f91c 	bl	800f470 <osSemaphoreWait>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f23e:	2301      	movs	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f242:	68fb      	ldr	r3, [r7, #12]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 f959 	bl	800f50c <osSemaphoreRelease>
#endif
}
 800f25a:	bf00      	nop
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f262:	b480      	push	{r7}
 800f264:	b085      	sub	sp, #20
 800f266:	af00      	add	r7, sp, #0
 800f268:	4603      	mov	r3, r0
 800f26a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f274:	2b84      	cmp	r3, #132	@ 0x84
 800f276:	d005      	beq.n	800f284 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	4413      	add	r3, r2
 800f280:	3303      	adds	r3, #3
 800f282:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f284:	68fb      	ldr	r3, [r7, #12]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f298:	f3ef 8305 	mrs	r3, IPSR
 800f29c:	607b      	str	r3, [r7, #4]
  return(result);
 800f29e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bf14      	ite	ne
 800f2a4:	2301      	movne	r3, #1
 800f2a6:	2300      	moveq	r3, #0
 800f2a8:	b2db      	uxtb	r3, r3
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr

0800f2b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f2ba:	f001 fa57 	bl	801076c <vTaskStartScheduler>
  
  return osOK;
 800f2be:	2300      	movs	r3, #0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	af02      	add	r7, sp, #8
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685c      	ldr	r4, [r3, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2da:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ffbd 	bl	800f262 <makeFreeRtosPriority>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	f107 030c 	add.w	r3, r7, #12
 800f2ee:	9301      	str	r3, [sp, #4]
 800f2f0:	9200      	str	r2, [sp, #0]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f000 ff99 	bl	8010230 <xTaskCreate>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b01      	cmp	r3, #1
 800f302:	d001      	beq.n	800f308 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f304:	2300      	movs	r3, #0
 800f306:	e000      	b.n	800f30a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f308:	68fb      	ldr	r3, [r7, #12]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f312 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b082      	sub	sp, #8
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800f31a:	2001      	movs	r0, #1
 800f31c:	f000 fada 	bl	800f8d4 <xQueueCreateMutex>
 800f320:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f336:	2300      	movs	r3, #0
 800f338:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d101      	bne.n	800f344 <osMutexWait+0x18>
    return osErrorParameter;
 800f340:	2380      	movs	r3, #128	@ 0x80
 800f342:	e03a      	b.n	800f3ba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d103      	bne.n	800f358 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
 800f354:	60fb      	str	r3, [r7, #12]
 800f356:	e009      	b.n	800f36c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d006      	beq.n	800f36c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <osMutexWait+0x40>
      ticks = 1;
 800f368:	2301      	movs	r3, #1
 800f36a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f36c:	f7ff ff91 	bl	800f292 <inHandlerMode>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d017      	beq.n	800f3a6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f376:	f107 0308 	add.w	r3, r7, #8
 800f37a:	461a      	mov	r2, r3
 800f37c:	2100      	movs	r1, #0
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fd62 	bl	800fe48 <xQueueReceiveFromISR>
 800f384:	4603      	mov	r3, r0
 800f386:	2b01      	cmp	r3, #1
 800f388:	d001      	beq.n	800f38e <osMutexWait+0x62>
      return osErrorOS;
 800f38a:	23ff      	movs	r3, #255	@ 0xff
 800f38c:	e015      	b.n	800f3ba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d011      	beq.n	800f3b8 <osMutexWait+0x8c>
 800f394:	4b0b      	ldr	r3, [pc, #44]	@ (800f3c4 <osMutexWait+0x98>)
 800f396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	e008      	b.n	800f3b8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f3a6:	68f9      	ldr	r1, [r7, #12]
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fc3d 	bl	800fc28 <xQueueSemaphoreTake>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d001      	beq.n	800f3b8 <osMutexWait+0x8c>
    return osErrorOS;
 800f3b4:	23ff      	movs	r3, #255	@ 0xff
 800f3b6:	e000      	b.n	800f3ba <osMutexWait+0x8e>
  }
  
  return osOK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	e000ed04 	.word	0xe000ed04

0800f3c8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f3d8:	f7ff ff5b 	bl	800f292 <inHandlerMode>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d016      	beq.n	800f410 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f3e2:	f107 0308 	add.w	r3, r7, #8
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fb8d 	bl	800fb08 <xQueueGiveFromISR>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d001      	beq.n	800f3f8 <osMutexRelease+0x30>
      return osErrorOS;
 800f3f4:	23ff      	movs	r3, #255	@ 0xff
 800f3f6:	e017      	b.n	800f428 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d013      	beq.n	800f426 <osMutexRelease+0x5e>
 800f3fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f430 <osMutexRelease+0x68>)
 800f400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	f3bf 8f4f 	dsb	sy
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	e00a      	b.n	800f426 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f410:	2300      	movs	r3, #0
 800f412:	2200      	movs	r2, #0
 800f414:	2100      	movs	r1, #0
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fa74 	bl	800f904 <xQueueGenericSend>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d001      	beq.n	800f426 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f422:	23ff      	movs	r3, #255	@ 0xff
 800f424:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f426:	68fb      	ldr	r3, [r7, #12]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	e000ed04 	.word	0xe000ed04

0800f434 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d110      	bne.n	800f466 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800f444:	2203      	movs	r2, #3
 800f446:	2100      	movs	r1, #0
 800f448:	2001      	movs	r0, #1
 800f44a:	f000 f9d3 	bl	800f7f4 <xQueueGenericCreate>
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <osSemaphoreCreate+0x2e>
 800f456:	2300      	movs	r3, #0
 800f458:	2200      	movs	r2, #0
 800f45a:	2100      	movs	r1, #0
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 fa51 	bl	800f904 <xQueueGenericSend>
    return sema;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	e000      	b.n	800f468 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800f466:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f47a:	2300      	movs	r3, #0
 800f47c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d101      	bne.n	800f488 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f484:	2380      	movs	r3, #128	@ 0x80
 800f486:	e03a      	b.n	800f4fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f488:	2300      	movs	r3, #0
 800f48a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d103      	bne.n	800f49c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f494:	f04f 33ff 	mov.w	r3, #4294967295
 800f498:	60fb      	str	r3, [r7, #12]
 800f49a:	e009      	b.n	800f4b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d006      	beq.n	800f4b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <osSemaphoreWait+0x40>
      ticks = 1;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f4b0:	f7ff feef 	bl	800f292 <inHandlerMode>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d017      	beq.n	800f4ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f4ba:	f107 0308 	add.w	r3, r7, #8
 800f4be:	461a      	mov	r2, r3
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fcc0 	bl	800fe48 <xQueueReceiveFromISR>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d001      	beq.n	800f4d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f4ce:	23ff      	movs	r3, #255	@ 0xff
 800f4d0:	e015      	b.n	800f4fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d011      	beq.n	800f4fc <osSemaphoreWait+0x8c>
 800f4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f508 <osSemaphoreWait+0x98>)
 800f4da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4de:	601a      	str	r2, [r3, #0]
 800f4e0:	f3bf 8f4f 	dsb	sy
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	e008      	b.n	800f4fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f4ea:	68f9      	ldr	r1, [r7, #12]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 fb9b 	bl	800fc28 <xQueueSemaphoreTake>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d001      	beq.n	800f4fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f4f8:	23ff      	movs	r3, #255	@ 0xff
 800f4fa:	e000      	b.n	800f4fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	e000ed04 	.word	0xe000ed04

0800f50c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f514:	2300      	movs	r3, #0
 800f516:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f518:	2300      	movs	r3, #0
 800f51a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f51c:	f7ff feb9 	bl	800f292 <inHandlerMode>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d016      	beq.n	800f554 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f526:	f107 0308 	add.w	r3, r7, #8
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 faeb 	bl	800fb08 <xQueueGiveFromISR>
 800f532:	4603      	mov	r3, r0
 800f534:	2b01      	cmp	r3, #1
 800f536:	d001      	beq.n	800f53c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f538:	23ff      	movs	r3, #255	@ 0xff
 800f53a:	e017      	b.n	800f56c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d013      	beq.n	800f56a <osSemaphoreRelease+0x5e>
 800f542:	4b0c      	ldr	r3, [pc, #48]	@ (800f574 <osSemaphoreRelease+0x68>)
 800f544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	e00a      	b.n	800f56a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f554:	2300      	movs	r3, #0
 800f556:	2200      	movs	r2, #0
 800f558:	2100      	movs	r1, #0
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f9d2 	bl	800f904 <xQueueGenericSend>
 800f560:	4603      	mov	r3, r0
 800f562:	2b01      	cmp	r3, #1
 800f564:	d001      	beq.n	800f56a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f566:	23ff      	movs	r3, #255	@ 0xff
 800f568:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f56a:	68fb      	ldr	r3, [r7, #12]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	e000ed04 	.word	0xe000ed04

0800f578 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f580:	f7ff fe87 	bl	800f292 <inHandlerMode>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d001      	beq.n	800f58e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f58a:	2382      	movs	r3, #130	@ 0x82
 800f58c:	e003      	b.n	800f596 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fcdc 	bl	800ff4c <vQueueDelete>

  return osOK; 
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f001 f84c 	bl	8010644 <vTaskSuspend>
  
  return osOK;
 800f5ac:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f103 0208 	add.w	r2, r3, #8
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f103 0208 	add.w	r2, r3, #8
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f103 0208 	add.w	r2, r3, #8
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f5ea:	bf00      	nop
 800f5ec:	370c      	adds	r7, #12
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f5f6:	b480      	push	{r7}
 800f5f8:	b083      	sub	sp, #12
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f604:	bf00      	nop
 800f606:	370c      	adds	r7, #12
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	689a      	ldr	r2, [r3, #8]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	683a      	ldr	r2, [r7, #0]
 800f634:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	601a      	str	r2, [r3, #0]
}
 800f64c:	bf00      	nop
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	d103      	bne.n	800f678 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	60fb      	str	r3, [r7, #12]
 800f676:	e00c      	b.n	800f692 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3308      	adds	r3, #8
 800f67c:	60fb      	str	r3, [r7, #12]
 800f67e:	e002      	b.n	800f686 <vListInsert+0x2e>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	60fb      	str	r3, [r7, #12]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d2f6      	bcs.n	800f680 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	683a      	ldr	r2, [r7, #0]
 800f6ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	601a      	str	r2, [r3, #0]
}
 800f6be:	bf00      	nop
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b085      	sub	sp, #20
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	6892      	ldr	r2, [r2, #8]
 800f6e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6852      	ldr	r2, [r2, #4]
 800f6ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d103      	bne.n	800f6fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	689a      	ldr	r2, [r3, #8]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	1e5a      	subs	r2, r3, #1
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
	...

0800f720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10b      	bne.n	800f74c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f746:	bf00      	nop
 800f748:	bf00      	nop
 800f74a:	e7fd      	b.n	800f748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f74c:	f001 ff5c 	bl	8011608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f758:	68f9      	ldr	r1, [r7, #12]
 800f75a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f75c:	fb01 f303 	mul.w	r3, r1, r3
 800f760:	441a      	add	r2, r3
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f77c:	3b01      	subs	r3, #1
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f782:	fb01 f303 	mul.w	r3, r1, r3
 800f786:	441a      	add	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	22ff      	movs	r2, #255	@ 0xff
 800f790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	22ff      	movs	r2, #255	@ 0xff
 800f798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d114      	bne.n	800f7cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d01a      	beq.n	800f7e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	3310      	adds	r3, #16
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f001 fa2e 	bl	8010c10 <xTaskRemoveFromEventList>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d012      	beq.n	800f7e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f0 <xQueueGenericReset+0xd0>)
 800f7bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	e009      	b.n	800f7e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	3310      	adds	r3, #16
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff fef0 	bl	800f5b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	3324      	adds	r3, #36	@ 0x24
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7ff feeb 	bl	800f5b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f7e0:	f001 ff44 	bl	801166c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f7e4:	2301      	movs	r3, #1
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	e000ed04 	.word	0xe000ed04

0800f7f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b08a      	sub	sp, #40	@ 0x28
 800f7f8:	af02      	add	r7, sp, #8
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4613      	mov	r3, r2
 800f800:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d10b      	bne.n	800f820 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80c:	f383 8811 	msr	BASEPRI, r3
 800f810:	f3bf 8f6f 	isb	sy
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	613b      	str	r3, [r7, #16]
}
 800f81a:	bf00      	nop
 800f81c:	bf00      	nop
 800f81e:	e7fd      	b.n	800f81c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	fb02 f303 	mul.w	r3, r2, r3
 800f828:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	3348      	adds	r3, #72	@ 0x48
 800f82e:	4618      	mov	r0, r3
 800f830:	f002 f80c 	bl	801184c <pvPortMalloc>
 800f834:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00d      	beq.n	800f858 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	3348      	adds	r3, #72	@ 0x48
 800f844:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f846:	79fa      	ldrb	r2, [r7, #7]
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	4613      	mov	r3, r2
 800f84e:	697a      	ldr	r2, [r7, #20]
 800f850:	68b9      	ldr	r1, [r7, #8]
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 f805 	bl	800f862 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f858:	69bb      	ldr	r3, [r7, #24]
	}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3720      	adds	r7, #32
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b084      	sub	sp, #16
 800f866:	af00      	add	r7, sp, #0
 800f868:	60f8      	str	r0, [r7, #12]
 800f86a:	60b9      	str	r1, [r7, #8]
 800f86c:	607a      	str	r2, [r7, #4]
 800f86e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d103      	bne.n	800f87e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	69ba      	ldr	r2, [r7, #24]
 800f87a:	601a      	str	r2, [r3, #0]
 800f87c:	e002      	b.n	800f884 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f890:	2101      	movs	r1, #1
 800f892:	69b8      	ldr	r0, [r7, #24]
 800f894:	f7ff ff44 	bl	800f720 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f898:	bf00      	nop
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00e      	beq.n	800f8cc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 f81c 	bl	800f904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f8cc:	bf00      	nop
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	4603      	mov	r3, r0
 800f8dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	617b      	str	r3, [r7, #20]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	6939      	ldr	r1, [r7, #16]
 800f8ec:	6978      	ldr	r0, [r7, #20]
 800f8ee:	f7ff ff81 	bl	800f7f4 <xQueueGenericCreate>
 800f8f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f7ff ffd3 	bl	800f8a0 <prvInitialiseMutex>

		return xNewQueue;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
	}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08e      	sub	sp, #56	@ 0x38
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f912:	2300      	movs	r3, #0
 800f914:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d10b      	bne.n	800f938 <xQueueGenericSend+0x34>
	__asm volatile
 800f920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f924:	f383 8811 	msr	BASEPRI, r3
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f932:	bf00      	nop
 800f934:	bf00      	nop
 800f936:	e7fd      	b.n	800f934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d103      	bne.n	800f946 <xQueueGenericSend+0x42>
 800f93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <xQueueGenericSend+0x46>
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <xQueueGenericSend+0x48>
 800f94a:	2300      	movs	r3, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10b      	bne.n	800f968 <xQueueGenericSend+0x64>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f962:	bf00      	nop
 800f964:	bf00      	nop
 800f966:	e7fd      	b.n	800f964 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d103      	bne.n	800f976 <xQueueGenericSend+0x72>
 800f96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f972:	2b01      	cmp	r3, #1
 800f974:	d101      	bne.n	800f97a <xQueueGenericSend+0x76>
 800f976:	2301      	movs	r3, #1
 800f978:	e000      	b.n	800f97c <xQueueGenericSend+0x78>
 800f97a:	2300      	movs	r3, #0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10b      	bne.n	800f998 <xQueueGenericSend+0x94>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	623b      	str	r3, [r7, #32]
}
 800f992:	bf00      	nop
 800f994:	bf00      	nop
 800f996:	e7fd      	b.n	800f994 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f998:	f001 fae0 	bl	8010f5c <xTaskGetSchedulerState>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <xQueueGenericSend+0xa4>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <xQueueGenericSend+0xa8>
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e000      	b.n	800f9ae <xQueueGenericSend+0xaa>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10b      	bne.n	800f9ca <xQueueGenericSend+0xc6>
	__asm volatile
 800f9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b6:	f383 8811 	msr	BASEPRI, r3
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	61fb      	str	r3, [r7, #28]
}
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop
 800f9c8:	e7fd      	b.n	800f9c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9ca:	f001 fe1d 	bl	8011608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d302      	bcc.n	800f9e0 <xQueueGenericSend+0xdc>
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d129      	bne.n	800fa34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9e0:	683a      	ldr	r2, [r7, #0]
 800f9e2:	68b9      	ldr	r1, [r7, #8]
 800f9e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9e6:	f000 fae8 	bl	800ffba <prvCopyDataToQueue>
 800f9ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d010      	beq.n	800fa16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f6:	3324      	adds	r3, #36	@ 0x24
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f001 f909 	bl	8010c10 <xTaskRemoveFromEventList>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d013      	beq.n	800fa2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fa04:	4b3f      	ldr	r3, [pc, #252]	@ (800fb04 <xQueueGenericSend+0x200>)
 800fa06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	e00a      	b.n	800fa2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d007      	beq.n	800fa2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fa1c:	4b39      	ldr	r3, [pc, #228]	@ (800fb04 <xQueueGenericSend+0x200>)
 800fa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa22:	601a      	str	r2, [r3, #0]
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fa2c:	f001 fe1e 	bl	801166c <vPortExitCritical>
				return pdPASS;
 800fa30:	2301      	movs	r3, #1
 800fa32:	e063      	b.n	800fafc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d103      	bne.n	800fa42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa3a:	f001 fe17 	bl	801166c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e05c      	b.n	800fafc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d106      	bne.n	800fa56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa48:	f107 0314 	add.w	r3, r7, #20
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f001 f943 	bl	8010cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa52:	2301      	movs	r3, #1
 800fa54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa56:	f001 fe09 	bl	801166c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa5a:	f000 fed9 	bl	8010810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa5e:	f001 fdd3 	bl	8011608 <vPortEnterCritical>
 800fa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa68:	b25b      	sxtb	r3, r3
 800fa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6e:	d103      	bne.n	800fa78 <xQueueGenericSend+0x174>
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	2200      	movs	r2, #0
 800fa74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa7e:	b25b      	sxtb	r3, r3
 800fa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa84:	d103      	bne.n	800fa8e <xQueueGenericSend+0x18a>
 800fa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa8e:	f001 fded 	bl	801166c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa92:	1d3a      	adds	r2, r7, #4
 800fa94:	f107 0314 	add.w	r3, r7, #20
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f001 f932 	bl	8010d04 <xTaskCheckForTimeOut>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d124      	bne.n	800faf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800faa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800faa8:	f000 fb7f 	bl	80101aa <prvIsQueueFull>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d018      	beq.n	800fae4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab4:	3310      	adds	r3, #16
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	4611      	mov	r1, r2
 800faba:	4618      	mov	r0, r3
 800fabc:	f001 f882 	bl	8010bc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fac2:	f000 fb0a 	bl	80100da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fac6:	f000 feb1 	bl	801082c <xTaskResumeAll>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	f47f af7c 	bne.w	800f9ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fad2:	4b0c      	ldr	r3, [pc, #48]	@ (800fb04 <xQueueGenericSend+0x200>)
 800fad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	e772      	b.n	800f9ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fae6:	f000 faf8 	bl	80100da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800faea:	f000 fe9f 	bl	801082c <xTaskResumeAll>
 800faee:	e76c      	b.n	800f9ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800faf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800faf2:	f000 faf2 	bl	80100da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800faf6:	f000 fe99 	bl	801082c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fafa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3738      	adds	r7, #56	@ 0x38
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	e000ed04 	.word	0xe000ed04

0800fb08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b08e      	sub	sp, #56	@ 0x38
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10b      	bne.n	800fb34 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	623b      	str	r3, [r7, #32]
}
 800fb2e:	bf00      	nop
 800fb30:	bf00      	nop
 800fb32:	e7fd      	b.n	800fb30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00b      	beq.n	800fb54 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	61fb      	str	r3, [r7, #28]
}
 800fb4e:	bf00      	nop
 800fb50:	bf00      	nop
 800fb52:	e7fd      	b.n	800fb50 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d103      	bne.n	800fb64 <xQueueGiveFromISR+0x5c>
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <xQueueGiveFromISR+0x60>
 800fb64:	2301      	movs	r3, #1
 800fb66:	e000      	b.n	800fb6a <xQueueGiveFromISR+0x62>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d10b      	bne.n	800fb86 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	61bb      	str	r3, [r7, #24]
}
 800fb80:	bf00      	nop
 800fb82:	bf00      	nop
 800fb84:	e7fd      	b.n	800fb82 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb86:	f001 fe1f 	bl	80117c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fb8a:	f3ef 8211 	mrs	r2, BASEPRI
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	617a      	str	r2, [r7, #20]
 800fba0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fba2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d22b      	bcs.n	800fc0e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd0:	d112      	bne.n	800fbf8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d016      	beq.n	800fc08 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbdc:	3324      	adds	r3, #36	@ 0x24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f001 f816 	bl	8010c10 <xTaskRemoveFromEventList>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00e      	beq.n	800fc08 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00b      	beq.n	800fc08 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	e007      	b.n	800fc08 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	b25a      	sxtb	r2, r3
 800fc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc0c:	e001      	b.n	800fc12 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc14:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fc1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3738      	adds	r7, #56	@ 0x38
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08e      	sub	sp, #56	@ 0x38
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10b      	bne.n	800fc5c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	623b      	str	r3, [r7, #32]
}
 800fc56:	bf00      	nop
 800fc58:	bf00      	nop
 800fc5a:	e7fd      	b.n	800fc58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00b      	beq.n	800fc7c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc68:	f383 8811 	msr	BASEPRI, r3
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f3bf 8f4f 	dsb	sy
 800fc74:	61fb      	str	r3, [r7, #28]
}
 800fc76:	bf00      	nop
 800fc78:	bf00      	nop
 800fc7a:	e7fd      	b.n	800fc78 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc7c:	f001 f96e 	bl	8010f5c <xTaskGetSchedulerState>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <xQueueSemaphoreTake+0x64>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <xQueueSemaphoreTake+0x68>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <xQueueSemaphoreTake+0x6a>
 800fc90:	2300      	movs	r3, #0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10b      	bne.n	800fcae <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	61bb      	str	r3, [r7, #24]
}
 800fca8:	bf00      	nop
 800fcaa:	bf00      	nop
 800fcac:	e7fd      	b.n	800fcaa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcae:	f001 fcab 	bl	8011608 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d024      	beq.n	800fd08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc0:	1e5a      	subs	r2, r3, #1
 800fcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d104      	bne.n	800fcd8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fcce:	f001 faf1 	bl	80112b4 <pvTaskIncrementMutexHeldCount>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00f      	beq.n	800fd00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce2:	3310      	adds	r3, #16
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 ff93 	bl	8010c10 <xTaskRemoveFromEventList>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d007      	beq.n	800fd00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcf0:	4b54      	ldr	r3, [pc, #336]	@ (800fe44 <xQueueSemaphoreTake+0x21c>)
 800fcf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd00:	f001 fcb4 	bl	801166c <vPortExitCritical>
				return pdPASS;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e098      	b.n	800fe3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d112      	bne.n	800fd34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00b      	beq.n	800fd2c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd18:	f383 8811 	msr	BASEPRI, r3
 800fd1c:	f3bf 8f6f 	isb	sy
 800fd20:	f3bf 8f4f 	dsb	sy
 800fd24:	617b      	str	r3, [r7, #20]
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	e7fd      	b.n	800fd28 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd2c:	f001 fc9e 	bl	801166c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd30:	2300      	movs	r3, #0
 800fd32:	e082      	b.n	800fe3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d106      	bne.n	800fd48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd3a:	f107 030c 	add.w	r3, r7, #12
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 ffca 	bl	8010cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd44:	2301      	movs	r3, #1
 800fd46:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd48:	f001 fc90 	bl	801166c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd4c:	f000 fd60 	bl	8010810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd50:	f001 fc5a 	bl	8011608 <vPortEnterCritical>
 800fd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd5a:	b25b      	sxtb	r3, r3
 800fd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd60:	d103      	bne.n	800fd6a <xQueueSemaphoreTake+0x142>
 800fd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd70:	b25b      	sxtb	r3, r3
 800fd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd76:	d103      	bne.n	800fd80 <xQueueSemaphoreTake+0x158>
 800fd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd80:	f001 fc74 	bl	801166c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd84:	463a      	mov	r2, r7
 800fd86:	f107 030c 	add.w	r3, r7, #12
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 ffb9 	bl	8010d04 <xTaskCheckForTimeOut>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d132      	bne.n	800fdfe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd9a:	f000 f9f0 	bl	801017e <prvIsQueueEmpty>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d026      	beq.n	800fdf2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d109      	bne.n	800fdc0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fdac:	f001 fc2c 	bl	8011608 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f001 f8ef 	bl	8010f98 <xTaskPriorityInherit>
 800fdba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fdbc:	f001 fc56 	bl	801166c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc2:	3324      	adds	r3, #36	@ 0x24
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 fefb 	bl	8010bc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdd0:	f000 f983 	bl	80100da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdd4:	f000 fd2a 	bl	801082c <xTaskResumeAll>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f47f af67 	bne.w	800fcae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fde0:	4b18      	ldr	r3, [pc, #96]	@ (800fe44 <xQueueSemaphoreTake+0x21c>)
 800fde2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	e75d      	b.n	800fcae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fdf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdf4:	f000 f971 	bl	80100da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdf8:	f000 fd18 	bl	801082c <xTaskResumeAll>
 800fdfc:	e757      	b.n	800fcae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fdfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe00:	f000 f96b 	bl	80100da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe04:	f000 fd12 	bl	801082c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe0a:	f000 f9b8 	bl	801017e <prvIsQueueEmpty>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f43f af4c 	beq.w	800fcae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00d      	beq.n	800fe38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fe1c:	f001 fbf4 	bl	8011608 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe22:	f000 f8b2 	bl	800ff8a <prvGetDisinheritPriorityAfterTimeout>
 800fe26:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fe28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f001 f9b0 	bl	8011194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe34:	f001 fc1a 	bl	801166c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3738      	adds	r7, #56	@ 0x38
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	e000ed04 	.word	0xe000ed04

0800fe48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b08e      	sub	sp, #56	@ 0x38
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fe58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10b      	bne.n	800fe76 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	623b      	str	r3, [r7, #32]
}
 800fe70:	bf00      	nop
 800fe72:	bf00      	nop
 800fe74:	e7fd      	b.n	800fe72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d103      	bne.n	800fe84 <xQueueReceiveFromISR+0x3c>
 800fe7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <xQueueReceiveFromISR+0x40>
 800fe84:	2301      	movs	r3, #1
 800fe86:	e000      	b.n	800fe8a <xQueueReceiveFromISR+0x42>
 800fe88:	2300      	movs	r3, #0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d10b      	bne.n	800fea6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	61fb      	str	r3, [r7, #28]
}
 800fea0:	bf00      	nop
 800fea2:	bf00      	nop
 800fea4:	e7fd      	b.n	800fea2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fea6:	f001 fc8f 	bl	80117c8 <vPortValidateInterruptPriority>
	__asm volatile
 800feaa:	f3ef 8211 	mrs	r2, BASEPRI
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	61ba      	str	r2, [r7, #24]
 800fec0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fec2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d02f      	beq.n	800ff32 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fedc:	68b9      	ldr	r1, [r7, #8]
 800fede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fee0:	f000 f8d5 	bl	801008e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee6:	1e5a      	subs	r2, r3, #1
 800fee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800feec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef4:	d112      	bne.n	800ff1c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d016      	beq.n	800ff2c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff00:	3310      	adds	r3, #16
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 fe84 	bl	8010c10 <xTaskRemoveFromEventList>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00e      	beq.n	800ff2c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00b      	beq.n	800ff2c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2201      	movs	r2, #1
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	e007      	b.n	800ff2c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff20:	3301      	adds	r3, #1
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	b25a      	sxtb	r2, r3
 800ff26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff30:	e001      	b.n	800ff36 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ff32:	2300      	movs	r3, #0
 800ff34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	f383 8811 	msr	BASEPRI, r3
}
 800ff40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3738      	adds	r7, #56	@ 0x38
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10b      	bne.n	800ff76 <vQueueDelete+0x2a>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60bb      	str	r3, [r7, #8]
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	e7fd      	b.n	800ff72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f000 f930 	bl	80101dc <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f001 fd33 	bl	80119e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ff82:	bf00      	nop
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}

0800ff8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d006      	beq.n	800ffa8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f1c3 0307 	rsb	r3, r3, #7
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	e001      	b.n	800ffac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffac:	68fb      	ldr	r3, [r7, #12]
	}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr

0800ffba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b086      	sub	sp, #24
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	60f8      	str	r0, [r7, #12]
 800ffc2:	60b9      	str	r1, [r7, #8]
 800ffc4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10d      	bne.n	800fff4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d14d      	bne.n	801007c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f001 f84d 	bl	8011084 <xTaskPriorityDisinherit>
 800ffea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2200      	movs	r2, #0
 800fff0:	609a      	str	r2, [r3, #8]
 800fff2:	e043      	b.n	801007c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d119      	bne.n	801002e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6858      	ldr	r0, [r3, #4]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010002:	461a      	mov	r2, r3
 8010004:	68b9      	ldr	r1, [r7, #8]
 8010006:	f002 feae 	bl	8012d66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	685a      	ldr	r2, [r3, #4]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010012:	441a      	add	r2, r3
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	429a      	cmp	r2, r3
 8010022:	d32b      	bcc.n	801007c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	605a      	str	r2, [r3, #4]
 801002c:	e026      	b.n	801007c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	68d8      	ldr	r0, [r3, #12]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010036:	461a      	mov	r2, r3
 8010038:	68b9      	ldr	r1, [r7, #8]
 801003a:	f002 fe94 	bl	8012d66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68da      	ldr	r2, [r3, #12]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010046:	425b      	negs	r3, r3
 8010048:	441a      	add	r2, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	68da      	ldr	r2, [r3, #12]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d207      	bcs.n	801006a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	689a      	ldr	r2, [r3, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010062:	425b      	negs	r3, r3
 8010064:	441a      	add	r2, r3
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d105      	bne.n	801007c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d002      	beq.n	801007c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	3b01      	subs	r3, #1
 801007a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010084:	697b      	ldr	r3, [r7, #20]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}

0801008e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b082      	sub	sp, #8
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
 8010096:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009c:	2b00      	cmp	r3, #0
 801009e:	d018      	beq.n	80100d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	68da      	ldr	r2, [r3, #12]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a8:	441a      	add	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	68da      	ldr	r2, [r3, #12]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d303      	bcc.n	80100c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	68d9      	ldr	r1, [r3, #12]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ca:	461a      	mov	r2, r3
 80100cc:	6838      	ldr	r0, [r7, #0]
 80100ce:	f002 fe4a 	bl	8012d66 <memcpy>
	}
}
 80100d2:	bf00      	nop
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100e2:	f001 fa91 	bl	8011608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100ee:	e011      	b.n	8010114 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d012      	beq.n	801011e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	3324      	adds	r3, #36	@ 0x24
 80100fc:	4618      	mov	r0, r3
 80100fe:	f000 fd87 	bl	8010c10 <xTaskRemoveFromEventList>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d001      	beq.n	801010c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010108:	f000 fe60 	bl	8010dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801010c:	7bfb      	ldrb	r3, [r7, #15]
 801010e:	3b01      	subs	r3, #1
 8010110:	b2db      	uxtb	r3, r3
 8010112:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010118:	2b00      	cmp	r3, #0
 801011a:	dce9      	bgt.n	80100f0 <prvUnlockQueue+0x16>
 801011c:	e000      	b.n	8010120 <prvUnlockQueue+0x46>
					break;
 801011e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	22ff      	movs	r2, #255	@ 0xff
 8010124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010128:	f001 faa0 	bl	801166c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801012c:	f001 fa6c 	bl	8011608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010136:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010138:	e011      	b.n	801015e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d012      	beq.n	8010168 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	3310      	adds	r3, #16
 8010146:	4618      	mov	r0, r3
 8010148:	f000 fd62 	bl	8010c10 <xTaskRemoveFromEventList>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010152:	f000 fe3b 	bl	8010dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010156:	7bbb      	ldrb	r3, [r7, #14]
 8010158:	3b01      	subs	r3, #1
 801015a:	b2db      	uxtb	r3, r3
 801015c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801015e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010162:	2b00      	cmp	r3, #0
 8010164:	dce9      	bgt.n	801013a <prvUnlockQueue+0x60>
 8010166:	e000      	b.n	801016a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010168:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	22ff      	movs	r2, #255	@ 0xff
 801016e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010172:	f001 fa7b 	bl	801166c <vPortExitCritical>
}
 8010176:	bf00      	nop
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b084      	sub	sp, #16
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010186:	f001 fa3f 	bl	8011608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801018e:	2b00      	cmp	r3, #0
 8010190:	d102      	bne.n	8010198 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010192:	2301      	movs	r3, #1
 8010194:	60fb      	str	r3, [r7, #12]
 8010196:	e001      	b.n	801019c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010198:	2300      	movs	r3, #0
 801019a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801019c:	f001 fa66 	bl	801166c <vPortExitCritical>

	return xReturn;
 80101a0:	68fb      	ldr	r3, [r7, #12]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101b2:	f001 fa29 	bl	8011608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101be:	429a      	cmp	r2, r3
 80101c0:	d102      	bne.n	80101c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101c2:	2301      	movs	r3, #1
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	e001      	b.n	80101cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101c8:	2300      	movs	r3, #0
 80101ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101cc:	f001 fa4e 	bl	801166c <vPortExitCritical>

	return xReturn;
 80101d0:	68fb      	ldr	r3, [r7, #12]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
	...

080101dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80101dc:	b480      	push	{r7}
 80101de:	b085      	sub	sp, #20
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101e4:	2300      	movs	r3, #0
 80101e6:	60fb      	str	r3, [r7, #12]
 80101e8:	e016      	b.n	8010218 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80101ea:	4a10      	ldr	r2, [pc, #64]	@ (801022c <vQueueUnregisterQueue+0x50>)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	4413      	add	r3, r2
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d10b      	bne.n	8010212 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80101fa:	4a0c      	ldr	r2, [pc, #48]	@ (801022c <vQueueUnregisterQueue+0x50>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2100      	movs	r1, #0
 8010200:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010204:	4a09      	ldr	r2, [pc, #36]	@ (801022c <vQueueUnregisterQueue+0x50>)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	00db      	lsls	r3, r3, #3
 801020a:	4413      	add	r3, r2
 801020c:	2200      	movs	r2, #0
 801020e:	605a      	str	r2, [r3, #4]
				break;
 8010210:	e006      	b.n	8010220 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3301      	adds	r3, #1
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b07      	cmp	r3, #7
 801021c:	d9e5      	bls.n	80101ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801021e:	bf00      	nop
 8010220:	bf00      	nop
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr
 801022c:	2000184c 	.word	0x2000184c

08010230 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b08c      	sub	sp, #48	@ 0x30
 8010234:	af04      	add	r7, sp, #16
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	603b      	str	r3, [r7, #0]
 801023c:	4613      	mov	r3, r2
 801023e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010240:	88fb      	ldrh	r3, [r7, #6]
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4618      	mov	r0, r3
 8010246:	f001 fb01 	bl	801184c <pvPortMalloc>
 801024a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00e      	beq.n	8010270 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010252:	20a0      	movs	r0, #160	@ 0xa0
 8010254:	f001 fafa 	bl	801184c <pvPortMalloc>
 8010258:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	697a      	ldr	r2, [r7, #20]
 8010264:	631a      	str	r2, [r3, #48]	@ 0x30
 8010266:	e005      	b.n	8010274 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010268:	6978      	ldr	r0, [r7, #20]
 801026a:	f001 fbbd 	bl	80119e8 <vPortFree>
 801026e:	e001      	b.n	8010274 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010270:	2300      	movs	r3, #0
 8010272:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d013      	beq.n	80102a2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801027a:	88fa      	ldrh	r2, [r7, #6]
 801027c:	2300      	movs	r3, #0
 801027e:	9303      	str	r3, [sp, #12]
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	9302      	str	r3, [sp, #8]
 8010284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	68b9      	ldr	r1, [r7, #8]
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 f80f 	bl	80102b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010296:	69f8      	ldr	r0, [r7, #28]
 8010298:	f000 f8b4 	bl	8010404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801029c:	2301      	movs	r3, #1
 801029e:	61bb      	str	r3, [r7, #24]
 80102a0:	e002      	b.n	80102a8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
 80102a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80102a8:	69bb      	ldr	r3, [r7, #24]
	}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3720      	adds	r7, #32
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
	...

080102b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b088      	sub	sp, #32
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	607a      	str	r2, [r7, #4]
 80102c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80102c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	461a      	mov	r2, r3
 80102cc:	21a5      	movs	r1, #165	@ 0xa5
 80102ce:	f002 fc6c 	bl	8012baa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80102d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80102dc:	3b01      	subs	r3, #1
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	f023 0307 	bic.w	r3, r3, #7
 80102ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	f003 0307 	and.w	r3, r3, #7
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00b      	beq.n	801030e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	617b      	str	r3, [r7, #20]
}
 8010308:	bf00      	nop
 801030a:	bf00      	nop
 801030c:	e7fd      	b.n	801030a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d01f      	beq.n	8010354 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010314:	2300      	movs	r3, #0
 8010316:	61fb      	str	r3, [r7, #28]
 8010318:	e012      	b.n	8010340 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	4413      	add	r3, r2
 8010320:	7819      	ldrb	r1, [r3, #0]
 8010322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	4413      	add	r3, r2
 8010328:	3334      	adds	r3, #52	@ 0x34
 801032a:	460a      	mov	r2, r1
 801032c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	4413      	add	r3, r2
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d006      	beq.n	8010348 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	3301      	adds	r3, #1
 801033e:	61fb      	str	r3, [r7, #28]
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	2b0f      	cmp	r3, #15
 8010344:	d9e9      	bls.n	801031a <prvInitialiseNewTask+0x66>
 8010346:	e000      	b.n	801034a <prvInitialiseNewTask+0x96>
			{
				break;
 8010348:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801034a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010352:	e003      	b.n	801035c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801035c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035e:	2b06      	cmp	r3, #6
 8010360:	d901      	bls.n	8010366 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010362:	2306      	movs	r3, #6
 8010364:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801036a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801036c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010370:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010374:	2200      	movs	r2, #0
 8010376:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037a:	3304      	adds	r3, #4
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff f93a 	bl	800f5f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010384:	3318      	adds	r3, #24
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff f935 	bl	800f5f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801038c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801038e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010390:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010394:	f1c3 0207 	rsb	r2, r3, #7
 8010398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801039a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801039c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801039e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80103a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103a4:	2200      	movs	r2, #0
 80103a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80103aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ac:	2200      	movs	r2, #0
 80103ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b4:	334c      	adds	r3, #76	@ 0x4c
 80103b6:	224c      	movs	r2, #76	@ 0x4c
 80103b8:	2100      	movs	r1, #0
 80103ba:	4618      	mov	r0, r3
 80103bc:	f002 fbf5 	bl	8012baa <memset>
 80103c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c2:	4a0d      	ldr	r2, [pc, #52]	@ (80103f8 <prvInitialiseNewTask+0x144>)
 80103c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80103c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c8:	4a0c      	ldr	r2, [pc, #48]	@ (80103fc <prvInitialiseNewTask+0x148>)
 80103ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80103cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010400 <prvInitialiseNewTask+0x14c>)
 80103d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	f000 ffe6 	bl	80113a8 <pxPortInitialiseStack>
 80103dc:	4602      	mov	r2, r0
 80103de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80103e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103ee:	bf00      	nop
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	200048c0 	.word	0x200048c0
 80103fc:	20004928 	.word	0x20004928
 8010400:	20004990 	.word	0x20004990

08010404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801040c:	f001 f8fc 	bl	8011608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010410:	4b2a      	ldr	r3, [pc, #168]	@ (80104bc <prvAddNewTaskToReadyList+0xb8>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	3301      	adds	r3, #1
 8010416:	4a29      	ldr	r2, [pc, #164]	@ (80104bc <prvAddNewTaskToReadyList+0xb8>)
 8010418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801041a:	4b29      	ldr	r3, [pc, #164]	@ (80104c0 <prvAddNewTaskToReadyList+0xbc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d109      	bne.n	8010436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010422:	4a27      	ldr	r2, [pc, #156]	@ (80104c0 <prvAddNewTaskToReadyList+0xbc>)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010428:	4b24      	ldr	r3, [pc, #144]	@ (80104bc <prvAddNewTaskToReadyList+0xb8>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d110      	bne.n	8010452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010430:	f000 fcf0 	bl	8010e14 <prvInitialiseTaskLists>
 8010434:	e00d      	b.n	8010452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010436:	4b23      	ldr	r3, [pc, #140]	@ (80104c4 <prvAddNewTaskToReadyList+0xc0>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d109      	bne.n	8010452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801043e:	4b20      	ldr	r3, [pc, #128]	@ (80104c0 <prvAddNewTaskToReadyList+0xbc>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010448:	429a      	cmp	r2, r3
 801044a:	d802      	bhi.n	8010452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801044c:	4a1c      	ldr	r2, [pc, #112]	@ (80104c0 <prvAddNewTaskToReadyList+0xbc>)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010452:	4b1d      	ldr	r3, [pc, #116]	@ (80104c8 <prvAddNewTaskToReadyList+0xc4>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3301      	adds	r3, #1
 8010458:	4a1b      	ldr	r2, [pc, #108]	@ (80104c8 <prvAddNewTaskToReadyList+0xc4>)
 801045a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010460:	2201      	movs	r2, #1
 8010462:	409a      	lsls	r2, r3
 8010464:	4b19      	ldr	r3, [pc, #100]	@ (80104cc <prvAddNewTaskToReadyList+0xc8>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4313      	orrs	r3, r2
 801046a:	4a18      	ldr	r2, [pc, #96]	@ (80104cc <prvAddNewTaskToReadyList+0xc8>)
 801046c:	6013      	str	r3, [r2, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010472:	4613      	mov	r3, r2
 8010474:	009b      	lsls	r3, r3, #2
 8010476:	4413      	add	r3, r2
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4a15      	ldr	r2, [pc, #84]	@ (80104d0 <prvAddNewTaskToReadyList+0xcc>)
 801047c:	441a      	add	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	3304      	adds	r3, #4
 8010482:	4619      	mov	r1, r3
 8010484:	4610      	mov	r0, r2
 8010486:	f7ff f8c3 	bl	800f610 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801048a:	f001 f8ef 	bl	801166c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801048e:	4b0d      	ldr	r3, [pc, #52]	@ (80104c4 <prvAddNewTaskToReadyList+0xc0>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d00e      	beq.n	80104b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010496:	4b0a      	ldr	r3, [pc, #40]	@ (80104c0 <prvAddNewTaskToReadyList+0xbc>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d207      	bcs.n	80104b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80104a4:	4b0b      	ldr	r3, [pc, #44]	@ (80104d4 <prvAddNewTaskToReadyList+0xd0>)
 80104a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104aa:	601a      	str	r2, [r3, #0]
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	2000198c 	.word	0x2000198c
 80104c0:	2000188c 	.word	0x2000188c
 80104c4:	20001998 	.word	0x20001998
 80104c8:	200019a8 	.word	0x200019a8
 80104cc:	20001994 	.word	0x20001994
 80104d0:	20001890 	.word	0x20001890
 80104d4:	e000ed04 	.word	0xe000ed04

080104d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08a      	sub	sp, #40	@ 0x28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80104e2:	2300      	movs	r3, #0
 80104e4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10b      	bne.n	8010504 <vTaskDelayUntil+0x2c>
	__asm volatile
 80104ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	617b      	str	r3, [r7, #20]
}
 80104fe:	bf00      	nop
 8010500:	bf00      	nop
 8010502:	e7fd      	b.n	8010500 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d10b      	bne.n	8010522 <vTaskDelayUntil+0x4a>
	__asm volatile
 801050a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050e:	f383 8811 	msr	BASEPRI, r3
 8010512:	f3bf 8f6f 	isb	sy
 8010516:	f3bf 8f4f 	dsb	sy
 801051a:	613b      	str	r3, [r7, #16]
}
 801051c:	bf00      	nop
 801051e:	bf00      	nop
 8010520:	e7fd      	b.n	801051e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8010522:	4b2a      	ldr	r3, [pc, #168]	@ (80105cc <vTaskDelayUntil+0xf4>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00b      	beq.n	8010542 <vTaskDelayUntil+0x6a>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	60fb      	str	r3, [r7, #12]
}
 801053c:	bf00      	nop
 801053e:	bf00      	nop
 8010540:	e7fd      	b.n	801053e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010542:	f000 f965 	bl	8010810 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010546:	4b22      	ldr	r3, [pc, #136]	@ (80105d0 <vTaskDelayUntil+0xf8>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	4413      	add	r3, r2
 8010554:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	6a3a      	ldr	r2, [r7, #32]
 801055c:	429a      	cmp	r2, r3
 801055e:	d20b      	bcs.n	8010578 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	69fa      	ldr	r2, [r7, #28]
 8010566:	429a      	cmp	r2, r3
 8010568:	d211      	bcs.n	801058e <vTaskDelayUntil+0xb6>
 801056a:	69fa      	ldr	r2, [r7, #28]
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	429a      	cmp	r2, r3
 8010570:	d90d      	bls.n	801058e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010572:	2301      	movs	r3, #1
 8010574:	627b      	str	r3, [r7, #36]	@ 0x24
 8010576:	e00a      	b.n	801058e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	69fa      	ldr	r2, [r7, #28]
 801057e:	429a      	cmp	r2, r3
 8010580:	d303      	bcc.n	801058a <vTaskDelayUntil+0xb2>
 8010582:	69fa      	ldr	r2, [r7, #28]
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	429a      	cmp	r2, r3
 8010588:	d901      	bls.n	801058e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801058a:	2301      	movs	r3, #1
 801058c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	69fa      	ldr	r2, [r7, #28]
 8010592:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801059a:	69fa      	ldr	r2, [r7, #28]
 801059c:	6a3b      	ldr	r3, [r7, #32]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2100      	movs	r1, #0
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 fe9a 	bl	80112dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80105a8:	f000 f940 	bl	801082c <xTaskResumeAll>
 80105ac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d107      	bne.n	80105c4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80105b4:	4b07      	ldr	r3, [pc, #28]	@ (80105d4 <vTaskDelayUntil+0xfc>)
 80105b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105c4:	bf00      	nop
 80105c6:	3728      	adds	r7, #40	@ 0x28
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	200019b4 	.word	0x200019b4
 80105d0:	20001990 	.word	0x20001990
 80105d4:	e000ed04 	.word	0xe000ed04

080105d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80105e0:	2300      	movs	r3, #0
 80105e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d018      	beq.n	801061c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80105ea:	4b14      	ldr	r3, [pc, #80]	@ (801063c <vTaskDelay+0x64>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00b      	beq.n	801060a <vTaskDelay+0x32>
	__asm volatile
 80105f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f6:	f383 8811 	msr	BASEPRI, r3
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	60bb      	str	r3, [r7, #8]
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop
 8010608:	e7fd      	b.n	8010606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801060a:	f000 f901 	bl	8010810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801060e:	2100      	movs	r1, #0
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fe63 	bl	80112dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010616:	f000 f909 	bl	801082c <xTaskResumeAll>
 801061a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d107      	bne.n	8010632 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010622:	4b07      	ldr	r3, [pc, #28]	@ (8010640 <vTaskDelay+0x68>)
 8010624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010632:	bf00      	nop
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	200019b4 	.word	0x200019b4
 8010640:	e000ed04 	.word	0xe000ed04

08010644 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801064c:	f000 ffdc 	bl	8011608 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d102      	bne.n	801065c <vTaskSuspend+0x18>
 8010656:	4b3d      	ldr	r3, [pc, #244]	@ (801074c <vTaskSuspend+0x108>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	e000      	b.n	801065e <vTaskSuspend+0x1a>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3304      	adds	r3, #4
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff f830 	bl	800f6ca <uxListRemove>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d115      	bne.n	801069c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010674:	4936      	ldr	r1, [pc, #216]	@ (8010750 <vTaskSuspend+0x10c>)
 8010676:	4613      	mov	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d10a      	bne.n	801069c <vTaskSuspend+0x58>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801068a:	2201      	movs	r2, #1
 801068c:	fa02 f303 	lsl.w	r3, r2, r3
 8010690:	43da      	mvns	r2, r3
 8010692:	4b30      	ldr	r3, [pc, #192]	@ (8010754 <vTaskSuspend+0x110>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4013      	ands	r3, r2
 8010698:	4a2e      	ldr	r2, [pc, #184]	@ (8010754 <vTaskSuspend+0x110>)
 801069a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d004      	beq.n	80106ae <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	3318      	adds	r3, #24
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff f80e 	bl	800f6ca <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3304      	adds	r3, #4
 80106b2:	4619      	mov	r1, r3
 80106b4:	4828      	ldr	r0, [pc, #160]	@ (8010758 <vTaskSuspend+0x114>)
 80106b6:	f7fe ffab 	bl	800f610 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d103      	bne.n	80106ce <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80106ce:	f000 ffcd 	bl	801166c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80106d2:	4b22      	ldr	r3, [pc, #136]	@ (801075c <vTaskSuspend+0x118>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d005      	beq.n	80106e6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80106da:	f000 ff95 	bl	8011608 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80106de:	f000 fc1d 	bl	8010f1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80106e2:	f000 ffc3 	bl	801166c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80106e6:	4b19      	ldr	r3, [pc, #100]	@ (801074c <vTaskSuspend+0x108>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d128      	bne.n	8010742 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80106f0:	4b1a      	ldr	r3, [pc, #104]	@ (801075c <vTaskSuspend+0x118>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d018      	beq.n	801072a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80106f8:	4b19      	ldr	r3, [pc, #100]	@ (8010760 <vTaskSuspend+0x11c>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00b      	beq.n	8010718 <vTaskSuspend+0xd4>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	60bb      	str	r3, [r7, #8]
}
 8010712:	bf00      	nop
 8010714:	bf00      	nop
 8010716:	e7fd      	b.n	8010714 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8010718:	4b12      	ldr	r3, [pc, #72]	@ (8010764 <vTaskSuspend+0x120>)
 801071a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801071e:	601a      	str	r2, [r3, #0]
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010728:	e00b      	b.n	8010742 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801072a:	4b0b      	ldr	r3, [pc, #44]	@ (8010758 <vTaskSuspend+0x114>)
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	4b0e      	ldr	r3, [pc, #56]	@ (8010768 <vTaskSuspend+0x124>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	429a      	cmp	r2, r3
 8010734:	d103      	bne.n	801073e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8010736:	4b05      	ldr	r3, [pc, #20]	@ (801074c <vTaskSuspend+0x108>)
 8010738:	2200      	movs	r2, #0
 801073a:	601a      	str	r2, [r3, #0]
	}
 801073c:	e001      	b.n	8010742 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 801073e:	f000 f9dd 	bl	8010afc <vTaskSwitchContext>
	}
 8010742:	bf00      	nop
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	2000188c 	.word	0x2000188c
 8010750:	20001890 	.word	0x20001890
 8010754:	20001994 	.word	0x20001994
 8010758:	20001978 	.word	0x20001978
 801075c:	20001998 	.word	0x20001998
 8010760:	200019b4 	.word	0x200019b4
 8010764:	e000ed04 	.word	0xe000ed04
 8010768:	2000198c 	.word	0x2000198c

0801076c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010772:	4b1f      	ldr	r3, [pc, #124]	@ (80107f0 <vTaskStartScheduler+0x84>)
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	2300      	movs	r3, #0
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	2300      	movs	r3, #0
 801077c:	2280      	movs	r2, #128	@ 0x80
 801077e:	491d      	ldr	r1, [pc, #116]	@ (80107f4 <vTaskStartScheduler+0x88>)
 8010780:	481d      	ldr	r0, [pc, #116]	@ (80107f8 <vTaskStartScheduler+0x8c>)
 8010782:	f7ff fd55 	bl	8010230 <xTaskCreate>
 8010786:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2b01      	cmp	r3, #1
 801078c:	d11b      	bne.n	80107c6 <vTaskStartScheduler+0x5a>
	__asm volatile
 801078e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	60bb      	str	r3, [r7, #8]
}
 80107a0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107a2:	4b16      	ldr	r3, [pc, #88]	@ (80107fc <vTaskStartScheduler+0x90>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	334c      	adds	r3, #76	@ 0x4c
 80107a8:	4a15      	ldr	r2, [pc, #84]	@ (8010800 <vTaskStartScheduler+0x94>)
 80107aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80107ac:	4b15      	ldr	r3, [pc, #84]	@ (8010804 <vTaskStartScheduler+0x98>)
 80107ae:	f04f 32ff 	mov.w	r2, #4294967295
 80107b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80107b4:	4b14      	ldr	r3, [pc, #80]	@ (8010808 <vTaskStartScheduler+0x9c>)
 80107b6:	2201      	movs	r2, #1
 80107b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107ba:	4b14      	ldr	r3, [pc, #80]	@ (801080c <vTaskStartScheduler+0xa0>)
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80107c0:	f000 fe7e 	bl	80114c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80107c4:	e00f      	b.n	80107e6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107cc:	d10b      	bne.n	80107e6 <vTaskStartScheduler+0x7a>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	607b      	str	r3, [r7, #4]
}
 80107e0:	bf00      	nop
 80107e2:	bf00      	nop
 80107e4:	e7fd      	b.n	80107e2 <vTaskStartScheduler+0x76>
}
 80107e6:	bf00      	nop
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	200019b0 	.word	0x200019b0
 80107f4:	08016da8 	.word	0x08016da8
 80107f8:	08010de5 	.word	0x08010de5
 80107fc:	2000188c 	.word	0x2000188c
 8010800:	20000054 	.word	0x20000054
 8010804:	200019ac 	.word	0x200019ac
 8010808:	20001998 	.word	0x20001998
 801080c:	20001990 	.word	0x20001990

08010810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010810:	b480      	push	{r7}
 8010812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010814:	4b04      	ldr	r3, [pc, #16]	@ (8010828 <vTaskSuspendAll+0x18>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	3301      	adds	r3, #1
 801081a:	4a03      	ldr	r2, [pc, #12]	@ (8010828 <vTaskSuspendAll+0x18>)
 801081c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801081e:	bf00      	nop
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	200019b4 	.word	0x200019b4

0801082c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010832:	2300      	movs	r3, #0
 8010834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010836:	2300      	movs	r3, #0
 8010838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801083a:	4b42      	ldr	r3, [pc, #264]	@ (8010944 <xTaskResumeAll+0x118>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d10b      	bne.n	801085a <xTaskResumeAll+0x2e>
	__asm volatile
 8010842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	603b      	str	r3, [r7, #0]
}
 8010854:	bf00      	nop
 8010856:	bf00      	nop
 8010858:	e7fd      	b.n	8010856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801085a:	f000 fed5 	bl	8011608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801085e:	4b39      	ldr	r3, [pc, #228]	@ (8010944 <xTaskResumeAll+0x118>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3b01      	subs	r3, #1
 8010864:	4a37      	ldr	r2, [pc, #220]	@ (8010944 <xTaskResumeAll+0x118>)
 8010866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010868:	4b36      	ldr	r3, [pc, #216]	@ (8010944 <xTaskResumeAll+0x118>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d161      	bne.n	8010934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010870:	4b35      	ldr	r3, [pc, #212]	@ (8010948 <xTaskResumeAll+0x11c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d05d      	beq.n	8010934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010878:	e02e      	b.n	80108d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801087a:	4b34      	ldr	r3, [pc, #208]	@ (801094c <xTaskResumeAll+0x120>)
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3318      	adds	r3, #24
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe ff1f 	bl	800f6ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	3304      	adds	r3, #4
 8010890:	4618      	mov	r0, r3
 8010892:	f7fe ff1a 	bl	800f6ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801089a:	2201      	movs	r2, #1
 801089c:	409a      	lsls	r2, r3
 801089e:	4b2c      	ldr	r3, [pc, #176]	@ (8010950 <xTaskResumeAll+0x124>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	4a2a      	ldr	r2, [pc, #168]	@ (8010950 <xTaskResumeAll+0x124>)
 80108a6:	6013      	str	r3, [r2, #0]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108ac:	4613      	mov	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	4413      	add	r3, r2
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	4a27      	ldr	r2, [pc, #156]	@ (8010954 <xTaskResumeAll+0x128>)
 80108b6:	441a      	add	r2, r3
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3304      	adds	r3, #4
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7fe fea6 	bl	800f610 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c8:	4b23      	ldr	r3, [pc, #140]	@ (8010958 <xTaskResumeAll+0x12c>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d302      	bcc.n	80108d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80108d2:	4b22      	ldr	r3, [pc, #136]	@ (801095c <xTaskResumeAll+0x130>)
 80108d4:	2201      	movs	r2, #1
 80108d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108d8:	4b1c      	ldr	r3, [pc, #112]	@ (801094c <xTaskResumeAll+0x120>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d1cc      	bne.n	801087a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108e6:	f000 fb19 	bl	8010f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80108ea:	4b1d      	ldr	r3, [pc, #116]	@ (8010960 <xTaskResumeAll+0x134>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d010      	beq.n	8010918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80108f6:	f000 f847 	bl	8010988 <xTaskIncrementTick>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010900:	4b16      	ldr	r3, [pc, #88]	@ (801095c <xTaskResumeAll+0x130>)
 8010902:	2201      	movs	r2, #1
 8010904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	3b01      	subs	r3, #1
 801090a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d1f1      	bne.n	80108f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010912:	4b13      	ldr	r3, [pc, #76]	@ (8010960 <xTaskResumeAll+0x134>)
 8010914:	2200      	movs	r2, #0
 8010916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010918:	4b10      	ldr	r3, [pc, #64]	@ (801095c <xTaskResumeAll+0x130>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010920:	2301      	movs	r3, #1
 8010922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010924:	4b0f      	ldr	r3, [pc, #60]	@ (8010964 <xTaskResumeAll+0x138>)
 8010926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801092a:	601a      	str	r2, [r3, #0]
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010934:	f000 fe9a 	bl	801166c <vPortExitCritical>

	return xAlreadyYielded;
 8010938:	68bb      	ldr	r3, [r7, #8]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	200019b4 	.word	0x200019b4
 8010948:	2000198c 	.word	0x2000198c
 801094c:	2000194c 	.word	0x2000194c
 8010950:	20001994 	.word	0x20001994
 8010954:	20001890 	.word	0x20001890
 8010958:	2000188c 	.word	0x2000188c
 801095c:	200019a0 	.word	0x200019a0
 8010960:	2000199c 	.word	0x2000199c
 8010964:	e000ed04 	.word	0xe000ed04

08010968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801096e:	4b05      	ldr	r3, [pc, #20]	@ (8010984 <xTaskGetTickCount+0x1c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010974:	687b      	ldr	r3, [r7, #4]
}
 8010976:	4618      	mov	r0, r3
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	20001990 	.word	0x20001990

08010988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801098e:	2300      	movs	r3, #0
 8010990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010992:	4b4f      	ldr	r3, [pc, #316]	@ (8010ad0 <xTaskIncrementTick+0x148>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f040 808f 	bne.w	8010aba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801099c:	4b4d      	ldr	r3, [pc, #308]	@ (8010ad4 <xTaskIncrementTick+0x14c>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3301      	adds	r3, #1
 80109a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80109a4:	4a4b      	ldr	r2, [pc, #300]	@ (8010ad4 <xTaskIncrementTick+0x14c>)
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d121      	bne.n	80109f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80109b0:	4b49      	ldr	r3, [pc, #292]	@ (8010ad8 <xTaskIncrementTick+0x150>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00b      	beq.n	80109d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	603b      	str	r3, [r7, #0]
}
 80109cc:	bf00      	nop
 80109ce:	bf00      	nop
 80109d0:	e7fd      	b.n	80109ce <xTaskIncrementTick+0x46>
 80109d2:	4b41      	ldr	r3, [pc, #260]	@ (8010ad8 <xTaskIncrementTick+0x150>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	60fb      	str	r3, [r7, #12]
 80109d8:	4b40      	ldr	r3, [pc, #256]	@ (8010adc <xTaskIncrementTick+0x154>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a3e      	ldr	r2, [pc, #248]	@ (8010ad8 <xTaskIncrementTick+0x150>)
 80109de:	6013      	str	r3, [r2, #0]
 80109e0:	4a3e      	ldr	r2, [pc, #248]	@ (8010adc <xTaskIncrementTick+0x154>)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6013      	str	r3, [r2, #0]
 80109e6:	4b3e      	ldr	r3, [pc, #248]	@ (8010ae0 <xTaskIncrementTick+0x158>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	3301      	adds	r3, #1
 80109ec:	4a3c      	ldr	r2, [pc, #240]	@ (8010ae0 <xTaskIncrementTick+0x158>)
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	f000 fa94 	bl	8010f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80109f4:	4b3b      	ldr	r3, [pc, #236]	@ (8010ae4 <xTaskIncrementTick+0x15c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d348      	bcc.n	8010a90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109fe:	4b36      	ldr	r3, [pc, #216]	@ (8010ad8 <xTaskIncrementTick+0x150>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d104      	bne.n	8010a12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a08:	4b36      	ldr	r3, [pc, #216]	@ (8010ae4 <xTaskIncrementTick+0x15c>)
 8010a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a0e:	601a      	str	r2, [r3, #0]
					break;
 8010a10:	e03e      	b.n	8010a90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a12:	4b31      	ldr	r3, [pc, #196]	@ (8010ad8 <xTaskIncrementTick+0x150>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d203      	bcs.n	8010a32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8010ae4 <xTaskIncrementTick+0x15c>)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a30:	e02e      	b.n	8010a90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	3304      	adds	r3, #4
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fe fe47 	bl	800f6ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d004      	beq.n	8010a4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	3318      	adds	r3, #24
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe fe3e 	bl	800f6ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a52:	2201      	movs	r2, #1
 8010a54:	409a      	lsls	r2, r3
 8010a56:	4b24      	ldr	r3, [pc, #144]	@ (8010ae8 <xTaskIncrementTick+0x160>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	4a22      	ldr	r2, [pc, #136]	@ (8010ae8 <xTaskIncrementTick+0x160>)
 8010a5e:	6013      	str	r3, [r2, #0]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a64:	4613      	mov	r3, r2
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	4413      	add	r3, r2
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8010aec <xTaskIncrementTick+0x164>)
 8010a6e:	441a      	add	r2, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	3304      	adds	r3, #4
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f7fe fdca 	bl	800f610 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a80:	4b1b      	ldr	r3, [pc, #108]	@ (8010af0 <xTaskIncrementTick+0x168>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d3b9      	bcc.n	80109fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a8e:	e7b6      	b.n	80109fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a90:	4b17      	ldr	r3, [pc, #92]	@ (8010af0 <xTaskIncrementTick+0x168>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a96:	4915      	ldr	r1, [pc, #84]	@ (8010aec <xTaskIncrementTick+0x164>)
 8010a98:	4613      	mov	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	440b      	add	r3, r1
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d901      	bls.n	8010aac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010aac:	4b11      	ldr	r3, [pc, #68]	@ (8010af4 <xTaskIncrementTick+0x16c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d007      	beq.n	8010ac4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	e004      	b.n	8010ac4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010aba:	4b0f      	ldr	r3, [pc, #60]	@ (8010af8 <xTaskIncrementTick+0x170>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8010af8 <xTaskIncrementTick+0x170>)
 8010ac2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010ac4:	697b      	ldr	r3, [r7, #20]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	200019b4 	.word	0x200019b4
 8010ad4:	20001990 	.word	0x20001990
 8010ad8:	20001944 	.word	0x20001944
 8010adc:	20001948 	.word	0x20001948
 8010ae0:	200019a4 	.word	0x200019a4
 8010ae4:	200019ac 	.word	0x200019ac
 8010ae8:	20001994 	.word	0x20001994
 8010aec:	20001890 	.word	0x20001890
 8010af0:	2000188c 	.word	0x2000188c
 8010af4:	200019a0 	.word	0x200019a0
 8010af8:	2000199c 	.word	0x2000199c

08010afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010afc:	b480      	push	{r7}
 8010afe:	b087      	sub	sp, #28
 8010b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010b02:	4b2a      	ldr	r3, [pc, #168]	@ (8010bac <vTaskSwitchContext+0xb0>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010b0a:	4b29      	ldr	r3, [pc, #164]	@ (8010bb0 <vTaskSwitchContext+0xb4>)
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010b10:	e045      	b.n	8010b9e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8010b12:	4b27      	ldr	r3, [pc, #156]	@ (8010bb0 <vTaskSwitchContext+0xb4>)
 8010b14:	2200      	movs	r2, #0
 8010b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b18:	4b26      	ldr	r3, [pc, #152]	@ (8010bb4 <vTaskSwitchContext+0xb8>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	fab3 f383 	clz	r3, r3
 8010b24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010b26:	7afb      	ldrb	r3, [r7, #11]
 8010b28:	f1c3 031f 	rsb	r3, r3, #31
 8010b2c:	617b      	str	r3, [r7, #20]
 8010b2e:	4922      	ldr	r1, [pc, #136]	@ (8010bb8 <vTaskSwitchContext+0xbc>)
 8010b30:	697a      	ldr	r2, [r7, #20]
 8010b32:	4613      	mov	r3, r2
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	4413      	add	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	440b      	add	r3, r1
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10b      	bne.n	8010b5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	607b      	str	r3, [r7, #4]
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	e7fd      	b.n	8010b56 <vTaskSwitchContext+0x5a>
 8010b5a:	697a      	ldr	r2, [r7, #20]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	4a14      	ldr	r2, [pc, #80]	@ (8010bb8 <vTaskSwitchContext+0xbc>)
 8010b66:	4413      	add	r3, r2
 8010b68:	613b      	str	r3, [r7, #16]
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	685a      	ldr	r2, [r3, #4]
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	605a      	str	r2, [r3, #4]
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	3308      	adds	r3, #8
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d104      	bne.n	8010b8a <vTaskSwitchContext+0x8e>
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	685a      	ldr	r2, [r3, #4]
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	605a      	str	r2, [r3, #4]
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	4a0a      	ldr	r2, [pc, #40]	@ (8010bbc <vTaskSwitchContext+0xc0>)
 8010b92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b94:	4b09      	ldr	r3, [pc, #36]	@ (8010bbc <vTaskSwitchContext+0xc0>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	334c      	adds	r3, #76	@ 0x4c
 8010b9a:	4a09      	ldr	r2, [pc, #36]	@ (8010bc0 <vTaskSwitchContext+0xc4>)
 8010b9c:	6013      	str	r3, [r2, #0]
}
 8010b9e:	bf00      	nop
 8010ba0:	371c      	adds	r7, #28
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	200019b4 	.word	0x200019b4
 8010bb0:	200019a0 	.word	0x200019a0
 8010bb4:	20001994 	.word	0x20001994
 8010bb8:	20001890 	.word	0x20001890
 8010bbc:	2000188c 	.word	0x2000188c
 8010bc0:	20000054 	.word	0x20000054

08010bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d10b      	bne.n	8010bec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd8:	f383 8811 	msr	BASEPRI, r3
 8010bdc:	f3bf 8f6f 	isb	sy
 8010be0:	f3bf 8f4f 	dsb	sy
 8010be4:	60fb      	str	r3, [r7, #12]
}
 8010be6:	bf00      	nop
 8010be8:	bf00      	nop
 8010bea:	e7fd      	b.n	8010be8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bec:	4b07      	ldr	r3, [pc, #28]	@ (8010c0c <vTaskPlaceOnEventList+0x48>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	3318      	adds	r3, #24
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7fe fd2f 	bl	800f658 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	6838      	ldr	r0, [r7, #0]
 8010bfe:	f000 fb6d 	bl	80112dc <prvAddCurrentTaskToDelayedList>
}
 8010c02:	bf00      	nop
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	2000188c 	.word	0x2000188c

08010c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b086      	sub	sp, #24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10b      	bne.n	8010c3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	60fb      	str	r3, [r7, #12]
}
 8010c38:	bf00      	nop
 8010c3a:	bf00      	nop
 8010c3c:	e7fd      	b.n	8010c3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	3318      	adds	r3, #24
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fd41 	bl	800f6ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c48:	4b1d      	ldr	r3, [pc, #116]	@ (8010cc0 <xTaskRemoveFromEventList+0xb0>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d11c      	bne.n	8010c8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	3304      	adds	r3, #4
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7fe fd38 	bl	800f6ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c5e:	2201      	movs	r2, #1
 8010c60:	409a      	lsls	r2, r3
 8010c62:	4b18      	ldr	r3, [pc, #96]	@ (8010cc4 <xTaskRemoveFromEventList+0xb4>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	4a16      	ldr	r2, [pc, #88]	@ (8010cc4 <xTaskRemoveFromEventList+0xb4>)
 8010c6a:	6013      	str	r3, [r2, #0]
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c70:	4613      	mov	r3, r2
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	4a13      	ldr	r2, [pc, #76]	@ (8010cc8 <xTaskRemoveFromEventList+0xb8>)
 8010c7a:	441a      	add	r2, r3
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	3304      	adds	r3, #4
 8010c80:	4619      	mov	r1, r3
 8010c82:	4610      	mov	r0, r2
 8010c84:	f7fe fcc4 	bl	800f610 <vListInsertEnd>
 8010c88:	e005      	b.n	8010c96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	3318      	adds	r3, #24
 8010c8e:	4619      	mov	r1, r3
 8010c90:	480e      	ldr	r0, [pc, #56]	@ (8010ccc <xTaskRemoveFromEventList+0xbc>)
 8010c92:	f7fe fcbd 	bl	800f610 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd0 <xTaskRemoveFromEventList+0xc0>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d905      	bls.n	8010cb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8010cd4 <xTaskRemoveFromEventList+0xc4>)
 8010caa:	2201      	movs	r2, #1
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	e001      	b.n	8010cb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010cb4:	697b      	ldr	r3, [r7, #20]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	200019b4 	.word	0x200019b4
 8010cc4:	20001994 	.word	0x20001994
 8010cc8:	20001890 	.word	0x20001890
 8010ccc:	2000194c 	.word	0x2000194c
 8010cd0:	2000188c 	.word	0x2000188c
 8010cd4:	200019a0 	.word	0x200019a0

08010cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ce0:	4b06      	ldr	r3, [pc, #24]	@ (8010cfc <vTaskInternalSetTimeOutState+0x24>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ce8:	4b05      	ldr	r3, [pc, #20]	@ (8010d00 <vTaskInternalSetTimeOutState+0x28>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	605a      	str	r2, [r3, #4]
}
 8010cf0:	bf00      	nop
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	200019a4 	.word	0x200019a4
 8010d00:	20001990 	.word	0x20001990

08010d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b088      	sub	sp, #32
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10b      	bne.n	8010d2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d18:	f383 8811 	msr	BASEPRI, r3
 8010d1c:	f3bf 8f6f 	isb	sy
 8010d20:	f3bf 8f4f 	dsb	sy
 8010d24:	613b      	str	r3, [r7, #16]
}
 8010d26:	bf00      	nop
 8010d28:	bf00      	nop
 8010d2a:	e7fd      	b.n	8010d28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10b      	bne.n	8010d4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d36:	f383 8811 	msr	BASEPRI, r3
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	60fb      	str	r3, [r7, #12]
}
 8010d44:	bf00      	nop
 8010d46:	bf00      	nop
 8010d48:	e7fd      	b.n	8010d46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010d4a:	f000 fc5d 	bl	8011608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8010dc4 <xTaskCheckForTimeOut+0xc0>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	69ba      	ldr	r2, [r7, #24]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d66:	d102      	bne.n	8010d6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	61fb      	str	r3, [r7, #28]
 8010d6c:	e023      	b.n	8010db6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	4b15      	ldr	r3, [pc, #84]	@ (8010dc8 <xTaskCheckForTimeOut+0xc4>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d007      	beq.n	8010d8a <xTaskCheckForTimeOut+0x86>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d302      	bcc.n	8010d8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d84:	2301      	movs	r3, #1
 8010d86:	61fb      	str	r3, [r7, #28]
 8010d88:	e015      	b.n	8010db6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d20b      	bcs.n	8010dac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	1ad2      	subs	r2, r2, r3
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff ff99 	bl	8010cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010da6:	2300      	movs	r3, #0
 8010da8:	61fb      	str	r3, [r7, #28]
 8010daa:	e004      	b.n	8010db6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010db2:	2301      	movs	r3, #1
 8010db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010db6:	f000 fc59 	bl	801166c <vPortExitCritical>

	return xReturn;
 8010dba:	69fb      	ldr	r3, [r7, #28]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3720      	adds	r7, #32
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	20001990 	.word	0x20001990
 8010dc8:	200019a4 	.word	0x200019a4

08010dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010dcc:	b480      	push	{r7}
 8010dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010dd0:	4b03      	ldr	r3, [pc, #12]	@ (8010de0 <vTaskMissedYield+0x14>)
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]
}
 8010dd6:	bf00      	nop
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr
 8010de0:	200019a0 	.word	0x200019a0

08010de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010dec:	f000 f852 	bl	8010e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010df0:	4b06      	ldr	r3, [pc, #24]	@ (8010e0c <prvIdleTask+0x28>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d9f9      	bls.n	8010dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8010df8:	4b05      	ldr	r3, [pc, #20]	@ (8010e10 <prvIdleTask+0x2c>)
 8010dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dfe:	601a      	str	r2, [r3, #0]
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010e08:	e7f0      	b.n	8010dec <prvIdleTask+0x8>
 8010e0a:	bf00      	nop
 8010e0c:	20001890 	.word	0x20001890
 8010e10:	e000ed04 	.word	0xe000ed04

08010e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	607b      	str	r3, [r7, #4]
 8010e1e:	e00c      	b.n	8010e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	4613      	mov	r3, r2
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	4413      	add	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	4a12      	ldr	r2, [pc, #72]	@ (8010e74 <prvInitialiseTaskLists+0x60>)
 8010e2c:	4413      	add	r3, r2
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fe fbc1 	bl	800f5b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3301      	adds	r3, #1
 8010e38:	607b      	str	r3, [r7, #4]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b06      	cmp	r3, #6
 8010e3e:	d9ef      	bls.n	8010e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010e40:	480d      	ldr	r0, [pc, #52]	@ (8010e78 <prvInitialiseTaskLists+0x64>)
 8010e42:	f7fe fbb8 	bl	800f5b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010e46:	480d      	ldr	r0, [pc, #52]	@ (8010e7c <prvInitialiseTaskLists+0x68>)
 8010e48:	f7fe fbb5 	bl	800f5b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010e4c:	480c      	ldr	r0, [pc, #48]	@ (8010e80 <prvInitialiseTaskLists+0x6c>)
 8010e4e:	f7fe fbb2 	bl	800f5b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e52:	480c      	ldr	r0, [pc, #48]	@ (8010e84 <prvInitialiseTaskLists+0x70>)
 8010e54:	f7fe fbaf 	bl	800f5b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e58:	480b      	ldr	r0, [pc, #44]	@ (8010e88 <prvInitialiseTaskLists+0x74>)
 8010e5a:	f7fe fbac 	bl	800f5b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e8c <prvInitialiseTaskLists+0x78>)
 8010e60:	4a05      	ldr	r2, [pc, #20]	@ (8010e78 <prvInitialiseTaskLists+0x64>)
 8010e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e64:	4b0a      	ldr	r3, [pc, #40]	@ (8010e90 <prvInitialiseTaskLists+0x7c>)
 8010e66:	4a05      	ldr	r2, [pc, #20]	@ (8010e7c <prvInitialiseTaskLists+0x68>)
 8010e68:	601a      	str	r2, [r3, #0]
}
 8010e6a:	bf00      	nop
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20001890 	.word	0x20001890
 8010e78:	2000191c 	.word	0x2000191c
 8010e7c:	20001930 	.word	0x20001930
 8010e80:	2000194c 	.word	0x2000194c
 8010e84:	20001960 	.word	0x20001960
 8010e88:	20001978 	.word	0x20001978
 8010e8c:	20001944 	.word	0x20001944
 8010e90:	20001948 	.word	0x20001948

08010e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e9a:	e019      	b.n	8010ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e9c:	f000 fbb4 	bl	8011608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ea0:	4b10      	ldr	r3, [pc, #64]	@ (8010ee4 <prvCheckTasksWaitingTermination+0x50>)
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	68db      	ldr	r3, [r3, #12]
 8010ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	3304      	adds	r3, #4
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fe fc0c 	bl	800f6ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ee8 <prvCheckTasksWaitingTermination+0x54>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3b01      	subs	r3, #1
 8010eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8010ee8 <prvCheckTasksWaitingTermination+0x54>)
 8010eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8010eec <prvCheckTasksWaitingTermination+0x58>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8010eec <prvCheckTasksWaitingTermination+0x58>)
 8010ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010ec6:	f000 fbd1 	bl	801166c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f810 	bl	8010ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ed0:	4b06      	ldr	r3, [pc, #24]	@ (8010eec <prvCheckTasksWaitingTermination+0x58>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e1      	bne.n	8010e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010ed8:	bf00      	nop
 8010eda:	bf00      	nop
 8010edc:	3708      	adds	r7, #8
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20001960 	.word	0x20001960
 8010ee8:	2000198c 	.word	0x2000198c
 8010eec:	20001974 	.word	0x20001974

08010ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	334c      	adds	r3, #76	@ 0x4c
 8010efc:	4618      	mov	r0, r3
 8010efe:	f001 fe71 	bl	8012be4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 fd6e 	bl	80119e8 <vPortFree>
			vPortFree( pxTCB );
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fd6b 	bl	80119e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
	...

08010f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f22:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <prvResetNextTaskUnblockTime+0x38>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d104      	bne.n	8010f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f58 <prvResetNextTaskUnblockTime+0x3c>)
 8010f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010f34:	e008      	b.n	8010f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f36:	4b07      	ldr	r3, [pc, #28]	@ (8010f54 <prvResetNextTaskUnblockTime+0x38>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	4a04      	ldr	r2, [pc, #16]	@ (8010f58 <prvResetNextTaskUnblockTime+0x3c>)
 8010f46:	6013      	str	r3, [r2, #0]
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	20001944 	.word	0x20001944
 8010f58:	200019ac 	.word	0x200019ac

08010f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f62:	4b0b      	ldr	r3, [pc, #44]	@ (8010f90 <xTaskGetSchedulerState+0x34>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d102      	bne.n	8010f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	607b      	str	r3, [r7, #4]
 8010f6e:	e008      	b.n	8010f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f70:	4b08      	ldr	r3, [pc, #32]	@ (8010f94 <xTaskGetSchedulerState+0x38>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f78:	2302      	movs	r3, #2
 8010f7a:	607b      	str	r3, [r7, #4]
 8010f7c:	e001      	b.n	8010f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f82:	687b      	ldr	r3, [r7, #4]
	}
 8010f84:	4618      	mov	r0, r3
 8010f86:	370c      	adds	r7, #12
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	20001998 	.word	0x20001998
 8010f94:	200019b4 	.word	0x200019b4

08010f98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d05e      	beq.n	801106c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fb2:	4b31      	ldr	r3, [pc, #196]	@ (8011078 <xTaskPriorityInherit+0xe0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d24e      	bcs.n	801105a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	699b      	ldr	r3, [r3, #24]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	db06      	blt.n	8010fd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8011078 <xTaskPriorityInherit+0xe0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fca:	f1c3 0207 	rsb	r2, r3, #7
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	6959      	ldr	r1, [r3, #20]
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fda:	4613      	mov	r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4a26      	ldr	r2, [pc, #152]	@ (801107c <xTaskPriorityInherit+0xe4>)
 8010fe4:	4413      	add	r3, r2
 8010fe6:	4299      	cmp	r1, r3
 8010fe8:	d12f      	bne.n	801104a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	3304      	adds	r3, #4
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fe fb6b 	bl	800f6ca <uxListRemove>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d10a      	bne.n	8011010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ffe:	2201      	movs	r2, #1
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	43da      	mvns	r2, r3
 8011006:	4b1e      	ldr	r3, [pc, #120]	@ (8011080 <xTaskPriorityInherit+0xe8>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4013      	ands	r3, r2
 801100c:	4a1c      	ldr	r2, [pc, #112]	@ (8011080 <xTaskPriorityInherit+0xe8>)
 801100e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011010:	4b19      	ldr	r3, [pc, #100]	@ (8011078 <xTaskPriorityInherit+0xe0>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801101e:	2201      	movs	r2, #1
 8011020:	409a      	lsls	r2, r3
 8011022:	4b17      	ldr	r3, [pc, #92]	@ (8011080 <xTaskPriorityInherit+0xe8>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4313      	orrs	r3, r2
 8011028:	4a15      	ldr	r2, [pc, #84]	@ (8011080 <xTaskPriorityInherit+0xe8>)
 801102a:	6013      	str	r3, [r2, #0]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011030:	4613      	mov	r3, r2
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	4413      	add	r3, r2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4a10      	ldr	r2, [pc, #64]	@ (801107c <xTaskPriorityInherit+0xe4>)
 801103a:	441a      	add	r2, r3
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	3304      	adds	r3, #4
 8011040:	4619      	mov	r1, r3
 8011042:	4610      	mov	r0, r2
 8011044:	f7fe fae4 	bl	800f610 <vListInsertEnd>
 8011048:	e004      	b.n	8011054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801104a:	4b0b      	ldr	r3, [pc, #44]	@ (8011078 <xTaskPriorityInherit+0xe0>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011054:	2301      	movs	r3, #1
 8011056:	60fb      	str	r3, [r7, #12]
 8011058:	e008      	b.n	801106c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801105e:	4b06      	ldr	r3, [pc, #24]	@ (8011078 <xTaskPriorityInherit+0xe0>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d201      	bcs.n	801106c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011068:	2301      	movs	r3, #1
 801106a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801106c:	68fb      	ldr	r3, [r7, #12]
	}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	2000188c 	.word	0x2000188c
 801107c:	20001890 	.word	0x20001890
 8011080:	20001994 	.word	0x20001994

08011084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011090:	2300      	movs	r3, #0
 8011092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d070      	beq.n	801117c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801109a:	4b3b      	ldr	r3, [pc, #236]	@ (8011188 <xTaskPriorityDisinherit+0x104>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	693a      	ldr	r2, [r7, #16]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d00b      	beq.n	80110bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	60fb      	str	r3, [r7, #12]
}
 80110b6:	bf00      	nop
 80110b8:	bf00      	nop
 80110ba:	e7fd      	b.n	80110b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10b      	bne.n	80110dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80110c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c8:	f383 8811 	msr	BASEPRI, r3
 80110cc:	f3bf 8f6f 	isb	sy
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	60bb      	str	r3, [r7, #8]
}
 80110d6:	bf00      	nop
 80110d8:	bf00      	nop
 80110da:	e7fd      	b.n	80110d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110e0:	1e5a      	subs	r2, r3, #1
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d044      	beq.n	801117c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d140      	bne.n	801117c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fe fae3 	bl	800f6ca <uxListRemove>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d115      	bne.n	8011136 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801110e:	491f      	ldr	r1, [pc, #124]	@ (801118c <xTaskPriorityDisinherit+0x108>)
 8011110:	4613      	mov	r3, r2
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	4413      	add	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	440b      	add	r3, r1
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <xTaskPriorityDisinherit+0xb2>
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011124:	2201      	movs	r2, #1
 8011126:	fa02 f303 	lsl.w	r3, r2, r3
 801112a:	43da      	mvns	r2, r3
 801112c:	4b18      	ldr	r3, [pc, #96]	@ (8011190 <xTaskPriorityDisinherit+0x10c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4013      	ands	r3, r2
 8011132:	4a17      	ldr	r2, [pc, #92]	@ (8011190 <xTaskPriorityDisinherit+0x10c>)
 8011134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011142:	f1c3 0207 	rsb	r2, r3, #7
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801114e:	2201      	movs	r2, #1
 8011150:	409a      	lsls	r2, r3
 8011152:	4b0f      	ldr	r3, [pc, #60]	@ (8011190 <xTaskPriorityDisinherit+0x10c>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4313      	orrs	r3, r2
 8011158:	4a0d      	ldr	r2, [pc, #52]	@ (8011190 <xTaskPriorityDisinherit+0x10c>)
 801115a:	6013      	str	r3, [r2, #0]
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011160:	4613      	mov	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4a08      	ldr	r2, [pc, #32]	@ (801118c <xTaskPriorityDisinherit+0x108>)
 801116a:	441a      	add	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	3304      	adds	r3, #4
 8011170:	4619      	mov	r1, r3
 8011172:	4610      	mov	r0, r2
 8011174:	f7fe fa4c 	bl	800f610 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011178:	2301      	movs	r3, #1
 801117a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801117c:	697b      	ldr	r3, [r7, #20]
	}
 801117e:	4618      	mov	r0, r3
 8011180:	3718      	adds	r7, #24
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	2000188c 	.word	0x2000188c
 801118c:	20001890 	.word	0x20001890
 8011190:	20001994 	.word	0x20001994

08011194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80111a2:	2301      	movs	r3, #1
 80111a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d079      	beq.n	80112a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d10b      	bne.n	80111cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80111b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b8:	f383 8811 	msr	BASEPRI, r3
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	60fb      	str	r3, [r7, #12]
}
 80111c6:	bf00      	nop
 80111c8:	bf00      	nop
 80111ca:	e7fd      	b.n	80111c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111d0:	683a      	ldr	r2, [r7, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d902      	bls.n	80111dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	61fb      	str	r3, [r7, #28]
 80111da:	e002      	b.n	80111e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111e6:	69fa      	ldr	r2, [r7, #28]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d059      	beq.n	80112a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d154      	bne.n	80112a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80111f6:	4b2c      	ldr	r3, [pc, #176]	@ (80112a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	69ba      	ldr	r2, [r7, #24]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d10b      	bne.n	8011218 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	60bb      	str	r3, [r7, #8]
}
 8011212:	bf00      	nop
 8011214:	bf00      	nop
 8011216:	e7fd      	b.n	8011214 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	699b      	ldr	r3, [r3, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	db04      	blt.n	8011236 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	f1c3 0207 	rsb	r2, r3, #7
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	6959      	ldr	r1, [r3, #20]
 801123a:	693a      	ldr	r2, [r7, #16]
 801123c:	4613      	mov	r3, r2
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	4413      	add	r3, r2
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	4a19      	ldr	r2, [pc, #100]	@ (80112ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011246:	4413      	add	r3, r2
 8011248:	4299      	cmp	r1, r3
 801124a:	d129      	bne.n	80112a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	3304      	adds	r3, #4
 8011250:	4618      	mov	r0, r3
 8011252:	f7fe fa3a 	bl	800f6ca <uxListRemove>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10a      	bne.n	8011272 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011260:	2201      	movs	r2, #1
 8011262:	fa02 f303 	lsl.w	r3, r2, r3
 8011266:	43da      	mvns	r2, r3
 8011268:	4b11      	ldr	r3, [pc, #68]	@ (80112b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4013      	ands	r3, r2
 801126e:	4a10      	ldr	r2, [pc, #64]	@ (80112b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011276:	2201      	movs	r2, #1
 8011278:	409a      	lsls	r2, r3
 801127a:	4b0d      	ldr	r3, [pc, #52]	@ (80112b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4313      	orrs	r3, r2
 8011280:	4a0b      	ldr	r2, [pc, #44]	@ (80112b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011288:	4613      	mov	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	4413      	add	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4a06      	ldr	r2, [pc, #24]	@ (80112ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011292:	441a      	add	r2, r3
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	3304      	adds	r3, #4
 8011298:	4619      	mov	r1, r3
 801129a:	4610      	mov	r0, r2
 801129c:	f7fe f9b8 	bl	800f610 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112a0:	bf00      	nop
 80112a2:	3720      	adds	r7, #32
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	2000188c 	.word	0x2000188c
 80112ac:	20001890 	.word	0x20001890
 80112b0:	20001994 	.word	0x20001994

080112b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80112b4:	b480      	push	{r7}
 80112b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80112b8:	4b07      	ldr	r3, [pc, #28]	@ (80112d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d004      	beq.n	80112ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80112c0:	4b05      	ldr	r3, [pc, #20]	@ (80112d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80112c6:	3201      	adds	r2, #1
 80112c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80112ca:	4b03      	ldr	r3, [pc, #12]	@ (80112d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80112cc:	681b      	ldr	r3, [r3, #0]
	}
 80112ce:	4618      	mov	r0, r3
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr
 80112d8:	2000188c 	.word	0x2000188c

080112dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80112e6:	4b29      	ldr	r3, [pc, #164]	@ (801138c <prvAddCurrentTaskToDelayedList+0xb0>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112ec:	4b28      	ldr	r3, [pc, #160]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	3304      	adds	r3, #4
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fe f9e9 	bl	800f6ca <uxListRemove>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d10b      	bne.n	8011316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80112fe:	4b24      	ldr	r3, [pc, #144]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011304:	2201      	movs	r2, #1
 8011306:	fa02 f303 	lsl.w	r3, r2, r3
 801130a:	43da      	mvns	r2, r3
 801130c:	4b21      	ldr	r3, [pc, #132]	@ (8011394 <prvAddCurrentTaskToDelayedList+0xb8>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4013      	ands	r3, r2
 8011312:	4a20      	ldr	r2, [pc, #128]	@ (8011394 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131c:	d10a      	bne.n	8011334 <prvAddCurrentTaskToDelayedList+0x58>
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d007      	beq.n	8011334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011324:	4b1a      	ldr	r3, [pc, #104]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	3304      	adds	r3, #4
 801132a:	4619      	mov	r1, r3
 801132c:	481a      	ldr	r0, [pc, #104]	@ (8011398 <prvAddCurrentTaskToDelayedList+0xbc>)
 801132e:	f7fe f96f 	bl	800f610 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011332:	e026      	b.n	8011382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4413      	add	r3, r2
 801133a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801133c:	4b14      	ldr	r3, [pc, #80]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68ba      	ldr	r2, [r7, #8]
 8011342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	429a      	cmp	r2, r3
 801134a:	d209      	bcs.n	8011360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801134c:	4b13      	ldr	r3, [pc, #76]	@ (801139c <prvAddCurrentTaskToDelayedList+0xc0>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	4b0f      	ldr	r3, [pc, #60]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	3304      	adds	r3, #4
 8011356:	4619      	mov	r1, r3
 8011358:	4610      	mov	r0, r2
 801135a:	f7fe f97d 	bl	800f658 <vListInsert>
}
 801135e:	e010      	b.n	8011382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011360:	4b0f      	ldr	r3, [pc, #60]	@ (80113a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	4b0a      	ldr	r3, [pc, #40]	@ (8011390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	3304      	adds	r3, #4
 801136a:	4619      	mov	r1, r3
 801136c:	4610      	mov	r0, r2
 801136e:	f7fe f973 	bl	800f658 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011372:	4b0c      	ldr	r3, [pc, #48]	@ (80113a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	429a      	cmp	r2, r3
 801137a:	d202      	bcs.n	8011382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801137c:	4a09      	ldr	r2, [pc, #36]	@ (80113a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	6013      	str	r3, [r2, #0]
}
 8011382:	bf00      	nop
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	20001990 	.word	0x20001990
 8011390:	2000188c 	.word	0x2000188c
 8011394:	20001994 	.word	0x20001994
 8011398:	20001978 	.word	0x20001978
 801139c:	20001948 	.word	0x20001948
 80113a0:	20001944 	.word	0x20001944
 80113a4:	200019ac 	.word	0x200019ac

080113a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	3b04      	subs	r3, #4
 80113b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80113c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	3b04      	subs	r3, #4
 80113c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	f023 0201 	bic.w	r2, r3, #1
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	3b04      	subs	r3, #4
 80113d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80113d8:	4a0c      	ldr	r2, [pc, #48]	@ (801140c <pxPortInitialiseStack+0x64>)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	3b14      	subs	r3, #20
 80113e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	3b04      	subs	r3, #4
 80113ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f06f 0202 	mvn.w	r2, #2
 80113f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	3b20      	subs	r3, #32
 80113fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80113fe:	68fb      	ldr	r3, [r7, #12]
}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	08011411 	.word	0x08011411

08011410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801141a:	4b13      	ldr	r3, [pc, #76]	@ (8011468 <prvTaskExitError+0x58>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011422:	d00b      	beq.n	801143c <prvTaskExitError+0x2c>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	60fb      	str	r3, [r7, #12]
}
 8011436:	bf00      	nop
 8011438:	bf00      	nop
 801143a:	e7fd      	b.n	8011438 <prvTaskExitError+0x28>
	__asm volatile
 801143c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011440:	f383 8811 	msr	BASEPRI, r3
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	f3bf 8f4f 	dsb	sy
 801144c:	60bb      	str	r3, [r7, #8]
}
 801144e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011450:	bf00      	nop
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d0fc      	beq.n	8011452 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011458:	bf00      	nop
 801145a:	bf00      	nop
 801145c:	3714      	adds	r7, #20
 801145e:	46bd      	mov	sp, r7
 8011460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011464:	4770      	bx	lr
 8011466:	bf00      	nop
 8011468:	20000044 	.word	0x20000044
 801146c:	00000000 	.word	0x00000000

08011470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011470:	4b07      	ldr	r3, [pc, #28]	@ (8011490 <pxCurrentTCBConst2>)
 8011472:	6819      	ldr	r1, [r3, #0]
 8011474:	6808      	ldr	r0, [r1, #0]
 8011476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147a:	f380 8809 	msr	PSP, r0
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f04f 0000 	mov.w	r0, #0
 8011486:	f380 8811 	msr	BASEPRI, r0
 801148a:	4770      	bx	lr
 801148c:	f3af 8000 	nop.w

08011490 <pxCurrentTCBConst2>:
 8011490:	2000188c 	.word	0x2000188c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011494:	bf00      	nop
 8011496:	bf00      	nop

08011498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011498:	4808      	ldr	r0, [pc, #32]	@ (80114bc <prvPortStartFirstTask+0x24>)
 801149a:	6800      	ldr	r0, [r0, #0]
 801149c:	6800      	ldr	r0, [r0, #0]
 801149e:	f380 8808 	msr	MSP, r0
 80114a2:	f04f 0000 	mov.w	r0, #0
 80114a6:	f380 8814 	msr	CONTROL, r0
 80114aa:	b662      	cpsie	i
 80114ac:	b661      	cpsie	f
 80114ae:	f3bf 8f4f 	dsb	sy
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	df00      	svc	0
 80114b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80114ba:	bf00      	nop
 80114bc:	e000ed08 	.word	0xe000ed08

080114c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80114c6:	4b47      	ldr	r3, [pc, #284]	@ (80115e4 <xPortStartScheduler+0x124>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4a47      	ldr	r2, [pc, #284]	@ (80115e8 <xPortStartScheduler+0x128>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d10b      	bne.n	80114e8 <xPortStartScheduler+0x28>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	60fb      	str	r3, [r7, #12]
}
 80114e2:	bf00      	nop
 80114e4:	bf00      	nop
 80114e6:	e7fd      	b.n	80114e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80114e8:	4b3e      	ldr	r3, [pc, #248]	@ (80115e4 <xPortStartScheduler+0x124>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a3f      	ldr	r2, [pc, #252]	@ (80115ec <xPortStartScheduler+0x12c>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d10b      	bne.n	801150a <xPortStartScheduler+0x4a>
	__asm volatile
 80114f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f6:	f383 8811 	msr	BASEPRI, r3
 80114fa:	f3bf 8f6f 	isb	sy
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	613b      	str	r3, [r7, #16]
}
 8011504:	bf00      	nop
 8011506:	bf00      	nop
 8011508:	e7fd      	b.n	8011506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801150a:	4b39      	ldr	r3, [pc, #228]	@ (80115f0 <xPortStartScheduler+0x130>)
 801150c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	b2db      	uxtb	r3, r3
 8011514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	22ff      	movs	r2, #255	@ 0xff
 801151a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	b2db      	uxtb	r3, r3
 8011522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011524:	78fb      	ldrb	r3, [r7, #3]
 8011526:	b2db      	uxtb	r3, r3
 8011528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801152c:	b2da      	uxtb	r2, r3
 801152e:	4b31      	ldr	r3, [pc, #196]	@ (80115f4 <xPortStartScheduler+0x134>)
 8011530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011532:	4b31      	ldr	r3, [pc, #196]	@ (80115f8 <xPortStartScheduler+0x138>)
 8011534:	2207      	movs	r2, #7
 8011536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011538:	e009      	b.n	801154e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801153a:	4b2f      	ldr	r3, [pc, #188]	@ (80115f8 <xPortStartScheduler+0x138>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3b01      	subs	r3, #1
 8011540:	4a2d      	ldr	r2, [pc, #180]	@ (80115f8 <xPortStartScheduler+0x138>)
 8011542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011544:	78fb      	ldrb	r3, [r7, #3]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	b2db      	uxtb	r3, r3
 801154c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801154e:	78fb      	ldrb	r3, [r7, #3]
 8011550:	b2db      	uxtb	r3, r3
 8011552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011556:	2b80      	cmp	r3, #128	@ 0x80
 8011558:	d0ef      	beq.n	801153a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801155a:	4b27      	ldr	r3, [pc, #156]	@ (80115f8 <xPortStartScheduler+0x138>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f1c3 0307 	rsb	r3, r3, #7
 8011562:	2b04      	cmp	r3, #4
 8011564:	d00b      	beq.n	801157e <xPortStartScheduler+0xbe>
	__asm volatile
 8011566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801156a:	f383 8811 	msr	BASEPRI, r3
 801156e:	f3bf 8f6f 	isb	sy
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	60bb      	str	r3, [r7, #8]
}
 8011578:	bf00      	nop
 801157a:	bf00      	nop
 801157c:	e7fd      	b.n	801157a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801157e:	4b1e      	ldr	r3, [pc, #120]	@ (80115f8 <xPortStartScheduler+0x138>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	021b      	lsls	r3, r3, #8
 8011584:	4a1c      	ldr	r2, [pc, #112]	@ (80115f8 <xPortStartScheduler+0x138>)
 8011586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011588:	4b1b      	ldr	r3, [pc, #108]	@ (80115f8 <xPortStartScheduler+0x138>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011590:	4a19      	ldr	r2, [pc, #100]	@ (80115f8 <xPortStartScheduler+0x138>)
 8011592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	b2da      	uxtb	r2, r3
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801159c:	4b17      	ldr	r3, [pc, #92]	@ (80115fc <xPortStartScheduler+0x13c>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a16      	ldr	r2, [pc, #88]	@ (80115fc <xPortStartScheduler+0x13c>)
 80115a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80115a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80115a8:	4b14      	ldr	r3, [pc, #80]	@ (80115fc <xPortStartScheduler+0x13c>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a13      	ldr	r2, [pc, #76]	@ (80115fc <xPortStartScheduler+0x13c>)
 80115ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80115b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80115b4:	f000 f8da 	bl	801176c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80115b8:	4b11      	ldr	r3, [pc, #68]	@ (8011600 <xPortStartScheduler+0x140>)
 80115ba:	2200      	movs	r2, #0
 80115bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80115be:	f000 f8f9 	bl	80117b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80115c2:	4b10      	ldr	r3, [pc, #64]	@ (8011604 <xPortStartScheduler+0x144>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	4a0f      	ldr	r2, [pc, #60]	@ (8011604 <xPortStartScheduler+0x144>)
 80115c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80115cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80115ce:	f7ff ff63 	bl	8011498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80115d2:	f7ff fa93 	bl	8010afc <vTaskSwitchContext>
	prvTaskExitError();
 80115d6:	f7ff ff1b 	bl	8011410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3718      	adds	r7, #24
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	e000ed00 	.word	0xe000ed00
 80115e8:	410fc271 	.word	0x410fc271
 80115ec:	410fc270 	.word	0x410fc270
 80115f0:	e000e400 	.word	0xe000e400
 80115f4:	200019b8 	.word	0x200019b8
 80115f8:	200019bc 	.word	0x200019bc
 80115fc:	e000ed20 	.word	0xe000ed20
 8011600:	20000044 	.word	0x20000044
 8011604:	e000ef34 	.word	0xe000ef34

08011608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	607b      	str	r3, [r7, #4]
}
 8011620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011622:	4b10      	ldr	r3, [pc, #64]	@ (8011664 <vPortEnterCritical+0x5c>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	3301      	adds	r3, #1
 8011628:	4a0e      	ldr	r2, [pc, #56]	@ (8011664 <vPortEnterCritical+0x5c>)
 801162a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801162c:	4b0d      	ldr	r3, [pc, #52]	@ (8011664 <vPortEnterCritical+0x5c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d110      	bne.n	8011656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011634:	4b0c      	ldr	r3, [pc, #48]	@ (8011668 <vPortEnterCritical+0x60>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	b2db      	uxtb	r3, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00b      	beq.n	8011656 <vPortEnterCritical+0x4e>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	603b      	str	r3, [r7, #0]
}
 8011650:	bf00      	nop
 8011652:	bf00      	nop
 8011654:	e7fd      	b.n	8011652 <vPortEnterCritical+0x4a>
	}
}
 8011656:	bf00      	nop
 8011658:	370c      	adds	r7, #12
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	20000044 	.word	0x20000044
 8011668:	e000ed04 	.word	0xe000ed04

0801166c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011672:	4b12      	ldr	r3, [pc, #72]	@ (80116bc <vPortExitCritical+0x50>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10b      	bne.n	8011692 <vPortExitCritical+0x26>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	607b      	str	r3, [r7, #4]
}
 801168c:	bf00      	nop
 801168e:	bf00      	nop
 8011690:	e7fd      	b.n	801168e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011692:	4b0a      	ldr	r3, [pc, #40]	@ (80116bc <vPortExitCritical+0x50>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	3b01      	subs	r3, #1
 8011698:	4a08      	ldr	r2, [pc, #32]	@ (80116bc <vPortExitCritical+0x50>)
 801169a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801169c:	4b07      	ldr	r3, [pc, #28]	@ (80116bc <vPortExitCritical+0x50>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d105      	bne.n	80116b0 <vPortExitCritical+0x44>
 80116a4:	2300      	movs	r3, #0
 80116a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	f383 8811 	msr	BASEPRI, r3
}
 80116ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	20000044 	.word	0x20000044

080116c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80116c0:	f3ef 8009 	mrs	r0, PSP
 80116c4:	f3bf 8f6f 	isb	sy
 80116c8:	4b15      	ldr	r3, [pc, #84]	@ (8011720 <pxCurrentTCBConst>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	f01e 0f10 	tst.w	lr, #16
 80116d0:	bf08      	it	eq
 80116d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80116d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116da:	6010      	str	r0, [r2, #0]
 80116dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80116e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80116e4:	f380 8811 	msr	BASEPRI, r0
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f7ff fa04 	bl	8010afc <vTaskSwitchContext>
 80116f4:	f04f 0000 	mov.w	r0, #0
 80116f8:	f380 8811 	msr	BASEPRI, r0
 80116fc:	bc09      	pop	{r0, r3}
 80116fe:	6819      	ldr	r1, [r3, #0]
 8011700:	6808      	ldr	r0, [r1, #0]
 8011702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011706:	f01e 0f10 	tst.w	lr, #16
 801170a:	bf08      	it	eq
 801170c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011710:	f380 8809 	msr	PSP, r0
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	f3af 8000 	nop.w

08011720 <pxCurrentTCBConst>:
 8011720:	2000188c 	.word	0x2000188c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011724:	bf00      	nop
 8011726:	bf00      	nop

08011728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	607b      	str	r3, [r7, #4]
}
 8011740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011742:	f7ff f921 	bl	8010988 <xTaskIncrementTick>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d003      	beq.n	8011754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801174c:	4b06      	ldr	r3, [pc, #24]	@ (8011768 <SysTick_Handler+0x40>)
 801174e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011752:	601a      	str	r2, [r3, #0]
 8011754:	2300      	movs	r3, #0
 8011756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	f383 8811 	msr	BASEPRI, r3
}
 801175e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011760:	bf00      	nop
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	e000ed04 	.word	0xe000ed04

0801176c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801176c:	b480      	push	{r7}
 801176e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011770:	4b0b      	ldr	r3, [pc, #44]	@ (80117a0 <vPortSetupTimerInterrupt+0x34>)
 8011772:	2200      	movs	r2, #0
 8011774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011776:	4b0b      	ldr	r3, [pc, #44]	@ (80117a4 <vPortSetupTimerInterrupt+0x38>)
 8011778:	2200      	movs	r2, #0
 801177a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801177c:	4b0a      	ldr	r3, [pc, #40]	@ (80117a8 <vPortSetupTimerInterrupt+0x3c>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a0a      	ldr	r2, [pc, #40]	@ (80117ac <vPortSetupTimerInterrupt+0x40>)
 8011782:	fba2 2303 	umull	r2, r3, r2, r3
 8011786:	099b      	lsrs	r3, r3, #6
 8011788:	4a09      	ldr	r2, [pc, #36]	@ (80117b0 <vPortSetupTimerInterrupt+0x44>)
 801178a:	3b01      	subs	r3, #1
 801178c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801178e:	4b04      	ldr	r3, [pc, #16]	@ (80117a0 <vPortSetupTimerInterrupt+0x34>)
 8011790:	2207      	movs	r2, #7
 8011792:	601a      	str	r2, [r3, #0]
}
 8011794:	bf00      	nop
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop
 80117a0:	e000e010 	.word	0xe000e010
 80117a4:	e000e018 	.word	0xe000e018
 80117a8:	20000020 	.word	0x20000020
 80117ac:	10624dd3 	.word	0x10624dd3
 80117b0:	e000e014 	.word	0xe000e014

080117b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80117b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80117c4 <vPortEnableVFP+0x10>
 80117b8:	6801      	ldr	r1, [r0, #0]
 80117ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80117be:	6001      	str	r1, [r0, #0]
 80117c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80117c2:	bf00      	nop
 80117c4:	e000ed88 	.word	0xe000ed88

080117c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80117ce:	f3ef 8305 	mrs	r3, IPSR
 80117d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b0f      	cmp	r3, #15
 80117d8:	d915      	bls.n	8011806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80117da:	4a18      	ldr	r2, [pc, #96]	@ (801183c <vPortValidateInterruptPriority+0x74>)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	4413      	add	r3, r2
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80117e4:	4b16      	ldr	r3, [pc, #88]	@ (8011840 <vPortValidateInterruptPriority+0x78>)
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	7afa      	ldrb	r2, [r7, #11]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d20b      	bcs.n	8011806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80117ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f2:	f383 8811 	msr	BASEPRI, r3
 80117f6:	f3bf 8f6f 	isb	sy
 80117fa:	f3bf 8f4f 	dsb	sy
 80117fe:	607b      	str	r3, [r7, #4]
}
 8011800:	bf00      	nop
 8011802:	bf00      	nop
 8011804:	e7fd      	b.n	8011802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011806:	4b0f      	ldr	r3, [pc, #60]	@ (8011844 <vPortValidateInterruptPriority+0x7c>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801180e:	4b0e      	ldr	r3, [pc, #56]	@ (8011848 <vPortValidateInterruptPriority+0x80>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	429a      	cmp	r2, r3
 8011814:	d90b      	bls.n	801182e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	603b      	str	r3, [r7, #0]
}
 8011828:	bf00      	nop
 801182a:	bf00      	nop
 801182c:	e7fd      	b.n	801182a <vPortValidateInterruptPriority+0x62>
	}
 801182e:	bf00      	nop
 8011830:	3714      	adds	r7, #20
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	e000e3f0 	.word	0xe000e3f0
 8011840:	200019b8 	.word	0x200019b8
 8011844:	e000ed0c 	.word	0xe000ed0c
 8011848:	200019bc 	.word	0x200019bc

0801184c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b08a      	sub	sp, #40	@ 0x28
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011854:	2300      	movs	r3, #0
 8011856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011858:	f7fe ffda 	bl	8010810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801185c:	4b5c      	ldr	r3, [pc, #368]	@ (80119d0 <pvPortMalloc+0x184>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d101      	bne.n	8011868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011864:	f000 f924 	bl	8011ab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011868:	4b5a      	ldr	r3, [pc, #360]	@ (80119d4 <pvPortMalloc+0x188>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4013      	ands	r3, r2
 8011870:	2b00      	cmp	r3, #0
 8011872:	f040 8095 	bne.w	80119a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d01e      	beq.n	80118ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801187c:	2208      	movs	r2, #8
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4413      	add	r3, r2
 8011882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f003 0307 	and.w	r3, r3, #7
 801188a:	2b00      	cmp	r3, #0
 801188c:	d015      	beq.n	80118ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f023 0307 	bic.w	r3, r3, #7
 8011894:	3308      	adds	r3, #8
 8011896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f003 0307 	and.w	r3, r3, #7
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00b      	beq.n	80118ba <pvPortMalloc+0x6e>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	617b      	str	r3, [r7, #20]
}
 80118b4:	bf00      	nop
 80118b6:	bf00      	nop
 80118b8:	e7fd      	b.n	80118b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d06f      	beq.n	80119a0 <pvPortMalloc+0x154>
 80118c0:	4b45      	ldr	r3, [pc, #276]	@ (80119d8 <pvPortMalloc+0x18c>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d86a      	bhi.n	80119a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80118ca:	4b44      	ldr	r3, [pc, #272]	@ (80119dc <pvPortMalloc+0x190>)
 80118cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80118ce:	4b43      	ldr	r3, [pc, #268]	@ (80119dc <pvPortMalloc+0x190>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80118d4:	e004      	b.n	80118e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80118d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80118da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80118e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d903      	bls.n	80118f2 <pvPortMalloc+0xa6>
 80118ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1f1      	bne.n	80118d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80118f2:	4b37      	ldr	r3, [pc, #220]	@ (80119d0 <pvPortMalloc+0x184>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d051      	beq.n	80119a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80118fc:	6a3b      	ldr	r3, [r7, #32]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2208      	movs	r2, #8
 8011902:	4413      	add	r3, r2
 8011904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	6a3b      	ldr	r3, [r7, #32]
 801190c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011910:	685a      	ldr	r2, [r3, #4]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	1ad2      	subs	r2, r2, r3
 8011916:	2308      	movs	r3, #8
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	429a      	cmp	r2, r3
 801191c:	d920      	bls.n	8011960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801191e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4413      	add	r3, r2
 8011924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	f003 0307 	and.w	r3, r3, #7
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00b      	beq.n	8011948 <pvPortMalloc+0xfc>
	__asm volatile
 8011930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	613b      	str	r3, [r7, #16]
}
 8011942:	bf00      	nop
 8011944:	bf00      	nop
 8011946:	e7fd      	b.n	8011944 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	1ad2      	subs	r2, r2, r3
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801195a:	69b8      	ldr	r0, [r7, #24]
 801195c:	f000 f90a 	bl	8011b74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011960:	4b1d      	ldr	r3, [pc, #116]	@ (80119d8 <pvPortMalloc+0x18c>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	4a1b      	ldr	r2, [pc, #108]	@ (80119d8 <pvPortMalloc+0x18c>)
 801196c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801196e:	4b1a      	ldr	r3, [pc, #104]	@ (80119d8 <pvPortMalloc+0x18c>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	4b1b      	ldr	r3, [pc, #108]	@ (80119e0 <pvPortMalloc+0x194>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	429a      	cmp	r2, r3
 8011978:	d203      	bcs.n	8011982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801197a:	4b17      	ldr	r3, [pc, #92]	@ (80119d8 <pvPortMalloc+0x18c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a18      	ldr	r2, [pc, #96]	@ (80119e0 <pvPortMalloc+0x194>)
 8011980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011984:	685a      	ldr	r2, [r3, #4]
 8011986:	4b13      	ldr	r3, [pc, #76]	@ (80119d4 <pvPortMalloc+0x188>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	431a      	orrs	r2, r3
 801198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011992:	2200      	movs	r2, #0
 8011994:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011996:	4b13      	ldr	r3, [pc, #76]	@ (80119e4 <pvPortMalloc+0x198>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	3301      	adds	r3, #1
 801199c:	4a11      	ldr	r2, [pc, #68]	@ (80119e4 <pvPortMalloc+0x198>)
 801199e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80119a0:	f7fe ff44 	bl	801082c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	f003 0307 	and.w	r3, r3, #7
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00b      	beq.n	80119c6 <pvPortMalloc+0x17a>
	__asm volatile
 80119ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	60fb      	str	r3, [r7, #12]
}
 80119c0:	bf00      	nop
 80119c2:	bf00      	nop
 80119c4:	e7fd      	b.n	80119c2 <pvPortMalloc+0x176>
	return pvReturn;
 80119c6:	69fb      	ldr	r3, [r7, #28]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3728      	adds	r7, #40	@ 0x28
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	200048a8 	.word	0x200048a8
 80119d4:	200048bc 	.word	0x200048bc
 80119d8:	200048ac 	.word	0x200048ac
 80119dc:	200048a0 	.word	0x200048a0
 80119e0:	200048b0 	.word	0x200048b0
 80119e4:	200048b4 	.word	0x200048b4

080119e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d04f      	beq.n	8011a9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80119fa:	2308      	movs	r3, #8
 80119fc:	425b      	negs	r3, r3
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	4413      	add	r3, r2
 8011a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	685a      	ldr	r2, [r3, #4]
 8011a0c:	4b25      	ldr	r3, [pc, #148]	@ (8011aa4 <vPortFree+0xbc>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	4013      	ands	r3, r2
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d10b      	bne.n	8011a2e <vPortFree+0x46>
	__asm volatile
 8011a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a1a:	f383 8811 	msr	BASEPRI, r3
 8011a1e:	f3bf 8f6f 	isb	sy
 8011a22:	f3bf 8f4f 	dsb	sy
 8011a26:	60fb      	str	r3, [r7, #12]
}
 8011a28:	bf00      	nop
 8011a2a:	bf00      	nop
 8011a2c:	e7fd      	b.n	8011a2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00b      	beq.n	8011a4e <vPortFree+0x66>
	__asm volatile
 8011a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	60bb      	str	r3, [r7, #8]
}
 8011a48:	bf00      	nop
 8011a4a:	bf00      	nop
 8011a4c:	e7fd      	b.n	8011a4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	4b14      	ldr	r3, [pc, #80]	@ (8011aa4 <vPortFree+0xbc>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4013      	ands	r3, r2
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d01e      	beq.n	8011a9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d11a      	bne.n	8011a9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	4b0e      	ldr	r3, [pc, #56]	@ (8011aa4 <vPortFree+0xbc>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	43db      	mvns	r3, r3
 8011a6e:	401a      	ands	r2, r3
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011a74:	f7fe fecc 	bl	8010810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	685a      	ldr	r2, [r3, #4]
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa8 <vPortFree+0xc0>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4413      	add	r3, r2
 8011a82:	4a09      	ldr	r2, [pc, #36]	@ (8011aa8 <vPortFree+0xc0>)
 8011a84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011a86:	6938      	ldr	r0, [r7, #16]
 8011a88:	f000 f874 	bl	8011b74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011a8c:	4b07      	ldr	r3, [pc, #28]	@ (8011aac <vPortFree+0xc4>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	3301      	adds	r3, #1
 8011a92:	4a06      	ldr	r2, [pc, #24]	@ (8011aac <vPortFree+0xc4>)
 8011a94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011a96:	f7fe fec9 	bl	801082c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011a9a:	bf00      	nop
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	200048bc 	.word	0x200048bc
 8011aa8:	200048ac 	.word	0x200048ac
 8011aac:	200048b8 	.word	0x200048b8

08011ab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ab6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8011aba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011abc:	4b27      	ldr	r3, [pc, #156]	@ (8011b5c <prvHeapInit+0xac>)
 8011abe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f003 0307 	and.w	r3, r3, #7
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00c      	beq.n	8011ae4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	3307      	adds	r3, #7
 8011ace:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f023 0307 	bic.w	r3, r3, #7
 8011ad6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011ad8:	68ba      	ldr	r2, [r7, #8]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	4a1f      	ldr	r2, [pc, #124]	@ (8011b5c <prvHeapInit+0xac>)
 8011ae0:	4413      	add	r3, r2
 8011ae2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8011b60 <prvHeapInit+0xb0>)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011aee:	4b1c      	ldr	r3, [pc, #112]	@ (8011b60 <prvHeapInit+0xb0>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	68ba      	ldr	r2, [r7, #8]
 8011af8:	4413      	add	r3, r2
 8011afa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011afc:	2208      	movs	r2, #8
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	1a9b      	subs	r3, r3, r2
 8011b02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f023 0307 	bic.w	r3, r3, #7
 8011b0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	4a15      	ldr	r2, [pc, #84]	@ (8011b64 <prvHeapInit+0xb4>)
 8011b10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011b12:	4b14      	ldr	r3, [pc, #80]	@ (8011b64 <prvHeapInit+0xb4>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2200      	movs	r2, #0
 8011b18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011b1a:	4b12      	ldr	r3, [pc, #72]	@ (8011b64 <prvHeapInit+0xb4>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	1ad2      	subs	r2, r2, r3
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011b30:	4b0c      	ldr	r3, [pc, #48]	@ (8011b64 <prvHeapInit+0xb4>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8011b68 <prvHeapInit+0xb8>)
 8011b3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	4a09      	ldr	r2, [pc, #36]	@ (8011b6c <prvHeapInit+0xbc>)
 8011b46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b48:	4b09      	ldr	r3, [pc, #36]	@ (8011b70 <prvHeapInit+0xc0>)
 8011b4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011b4e:	601a      	str	r2, [r3, #0]
}
 8011b50:	bf00      	nop
 8011b52:	3714      	adds	r7, #20
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr
 8011b5c:	200019c0 	.word	0x200019c0
 8011b60:	200048a0 	.word	0x200048a0
 8011b64:	200048a8 	.word	0x200048a8
 8011b68:	200048b0 	.word	0x200048b0
 8011b6c:	200048ac 	.word	0x200048ac
 8011b70:	200048bc 	.word	0x200048bc

08011b74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b7c:	4b28      	ldr	r3, [pc, #160]	@ (8011c20 <prvInsertBlockIntoFreeList+0xac>)
 8011b7e:	60fb      	str	r3, [r7, #12]
 8011b80:	e002      	b.n	8011b88 <prvInsertBlockIntoFreeList+0x14>
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d8f7      	bhi.n	8011b82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	68ba      	ldr	r2, [r7, #8]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d108      	bne.n	8011bb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	685a      	ldr	r2, [r3, #4]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	441a      	add	r2, r3
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	68ba      	ldr	r2, [r7, #8]
 8011bc0:	441a      	add	r2, r3
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d118      	bne.n	8011bfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	4b15      	ldr	r3, [pc, #84]	@ (8011c24 <prvInsertBlockIntoFreeList+0xb0>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d00d      	beq.n	8011bf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	685a      	ldr	r2, [r3, #4]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	441a      	add	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	e008      	b.n	8011c04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8011c24 <prvInsertBlockIntoFreeList+0xb0>)
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	e003      	b.n	8011c04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d002      	beq.n	8011c12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c12:	bf00      	nop
 8011c14:	3714      	adds	r7, #20
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop
 8011c20:	200048a0 	.word	0x200048a0
 8011c24:	200048a8 	.word	0x200048a8

08011c28 <__cvt>:
 8011c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c2c:	ec57 6b10 	vmov	r6, r7, d0
 8011c30:	2f00      	cmp	r7, #0
 8011c32:	460c      	mov	r4, r1
 8011c34:	4619      	mov	r1, r3
 8011c36:	463b      	mov	r3, r7
 8011c38:	bfbb      	ittet	lt
 8011c3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011c3e:	461f      	movlt	r7, r3
 8011c40:	2300      	movge	r3, #0
 8011c42:	232d      	movlt	r3, #45	@ 0x2d
 8011c44:	700b      	strb	r3, [r1, #0]
 8011c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011c4c:	4691      	mov	r9, r2
 8011c4e:	f023 0820 	bic.w	r8, r3, #32
 8011c52:	bfbc      	itt	lt
 8011c54:	4632      	movlt	r2, r6
 8011c56:	4616      	movlt	r6, r2
 8011c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011c5c:	d005      	beq.n	8011c6a <__cvt+0x42>
 8011c5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011c62:	d100      	bne.n	8011c66 <__cvt+0x3e>
 8011c64:	3401      	adds	r4, #1
 8011c66:	2102      	movs	r1, #2
 8011c68:	e000      	b.n	8011c6c <__cvt+0x44>
 8011c6a:	2103      	movs	r1, #3
 8011c6c:	ab03      	add	r3, sp, #12
 8011c6e:	9301      	str	r3, [sp, #4]
 8011c70:	ab02      	add	r3, sp, #8
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	ec47 6b10 	vmov	d0, r6, r7
 8011c78:	4653      	mov	r3, sl
 8011c7a:	4622      	mov	r2, r4
 8011c7c:	f001 f910 	bl	8012ea0 <_dtoa_r>
 8011c80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011c84:	4605      	mov	r5, r0
 8011c86:	d119      	bne.n	8011cbc <__cvt+0x94>
 8011c88:	f019 0f01 	tst.w	r9, #1
 8011c8c:	d00e      	beq.n	8011cac <__cvt+0x84>
 8011c8e:	eb00 0904 	add.w	r9, r0, r4
 8011c92:	2200      	movs	r2, #0
 8011c94:	2300      	movs	r3, #0
 8011c96:	4630      	mov	r0, r6
 8011c98:	4639      	mov	r1, r7
 8011c9a:	f7ee ff3d 	bl	8000b18 <__aeabi_dcmpeq>
 8011c9e:	b108      	cbz	r0, 8011ca4 <__cvt+0x7c>
 8011ca0:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ca4:	2230      	movs	r2, #48	@ 0x30
 8011ca6:	9b03      	ldr	r3, [sp, #12]
 8011ca8:	454b      	cmp	r3, r9
 8011caa:	d31e      	bcc.n	8011cea <__cvt+0xc2>
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cb0:	1b5b      	subs	r3, r3, r5
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	6013      	str	r3, [r2, #0]
 8011cb6:	b004      	add	sp, #16
 8011cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011cc0:	eb00 0904 	add.w	r9, r0, r4
 8011cc4:	d1e5      	bne.n	8011c92 <__cvt+0x6a>
 8011cc6:	7803      	ldrb	r3, [r0, #0]
 8011cc8:	2b30      	cmp	r3, #48	@ 0x30
 8011cca:	d10a      	bne.n	8011ce2 <__cvt+0xba>
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2300      	movs	r3, #0
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	f7ee ff20 	bl	8000b18 <__aeabi_dcmpeq>
 8011cd8:	b918      	cbnz	r0, 8011ce2 <__cvt+0xba>
 8011cda:	f1c4 0401 	rsb	r4, r4, #1
 8011cde:	f8ca 4000 	str.w	r4, [sl]
 8011ce2:	f8da 3000 	ldr.w	r3, [sl]
 8011ce6:	4499      	add	r9, r3
 8011ce8:	e7d3      	b.n	8011c92 <__cvt+0x6a>
 8011cea:	1c59      	adds	r1, r3, #1
 8011cec:	9103      	str	r1, [sp, #12]
 8011cee:	701a      	strb	r2, [r3, #0]
 8011cf0:	e7d9      	b.n	8011ca6 <__cvt+0x7e>

08011cf2 <__exponent>:
 8011cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cf4:	2900      	cmp	r1, #0
 8011cf6:	bfba      	itte	lt
 8011cf8:	4249      	neglt	r1, r1
 8011cfa:	232d      	movlt	r3, #45	@ 0x2d
 8011cfc:	232b      	movge	r3, #43	@ 0x2b
 8011cfe:	2909      	cmp	r1, #9
 8011d00:	7002      	strb	r2, [r0, #0]
 8011d02:	7043      	strb	r3, [r0, #1]
 8011d04:	dd29      	ble.n	8011d5a <__exponent+0x68>
 8011d06:	f10d 0307 	add.w	r3, sp, #7
 8011d0a:	461d      	mov	r5, r3
 8011d0c:	270a      	movs	r7, #10
 8011d0e:	461a      	mov	r2, r3
 8011d10:	fbb1 f6f7 	udiv	r6, r1, r7
 8011d14:	fb07 1416 	mls	r4, r7, r6, r1
 8011d18:	3430      	adds	r4, #48	@ 0x30
 8011d1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011d1e:	460c      	mov	r4, r1
 8011d20:	2c63      	cmp	r4, #99	@ 0x63
 8011d22:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d26:	4631      	mov	r1, r6
 8011d28:	dcf1      	bgt.n	8011d0e <__exponent+0x1c>
 8011d2a:	3130      	adds	r1, #48	@ 0x30
 8011d2c:	1e94      	subs	r4, r2, #2
 8011d2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011d32:	1c41      	adds	r1, r0, #1
 8011d34:	4623      	mov	r3, r4
 8011d36:	42ab      	cmp	r3, r5
 8011d38:	d30a      	bcc.n	8011d50 <__exponent+0x5e>
 8011d3a:	f10d 0309 	add.w	r3, sp, #9
 8011d3e:	1a9b      	subs	r3, r3, r2
 8011d40:	42ac      	cmp	r4, r5
 8011d42:	bf88      	it	hi
 8011d44:	2300      	movhi	r3, #0
 8011d46:	3302      	adds	r3, #2
 8011d48:	4403      	add	r3, r0
 8011d4a:	1a18      	subs	r0, r3, r0
 8011d4c:	b003      	add	sp, #12
 8011d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011d54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011d58:	e7ed      	b.n	8011d36 <__exponent+0x44>
 8011d5a:	2330      	movs	r3, #48	@ 0x30
 8011d5c:	3130      	adds	r1, #48	@ 0x30
 8011d5e:	7083      	strb	r3, [r0, #2]
 8011d60:	70c1      	strb	r1, [r0, #3]
 8011d62:	1d03      	adds	r3, r0, #4
 8011d64:	e7f1      	b.n	8011d4a <__exponent+0x58>
	...

08011d68 <_printf_float>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	b08d      	sub	sp, #52	@ 0x34
 8011d6e:	460c      	mov	r4, r1
 8011d70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011d74:	4616      	mov	r6, r2
 8011d76:	461f      	mov	r7, r3
 8011d78:	4605      	mov	r5, r0
 8011d7a:	f000 ff1f 	bl	8012bbc <_localeconv_r>
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	9304      	str	r3, [sp, #16]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ee fa9c 	bl	80002c0 <strlen>
 8011d88:	2300      	movs	r3, #0
 8011d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8011d90:	9005      	str	r0, [sp, #20]
 8011d92:	3307      	adds	r3, #7
 8011d94:	f023 0307 	bic.w	r3, r3, #7
 8011d98:	f103 0208 	add.w	r2, r3, #8
 8011d9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011da0:	f8d4 b000 	ldr.w	fp, [r4]
 8011da4:	f8c8 2000 	str.w	r2, [r8]
 8011da8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011dac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011db0:	9307      	str	r3, [sp, #28]
 8011db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8011db6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8012030 <_printf_float+0x2c8>)
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	f7ee feda 	bl	8000b7c <__aeabi_dcmpun>
 8011dc8:	bb70      	cbnz	r0, 8011e28 <_printf_float+0xc0>
 8011dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011dce:	4b98      	ldr	r3, [pc, #608]	@ (8012030 <_printf_float+0x2c8>)
 8011dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd4:	f7ee feb4 	bl	8000b40 <__aeabi_dcmple>
 8011dd8:	bb30      	cbnz	r0, 8011e28 <_printf_float+0xc0>
 8011dda:	2200      	movs	r2, #0
 8011ddc:	2300      	movs	r3, #0
 8011dde:	4640      	mov	r0, r8
 8011de0:	4649      	mov	r1, r9
 8011de2:	f7ee fea3 	bl	8000b2c <__aeabi_dcmplt>
 8011de6:	b110      	cbz	r0, 8011dee <_printf_float+0x86>
 8011de8:	232d      	movs	r3, #45	@ 0x2d
 8011dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dee:	4a91      	ldr	r2, [pc, #580]	@ (8012034 <_printf_float+0x2cc>)
 8011df0:	4b91      	ldr	r3, [pc, #580]	@ (8012038 <_printf_float+0x2d0>)
 8011df2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011df6:	bf8c      	ite	hi
 8011df8:	4690      	movhi	r8, r2
 8011dfa:	4698      	movls	r8, r3
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	6123      	str	r3, [r4, #16]
 8011e00:	f02b 0304 	bic.w	r3, fp, #4
 8011e04:	6023      	str	r3, [r4, #0]
 8011e06:	f04f 0900 	mov.w	r9, #0
 8011e0a:	9700      	str	r7, [sp, #0]
 8011e0c:	4633      	mov	r3, r6
 8011e0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011e10:	4621      	mov	r1, r4
 8011e12:	4628      	mov	r0, r5
 8011e14:	f000 f9d2 	bl	80121bc <_printf_common>
 8011e18:	3001      	adds	r0, #1
 8011e1a:	f040 808d 	bne.w	8011f38 <_printf_float+0x1d0>
 8011e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e22:	b00d      	add	sp, #52	@ 0x34
 8011e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e28:	4642      	mov	r2, r8
 8011e2a:	464b      	mov	r3, r9
 8011e2c:	4640      	mov	r0, r8
 8011e2e:	4649      	mov	r1, r9
 8011e30:	f7ee fea4 	bl	8000b7c <__aeabi_dcmpun>
 8011e34:	b140      	cbz	r0, 8011e48 <_printf_float+0xe0>
 8011e36:	464b      	mov	r3, r9
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bfbc      	itt	lt
 8011e3c:	232d      	movlt	r3, #45	@ 0x2d
 8011e3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011e42:	4a7e      	ldr	r2, [pc, #504]	@ (801203c <_printf_float+0x2d4>)
 8011e44:	4b7e      	ldr	r3, [pc, #504]	@ (8012040 <_printf_float+0x2d8>)
 8011e46:	e7d4      	b.n	8011df2 <_printf_float+0x8a>
 8011e48:	6863      	ldr	r3, [r4, #4]
 8011e4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011e4e:	9206      	str	r2, [sp, #24]
 8011e50:	1c5a      	adds	r2, r3, #1
 8011e52:	d13b      	bne.n	8011ecc <_printf_float+0x164>
 8011e54:	2306      	movs	r3, #6
 8011e56:	6063      	str	r3, [r4, #4]
 8011e58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	6022      	str	r2, [r4, #0]
 8011e60:	9303      	str	r3, [sp, #12]
 8011e62:	ab0a      	add	r3, sp, #40	@ 0x28
 8011e64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011e68:	ab09      	add	r3, sp, #36	@ 0x24
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	6861      	ldr	r1, [r4, #4]
 8011e6e:	ec49 8b10 	vmov	d0, r8, r9
 8011e72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7ff fed6 	bl	8011c28 <__cvt>
 8011e7c:	9b06      	ldr	r3, [sp, #24]
 8011e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e80:	2b47      	cmp	r3, #71	@ 0x47
 8011e82:	4680      	mov	r8, r0
 8011e84:	d129      	bne.n	8011eda <_printf_float+0x172>
 8011e86:	1cc8      	adds	r0, r1, #3
 8011e88:	db02      	blt.n	8011e90 <_printf_float+0x128>
 8011e8a:	6863      	ldr	r3, [r4, #4]
 8011e8c:	4299      	cmp	r1, r3
 8011e8e:	dd41      	ble.n	8011f14 <_printf_float+0x1ac>
 8011e90:	f1aa 0a02 	sub.w	sl, sl, #2
 8011e94:	fa5f fa8a 	uxtb.w	sl, sl
 8011e98:	3901      	subs	r1, #1
 8011e9a:	4652      	mov	r2, sl
 8011e9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011ea0:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ea2:	f7ff ff26 	bl	8011cf2 <__exponent>
 8011ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ea8:	1813      	adds	r3, r2, r0
 8011eaa:	2a01      	cmp	r2, #1
 8011eac:	4681      	mov	r9, r0
 8011eae:	6123      	str	r3, [r4, #16]
 8011eb0:	dc02      	bgt.n	8011eb8 <_printf_float+0x150>
 8011eb2:	6822      	ldr	r2, [r4, #0]
 8011eb4:	07d2      	lsls	r2, r2, #31
 8011eb6:	d501      	bpl.n	8011ebc <_printf_float+0x154>
 8011eb8:	3301      	adds	r3, #1
 8011eba:	6123      	str	r3, [r4, #16]
 8011ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d0a2      	beq.n	8011e0a <_printf_float+0xa2>
 8011ec4:	232d      	movs	r3, #45	@ 0x2d
 8011ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011eca:	e79e      	b.n	8011e0a <_printf_float+0xa2>
 8011ecc:	9a06      	ldr	r2, [sp, #24]
 8011ece:	2a47      	cmp	r2, #71	@ 0x47
 8011ed0:	d1c2      	bne.n	8011e58 <_printf_float+0xf0>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1c0      	bne.n	8011e58 <_printf_float+0xf0>
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e7bd      	b.n	8011e56 <_printf_float+0xee>
 8011eda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011ede:	d9db      	bls.n	8011e98 <_printf_float+0x130>
 8011ee0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011ee4:	d118      	bne.n	8011f18 <_printf_float+0x1b0>
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	6863      	ldr	r3, [r4, #4]
 8011eea:	dd0b      	ble.n	8011f04 <_printf_float+0x19c>
 8011eec:	6121      	str	r1, [r4, #16]
 8011eee:	b913      	cbnz	r3, 8011ef6 <_printf_float+0x18e>
 8011ef0:	6822      	ldr	r2, [r4, #0]
 8011ef2:	07d0      	lsls	r0, r2, #31
 8011ef4:	d502      	bpl.n	8011efc <_printf_float+0x194>
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	440b      	add	r3, r1
 8011efa:	6123      	str	r3, [r4, #16]
 8011efc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011efe:	f04f 0900 	mov.w	r9, #0
 8011f02:	e7db      	b.n	8011ebc <_printf_float+0x154>
 8011f04:	b913      	cbnz	r3, 8011f0c <_printf_float+0x1a4>
 8011f06:	6822      	ldr	r2, [r4, #0]
 8011f08:	07d2      	lsls	r2, r2, #31
 8011f0a:	d501      	bpl.n	8011f10 <_printf_float+0x1a8>
 8011f0c:	3302      	adds	r3, #2
 8011f0e:	e7f4      	b.n	8011efa <_printf_float+0x192>
 8011f10:	2301      	movs	r3, #1
 8011f12:	e7f2      	b.n	8011efa <_printf_float+0x192>
 8011f14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f1a:	4299      	cmp	r1, r3
 8011f1c:	db05      	blt.n	8011f2a <_printf_float+0x1c2>
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	6121      	str	r1, [r4, #16]
 8011f22:	07d8      	lsls	r0, r3, #31
 8011f24:	d5ea      	bpl.n	8011efc <_printf_float+0x194>
 8011f26:	1c4b      	adds	r3, r1, #1
 8011f28:	e7e7      	b.n	8011efa <_printf_float+0x192>
 8011f2a:	2900      	cmp	r1, #0
 8011f2c:	bfd4      	ite	le
 8011f2e:	f1c1 0202 	rsble	r2, r1, #2
 8011f32:	2201      	movgt	r2, #1
 8011f34:	4413      	add	r3, r2
 8011f36:	e7e0      	b.n	8011efa <_printf_float+0x192>
 8011f38:	6823      	ldr	r3, [r4, #0]
 8011f3a:	055a      	lsls	r2, r3, #21
 8011f3c:	d407      	bmi.n	8011f4e <_printf_float+0x1e6>
 8011f3e:	6923      	ldr	r3, [r4, #16]
 8011f40:	4642      	mov	r2, r8
 8011f42:	4631      	mov	r1, r6
 8011f44:	4628      	mov	r0, r5
 8011f46:	47b8      	blx	r7
 8011f48:	3001      	adds	r0, #1
 8011f4a:	d12b      	bne.n	8011fa4 <_printf_float+0x23c>
 8011f4c:	e767      	b.n	8011e1e <_printf_float+0xb6>
 8011f4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011f52:	f240 80dd 	bls.w	8012110 <_printf_float+0x3a8>
 8011f56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f7ee fddb 	bl	8000b18 <__aeabi_dcmpeq>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	d033      	beq.n	8011fce <_printf_float+0x266>
 8011f66:	4a37      	ldr	r2, [pc, #220]	@ (8012044 <_printf_float+0x2dc>)
 8011f68:	2301      	movs	r3, #1
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	47b8      	blx	r7
 8011f70:	3001      	adds	r0, #1
 8011f72:	f43f af54 	beq.w	8011e1e <_printf_float+0xb6>
 8011f76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011f7a:	4543      	cmp	r3, r8
 8011f7c:	db02      	blt.n	8011f84 <_printf_float+0x21c>
 8011f7e:	6823      	ldr	r3, [r4, #0]
 8011f80:	07d8      	lsls	r0, r3, #31
 8011f82:	d50f      	bpl.n	8011fa4 <_printf_float+0x23c>
 8011f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	47b8      	blx	r7
 8011f8e:	3001      	adds	r0, #1
 8011f90:	f43f af45 	beq.w	8011e1e <_printf_float+0xb6>
 8011f94:	f04f 0900 	mov.w	r9, #0
 8011f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f9c:	f104 0a1a 	add.w	sl, r4, #26
 8011fa0:	45c8      	cmp	r8, r9
 8011fa2:	dc09      	bgt.n	8011fb8 <_printf_float+0x250>
 8011fa4:	6823      	ldr	r3, [r4, #0]
 8011fa6:	079b      	lsls	r3, r3, #30
 8011fa8:	f100 8103 	bmi.w	80121b2 <_printf_float+0x44a>
 8011fac:	68e0      	ldr	r0, [r4, #12]
 8011fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fb0:	4298      	cmp	r0, r3
 8011fb2:	bfb8      	it	lt
 8011fb4:	4618      	movlt	r0, r3
 8011fb6:	e734      	b.n	8011e22 <_printf_float+0xba>
 8011fb8:	2301      	movs	r3, #1
 8011fba:	4652      	mov	r2, sl
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	47b8      	blx	r7
 8011fc2:	3001      	adds	r0, #1
 8011fc4:	f43f af2b 	beq.w	8011e1e <_printf_float+0xb6>
 8011fc8:	f109 0901 	add.w	r9, r9, #1
 8011fcc:	e7e8      	b.n	8011fa0 <_printf_float+0x238>
 8011fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	dc39      	bgt.n	8012048 <_printf_float+0x2e0>
 8011fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8012044 <_printf_float+0x2dc>)
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4628      	mov	r0, r5
 8011fdc:	47b8      	blx	r7
 8011fde:	3001      	adds	r0, #1
 8011fe0:	f43f af1d 	beq.w	8011e1e <_printf_float+0xb6>
 8011fe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011fe8:	ea59 0303 	orrs.w	r3, r9, r3
 8011fec:	d102      	bne.n	8011ff4 <_printf_float+0x28c>
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	07d9      	lsls	r1, r3, #31
 8011ff2:	d5d7      	bpl.n	8011fa4 <_printf_float+0x23c>
 8011ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ff8:	4631      	mov	r1, r6
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	47b8      	blx	r7
 8011ffe:	3001      	adds	r0, #1
 8012000:	f43f af0d 	beq.w	8011e1e <_printf_float+0xb6>
 8012004:	f04f 0a00 	mov.w	sl, #0
 8012008:	f104 0b1a 	add.w	fp, r4, #26
 801200c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801200e:	425b      	negs	r3, r3
 8012010:	4553      	cmp	r3, sl
 8012012:	dc01      	bgt.n	8012018 <_printf_float+0x2b0>
 8012014:	464b      	mov	r3, r9
 8012016:	e793      	b.n	8011f40 <_printf_float+0x1d8>
 8012018:	2301      	movs	r3, #1
 801201a:	465a      	mov	r2, fp
 801201c:	4631      	mov	r1, r6
 801201e:	4628      	mov	r0, r5
 8012020:	47b8      	blx	r7
 8012022:	3001      	adds	r0, #1
 8012024:	f43f aefb 	beq.w	8011e1e <_printf_float+0xb6>
 8012028:	f10a 0a01 	add.w	sl, sl, #1
 801202c:	e7ee      	b.n	801200c <_printf_float+0x2a4>
 801202e:	bf00      	nop
 8012030:	7fefffff 	.word	0x7fefffff
 8012034:	08018da0 	.word	0x08018da0
 8012038:	08018d9c 	.word	0x08018d9c
 801203c:	08018da8 	.word	0x08018da8
 8012040:	08018da4 	.word	0x08018da4
 8012044:	08018dac 	.word	0x08018dac
 8012048:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801204a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801204e:	4553      	cmp	r3, sl
 8012050:	bfa8      	it	ge
 8012052:	4653      	movge	r3, sl
 8012054:	2b00      	cmp	r3, #0
 8012056:	4699      	mov	r9, r3
 8012058:	dc36      	bgt.n	80120c8 <_printf_float+0x360>
 801205a:	f04f 0b00 	mov.w	fp, #0
 801205e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012062:	f104 021a 	add.w	r2, r4, #26
 8012066:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012068:	9306      	str	r3, [sp, #24]
 801206a:	eba3 0309 	sub.w	r3, r3, r9
 801206e:	455b      	cmp	r3, fp
 8012070:	dc31      	bgt.n	80120d6 <_printf_float+0x36e>
 8012072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012074:	459a      	cmp	sl, r3
 8012076:	dc3a      	bgt.n	80120ee <_printf_float+0x386>
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	07da      	lsls	r2, r3, #31
 801207c:	d437      	bmi.n	80120ee <_printf_float+0x386>
 801207e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012080:	ebaa 0903 	sub.w	r9, sl, r3
 8012084:	9b06      	ldr	r3, [sp, #24]
 8012086:	ebaa 0303 	sub.w	r3, sl, r3
 801208a:	4599      	cmp	r9, r3
 801208c:	bfa8      	it	ge
 801208e:	4699      	movge	r9, r3
 8012090:	f1b9 0f00 	cmp.w	r9, #0
 8012094:	dc33      	bgt.n	80120fe <_printf_float+0x396>
 8012096:	f04f 0800 	mov.w	r8, #0
 801209a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801209e:	f104 0b1a 	add.w	fp, r4, #26
 80120a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120a4:	ebaa 0303 	sub.w	r3, sl, r3
 80120a8:	eba3 0309 	sub.w	r3, r3, r9
 80120ac:	4543      	cmp	r3, r8
 80120ae:	f77f af79 	ble.w	8011fa4 <_printf_float+0x23c>
 80120b2:	2301      	movs	r3, #1
 80120b4:	465a      	mov	r2, fp
 80120b6:	4631      	mov	r1, r6
 80120b8:	4628      	mov	r0, r5
 80120ba:	47b8      	blx	r7
 80120bc:	3001      	adds	r0, #1
 80120be:	f43f aeae 	beq.w	8011e1e <_printf_float+0xb6>
 80120c2:	f108 0801 	add.w	r8, r8, #1
 80120c6:	e7ec      	b.n	80120a2 <_printf_float+0x33a>
 80120c8:	4642      	mov	r2, r8
 80120ca:	4631      	mov	r1, r6
 80120cc:	4628      	mov	r0, r5
 80120ce:	47b8      	blx	r7
 80120d0:	3001      	adds	r0, #1
 80120d2:	d1c2      	bne.n	801205a <_printf_float+0x2f2>
 80120d4:	e6a3      	b.n	8011e1e <_printf_float+0xb6>
 80120d6:	2301      	movs	r3, #1
 80120d8:	4631      	mov	r1, r6
 80120da:	4628      	mov	r0, r5
 80120dc:	9206      	str	r2, [sp, #24]
 80120de:	47b8      	blx	r7
 80120e0:	3001      	adds	r0, #1
 80120e2:	f43f ae9c 	beq.w	8011e1e <_printf_float+0xb6>
 80120e6:	9a06      	ldr	r2, [sp, #24]
 80120e8:	f10b 0b01 	add.w	fp, fp, #1
 80120ec:	e7bb      	b.n	8012066 <_printf_float+0x2fe>
 80120ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120f2:	4631      	mov	r1, r6
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	d1c0      	bne.n	801207e <_printf_float+0x316>
 80120fc:	e68f      	b.n	8011e1e <_printf_float+0xb6>
 80120fe:	9a06      	ldr	r2, [sp, #24]
 8012100:	464b      	mov	r3, r9
 8012102:	4442      	add	r2, r8
 8012104:	4631      	mov	r1, r6
 8012106:	4628      	mov	r0, r5
 8012108:	47b8      	blx	r7
 801210a:	3001      	adds	r0, #1
 801210c:	d1c3      	bne.n	8012096 <_printf_float+0x32e>
 801210e:	e686      	b.n	8011e1e <_printf_float+0xb6>
 8012110:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012114:	f1ba 0f01 	cmp.w	sl, #1
 8012118:	dc01      	bgt.n	801211e <_printf_float+0x3b6>
 801211a:	07db      	lsls	r3, r3, #31
 801211c:	d536      	bpl.n	801218c <_printf_float+0x424>
 801211e:	2301      	movs	r3, #1
 8012120:	4642      	mov	r2, r8
 8012122:	4631      	mov	r1, r6
 8012124:	4628      	mov	r0, r5
 8012126:	47b8      	blx	r7
 8012128:	3001      	adds	r0, #1
 801212a:	f43f ae78 	beq.w	8011e1e <_printf_float+0xb6>
 801212e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012132:	4631      	mov	r1, r6
 8012134:	4628      	mov	r0, r5
 8012136:	47b8      	blx	r7
 8012138:	3001      	adds	r0, #1
 801213a:	f43f ae70 	beq.w	8011e1e <_printf_float+0xb6>
 801213e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012142:	2200      	movs	r2, #0
 8012144:	2300      	movs	r3, #0
 8012146:	f10a 3aff 	add.w	sl, sl, #4294967295
 801214a:	f7ee fce5 	bl	8000b18 <__aeabi_dcmpeq>
 801214e:	b9c0      	cbnz	r0, 8012182 <_printf_float+0x41a>
 8012150:	4653      	mov	r3, sl
 8012152:	f108 0201 	add.w	r2, r8, #1
 8012156:	4631      	mov	r1, r6
 8012158:	4628      	mov	r0, r5
 801215a:	47b8      	blx	r7
 801215c:	3001      	adds	r0, #1
 801215e:	d10c      	bne.n	801217a <_printf_float+0x412>
 8012160:	e65d      	b.n	8011e1e <_printf_float+0xb6>
 8012162:	2301      	movs	r3, #1
 8012164:	465a      	mov	r2, fp
 8012166:	4631      	mov	r1, r6
 8012168:	4628      	mov	r0, r5
 801216a:	47b8      	blx	r7
 801216c:	3001      	adds	r0, #1
 801216e:	f43f ae56 	beq.w	8011e1e <_printf_float+0xb6>
 8012172:	f108 0801 	add.w	r8, r8, #1
 8012176:	45d0      	cmp	r8, sl
 8012178:	dbf3      	blt.n	8012162 <_printf_float+0x3fa>
 801217a:	464b      	mov	r3, r9
 801217c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012180:	e6df      	b.n	8011f42 <_printf_float+0x1da>
 8012182:	f04f 0800 	mov.w	r8, #0
 8012186:	f104 0b1a 	add.w	fp, r4, #26
 801218a:	e7f4      	b.n	8012176 <_printf_float+0x40e>
 801218c:	2301      	movs	r3, #1
 801218e:	4642      	mov	r2, r8
 8012190:	e7e1      	b.n	8012156 <_printf_float+0x3ee>
 8012192:	2301      	movs	r3, #1
 8012194:	464a      	mov	r2, r9
 8012196:	4631      	mov	r1, r6
 8012198:	4628      	mov	r0, r5
 801219a:	47b8      	blx	r7
 801219c:	3001      	adds	r0, #1
 801219e:	f43f ae3e 	beq.w	8011e1e <_printf_float+0xb6>
 80121a2:	f108 0801 	add.w	r8, r8, #1
 80121a6:	68e3      	ldr	r3, [r4, #12]
 80121a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80121aa:	1a5b      	subs	r3, r3, r1
 80121ac:	4543      	cmp	r3, r8
 80121ae:	dcf0      	bgt.n	8012192 <_printf_float+0x42a>
 80121b0:	e6fc      	b.n	8011fac <_printf_float+0x244>
 80121b2:	f04f 0800 	mov.w	r8, #0
 80121b6:	f104 0919 	add.w	r9, r4, #25
 80121ba:	e7f4      	b.n	80121a6 <_printf_float+0x43e>

080121bc <_printf_common>:
 80121bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121c0:	4616      	mov	r6, r2
 80121c2:	4698      	mov	r8, r3
 80121c4:	688a      	ldr	r2, [r1, #8]
 80121c6:	690b      	ldr	r3, [r1, #16]
 80121c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80121cc:	4293      	cmp	r3, r2
 80121ce:	bfb8      	it	lt
 80121d0:	4613      	movlt	r3, r2
 80121d2:	6033      	str	r3, [r6, #0]
 80121d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80121d8:	4607      	mov	r7, r0
 80121da:	460c      	mov	r4, r1
 80121dc:	b10a      	cbz	r2, 80121e2 <_printf_common+0x26>
 80121de:	3301      	adds	r3, #1
 80121e0:	6033      	str	r3, [r6, #0]
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	0699      	lsls	r1, r3, #26
 80121e6:	bf42      	ittt	mi
 80121e8:	6833      	ldrmi	r3, [r6, #0]
 80121ea:	3302      	addmi	r3, #2
 80121ec:	6033      	strmi	r3, [r6, #0]
 80121ee:	6825      	ldr	r5, [r4, #0]
 80121f0:	f015 0506 	ands.w	r5, r5, #6
 80121f4:	d106      	bne.n	8012204 <_printf_common+0x48>
 80121f6:	f104 0a19 	add.w	sl, r4, #25
 80121fa:	68e3      	ldr	r3, [r4, #12]
 80121fc:	6832      	ldr	r2, [r6, #0]
 80121fe:	1a9b      	subs	r3, r3, r2
 8012200:	42ab      	cmp	r3, r5
 8012202:	dc26      	bgt.n	8012252 <_printf_common+0x96>
 8012204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012208:	6822      	ldr	r2, [r4, #0]
 801220a:	3b00      	subs	r3, #0
 801220c:	bf18      	it	ne
 801220e:	2301      	movne	r3, #1
 8012210:	0692      	lsls	r2, r2, #26
 8012212:	d42b      	bmi.n	801226c <_printf_common+0xb0>
 8012214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012218:	4641      	mov	r1, r8
 801221a:	4638      	mov	r0, r7
 801221c:	47c8      	blx	r9
 801221e:	3001      	adds	r0, #1
 8012220:	d01e      	beq.n	8012260 <_printf_common+0xa4>
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	6922      	ldr	r2, [r4, #16]
 8012226:	f003 0306 	and.w	r3, r3, #6
 801222a:	2b04      	cmp	r3, #4
 801222c:	bf02      	ittt	eq
 801222e:	68e5      	ldreq	r5, [r4, #12]
 8012230:	6833      	ldreq	r3, [r6, #0]
 8012232:	1aed      	subeq	r5, r5, r3
 8012234:	68a3      	ldr	r3, [r4, #8]
 8012236:	bf0c      	ite	eq
 8012238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801223c:	2500      	movne	r5, #0
 801223e:	4293      	cmp	r3, r2
 8012240:	bfc4      	itt	gt
 8012242:	1a9b      	subgt	r3, r3, r2
 8012244:	18ed      	addgt	r5, r5, r3
 8012246:	2600      	movs	r6, #0
 8012248:	341a      	adds	r4, #26
 801224a:	42b5      	cmp	r5, r6
 801224c:	d11a      	bne.n	8012284 <_printf_common+0xc8>
 801224e:	2000      	movs	r0, #0
 8012250:	e008      	b.n	8012264 <_printf_common+0xa8>
 8012252:	2301      	movs	r3, #1
 8012254:	4652      	mov	r2, sl
 8012256:	4641      	mov	r1, r8
 8012258:	4638      	mov	r0, r7
 801225a:	47c8      	blx	r9
 801225c:	3001      	adds	r0, #1
 801225e:	d103      	bne.n	8012268 <_printf_common+0xac>
 8012260:	f04f 30ff 	mov.w	r0, #4294967295
 8012264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012268:	3501      	adds	r5, #1
 801226a:	e7c6      	b.n	80121fa <_printf_common+0x3e>
 801226c:	18e1      	adds	r1, r4, r3
 801226e:	1c5a      	adds	r2, r3, #1
 8012270:	2030      	movs	r0, #48	@ 0x30
 8012272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012276:	4422      	add	r2, r4
 8012278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801227c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012280:	3302      	adds	r3, #2
 8012282:	e7c7      	b.n	8012214 <_printf_common+0x58>
 8012284:	2301      	movs	r3, #1
 8012286:	4622      	mov	r2, r4
 8012288:	4641      	mov	r1, r8
 801228a:	4638      	mov	r0, r7
 801228c:	47c8      	blx	r9
 801228e:	3001      	adds	r0, #1
 8012290:	d0e6      	beq.n	8012260 <_printf_common+0xa4>
 8012292:	3601      	adds	r6, #1
 8012294:	e7d9      	b.n	801224a <_printf_common+0x8e>
	...

08012298 <_printf_i>:
 8012298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801229c:	7e0f      	ldrb	r7, [r1, #24]
 801229e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80122a0:	2f78      	cmp	r7, #120	@ 0x78
 80122a2:	4691      	mov	r9, r2
 80122a4:	4680      	mov	r8, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	469a      	mov	sl, r3
 80122aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80122ae:	d807      	bhi.n	80122c0 <_printf_i+0x28>
 80122b0:	2f62      	cmp	r7, #98	@ 0x62
 80122b2:	d80a      	bhi.n	80122ca <_printf_i+0x32>
 80122b4:	2f00      	cmp	r7, #0
 80122b6:	f000 80d1 	beq.w	801245c <_printf_i+0x1c4>
 80122ba:	2f58      	cmp	r7, #88	@ 0x58
 80122bc:	f000 80b8 	beq.w	8012430 <_printf_i+0x198>
 80122c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80122c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80122c8:	e03a      	b.n	8012340 <_printf_i+0xa8>
 80122ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80122ce:	2b15      	cmp	r3, #21
 80122d0:	d8f6      	bhi.n	80122c0 <_printf_i+0x28>
 80122d2:	a101      	add	r1, pc, #4	@ (adr r1, 80122d8 <_printf_i+0x40>)
 80122d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122d8:	08012331 	.word	0x08012331
 80122dc:	08012345 	.word	0x08012345
 80122e0:	080122c1 	.word	0x080122c1
 80122e4:	080122c1 	.word	0x080122c1
 80122e8:	080122c1 	.word	0x080122c1
 80122ec:	080122c1 	.word	0x080122c1
 80122f0:	08012345 	.word	0x08012345
 80122f4:	080122c1 	.word	0x080122c1
 80122f8:	080122c1 	.word	0x080122c1
 80122fc:	080122c1 	.word	0x080122c1
 8012300:	080122c1 	.word	0x080122c1
 8012304:	08012443 	.word	0x08012443
 8012308:	0801236f 	.word	0x0801236f
 801230c:	080123fd 	.word	0x080123fd
 8012310:	080122c1 	.word	0x080122c1
 8012314:	080122c1 	.word	0x080122c1
 8012318:	08012465 	.word	0x08012465
 801231c:	080122c1 	.word	0x080122c1
 8012320:	0801236f 	.word	0x0801236f
 8012324:	080122c1 	.word	0x080122c1
 8012328:	080122c1 	.word	0x080122c1
 801232c:	08012405 	.word	0x08012405
 8012330:	6833      	ldr	r3, [r6, #0]
 8012332:	1d1a      	adds	r2, r3, #4
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	6032      	str	r2, [r6, #0]
 8012338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801233c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012340:	2301      	movs	r3, #1
 8012342:	e09c      	b.n	801247e <_printf_i+0x1e6>
 8012344:	6833      	ldr	r3, [r6, #0]
 8012346:	6820      	ldr	r0, [r4, #0]
 8012348:	1d19      	adds	r1, r3, #4
 801234a:	6031      	str	r1, [r6, #0]
 801234c:	0606      	lsls	r6, r0, #24
 801234e:	d501      	bpl.n	8012354 <_printf_i+0xbc>
 8012350:	681d      	ldr	r5, [r3, #0]
 8012352:	e003      	b.n	801235c <_printf_i+0xc4>
 8012354:	0645      	lsls	r5, r0, #25
 8012356:	d5fb      	bpl.n	8012350 <_printf_i+0xb8>
 8012358:	f9b3 5000 	ldrsh.w	r5, [r3]
 801235c:	2d00      	cmp	r5, #0
 801235e:	da03      	bge.n	8012368 <_printf_i+0xd0>
 8012360:	232d      	movs	r3, #45	@ 0x2d
 8012362:	426d      	negs	r5, r5
 8012364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012368:	4858      	ldr	r0, [pc, #352]	@ (80124cc <_printf_i+0x234>)
 801236a:	230a      	movs	r3, #10
 801236c:	e011      	b.n	8012392 <_printf_i+0xfa>
 801236e:	6821      	ldr	r1, [r4, #0]
 8012370:	6833      	ldr	r3, [r6, #0]
 8012372:	0608      	lsls	r0, r1, #24
 8012374:	f853 5b04 	ldr.w	r5, [r3], #4
 8012378:	d402      	bmi.n	8012380 <_printf_i+0xe8>
 801237a:	0649      	lsls	r1, r1, #25
 801237c:	bf48      	it	mi
 801237e:	b2ad      	uxthmi	r5, r5
 8012380:	2f6f      	cmp	r7, #111	@ 0x6f
 8012382:	4852      	ldr	r0, [pc, #328]	@ (80124cc <_printf_i+0x234>)
 8012384:	6033      	str	r3, [r6, #0]
 8012386:	bf14      	ite	ne
 8012388:	230a      	movne	r3, #10
 801238a:	2308      	moveq	r3, #8
 801238c:	2100      	movs	r1, #0
 801238e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012392:	6866      	ldr	r6, [r4, #4]
 8012394:	60a6      	str	r6, [r4, #8]
 8012396:	2e00      	cmp	r6, #0
 8012398:	db05      	blt.n	80123a6 <_printf_i+0x10e>
 801239a:	6821      	ldr	r1, [r4, #0]
 801239c:	432e      	orrs	r6, r5
 801239e:	f021 0104 	bic.w	r1, r1, #4
 80123a2:	6021      	str	r1, [r4, #0]
 80123a4:	d04b      	beq.n	801243e <_printf_i+0x1a6>
 80123a6:	4616      	mov	r6, r2
 80123a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80123ac:	fb03 5711 	mls	r7, r3, r1, r5
 80123b0:	5dc7      	ldrb	r7, [r0, r7]
 80123b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80123b6:	462f      	mov	r7, r5
 80123b8:	42bb      	cmp	r3, r7
 80123ba:	460d      	mov	r5, r1
 80123bc:	d9f4      	bls.n	80123a8 <_printf_i+0x110>
 80123be:	2b08      	cmp	r3, #8
 80123c0:	d10b      	bne.n	80123da <_printf_i+0x142>
 80123c2:	6823      	ldr	r3, [r4, #0]
 80123c4:	07df      	lsls	r7, r3, #31
 80123c6:	d508      	bpl.n	80123da <_printf_i+0x142>
 80123c8:	6923      	ldr	r3, [r4, #16]
 80123ca:	6861      	ldr	r1, [r4, #4]
 80123cc:	4299      	cmp	r1, r3
 80123ce:	bfde      	ittt	le
 80123d0:	2330      	movle	r3, #48	@ 0x30
 80123d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80123d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80123da:	1b92      	subs	r2, r2, r6
 80123dc:	6122      	str	r2, [r4, #16]
 80123de:	f8cd a000 	str.w	sl, [sp]
 80123e2:	464b      	mov	r3, r9
 80123e4:	aa03      	add	r2, sp, #12
 80123e6:	4621      	mov	r1, r4
 80123e8:	4640      	mov	r0, r8
 80123ea:	f7ff fee7 	bl	80121bc <_printf_common>
 80123ee:	3001      	adds	r0, #1
 80123f0:	d14a      	bne.n	8012488 <_printf_i+0x1f0>
 80123f2:	f04f 30ff 	mov.w	r0, #4294967295
 80123f6:	b004      	add	sp, #16
 80123f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	f043 0320 	orr.w	r3, r3, #32
 8012402:	6023      	str	r3, [r4, #0]
 8012404:	4832      	ldr	r0, [pc, #200]	@ (80124d0 <_printf_i+0x238>)
 8012406:	2778      	movs	r7, #120	@ 0x78
 8012408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	6831      	ldr	r1, [r6, #0]
 8012410:	061f      	lsls	r7, r3, #24
 8012412:	f851 5b04 	ldr.w	r5, [r1], #4
 8012416:	d402      	bmi.n	801241e <_printf_i+0x186>
 8012418:	065f      	lsls	r7, r3, #25
 801241a:	bf48      	it	mi
 801241c:	b2ad      	uxthmi	r5, r5
 801241e:	6031      	str	r1, [r6, #0]
 8012420:	07d9      	lsls	r1, r3, #31
 8012422:	bf44      	itt	mi
 8012424:	f043 0320 	orrmi.w	r3, r3, #32
 8012428:	6023      	strmi	r3, [r4, #0]
 801242a:	b11d      	cbz	r5, 8012434 <_printf_i+0x19c>
 801242c:	2310      	movs	r3, #16
 801242e:	e7ad      	b.n	801238c <_printf_i+0xf4>
 8012430:	4826      	ldr	r0, [pc, #152]	@ (80124cc <_printf_i+0x234>)
 8012432:	e7e9      	b.n	8012408 <_printf_i+0x170>
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	f023 0320 	bic.w	r3, r3, #32
 801243a:	6023      	str	r3, [r4, #0]
 801243c:	e7f6      	b.n	801242c <_printf_i+0x194>
 801243e:	4616      	mov	r6, r2
 8012440:	e7bd      	b.n	80123be <_printf_i+0x126>
 8012442:	6833      	ldr	r3, [r6, #0]
 8012444:	6825      	ldr	r5, [r4, #0]
 8012446:	6961      	ldr	r1, [r4, #20]
 8012448:	1d18      	adds	r0, r3, #4
 801244a:	6030      	str	r0, [r6, #0]
 801244c:	062e      	lsls	r6, r5, #24
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	d501      	bpl.n	8012456 <_printf_i+0x1be>
 8012452:	6019      	str	r1, [r3, #0]
 8012454:	e002      	b.n	801245c <_printf_i+0x1c4>
 8012456:	0668      	lsls	r0, r5, #25
 8012458:	d5fb      	bpl.n	8012452 <_printf_i+0x1ba>
 801245a:	8019      	strh	r1, [r3, #0]
 801245c:	2300      	movs	r3, #0
 801245e:	6123      	str	r3, [r4, #16]
 8012460:	4616      	mov	r6, r2
 8012462:	e7bc      	b.n	80123de <_printf_i+0x146>
 8012464:	6833      	ldr	r3, [r6, #0]
 8012466:	1d1a      	adds	r2, r3, #4
 8012468:	6032      	str	r2, [r6, #0]
 801246a:	681e      	ldr	r6, [r3, #0]
 801246c:	6862      	ldr	r2, [r4, #4]
 801246e:	2100      	movs	r1, #0
 8012470:	4630      	mov	r0, r6
 8012472:	f7ed fed5 	bl	8000220 <memchr>
 8012476:	b108      	cbz	r0, 801247c <_printf_i+0x1e4>
 8012478:	1b80      	subs	r0, r0, r6
 801247a:	6060      	str	r0, [r4, #4]
 801247c:	6863      	ldr	r3, [r4, #4]
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	2300      	movs	r3, #0
 8012482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012486:	e7aa      	b.n	80123de <_printf_i+0x146>
 8012488:	6923      	ldr	r3, [r4, #16]
 801248a:	4632      	mov	r2, r6
 801248c:	4649      	mov	r1, r9
 801248e:	4640      	mov	r0, r8
 8012490:	47d0      	blx	sl
 8012492:	3001      	adds	r0, #1
 8012494:	d0ad      	beq.n	80123f2 <_printf_i+0x15a>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	079b      	lsls	r3, r3, #30
 801249a:	d413      	bmi.n	80124c4 <_printf_i+0x22c>
 801249c:	68e0      	ldr	r0, [r4, #12]
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	4298      	cmp	r0, r3
 80124a2:	bfb8      	it	lt
 80124a4:	4618      	movlt	r0, r3
 80124a6:	e7a6      	b.n	80123f6 <_printf_i+0x15e>
 80124a8:	2301      	movs	r3, #1
 80124aa:	4632      	mov	r2, r6
 80124ac:	4649      	mov	r1, r9
 80124ae:	4640      	mov	r0, r8
 80124b0:	47d0      	blx	sl
 80124b2:	3001      	adds	r0, #1
 80124b4:	d09d      	beq.n	80123f2 <_printf_i+0x15a>
 80124b6:	3501      	adds	r5, #1
 80124b8:	68e3      	ldr	r3, [r4, #12]
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	1a5b      	subs	r3, r3, r1
 80124be:	42ab      	cmp	r3, r5
 80124c0:	dcf2      	bgt.n	80124a8 <_printf_i+0x210>
 80124c2:	e7eb      	b.n	801249c <_printf_i+0x204>
 80124c4:	2500      	movs	r5, #0
 80124c6:	f104 0619 	add.w	r6, r4, #25
 80124ca:	e7f5      	b.n	80124b8 <_printf_i+0x220>
 80124cc:	08018dae 	.word	0x08018dae
 80124d0:	08018dbf 	.word	0x08018dbf

080124d4 <_scanf_float>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	b087      	sub	sp, #28
 80124da:	4691      	mov	r9, r2
 80124dc:	9303      	str	r3, [sp, #12]
 80124de:	688b      	ldr	r3, [r1, #8]
 80124e0:	1e5a      	subs	r2, r3, #1
 80124e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80124e6:	bf81      	itttt	hi
 80124e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80124ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80124f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80124f4:	608b      	strhi	r3, [r1, #8]
 80124f6:	680b      	ldr	r3, [r1, #0]
 80124f8:	460a      	mov	r2, r1
 80124fa:	f04f 0500 	mov.w	r5, #0
 80124fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8012502:	f842 3b1c 	str.w	r3, [r2], #28
 8012506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801250a:	4680      	mov	r8, r0
 801250c:	460c      	mov	r4, r1
 801250e:	bf98      	it	ls
 8012510:	f04f 0b00 	movls.w	fp, #0
 8012514:	9201      	str	r2, [sp, #4]
 8012516:	4616      	mov	r6, r2
 8012518:	46aa      	mov	sl, r5
 801251a:	462f      	mov	r7, r5
 801251c:	9502      	str	r5, [sp, #8]
 801251e:	68a2      	ldr	r2, [r4, #8]
 8012520:	b15a      	cbz	r2, 801253a <_scanf_float+0x66>
 8012522:	f8d9 3000 	ldr.w	r3, [r9]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b4e      	cmp	r3, #78	@ 0x4e
 801252a:	d863      	bhi.n	80125f4 <_scanf_float+0x120>
 801252c:	2b40      	cmp	r3, #64	@ 0x40
 801252e:	d83b      	bhi.n	80125a8 <_scanf_float+0xd4>
 8012530:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8012534:	b2c8      	uxtb	r0, r1
 8012536:	280e      	cmp	r0, #14
 8012538:	d939      	bls.n	80125ae <_scanf_float+0xda>
 801253a:	b11f      	cbz	r7, 8012544 <_scanf_float+0x70>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012542:	6023      	str	r3, [r4, #0]
 8012544:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012548:	f1ba 0f01 	cmp.w	sl, #1
 801254c:	f200 8114 	bhi.w	8012778 <_scanf_float+0x2a4>
 8012550:	9b01      	ldr	r3, [sp, #4]
 8012552:	429e      	cmp	r6, r3
 8012554:	f200 8105 	bhi.w	8012762 <_scanf_float+0x28e>
 8012558:	2001      	movs	r0, #1
 801255a:	b007      	add	sp, #28
 801255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012560:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8012564:	2a0d      	cmp	r2, #13
 8012566:	d8e8      	bhi.n	801253a <_scanf_float+0x66>
 8012568:	a101      	add	r1, pc, #4	@ (adr r1, 8012570 <_scanf_float+0x9c>)
 801256a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801256e:	bf00      	nop
 8012570:	080126b9 	.word	0x080126b9
 8012574:	0801253b 	.word	0x0801253b
 8012578:	0801253b 	.word	0x0801253b
 801257c:	0801253b 	.word	0x0801253b
 8012580:	08012715 	.word	0x08012715
 8012584:	080126ef 	.word	0x080126ef
 8012588:	0801253b 	.word	0x0801253b
 801258c:	0801253b 	.word	0x0801253b
 8012590:	080126c7 	.word	0x080126c7
 8012594:	0801253b 	.word	0x0801253b
 8012598:	0801253b 	.word	0x0801253b
 801259c:	0801253b 	.word	0x0801253b
 80125a0:	0801253b 	.word	0x0801253b
 80125a4:	08012683 	.word	0x08012683
 80125a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80125ac:	e7da      	b.n	8012564 <_scanf_float+0x90>
 80125ae:	290e      	cmp	r1, #14
 80125b0:	d8c3      	bhi.n	801253a <_scanf_float+0x66>
 80125b2:	a001      	add	r0, pc, #4	@ (adr r0, 80125b8 <_scanf_float+0xe4>)
 80125b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80125b8:	08012673 	.word	0x08012673
 80125bc:	0801253b 	.word	0x0801253b
 80125c0:	08012673 	.word	0x08012673
 80125c4:	08012703 	.word	0x08012703
 80125c8:	0801253b 	.word	0x0801253b
 80125cc:	08012615 	.word	0x08012615
 80125d0:	08012659 	.word	0x08012659
 80125d4:	08012659 	.word	0x08012659
 80125d8:	08012659 	.word	0x08012659
 80125dc:	08012659 	.word	0x08012659
 80125e0:	08012659 	.word	0x08012659
 80125e4:	08012659 	.word	0x08012659
 80125e8:	08012659 	.word	0x08012659
 80125ec:	08012659 	.word	0x08012659
 80125f0:	08012659 	.word	0x08012659
 80125f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80125f6:	d809      	bhi.n	801260c <_scanf_float+0x138>
 80125f8:	2b60      	cmp	r3, #96	@ 0x60
 80125fa:	d8b1      	bhi.n	8012560 <_scanf_float+0x8c>
 80125fc:	2b54      	cmp	r3, #84	@ 0x54
 80125fe:	d07b      	beq.n	80126f8 <_scanf_float+0x224>
 8012600:	2b59      	cmp	r3, #89	@ 0x59
 8012602:	d19a      	bne.n	801253a <_scanf_float+0x66>
 8012604:	2d07      	cmp	r5, #7
 8012606:	d198      	bne.n	801253a <_scanf_float+0x66>
 8012608:	2508      	movs	r5, #8
 801260a:	e02f      	b.n	801266c <_scanf_float+0x198>
 801260c:	2b74      	cmp	r3, #116	@ 0x74
 801260e:	d073      	beq.n	80126f8 <_scanf_float+0x224>
 8012610:	2b79      	cmp	r3, #121	@ 0x79
 8012612:	e7f6      	b.n	8012602 <_scanf_float+0x12e>
 8012614:	6821      	ldr	r1, [r4, #0]
 8012616:	05c8      	lsls	r0, r1, #23
 8012618:	d51e      	bpl.n	8012658 <_scanf_float+0x184>
 801261a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801261e:	6021      	str	r1, [r4, #0]
 8012620:	3701      	adds	r7, #1
 8012622:	f1bb 0f00 	cmp.w	fp, #0
 8012626:	d003      	beq.n	8012630 <_scanf_float+0x15c>
 8012628:	3201      	adds	r2, #1
 801262a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801262e:	60a2      	str	r2, [r4, #8]
 8012630:	68a3      	ldr	r3, [r4, #8]
 8012632:	3b01      	subs	r3, #1
 8012634:	60a3      	str	r3, [r4, #8]
 8012636:	6923      	ldr	r3, [r4, #16]
 8012638:	3301      	adds	r3, #1
 801263a:	6123      	str	r3, [r4, #16]
 801263c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012640:	3b01      	subs	r3, #1
 8012642:	2b00      	cmp	r3, #0
 8012644:	f8c9 3004 	str.w	r3, [r9, #4]
 8012648:	f340 8082 	ble.w	8012750 <_scanf_float+0x27c>
 801264c:	f8d9 3000 	ldr.w	r3, [r9]
 8012650:	3301      	adds	r3, #1
 8012652:	f8c9 3000 	str.w	r3, [r9]
 8012656:	e762      	b.n	801251e <_scanf_float+0x4a>
 8012658:	eb1a 0105 	adds.w	r1, sl, r5
 801265c:	f47f af6d 	bne.w	801253a <_scanf_float+0x66>
 8012660:	6822      	ldr	r2, [r4, #0]
 8012662:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8012666:	6022      	str	r2, [r4, #0]
 8012668:	460d      	mov	r5, r1
 801266a:	468a      	mov	sl, r1
 801266c:	f806 3b01 	strb.w	r3, [r6], #1
 8012670:	e7de      	b.n	8012630 <_scanf_float+0x15c>
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	0610      	lsls	r0, r2, #24
 8012676:	f57f af60 	bpl.w	801253a <_scanf_float+0x66>
 801267a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801267e:	6022      	str	r2, [r4, #0]
 8012680:	e7f4      	b.n	801266c <_scanf_float+0x198>
 8012682:	f1ba 0f00 	cmp.w	sl, #0
 8012686:	d10c      	bne.n	80126a2 <_scanf_float+0x1ce>
 8012688:	b977      	cbnz	r7, 80126a8 <_scanf_float+0x1d4>
 801268a:	6822      	ldr	r2, [r4, #0]
 801268c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012690:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012694:	d108      	bne.n	80126a8 <_scanf_float+0x1d4>
 8012696:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801269a:	6022      	str	r2, [r4, #0]
 801269c:	f04f 0a01 	mov.w	sl, #1
 80126a0:	e7e4      	b.n	801266c <_scanf_float+0x198>
 80126a2:	f1ba 0f02 	cmp.w	sl, #2
 80126a6:	d050      	beq.n	801274a <_scanf_float+0x276>
 80126a8:	2d01      	cmp	r5, #1
 80126aa:	d002      	beq.n	80126b2 <_scanf_float+0x1de>
 80126ac:	2d04      	cmp	r5, #4
 80126ae:	f47f af44 	bne.w	801253a <_scanf_float+0x66>
 80126b2:	3501      	adds	r5, #1
 80126b4:	b2ed      	uxtb	r5, r5
 80126b6:	e7d9      	b.n	801266c <_scanf_float+0x198>
 80126b8:	f1ba 0f01 	cmp.w	sl, #1
 80126bc:	f47f af3d 	bne.w	801253a <_scanf_float+0x66>
 80126c0:	f04f 0a02 	mov.w	sl, #2
 80126c4:	e7d2      	b.n	801266c <_scanf_float+0x198>
 80126c6:	b975      	cbnz	r5, 80126e6 <_scanf_float+0x212>
 80126c8:	2f00      	cmp	r7, #0
 80126ca:	f47f af37 	bne.w	801253c <_scanf_float+0x68>
 80126ce:	6822      	ldr	r2, [r4, #0]
 80126d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80126d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80126d8:	f040 8103 	bne.w	80128e2 <_scanf_float+0x40e>
 80126dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80126e0:	6022      	str	r2, [r4, #0]
 80126e2:	2501      	movs	r5, #1
 80126e4:	e7c2      	b.n	801266c <_scanf_float+0x198>
 80126e6:	2d03      	cmp	r5, #3
 80126e8:	d0e3      	beq.n	80126b2 <_scanf_float+0x1de>
 80126ea:	2d05      	cmp	r5, #5
 80126ec:	e7df      	b.n	80126ae <_scanf_float+0x1da>
 80126ee:	2d02      	cmp	r5, #2
 80126f0:	f47f af23 	bne.w	801253a <_scanf_float+0x66>
 80126f4:	2503      	movs	r5, #3
 80126f6:	e7b9      	b.n	801266c <_scanf_float+0x198>
 80126f8:	2d06      	cmp	r5, #6
 80126fa:	f47f af1e 	bne.w	801253a <_scanf_float+0x66>
 80126fe:	2507      	movs	r5, #7
 8012700:	e7b4      	b.n	801266c <_scanf_float+0x198>
 8012702:	6822      	ldr	r2, [r4, #0]
 8012704:	0591      	lsls	r1, r2, #22
 8012706:	f57f af18 	bpl.w	801253a <_scanf_float+0x66>
 801270a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801270e:	6022      	str	r2, [r4, #0]
 8012710:	9702      	str	r7, [sp, #8]
 8012712:	e7ab      	b.n	801266c <_scanf_float+0x198>
 8012714:	6822      	ldr	r2, [r4, #0]
 8012716:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801271a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801271e:	d005      	beq.n	801272c <_scanf_float+0x258>
 8012720:	0550      	lsls	r0, r2, #21
 8012722:	f57f af0a 	bpl.w	801253a <_scanf_float+0x66>
 8012726:	2f00      	cmp	r7, #0
 8012728:	f000 80db 	beq.w	80128e2 <_scanf_float+0x40e>
 801272c:	0591      	lsls	r1, r2, #22
 801272e:	bf58      	it	pl
 8012730:	9902      	ldrpl	r1, [sp, #8]
 8012732:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012736:	bf58      	it	pl
 8012738:	1a79      	subpl	r1, r7, r1
 801273a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801273e:	bf58      	it	pl
 8012740:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012744:	6022      	str	r2, [r4, #0]
 8012746:	2700      	movs	r7, #0
 8012748:	e790      	b.n	801266c <_scanf_float+0x198>
 801274a:	f04f 0a03 	mov.w	sl, #3
 801274e:	e78d      	b.n	801266c <_scanf_float+0x198>
 8012750:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012754:	4649      	mov	r1, r9
 8012756:	4640      	mov	r0, r8
 8012758:	4798      	blx	r3
 801275a:	2800      	cmp	r0, #0
 801275c:	f43f aedf 	beq.w	801251e <_scanf_float+0x4a>
 8012760:	e6eb      	b.n	801253a <_scanf_float+0x66>
 8012762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801276a:	464a      	mov	r2, r9
 801276c:	4640      	mov	r0, r8
 801276e:	4798      	blx	r3
 8012770:	6923      	ldr	r3, [r4, #16]
 8012772:	3b01      	subs	r3, #1
 8012774:	6123      	str	r3, [r4, #16]
 8012776:	e6eb      	b.n	8012550 <_scanf_float+0x7c>
 8012778:	1e6b      	subs	r3, r5, #1
 801277a:	2b06      	cmp	r3, #6
 801277c:	d824      	bhi.n	80127c8 <_scanf_float+0x2f4>
 801277e:	2d02      	cmp	r5, #2
 8012780:	d836      	bhi.n	80127f0 <_scanf_float+0x31c>
 8012782:	9b01      	ldr	r3, [sp, #4]
 8012784:	429e      	cmp	r6, r3
 8012786:	f67f aee7 	bls.w	8012558 <_scanf_float+0x84>
 801278a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801278e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012792:	464a      	mov	r2, r9
 8012794:	4640      	mov	r0, r8
 8012796:	4798      	blx	r3
 8012798:	6923      	ldr	r3, [r4, #16]
 801279a:	3b01      	subs	r3, #1
 801279c:	6123      	str	r3, [r4, #16]
 801279e:	e7f0      	b.n	8012782 <_scanf_float+0x2ae>
 80127a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80127a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80127a8:	464a      	mov	r2, r9
 80127aa:	4640      	mov	r0, r8
 80127ac:	4798      	blx	r3
 80127ae:	6923      	ldr	r3, [r4, #16]
 80127b0:	3b01      	subs	r3, #1
 80127b2:	6123      	str	r3, [r4, #16]
 80127b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127b8:	fa5f fa8a 	uxtb.w	sl, sl
 80127bc:	f1ba 0f02 	cmp.w	sl, #2
 80127c0:	d1ee      	bne.n	80127a0 <_scanf_float+0x2cc>
 80127c2:	3d03      	subs	r5, #3
 80127c4:	b2ed      	uxtb	r5, r5
 80127c6:	1b76      	subs	r6, r6, r5
 80127c8:	6823      	ldr	r3, [r4, #0]
 80127ca:	05da      	lsls	r2, r3, #23
 80127cc:	d530      	bpl.n	8012830 <_scanf_float+0x35c>
 80127ce:	055b      	lsls	r3, r3, #21
 80127d0:	d511      	bpl.n	80127f6 <_scanf_float+0x322>
 80127d2:	9b01      	ldr	r3, [sp, #4]
 80127d4:	429e      	cmp	r6, r3
 80127d6:	f67f aebf 	bls.w	8012558 <_scanf_float+0x84>
 80127da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80127de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80127e2:	464a      	mov	r2, r9
 80127e4:	4640      	mov	r0, r8
 80127e6:	4798      	blx	r3
 80127e8:	6923      	ldr	r3, [r4, #16]
 80127ea:	3b01      	subs	r3, #1
 80127ec:	6123      	str	r3, [r4, #16]
 80127ee:	e7f0      	b.n	80127d2 <_scanf_float+0x2fe>
 80127f0:	46aa      	mov	sl, r5
 80127f2:	46b3      	mov	fp, r6
 80127f4:	e7de      	b.n	80127b4 <_scanf_float+0x2e0>
 80127f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80127fa:	6923      	ldr	r3, [r4, #16]
 80127fc:	2965      	cmp	r1, #101	@ 0x65
 80127fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8012802:	f106 35ff 	add.w	r5, r6, #4294967295
 8012806:	6123      	str	r3, [r4, #16]
 8012808:	d00c      	beq.n	8012824 <_scanf_float+0x350>
 801280a:	2945      	cmp	r1, #69	@ 0x45
 801280c:	d00a      	beq.n	8012824 <_scanf_float+0x350>
 801280e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012812:	464a      	mov	r2, r9
 8012814:	4640      	mov	r0, r8
 8012816:	4798      	blx	r3
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801281e:	3b01      	subs	r3, #1
 8012820:	1eb5      	subs	r5, r6, #2
 8012822:	6123      	str	r3, [r4, #16]
 8012824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012828:	464a      	mov	r2, r9
 801282a:	4640      	mov	r0, r8
 801282c:	4798      	blx	r3
 801282e:	462e      	mov	r6, r5
 8012830:	6822      	ldr	r2, [r4, #0]
 8012832:	f012 0210 	ands.w	r2, r2, #16
 8012836:	d001      	beq.n	801283c <_scanf_float+0x368>
 8012838:	2000      	movs	r0, #0
 801283a:	e68e      	b.n	801255a <_scanf_float+0x86>
 801283c:	7032      	strb	r2, [r6, #0]
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012848:	d125      	bne.n	8012896 <_scanf_float+0x3c2>
 801284a:	9b02      	ldr	r3, [sp, #8]
 801284c:	429f      	cmp	r7, r3
 801284e:	d00a      	beq.n	8012866 <_scanf_float+0x392>
 8012850:	1bda      	subs	r2, r3, r7
 8012852:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8012856:	429e      	cmp	r6, r3
 8012858:	bf28      	it	cs
 801285a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801285e:	4922      	ldr	r1, [pc, #136]	@ (80128e8 <_scanf_float+0x414>)
 8012860:	4630      	mov	r0, r6
 8012862:	f000 f93d 	bl	8012ae0 <siprintf>
 8012866:	9901      	ldr	r1, [sp, #4]
 8012868:	2200      	movs	r2, #0
 801286a:	4640      	mov	r0, r8
 801286c:	f002 fc94 	bl	8015198 <_strtod_r>
 8012870:	9b03      	ldr	r3, [sp, #12]
 8012872:	6821      	ldr	r1, [r4, #0]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f011 0f02 	tst.w	r1, #2
 801287a:	ec57 6b10 	vmov	r6, r7, d0
 801287e:	f103 0204 	add.w	r2, r3, #4
 8012882:	d015      	beq.n	80128b0 <_scanf_float+0x3dc>
 8012884:	9903      	ldr	r1, [sp, #12]
 8012886:	600a      	str	r2, [r1, #0]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	e9c3 6700 	strd	r6, r7, [r3]
 801288e:	68e3      	ldr	r3, [r4, #12]
 8012890:	3301      	adds	r3, #1
 8012892:	60e3      	str	r3, [r4, #12]
 8012894:	e7d0      	b.n	8012838 <_scanf_float+0x364>
 8012896:	9b04      	ldr	r3, [sp, #16]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d0e4      	beq.n	8012866 <_scanf_float+0x392>
 801289c:	9905      	ldr	r1, [sp, #20]
 801289e:	230a      	movs	r3, #10
 80128a0:	3101      	adds	r1, #1
 80128a2:	4640      	mov	r0, r8
 80128a4:	f002 fcf8 	bl	8015298 <_strtol_r>
 80128a8:	9b04      	ldr	r3, [sp, #16]
 80128aa:	9e05      	ldr	r6, [sp, #20]
 80128ac:	1ac2      	subs	r2, r0, r3
 80128ae:	e7d0      	b.n	8012852 <_scanf_float+0x37e>
 80128b0:	f011 0f04 	tst.w	r1, #4
 80128b4:	9903      	ldr	r1, [sp, #12]
 80128b6:	600a      	str	r2, [r1, #0]
 80128b8:	d1e6      	bne.n	8012888 <_scanf_float+0x3b4>
 80128ba:	681d      	ldr	r5, [r3, #0]
 80128bc:	4632      	mov	r2, r6
 80128be:	463b      	mov	r3, r7
 80128c0:	4630      	mov	r0, r6
 80128c2:	4639      	mov	r1, r7
 80128c4:	f7ee f95a 	bl	8000b7c <__aeabi_dcmpun>
 80128c8:	b128      	cbz	r0, 80128d6 <_scanf_float+0x402>
 80128ca:	4808      	ldr	r0, [pc, #32]	@ (80128ec <_scanf_float+0x418>)
 80128cc:	f000 fa5a 	bl	8012d84 <nanf>
 80128d0:	ed85 0a00 	vstr	s0, [r5]
 80128d4:	e7db      	b.n	801288e <_scanf_float+0x3ba>
 80128d6:	4630      	mov	r0, r6
 80128d8:	4639      	mov	r1, r7
 80128da:	f7ee f9ad 	bl	8000c38 <__aeabi_d2f>
 80128de:	6028      	str	r0, [r5, #0]
 80128e0:	e7d5      	b.n	801288e <_scanf_float+0x3ba>
 80128e2:	2700      	movs	r7, #0
 80128e4:	e62e      	b.n	8012544 <_scanf_float+0x70>
 80128e6:	bf00      	nop
 80128e8:	08018dd0 	.word	0x08018dd0
 80128ec:	08018f11 	.word	0x08018f11

080128f0 <std>:
 80128f0:	2300      	movs	r3, #0
 80128f2:	b510      	push	{r4, lr}
 80128f4:	4604      	mov	r4, r0
 80128f6:	e9c0 3300 	strd	r3, r3, [r0]
 80128fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128fe:	6083      	str	r3, [r0, #8]
 8012900:	8181      	strh	r1, [r0, #12]
 8012902:	6643      	str	r3, [r0, #100]	@ 0x64
 8012904:	81c2      	strh	r2, [r0, #14]
 8012906:	6183      	str	r3, [r0, #24]
 8012908:	4619      	mov	r1, r3
 801290a:	2208      	movs	r2, #8
 801290c:	305c      	adds	r0, #92	@ 0x5c
 801290e:	f000 f94c 	bl	8012baa <memset>
 8012912:	4b0d      	ldr	r3, [pc, #52]	@ (8012948 <std+0x58>)
 8012914:	6263      	str	r3, [r4, #36]	@ 0x24
 8012916:	4b0d      	ldr	r3, [pc, #52]	@ (801294c <std+0x5c>)
 8012918:	62a3      	str	r3, [r4, #40]	@ 0x28
 801291a:	4b0d      	ldr	r3, [pc, #52]	@ (8012950 <std+0x60>)
 801291c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801291e:	4b0d      	ldr	r3, [pc, #52]	@ (8012954 <std+0x64>)
 8012920:	6323      	str	r3, [r4, #48]	@ 0x30
 8012922:	4b0d      	ldr	r3, [pc, #52]	@ (8012958 <std+0x68>)
 8012924:	6224      	str	r4, [r4, #32]
 8012926:	429c      	cmp	r4, r3
 8012928:	d006      	beq.n	8012938 <std+0x48>
 801292a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801292e:	4294      	cmp	r4, r2
 8012930:	d002      	beq.n	8012938 <std+0x48>
 8012932:	33d0      	adds	r3, #208	@ 0xd0
 8012934:	429c      	cmp	r4, r3
 8012936:	d105      	bne.n	8012944 <std+0x54>
 8012938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801293c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012940:	f000 ba0e 	b.w	8012d60 <__retarget_lock_init_recursive>
 8012944:	bd10      	pop	{r4, pc}
 8012946:	bf00      	nop
 8012948:	08012b25 	.word	0x08012b25
 801294c:	08012b47 	.word	0x08012b47
 8012950:	08012b7f 	.word	0x08012b7f
 8012954:	08012ba3 	.word	0x08012ba3
 8012958:	200048c0 	.word	0x200048c0

0801295c <stdio_exit_handler>:
 801295c:	4a02      	ldr	r2, [pc, #8]	@ (8012968 <stdio_exit_handler+0xc>)
 801295e:	4903      	ldr	r1, [pc, #12]	@ (801296c <stdio_exit_handler+0x10>)
 8012960:	4803      	ldr	r0, [pc, #12]	@ (8012970 <stdio_exit_handler+0x14>)
 8012962:	f000 b869 	b.w	8012a38 <_fwalk_sglue>
 8012966:	bf00      	nop
 8012968:	20000048 	.word	0x20000048
 801296c:	08015655 	.word	0x08015655
 8012970:	20000058 	.word	0x20000058

08012974 <cleanup_stdio>:
 8012974:	6841      	ldr	r1, [r0, #4]
 8012976:	4b0c      	ldr	r3, [pc, #48]	@ (80129a8 <cleanup_stdio+0x34>)
 8012978:	4299      	cmp	r1, r3
 801297a:	b510      	push	{r4, lr}
 801297c:	4604      	mov	r4, r0
 801297e:	d001      	beq.n	8012984 <cleanup_stdio+0x10>
 8012980:	f002 fe68 	bl	8015654 <_fflush_r>
 8012984:	68a1      	ldr	r1, [r4, #8]
 8012986:	4b09      	ldr	r3, [pc, #36]	@ (80129ac <cleanup_stdio+0x38>)
 8012988:	4299      	cmp	r1, r3
 801298a:	d002      	beq.n	8012992 <cleanup_stdio+0x1e>
 801298c:	4620      	mov	r0, r4
 801298e:	f002 fe61 	bl	8015654 <_fflush_r>
 8012992:	68e1      	ldr	r1, [r4, #12]
 8012994:	4b06      	ldr	r3, [pc, #24]	@ (80129b0 <cleanup_stdio+0x3c>)
 8012996:	4299      	cmp	r1, r3
 8012998:	d004      	beq.n	80129a4 <cleanup_stdio+0x30>
 801299a:	4620      	mov	r0, r4
 801299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129a0:	f002 be58 	b.w	8015654 <_fflush_r>
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	bf00      	nop
 80129a8:	200048c0 	.word	0x200048c0
 80129ac:	20004928 	.word	0x20004928
 80129b0:	20004990 	.word	0x20004990

080129b4 <global_stdio_init.part.0>:
 80129b4:	b510      	push	{r4, lr}
 80129b6:	4b0b      	ldr	r3, [pc, #44]	@ (80129e4 <global_stdio_init.part.0+0x30>)
 80129b8:	4c0b      	ldr	r4, [pc, #44]	@ (80129e8 <global_stdio_init.part.0+0x34>)
 80129ba:	4a0c      	ldr	r2, [pc, #48]	@ (80129ec <global_stdio_init.part.0+0x38>)
 80129bc:	601a      	str	r2, [r3, #0]
 80129be:	4620      	mov	r0, r4
 80129c0:	2200      	movs	r2, #0
 80129c2:	2104      	movs	r1, #4
 80129c4:	f7ff ff94 	bl	80128f0 <std>
 80129c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80129cc:	2201      	movs	r2, #1
 80129ce:	2109      	movs	r1, #9
 80129d0:	f7ff ff8e 	bl	80128f0 <std>
 80129d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80129d8:	2202      	movs	r2, #2
 80129da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129de:	2112      	movs	r1, #18
 80129e0:	f7ff bf86 	b.w	80128f0 <std>
 80129e4:	200049f8 	.word	0x200049f8
 80129e8:	200048c0 	.word	0x200048c0
 80129ec:	0801295d 	.word	0x0801295d

080129f0 <__sfp_lock_acquire>:
 80129f0:	4801      	ldr	r0, [pc, #4]	@ (80129f8 <__sfp_lock_acquire+0x8>)
 80129f2:	f000 b9b6 	b.w	8012d62 <__retarget_lock_acquire_recursive>
 80129f6:	bf00      	nop
 80129f8:	20004a01 	.word	0x20004a01

080129fc <__sfp_lock_release>:
 80129fc:	4801      	ldr	r0, [pc, #4]	@ (8012a04 <__sfp_lock_release+0x8>)
 80129fe:	f000 b9b1 	b.w	8012d64 <__retarget_lock_release_recursive>
 8012a02:	bf00      	nop
 8012a04:	20004a01 	.word	0x20004a01

08012a08 <__sinit>:
 8012a08:	b510      	push	{r4, lr}
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	f7ff fff0 	bl	80129f0 <__sfp_lock_acquire>
 8012a10:	6a23      	ldr	r3, [r4, #32]
 8012a12:	b11b      	cbz	r3, 8012a1c <__sinit+0x14>
 8012a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a18:	f7ff bff0 	b.w	80129fc <__sfp_lock_release>
 8012a1c:	4b04      	ldr	r3, [pc, #16]	@ (8012a30 <__sinit+0x28>)
 8012a1e:	6223      	str	r3, [r4, #32]
 8012a20:	4b04      	ldr	r3, [pc, #16]	@ (8012a34 <__sinit+0x2c>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1f5      	bne.n	8012a14 <__sinit+0xc>
 8012a28:	f7ff ffc4 	bl	80129b4 <global_stdio_init.part.0>
 8012a2c:	e7f2      	b.n	8012a14 <__sinit+0xc>
 8012a2e:	bf00      	nop
 8012a30:	08012975 	.word	0x08012975
 8012a34:	200049f8 	.word	0x200049f8

08012a38 <_fwalk_sglue>:
 8012a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	4688      	mov	r8, r1
 8012a40:	4614      	mov	r4, r2
 8012a42:	2600      	movs	r6, #0
 8012a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a48:	f1b9 0901 	subs.w	r9, r9, #1
 8012a4c:	d505      	bpl.n	8012a5a <_fwalk_sglue+0x22>
 8012a4e:	6824      	ldr	r4, [r4, #0]
 8012a50:	2c00      	cmp	r4, #0
 8012a52:	d1f7      	bne.n	8012a44 <_fwalk_sglue+0xc>
 8012a54:	4630      	mov	r0, r6
 8012a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d907      	bls.n	8012a70 <_fwalk_sglue+0x38>
 8012a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a64:	3301      	adds	r3, #1
 8012a66:	d003      	beq.n	8012a70 <_fwalk_sglue+0x38>
 8012a68:	4629      	mov	r1, r5
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	47c0      	blx	r8
 8012a6e:	4306      	orrs	r6, r0
 8012a70:	3568      	adds	r5, #104	@ 0x68
 8012a72:	e7e9      	b.n	8012a48 <_fwalk_sglue+0x10>

08012a74 <sniprintf>:
 8012a74:	b40c      	push	{r2, r3}
 8012a76:	b530      	push	{r4, r5, lr}
 8012a78:	4b18      	ldr	r3, [pc, #96]	@ (8012adc <sniprintf+0x68>)
 8012a7a:	1e0c      	subs	r4, r1, #0
 8012a7c:	681d      	ldr	r5, [r3, #0]
 8012a7e:	b09d      	sub	sp, #116	@ 0x74
 8012a80:	da08      	bge.n	8012a94 <sniprintf+0x20>
 8012a82:	238b      	movs	r3, #139	@ 0x8b
 8012a84:	602b      	str	r3, [r5, #0]
 8012a86:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8a:	b01d      	add	sp, #116	@ 0x74
 8012a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a90:	b002      	add	sp, #8
 8012a92:	4770      	bx	lr
 8012a94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012a98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012a9c:	f04f 0300 	mov.w	r3, #0
 8012aa0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012aa2:	bf14      	ite	ne
 8012aa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012aa8:	4623      	moveq	r3, r4
 8012aaa:	9304      	str	r3, [sp, #16]
 8012aac:	9307      	str	r3, [sp, #28]
 8012aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012ab2:	9002      	str	r0, [sp, #8]
 8012ab4:	9006      	str	r0, [sp, #24]
 8012ab6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012aba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012abc:	ab21      	add	r3, sp, #132	@ 0x84
 8012abe:	a902      	add	r1, sp, #8
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	9301      	str	r3, [sp, #4]
 8012ac4:	f002 fc46 	bl	8015354 <_svfiprintf_r>
 8012ac8:	1c43      	adds	r3, r0, #1
 8012aca:	bfbc      	itt	lt
 8012acc:	238b      	movlt	r3, #139	@ 0x8b
 8012ace:	602b      	strlt	r3, [r5, #0]
 8012ad0:	2c00      	cmp	r4, #0
 8012ad2:	d0da      	beq.n	8012a8a <sniprintf+0x16>
 8012ad4:	9b02      	ldr	r3, [sp, #8]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	701a      	strb	r2, [r3, #0]
 8012ada:	e7d6      	b.n	8012a8a <sniprintf+0x16>
 8012adc:	20000054 	.word	0x20000054

08012ae0 <siprintf>:
 8012ae0:	b40e      	push	{r1, r2, r3}
 8012ae2:	b510      	push	{r4, lr}
 8012ae4:	b09d      	sub	sp, #116	@ 0x74
 8012ae6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012ae8:	9002      	str	r0, [sp, #8]
 8012aea:	9006      	str	r0, [sp, #24]
 8012aec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012af0:	480a      	ldr	r0, [pc, #40]	@ (8012b1c <siprintf+0x3c>)
 8012af2:	9107      	str	r1, [sp, #28]
 8012af4:	9104      	str	r1, [sp, #16]
 8012af6:	490a      	ldr	r1, [pc, #40]	@ (8012b20 <siprintf+0x40>)
 8012af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012afc:	9105      	str	r1, [sp, #20]
 8012afe:	2400      	movs	r4, #0
 8012b00:	a902      	add	r1, sp, #8
 8012b02:	6800      	ldr	r0, [r0, #0]
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012b08:	f002 fc24 	bl	8015354 <_svfiprintf_r>
 8012b0c:	9b02      	ldr	r3, [sp, #8]
 8012b0e:	701c      	strb	r4, [r3, #0]
 8012b10:	b01d      	add	sp, #116	@ 0x74
 8012b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b16:	b003      	add	sp, #12
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	20000054 	.word	0x20000054
 8012b20:	ffff0208 	.word	0xffff0208

08012b24 <__sread>:
 8012b24:	b510      	push	{r4, lr}
 8012b26:	460c      	mov	r4, r1
 8012b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b2c:	f000 f8ca 	bl	8012cc4 <_read_r>
 8012b30:	2800      	cmp	r0, #0
 8012b32:	bfab      	itete	ge
 8012b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012b36:	89a3      	ldrhlt	r3, [r4, #12]
 8012b38:	181b      	addge	r3, r3, r0
 8012b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012b3e:	bfac      	ite	ge
 8012b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012b42:	81a3      	strhlt	r3, [r4, #12]
 8012b44:	bd10      	pop	{r4, pc}

08012b46 <__swrite>:
 8012b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4a:	461f      	mov	r7, r3
 8012b4c:	898b      	ldrh	r3, [r1, #12]
 8012b4e:	05db      	lsls	r3, r3, #23
 8012b50:	4605      	mov	r5, r0
 8012b52:	460c      	mov	r4, r1
 8012b54:	4616      	mov	r6, r2
 8012b56:	d505      	bpl.n	8012b64 <__swrite+0x1e>
 8012b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b5c:	2302      	movs	r3, #2
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f000 f89e 	bl	8012ca0 <_lseek_r>
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012b6e:	81a3      	strh	r3, [r4, #12]
 8012b70:	4632      	mov	r2, r6
 8012b72:	463b      	mov	r3, r7
 8012b74:	4628      	mov	r0, r5
 8012b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7a:	f000 b8b5 	b.w	8012ce8 <_write_r>

08012b7e <__sseek>:
 8012b7e:	b510      	push	{r4, lr}
 8012b80:	460c      	mov	r4, r1
 8012b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b86:	f000 f88b 	bl	8012ca0 <_lseek_r>
 8012b8a:	1c43      	adds	r3, r0, #1
 8012b8c:	89a3      	ldrh	r3, [r4, #12]
 8012b8e:	bf15      	itete	ne
 8012b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012b9a:	81a3      	strheq	r3, [r4, #12]
 8012b9c:	bf18      	it	ne
 8012b9e:	81a3      	strhne	r3, [r4, #12]
 8012ba0:	bd10      	pop	{r4, pc}

08012ba2 <__sclose>:
 8012ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba6:	f000 b80d 	b.w	8012bc4 <_close_r>

08012baa <memset>:
 8012baa:	4402      	add	r2, r0
 8012bac:	4603      	mov	r3, r0
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d100      	bne.n	8012bb4 <memset+0xa>
 8012bb2:	4770      	bx	lr
 8012bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8012bb8:	e7f9      	b.n	8012bae <memset+0x4>
	...

08012bbc <_localeconv_r>:
 8012bbc:	4800      	ldr	r0, [pc, #0]	@ (8012bc0 <_localeconv_r+0x4>)
 8012bbe:	4770      	bx	lr
 8012bc0:	20000194 	.word	0x20000194

08012bc4 <_close_r>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	4d06      	ldr	r5, [pc, #24]	@ (8012be0 <_close_r+0x1c>)
 8012bc8:	2300      	movs	r3, #0
 8012bca:	4604      	mov	r4, r0
 8012bcc:	4608      	mov	r0, r1
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	f7f0 f82c 	bl	8002c2c <_close>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	d102      	bne.n	8012bde <_close_r+0x1a>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	b103      	cbz	r3, 8012bde <_close_r+0x1a>
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	200049fc 	.word	0x200049fc

08012be4 <_reclaim_reent>:
 8012be4:	4b2d      	ldr	r3, [pc, #180]	@ (8012c9c <_reclaim_reent+0xb8>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4283      	cmp	r3, r0
 8012bea:	b570      	push	{r4, r5, r6, lr}
 8012bec:	4604      	mov	r4, r0
 8012bee:	d053      	beq.n	8012c98 <_reclaim_reent+0xb4>
 8012bf0:	69c3      	ldr	r3, [r0, #28]
 8012bf2:	b31b      	cbz	r3, 8012c3c <_reclaim_reent+0x58>
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	b163      	cbz	r3, 8012c12 <_reclaim_reent+0x2e>
 8012bf8:	2500      	movs	r5, #0
 8012bfa:	69e3      	ldr	r3, [r4, #28]
 8012bfc:	68db      	ldr	r3, [r3, #12]
 8012bfe:	5959      	ldr	r1, [r3, r5]
 8012c00:	b9b1      	cbnz	r1, 8012c30 <_reclaim_reent+0x4c>
 8012c02:	3504      	adds	r5, #4
 8012c04:	2d80      	cmp	r5, #128	@ 0x80
 8012c06:	d1f8      	bne.n	8012bfa <_reclaim_reent+0x16>
 8012c08:	69e3      	ldr	r3, [r4, #28]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	68d9      	ldr	r1, [r3, #12]
 8012c0e:	f000 ff17 	bl	8013a40 <_free_r>
 8012c12:	69e3      	ldr	r3, [r4, #28]
 8012c14:	6819      	ldr	r1, [r3, #0]
 8012c16:	b111      	cbz	r1, 8012c1e <_reclaim_reent+0x3a>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f000 ff11 	bl	8013a40 <_free_r>
 8012c1e:	69e3      	ldr	r3, [r4, #28]
 8012c20:	689d      	ldr	r5, [r3, #8]
 8012c22:	b15d      	cbz	r5, 8012c3c <_reclaim_reent+0x58>
 8012c24:	4629      	mov	r1, r5
 8012c26:	4620      	mov	r0, r4
 8012c28:	682d      	ldr	r5, [r5, #0]
 8012c2a:	f000 ff09 	bl	8013a40 <_free_r>
 8012c2e:	e7f8      	b.n	8012c22 <_reclaim_reent+0x3e>
 8012c30:	680e      	ldr	r6, [r1, #0]
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 ff04 	bl	8013a40 <_free_r>
 8012c38:	4631      	mov	r1, r6
 8012c3a:	e7e1      	b.n	8012c00 <_reclaim_reent+0x1c>
 8012c3c:	6961      	ldr	r1, [r4, #20]
 8012c3e:	b111      	cbz	r1, 8012c46 <_reclaim_reent+0x62>
 8012c40:	4620      	mov	r0, r4
 8012c42:	f000 fefd 	bl	8013a40 <_free_r>
 8012c46:	69e1      	ldr	r1, [r4, #28]
 8012c48:	b111      	cbz	r1, 8012c50 <_reclaim_reent+0x6c>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 fef8 	bl	8013a40 <_free_r>
 8012c50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012c52:	b111      	cbz	r1, 8012c5a <_reclaim_reent+0x76>
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 fef3 	bl	8013a40 <_free_r>
 8012c5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c5c:	b111      	cbz	r1, 8012c64 <_reclaim_reent+0x80>
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f000 feee 	bl	8013a40 <_free_r>
 8012c64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012c66:	b111      	cbz	r1, 8012c6e <_reclaim_reent+0x8a>
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f000 fee9 	bl	8013a40 <_free_r>
 8012c6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012c70:	b111      	cbz	r1, 8012c78 <_reclaim_reent+0x94>
 8012c72:	4620      	mov	r0, r4
 8012c74:	f000 fee4 	bl	8013a40 <_free_r>
 8012c78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012c7a:	b111      	cbz	r1, 8012c82 <_reclaim_reent+0x9e>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f000 fedf 	bl	8013a40 <_free_r>
 8012c82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012c84:	b111      	cbz	r1, 8012c8c <_reclaim_reent+0xa8>
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 feda 	bl	8013a40 <_free_r>
 8012c8c:	6a23      	ldr	r3, [r4, #32]
 8012c8e:	b11b      	cbz	r3, 8012c98 <_reclaim_reent+0xb4>
 8012c90:	4620      	mov	r0, r4
 8012c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c96:	4718      	bx	r3
 8012c98:	bd70      	pop	{r4, r5, r6, pc}
 8012c9a:	bf00      	nop
 8012c9c:	20000054 	.word	0x20000054

08012ca0 <_lseek_r>:
 8012ca0:	b538      	push	{r3, r4, r5, lr}
 8012ca2:	4d07      	ldr	r5, [pc, #28]	@ (8012cc0 <_lseek_r+0x20>)
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	4608      	mov	r0, r1
 8012ca8:	4611      	mov	r1, r2
 8012caa:	2200      	movs	r2, #0
 8012cac:	602a      	str	r2, [r5, #0]
 8012cae:	461a      	mov	r2, r3
 8012cb0:	f7ef ffe3 	bl	8002c7a <_lseek>
 8012cb4:	1c43      	adds	r3, r0, #1
 8012cb6:	d102      	bne.n	8012cbe <_lseek_r+0x1e>
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	b103      	cbz	r3, 8012cbe <_lseek_r+0x1e>
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	bd38      	pop	{r3, r4, r5, pc}
 8012cc0:	200049fc 	.word	0x200049fc

08012cc4 <_read_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4d07      	ldr	r5, [pc, #28]	@ (8012ce4 <_read_r+0x20>)
 8012cc8:	4604      	mov	r4, r0
 8012cca:	4608      	mov	r0, r1
 8012ccc:	4611      	mov	r1, r2
 8012cce:	2200      	movs	r2, #0
 8012cd0:	602a      	str	r2, [r5, #0]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f7ef ff71 	bl	8002bba <_read>
 8012cd8:	1c43      	adds	r3, r0, #1
 8012cda:	d102      	bne.n	8012ce2 <_read_r+0x1e>
 8012cdc:	682b      	ldr	r3, [r5, #0]
 8012cde:	b103      	cbz	r3, 8012ce2 <_read_r+0x1e>
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}
 8012ce4:	200049fc 	.word	0x200049fc

08012ce8 <_write_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d07      	ldr	r5, [pc, #28]	@ (8012d08 <_write_r+0x20>)
 8012cec:	4604      	mov	r4, r0
 8012cee:	4608      	mov	r0, r1
 8012cf0:	4611      	mov	r1, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	602a      	str	r2, [r5, #0]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	f7ef ff7c 	bl	8002bf4 <_write>
 8012cfc:	1c43      	adds	r3, r0, #1
 8012cfe:	d102      	bne.n	8012d06 <_write_r+0x1e>
 8012d00:	682b      	ldr	r3, [r5, #0]
 8012d02:	b103      	cbz	r3, 8012d06 <_write_r+0x1e>
 8012d04:	6023      	str	r3, [r4, #0]
 8012d06:	bd38      	pop	{r3, r4, r5, pc}
 8012d08:	200049fc 	.word	0x200049fc

08012d0c <__errno>:
 8012d0c:	4b01      	ldr	r3, [pc, #4]	@ (8012d14 <__errno+0x8>)
 8012d0e:	6818      	ldr	r0, [r3, #0]
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	20000054 	.word	0x20000054

08012d18 <__libc_init_array>:
 8012d18:	b570      	push	{r4, r5, r6, lr}
 8012d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8012d50 <__libc_init_array+0x38>)
 8012d1c:	4c0d      	ldr	r4, [pc, #52]	@ (8012d54 <__libc_init_array+0x3c>)
 8012d1e:	1b64      	subs	r4, r4, r5
 8012d20:	10a4      	asrs	r4, r4, #2
 8012d22:	2600      	movs	r6, #0
 8012d24:	42a6      	cmp	r6, r4
 8012d26:	d109      	bne.n	8012d3c <__libc_init_array+0x24>
 8012d28:	4d0b      	ldr	r5, [pc, #44]	@ (8012d58 <__libc_init_array+0x40>)
 8012d2a:	4c0c      	ldr	r4, [pc, #48]	@ (8012d5c <__libc_init_array+0x44>)
 8012d2c:	f003 ff3e 	bl	8016bac <_init>
 8012d30:	1b64      	subs	r4, r4, r5
 8012d32:	10a4      	asrs	r4, r4, #2
 8012d34:	2600      	movs	r6, #0
 8012d36:	42a6      	cmp	r6, r4
 8012d38:	d105      	bne.n	8012d46 <__libc_init_array+0x2e>
 8012d3a:	bd70      	pop	{r4, r5, r6, pc}
 8012d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d40:	4798      	blx	r3
 8012d42:	3601      	adds	r6, #1
 8012d44:	e7ee      	b.n	8012d24 <__libc_init_array+0xc>
 8012d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d4a:	4798      	blx	r3
 8012d4c:	3601      	adds	r6, #1
 8012d4e:	e7f2      	b.n	8012d36 <__libc_init_array+0x1e>
 8012d50:	080191e4 	.word	0x080191e4
 8012d54:	080191e4 	.word	0x080191e4
 8012d58:	080191e4 	.word	0x080191e4
 8012d5c:	080191e8 	.word	0x080191e8

08012d60 <__retarget_lock_init_recursive>:
 8012d60:	4770      	bx	lr

08012d62 <__retarget_lock_acquire_recursive>:
 8012d62:	4770      	bx	lr

08012d64 <__retarget_lock_release_recursive>:
 8012d64:	4770      	bx	lr

08012d66 <memcpy>:
 8012d66:	440a      	add	r2, r1
 8012d68:	4291      	cmp	r1, r2
 8012d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d6e:	d100      	bne.n	8012d72 <memcpy+0xc>
 8012d70:	4770      	bx	lr
 8012d72:	b510      	push	{r4, lr}
 8012d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d7c:	4291      	cmp	r1, r2
 8012d7e:	d1f9      	bne.n	8012d74 <memcpy+0xe>
 8012d80:	bd10      	pop	{r4, pc}
	...

08012d84 <nanf>:
 8012d84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012d8c <nanf+0x8>
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop
 8012d8c:	7fc00000 	.word	0x7fc00000

08012d90 <quorem>:
 8012d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d94:	6903      	ldr	r3, [r0, #16]
 8012d96:	690c      	ldr	r4, [r1, #16]
 8012d98:	42a3      	cmp	r3, r4
 8012d9a:	4607      	mov	r7, r0
 8012d9c:	db7e      	blt.n	8012e9c <quorem+0x10c>
 8012d9e:	3c01      	subs	r4, #1
 8012da0:	f101 0814 	add.w	r8, r1, #20
 8012da4:	00a3      	lsls	r3, r4, #2
 8012da6:	f100 0514 	add.w	r5, r0, #20
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012db6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012dba:	3301      	adds	r3, #1
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012dc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8012dc6:	d32e      	bcc.n	8012e26 <quorem+0x96>
 8012dc8:	f04f 0a00 	mov.w	sl, #0
 8012dcc:	46c4      	mov	ip, r8
 8012dce:	46ae      	mov	lr, r5
 8012dd0:	46d3      	mov	fp, sl
 8012dd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012dd6:	b298      	uxth	r0, r3
 8012dd8:	fb06 a000 	mla	r0, r6, r0, sl
 8012ddc:	0c02      	lsrs	r2, r0, #16
 8012dde:	0c1b      	lsrs	r3, r3, #16
 8012de0:	fb06 2303 	mla	r3, r6, r3, r2
 8012de4:	f8de 2000 	ldr.w	r2, [lr]
 8012de8:	b280      	uxth	r0, r0
 8012dea:	b292      	uxth	r2, r2
 8012dec:	1a12      	subs	r2, r2, r0
 8012dee:	445a      	add	r2, fp
 8012df0:	f8de 0000 	ldr.w	r0, [lr]
 8012df4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012dfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012e02:	b292      	uxth	r2, r2
 8012e04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012e08:	45e1      	cmp	r9, ip
 8012e0a:	f84e 2b04 	str.w	r2, [lr], #4
 8012e0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012e12:	d2de      	bcs.n	8012dd2 <quorem+0x42>
 8012e14:	9b00      	ldr	r3, [sp, #0]
 8012e16:	58eb      	ldr	r3, [r5, r3]
 8012e18:	b92b      	cbnz	r3, 8012e26 <quorem+0x96>
 8012e1a:	9b01      	ldr	r3, [sp, #4]
 8012e1c:	3b04      	subs	r3, #4
 8012e1e:	429d      	cmp	r5, r3
 8012e20:	461a      	mov	r2, r3
 8012e22:	d32f      	bcc.n	8012e84 <quorem+0xf4>
 8012e24:	613c      	str	r4, [r7, #16]
 8012e26:	4638      	mov	r0, r7
 8012e28:	f001 f9c6 	bl	80141b8 <__mcmp>
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	db25      	blt.n	8012e7c <quorem+0xec>
 8012e30:	4629      	mov	r1, r5
 8012e32:	2000      	movs	r0, #0
 8012e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e38:	f8d1 c000 	ldr.w	ip, [r1]
 8012e3c:	fa1f fe82 	uxth.w	lr, r2
 8012e40:	fa1f f38c 	uxth.w	r3, ip
 8012e44:	eba3 030e 	sub.w	r3, r3, lr
 8012e48:	4403      	add	r3, r0
 8012e4a:	0c12      	lsrs	r2, r2, #16
 8012e4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012e50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e5a:	45c1      	cmp	r9, r8
 8012e5c:	f841 3b04 	str.w	r3, [r1], #4
 8012e60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012e64:	d2e6      	bcs.n	8012e34 <quorem+0xa4>
 8012e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e6e:	b922      	cbnz	r2, 8012e7a <quorem+0xea>
 8012e70:	3b04      	subs	r3, #4
 8012e72:	429d      	cmp	r5, r3
 8012e74:	461a      	mov	r2, r3
 8012e76:	d30b      	bcc.n	8012e90 <quorem+0x100>
 8012e78:	613c      	str	r4, [r7, #16]
 8012e7a:	3601      	adds	r6, #1
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	b003      	add	sp, #12
 8012e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e84:	6812      	ldr	r2, [r2, #0]
 8012e86:	3b04      	subs	r3, #4
 8012e88:	2a00      	cmp	r2, #0
 8012e8a:	d1cb      	bne.n	8012e24 <quorem+0x94>
 8012e8c:	3c01      	subs	r4, #1
 8012e8e:	e7c6      	b.n	8012e1e <quorem+0x8e>
 8012e90:	6812      	ldr	r2, [r2, #0]
 8012e92:	3b04      	subs	r3, #4
 8012e94:	2a00      	cmp	r2, #0
 8012e96:	d1ef      	bne.n	8012e78 <quorem+0xe8>
 8012e98:	3c01      	subs	r4, #1
 8012e9a:	e7ea      	b.n	8012e72 <quorem+0xe2>
 8012e9c:	2000      	movs	r0, #0
 8012e9e:	e7ee      	b.n	8012e7e <quorem+0xee>

08012ea0 <_dtoa_r>:
 8012ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	69c7      	ldr	r7, [r0, #28]
 8012ea6:	b097      	sub	sp, #92	@ 0x5c
 8012ea8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012eac:	ec55 4b10 	vmov	r4, r5, d0
 8012eb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8012eb2:	9107      	str	r1, [sp, #28]
 8012eb4:	4681      	mov	r9, r0
 8012eb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8012eb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8012eba:	b97f      	cbnz	r7, 8012edc <_dtoa_r+0x3c>
 8012ebc:	2010      	movs	r0, #16
 8012ebe:	f000 fe09 	bl	8013ad4 <malloc>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	f8c9 001c 	str.w	r0, [r9, #28]
 8012ec8:	b920      	cbnz	r0, 8012ed4 <_dtoa_r+0x34>
 8012eca:	4ba9      	ldr	r3, [pc, #676]	@ (8013170 <_dtoa_r+0x2d0>)
 8012ecc:	21ef      	movs	r1, #239	@ 0xef
 8012ece:	48a9      	ldr	r0, [pc, #676]	@ (8013174 <_dtoa_r+0x2d4>)
 8012ed0:	f002 fc2e 	bl	8015730 <__assert_func>
 8012ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012ed8:	6007      	str	r7, [r0, #0]
 8012eda:	60c7      	str	r7, [r0, #12]
 8012edc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ee0:	6819      	ldr	r1, [r3, #0]
 8012ee2:	b159      	cbz	r1, 8012efc <_dtoa_r+0x5c>
 8012ee4:	685a      	ldr	r2, [r3, #4]
 8012ee6:	604a      	str	r2, [r1, #4]
 8012ee8:	2301      	movs	r3, #1
 8012eea:	4093      	lsls	r3, r2
 8012eec:	608b      	str	r3, [r1, #8]
 8012eee:	4648      	mov	r0, r9
 8012ef0:	f000 fee6 	bl	8013cc0 <_Bfree>
 8012ef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	1e2b      	subs	r3, r5, #0
 8012efe:	bfb9      	ittee	lt
 8012f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012f04:	9305      	strlt	r3, [sp, #20]
 8012f06:	2300      	movge	r3, #0
 8012f08:	6033      	strge	r3, [r6, #0]
 8012f0a:	9f05      	ldr	r7, [sp, #20]
 8012f0c:	4b9a      	ldr	r3, [pc, #616]	@ (8013178 <_dtoa_r+0x2d8>)
 8012f0e:	bfbc      	itt	lt
 8012f10:	2201      	movlt	r2, #1
 8012f12:	6032      	strlt	r2, [r6, #0]
 8012f14:	43bb      	bics	r3, r7
 8012f16:	d112      	bne.n	8012f3e <_dtoa_r+0x9e>
 8012f18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f24:	4323      	orrs	r3, r4
 8012f26:	f000 855a 	beq.w	80139de <_dtoa_r+0xb3e>
 8012f2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012f2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801318c <_dtoa_r+0x2ec>
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f000 855c 	beq.w	80139ee <_dtoa_r+0xb4e>
 8012f36:	f10a 0303 	add.w	r3, sl, #3
 8012f3a:	f000 bd56 	b.w	80139ea <_dtoa_r+0xb4a>
 8012f3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012f42:	2200      	movs	r2, #0
 8012f44:	ec51 0b17 	vmov	r0, r1, d7
 8012f48:	2300      	movs	r3, #0
 8012f4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8012f4e:	f7ed fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8012f52:	4680      	mov	r8, r0
 8012f54:	b158      	cbz	r0, 8012f6e <_dtoa_r+0xce>
 8012f56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f58:	2301      	movs	r3, #1
 8012f5a:	6013      	str	r3, [r2, #0]
 8012f5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012f5e:	b113      	cbz	r3, 8012f66 <_dtoa_r+0xc6>
 8012f60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012f62:	4b86      	ldr	r3, [pc, #536]	@ (801317c <_dtoa_r+0x2dc>)
 8012f64:	6013      	str	r3, [r2, #0]
 8012f66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013190 <_dtoa_r+0x2f0>
 8012f6a:	f000 bd40 	b.w	80139ee <_dtoa_r+0xb4e>
 8012f6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8012f72:	aa14      	add	r2, sp, #80	@ 0x50
 8012f74:	a915      	add	r1, sp, #84	@ 0x54
 8012f76:	4648      	mov	r0, r9
 8012f78:	f001 fa3e 	bl	80143f8 <__d2b>
 8012f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012f80:	9002      	str	r0, [sp, #8]
 8012f82:	2e00      	cmp	r6, #0
 8012f84:	d078      	beq.n	8013078 <_dtoa_r+0x1d8>
 8012f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8012f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	4b76      	ldr	r3, [pc, #472]	@ (8013180 <_dtoa_r+0x2e0>)
 8012fa6:	f7ed f997 	bl	80002d8 <__aeabi_dsub>
 8012faa:	a36b      	add	r3, pc, #428	@ (adr r3, 8013158 <_dtoa_r+0x2b8>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	f7ed fb4a 	bl	8000648 <__aeabi_dmul>
 8012fb4:	a36a      	add	r3, pc, #424	@ (adr r3, 8013160 <_dtoa_r+0x2c0>)
 8012fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fba:	f7ed f98f 	bl	80002dc <__adddf3>
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	460d      	mov	r5, r1
 8012fc4:	f7ed fad6 	bl	8000574 <__aeabi_i2d>
 8012fc8:	a367      	add	r3, pc, #412	@ (adr r3, 8013168 <_dtoa_r+0x2c8>)
 8012fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fce:	f7ed fb3b 	bl	8000648 <__aeabi_dmul>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	4629      	mov	r1, r5
 8012fda:	f7ed f97f 	bl	80002dc <__adddf3>
 8012fde:	4604      	mov	r4, r0
 8012fe0:	460d      	mov	r5, r1
 8012fe2:	f7ed fde1 	bl	8000ba8 <__aeabi_d2iz>
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	4607      	mov	r7, r0
 8012fea:	2300      	movs	r3, #0
 8012fec:	4620      	mov	r0, r4
 8012fee:	4629      	mov	r1, r5
 8012ff0:	f7ed fd9c 	bl	8000b2c <__aeabi_dcmplt>
 8012ff4:	b140      	cbz	r0, 8013008 <_dtoa_r+0x168>
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7ed fabc 	bl	8000574 <__aeabi_i2d>
 8012ffc:	4622      	mov	r2, r4
 8012ffe:	462b      	mov	r3, r5
 8013000:	f7ed fd8a 	bl	8000b18 <__aeabi_dcmpeq>
 8013004:	b900      	cbnz	r0, 8013008 <_dtoa_r+0x168>
 8013006:	3f01      	subs	r7, #1
 8013008:	2f16      	cmp	r7, #22
 801300a:	d852      	bhi.n	80130b2 <_dtoa_r+0x212>
 801300c:	4b5d      	ldr	r3, [pc, #372]	@ (8013184 <_dtoa_r+0x2e4>)
 801300e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801301a:	f7ed fd87 	bl	8000b2c <__aeabi_dcmplt>
 801301e:	2800      	cmp	r0, #0
 8013020:	d049      	beq.n	80130b6 <_dtoa_r+0x216>
 8013022:	3f01      	subs	r7, #1
 8013024:	2300      	movs	r3, #0
 8013026:	9310      	str	r3, [sp, #64]	@ 0x40
 8013028:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801302a:	1b9b      	subs	r3, r3, r6
 801302c:	1e5a      	subs	r2, r3, #1
 801302e:	bf45      	ittet	mi
 8013030:	f1c3 0301 	rsbmi	r3, r3, #1
 8013034:	9300      	strmi	r3, [sp, #0]
 8013036:	2300      	movpl	r3, #0
 8013038:	2300      	movmi	r3, #0
 801303a:	9206      	str	r2, [sp, #24]
 801303c:	bf54      	ite	pl
 801303e:	9300      	strpl	r3, [sp, #0]
 8013040:	9306      	strmi	r3, [sp, #24]
 8013042:	2f00      	cmp	r7, #0
 8013044:	db39      	blt.n	80130ba <_dtoa_r+0x21a>
 8013046:	9b06      	ldr	r3, [sp, #24]
 8013048:	970d      	str	r7, [sp, #52]	@ 0x34
 801304a:	443b      	add	r3, r7
 801304c:	9306      	str	r3, [sp, #24]
 801304e:	2300      	movs	r3, #0
 8013050:	9308      	str	r3, [sp, #32]
 8013052:	9b07      	ldr	r3, [sp, #28]
 8013054:	2b09      	cmp	r3, #9
 8013056:	d863      	bhi.n	8013120 <_dtoa_r+0x280>
 8013058:	2b05      	cmp	r3, #5
 801305a:	bfc4      	itt	gt
 801305c:	3b04      	subgt	r3, #4
 801305e:	9307      	strgt	r3, [sp, #28]
 8013060:	9b07      	ldr	r3, [sp, #28]
 8013062:	f1a3 0302 	sub.w	r3, r3, #2
 8013066:	bfcc      	ite	gt
 8013068:	2400      	movgt	r4, #0
 801306a:	2401      	movle	r4, #1
 801306c:	2b03      	cmp	r3, #3
 801306e:	d863      	bhi.n	8013138 <_dtoa_r+0x298>
 8013070:	e8df f003 	tbb	[pc, r3]
 8013074:	2b375452 	.word	0x2b375452
 8013078:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801307c:	441e      	add	r6, r3
 801307e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013082:	2b20      	cmp	r3, #32
 8013084:	bfc1      	itttt	gt
 8013086:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801308a:	409f      	lslgt	r7, r3
 801308c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013090:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013094:	bfd6      	itet	le
 8013096:	f1c3 0320 	rsble	r3, r3, #32
 801309a:	ea47 0003 	orrgt.w	r0, r7, r3
 801309e:	fa04 f003 	lslle.w	r0, r4, r3
 80130a2:	f7ed fa57 	bl	8000554 <__aeabi_ui2d>
 80130a6:	2201      	movs	r2, #1
 80130a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80130ac:	3e01      	subs	r6, #1
 80130ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80130b0:	e776      	b.n	8012fa0 <_dtoa_r+0x100>
 80130b2:	2301      	movs	r3, #1
 80130b4:	e7b7      	b.n	8013026 <_dtoa_r+0x186>
 80130b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80130b8:	e7b6      	b.n	8013028 <_dtoa_r+0x188>
 80130ba:	9b00      	ldr	r3, [sp, #0]
 80130bc:	1bdb      	subs	r3, r3, r7
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	427b      	negs	r3, r7
 80130c2:	9308      	str	r3, [sp, #32]
 80130c4:	2300      	movs	r3, #0
 80130c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80130c8:	e7c3      	b.n	8013052 <_dtoa_r+0x1b2>
 80130ca:	2301      	movs	r3, #1
 80130cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80130ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130d0:	eb07 0b03 	add.w	fp, r7, r3
 80130d4:	f10b 0301 	add.w	r3, fp, #1
 80130d8:	2b01      	cmp	r3, #1
 80130da:	9303      	str	r3, [sp, #12]
 80130dc:	bfb8      	it	lt
 80130de:	2301      	movlt	r3, #1
 80130e0:	e006      	b.n	80130f0 <_dtoa_r+0x250>
 80130e2:	2301      	movs	r3, #1
 80130e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80130e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	dd28      	ble.n	801313e <_dtoa_r+0x29e>
 80130ec:	469b      	mov	fp, r3
 80130ee:	9303      	str	r3, [sp, #12]
 80130f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80130f4:	2100      	movs	r1, #0
 80130f6:	2204      	movs	r2, #4
 80130f8:	f102 0514 	add.w	r5, r2, #20
 80130fc:	429d      	cmp	r5, r3
 80130fe:	d926      	bls.n	801314e <_dtoa_r+0x2ae>
 8013100:	6041      	str	r1, [r0, #4]
 8013102:	4648      	mov	r0, r9
 8013104:	f000 fd9c 	bl	8013c40 <_Balloc>
 8013108:	4682      	mov	sl, r0
 801310a:	2800      	cmp	r0, #0
 801310c:	d142      	bne.n	8013194 <_dtoa_r+0x2f4>
 801310e:	4b1e      	ldr	r3, [pc, #120]	@ (8013188 <_dtoa_r+0x2e8>)
 8013110:	4602      	mov	r2, r0
 8013112:	f240 11af 	movw	r1, #431	@ 0x1af
 8013116:	e6da      	b.n	8012ece <_dtoa_r+0x2e>
 8013118:	2300      	movs	r3, #0
 801311a:	e7e3      	b.n	80130e4 <_dtoa_r+0x244>
 801311c:	2300      	movs	r3, #0
 801311e:	e7d5      	b.n	80130cc <_dtoa_r+0x22c>
 8013120:	2401      	movs	r4, #1
 8013122:	2300      	movs	r3, #0
 8013124:	9307      	str	r3, [sp, #28]
 8013126:	9409      	str	r4, [sp, #36]	@ 0x24
 8013128:	f04f 3bff 	mov.w	fp, #4294967295
 801312c:	2200      	movs	r2, #0
 801312e:	f8cd b00c 	str.w	fp, [sp, #12]
 8013132:	2312      	movs	r3, #18
 8013134:	920c      	str	r2, [sp, #48]	@ 0x30
 8013136:	e7db      	b.n	80130f0 <_dtoa_r+0x250>
 8013138:	2301      	movs	r3, #1
 801313a:	9309      	str	r3, [sp, #36]	@ 0x24
 801313c:	e7f4      	b.n	8013128 <_dtoa_r+0x288>
 801313e:	f04f 0b01 	mov.w	fp, #1
 8013142:	f8cd b00c 	str.w	fp, [sp, #12]
 8013146:	465b      	mov	r3, fp
 8013148:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801314c:	e7d0      	b.n	80130f0 <_dtoa_r+0x250>
 801314e:	3101      	adds	r1, #1
 8013150:	0052      	lsls	r2, r2, #1
 8013152:	e7d1      	b.n	80130f8 <_dtoa_r+0x258>
 8013154:	f3af 8000 	nop.w
 8013158:	636f4361 	.word	0x636f4361
 801315c:	3fd287a7 	.word	0x3fd287a7
 8013160:	8b60c8b3 	.word	0x8b60c8b3
 8013164:	3fc68a28 	.word	0x3fc68a28
 8013168:	509f79fb 	.word	0x509f79fb
 801316c:	3fd34413 	.word	0x3fd34413
 8013170:	08018de2 	.word	0x08018de2
 8013174:	08018df9 	.word	0x08018df9
 8013178:	7ff00000 	.word	0x7ff00000
 801317c:	08018dad 	.word	0x08018dad
 8013180:	3ff80000 	.word	0x3ff80000
 8013184:	08018fa8 	.word	0x08018fa8
 8013188:	08018e51 	.word	0x08018e51
 801318c:	08018dde 	.word	0x08018dde
 8013190:	08018dac 	.word	0x08018dac
 8013194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013198:	6018      	str	r0, [r3, #0]
 801319a:	9b03      	ldr	r3, [sp, #12]
 801319c:	2b0e      	cmp	r3, #14
 801319e:	f200 80a1 	bhi.w	80132e4 <_dtoa_r+0x444>
 80131a2:	2c00      	cmp	r4, #0
 80131a4:	f000 809e 	beq.w	80132e4 <_dtoa_r+0x444>
 80131a8:	2f00      	cmp	r7, #0
 80131aa:	dd33      	ble.n	8013214 <_dtoa_r+0x374>
 80131ac:	4b9c      	ldr	r3, [pc, #624]	@ (8013420 <_dtoa_r+0x580>)
 80131ae:	f007 020f 	and.w	r2, r7, #15
 80131b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131b6:	ed93 7b00 	vldr	d7, [r3]
 80131ba:	05f8      	lsls	r0, r7, #23
 80131bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80131c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80131c4:	d516      	bpl.n	80131f4 <_dtoa_r+0x354>
 80131c6:	4b97      	ldr	r3, [pc, #604]	@ (8013424 <_dtoa_r+0x584>)
 80131c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80131cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80131d0:	f7ed fb64 	bl	800089c <__aeabi_ddiv>
 80131d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131d8:	f004 040f 	and.w	r4, r4, #15
 80131dc:	2603      	movs	r6, #3
 80131de:	4d91      	ldr	r5, [pc, #580]	@ (8013424 <_dtoa_r+0x584>)
 80131e0:	b954      	cbnz	r4, 80131f8 <_dtoa_r+0x358>
 80131e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80131e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80131ea:	f7ed fb57 	bl	800089c <__aeabi_ddiv>
 80131ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131f2:	e028      	b.n	8013246 <_dtoa_r+0x3a6>
 80131f4:	2602      	movs	r6, #2
 80131f6:	e7f2      	b.n	80131de <_dtoa_r+0x33e>
 80131f8:	07e1      	lsls	r1, r4, #31
 80131fa:	d508      	bpl.n	801320e <_dtoa_r+0x36e>
 80131fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013200:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013204:	f7ed fa20 	bl	8000648 <__aeabi_dmul>
 8013208:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801320c:	3601      	adds	r6, #1
 801320e:	1064      	asrs	r4, r4, #1
 8013210:	3508      	adds	r5, #8
 8013212:	e7e5      	b.n	80131e0 <_dtoa_r+0x340>
 8013214:	f000 80af 	beq.w	8013376 <_dtoa_r+0x4d6>
 8013218:	427c      	negs	r4, r7
 801321a:	4b81      	ldr	r3, [pc, #516]	@ (8013420 <_dtoa_r+0x580>)
 801321c:	4d81      	ldr	r5, [pc, #516]	@ (8013424 <_dtoa_r+0x584>)
 801321e:	f004 020f 	and.w	r2, r4, #15
 8013222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801322e:	f7ed fa0b 	bl	8000648 <__aeabi_dmul>
 8013232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013236:	1124      	asrs	r4, r4, #4
 8013238:	2300      	movs	r3, #0
 801323a:	2602      	movs	r6, #2
 801323c:	2c00      	cmp	r4, #0
 801323e:	f040 808f 	bne.w	8013360 <_dtoa_r+0x4c0>
 8013242:	2b00      	cmp	r3, #0
 8013244:	d1d3      	bne.n	80131ee <_dtoa_r+0x34e>
 8013246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013248:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 8094 	beq.w	801337a <_dtoa_r+0x4da>
 8013252:	4b75      	ldr	r3, [pc, #468]	@ (8013428 <_dtoa_r+0x588>)
 8013254:	2200      	movs	r2, #0
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed fc67 	bl	8000b2c <__aeabi_dcmplt>
 801325e:	2800      	cmp	r0, #0
 8013260:	f000 808b 	beq.w	801337a <_dtoa_r+0x4da>
 8013264:	9b03      	ldr	r3, [sp, #12]
 8013266:	2b00      	cmp	r3, #0
 8013268:	f000 8087 	beq.w	801337a <_dtoa_r+0x4da>
 801326c:	f1bb 0f00 	cmp.w	fp, #0
 8013270:	dd34      	ble.n	80132dc <_dtoa_r+0x43c>
 8013272:	4620      	mov	r0, r4
 8013274:	4b6d      	ldr	r3, [pc, #436]	@ (801342c <_dtoa_r+0x58c>)
 8013276:	2200      	movs	r2, #0
 8013278:	4629      	mov	r1, r5
 801327a:	f7ed f9e5 	bl	8000648 <__aeabi_dmul>
 801327e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013282:	f107 38ff 	add.w	r8, r7, #4294967295
 8013286:	3601      	adds	r6, #1
 8013288:	465c      	mov	r4, fp
 801328a:	4630      	mov	r0, r6
 801328c:	f7ed f972 	bl	8000574 <__aeabi_i2d>
 8013290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013294:	f7ed f9d8 	bl	8000648 <__aeabi_dmul>
 8013298:	4b65      	ldr	r3, [pc, #404]	@ (8013430 <_dtoa_r+0x590>)
 801329a:	2200      	movs	r2, #0
 801329c:	f7ed f81e 	bl	80002dc <__adddf3>
 80132a0:	4605      	mov	r5, r0
 80132a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80132a6:	2c00      	cmp	r4, #0
 80132a8:	d16a      	bne.n	8013380 <_dtoa_r+0x4e0>
 80132aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132ae:	4b61      	ldr	r3, [pc, #388]	@ (8013434 <_dtoa_r+0x594>)
 80132b0:	2200      	movs	r2, #0
 80132b2:	f7ed f811 	bl	80002d8 <__aeabi_dsub>
 80132b6:	4602      	mov	r2, r0
 80132b8:	460b      	mov	r3, r1
 80132ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80132be:	462a      	mov	r2, r5
 80132c0:	4633      	mov	r3, r6
 80132c2:	f7ed fc51 	bl	8000b68 <__aeabi_dcmpgt>
 80132c6:	2800      	cmp	r0, #0
 80132c8:	f040 8298 	bne.w	80137fc <_dtoa_r+0x95c>
 80132cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132d0:	462a      	mov	r2, r5
 80132d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80132d6:	f7ed fc29 	bl	8000b2c <__aeabi_dcmplt>
 80132da:	bb38      	cbnz	r0, 801332c <_dtoa_r+0x48c>
 80132dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80132e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80132e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f2c0 8157 	blt.w	801359a <_dtoa_r+0x6fa>
 80132ec:	2f0e      	cmp	r7, #14
 80132ee:	f300 8154 	bgt.w	801359a <_dtoa_r+0x6fa>
 80132f2:	4b4b      	ldr	r3, [pc, #300]	@ (8013420 <_dtoa_r+0x580>)
 80132f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80132f8:	ed93 7b00 	vldr	d7, [r3]
 80132fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80132fe:	2b00      	cmp	r3, #0
 8013300:	ed8d 7b00 	vstr	d7, [sp]
 8013304:	f280 80e5 	bge.w	80134d2 <_dtoa_r+0x632>
 8013308:	9b03      	ldr	r3, [sp, #12]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f300 80e1 	bgt.w	80134d2 <_dtoa_r+0x632>
 8013310:	d10c      	bne.n	801332c <_dtoa_r+0x48c>
 8013312:	4b48      	ldr	r3, [pc, #288]	@ (8013434 <_dtoa_r+0x594>)
 8013314:	2200      	movs	r2, #0
 8013316:	ec51 0b17 	vmov	r0, r1, d7
 801331a:	f7ed f995 	bl	8000648 <__aeabi_dmul>
 801331e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013322:	f7ed fc17 	bl	8000b54 <__aeabi_dcmpge>
 8013326:	2800      	cmp	r0, #0
 8013328:	f000 8266 	beq.w	80137f8 <_dtoa_r+0x958>
 801332c:	2400      	movs	r4, #0
 801332e:	4625      	mov	r5, r4
 8013330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013332:	4656      	mov	r6, sl
 8013334:	ea6f 0803 	mvn.w	r8, r3
 8013338:	2700      	movs	r7, #0
 801333a:	4621      	mov	r1, r4
 801333c:	4648      	mov	r0, r9
 801333e:	f000 fcbf 	bl	8013cc0 <_Bfree>
 8013342:	2d00      	cmp	r5, #0
 8013344:	f000 80bd 	beq.w	80134c2 <_dtoa_r+0x622>
 8013348:	b12f      	cbz	r7, 8013356 <_dtoa_r+0x4b6>
 801334a:	42af      	cmp	r7, r5
 801334c:	d003      	beq.n	8013356 <_dtoa_r+0x4b6>
 801334e:	4639      	mov	r1, r7
 8013350:	4648      	mov	r0, r9
 8013352:	f000 fcb5 	bl	8013cc0 <_Bfree>
 8013356:	4629      	mov	r1, r5
 8013358:	4648      	mov	r0, r9
 801335a:	f000 fcb1 	bl	8013cc0 <_Bfree>
 801335e:	e0b0      	b.n	80134c2 <_dtoa_r+0x622>
 8013360:	07e2      	lsls	r2, r4, #31
 8013362:	d505      	bpl.n	8013370 <_dtoa_r+0x4d0>
 8013364:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013368:	f7ed f96e 	bl	8000648 <__aeabi_dmul>
 801336c:	3601      	adds	r6, #1
 801336e:	2301      	movs	r3, #1
 8013370:	1064      	asrs	r4, r4, #1
 8013372:	3508      	adds	r5, #8
 8013374:	e762      	b.n	801323c <_dtoa_r+0x39c>
 8013376:	2602      	movs	r6, #2
 8013378:	e765      	b.n	8013246 <_dtoa_r+0x3a6>
 801337a:	9c03      	ldr	r4, [sp, #12]
 801337c:	46b8      	mov	r8, r7
 801337e:	e784      	b.n	801328a <_dtoa_r+0x3ea>
 8013380:	4b27      	ldr	r3, [pc, #156]	@ (8013420 <_dtoa_r+0x580>)
 8013382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801338c:	4454      	add	r4, sl
 801338e:	2900      	cmp	r1, #0
 8013390:	d054      	beq.n	801343c <_dtoa_r+0x59c>
 8013392:	4929      	ldr	r1, [pc, #164]	@ (8013438 <_dtoa_r+0x598>)
 8013394:	2000      	movs	r0, #0
 8013396:	f7ed fa81 	bl	800089c <__aeabi_ddiv>
 801339a:	4633      	mov	r3, r6
 801339c:	462a      	mov	r2, r5
 801339e:	f7ec ff9b 	bl	80002d8 <__aeabi_dsub>
 80133a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80133a6:	4656      	mov	r6, sl
 80133a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80133ac:	f7ed fbfc 	bl	8000ba8 <__aeabi_d2iz>
 80133b0:	4605      	mov	r5, r0
 80133b2:	f7ed f8df 	bl	8000574 <__aeabi_i2d>
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80133be:	f7ec ff8b 	bl	80002d8 <__aeabi_dsub>
 80133c2:	3530      	adds	r5, #48	@ 0x30
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80133cc:	f806 5b01 	strb.w	r5, [r6], #1
 80133d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80133d4:	f7ed fbaa 	bl	8000b2c <__aeabi_dcmplt>
 80133d8:	2800      	cmp	r0, #0
 80133da:	d172      	bne.n	80134c2 <_dtoa_r+0x622>
 80133dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133e0:	4911      	ldr	r1, [pc, #68]	@ (8013428 <_dtoa_r+0x588>)
 80133e2:	2000      	movs	r0, #0
 80133e4:	f7ec ff78 	bl	80002d8 <__aeabi_dsub>
 80133e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80133ec:	f7ed fb9e 	bl	8000b2c <__aeabi_dcmplt>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	f040 80b4 	bne.w	801355e <_dtoa_r+0x6be>
 80133f6:	42a6      	cmp	r6, r4
 80133f8:	f43f af70 	beq.w	80132dc <_dtoa_r+0x43c>
 80133fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013400:	4b0a      	ldr	r3, [pc, #40]	@ (801342c <_dtoa_r+0x58c>)
 8013402:	2200      	movs	r2, #0
 8013404:	f7ed f920 	bl	8000648 <__aeabi_dmul>
 8013408:	4b08      	ldr	r3, [pc, #32]	@ (801342c <_dtoa_r+0x58c>)
 801340a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801340e:	2200      	movs	r2, #0
 8013410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013414:	f7ed f918 	bl	8000648 <__aeabi_dmul>
 8013418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801341c:	e7c4      	b.n	80133a8 <_dtoa_r+0x508>
 801341e:	bf00      	nop
 8013420:	08018fa8 	.word	0x08018fa8
 8013424:	08018f80 	.word	0x08018f80
 8013428:	3ff00000 	.word	0x3ff00000
 801342c:	40240000 	.word	0x40240000
 8013430:	401c0000 	.word	0x401c0000
 8013434:	40140000 	.word	0x40140000
 8013438:	3fe00000 	.word	0x3fe00000
 801343c:	4631      	mov	r1, r6
 801343e:	4628      	mov	r0, r5
 8013440:	f7ed f902 	bl	8000648 <__aeabi_dmul>
 8013444:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013448:	9413      	str	r4, [sp, #76]	@ 0x4c
 801344a:	4656      	mov	r6, sl
 801344c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013450:	f7ed fbaa 	bl	8000ba8 <__aeabi_d2iz>
 8013454:	4605      	mov	r5, r0
 8013456:	f7ed f88d 	bl	8000574 <__aeabi_i2d>
 801345a:	4602      	mov	r2, r0
 801345c:	460b      	mov	r3, r1
 801345e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013462:	f7ec ff39 	bl	80002d8 <__aeabi_dsub>
 8013466:	3530      	adds	r5, #48	@ 0x30
 8013468:	f806 5b01 	strb.w	r5, [r6], #1
 801346c:	4602      	mov	r2, r0
 801346e:	460b      	mov	r3, r1
 8013470:	42a6      	cmp	r6, r4
 8013472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013476:	f04f 0200 	mov.w	r2, #0
 801347a:	d124      	bne.n	80134c6 <_dtoa_r+0x626>
 801347c:	4baf      	ldr	r3, [pc, #700]	@ (801373c <_dtoa_r+0x89c>)
 801347e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013482:	f7ec ff2b 	bl	80002dc <__adddf3>
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801348e:	f7ed fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 8013492:	2800      	cmp	r0, #0
 8013494:	d163      	bne.n	801355e <_dtoa_r+0x6be>
 8013496:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801349a:	49a8      	ldr	r1, [pc, #672]	@ (801373c <_dtoa_r+0x89c>)
 801349c:	2000      	movs	r0, #0
 801349e:	f7ec ff1b 	bl	80002d8 <__aeabi_dsub>
 80134a2:	4602      	mov	r2, r0
 80134a4:	460b      	mov	r3, r1
 80134a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134aa:	f7ed fb3f 	bl	8000b2c <__aeabi_dcmplt>
 80134ae:	2800      	cmp	r0, #0
 80134b0:	f43f af14 	beq.w	80132dc <_dtoa_r+0x43c>
 80134b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80134b6:	1e73      	subs	r3, r6, #1
 80134b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80134ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80134be:	2b30      	cmp	r3, #48	@ 0x30
 80134c0:	d0f8      	beq.n	80134b4 <_dtoa_r+0x614>
 80134c2:	4647      	mov	r7, r8
 80134c4:	e03b      	b.n	801353e <_dtoa_r+0x69e>
 80134c6:	4b9e      	ldr	r3, [pc, #632]	@ (8013740 <_dtoa_r+0x8a0>)
 80134c8:	f7ed f8be 	bl	8000648 <__aeabi_dmul>
 80134cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134d0:	e7bc      	b.n	801344c <_dtoa_r+0x5ac>
 80134d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80134d6:	4656      	mov	r6, sl
 80134d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134dc:	4620      	mov	r0, r4
 80134de:	4629      	mov	r1, r5
 80134e0:	f7ed f9dc 	bl	800089c <__aeabi_ddiv>
 80134e4:	f7ed fb60 	bl	8000ba8 <__aeabi_d2iz>
 80134e8:	4680      	mov	r8, r0
 80134ea:	f7ed f843 	bl	8000574 <__aeabi_i2d>
 80134ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134f2:	f7ed f8a9 	bl	8000648 <__aeabi_dmul>
 80134f6:	4602      	mov	r2, r0
 80134f8:	460b      	mov	r3, r1
 80134fa:	4620      	mov	r0, r4
 80134fc:	4629      	mov	r1, r5
 80134fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013502:	f7ec fee9 	bl	80002d8 <__aeabi_dsub>
 8013506:	f806 4b01 	strb.w	r4, [r6], #1
 801350a:	9d03      	ldr	r5, [sp, #12]
 801350c:	eba6 040a 	sub.w	r4, r6, sl
 8013510:	42a5      	cmp	r5, r4
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	d133      	bne.n	8013580 <_dtoa_r+0x6e0>
 8013518:	f7ec fee0 	bl	80002dc <__adddf3>
 801351c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013520:	4604      	mov	r4, r0
 8013522:	460d      	mov	r5, r1
 8013524:	f7ed fb20 	bl	8000b68 <__aeabi_dcmpgt>
 8013528:	b9c0      	cbnz	r0, 801355c <_dtoa_r+0x6bc>
 801352a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801352e:	4620      	mov	r0, r4
 8013530:	4629      	mov	r1, r5
 8013532:	f7ed faf1 	bl	8000b18 <__aeabi_dcmpeq>
 8013536:	b110      	cbz	r0, 801353e <_dtoa_r+0x69e>
 8013538:	f018 0f01 	tst.w	r8, #1
 801353c:	d10e      	bne.n	801355c <_dtoa_r+0x6bc>
 801353e:	9902      	ldr	r1, [sp, #8]
 8013540:	4648      	mov	r0, r9
 8013542:	f000 fbbd 	bl	8013cc0 <_Bfree>
 8013546:	2300      	movs	r3, #0
 8013548:	7033      	strb	r3, [r6, #0]
 801354a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801354c:	3701      	adds	r7, #1
 801354e:	601f      	str	r7, [r3, #0]
 8013550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013552:	2b00      	cmp	r3, #0
 8013554:	f000 824b 	beq.w	80139ee <_dtoa_r+0xb4e>
 8013558:	601e      	str	r6, [r3, #0]
 801355a:	e248      	b.n	80139ee <_dtoa_r+0xb4e>
 801355c:	46b8      	mov	r8, r7
 801355e:	4633      	mov	r3, r6
 8013560:	461e      	mov	r6, r3
 8013562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013566:	2a39      	cmp	r2, #57	@ 0x39
 8013568:	d106      	bne.n	8013578 <_dtoa_r+0x6d8>
 801356a:	459a      	cmp	sl, r3
 801356c:	d1f8      	bne.n	8013560 <_dtoa_r+0x6c0>
 801356e:	2230      	movs	r2, #48	@ 0x30
 8013570:	f108 0801 	add.w	r8, r8, #1
 8013574:	f88a 2000 	strb.w	r2, [sl]
 8013578:	781a      	ldrb	r2, [r3, #0]
 801357a:	3201      	adds	r2, #1
 801357c:	701a      	strb	r2, [r3, #0]
 801357e:	e7a0      	b.n	80134c2 <_dtoa_r+0x622>
 8013580:	4b6f      	ldr	r3, [pc, #444]	@ (8013740 <_dtoa_r+0x8a0>)
 8013582:	2200      	movs	r2, #0
 8013584:	f7ed f860 	bl	8000648 <__aeabi_dmul>
 8013588:	2200      	movs	r2, #0
 801358a:	2300      	movs	r3, #0
 801358c:	4604      	mov	r4, r0
 801358e:	460d      	mov	r5, r1
 8013590:	f7ed fac2 	bl	8000b18 <__aeabi_dcmpeq>
 8013594:	2800      	cmp	r0, #0
 8013596:	d09f      	beq.n	80134d8 <_dtoa_r+0x638>
 8013598:	e7d1      	b.n	801353e <_dtoa_r+0x69e>
 801359a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801359c:	2a00      	cmp	r2, #0
 801359e:	f000 80ea 	beq.w	8013776 <_dtoa_r+0x8d6>
 80135a2:	9a07      	ldr	r2, [sp, #28]
 80135a4:	2a01      	cmp	r2, #1
 80135a6:	f300 80cd 	bgt.w	8013744 <_dtoa_r+0x8a4>
 80135aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80135ac:	2a00      	cmp	r2, #0
 80135ae:	f000 80c1 	beq.w	8013734 <_dtoa_r+0x894>
 80135b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80135b6:	9c08      	ldr	r4, [sp, #32]
 80135b8:	9e00      	ldr	r6, [sp, #0]
 80135ba:	9a00      	ldr	r2, [sp, #0]
 80135bc:	441a      	add	r2, r3
 80135be:	9200      	str	r2, [sp, #0]
 80135c0:	9a06      	ldr	r2, [sp, #24]
 80135c2:	2101      	movs	r1, #1
 80135c4:	441a      	add	r2, r3
 80135c6:	4648      	mov	r0, r9
 80135c8:	9206      	str	r2, [sp, #24]
 80135ca:	f000 fc77 	bl	8013ebc <__i2b>
 80135ce:	4605      	mov	r5, r0
 80135d0:	b166      	cbz	r6, 80135ec <_dtoa_r+0x74c>
 80135d2:	9b06      	ldr	r3, [sp, #24]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	dd09      	ble.n	80135ec <_dtoa_r+0x74c>
 80135d8:	42b3      	cmp	r3, r6
 80135da:	9a00      	ldr	r2, [sp, #0]
 80135dc:	bfa8      	it	ge
 80135de:	4633      	movge	r3, r6
 80135e0:	1ad2      	subs	r2, r2, r3
 80135e2:	9200      	str	r2, [sp, #0]
 80135e4:	9a06      	ldr	r2, [sp, #24]
 80135e6:	1af6      	subs	r6, r6, r3
 80135e8:	1ad3      	subs	r3, r2, r3
 80135ea:	9306      	str	r3, [sp, #24]
 80135ec:	9b08      	ldr	r3, [sp, #32]
 80135ee:	b30b      	cbz	r3, 8013634 <_dtoa_r+0x794>
 80135f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f000 80c6 	beq.w	8013784 <_dtoa_r+0x8e4>
 80135f8:	2c00      	cmp	r4, #0
 80135fa:	f000 80c0 	beq.w	801377e <_dtoa_r+0x8de>
 80135fe:	4629      	mov	r1, r5
 8013600:	4622      	mov	r2, r4
 8013602:	4648      	mov	r0, r9
 8013604:	f000 fd12 	bl	801402c <__pow5mult>
 8013608:	9a02      	ldr	r2, [sp, #8]
 801360a:	4601      	mov	r1, r0
 801360c:	4605      	mov	r5, r0
 801360e:	4648      	mov	r0, r9
 8013610:	f000 fc6a 	bl	8013ee8 <__multiply>
 8013614:	9902      	ldr	r1, [sp, #8]
 8013616:	4680      	mov	r8, r0
 8013618:	4648      	mov	r0, r9
 801361a:	f000 fb51 	bl	8013cc0 <_Bfree>
 801361e:	9b08      	ldr	r3, [sp, #32]
 8013620:	1b1b      	subs	r3, r3, r4
 8013622:	9308      	str	r3, [sp, #32]
 8013624:	f000 80b1 	beq.w	801378a <_dtoa_r+0x8ea>
 8013628:	9a08      	ldr	r2, [sp, #32]
 801362a:	4641      	mov	r1, r8
 801362c:	4648      	mov	r0, r9
 801362e:	f000 fcfd 	bl	801402c <__pow5mult>
 8013632:	9002      	str	r0, [sp, #8]
 8013634:	2101      	movs	r1, #1
 8013636:	4648      	mov	r0, r9
 8013638:	f000 fc40 	bl	8013ebc <__i2b>
 801363c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801363e:	4604      	mov	r4, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	f000 81d8 	beq.w	80139f6 <_dtoa_r+0xb56>
 8013646:	461a      	mov	r2, r3
 8013648:	4601      	mov	r1, r0
 801364a:	4648      	mov	r0, r9
 801364c:	f000 fcee 	bl	801402c <__pow5mult>
 8013650:	9b07      	ldr	r3, [sp, #28]
 8013652:	2b01      	cmp	r3, #1
 8013654:	4604      	mov	r4, r0
 8013656:	f300 809f 	bgt.w	8013798 <_dtoa_r+0x8f8>
 801365a:	9b04      	ldr	r3, [sp, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	f040 8097 	bne.w	8013790 <_dtoa_r+0x8f0>
 8013662:	9b05      	ldr	r3, [sp, #20]
 8013664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013668:	2b00      	cmp	r3, #0
 801366a:	f040 8093 	bne.w	8013794 <_dtoa_r+0x8f4>
 801366e:	9b05      	ldr	r3, [sp, #20]
 8013670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013674:	0d1b      	lsrs	r3, r3, #20
 8013676:	051b      	lsls	r3, r3, #20
 8013678:	b133      	cbz	r3, 8013688 <_dtoa_r+0x7e8>
 801367a:	9b00      	ldr	r3, [sp, #0]
 801367c:	3301      	adds	r3, #1
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	9b06      	ldr	r3, [sp, #24]
 8013682:	3301      	adds	r3, #1
 8013684:	9306      	str	r3, [sp, #24]
 8013686:	2301      	movs	r3, #1
 8013688:	9308      	str	r3, [sp, #32]
 801368a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 81b8 	beq.w	8013a02 <_dtoa_r+0xb62>
 8013692:	6923      	ldr	r3, [r4, #16]
 8013694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013698:	6918      	ldr	r0, [r3, #16]
 801369a:	f000 fbc3 	bl	8013e24 <__hi0bits>
 801369e:	f1c0 0020 	rsb	r0, r0, #32
 80136a2:	9b06      	ldr	r3, [sp, #24]
 80136a4:	4418      	add	r0, r3
 80136a6:	f010 001f 	ands.w	r0, r0, #31
 80136aa:	f000 8082 	beq.w	80137b2 <_dtoa_r+0x912>
 80136ae:	f1c0 0320 	rsb	r3, r0, #32
 80136b2:	2b04      	cmp	r3, #4
 80136b4:	dd73      	ble.n	801379e <_dtoa_r+0x8fe>
 80136b6:	9b00      	ldr	r3, [sp, #0]
 80136b8:	f1c0 001c 	rsb	r0, r0, #28
 80136bc:	4403      	add	r3, r0
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	9b06      	ldr	r3, [sp, #24]
 80136c2:	4403      	add	r3, r0
 80136c4:	4406      	add	r6, r0
 80136c6:	9306      	str	r3, [sp, #24]
 80136c8:	9b00      	ldr	r3, [sp, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	dd05      	ble.n	80136da <_dtoa_r+0x83a>
 80136ce:	9902      	ldr	r1, [sp, #8]
 80136d0:	461a      	mov	r2, r3
 80136d2:	4648      	mov	r0, r9
 80136d4:	f000 fd04 	bl	80140e0 <__lshift>
 80136d8:	9002      	str	r0, [sp, #8]
 80136da:	9b06      	ldr	r3, [sp, #24]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	dd05      	ble.n	80136ec <_dtoa_r+0x84c>
 80136e0:	4621      	mov	r1, r4
 80136e2:	461a      	mov	r2, r3
 80136e4:	4648      	mov	r0, r9
 80136e6:	f000 fcfb 	bl	80140e0 <__lshift>
 80136ea:	4604      	mov	r4, r0
 80136ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d061      	beq.n	80137b6 <_dtoa_r+0x916>
 80136f2:	9802      	ldr	r0, [sp, #8]
 80136f4:	4621      	mov	r1, r4
 80136f6:	f000 fd5f 	bl	80141b8 <__mcmp>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	da5b      	bge.n	80137b6 <_dtoa_r+0x916>
 80136fe:	2300      	movs	r3, #0
 8013700:	9902      	ldr	r1, [sp, #8]
 8013702:	220a      	movs	r2, #10
 8013704:	4648      	mov	r0, r9
 8013706:	f000 fafd 	bl	8013d04 <__multadd>
 801370a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801370c:	9002      	str	r0, [sp, #8]
 801370e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 8177 	beq.w	8013a06 <_dtoa_r+0xb66>
 8013718:	4629      	mov	r1, r5
 801371a:	2300      	movs	r3, #0
 801371c:	220a      	movs	r2, #10
 801371e:	4648      	mov	r0, r9
 8013720:	f000 faf0 	bl	8013d04 <__multadd>
 8013724:	f1bb 0f00 	cmp.w	fp, #0
 8013728:	4605      	mov	r5, r0
 801372a:	dc6f      	bgt.n	801380c <_dtoa_r+0x96c>
 801372c:	9b07      	ldr	r3, [sp, #28]
 801372e:	2b02      	cmp	r3, #2
 8013730:	dc49      	bgt.n	80137c6 <_dtoa_r+0x926>
 8013732:	e06b      	b.n	801380c <_dtoa_r+0x96c>
 8013734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801373a:	e73c      	b.n	80135b6 <_dtoa_r+0x716>
 801373c:	3fe00000 	.word	0x3fe00000
 8013740:	40240000 	.word	0x40240000
 8013744:	9b03      	ldr	r3, [sp, #12]
 8013746:	1e5c      	subs	r4, r3, #1
 8013748:	9b08      	ldr	r3, [sp, #32]
 801374a:	42a3      	cmp	r3, r4
 801374c:	db09      	blt.n	8013762 <_dtoa_r+0x8c2>
 801374e:	1b1c      	subs	r4, r3, r4
 8013750:	9b03      	ldr	r3, [sp, #12]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f6bf af30 	bge.w	80135b8 <_dtoa_r+0x718>
 8013758:	9b00      	ldr	r3, [sp, #0]
 801375a:	9a03      	ldr	r2, [sp, #12]
 801375c:	1a9e      	subs	r6, r3, r2
 801375e:	2300      	movs	r3, #0
 8013760:	e72b      	b.n	80135ba <_dtoa_r+0x71a>
 8013762:	9b08      	ldr	r3, [sp, #32]
 8013764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013766:	9408      	str	r4, [sp, #32]
 8013768:	1ae3      	subs	r3, r4, r3
 801376a:	441a      	add	r2, r3
 801376c:	9e00      	ldr	r6, [sp, #0]
 801376e:	9b03      	ldr	r3, [sp, #12]
 8013770:	920d      	str	r2, [sp, #52]	@ 0x34
 8013772:	2400      	movs	r4, #0
 8013774:	e721      	b.n	80135ba <_dtoa_r+0x71a>
 8013776:	9c08      	ldr	r4, [sp, #32]
 8013778:	9e00      	ldr	r6, [sp, #0]
 801377a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801377c:	e728      	b.n	80135d0 <_dtoa_r+0x730>
 801377e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013782:	e751      	b.n	8013628 <_dtoa_r+0x788>
 8013784:	9a08      	ldr	r2, [sp, #32]
 8013786:	9902      	ldr	r1, [sp, #8]
 8013788:	e750      	b.n	801362c <_dtoa_r+0x78c>
 801378a:	f8cd 8008 	str.w	r8, [sp, #8]
 801378e:	e751      	b.n	8013634 <_dtoa_r+0x794>
 8013790:	2300      	movs	r3, #0
 8013792:	e779      	b.n	8013688 <_dtoa_r+0x7e8>
 8013794:	9b04      	ldr	r3, [sp, #16]
 8013796:	e777      	b.n	8013688 <_dtoa_r+0x7e8>
 8013798:	2300      	movs	r3, #0
 801379a:	9308      	str	r3, [sp, #32]
 801379c:	e779      	b.n	8013692 <_dtoa_r+0x7f2>
 801379e:	d093      	beq.n	80136c8 <_dtoa_r+0x828>
 80137a0:	9a00      	ldr	r2, [sp, #0]
 80137a2:	331c      	adds	r3, #28
 80137a4:	441a      	add	r2, r3
 80137a6:	9200      	str	r2, [sp, #0]
 80137a8:	9a06      	ldr	r2, [sp, #24]
 80137aa:	441a      	add	r2, r3
 80137ac:	441e      	add	r6, r3
 80137ae:	9206      	str	r2, [sp, #24]
 80137b0:	e78a      	b.n	80136c8 <_dtoa_r+0x828>
 80137b2:	4603      	mov	r3, r0
 80137b4:	e7f4      	b.n	80137a0 <_dtoa_r+0x900>
 80137b6:	9b03      	ldr	r3, [sp, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	46b8      	mov	r8, r7
 80137bc:	dc20      	bgt.n	8013800 <_dtoa_r+0x960>
 80137be:	469b      	mov	fp, r3
 80137c0:	9b07      	ldr	r3, [sp, #28]
 80137c2:	2b02      	cmp	r3, #2
 80137c4:	dd1e      	ble.n	8013804 <_dtoa_r+0x964>
 80137c6:	f1bb 0f00 	cmp.w	fp, #0
 80137ca:	f47f adb1 	bne.w	8013330 <_dtoa_r+0x490>
 80137ce:	4621      	mov	r1, r4
 80137d0:	465b      	mov	r3, fp
 80137d2:	2205      	movs	r2, #5
 80137d4:	4648      	mov	r0, r9
 80137d6:	f000 fa95 	bl	8013d04 <__multadd>
 80137da:	4601      	mov	r1, r0
 80137dc:	4604      	mov	r4, r0
 80137de:	9802      	ldr	r0, [sp, #8]
 80137e0:	f000 fcea 	bl	80141b8 <__mcmp>
 80137e4:	2800      	cmp	r0, #0
 80137e6:	f77f ada3 	ble.w	8013330 <_dtoa_r+0x490>
 80137ea:	4656      	mov	r6, sl
 80137ec:	2331      	movs	r3, #49	@ 0x31
 80137ee:	f806 3b01 	strb.w	r3, [r6], #1
 80137f2:	f108 0801 	add.w	r8, r8, #1
 80137f6:	e59f      	b.n	8013338 <_dtoa_r+0x498>
 80137f8:	9c03      	ldr	r4, [sp, #12]
 80137fa:	46b8      	mov	r8, r7
 80137fc:	4625      	mov	r5, r4
 80137fe:	e7f4      	b.n	80137ea <_dtoa_r+0x94a>
 8013800:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 8101 	beq.w	8013a0e <_dtoa_r+0xb6e>
 801380c:	2e00      	cmp	r6, #0
 801380e:	dd05      	ble.n	801381c <_dtoa_r+0x97c>
 8013810:	4629      	mov	r1, r5
 8013812:	4632      	mov	r2, r6
 8013814:	4648      	mov	r0, r9
 8013816:	f000 fc63 	bl	80140e0 <__lshift>
 801381a:	4605      	mov	r5, r0
 801381c:	9b08      	ldr	r3, [sp, #32]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d05c      	beq.n	80138dc <_dtoa_r+0xa3c>
 8013822:	6869      	ldr	r1, [r5, #4]
 8013824:	4648      	mov	r0, r9
 8013826:	f000 fa0b 	bl	8013c40 <_Balloc>
 801382a:	4606      	mov	r6, r0
 801382c:	b928      	cbnz	r0, 801383a <_dtoa_r+0x99a>
 801382e:	4b82      	ldr	r3, [pc, #520]	@ (8013a38 <_dtoa_r+0xb98>)
 8013830:	4602      	mov	r2, r0
 8013832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013836:	f7ff bb4a 	b.w	8012ece <_dtoa_r+0x2e>
 801383a:	692a      	ldr	r2, [r5, #16]
 801383c:	3202      	adds	r2, #2
 801383e:	0092      	lsls	r2, r2, #2
 8013840:	f105 010c 	add.w	r1, r5, #12
 8013844:	300c      	adds	r0, #12
 8013846:	f7ff fa8e 	bl	8012d66 <memcpy>
 801384a:	2201      	movs	r2, #1
 801384c:	4631      	mov	r1, r6
 801384e:	4648      	mov	r0, r9
 8013850:	f000 fc46 	bl	80140e0 <__lshift>
 8013854:	f10a 0301 	add.w	r3, sl, #1
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	eb0a 030b 	add.w	r3, sl, fp
 801385e:	9308      	str	r3, [sp, #32]
 8013860:	9b04      	ldr	r3, [sp, #16]
 8013862:	f003 0301 	and.w	r3, r3, #1
 8013866:	462f      	mov	r7, r5
 8013868:	9306      	str	r3, [sp, #24]
 801386a:	4605      	mov	r5, r0
 801386c:	9b00      	ldr	r3, [sp, #0]
 801386e:	9802      	ldr	r0, [sp, #8]
 8013870:	4621      	mov	r1, r4
 8013872:	f103 3bff 	add.w	fp, r3, #4294967295
 8013876:	f7ff fa8b 	bl	8012d90 <quorem>
 801387a:	4603      	mov	r3, r0
 801387c:	3330      	adds	r3, #48	@ 0x30
 801387e:	9003      	str	r0, [sp, #12]
 8013880:	4639      	mov	r1, r7
 8013882:	9802      	ldr	r0, [sp, #8]
 8013884:	9309      	str	r3, [sp, #36]	@ 0x24
 8013886:	f000 fc97 	bl	80141b8 <__mcmp>
 801388a:	462a      	mov	r2, r5
 801388c:	9004      	str	r0, [sp, #16]
 801388e:	4621      	mov	r1, r4
 8013890:	4648      	mov	r0, r9
 8013892:	f000 fcad 	bl	80141f0 <__mdiff>
 8013896:	68c2      	ldr	r2, [r0, #12]
 8013898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801389a:	4606      	mov	r6, r0
 801389c:	bb02      	cbnz	r2, 80138e0 <_dtoa_r+0xa40>
 801389e:	4601      	mov	r1, r0
 80138a0:	9802      	ldr	r0, [sp, #8]
 80138a2:	f000 fc89 	bl	80141b8 <__mcmp>
 80138a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138a8:	4602      	mov	r2, r0
 80138aa:	4631      	mov	r1, r6
 80138ac:	4648      	mov	r0, r9
 80138ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80138b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80138b2:	f000 fa05 	bl	8013cc0 <_Bfree>
 80138b6:	9b07      	ldr	r3, [sp, #28]
 80138b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80138ba:	9e00      	ldr	r6, [sp, #0]
 80138bc:	ea42 0103 	orr.w	r1, r2, r3
 80138c0:	9b06      	ldr	r3, [sp, #24]
 80138c2:	4319      	orrs	r1, r3
 80138c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138c6:	d10d      	bne.n	80138e4 <_dtoa_r+0xa44>
 80138c8:	2b39      	cmp	r3, #57	@ 0x39
 80138ca:	d027      	beq.n	801391c <_dtoa_r+0xa7c>
 80138cc:	9a04      	ldr	r2, [sp, #16]
 80138ce:	2a00      	cmp	r2, #0
 80138d0:	dd01      	ble.n	80138d6 <_dtoa_r+0xa36>
 80138d2:	9b03      	ldr	r3, [sp, #12]
 80138d4:	3331      	adds	r3, #49	@ 0x31
 80138d6:	f88b 3000 	strb.w	r3, [fp]
 80138da:	e52e      	b.n	801333a <_dtoa_r+0x49a>
 80138dc:	4628      	mov	r0, r5
 80138de:	e7b9      	b.n	8013854 <_dtoa_r+0x9b4>
 80138e0:	2201      	movs	r2, #1
 80138e2:	e7e2      	b.n	80138aa <_dtoa_r+0xa0a>
 80138e4:	9904      	ldr	r1, [sp, #16]
 80138e6:	2900      	cmp	r1, #0
 80138e8:	db04      	blt.n	80138f4 <_dtoa_r+0xa54>
 80138ea:	9807      	ldr	r0, [sp, #28]
 80138ec:	4301      	orrs	r1, r0
 80138ee:	9806      	ldr	r0, [sp, #24]
 80138f0:	4301      	orrs	r1, r0
 80138f2:	d120      	bne.n	8013936 <_dtoa_r+0xa96>
 80138f4:	2a00      	cmp	r2, #0
 80138f6:	ddee      	ble.n	80138d6 <_dtoa_r+0xa36>
 80138f8:	9902      	ldr	r1, [sp, #8]
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	2201      	movs	r2, #1
 80138fe:	4648      	mov	r0, r9
 8013900:	f000 fbee 	bl	80140e0 <__lshift>
 8013904:	4621      	mov	r1, r4
 8013906:	9002      	str	r0, [sp, #8]
 8013908:	f000 fc56 	bl	80141b8 <__mcmp>
 801390c:	2800      	cmp	r0, #0
 801390e:	9b00      	ldr	r3, [sp, #0]
 8013910:	dc02      	bgt.n	8013918 <_dtoa_r+0xa78>
 8013912:	d1e0      	bne.n	80138d6 <_dtoa_r+0xa36>
 8013914:	07da      	lsls	r2, r3, #31
 8013916:	d5de      	bpl.n	80138d6 <_dtoa_r+0xa36>
 8013918:	2b39      	cmp	r3, #57	@ 0x39
 801391a:	d1da      	bne.n	80138d2 <_dtoa_r+0xa32>
 801391c:	2339      	movs	r3, #57	@ 0x39
 801391e:	f88b 3000 	strb.w	r3, [fp]
 8013922:	4633      	mov	r3, r6
 8013924:	461e      	mov	r6, r3
 8013926:	3b01      	subs	r3, #1
 8013928:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801392c:	2a39      	cmp	r2, #57	@ 0x39
 801392e:	d04e      	beq.n	80139ce <_dtoa_r+0xb2e>
 8013930:	3201      	adds	r2, #1
 8013932:	701a      	strb	r2, [r3, #0]
 8013934:	e501      	b.n	801333a <_dtoa_r+0x49a>
 8013936:	2a00      	cmp	r2, #0
 8013938:	dd03      	ble.n	8013942 <_dtoa_r+0xaa2>
 801393a:	2b39      	cmp	r3, #57	@ 0x39
 801393c:	d0ee      	beq.n	801391c <_dtoa_r+0xa7c>
 801393e:	3301      	adds	r3, #1
 8013940:	e7c9      	b.n	80138d6 <_dtoa_r+0xa36>
 8013942:	9a00      	ldr	r2, [sp, #0]
 8013944:	9908      	ldr	r1, [sp, #32]
 8013946:	f802 3c01 	strb.w	r3, [r2, #-1]
 801394a:	428a      	cmp	r2, r1
 801394c:	d028      	beq.n	80139a0 <_dtoa_r+0xb00>
 801394e:	9902      	ldr	r1, [sp, #8]
 8013950:	2300      	movs	r3, #0
 8013952:	220a      	movs	r2, #10
 8013954:	4648      	mov	r0, r9
 8013956:	f000 f9d5 	bl	8013d04 <__multadd>
 801395a:	42af      	cmp	r7, r5
 801395c:	9002      	str	r0, [sp, #8]
 801395e:	f04f 0300 	mov.w	r3, #0
 8013962:	f04f 020a 	mov.w	r2, #10
 8013966:	4639      	mov	r1, r7
 8013968:	4648      	mov	r0, r9
 801396a:	d107      	bne.n	801397c <_dtoa_r+0xadc>
 801396c:	f000 f9ca 	bl	8013d04 <__multadd>
 8013970:	4607      	mov	r7, r0
 8013972:	4605      	mov	r5, r0
 8013974:	9b00      	ldr	r3, [sp, #0]
 8013976:	3301      	adds	r3, #1
 8013978:	9300      	str	r3, [sp, #0]
 801397a:	e777      	b.n	801386c <_dtoa_r+0x9cc>
 801397c:	f000 f9c2 	bl	8013d04 <__multadd>
 8013980:	4629      	mov	r1, r5
 8013982:	4607      	mov	r7, r0
 8013984:	2300      	movs	r3, #0
 8013986:	220a      	movs	r2, #10
 8013988:	4648      	mov	r0, r9
 801398a:	f000 f9bb 	bl	8013d04 <__multadd>
 801398e:	4605      	mov	r5, r0
 8013990:	e7f0      	b.n	8013974 <_dtoa_r+0xad4>
 8013992:	f1bb 0f00 	cmp.w	fp, #0
 8013996:	bfcc      	ite	gt
 8013998:	465e      	movgt	r6, fp
 801399a:	2601      	movle	r6, #1
 801399c:	4456      	add	r6, sl
 801399e:	2700      	movs	r7, #0
 80139a0:	9902      	ldr	r1, [sp, #8]
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	2201      	movs	r2, #1
 80139a6:	4648      	mov	r0, r9
 80139a8:	f000 fb9a 	bl	80140e0 <__lshift>
 80139ac:	4621      	mov	r1, r4
 80139ae:	9002      	str	r0, [sp, #8]
 80139b0:	f000 fc02 	bl	80141b8 <__mcmp>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	dcb4      	bgt.n	8013922 <_dtoa_r+0xa82>
 80139b8:	d102      	bne.n	80139c0 <_dtoa_r+0xb20>
 80139ba:	9b00      	ldr	r3, [sp, #0]
 80139bc:	07db      	lsls	r3, r3, #31
 80139be:	d4b0      	bmi.n	8013922 <_dtoa_r+0xa82>
 80139c0:	4633      	mov	r3, r6
 80139c2:	461e      	mov	r6, r3
 80139c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80139c8:	2a30      	cmp	r2, #48	@ 0x30
 80139ca:	d0fa      	beq.n	80139c2 <_dtoa_r+0xb22>
 80139cc:	e4b5      	b.n	801333a <_dtoa_r+0x49a>
 80139ce:	459a      	cmp	sl, r3
 80139d0:	d1a8      	bne.n	8013924 <_dtoa_r+0xa84>
 80139d2:	2331      	movs	r3, #49	@ 0x31
 80139d4:	f108 0801 	add.w	r8, r8, #1
 80139d8:	f88a 3000 	strb.w	r3, [sl]
 80139dc:	e4ad      	b.n	801333a <_dtoa_r+0x49a>
 80139de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80139e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8013a3c <_dtoa_r+0xb9c>
 80139e4:	b11b      	cbz	r3, 80139ee <_dtoa_r+0xb4e>
 80139e6:	f10a 0308 	add.w	r3, sl, #8
 80139ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	4650      	mov	r0, sl
 80139f0:	b017      	add	sp, #92	@ 0x5c
 80139f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f6:	9b07      	ldr	r3, [sp, #28]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	f77f ae2e 	ble.w	801365a <_dtoa_r+0x7ba>
 80139fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a00:	9308      	str	r3, [sp, #32]
 8013a02:	2001      	movs	r0, #1
 8013a04:	e64d      	b.n	80136a2 <_dtoa_r+0x802>
 8013a06:	f1bb 0f00 	cmp.w	fp, #0
 8013a0a:	f77f aed9 	ble.w	80137c0 <_dtoa_r+0x920>
 8013a0e:	4656      	mov	r6, sl
 8013a10:	9802      	ldr	r0, [sp, #8]
 8013a12:	4621      	mov	r1, r4
 8013a14:	f7ff f9bc 	bl	8012d90 <quorem>
 8013a18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013a1c:	f806 3b01 	strb.w	r3, [r6], #1
 8013a20:	eba6 020a 	sub.w	r2, r6, sl
 8013a24:	4593      	cmp	fp, r2
 8013a26:	ddb4      	ble.n	8013992 <_dtoa_r+0xaf2>
 8013a28:	9902      	ldr	r1, [sp, #8]
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	220a      	movs	r2, #10
 8013a2e:	4648      	mov	r0, r9
 8013a30:	f000 f968 	bl	8013d04 <__multadd>
 8013a34:	9002      	str	r0, [sp, #8]
 8013a36:	e7eb      	b.n	8013a10 <_dtoa_r+0xb70>
 8013a38:	08018e51 	.word	0x08018e51
 8013a3c:	08018dd5 	.word	0x08018dd5

08013a40 <_free_r>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	4605      	mov	r5, r0
 8013a44:	2900      	cmp	r1, #0
 8013a46:	d041      	beq.n	8013acc <_free_r+0x8c>
 8013a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a4c:	1f0c      	subs	r4, r1, #4
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	bfb8      	it	lt
 8013a52:	18e4      	addlt	r4, r4, r3
 8013a54:	f000 f8e8 	bl	8013c28 <__malloc_lock>
 8013a58:	4a1d      	ldr	r2, [pc, #116]	@ (8013ad0 <_free_r+0x90>)
 8013a5a:	6813      	ldr	r3, [r2, #0]
 8013a5c:	b933      	cbnz	r3, 8013a6c <_free_r+0x2c>
 8013a5e:	6063      	str	r3, [r4, #4]
 8013a60:	6014      	str	r4, [r2, #0]
 8013a62:	4628      	mov	r0, r5
 8013a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a68:	f000 b8e4 	b.w	8013c34 <__malloc_unlock>
 8013a6c:	42a3      	cmp	r3, r4
 8013a6e:	d908      	bls.n	8013a82 <_free_r+0x42>
 8013a70:	6820      	ldr	r0, [r4, #0]
 8013a72:	1821      	adds	r1, r4, r0
 8013a74:	428b      	cmp	r3, r1
 8013a76:	bf01      	itttt	eq
 8013a78:	6819      	ldreq	r1, [r3, #0]
 8013a7a:	685b      	ldreq	r3, [r3, #4]
 8013a7c:	1809      	addeq	r1, r1, r0
 8013a7e:	6021      	streq	r1, [r4, #0]
 8013a80:	e7ed      	b.n	8013a5e <_free_r+0x1e>
 8013a82:	461a      	mov	r2, r3
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	b10b      	cbz	r3, 8013a8c <_free_r+0x4c>
 8013a88:	42a3      	cmp	r3, r4
 8013a8a:	d9fa      	bls.n	8013a82 <_free_r+0x42>
 8013a8c:	6811      	ldr	r1, [r2, #0]
 8013a8e:	1850      	adds	r0, r2, r1
 8013a90:	42a0      	cmp	r0, r4
 8013a92:	d10b      	bne.n	8013aac <_free_r+0x6c>
 8013a94:	6820      	ldr	r0, [r4, #0]
 8013a96:	4401      	add	r1, r0
 8013a98:	1850      	adds	r0, r2, r1
 8013a9a:	4283      	cmp	r3, r0
 8013a9c:	6011      	str	r1, [r2, #0]
 8013a9e:	d1e0      	bne.n	8013a62 <_free_r+0x22>
 8013aa0:	6818      	ldr	r0, [r3, #0]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	6053      	str	r3, [r2, #4]
 8013aa6:	4408      	add	r0, r1
 8013aa8:	6010      	str	r0, [r2, #0]
 8013aaa:	e7da      	b.n	8013a62 <_free_r+0x22>
 8013aac:	d902      	bls.n	8013ab4 <_free_r+0x74>
 8013aae:	230c      	movs	r3, #12
 8013ab0:	602b      	str	r3, [r5, #0]
 8013ab2:	e7d6      	b.n	8013a62 <_free_r+0x22>
 8013ab4:	6820      	ldr	r0, [r4, #0]
 8013ab6:	1821      	adds	r1, r4, r0
 8013ab8:	428b      	cmp	r3, r1
 8013aba:	bf04      	itt	eq
 8013abc:	6819      	ldreq	r1, [r3, #0]
 8013abe:	685b      	ldreq	r3, [r3, #4]
 8013ac0:	6063      	str	r3, [r4, #4]
 8013ac2:	bf04      	itt	eq
 8013ac4:	1809      	addeq	r1, r1, r0
 8013ac6:	6021      	streq	r1, [r4, #0]
 8013ac8:	6054      	str	r4, [r2, #4]
 8013aca:	e7ca      	b.n	8013a62 <_free_r+0x22>
 8013acc:	bd38      	pop	{r3, r4, r5, pc}
 8013ace:	bf00      	nop
 8013ad0:	20004a08 	.word	0x20004a08

08013ad4 <malloc>:
 8013ad4:	4b02      	ldr	r3, [pc, #8]	@ (8013ae0 <malloc+0xc>)
 8013ad6:	4601      	mov	r1, r0
 8013ad8:	6818      	ldr	r0, [r3, #0]
 8013ada:	f000 b825 	b.w	8013b28 <_malloc_r>
 8013ade:	bf00      	nop
 8013ae0:	20000054 	.word	0x20000054

08013ae4 <sbrk_aligned>:
 8013ae4:	b570      	push	{r4, r5, r6, lr}
 8013ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8013b24 <sbrk_aligned+0x40>)
 8013ae8:	460c      	mov	r4, r1
 8013aea:	6831      	ldr	r1, [r6, #0]
 8013aec:	4605      	mov	r5, r0
 8013aee:	b911      	cbnz	r1, 8013af6 <sbrk_aligned+0x12>
 8013af0:	f001 fe04 	bl	80156fc <_sbrk_r>
 8013af4:	6030      	str	r0, [r6, #0]
 8013af6:	4621      	mov	r1, r4
 8013af8:	4628      	mov	r0, r5
 8013afa:	f001 fdff 	bl	80156fc <_sbrk_r>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	d103      	bne.n	8013b0a <sbrk_aligned+0x26>
 8013b02:	f04f 34ff 	mov.w	r4, #4294967295
 8013b06:	4620      	mov	r0, r4
 8013b08:	bd70      	pop	{r4, r5, r6, pc}
 8013b0a:	1cc4      	adds	r4, r0, #3
 8013b0c:	f024 0403 	bic.w	r4, r4, #3
 8013b10:	42a0      	cmp	r0, r4
 8013b12:	d0f8      	beq.n	8013b06 <sbrk_aligned+0x22>
 8013b14:	1a21      	subs	r1, r4, r0
 8013b16:	4628      	mov	r0, r5
 8013b18:	f001 fdf0 	bl	80156fc <_sbrk_r>
 8013b1c:	3001      	adds	r0, #1
 8013b1e:	d1f2      	bne.n	8013b06 <sbrk_aligned+0x22>
 8013b20:	e7ef      	b.n	8013b02 <sbrk_aligned+0x1e>
 8013b22:	bf00      	nop
 8013b24:	20004a04 	.word	0x20004a04

08013b28 <_malloc_r>:
 8013b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b2c:	1ccd      	adds	r5, r1, #3
 8013b2e:	f025 0503 	bic.w	r5, r5, #3
 8013b32:	3508      	adds	r5, #8
 8013b34:	2d0c      	cmp	r5, #12
 8013b36:	bf38      	it	cc
 8013b38:	250c      	movcc	r5, #12
 8013b3a:	2d00      	cmp	r5, #0
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	db01      	blt.n	8013b44 <_malloc_r+0x1c>
 8013b40:	42a9      	cmp	r1, r5
 8013b42:	d904      	bls.n	8013b4e <_malloc_r+0x26>
 8013b44:	230c      	movs	r3, #12
 8013b46:	6033      	str	r3, [r6, #0]
 8013b48:	2000      	movs	r0, #0
 8013b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013c24 <_malloc_r+0xfc>
 8013b52:	f000 f869 	bl	8013c28 <__malloc_lock>
 8013b56:	f8d8 3000 	ldr.w	r3, [r8]
 8013b5a:	461c      	mov	r4, r3
 8013b5c:	bb44      	cbnz	r4, 8013bb0 <_malloc_r+0x88>
 8013b5e:	4629      	mov	r1, r5
 8013b60:	4630      	mov	r0, r6
 8013b62:	f7ff ffbf 	bl	8013ae4 <sbrk_aligned>
 8013b66:	1c43      	adds	r3, r0, #1
 8013b68:	4604      	mov	r4, r0
 8013b6a:	d158      	bne.n	8013c1e <_malloc_r+0xf6>
 8013b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8013b70:	4627      	mov	r7, r4
 8013b72:	2f00      	cmp	r7, #0
 8013b74:	d143      	bne.n	8013bfe <_malloc_r+0xd6>
 8013b76:	2c00      	cmp	r4, #0
 8013b78:	d04b      	beq.n	8013c12 <_malloc_r+0xea>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	4639      	mov	r1, r7
 8013b7e:	4630      	mov	r0, r6
 8013b80:	eb04 0903 	add.w	r9, r4, r3
 8013b84:	f001 fdba 	bl	80156fc <_sbrk_r>
 8013b88:	4581      	cmp	r9, r0
 8013b8a:	d142      	bne.n	8013c12 <_malloc_r+0xea>
 8013b8c:	6821      	ldr	r1, [r4, #0]
 8013b8e:	1a6d      	subs	r5, r5, r1
 8013b90:	4629      	mov	r1, r5
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7ff ffa6 	bl	8013ae4 <sbrk_aligned>
 8013b98:	3001      	adds	r0, #1
 8013b9a:	d03a      	beq.n	8013c12 <_malloc_r+0xea>
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	442b      	add	r3, r5
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8013ba6:	685a      	ldr	r2, [r3, #4]
 8013ba8:	bb62      	cbnz	r2, 8013c04 <_malloc_r+0xdc>
 8013baa:	f8c8 7000 	str.w	r7, [r8]
 8013bae:	e00f      	b.n	8013bd0 <_malloc_r+0xa8>
 8013bb0:	6822      	ldr	r2, [r4, #0]
 8013bb2:	1b52      	subs	r2, r2, r5
 8013bb4:	d420      	bmi.n	8013bf8 <_malloc_r+0xd0>
 8013bb6:	2a0b      	cmp	r2, #11
 8013bb8:	d917      	bls.n	8013bea <_malloc_r+0xc2>
 8013bba:	1961      	adds	r1, r4, r5
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	6025      	str	r5, [r4, #0]
 8013bc0:	bf18      	it	ne
 8013bc2:	6059      	strne	r1, [r3, #4]
 8013bc4:	6863      	ldr	r3, [r4, #4]
 8013bc6:	bf08      	it	eq
 8013bc8:	f8c8 1000 	streq.w	r1, [r8]
 8013bcc:	5162      	str	r2, [r4, r5]
 8013bce:	604b      	str	r3, [r1, #4]
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	f000 f82f 	bl	8013c34 <__malloc_unlock>
 8013bd6:	f104 000b 	add.w	r0, r4, #11
 8013bda:	1d23      	adds	r3, r4, #4
 8013bdc:	f020 0007 	bic.w	r0, r0, #7
 8013be0:	1ac2      	subs	r2, r0, r3
 8013be2:	bf1c      	itt	ne
 8013be4:	1a1b      	subne	r3, r3, r0
 8013be6:	50a3      	strne	r3, [r4, r2]
 8013be8:	e7af      	b.n	8013b4a <_malloc_r+0x22>
 8013bea:	6862      	ldr	r2, [r4, #4]
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	bf0c      	ite	eq
 8013bf0:	f8c8 2000 	streq.w	r2, [r8]
 8013bf4:	605a      	strne	r2, [r3, #4]
 8013bf6:	e7eb      	b.n	8013bd0 <_malloc_r+0xa8>
 8013bf8:	4623      	mov	r3, r4
 8013bfa:	6864      	ldr	r4, [r4, #4]
 8013bfc:	e7ae      	b.n	8013b5c <_malloc_r+0x34>
 8013bfe:	463c      	mov	r4, r7
 8013c00:	687f      	ldr	r7, [r7, #4]
 8013c02:	e7b6      	b.n	8013b72 <_malloc_r+0x4a>
 8013c04:	461a      	mov	r2, r3
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	42a3      	cmp	r3, r4
 8013c0a:	d1fb      	bne.n	8013c04 <_malloc_r+0xdc>
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	6053      	str	r3, [r2, #4]
 8013c10:	e7de      	b.n	8013bd0 <_malloc_r+0xa8>
 8013c12:	230c      	movs	r3, #12
 8013c14:	6033      	str	r3, [r6, #0]
 8013c16:	4630      	mov	r0, r6
 8013c18:	f000 f80c 	bl	8013c34 <__malloc_unlock>
 8013c1c:	e794      	b.n	8013b48 <_malloc_r+0x20>
 8013c1e:	6005      	str	r5, [r0, #0]
 8013c20:	e7d6      	b.n	8013bd0 <_malloc_r+0xa8>
 8013c22:	bf00      	nop
 8013c24:	20004a08 	.word	0x20004a08

08013c28 <__malloc_lock>:
 8013c28:	4801      	ldr	r0, [pc, #4]	@ (8013c30 <__malloc_lock+0x8>)
 8013c2a:	f7ff b89a 	b.w	8012d62 <__retarget_lock_acquire_recursive>
 8013c2e:	bf00      	nop
 8013c30:	20004a00 	.word	0x20004a00

08013c34 <__malloc_unlock>:
 8013c34:	4801      	ldr	r0, [pc, #4]	@ (8013c3c <__malloc_unlock+0x8>)
 8013c36:	f7ff b895 	b.w	8012d64 <__retarget_lock_release_recursive>
 8013c3a:	bf00      	nop
 8013c3c:	20004a00 	.word	0x20004a00

08013c40 <_Balloc>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	69c6      	ldr	r6, [r0, #28]
 8013c44:	4604      	mov	r4, r0
 8013c46:	460d      	mov	r5, r1
 8013c48:	b976      	cbnz	r6, 8013c68 <_Balloc+0x28>
 8013c4a:	2010      	movs	r0, #16
 8013c4c:	f7ff ff42 	bl	8013ad4 <malloc>
 8013c50:	4602      	mov	r2, r0
 8013c52:	61e0      	str	r0, [r4, #28]
 8013c54:	b920      	cbnz	r0, 8013c60 <_Balloc+0x20>
 8013c56:	4b18      	ldr	r3, [pc, #96]	@ (8013cb8 <_Balloc+0x78>)
 8013c58:	4818      	ldr	r0, [pc, #96]	@ (8013cbc <_Balloc+0x7c>)
 8013c5a:	216b      	movs	r1, #107	@ 0x6b
 8013c5c:	f001 fd68 	bl	8015730 <__assert_func>
 8013c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c64:	6006      	str	r6, [r0, #0]
 8013c66:	60c6      	str	r6, [r0, #12]
 8013c68:	69e6      	ldr	r6, [r4, #28]
 8013c6a:	68f3      	ldr	r3, [r6, #12]
 8013c6c:	b183      	cbz	r3, 8013c90 <_Balloc+0x50>
 8013c6e:	69e3      	ldr	r3, [r4, #28]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c76:	b9b8      	cbnz	r0, 8013ca8 <_Balloc+0x68>
 8013c78:	2101      	movs	r1, #1
 8013c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8013c7e:	1d72      	adds	r2, r6, #5
 8013c80:	0092      	lsls	r2, r2, #2
 8013c82:	4620      	mov	r0, r4
 8013c84:	f001 fd72 	bl	801576c <_calloc_r>
 8013c88:	b160      	cbz	r0, 8013ca4 <_Balloc+0x64>
 8013c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c8e:	e00e      	b.n	8013cae <_Balloc+0x6e>
 8013c90:	2221      	movs	r2, #33	@ 0x21
 8013c92:	2104      	movs	r1, #4
 8013c94:	4620      	mov	r0, r4
 8013c96:	f001 fd69 	bl	801576c <_calloc_r>
 8013c9a:	69e3      	ldr	r3, [r4, #28]
 8013c9c:	60f0      	str	r0, [r6, #12]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d1e4      	bne.n	8013c6e <_Balloc+0x2e>
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}
 8013ca8:	6802      	ldr	r2, [r0, #0]
 8013caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013cae:	2300      	movs	r3, #0
 8013cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013cb4:	e7f7      	b.n	8013ca6 <_Balloc+0x66>
 8013cb6:	bf00      	nop
 8013cb8:	08018de2 	.word	0x08018de2
 8013cbc:	08018e62 	.word	0x08018e62

08013cc0 <_Bfree>:
 8013cc0:	b570      	push	{r4, r5, r6, lr}
 8013cc2:	69c6      	ldr	r6, [r0, #28]
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	460c      	mov	r4, r1
 8013cc8:	b976      	cbnz	r6, 8013ce8 <_Bfree+0x28>
 8013cca:	2010      	movs	r0, #16
 8013ccc:	f7ff ff02 	bl	8013ad4 <malloc>
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	61e8      	str	r0, [r5, #28]
 8013cd4:	b920      	cbnz	r0, 8013ce0 <_Bfree+0x20>
 8013cd6:	4b09      	ldr	r3, [pc, #36]	@ (8013cfc <_Bfree+0x3c>)
 8013cd8:	4809      	ldr	r0, [pc, #36]	@ (8013d00 <_Bfree+0x40>)
 8013cda:	218f      	movs	r1, #143	@ 0x8f
 8013cdc:	f001 fd28 	bl	8015730 <__assert_func>
 8013ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ce4:	6006      	str	r6, [r0, #0]
 8013ce6:	60c6      	str	r6, [r0, #12]
 8013ce8:	b13c      	cbz	r4, 8013cfa <_Bfree+0x3a>
 8013cea:	69eb      	ldr	r3, [r5, #28]
 8013cec:	6862      	ldr	r2, [r4, #4]
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013cf4:	6021      	str	r1, [r4, #0]
 8013cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}
 8013cfc:	08018de2 	.word	0x08018de2
 8013d00:	08018e62 	.word	0x08018e62

08013d04 <__multadd>:
 8013d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d08:	690d      	ldr	r5, [r1, #16]
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	461e      	mov	r6, r3
 8013d10:	f101 0c14 	add.w	ip, r1, #20
 8013d14:	2000      	movs	r0, #0
 8013d16:	f8dc 3000 	ldr.w	r3, [ip]
 8013d1a:	b299      	uxth	r1, r3
 8013d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8013d20:	0c1e      	lsrs	r6, r3, #16
 8013d22:	0c0b      	lsrs	r3, r1, #16
 8013d24:	fb02 3306 	mla	r3, r2, r6, r3
 8013d28:	b289      	uxth	r1, r1
 8013d2a:	3001      	adds	r0, #1
 8013d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d30:	4285      	cmp	r5, r0
 8013d32:	f84c 1b04 	str.w	r1, [ip], #4
 8013d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d3a:	dcec      	bgt.n	8013d16 <__multadd+0x12>
 8013d3c:	b30e      	cbz	r6, 8013d82 <__multadd+0x7e>
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	42ab      	cmp	r3, r5
 8013d42:	dc19      	bgt.n	8013d78 <__multadd+0x74>
 8013d44:	6861      	ldr	r1, [r4, #4]
 8013d46:	4638      	mov	r0, r7
 8013d48:	3101      	adds	r1, #1
 8013d4a:	f7ff ff79 	bl	8013c40 <_Balloc>
 8013d4e:	4680      	mov	r8, r0
 8013d50:	b928      	cbnz	r0, 8013d5e <__multadd+0x5a>
 8013d52:	4602      	mov	r2, r0
 8013d54:	4b0c      	ldr	r3, [pc, #48]	@ (8013d88 <__multadd+0x84>)
 8013d56:	480d      	ldr	r0, [pc, #52]	@ (8013d8c <__multadd+0x88>)
 8013d58:	21ba      	movs	r1, #186	@ 0xba
 8013d5a:	f001 fce9 	bl	8015730 <__assert_func>
 8013d5e:	6922      	ldr	r2, [r4, #16]
 8013d60:	3202      	adds	r2, #2
 8013d62:	f104 010c 	add.w	r1, r4, #12
 8013d66:	0092      	lsls	r2, r2, #2
 8013d68:	300c      	adds	r0, #12
 8013d6a:	f7fe fffc 	bl	8012d66 <memcpy>
 8013d6e:	4621      	mov	r1, r4
 8013d70:	4638      	mov	r0, r7
 8013d72:	f7ff ffa5 	bl	8013cc0 <_Bfree>
 8013d76:	4644      	mov	r4, r8
 8013d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d7c:	3501      	adds	r5, #1
 8013d7e:	615e      	str	r6, [r3, #20]
 8013d80:	6125      	str	r5, [r4, #16]
 8013d82:	4620      	mov	r0, r4
 8013d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d88:	08018e51 	.word	0x08018e51
 8013d8c:	08018e62 	.word	0x08018e62

08013d90 <__s2b>:
 8013d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d94:	460c      	mov	r4, r1
 8013d96:	4615      	mov	r5, r2
 8013d98:	461f      	mov	r7, r3
 8013d9a:	2209      	movs	r2, #9
 8013d9c:	3308      	adds	r3, #8
 8013d9e:	4606      	mov	r6, r0
 8013da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013da4:	2100      	movs	r1, #0
 8013da6:	2201      	movs	r2, #1
 8013da8:	429a      	cmp	r2, r3
 8013daa:	db09      	blt.n	8013dc0 <__s2b+0x30>
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7ff ff47 	bl	8013c40 <_Balloc>
 8013db2:	b940      	cbnz	r0, 8013dc6 <__s2b+0x36>
 8013db4:	4602      	mov	r2, r0
 8013db6:	4b19      	ldr	r3, [pc, #100]	@ (8013e1c <__s2b+0x8c>)
 8013db8:	4819      	ldr	r0, [pc, #100]	@ (8013e20 <__s2b+0x90>)
 8013dba:	21d3      	movs	r1, #211	@ 0xd3
 8013dbc:	f001 fcb8 	bl	8015730 <__assert_func>
 8013dc0:	0052      	lsls	r2, r2, #1
 8013dc2:	3101      	adds	r1, #1
 8013dc4:	e7f0      	b.n	8013da8 <__s2b+0x18>
 8013dc6:	9b08      	ldr	r3, [sp, #32]
 8013dc8:	6143      	str	r3, [r0, #20]
 8013dca:	2d09      	cmp	r5, #9
 8013dcc:	f04f 0301 	mov.w	r3, #1
 8013dd0:	6103      	str	r3, [r0, #16]
 8013dd2:	dd16      	ble.n	8013e02 <__s2b+0x72>
 8013dd4:	f104 0909 	add.w	r9, r4, #9
 8013dd8:	46c8      	mov	r8, r9
 8013dda:	442c      	add	r4, r5
 8013ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013de0:	4601      	mov	r1, r0
 8013de2:	3b30      	subs	r3, #48	@ 0x30
 8013de4:	220a      	movs	r2, #10
 8013de6:	4630      	mov	r0, r6
 8013de8:	f7ff ff8c 	bl	8013d04 <__multadd>
 8013dec:	45a0      	cmp	r8, r4
 8013dee:	d1f5      	bne.n	8013ddc <__s2b+0x4c>
 8013df0:	f1a5 0408 	sub.w	r4, r5, #8
 8013df4:	444c      	add	r4, r9
 8013df6:	1b2d      	subs	r5, r5, r4
 8013df8:	1963      	adds	r3, r4, r5
 8013dfa:	42bb      	cmp	r3, r7
 8013dfc:	db04      	blt.n	8013e08 <__s2b+0x78>
 8013dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e02:	340a      	adds	r4, #10
 8013e04:	2509      	movs	r5, #9
 8013e06:	e7f6      	b.n	8013df6 <__s2b+0x66>
 8013e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e0c:	4601      	mov	r1, r0
 8013e0e:	3b30      	subs	r3, #48	@ 0x30
 8013e10:	220a      	movs	r2, #10
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff ff76 	bl	8013d04 <__multadd>
 8013e18:	e7ee      	b.n	8013df8 <__s2b+0x68>
 8013e1a:	bf00      	nop
 8013e1c:	08018e51 	.word	0x08018e51
 8013e20:	08018e62 	.word	0x08018e62

08013e24 <__hi0bits>:
 8013e24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013e28:	4603      	mov	r3, r0
 8013e2a:	bf36      	itet	cc
 8013e2c:	0403      	lslcc	r3, r0, #16
 8013e2e:	2000      	movcs	r0, #0
 8013e30:	2010      	movcc	r0, #16
 8013e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013e36:	bf3c      	itt	cc
 8013e38:	021b      	lslcc	r3, r3, #8
 8013e3a:	3008      	addcc	r0, #8
 8013e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e40:	bf3c      	itt	cc
 8013e42:	011b      	lslcc	r3, r3, #4
 8013e44:	3004      	addcc	r0, #4
 8013e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e4a:	bf3c      	itt	cc
 8013e4c:	009b      	lslcc	r3, r3, #2
 8013e4e:	3002      	addcc	r0, #2
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	db05      	blt.n	8013e60 <__hi0bits+0x3c>
 8013e54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013e58:	f100 0001 	add.w	r0, r0, #1
 8013e5c:	bf08      	it	eq
 8013e5e:	2020      	moveq	r0, #32
 8013e60:	4770      	bx	lr

08013e62 <__lo0bits>:
 8013e62:	6803      	ldr	r3, [r0, #0]
 8013e64:	4602      	mov	r2, r0
 8013e66:	f013 0007 	ands.w	r0, r3, #7
 8013e6a:	d00b      	beq.n	8013e84 <__lo0bits+0x22>
 8013e6c:	07d9      	lsls	r1, r3, #31
 8013e6e:	d421      	bmi.n	8013eb4 <__lo0bits+0x52>
 8013e70:	0798      	lsls	r0, r3, #30
 8013e72:	bf49      	itett	mi
 8013e74:	085b      	lsrmi	r3, r3, #1
 8013e76:	089b      	lsrpl	r3, r3, #2
 8013e78:	2001      	movmi	r0, #1
 8013e7a:	6013      	strmi	r3, [r2, #0]
 8013e7c:	bf5c      	itt	pl
 8013e7e:	6013      	strpl	r3, [r2, #0]
 8013e80:	2002      	movpl	r0, #2
 8013e82:	4770      	bx	lr
 8013e84:	b299      	uxth	r1, r3
 8013e86:	b909      	cbnz	r1, 8013e8c <__lo0bits+0x2a>
 8013e88:	0c1b      	lsrs	r3, r3, #16
 8013e8a:	2010      	movs	r0, #16
 8013e8c:	b2d9      	uxtb	r1, r3
 8013e8e:	b909      	cbnz	r1, 8013e94 <__lo0bits+0x32>
 8013e90:	3008      	adds	r0, #8
 8013e92:	0a1b      	lsrs	r3, r3, #8
 8013e94:	0719      	lsls	r1, r3, #28
 8013e96:	bf04      	itt	eq
 8013e98:	091b      	lsreq	r3, r3, #4
 8013e9a:	3004      	addeq	r0, #4
 8013e9c:	0799      	lsls	r1, r3, #30
 8013e9e:	bf04      	itt	eq
 8013ea0:	089b      	lsreq	r3, r3, #2
 8013ea2:	3002      	addeq	r0, #2
 8013ea4:	07d9      	lsls	r1, r3, #31
 8013ea6:	d403      	bmi.n	8013eb0 <__lo0bits+0x4e>
 8013ea8:	085b      	lsrs	r3, r3, #1
 8013eaa:	f100 0001 	add.w	r0, r0, #1
 8013eae:	d003      	beq.n	8013eb8 <__lo0bits+0x56>
 8013eb0:	6013      	str	r3, [r2, #0]
 8013eb2:	4770      	bx	lr
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	4770      	bx	lr
 8013eb8:	2020      	movs	r0, #32
 8013eba:	4770      	bx	lr

08013ebc <__i2b>:
 8013ebc:	b510      	push	{r4, lr}
 8013ebe:	460c      	mov	r4, r1
 8013ec0:	2101      	movs	r1, #1
 8013ec2:	f7ff febd 	bl	8013c40 <_Balloc>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	b928      	cbnz	r0, 8013ed6 <__i2b+0x1a>
 8013eca:	4b05      	ldr	r3, [pc, #20]	@ (8013ee0 <__i2b+0x24>)
 8013ecc:	4805      	ldr	r0, [pc, #20]	@ (8013ee4 <__i2b+0x28>)
 8013ece:	f240 1145 	movw	r1, #325	@ 0x145
 8013ed2:	f001 fc2d 	bl	8015730 <__assert_func>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	6144      	str	r4, [r0, #20]
 8013eda:	6103      	str	r3, [r0, #16]
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	bf00      	nop
 8013ee0:	08018e51 	.word	0x08018e51
 8013ee4:	08018e62 	.word	0x08018e62

08013ee8 <__multiply>:
 8013ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eec:	4617      	mov	r7, r2
 8013eee:	690a      	ldr	r2, [r1, #16]
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	bfa8      	it	ge
 8013ef6:	463b      	movge	r3, r7
 8013ef8:	4689      	mov	r9, r1
 8013efa:	bfa4      	itt	ge
 8013efc:	460f      	movge	r7, r1
 8013efe:	4699      	movge	r9, r3
 8013f00:	693d      	ldr	r5, [r7, #16]
 8013f02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	6879      	ldr	r1, [r7, #4]
 8013f0a:	eb05 060a 	add.w	r6, r5, sl
 8013f0e:	42b3      	cmp	r3, r6
 8013f10:	b085      	sub	sp, #20
 8013f12:	bfb8      	it	lt
 8013f14:	3101      	addlt	r1, #1
 8013f16:	f7ff fe93 	bl	8013c40 <_Balloc>
 8013f1a:	b930      	cbnz	r0, 8013f2a <__multiply+0x42>
 8013f1c:	4602      	mov	r2, r0
 8013f1e:	4b41      	ldr	r3, [pc, #260]	@ (8014024 <__multiply+0x13c>)
 8013f20:	4841      	ldr	r0, [pc, #260]	@ (8014028 <__multiply+0x140>)
 8013f22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013f26:	f001 fc03 	bl	8015730 <__assert_func>
 8013f2a:	f100 0414 	add.w	r4, r0, #20
 8013f2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013f32:	4623      	mov	r3, r4
 8013f34:	2200      	movs	r2, #0
 8013f36:	4573      	cmp	r3, lr
 8013f38:	d320      	bcc.n	8013f7c <__multiply+0x94>
 8013f3a:	f107 0814 	add.w	r8, r7, #20
 8013f3e:	f109 0114 	add.w	r1, r9, #20
 8013f42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013f46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013f4a:	9302      	str	r3, [sp, #8]
 8013f4c:	1beb      	subs	r3, r5, r7
 8013f4e:	3b15      	subs	r3, #21
 8013f50:	f023 0303 	bic.w	r3, r3, #3
 8013f54:	3304      	adds	r3, #4
 8013f56:	3715      	adds	r7, #21
 8013f58:	42bd      	cmp	r5, r7
 8013f5a:	bf38      	it	cc
 8013f5c:	2304      	movcc	r3, #4
 8013f5e:	9301      	str	r3, [sp, #4]
 8013f60:	9b02      	ldr	r3, [sp, #8]
 8013f62:	9103      	str	r1, [sp, #12]
 8013f64:	428b      	cmp	r3, r1
 8013f66:	d80c      	bhi.n	8013f82 <__multiply+0x9a>
 8013f68:	2e00      	cmp	r6, #0
 8013f6a:	dd03      	ble.n	8013f74 <__multiply+0x8c>
 8013f6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d055      	beq.n	8014020 <__multiply+0x138>
 8013f74:	6106      	str	r6, [r0, #16]
 8013f76:	b005      	add	sp, #20
 8013f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f7c:	f843 2b04 	str.w	r2, [r3], #4
 8013f80:	e7d9      	b.n	8013f36 <__multiply+0x4e>
 8013f82:	f8b1 a000 	ldrh.w	sl, [r1]
 8013f86:	f1ba 0f00 	cmp.w	sl, #0
 8013f8a:	d01f      	beq.n	8013fcc <__multiply+0xe4>
 8013f8c:	46c4      	mov	ip, r8
 8013f8e:	46a1      	mov	r9, r4
 8013f90:	2700      	movs	r7, #0
 8013f92:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013f96:	f8d9 3000 	ldr.w	r3, [r9]
 8013f9a:	fa1f fb82 	uxth.w	fp, r2
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	fb0a 330b 	mla	r3, sl, fp, r3
 8013fa4:	443b      	add	r3, r7
 8013fa6:	f8d9 7000 	ldr.w	r7, [r9]
 8013faa:	0c12      	lsrs	r2, r2, #16
 8013fac:	0c3f      	lsrs	r7, r7, #16
 8013fae:	fb0a 7202 	mla	r2, sl, r2, r7
 8013fb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013fbc:	4565      	cmp	r5, ip
 8013fbe:	f849 3b04 	str.w	r3, [r9], #4
 8013fc2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013fc6:	d8e4      	bhi.n	8013f92 <__multiply+0xaa>
 8013fc8:	9b01      	ldr	r3, [sp, #4]
 8013fca:	50e7      	str	r7, [r4, r3]
 8013fcc:	9b03      	ldr	r3, [sp, #12]
 8013fce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013fd2:	3104      	adds	r1, #4
 8013fd4:	f1b9 0f00 	cmp.w	r9, #0
 8013fd8:	d020      	beq.n	801401c <__multiply+0x134>
 8013fda:	6823      	ldr	r3, [r4, #0]
 8013fdc:	4647      	mov	r7, r8
 8013fde:	46a4      	mov	ip, r4
 8013fe0:	f04f 0a00 	mov.w	sl, #0
 8013fe4:	f8b7 b000 	ldrh.w	fp, [r7]
 8013fe8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013fec:	fb09 220b 	mla	r2, r9, fp, r2
 8013ff0:	4452      	add	r2, sl
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ff8:	f84c 3b04 	str.w	r3, [ip], #4
 8013ffc:	f857 3b04 	ldr.w	r3, [r7], #4
 8014000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014004:	f8bc 3000 	ldrh.w	r3, [ip]
 8014008:	fb09 330a 	mla	r3, r9, sl, r3
 801400c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014010:	42bd      	cmp	r5, r7
 8014012:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014016:	d8e5      	bhi.n	8013fe4 <__multiply+0xfc>
 8014018:	9a01      	ldr	r2, [sp, #4]
 801401a:	50a3      	str	r3, [r4, r2]
 801401c:	3404      	adds	r4, #4
 801401e:	e79f      	b.n	8013f60 <__multiply+0x78>
 8014020:	3e01      	subs	r6, #1
 8014022:	e7a1      	b.n	8013f68 <__multiply+0x80>
 8014024:	08018e51 	.word	0x08018e51
 8014028:	08018e62 	.word	0x08018e62

0801402c <__pow5mult>:
 801402c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014030:	4615      	mov	r5, r2
 8014032:	f012 0203 	ands.w	r2, r2, #3
 8014036:	4607      	mov	r7, r0
 8014038:	460e      	mov	r6, r1
 801403a:	d007      	beq.n	801404c <__pow5mult+0x20>
 801403c:	4c25      	ldr	r4, [pc, #148]	@ (80140d4 <__pow5mult+0xa8>)
 801403e:	3a01      	subs	r2, #1
 8014040:	2300      	movs	r3, #0
 8014042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014046:	f7ff fe5d 	bl	8013d04 <__multadd>
 801404a:	4606      	mov	r6, r0
 801404c:	10ad      	asrs	r5, r5, #2
 801404e:	d03d      	beq.n	80140cc <__pow5mult+0xa0>
 8014050:	69fc      	ldr	r4, [r7, #28]
 8014052:	b97c      	cbnz	r4, 8014074 <__pow5mult+0x48>
 8014054:	2010      	movs	r0, #16
 8014056:	f7ff fd3d 	bl	8013ad4 <malloc>
 801405a:	4602      	mov	r2, r0
 801405c:	61f8      	str	r0, [r7, #28]
 801405e:	b928      	cbnz	r0, 801406c <__pow5mult+0x40>
 8014060:	4b1d      	ldr	r3, [pc, #116]	@ (80140d8 <__pow5mult+0xac>)
 8014062:	481e      	ldr	r0, [pc, #120]	@ (80140dc <__pow5mult+0xb0>)
 8014064:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014068:	f001 fb62 	bl	8015730 <__assert_func>
 801406c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014070:	6004      	str	r4, [r0, #0]
 8014072:	60c4      	str	r4, [r0, #12]
 8014074:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801407c:	b94c      	cbnz	r4, 8014092 <__pow5mult+0x66>
 801407e:	f240 2171 	movw	r1, #625	@ 0x271
 8014082:	4638      	mov	r0, r7
 8014084:	f7ff ff1a 	bl	8013ebc <__i2b>
 8014088:	2300      	movs	r3, #0
 801408a:	f8c8 0008 	str.w	r0, [r8, #8]
 801408e:	4604      	mov	r4, r0
 8014090:	6003      	str	r3, [r0, #0]
 8014092:	f04f 0900 	mov.w	r9, #0
 8014096:	07eb      	lsls	r3, r5, #31
 8014098:	d50a      	bpl.n	80140b0 <__pow5mult+0x84>
 801409a:	4631      	mov	r1, r6
 801409c:	4622      	mov	r2, r4
 801409e:	4638      	mov	r0, r7
 80140a0:	f7ff ff22 	bl	8013ee8 <__multiply>
 80140a4:	4631      	mov	r1, r6
 80140a6:	4680      	mov	r8, r0
 80140a8:	4638      	mov	r0, r7
 80140aa:	f7ff fe09 	bl	8013cc0 <_Bfree>
 80140ae:	4646      	mov	r6, r8
 80140b0:	106d      	asrs	r5, r5, #1
 80140b2:	d00b      	beq.n	80140cc <__pow5mult+0xa0>
 80140b4:	6820      	ldr	r0, [r4, #0]
 80140b6:	b938      	cbnz	r0, 80140c8 <__pow5mult+0x9c>
 80140b8:	4622      	mov	r2, r4
 80140ba:	4621      	mov	r1, r4
 80140bc:	4638      	mov	r0, r7
 80140be:	f7ff ff13 	bl	8013ee8 <__multiply>
 80140c2:	6020      	str	r0, [r4, #0]
 80140c4:	f8c0 9000 	str.w	r9, [r0]
 80140c8:	4604      	mov	r4, r0
 80140ca:	e7e4      	b.n	8014096 <__pow5mult+0x6a>
 80140cc:	4630      	mov	r0, r6
 80140ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140d2:	bf00      	nop
 80140d4:	08018f74 	.word	0x08018f74
 80140d8:	08018de2 	.word	0x08018de2
 80140dc:	08018e62 	.word	0x08018e62

080140e0 <__lshift>:
 80140e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140e4:	460c      	mov	r4, r1
 80140e6:	6849      	ldr	r1, [r1, #4]
 80140e8:	6923      	ldr	r3, [r4, #16]
 80140ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140ee:	68a3      	ldr	r3, [r4, #8]
 80140f0:	4607      	mov	r7, r0
 80140f2:	4691      	mov	r9, r2
 80140f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140f8:	f108 0601 	add.w	r6, r8, #1
 80140fc:	42b3      	cmp	r3, r6
 80140fe:	db0b      	blt.n	8014118 <__lshift+0x38>
 8014100:	4638      	mov	r0, r7
 8014102:	f7ff fd9d 	bl	8013c40 <_Balloc>
 8014106:	4605      	mov	r5, r0
 8014108:	b948      	cbnz	r0, 801411e <__lshift+0x3e>
 801410a:	4602      	mov	r2, r0
 801410c:	4b28      	ldr	r3, [pc, #160]	@ (80141b0 <__lshift+0xd0>)
 801410e:	4829      	ldr	r0, [pc, #164]	@ (80141b4 <__lshift+0xd4>)
 8014110:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014114:	f001 fb0c 	bl	8015730 <__assert_func>
 8014118:	3101      	adds	r1, #1
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	e7ee      	b.n	80140fc <__lshift+0x1c>
 801411e:	2300      	movs	r3, #0
 8014120:	f100 0114 	add.w	r1, r0, #20
 8014124:	f100 0210 	add.w	r2, r0, #16
 8014128:	4618      	mov	r0, r3
 801412a:	4553      	cmp	r3, sl
 801412c:	db33      	blt.n	8014196 <__lshift+0xb6>
 801412e:	6920      	ldr	r0, [r4, #16]
 8014130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014134:	f104 0314 	add.w	r3, r4, #20
 8014138:	f019 091f 	ands.w	r9, r9, #31
 801413c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014144:	d02b      	beq.n	801419e <__lshift+0xbe>
 8014146:	f1c9 0e20 	rsb	lr, r9, #32
 801414a:	468a      	mov	sl, r1
 801414c:	2200      	movs	r2, #0
 801414e:	6818      	ldr	r0, [r3, #0]
 8014150:	fa00 f009 	lsl.w	r0, r0, r9
 8014154:	4310      	orrs	r0, r2
 8014156:	f84a 0b04 	str.w	r0, [sl], #4
 801415a:	f853 2b04 	ldr.w	r2, [r3], #4
 801415e:	459c      	cmp	ip, r3
 8014160:	fa22 f20e 	lsr.w	r2, r2, lr
 8014164:	d8f3      	bhi.n	801414e <__lshift+0x6e>
 8014166:	ebac 0304 	sub.w	r3, ip, r4
 801416a:	3b15      	subs	r3, #21
 801416c:	f023 0303 	bic.w	r3, r3, #3
 8014170:	3304      	adds	r3, #4
 8014172:	f104 0015 	add.w	r0, r4, #21
 8014176:	4560      	cmp	r0, ip
 8014178:	bf88      	it	hi
 801417a:	2304      	movhi	r3, #4
 801417c:	50ca      	str	r2, [r1, r3]
 801417e:	b10a      	cbz	r2, 8014184 <__lshift+0xa4>
 8014180:	f108 0602 	add.w	r6, r8, #2
 8014184:	3e01      	subs	r6, #1
 8014186:	4638      	mov	r0, r7
 8014188:	612e      	str	r6, [r5, #16]
 801418a:	4621      	mov	r1, r4
 801418c:	f7ff fd98 	bl	8013cc0 <_Bfree>
 8014190:	4628      	mov	r0, r5
 8014192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014196:	f842 0f04 	str.w	r0, [r2, #4]!
 801419a:	3301      	adds	r3, #1
 801419c:	e7c5      	b.n	801412a <__lshift+0x4a>
 801419e:	3904      	subs	r1, #4
 80141a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80141a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80141a8:	459c      	cmp	ip, r3
 80141aa:	d8f9      	bhi.n	80141a0 <__lshift+0xc0>
 80141ac:	e7ea      	b.n	8014184 <__lshift+0xa4>
 80141ae:	bf00      	nop
 80141b0:	08018e51 	.word	0x08018e51
 80141b4:	08018e62 	.word	0x08018e62

080141b8 <__mcmp>:
 80141b8:	690a      	ldr	r2, [r1, #16]
 80141ba:	4603      	mov	r3, r0
 80141bc:	6900      	ldr	r0, [r0, #16]
 80141be:	1a80      	subs	r0, r0, r2
 80141c0:	b530      	push	{r4, r5, lr}
 80141c2:	d10e      	bne.n	80141e2 <__mcmp+0x2a>
 80141c4:	3314      	adds	r3, #20
 80141c6:	3114      	adds	r1, #20
 80141c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80141cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80141d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80141d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80141d8:	4295      	cmp	r5, r2
 80141da:	d003      	beq.n	80141e4 <__mcmp+0x2c>
 80141dc:	d205      	bcs.n	80141ea <__mcmp+0x32>
 80141de:	f04f 30ff 	mov.w	r0, #4294967295
 80141e2:	bd30      	pop	{r4, r5, pc}
 80141e4:	42a3      	cmp	r3, r4
 80141e6:	d3f3      	bcc.n	80141d0 <__mcmp+0x18>
 80141e8:	e7fb      	b.n	80141e2 <__mcmp+0x2a>
 80141ea:	2001      	movs	r0, #1
 80141ec:	e7f9      	b.n	80141e2 <__mcmp+0x2a>
	...

080141f0 <__mdiff>:
 80141f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f4:	4689      	mov	r9, r1
 80141f6:	4606      	mov	r6, r0
 80141f8:	4611      	mov	r1, r2
 80141fa:	4648      	mov	r0, r9
 80141fc:	4614      	mov	r4, r2
 80141fe:	f7ff ffdb 	bl	80141b8 <__mcmp>
 8014202:	1e05      	subs	r5, r0, #0
 8014204:	d112      	bne.n	801422c <__mdiff+0x3c>
 8014206:	4629      	mov	r1, r5
 8014208:	4630      	mov	r0, r6
 801420a:	f7ff fd19 	bl	8013c40 <_Balloc>
 801420e:	4602      	mov	r2, r0
 8014210:	b928      	cbnz	r0, 801421e <__mdiff+0x2e>
 8014212:	4b3f      	ldr	r3, [pc, #252]	@ (8014310 <__mdiff+0x120>)
 8014214:	f240 2137 	movw	r1, #567	@ 0x237
 8014218:	483e      	ldr	r0, [pc, #248]	@ (8014314 <__mdiff+0x124>)
 801421a:	f001 fa89 	bl	8015730 <__assert_func>
 801421e:	2301      	movs	r3, #1
 8014220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014224:	4610      	mov	r0, r2
 8014226:	b003      	add	sp, #12
 8014228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801422c:	bfbc      	itt	lt
 801422e:	464b      	movlt	r3, r9
 8014230:	46a1      	movlt	r9, r4
 8014232:	4630      	mov	r0, r6
 8014234:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014238:	bfba      	itte	lt
 801423a:	461c      	movlt	r4, r3
 801423c:	2501      	movlt	r5, #1
 801423e:	2500      	movge	r5, #0
 8014240:	f7ff fcfe 	bl	8013c40 <_Balloc>
 8014244:	4602      	mov	r2, r0
 8014246:	b918      	cbnz	r0, 8014250 <__mdiff+0x60>
 8014248:	4b31      	ldr	r3, [pc, #196]	@ (8014310 <__mdiff+0x120>)
 801424a:	f240 2145 	movw	r1, #581	@ 0x245
 801424e:	e7e3      	b.n	8014218 <__mdiff+0x28>
 8014250:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014254:	6926      	ldr	r6, [r4, #16]
 8014256:	60c5      	str	r5, [r0, #12]
 8014258:	f109 0310 	add.w	r3, r9, #16
 801425c:	f109 0514 	add.w	r5, r9, #20
 8014260:	f104 0e14 	add.w	lr, r4, #20
 8014264:	f100 0b14 	add.w	fp, r0, #20
 8014268:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801426c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014270:	9301      	str	r3, [sp, #4]
 8014272:	46d9      	mov	r9, fp
 8014274:	f04f 0c00 	mov.w	ip, #0
 8014278:	9b01      	ldr	r3, [sp, #4]
 801427a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801427e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014282:	9301      	str	r3, [sp, #4]
 8014284:	fa1f f38a 	uxth.w	r3, sl
 8014288:	4619      	mov	r1, r3
 801428a:	b283      	uxth	r3, r0
 801428c:	1acb      	subs	r3, r1, r3
 801428e:	0c00      	lsrs	r0, r0, #16
 8014290:	4463      	add	r3, ip
 8014292:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014296:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801429a:	b29b      	uxth	r3, r3
 801429c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80142a0:	4576      	cmp	r6, lr
 80142a2:	f849 3b04 	str.w	r3, [r9], #4
 80142a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80142aa:	d8e5      	bhi.n	8014278 <__mdiff+0x88>
 80142ac:	1b33      	subs	r3, r6, r4
 80142ae:	3b15      	subs	r3, #21
 80142b0:	f023 0303 	bic.w	r3, r3, #3
 80142b4:	3415      	adds	r4, #21
 80142b6:	3304      	adds	r3, #4
 80142b8:	42a6      	cmp	r6, r4
 80142ba:	bf38      	it	cc
 80142bc:	2304      	movcc	r3, #4
 80142be:	441d      	add	r5, r3
 80142c0:	445b      	add	r3, fp
 80142c2:	461e      	mov	r6, r3
 80142c4:	462c      	mov	r4, r5
 80142c6:	4544      	cmp	r4, r8
 80142c8:	d30e      	bcc.n	80142e8 <__mdiff+0xf8>
 80142ca:	f108 0103 	add.w	r1, r8, #3
 80142ce:	1b49      	subs	r1, r1, r5
 80142d0:	f021 0103 	bic.w	r1, r1, #3
 80142d4:	3d03      	subs	r5, #3
 80142d6:	45a8      	cmp	r8, r5
 80142d8:	bf38      	it	cc
 80142da:	2100      	movcc	r1, #0
 80142dc:	440b      	add	r3, r1
 80142de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80142e2:	b191      	cbz	r1, 801430a <__mdiff+0x11a>
 80142e4:	6117      	str	r7, [r2, #16]
 80142e6:	e79d      	b.n	8014224 <__mdiff+0x34>
 80142e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80142ec:	46e6      	mov	lr, ip
 80142ee:	0c08      	lsrs	r0, r1, #16
 80142f0:	fa1c fc81 	uxtah	ip, ip, r1
 80142f4:	4471      	add	r1, lr
 80142f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80142fa:	b289      	uxth	r1, r1
 80142fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014300:	f846 1b04 	str.w	r1, [r6], #4
 8014304:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014308:	e7dd      	b.n	80142c6 <__mdiff+0xd6>
 801430a:	3f01      	subs	r7, #1
 801430c:	e7e7      	b.n	80142de <__mdiff+0xee>
 801430e:	bf00      	nop
 8014310:	08018e51 	.word	0x08018e51
 8014314:	08018e62 	.word	0x08018e62

08014318 <__ulp>:
 8014318:	b082      	sub	sp, #8
 801431a:	ed8d 0b00 	vstr	d0, [sp]
 801431e:	9a01      	ldr	r2, [sp, #4]
 8014320:	4b0f      	ldr	r3, [pc, #60]	@ (8014360 <__ulp+0x48>)
 8014322:	4013      	ands	r3, r2
 8014324:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014328:	2b00      	cmp	r3, #0
 801432a:	dc08      	bgt.n	801433e <__ulp+0x26>
 801432c:	425b      	negs	r3, r3
 801432e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014336:	da04      	bge.n	8014342 <__ulp+0x2a>
 8014338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801433c:	4113      	asrs	r3, r2
 801433e:	2200      	movs	r2, #0
 8014340:	e008      	b.n	8014354 <__ulp+0x3c>
 8014342:	f1a2 0314 	sub.w	r3, r2, #20
 8014346:	2b1e      	cmp	r3, #30
 8014348:	bfda      	itte	le
 801434a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801434e:	40da      	lsrle	r2, r3
 8014350:	2201      	movgt	r2, #1
 8014352:	2300      	movs	r3, #0
 8014354:	4619      	mov	r1, r3
 8014356:	4610      	mov	r0, r2
 8014358:	ec41 0b10 	vmov	d0, r0, r1
 801435c:	b002      	add	sp, #8
 801435e:	4770      	bx	lr
 8014360:	7ff00000 	.word	0x7ff00000

08014364 <__b2d>:
 8014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014368:	6906      	ldr	r6, [r0, #16]
 801436a:	f100 0814 	add.w	r8, r0, #20
 801436e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014372:	1f37      	subs	r7, r6, #4
 8014374:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014378:	4610      	mov	r0, r2
 801437a:	f7ff fd53 	bl	8013e24 <__hi0bits>
 801437e:	f1c0 0320 	rsb	r3, r0, #32
 8014382:	280a      	cmp	r0, #10
 8014384:	600b      	str	r3, [r1, #0]
 8014386:	491b      	ldr	r1, [pc, #108]	@ (80143f4 <__b2d+0x90>)
 8014388:	dc15      	bgt.n	80143b6 <__b2d+0x52>
 801438a:	f1c0 0c0b 	rsb	ip, r0, #11
 801438e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014392:	45b8      	cmp	r8, r7
 8014394:	ea43 0501 	orr.w	r5, r3, r1
 8014398:	bf34      	ite	cc
 801439a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801439e:	2300      	movcs	r3, #0
 80143a0:	3015      	adds	r0, #21
 80143a2:	fa02 f000 	lsl.w	r0, r2, r0
 80143a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80143aa:	4303      	orrs	r3, r0
 80143ac:	461c      	mov	r4, r3
 80143ae:	ec45 4b10 	vmov	d0, r4, r5
 80143b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b6:	45b8      	cmp	r8, r7
 80143b8:	bf3a      	itte	cc
 80143ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80143be:	f1a6 0708 	subcc.w	r7, r6, #8
 80143c2:	2300      	movcs	r3, #0
 80143c4:	380b      	subs	r0, #11
 80143c6:	d012      	beq.n	80143ee <__b2d+0x8a>
 80143c8:	f1c0 0120 	rsb	r1, r0, #32
 80143cc:	fa23 f401 	lsr.w	r4, r3, r1
 80143d0:	4082      	lsls	r2, r0
 80143d2:	4322      	orrs	r2, r4
 80143d4:	4547      	cmp	r7, r8
 80143d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80143da:	bf8c      	ite	hi
 80143dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80143e0:	2200      	movls	r2, #0
 80143e2:	4083      	lsls	r3, r0
 80143e4:	40ca      	lsrs	r2, r1
 80143e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80143ea:	4313      	orrs	r3, r2
 80143ec:	e7de      	b.n	80143ac <__b2d+0x48>
 80143ee:	ea42 0501 	orr.w	r5, r2, r1
 80143f2:	e7db      	b.n	80143ac <__b2d+0x48>
 80143f4:	3ff00000 	.word	0x3ff00000

080143f8 <__d2b>:
 80143f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143fc:	460f      	mov	r7, r1
 80143fe:	2101      	movs	r1, #1
 8014400:	ec59 8b10 	vmov	r8, r9, d0
 8014404:	4616      	mov	r6, r2
 8014406:	f7ff fc1b 	bl	8013c40 <_Balloc>
 801440a:	4604      	mov	r4, r0
 801440c:	b930      	cbnz	r0, 801441c <__d2b+0x24>
 801440e:	4602      	mov	r2, r0
 8014410:	4b23      	ldr	r3, [pc, #140]	@ (80144a0 <__d2b+0xa8>)
 8014412:	4824      	ldr	r0, [pc, #144]	@ (80144a4 <__d2b+0xac>)
 8014414:	f240 310f 	movw	r1, #783	@ 0x30f
 8014418:	f001 f98a 	bl	8015730 <__assert_func>
 801441c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014424:	b10d      	cbz	r5, 801442a <__d2b+0x32>
 8014426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801442a:	9301      	str	r3, [sp, #4]
 801442c:	f1b8 0300 	subs.w	r3, r8, #0
 8014430:	d023      	beq.n	801447a <__d2b+0x82>
 8014432:	4668      	mov	r0, sp
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	f7ff fd14 	bl	8013e62 <__lo0bits>
 801443a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801443e:	b1d0      	cbz	r0, 8014476 <__d2b+0x7e>
 8014440:	f1c0 0320 	rsb	r3, r0, #32
 8014444:	fa02 f303 	lsl.w	r3, r2, r3
 8014448:	430b      	orrs	r3, r1
 801444a:	40c2      	lsrs	r2, r0
 801444c:	6163      	str	r3, [r4, #20]
 801444e:	9201      	str	r2, [sp, #4]
 8014450:	9b01      	ldr	r3, [sp, #4]
 8014452:	61a3      	str	r3, [r4, #24]
 8014454:	2b00      	cmp	r3, #0
 8014456:	bf0c      	ite	eq
 8014458:	2201      	moveq	r2, #1
 801445a:	2202      	movne	r2, #2
 801445c:	6122      	str	r2, [r4, #16]
 801445e:	b1a5      	cbz	r5, 801448a <__d2b+0x92>
 8014460:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014464:	4405      	add	r5, r0
 8014466:	603d      	str	r5, [r7, #0]
 8014468:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801446c:	6030      	str	r0, [r6, #0]
 801446e:	4620      	mov	r0, r4
 8014470:	b003      	add	sp, #12
 8014472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014476:	6161      	str	r1, [r4, #20]
 8014478:	e7ea      	b.n	8014450 <__d2b+0x58>
 801447a:	a801      	add	r0, sp, #4
 801447c:	f7ff fcf1 	bl	8013e62 <__lo0bits>
 8014480:	9b01      	ldr	r3, [sp, #4]
 8014482:	6163      	str	r3, [r4, #20]
 8014484:	3020      	adds	r0, #32
 8014486:	2201      	movs	r2, #1
 8014488:	e7e8      	b.n	801445c <__d2b+0x64>
 801448a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801448e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014492:	6038      	str	r0, [r7, #0]
 8014494:	6918      	ldr	r0, [r3, #16]
 8014496:	f7ff fcc5 	bl	8013e24 <__hi0bits>
 801449a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801449e:	e7e5      	b.n	801446c <__d2b+0x74>
 80144a0:	08018e51 	.word	0x08018e51
 80144a4:	08018e62 	.word	0x08018e62

080144a8 <__ratio>:
 80144a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ac:	b085      	sub	sp, #20
 80144ae:	e9cd 1000 	strd	r1, r0, [sp]
 80144b2:	a902      	add	r1, sp, #8
 80144b4:	f7ff ff56 	bl	8014364 <__b2d>
 80144b8:	9800      	ldr	r0, [sp, #0]
 80144ba:	a903      	add	r1, sp, #12
 80144bc:	ec55 4b10 	vmov	r4, r5, d0
 80144c0:	f7ff ff50 	bl	8014364 <__b2d>
 80144c4:	9b01      	ldr	r3, [sp, #4]
 80144c6:	6919      	ldr	r1, [r3, #16]
 80144c8:	9b00      	ldr	r3, [sp, #0]
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	1ac9      	subs	r1, r1, r3
 80144ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80144d2:	1a9b      	subs	r3, r3, r2
 80144d4:	ec5b ab10 	vmov	sl, fp, d0
 80144d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80144dc:	2b00      	cmp	r3, #0
 80144de:	bfce      	itee	gt
 80144e0:	462a      	movgt	r2, r5
 80144e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80144e6:	465a      	movle	r2, fp
 80144e8:	462f      	mov	r7, r5
 80144ea:	46d9      	mov	r9, fp
 80144ec:	bfcc      	ite	gt
 80144ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80144f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80144f6:	464b      	mov	r3, r9
 80144f8:	4652      	mov	r2, sl
 80144fa:	4620      	mov	r0, r4
 80144fc:	4639      	mov	r1, r7
 80144fe:	f7ec f9cd 	bl	800089c <__aeabi_ddiv>
 8014502:	ec41 0b10 	vmov	d0, r0, r1
 8014506:	b005      	add	sp, #20
 8014508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801450c <__copybits>:
 801450c:	3901      	subs	r1, #1
 801450e:	b570      	push	{r4, r5, r6, lr}
 8014510:	1149      	asrs	r1, r1, #5
 8014512:	6914      	ldr	r4, [r2, #16]
 8014514:	3101      	adds	r1, #1
 8014516:	f102 0314 	add.w	r3, r2, #20
 801451a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801451e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014522:	1f05      	subs	r5, r0, #4
 8014524:	42a3      	cmp	r3, r4
 8014526:	d30c      	bcc.n	8014542 <__copybits+0x36>
 8014528:	1aa3      	subs	r3, r4, r2
 801452a:	3b11      	subs	r3, #17
 801452c:	f023 0303 	bic.w	r3, r3, #3
 8014530:	3211      	adds	r2, #17
 8014532:	42a2      	cmp	r2, r4
 8014534:	bf88      	it	hi
 8014536:	2300      	movhi	r3, #0
 8014538:	4418      	add	r0, r3
 801453a:	2300      	movs	r3, #0
 801453c:	4288      	cmp	r0, r1
 801453e:	d305      	bcc.n	801454c <__copybits+0x40>
 8014540:	bd70      	pop	{r4, r5, r6, pc}
 8014542:	f853 6b04 	ldr.w	r6, [r3], #4
 8014546:	f845 6f04 	str.w	r6, [r5, #4]!
 801454a:	e7eb      	b.n	8014524 <__copybits+0x18>
 801454c:	f840 3b04 	str.w	r3, [r0], #4
 8014550:	e7f4      	b.n	801453c <__copybits+0x30>

08014552 <__any_on>:
 8014552:	f100 0214 	add.w	r2, r0, #20
 8014556:	6900      	ldr	r0, [r0, #16]
 8014558:	114b      	asrs	r3, r1, #5
 801455a:	4298      	cmp	r0, r3
 801455c:	b510      	push	{r4, lr}
 801455e:	db11      	blt.n	8014584 <__any_on+0x32>
 8014560:	dd0a      	ble.n	8014578 <__any_on+0x26>
 8014562:	f011 011f 	ands.w	r1, r1, #31
 8014566:	d007      	beq.n	8014578 <__any_on+0x26>
 8014568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801456c:	fa24 f001 	lsr.w	r0, r4, r1
 8014570:	fa00 f101 	lsl.w	r1, r0, r1
 8014574:	428c      	cmp	r4, r1
 8014576:	d10b      	bne.n	8014590 <__any_on+0x3e>
 8014578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801457c:	4293      	cmp	r3, r2
 801457e:	d803      	bhi.n	8014588 <__any_on+0x36>
 8014580:	2000      	movs	r0, #0
 8014582:	bd10      	pop	{r4, pc}
 8014584:	4603      	mov	r3, r0
 8014586:	e7f7      	b.n	8014578 <__any_on+0x26>
 8014588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801458c:	2900      	cmp	r1, #0
 801458e:	d0f5      	beq.n	801457c <__any_on+0x2a>
 8014590:	2001      	movs	r0, #1
 8014592:	e7f6      	b.n	8014582 <__any_on+0x30>

08014594 <sulp>:
 8014594:	b570      	push	{r4, r5, r6, lr}
 8014596:	4604      	mov	r4, r0
 8014598:	460d      	mov	r5, r1
 801459a:	ec45 4b10 	vmov	d0, r4, r5
 801459e:	4616      	mov	r6, r2
 80145a0:	f7ff feba 	bl	8014318 <__ulp>
 80145a4:	ec51 0b10 	vmov	r0, r1, d0
 80145a8:	b17e      	cbz	r6, 80145ca <sulp+0x36>
 80145aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80145ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	dd09      	ble.n	80145ca <sulp+0x36>
 80145b6:	051b      	lsls	r3, r3, #20
 80145b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80145bc:	2400      	movs	r4, #0
 80145be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80145c2:	4622      	mov	r2, r4
 80145c4:	462b      	mov	r3, r5
 80145c6:	f7ec f83f 	bl	8000648 <__aeabi_dmul>
 80145ca:	ec41 0b10 	vmov	d0, r0, r1
 80145ce:	bd70      	pop	{r4, r5, r6, pc}

080145d0 <_strtod_l>:
 80145d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	b09f      	sub	sp, #124	@ 0x7c
 80145d6:	460c      	mov	r4, r1
 80145d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80145da:	2200      	movs	r2, #0
 80145dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80145de:	9005      	str	r0, [sp, #20]
 80145e0:	f04f 0a00 	mov.w	sl, #0
 80145e4:	f04f 0b00 	mov.w	fp, #0
 80145e8:	460a      	mov	r2, r1
 80145ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80145ec:	7811      	ldrb	r1, [r2, #0]
 80145ee:	292b      	cmp	r1, #43	@ 0x2b
 80145f0:	d04a      	beq.n	8014688 <_strtod_l+0xb8>
 80145f2:	d838      	bhi.n	8014666 <_strtod_l+0x96>
 80145f4:	290d      	cmp	r1, #13
 80145f6:	d832      	bhi.n	801465e <_strtod_l+0x8e>
 80145f8:	2908      	cmp	r1, #8
 80145fa:	d832      	bhi.n	8014662 <_strtod_l+0x92>
 80145fc:	2900      	cmp	r1, #0
 80145fe:	d03b      	beq.n	8014678 <_strtod_l+0xa8>
 8014600:	2200      	movs	r2, #0
 8014602:	920e      	str	r2, [sp, #56]	@ 0x38
 8014604:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8014606:	782a      	ldrb	r2, [r5, #0]
 8014608:	2a30      	cmp	r2, #48	@ 0x30
 801460a:	f040 80b2 	bne.w	8014772 <_strtod_l+0x1a2>
 801460e:	786a      	ldrb	r2, [r5, #1]
 8014610:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014614:	2a58      	cmp	r2, #88	@ 0x58
 8014616:	d16e      	bne.n	80146f6 <_strtod_l+0x126>
 8014618:	9302      	str	r3, [sp, #8]
 801461a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801461c:	9301      	str	r3, [sp, #4]
 801461e:	ab1a      	add	r3, sp, #104	@ 0x68
 8014620:	9300      	str	r3, [sp, #0]
 8014622:	4a8f      	ldr	r2, [pc, #572]	@ (8014860 <_strtod_l+0x290>)
 8014624:	9805      	ldr	r0, [sp, #20]
 8014626:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014628:	a919      	add	r1, sp, #100	@ 0x64
 801462a:	f001 f91b 	bl	8015864 <__gethex>
 801462e:	f010 060f 	ands.w	r6, r0, #15
 8014632:	4604      	mov	r4, r0
 8014634:	d005      	beq.n	8014642 <_strtod_l+0x72>
 8014636:	2e06      	cmp	r6, #6
 8014638:	d128      	bne.n	801468c <_strtod_l+0xbc>
 801463a:	3501      	adds	r5, #1
 801463c:	2300      	movs	r3, #0
 801463e:	9519      	str	r5, [sp, #100]	@ 0x64
 8014640:	930e      	str	r3, [sp, #56]	@ 0x38
 8014642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014644:	2b00      	cmp	r3, #0
 8014646:	f040 858e 	bne.w	8015166 <_strtod_l+0xb96>
 801464a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801464c:	b1cb      	cbz	r3, 8014682 <_strtod_l+0xb2>
 801464e:	4652      	mov	r2, sl
 8014650:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014654:	ec43 2b10 	vmov	d0, r2, r3
 8014658:	b01f      	add	sp, #124	@ 0x7c
 801465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801465e:	2920      	cmp	r1, #32
 8014660:	d1ce      	bne.n	8014600 <_strtod_l+0x30>
 8014662:	3201      	adds	r2, #1
 8014664:	e7c1      	b.n	80145ea <_strtod_l+0x1a>
 8014666:	292d      	cmp	r1, #45	@ 0x2d
 8014668:	d1ca      	bne.n	8014600 <_strtod_l+0x30>
 801466a:	2101      	movs	r1, #1
 801466c:	910e      	str	r1, [sp, #56]	@ 0x38
 801466e:	1c51      	adds	r1, r2, #1
 8014670:	9119      	str	r1, [sp, #100]	@ 0x64
 8014672:	7852      	ldrb	r2, [r2, #1]
 8014674:	2a00      	cmp	r2, #0
 8014676:	d1c5      	bne.n	8014604 <_strtod_l+0x34>
 8014678:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801467a:	9419      	str	r4, [sp, #100]	@ 0x64
 801467c:	2b00      	cmp	r3, #0
 801467e:	f040 8570 	bne.w	8015162 <_strtod_l+0xb92>
 8014682:	4652      	mov	r2, sl
 8014684:	465b      	mov	r3, fp
 8014686:	e7e5      	b.n	8014654 <_strtod_l+0x84>
 8014688:	2100      	movs	r1, #0
 801468a:	e7ef      	b.n	801466c <_strtod_l+0x9c>
 801468c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801468e:	b13a      	cbz	r2, 80146a0 <_strtod_l+0xd0>
 8014690:	2135      	movs	r1, #53	@ 0x35
 8014692:	a81c      	add	r0, sp, #112	@ 0x70
 8014694:	f7ff ff3a 	bl	801450c <__copybits>
 8014698:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801469a:	9805      	ldr	r0, [sp, #20]
 801469c:	f7ff fb10 	bl	8013cc0 <_Bfree>
 80146a0:	3e01      	subs	r6, #1
 80146a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80146a4:	2e04      	cmp	r6, #4
 80146a6:	d806      	bhi.n	80146b6 <_strtod_l+0xe6>
 80146a8:	e8df f006 	tbb	[pc, r6]
 80146ac:	201d0314 	.word	0x201d0314
 80146b0:	14          	.byte	0x14
 80146b1:	00          	.byte	0x00
 80146b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80146b6:	05e1      	lsls	r1, r4, #23
 80146b8:	bf48      	it	mi
 80146ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80146be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80146c2:	0d1b      	lsrs	r3, r3, #20
 80146c4:	051b      	lsls	r3, r3, #20
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1bb      	bne.n	8014642 <_strtod_l+0x72>
 80146ca:	f7fe fb1f 	bl	8012d0c <__errno>
 80146ce:	2322      	movs	r3, #34	@ 0x22
 80146d0:	6003      	str	r3, [r0, #0]
 80146d2:	e7b6      	b.n	8014642 <_strtod_l+0x72>
 80146d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80146d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80146dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80146e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80146e4:	e7e7      	b.n	80146b6 <_strtod_l+0xe6>
 80146e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8014868 <_strtod_l+0x298>
 80146ea:	e7e4      	b.n	80146b6 <_strtod_l+0xe6>
 80146ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80146f0:	f04f 3aff 	mov.w	sl, #4294967295
 80146f4:	e7df      	b.n	80146b6 <_strtod_l+0xe6>
 80146f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80146f8:	1c5a      	adds	r2, r3, #1
 80146fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80146fc:	785b      	ldrb	r3, [r3, #1]
 80146fe:	2b30      	cmp	r3, #48	@ 0x30
 8014700:	d0f9      	beq.n	80146f6 <_strtod_l+0x126>
 8014702:	2b00      	cmp	r3, #0
 8014704:	d09d      	beq.n	8014642 <_strtod_l+0x72>
 8014706:	2301      	movs	r3, #1
 8014708:	2700      	movs	r7, #0
 801470a:	9308      	str	r3, [sp, #32]
 801470c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801470e:	930c      	str	r3, [sp, #48]	@ 0x30
 8014710:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014712:	46b9      	mov	r9, r7
 8014714:	220a      	movs	r2, #10
 8014716:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014718:	7805      	ldrb	r5, [r0, #0]
 801471a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801471e:	b2d9      	uxtb	r1, r3
 8014720:	2909      	cmp	r1, #9
 8014722:	d928      	bls.n	8014776 <_strtod_l+0x1a6>
 8014724:	494f      	ldr	r1, [pc, #316]	@ (8014864 <_strtod_l+0x294>)
 8014726:	2201      	movs	r2, #1
 8014728:	f000 ffd6 	bl	80156d8 <strncmp>
 801472c:	2800      	cmp	r0, #0
 801472e:	d032      	beq.n	8014796 <_strtod_l+0x1c6>
 8014730:	2000      	movs	r0, #0
 8014732:	462a      	mov	r2, r5
 8014734:	900a      	str	r0, [sp, #40]	@ 0x28
 8014736:	464d      	mov	r5, r9
 8014738:	4603      	mov	r3, r0
 801473a:	2a65      	cmp	r2, #101	@ 0x65
 801473c:	d001      	beq.n	8014742 <_strtod_l+0x172>
 801473e:	2a45      	cmp	r2, #69	@ 0x45
 8014740:	d114      	bne.n	801476c <_strtod_l+0x19c>
 8014742:	b91d      	cbnz	r5, 801474c <_strtod_l+0x17c>
 8014744:	9a08      	ldr	r2, [sp, #32]
 8014746:	4302      	orrs	r2, r0
 8014748:	d096      	beq.n	8014678 <_strtod_l+0xa8>
 801474a:	2500      	movs	r5, #0
 801474c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801474e:	1c62      	adds	r2, r4, #1
 8014750:	9219      	str	r2, [sp, #100]	@ 0x64
 8014752:	7862      	ldrb	r2, [r4, #1]
 8014754:	2a2b      	cmp	r2, #43	@ 0x2b
 8014756:	d07a      	beq.n	801484e <_strtod_l+0x27e>
 8014758:	2a2d      	cmp	r2, #45	@ 0x2d
 801475a:	d07e      	beq.n	801485a <_strtod_l+0x28a>
 801475c:	f04f 0c00 	mov.w	ip, #0
 8014760:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014764:	2909      	cmp	r1, #9
 8014766:	f240 8085 	bls.w	8014874 <_strtod_l+0x2a4>
 801476a:	9419      	str	r4, [sp, #100]	@ 0x64
 801476c:	f04f 0800 	mov.w	r8, #0
 8014770:	e0a5      	b.n	80148be <_strtod_l+0x2ee>
 8014772:	2300      	movs	r3, #0
 8014774:	e7c8      	b.n	8014708 <_strtod_l+0x138>
 8014776:	f1b9 0f08 	cmp.w	r9, #8
 801477a:	bfd8      	it	le
 801477c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801477e:	f100 0001 	add.w	r0, r0, #1
 8014782:	bfda      	itte	le
 8014784:	fb02 3301 	mlale	r3, r2, r1, r3
 8014788:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801478a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801478e:	f109 0901 	add.w	r9, r9, #1
 8014792:	9019      	str	r0, [sp, #100]	@ 0x64
 8014794:	e7bf      	b.n	8014716 <_strtod_l+0x146>
 8014796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014798:	1c5a      	adds	r2, r3, #1
 801479a:	9219      	str	r2, [sp, #100]	@ 0x64
 801479c:	785a      	ldrb	r2, [r3, #1]
 801479e:	f1b9 0f00 	cmp.w	r9, #0
 80147a2:	d03b      	beq.n	801481c <_strtod_l+0x24c>
 80147a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80147a6:	464d      	mov	r5, r9
 80147a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80147ac:	2b09      	cmp	r3, #9
 80147ae:	d912      	bls.n	80147d6 <_strtod_l+0x206>
 80147b0:	2301      	movs	r3, #1
 80147b2:	e7c2      	b.n	801473a <_strtod_l+0x16a>
 80147b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80147b6:	1c5a      	adds	r2, r3, #1
 80147b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80147ba:	785a      	ldrb	r2, [r3, #1]
 80147bc:	3001      	adds	r0, #1
 80147be:	2a30      	cmp	r2, #48	@ 0x30
 80147c0:	d0f8      	beq.n	80147b4 <_strtod_l+0x1e4>
 80147c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80147c6:	2b08      	cmp	r3, #8
 80147c8:	f200 84d2 	bhi.w	8015170 <_strtod_l+0xba0>
 80147cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80147ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80147d0:	2000      	movs	r0, #0
 80147d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80147d4:	4605      	mov	r5, r0
 80147d6:	3a30      	subs	r2, #48	@ 0x30
 80147d8:	f100 0301 	add.w	r3, r0, #1
 80147dc:	d018      	beq.n	8014810 <_strtod_l+0x240>
 80147de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80147e0:	4419      	add	r1, r3
 80147e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80147e4:	462e      	mov	r6, r5
 80147e6:	f04f 0e0a 	mov.w	lr, #10
 80147ea:	1c71      	adds	r1, r6, #1
 80147ec:	eba1 0c05 	sub.w	ip, r1, r5
 80147f0:	4563      	cmp	r3, ip
 80147f2:	dc15      	bgt.n	8014820 <_strtod_l+0x250>
 80147f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80147f8:	182b      	adds	r3, r5, r0
 80147fa:	2b08      	cmp	r3, #8
 80147fc:	f105 0501 	add.w	r5, r5, #1
 8014800:	4405      	add	r5, r0
 8014802:	dc1a      	bgt.n	801483a <_strtod_l+0x26a>
 8014804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014806:	230a      	movs	r3, #10
 8014808:	fb03 2301 	mla	r3, r3, r1, r2
 801480c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801480e:	2300      	movs	r3, #0
 8014810:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014812:	1c51      	adds	r1, r2, #1
 8014814:	9119      	str	r1, [sp, #100]	@ 0x64
 8014816:	7852      	ldrb	r2, [r2, #1]
 8014818:	4618      	mov	r0, r3
 801481a:	e7c5      	b.n	80147a8 <_strtod_l+0x1d8>
 801481c:	4648      	mov	r0, r9
 801481e:	e7ce      	b.n	80147be <_strtod_l+0x1ee>
 8014820:	2e08      	cmp	r6, #8
 8014822:	dc05      	bgt.n	8014830 <_strtod_l+0x260>
 8014824:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8014826:	fb0e f606 	mul.w	r6, lr, r6
 801482a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801482c:	460e      	mov	r6, r1
 801482e:	e7dc      	b.n	80147ea <_strtod_l+0x21a>
 8014830:	2910      	cmp	r1, #16
 8014832:	bfd8      	it	le
 8014834:	fb0e f707 	mulle.w	r7, lr, r7
 8014838:	e7f8      	b.n	801482c <_strtod_l+0x25c>
 801483a:	2b0f      	cmp	r3, #15
 801483c:	bfdc      	itt	le
 801483e:	230a      	movle	r3, #10
 8014840:	fb03 2707 	mlale	r7, r3, r7, r2
 8014844:	e7e3      	b.n	801480e <_strtod_l+0x23e>
 8014846:	2300      	movs	r3, #0
 8014848:	930a      	str	r3, [sp, #40]	@ 0x28
 801484a:	2301      	movs	r3, #1
 801484c:	e77a      	b.n	8014744 <_strtod_l+0x174>
 801484e:	f04f 0c00 	mov.w	ip, #0
 8014852:	1ca2      	adds	r2, r4, #2
 8014854:	9219      	str	r2, [sp, #100]	@ 0x64
 8014856:	78a2      	ldrb	r2, [r4, #2]
 8014858:	e782      	b.n	8014760 <_strtod_l+0x190>
 801485a:	f04f 0c01 	mov.w	ip, #1
 801485e:	e7f8      	b.n	8014852 <_strtod_l+0x282>
 8014860:	08019084 	.word	0x08019084
 8014864:	08018ebb 	.word	0x08018ebb
 8014868:	7ff00000 	.word	0x7ff00000
 801486c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801486e:	1c51      	adds	r1, r2, #1
 8014870:	9119      	str	r1, [sp, #100]	@ 0x64
 8014872:	7852      	ldrb	r2, [r2, #1]
 8014874:	2a30      	cmp	r2, #48	@ 0x30
 8014876:	d0f9      	beq.n	801486c <_strtod_l+0x29c>
 8014878:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801487c:	2908      	cmp	r1, #8
 801487e:	f63f af75 	bhi.w	801476c <_strtod_l+0x19c>
 8014882:	3a30      	subs	r2, #48	@ 0x30
 8014884:	9209      	str	r2, [sp, #36]	@ 0x24
 8014886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014888:	920f      	str	r2, [sp, #60]	@ 0x3c
 801488a:	f04f 080a 	mov.w	r8, #10
 801488e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014890:	1c56      	adds	r6, r2, #1
 8014892:	9619      	str	r6, [sp, #100]	@ 0x64
 8014894:	7852      	ldrb	r2, [r2, #1]
 8014896:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801489a:	f1be 0f09 	cmp.w	lr, #9
 801489e:	d939      	bls.n	8014914 <_strtod_l+0x344>
 80148a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80148a2:	1a76      	subs	r6, r6, r1
 80148a4:	2e08      	cmp	r6, #8
 80148a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80148aa:	dc03      	bgt.n	80148b4 <_strtod_l+0x2e4>
 80148ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80148ae:	4588      	cmp	r8, r1
 80148b0:	bfa8      	it	ge
 80148b2:	4688      	movge	r8, r1
 80148b4:	f1bc 0f00 	cmp.w	ip, #0
 80148b8:	d001      	beq.n	80148be <_strtod_l+0x2ee>
 80148ba:	f1c8 0800 	rsb	r8, r8, #0
 80148be:	2d00      	cmp	r5, #0
 80148c0:	d14e      	bne.n	8014960 <_strtod_l+0x390>
 80148c2:	9908      	ldr	r1, [sp, #32]
 80148c4:	4308      	orrs	r0, r1
 80148c6:	f47f aebc 	bne.w	8014642 <_strtod_l+0x72>
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	f47f aed4 	bne.w	8014678 <_strtod_l+0xa8>
 80148d0:	2a69      	cmp	r2, #105	@ 0x69
 80148d2:	d028      	beq.n	8014926 <_strtod_l+0x356>
 80148d4:	dc25      	bgt.n	8014922 <_strtod_l+0x352>
 80148d6:	2a49      	cmp	r2, #73	@ 0x49
 80148d8:	d025      	beq.n	8014926 <_strtod_l+0x356>
 80148da:	2a4e      	cmp	r2, #78	@ 0x4e
 80148dc:	f47f aecc 	bne.w	8014678 <_strtod_l+0xa8>
 80148e0:	499a      	ldr	r1, [pc, #616]	@ (8014b4c <_strtod_l+0x57c>)
 80148e2:	a819      	add	r0, sp, #100	@ 0x64
 80148e4:	f001 f9e0 	bl	8015ca8 <__match>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	f43f aec5 	beq.w	8014678 <_strtod_l+0xa8>
 80148ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	2b28      	cmp	r3, #40	@ 0x28
 80148f4:	d12e      	bne.n	8014954 <_strtod_l+0x384>
 80148f6:	4996      	ldr	r1, [pc, #600]	@ (8014b50 <_strtod_l+0x580>)
 80148f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80148fa:	a819      	add	r0, sp, #100	@ 0x64
 80148fc:	f001 f9e8 	bl	8015cd0 <__hexnan>
 8014900:	2805      	cmp	r0, #5
 8014902:	d127      	bne.n	8014954 <_strtod_l+0x384>
 8014904:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014906:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801490a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801490e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014912:	e696      	b.n	8014642 <_strtod_l+0x72>
 8014914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014916:	fb08 2101 	mla	r1, r8, r1, r2
 801491a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801491e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014920:	e7b5      	b.n	801488e <_strtod_l+0x2be>
 8014922:	2a6e      	cmp	r2, #110	@ 0x6e
 8014924:	e7da      	b.n	80148dc <_strtod_l+0x30c>
 8014926:	498b      	ldr	r1, [pc, #556]	@ (8014b54 <_strtod_l+0x584>)
 8014928:	a819      	add	r0, sp, #100	@ 0x64
 801492a:	f001 f9bd 	bl	8015ca8 <__match>
 801492e:	2800      	cmp	r0, #0
 8014930:	f43f aea2 	beq.w	8014678 <_strtod_l+0xa8>
 8014934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014936:	4988      	ldr	r1, [pc, #544]	@ (8014b58 <_strtod_l+0x588>)
 8014938:	3b01      	subs	r3, #1
 801493a:	a819      	add	r0, sp, #100	@ 0x64
 801493c:	9319      	str	r3, [sp, #100]	@ 0x64
 801493e:	f001 f9b3 	bl	8015ca8 <__match>
 8014942:	b910      	cbnz	r0, 801494a <_strtod_l+0x37a>
 8014944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014946:	3301      	adds	r3, #1
 8014948:	9319      	str	r3, [sp, #100]	@ 0x64
 801494a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014b68 <_strtod_l+0x598>
 801494e:	f04f 0a00 	mov.w	sl, #0
 8014952:	e676      	b.n	8014642 <_strtod_l+0x72>
 8014954:	4881      	ldr	r0, [pc, #516]	@ (8014b5c <_strtod_l+0x58c>)
 8014956:	f000 fee3 	bl	8015720 <nan>
 801495a:	ec5b ab10 	vmov	sl, fp, d0
 801495e:	e670      	b.n	8014642 <_strtod_l+0x72>
 8014960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014962:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014964:	eba8 0303 	sub.w	r3, r8, r3
 8014968:	f1b9 0f00 	cmp.w	r9, #0
 801496c:	bf08      	it	eq
 801496e:	46a9      	moveq	r9, r5
 8014970:	2d10      	cmp	r5, #16
 8014972:	9309      	str	r3, [sp, #36]	@ 0x24
 8014974:	462c      	mov	r4, r5
 8014976:	bfa8      	it	ge
 8014978:	2410      	movge	r4, #16
 801497a:	f7eb fdeb 	bl	8000554 <__aeabi_ui2d>
 801497e:	2d09      	cmp	r5, #9
 8014980:	4682      	mov	sl, r0
 8014982:	468b      	mov	fp, r1
 8014984:	dc13      	bgt.n	80149ae <_strtod_l+0x3de>
 8014986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014988:	2b00      	cmp	r3, #0
 801498a:	f43f ae5a 	beq.w	8014642 <_strtod_l+0x72>
 801498e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014990:	dd78      	ble.n	8014a84 <_strtod_l+0x4b4>
 8014992:	2b16      	cmp	r3, #22
 8014994:	dc5f      	bgt.n	8014a56 <_strtod_l+0x486>
 8014996:	4972      	ldr	r1, [pc, #456]	@ (8014b60 <_strtod_l+0x590>)
 8014998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801499c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149a0:	4652      	mov	r2, sl
 80149a2:	465b      	mov	r3, fp
 80149a4:	f7eb fe50 	bl	8000648 <__aeabi_dmul>
 80149a8:	4682      	mov	sl, r0
 80149aa:	468b      	mov	fp, r1
 80149ac:	e649      	b.n	8014642 <_strtod_l+0x72>
 80149ae:	4b6c      	ldr	r3, [pc, #432]	@ (8014b60 <_strtod_l+0x590>)
 80149b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80149b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80149b8:	f7eb fe46 	bl	8000648 <__aeabi_dmul>
 80149bc:	4682      	mov	sl, r0
 80149be:	4638      	mov	r0, r7
 80149c0:	468b      	mov	fp, r1
 80149c2:	f7eb fdc7 	bl	8000554 <__aeabi_ui2d>
 80149c6:	4602      	mov	r2, r0
 80149c8:	460b      	mov	r3, r1
 80149ca:	4650      	mov	r0, sl
 80149cc:	4659      	mov	r1, fp
 80149ce:	f7eb fc85 	bl	80002dc <__adddf3>
 80149d2:	2d0f      	cmp	r5, #15
 80149d4:	4682      	mov	sl, r0
 80149d6:	468b      	mov	fp, r1
 80149d8:	ddd5      	ble.n	8014986 <_strtod_l+0x3b6>
 80149da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149dc:	1b2c      	subs	r4, r5, r4
 80149de:	441c      	add	r4, r3
 80149e0:	2c00      	cmp	r4, #0
 80149e2:	f340 8093 	ble.w	8014b0c <_strtod_l+0x53c>
 80149e6:	f014 030f 	ands.w	r3, r4, #15
 80149ea:	d00a      	beq.n	8014a02 <_strtod_l+0x432>
 80149ec:	495c      	ldr	r1, [pc, #368]	@ (8014b60 <_strtod_l+0x590>)
 80149ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80149f2:	4652      	mov	r2, sl
 80149f4:	465b      	mov	r3, fp
 80149f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149fa:	f7eb fe25 	bl	8000648 <__aeabi_dmul>
 80149fe:	4682      	mov	sl, r0
 8014a00:	468b      	mov	fp, r1
 8014a02:	f034 040f 	bics.w	r4, r4, #15
 8014a06:	d073      	beq.n	8014af0 <_strtod_l+0x520>
 8014a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8014a0c:	dd49      	ble.n	8014aa2 <_strtod_l+0x4d2>
 8014a0e:	2400      	movs	r4, #0
 8014a10:	46a0      	mov	r8, r4
 8014a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014a14:	46a1      	mov	r9, r4
 8014a16:	9a05      	ldr	r2, [sp, #20]
 8014a18:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014b68 <_strtod_l+0x598>
 8014a1c:	2322      	movs	r3, #34	@ 0x22
 8014a1e:	6013      	str	r3, [r2, #0]
 8014a20:	f04f 0a00 	mov.w	sl, #0
 8014a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f43f ae0b 	beq.w	8014642 <_strtod_l+0x72>
 8014a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014a2e:	9805      	ldr	r0, [sp, #20]
 8014a30:	f7ff f946 	bl	8013cc0 <_Bfree>
 8014a34:	9805      	ldr	r0, [sp, #20]
 8014a36:	4649      	mov	r1, r9
 8014a38:	f7ff f942 	bl	8013cc0 <_Bfree>
 8014a3c:	9805      	ldr	r0, [sp, #20]
 8014a3e:	4641      	mov	r1, r8
 8014a40:	f7ff f93e 	bl	8013cc0 <_Bfree>
 8014a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014a46:	9805      	ldr	r0, [sp, #20]
 8014a48:	f7ff f93a 	bl	8013cc0 <_Bfree>
 8014a4c:	9805      	ldr	r0, [sp, #20]
 8014a4e:	4621      	mov	r1, r4
 8014a50:	f7ff f936 	bl	8013cc0 <_Bfree>
 8014a54:	e5f5      	b.n	8014642 <_strtod_l+0x72>
 8014a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	dbbc      	blt.n	80149da <_strtod_l+0x40a>
 8014a60:	4c3f      	ldr	r4, [pc, #252]	@ (8014b60 <_strtod_l+0x590>)
 8014a62:	f1c5 050f 	rsb	r5, r5, #15
 8014a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014a6a:	4652      	mov	r2, sl
 8014a6c:	465b      	mov	r3, fp
 8014a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a72:	f7eb fde9 	bl	8000648 <__aeabi_dmul>
 8014a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a78:	1b5d      	subs	r5, r3, r5
 8014a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014a82:	e78f      	b.n	80149a4 <_strtod_l+0x3d4>
 8014a84:	3316      	adds	r3, #22
 8014a86:	dba8      	blt.n	80149da <_strtod_l+0x40a>
 8014a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a8a:	eba3 0808 	sub.w	r8, r3, r8
 8014a8e:	4b34      	ldr	r3, [pc, #208]	@ (8014b60 <_strtod_l+0x590>)
 8014a90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8014a94:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014a98:	4650      	mov	r0, sl
 8014a9a:	4659      	mov	r1, fp
 8014a9c:	f7eb fefe 	bl	800089c <__aeabi_ddiv>
 8014aa0:	e782      	b.n	80149a8 <_strtod_l+0x3d8>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	4f2f      	ldr	r7, [pc, #188]	@ (8014b64 <_strtod_l+0x594>)
 8014aa6:	1124      	asrs	r4, r4, #4
 8014aa8:	4650      	mov	r0, sl
 8014aaa:	4659      	mov	r1, fp
 8014aac:	461e      	mov	r6, r3
 8014aae:	2c01      	cmp	r4, #1
 8014ab0:	dc21      	bgt.n	8014af6 <_strtod_l+0x526>
 8014ab2:	b10b      	cbz	r3, 8014ab8 <_strtod_l+0x4e8>
 8014ab4:	4682      	mov	sl, r0
 8014ab6:	468b      	mov	fp, r1
 8014ab8:	492a      	ldr	r1, [pc, #168]	@ (8014b64 <_strtod_l+0x594>)
 8014aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8014ac2:	4652      	mov	r2, sl
 8014ac4:	465b      	mov	r3, fp
 8014ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014aca:	f7eb fdbd 	bl	8000648 <__aeabi_dmul>
 8014ace:	4b26      	ldr	r3, [pc, #152]	@ (8014b68 <_strtod_l+0x598>)
 8014ad0:	460a      	mov	r2, r1
 8014ad2:	400b      	ands	r3, r1
 8014ad4:	4925      	ldr	r1, [pc, #148]	@ (8014b6c <_strtod_l+0x59c>)
 8014ad6:	428b      	cmp	r3, r1
 8014ad8:	4682      	mov	sl, r0
 8014ada:	d898      	bhi.n	8014a0e <_strtod_l+0x43e>
 8014adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8014ae0:	428b      	cmp	r3, r1
 8014ae2:	bf86      	itte	hi
 8014ae4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014b70 <_strtod_l+0x5a0>
 8014ae8:	f04f 3aff 	movhi.w	sl, #4294967295
 8014aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8014af0:	2300      	movs	r3, #0
 8014af2:	9308      	str	r3, [sp, #32]
 8014af4:	e076      	b.n	8014be4 <_strtod_l+0x614>
 8014af6:	07e2      	lsls	r2, r4, #31
 8014af8:	d504      	bpl.n	8014b04 <_strtod_l+0x534>
 8014afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014afe:	f7eb fda3 	bl	8000648 <__aeabi_dmul>
 8014b02:	2301      	movs	r3, #1
 8014b04:	3601      	adds	r6, #1
 8014b06:	1064      	asrs	r4, r4, #1
 8014b08:	3708      	adds	r7, #8
 8014b0a:	e7d0      	b.n	8014aae <_strtod_l+0x4de>
 8014b0c:	d0f0      	beq.n	8014af0 <_strtod_l+0x520>
 8014b0e:	4264      	negs	r4, r4
 8014b10:	f014 020f 	ands.w	r2, r4, #15
 8014b14:	d00a      	beq.n	8014b2c <_strtod_l+0x55c>
 8014b16:	4b12      	ldr	r3, [pc, #72]	@ (8014b60 <_strtod_l+0x590>)
 8014b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b1c:	4650      	mov	r0, sl
 8014b1e:	4659      	mov	r1, fp
 8014b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b24:	f7eb feba 	bl	800089c <__aeabi_ddiv>
 8014b28:	4682      	mov	sl, r0
 8014b2a:	468b      	mov	fp, r1
 8014b2c:	1124      	asrs	r4, r4, #4
 8014b2e:	d0df      	beq.n	8014af0 <_strtod_l+0x520>
 8014b30:	2c1f      	cmp	r4, #31
 8014b32:	dd1f      	ble.n	8014b74 <_strtod_l+0x5a4>
 8014b34:	2400      	movs	r4, #0
 8014b36:	46a0      	mov	r8, r4
 8014b38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014b3a:	46a1      	mov	r9, r4
 8014b3c:	9a05      	ldr	r2, [sp, #20]
 8014b3e:	2322      	movs	r3, #34	@ 0x22
 8014b40:	f04f 0a00 	mov.w	sl, #0
 8014b44:	f04f 0b00 	mov.w	fp, #0
 8014b48:	6013      	str	r3, [r2, #0]
 8014b4a:	e76b      	b.n	8014a24 <_strtod_l+0x454>
 8014b4c:	08018da9 	.word	0x08018da9
 8014b50:	08019070 	.word	0x08019070
 8014b54:	08018da1 	.word	0x08018da1
 8014b58:	08018dd8 	.word	0x08018dd8
 8014b5c:	08018f11 	.word	0x08018f11
 8014b60:	08018fa8 	.word	0x08018fa8
 8014b64:	08018f80 	.word	0x08018f80
 8014b68:	7ff00000 	.word	0x7ff00000
 8014b6c:	7ca00000 	.word	0x7ca00000
 8014b70:	7fefffff 	.word	0x7fefffff
 8014b74:	f014 0310 	ands.w	r3, r4, #16
 8014b78:	bf18      	it	ne
 8014b7a:	236a      	movne	r3, #106	@ 0x6a
 8014b7c:	4ea9      	ldr	r6, [pc, #676]	@ (8014e24 <_strtod_l+0x854>)
 8014b7e:	9308      	str	r3, [sp, #32]
 8014b80:	4650      	mov	r0, sl
 8014b82:	4659      	mov	r1, fp
 8014b84:	2300      	movs	r3, #0
 8014b86:	07e7      	lsls	r7, r4, #31
 8014b88:	d504      	bpl.n	8014b94 <_strtod_l+0x5c4>
 8014b8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014b8e:	f7eb fd5b 	bl	8000648 <__aeabi_dmul>
 8014b92:	2301      	movs	r3, #1
 8014b94:	1064      	asrs	r4, r4, #1
 8014b96:	f106 0608 	add.w	r6, r6, #8
 8014b9a:	d1f4      	bne.n	8014b86 <_strtod_l+0x5b6>
 8014b9c:	b10b      	cbz	r3, 8014ba2 <_strtod_l+0x5d2>
 8014b9e:	4682      	mov	sl, r0
 8014ba0:	468b      	mov	fp, r1
 8014ba2:	9b08      	ldr	r3, [sp, #32]
 8014ba4:	b1b3      	cbz	r3, 8014bd4 <_strtod_l+0x604>
 8014ba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014baa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	4659      	mov	r1, fp
 8014bb2:	dd0f      	ble.n	8014bd4 <_strtod_l+0x604>
 8014bb4:	2b1f      	cmp	r3, #31
 8014bb6:	dd56      	ble.n	8014c66 <_strtod_l+0x696>
 8014bb8:	2b34      	cmp	r3, #52	@ 0x34
 8014bba:	bfde      	ittt	le
 8014bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8014bc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014bc4:	4093      	lslle	r3, r2
 8014bc6:	f04f 0a00 	mov.w	sl, #0
 8014bca:	bfcc      	ite	gt
 8014bcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	4650      	mov	r0, sl
 8014bda:	4659      	mov	r1, fp
 8014bdc:	f7eb ff9c 	bl	8000b18 <__aeabi_dcmpeq>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d1a7      	bne.n	8014b34 <_strtod_l+0x564>
 8014be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bea:	9805      	ldr	r0, [sp, #20]
 8014bec:	462b      	mov	r3, r5
 8014bee:	464a      	mov	r2, r9
 8014bf0:	f7ff f8ce 	bl	8013d90 <__s2b>
 8014bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014bf6:	2800      	cmp	r0, #0
 8014bf8:	f43f af09 	beq.w	8014a0e <_strtod_l+0x43e>
 8014bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c00:	2a00      	cmp	r2, #0
 8014c02:	eba3 0308 	sub.w	r3, r3, r8
 8014c06:	bfa8      	it	ge
 8014c08:	2300      	movge	r3, #0
 8014c0a:	9312      	str	r3, [sp, #72]	@ 0x48
 8014c0c:	2400      	movs	r4, #0
 8014c0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014c12:	9316      	str	r3, [sp, #88]	@ 0x58
 8014c14:	46a0      	mov	r8, r4
 8014c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c18:	9805      	ldr	r0, [sp, #20]
 8014c1a:	6859      	ldr	r1, [r3, #4]
 8014c1c:	f7ff f810 	bl	8013c40 <_Balloc>
 8014c20:	4681      	mov	r9, r0
 8014c22:	2800      	cmp	r0, #0
 8014c24:	f43f aef7 	beq.w	8014a16 <_strtod_l+0x446>
 8014c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c2a:	691a      	ldr	r2, [r3, #16]
 8014c2c:	3202      	adds	r2, #2
 8014c2e:	f103 010c 	add.w	r1, r3, #12
 8014c32:	0092      	lsls	r2, r2, #2
 8014c34:	300c      	adds	r0, #12
 8014c36:	f7fe f896 	bl	8012d66 <memcpy>
 8014c3a:	ec4b ab10 	vmov	d0, sl, fp
 8014c3e:	9805      	ldr	r0, [sp, #20]
 8014c40:	aa1c      	add	r2, sp, #112	@ 0x70
 8014c42:	a91b      	add	r1, sp, #108	@ 0x6c
 8014c44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014c48:	f7ff fbd6 	bl	80143f8 <__d2b>
 8014c4c:	901a      	str	r0, [sp, #104]	@ 0x68
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	f43f aee1 	beq.w	8014a16 <_strtod_l+0x446>
 8014c54:	9805      	ldr	r0, [sp, #20]
 8014c56:	2101      	movs	r1, #1
 8014c58:	f7ff f930 	bl	8013ebc <__i2b>
 8014c5c:	4680      	mov	r8, r0
 8014c5e:	b948      	cbnz	r0, 8014c74 <_strtod_l+0x6a4>
 8014c60:	f04f 0800 	mov.w	r8, #0
 8014c64:	e6d7      	b.n	8014a16 <_strtod_l+0x446>
 8014c66:	f04f 32ff 	mov.w	r2, #4294967295
 8014c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c6e:	ea03 0a0a 	and.w	sl, r3, sl
 8014c72:	e7af      	b.n	8014bd4 <_strtod_l+0x604>
 8014c74:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8014c76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014c78:	2d00      	cmp	r5, #0
 8014c7a:	bfab      	itete	ge
 8014c7c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8014c7e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014c80:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8014c82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8014c84:	bfac      	ite	ge
 8014c86:	18ef      	addge	r7, r5, r3
 8014c88:	1b5e      	sublt	r6, r3, r5
 8014c8a:	9b08      	ldr	r3, [sp, #32]
 8014c8c:	1aed      	subs	r5, r5, r3
 8014c8e:	4415      	add	r5, r2
 8014c90:	4b65      	ldr	r3, [pc, #404]	@ (8014e28 <_strtod_l+0x858>)
 8014c92:	3d01      	subs	r5, #1
 8014c94:	429d      	cmp	r5, r3
 8014c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014c9a:	da50      	bge.n	8014d3e <_strtod_l+0x76e>
 8014c9c:	1b5b      	subs	r3, r3, r5
 8014c9e:	2b1f      	cmp	r3, #31
 8014ca0:	eba2 0203 	sub.w	r2, r2, r3
 8014ca4:	f04f 0101 	mov.w	r1, #1
 8014ca8:	dc3d      	bgt.n	8014d26 <_strtod_l+0x756>
 8014caa:	fa01 f303 	lsl.w	r3, r1, r3
 8014cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8014cb4:	18bd      	adds	r5, r7, r2
 8014cb6:	9b08      	ldr	r3, [sp, #32]
 8014cb8:	42af      	cmp	r7, r5
 8014cba:	4416      	add	r6, r2
 8014cbc:	441e      	add	r6, r3
 8014cbe:	463b      	mov	r3, r7
 8014cc0:	bfa8      	it	ge
 8014cc2:	462b      	movge	r3, r5
 8014cc4:	42b3      	cmp	r3, r6
 8014cc6:	bfa8      	it	ge
 8014cc8:	4633      	movge	r3, r6
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	bfc2      	ittt	gt
 8014cce:	1aed      	subgt	r5, r5, r3
 8014cd0:	1af6      	subgt	r6, r6, r3
 8014cd2:	1aff      	subgt	r7, r7, r3
 8014cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	dd16      	ble.n	8014d08 <_strtod_l+0x738>
 8014cda:	4641      	mov	r1, r8
 8014cdc:	9805      	ldr	r0, [sp, #20]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	f7ff f9a4 	bl	801402c <__pow5mult>
 8014ce4:	4680      	mov	r8, r0
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d0ba      	beq.n	8014c60 <_strtod_l+0x690>
 8014cea:	4601      	mov	r1, r0
 8014cec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014cee:	9805      	ldr	r0, [sp, #20]
 8014cf0:	f7ff f8fa 	bl	8013ee8 <__multiply>
 8014cf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	f43f ae8d 	beq.w	8014a16 <_strtod_l+0x446>
 8014cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014cfe:	9805      	ldr	r0, [sp, #20]
 8014d00:	f7fe ffde 	bl	8013cc0 <_Bfree>
 8014d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d08:	2d00      	cmp	r5, #0
 8014d0a:	dc1d      	bgt.n	8014d48 <_strtod_l+0x778>
 8014d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dd23      	ble.n	8014d5a <_strtod_l+0x78a>
 8014d12:	4649      	mov	r1, r9
 8014d14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8014d16:	9805      	ldr	r0, [sp, #20]
 8014d18:	f7ff f988 	bl	801402c <__pow5mult>
 8014d1c:	4681      	mov	r9, r0
 8014d1e:	b9e0      	cbnz	r0, 8014d5a <_strtod_l+0x78a>
 8014d20:	f04f 0900 	mov.w	r9, #0
 8014d24:	e677      	b.n	8014a16 <_strtod_l+0x446>
 8014d26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8014d2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8014d2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014d32:	35e2      	adds	r5, #226	@ 0xe2
 8014d34:	fa01 f305 	lsl.w	r3, r1, r5
 8014d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8014d3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014d3c:	e7ba      	b.n	8014cb4 <_strtod_l+0x6e4>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8014d42:	2301      	movs	r3, #1
 8014d44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014d46:	e7b5      	b.n	8014cb4 <_strtod_l+0x6e4>
 8014d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014d4a:	9805      	ldr	r0, [sp, #20]
 8014d4c:	462a      	mov	r2, r5
 8014d4e:	f7ff f9c7 	bl	80140e0 <__lshift>
 8014d52:	901a      	str	r0, [sp, #104]	@ 0x68
 8014d54:	2800      	cmp	r0, #0
 8014d56:	d1d9      	bne.n	8014d0c <_strtod_l+0x73c>
 8014d58:	e65d      	b.n	8014a16 <_strtod_l+0x446>
 8014d5a:	2e00      	cmp	r6, #0
 8014d5c:	dd07      	ble.n	8014d6e <_strtod_l+0x79e>
 8014d5e:	4649      	mov	r1, r9
 8014d60:	9805      	ldr	r0, [sp, #20]
 8014d62:	4632      	mov	r2, r6
 8014d64:	f7ff f9bc 	bl	80140e0 <__lshift>
 8014d68:	4681      	mov	r9, r0
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d0d8      	beq.n	8014d20 <_strtod_l+0x750>
 8014d6e:	2f00      	cmp	r7, #0
 8014d70:	dd08      	ble.n	8014d84 <_strtod_l+0x7b4>
 8014d72:	4641      	mov	r1, r8
 8014d74:	9805      	ldr	r0, [sp, #20]
 8014d76:	463a      	mov	r2, r7
 8014d78:	f7ff f9b2 	bl	80140e0 <__lshift>
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	f43f ae49 	beq.w	8014a16 <_strtod_l+0x446>
 8014d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014d86:	9805      	ldr	r0, [sp, #20]
 8014d88:	464a      	mov	r2, r9
 8014d8a:	f7ff fa31 	bl	80141f0 <__mdiff>
 8014d8e:	4604      	mov	r4, r0
 8014d90:	2800      	cmp	r0, #0
 8014d92:	f43f ae40 	beq.w	8014a16 <_strtod_l+0x446>
 8014d96:	68c3      	ldr	r3, [r0, #12]
 8014d98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	60c3      	str	r3, [r0, #12]
 8014d9e:	4641      	mov	r1, r8
 8014da0:	f7ff fa0a 	bl	80141b8 <__mcmp>
 8014da4:	2800      	cmp	r0, #0
 8014da6:	da45      	bge.n	8014e34 <_strtod_l+0x864>
 8014da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014daa:	ea53 030a 	orrs.w	r3, r3, sl
 8014dae:	d16b      	bne.n	8014e88 <_strtod_l+0x8b8>
 8014db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d167      	bne.n	8014e88 <_strtod_l+0x8b8>
 8014db8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014dbc:	0d1b      	lsrs	r3, r3, #20
 8014dbe:	051b      	lsls	r3, r3, #20
 8014dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014dc4:	d960      	bls.n	8014e88 <_strtod_l+0x8b8>
 8014dc6:	6963      	ldr	r3, [r4, #20]
 8014dc8:	b913      	cbnz	r3, 8014dd0 <_strtod_l+0x800>
 8014dca:	6923      	ldr	r3, [r4, #16]
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	dd5b      	ble.n	8014e88 <_strtod_l+0x8b8>
 8014dd0:	4621      	mov	r1, r4
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	9805      	ldr	r0, [sp, #20]
 8014dd6:	f7ff f983 	bl	80140e0 <__lshift>
 8014dda:	4641      	mov	r1, r8
 8014ddc:	4604      	mov	r4, r0
 8014dde:	f7ff f9eb 	bl	80141b8 <__mcmp>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	dd50      	ble.n	8014e88 <_strtod_l+0x8b8>
 8014de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014dea:	9a08      	ldr	r2, [sp, #32]
 8014dec:	0d1b      	lsrs	r3, r3, #20
 8014dee:	051b      	lsls	r3, r3, #20
 8014df0:	2a00      	cmp	r2, #0
 8014df2:	d06a      	beq.n	8014eca <_strtod_l+0x8fa>
 8014df4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014df8:	d867      	bhi.n	8014eca <_strtod_l+0x8fa>
 8014dfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014dfe:	f67f ae9d 	bls.w	8014b3c <_strtod_l+0x56c>
 8014e02:	4b0a      	ldr	r3, [pc, #40]	@ (8014e2c <_strtod_l+0x85c>)
 8014e04:	4650      	mov	r0, sl
 8014e06:	4659      	mov	r1, fp
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f7eb fc1d 	bl	8000648 <__aeabi_dmul>
 8014e0e:	4b08      	ldr	r3, [pc, #32]	@ (8014e30 <_strtod_l+0x860>)
 8014e10:	400b      	ands	r3, r1
 8014e12:	4682      	mov	sl, r0
 8014e14:	468b      	mov	fp, r1
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	f47f ae08 	bne.w	8014a2c <_strtod_l+0x45c>
 8014e1c:	9a05      	ldr	r2, [sp, #20]
 8014e1e:	2322      	movs	r3, #34	@ 0x22
 8014e20:	6013      	str	r3, [r2, #0]
 8014e22:	e603      	b.n	8014a2c <_strtod_l+0x45c>
 8014e24:	08019098 	.word	0x08019098
 8014e28:	fffffc02 	.word	0xfffffc02
 8014e2c:	39500000 	.word	0x39500000
 8014e30:	7ff00000 	.word	0x7ff00000
 8014e34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014e38:	d165      	bne.n	8014f06 <_strtod_l+0x936>
 8014e3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e40:	b35a      	cbz	r2, 8014e9a <_strtod_l+0x8ca>
 8014e42:	4a9f      	ldr	r2, [pc, #636]	@ (80150c0 <_strtod_l+0xaf0>)
 8014e44:	4293      	cmp	r3, r2
 8014e46:	d12b      	bne.n	8014ea0 <_strtod_l+0x8d0>
 8014e48:	9b08      	ldr	r3, [sp, #32]
 8014e4a:	4651      	mov	r1, sl
 8014e4c:	b303      	cbz	r3, 8014e90 <_strtod_l+0x8c0>
 8014e4e:	4b9d      	ldr	r3, [pc, #628]	@ (80150c4 <_strtod_l+0xaf4>)
 8014e50:	465a      	mov	r2, fp
 8014e52:	4013      	ands	r3, r2
 8014e54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014e58:	f04f 32ff 	mov.w	r2, #4294967295
 8014e5c:	d81b      	bhi.n	8014e96 <_strtod_l+0x8c6>
 8014e5e:	0d1b      	lsrs	r3, r3, #20
 8014e60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014e64:	fa02 f303 	lsl.w	r3, r2, r3
 8014e68:	4299      	cmp	r1, r3
 8014e6a:	d119      	bne.n	8014ea0 <_strtod_l+0x8d0>
 8014e6c:	4b96      	ldr	r3, [pc, #600]	@ (80150c8 <_strtod_l+0xaf8>)
 8014e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d102      	bne.n	8014e7a <_strtod_l+0x8aa>
 8014e74:	3101      	adds	r1, #1
 8014e76:	f43f adce 	beq.w	8014a16 <_strtod_l+0x446>
 8014e7a:	4b92      	ldr	r3, [pc, #584]	@ (80150c4 <_strtod_l+0xaf4>)
 8014e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014e7e:	401a      	ands	r2, r3
 8014e80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014e84:	f04f 0a00 	mov.w	sl, #0
 8014e88:	9b08      	ldr	r3, [sp, #32]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d1b9      	bne.n	8014e02 <_strtod_l+0x832>
 8014e8e:	e5cd      	b.n	8014a2c <_strtod_l+0x45c>
 8014e90:	f04f 33ff 	mov.w	r3, #4294967295
 8014e94:	e7e8      	b.n	8014e68 <_strtod_l+0x898>
 8014e96:	4613      	mov	r3, r2
 8014e98:	e7e6      	b.n	8014e68 <_strtod_l+0x898>
 8014e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8014e9e:	d0a2      	beq.n	8014de6 <_strtod_l+0x816>
 8014ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ea2:	b1db      	cbz	r3, 8014edc <_strtod_l+0x90c>
 8014ea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ea6:	4213      	tst	r3, r2
 8014ea8:	d0ee      	beq.n	8014e88 <_strtod_l+0x8b8>
 8014eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014eac:	9a08      	ldr	r2, [sp, #32]
 8014eae:	4650      	mov	r0, sl
 8014eb0:	4659      	mov	r1, fp
 8014eb2:	b1bb      	cbz	r3, 8014ee4 <_strtod_l+0x914>
 8014eb4:	f7ff fb6e 	bl	8014594 <sulp>
 8014eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014ebc:	ec53 2b10 	vmov	r2, r3, d0
 8014ec0:	f7eb fa0c 	bl	80002dc <__adddf3>
 8014ec4:	4682      	mov	sl, r0
 8014ec6:	468b      	mov	fp, r1
 8014ec8:	e7de      	b.n	8014e88 <_strtod_l+0x8b8>
 8014eca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014ece:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014ed2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014ed6:	f04f 3aff 	mov.w	sl, #4294967295
 8014eda:	e7d5      	b.n	8014e88 <_strtod_l+0x8b8>
 8014edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014ede:	ea13 0f0a 	tst.w	r3, sl
 8014ee2:	e7e1      	b.n	8014ea8 <_strtod_l+0x8d8>
 8014ee4:	f7ff fb56 	bl	8014594 <sulp>
 8014ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014eec:	ec53 2b10 	vmov	r2, r3, d0
 8014ef0:	f7eb f9f2 	bl	80002d8 <__aeabi_dsub>
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	4682      	mov	sl, r0
 8014efa:	468b      	mov	fp, r1
 8014efc:	f7eb fe0c 	bl	8000b18 <__aeabi_dcmpeq>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d0c1      	beq.n	8014e88 <_strtod_l+0x8b8>
 8014f04:	e61a      	b.n	8014b3c <_strtod_l+0x56c>
 8014f06:	4641      	mov	r1, r8
 8014f08:	4620      	mov	r0, r4
 8014f0a:	f7ff facd 	bl	80144a8 <__ratio>
 8014f0e:	ec57 6b10 	vmov	r6, r7, d0
 8014f12:	2200      	movs	r2, #0
 8014f14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014f18:	4630      	mov	r0, r6
 8014f1a:	4639      	mov	r1, r7
 8014f1c:	f7eb fe10 	bl	8000b40 <__aeabi_dcmple>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d06f      	beq.n	8015004 <_strtod_l+0xa34>
 8014f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d17a      	bne.n	8015020 <_strtod_l+0xa50>
 8014f2a:	f1ba 0f00 	cmp.w	sl, #0
 8014f2e:	d158      	bne.n	8014fe2 <_strtod_l+0xa12>
 8014f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d15a      	bne.n	8014ff0 <_strtod_l+0xa20>
 8014f3a:	4b64      	ldr	r3, [pc, #400]	@ (80150cc <_strtod_l+0xafc>)
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	4630      	mov	r0, r6
 8014f40:	4639      	mov	r1, r7
 8014f42:	f7eb fdf3 	bl	8000b2c <__aeabi_dcmplt>
 8014f46:	2800      	cmp	r0, #0
 8014f48:	d159      	bne.n	8014ffe <_strtod_l+0xa2e>
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	4639      	mov	r1, r7
 8014f4e:	4b60      	ldr	r3, [pc, #384]	@ (80150d0 <_strtod_l+0xb00>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	f7eb fb79 	bl	8000648 <__aeabi_dmul>
 8014f56:	4606      	mov	r6, r0
 8014f58:	460f      	mov	r7, r1
 8014f5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014f5e:	9606      	str	r6, [sp, #24]
 8014f60:	9307      	str	r3, [sp, #28]
 8014f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f66:	4d57      	ldr	r5, [pc, #348]	@ (80150c4 <_strtod_l+0xaf4>)
 8014f68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f6e:	401d      	ands	r5, r3
 8014f70:	4b58      	ldr	r3, [pc, #352]	@ (80150d4 <_strtod_l+0xb04>)
 8014f72:	429d      	cmp	r5, r3
 8014f74:	f040 80b2 	bne.w	80150dc <_strtod_l+0xb0c>
 8014f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014f7e:	ec4b ab10 	vmov	d0, sl, fp
 8014f82:	f7ff f9c9 	bl	8014318 <__ulp>
 8014f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f8a:	ec51 0b10 	vmov	r0, r1, d0
 8014f8e:	f7eb fb5b 	bl	8000648 <__aeabi_dmul>
 8014f92:	4652      	mov	r2, sl
 8014f94:	465b      	mov	r3, fp
 8014f96:	f7eb f9a1 	bl	80002dc <__adddf3>
 8014f9a:	460b      	mov	r3, r1
 8014f9c:	4949      	ldr	r1, [pc, #292]	@ (80150c4 <_strtod_l+0xaf4>)
 8014f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80150d8 <_strtod_l+0xb08>)
 8014fa0:	4019      	ands	r1, r3
 8014fa2:	4291      	cmp	r1, r2
 8014fa4:	4682      	mov	sl, r0
 8014fa6:	d942      	bls.n	801502e <_strtod_l+0xa5e>
 8014fa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014faa:	4b47      	ldr	r3, [pc, #284]	@ (80150c8 <_strtod_l+0xaf8>)
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d103      	bne.n	8014fb8 <_strtod_l+0x9e8>
 8014fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	f43f ad2f 	beq.w	8014a16 <_strtod_l+0x446>
 8014fb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80150c8 <_strtod_l+0xaf8>
 8014fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8014fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014fc2:	9805      	ldr	r0, [sp, #20]
 8014fc4:	f7fe fe7c 	bl	8013cc0 <_Bfree>
 8014fc8:	9805      	ldr	r0, [sp, #20]
 8014fca:	4649      	mov	r1, r9
 8014fcc:	f7fe fe78 	bl	8013cc0 <_Bfree>
 8014fd0:	9805      	ldr	r0, [sp, #20]
 8014fd2:	4641      	mov	r1, r8
 8014fd4:	f7fe fe74 	bl	8013cc0 <_Bfree>
 8014fd8:	9805      	ldr	r0, [sp, #20]
 8014fda:	4621      	mov	r1, r4
 8014fdc:	f7fe fe70 	bl	8013cc0 <_Bfree>
 8014fe0:	e619      	b.n	8014c16 <_strtod_l+0x646>
 8014fe2:	f1ba 0f01 	cmp.w	sl, #1
 8014fe6:	d103      	bne.n	8014ff0 <_strtod_l+0xa20>
 8014fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f43f ada6 	beq.w	8014b3c <_strtod_l+0x56c>
 8014ff0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80150a0 <_strtod_l+0xad0>
 8014ff4:	4f35      	ldr	r7, [pc, #212]	@ (80150cc <_strtod_l+0xafc>)
 8014ff6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014ffa:	2600      	movs	r6, #0
 8014ffc:	e7b1      	b.n	8014f62 <_strtod_l+0x992>
 8014ffe:	4f34      	ldr	r7, [pc, #208]	@ (80150d0 <_strtod_l+0xb00>)
 8015000:	2600      	movs	r6, #0
 8015002:	e7aa      	b.n	8014f5a <_strtod_l+0x98a>
 8015004:	4b32      	ldr	r3, [pc, #200]	@ (80150d0 <_strtod_l+0xb00>)
 8015006:	4630      	mov	r0, r6
 8015008:	4639      	mov	r1, r7
 801500a:	2200      	movs	r2, #0
 801500c:	f7eb fb1c 	bl	8000648 <__aeabi_dmul>
 8015010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015012:	4606      	mov	r6, r0
 8015014:	460f      	mov	r7, r1
 8015016:	2b00      	cmp	r3, #0
 8015018:	d09f      	beq.n	8014f5a <_strtod_l+0x98a>
 801501a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801501e:	e7a0      	b.n	8014f62 <_strtod_l+0x992>
 8015020:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80150a8 <_strtod_l+0xad8>
 8015024:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015028:	ec57 6b17 	vmov	r6, r7, d7
 801502c:	e799      	b.n	8014f62 <_strtod_l+0x992>
 801502e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015032:	9b08      	ldr	r3, [sp, #32]
 8015034:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1c1      	bne.n	8014fc0 <_strtod_l+0x9f0>
 801503c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015040:	0d1b      	lsrs	r3, r3, #20
 8015042:	051b      	lsls	r3, r3, #20
 8015044:	429d      	cmp	r5, r3
 8015046:	d1bb      	bne.n	8014fc0 <_strtod_l+0x9f0>
 8015048:	4630      	mov	r0, r6
 801504a:	4639      	mov	r1, r7
 801504c:	f7eb fe5c 	bl	8000d08 <__aeabi_d2lz>
 8015050:	f7eb facc 	bl	80005ec <__aeabi_l2d>
 8015054:	4602      	mov	r2, r0
 8015056:	460b      	mov	r3, r1
 8015058:	4630      	mov	r0, r6
 801505a:	4639      	mov	r1, r7
 801505c:	f7eb f93c 	bl	80002d8 <__aeabi_dsub>
 8015060:	460b      	mov	r3, r1
 8015062:	4602      	mov	r2, r0
 8015064:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015068:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801506c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801506e:	ea46 060a 	orr.w	r6, r6, sl
 8015072:	431e      	orrs	r6, r3
 8015074:	d06f      	beq.n	8015156 <_strtod_l+0xb86>
 8015076:	a30e      	add	r3, pc, #56	@ (adr r3, 80150b0 <_strtod_l+0xae0>)
 8015078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507c:	f7eb fd56 	bl	8000b2c <__aeabi_dcmplt>
 8015080:	2800      	cmp	r0, #0
 8015082:	f47f acd3 	bne.w	8014a2c <_strtod_l+0x45c>
 8015086:	a30c      	add	r3, pc, #48	@ (adr r3, 80150b8 <_strtod_l+0xae8>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015090:	f7eb fd6a 	bl	8000b68 <__aeabi_dcmpgt>
 8015094:	2800      	cmp	r0, #0
 8015096:	d093      	beq.n	8014fc0 <_strtod_l+0x9f0>
 8015098:	e4c8      	b.n	8014a2c <_strtod_l+0x45c>
 801509a:	bf00      	nop
 801509c:	f3af 8000 	nop.w
 80150a0:	00000000 	.word	0x00000000
 80150a4:	bff00000 	.word	0xbff00000
 80150a8:	00000000 	.word	0x00000000
 80150ac:	3ff00000 	.word	0x3ff00000
 80150b0:	94a03595 	.word	0x94a03595
 80150b4:	3fdfffff 	.word	0x3fdfffff
 80150b8:	35afe535 	.word	0x35afe535
 80150bc:	3fe00000 	.word	0x3fe00000
 80150c0:	000fffff 	.word	0x000fffff
 80150c4:	7ff00000 	.word	0x7ff00000
 80150c8:	7fefffff 	.word	0x7fefffff
 80150cc:	3ff00000 	.word	0x3ff00000
 80150d0:	3fe00000 	.word	0x3fe00000
 80150d4:	7fe00000 	.word	0x7fe00000
 80150d8:	7c9fffff 	.word	0x7c9fffff
 80150dc:	9b08      	ldr	r3, [sp, #32]
 80150de:	b323      	cbz	r3, 801512a <_strtod_l+0xb5a>
 80150e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80150e4:	d821      	bhi.n	801512a <_strtod_l+0xb5a>
 80150e6:	a328      	add	r3, pc, #160	@ (adr r3, 8015188 <_strtod_l+0xbb8>)
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	4630      	mov	r0, r6
 80150ee:	4639      	mov	r1, r7
 80150f0:	f7eb fd26 	bl	8000b40 <__aeabi_dcmple>
 80150f4:	b1a0      	cbz	r0, 8015120 <_strtod_l+0xb50>
 80150f6:	4639      	mov	r1, r7
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7eb fd7d 	bl	8000bf8 <__aeabi_d2uiz>
 80150fe:	2801      	cmp	r0, #1
 8015100:	bf38      	it	cc
 8015102:	2001      	movcc	r0, #1
 8015104:	f7eb fa26 	bl	8000554 <__aeabi_ui2d>
 8015108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801510a:	4606      	mov	r6, r0
 801510c:	460f      	mov	r7, r1
 801510e:	b9fb      	cbnz	r3, 8015150 <_strtod_l+0xb80>
 8015110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015114:	9014      	str	r0, [sp, #80]	@ 0x50
 8015116:	9315      	str	r3, [sp, #84]	@ 0x54
 8015118:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801511c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015120:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015122:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015126:	1b5b      	subs	r3, r3, r5
 8015128:	9311      	str	r3, [sp, #68]	@ 0x44
 801512a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801512e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015132:	f7ff f8f1 	bl	8014318 <__ulp>
 8015136:	4650      	mov	r0, sl
 8015138:	ec53 2b10 	vmov	r2, r3, d0
 801513c:	4659      	mov	r1, fp
 801513e:	f7eb fa83 	bl	8000648 <__aeabi_dmul>
 8015142:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015146:	f7eb f8c9 	bl	80002dc <__adddf3>
 801514a:	4682      	mov	sl, r0
 801514c:	468b      	mov	fp, r1
 801514e:	e770      	b.n	8015032 <_strtod_l+0xa62>
 8015150:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015154:	e7e0      	b.n	8015118 <_strtod_l+0xb48>
 8015156:	a30e      	add	r3, pc, #56	@ (adr r3, 8015190 <_strtod_l+0xbc0>)
 8015158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515c:	f7eb fce6 	bl	8000b2c <__aeabi_dcmplt>
 8015160:	e798      	b.n	8015094 <_strtod_l+0xac4>
 8015162:	2300      	movs	r3, #0
 8015164:	930e      	str	r3, [sp, #56]	@ 0x38
 8015166:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801516a:	6013      	str	r3, [r2, #0]
 801516c:	f7ff ba6d 	b.w	801464a <_strtod_l+0x7a>
 8015170:	2a65      	cmp	r2, #101	@ 0x65
 8015172:	f43f ab68 	beq.w	8014846 <_strtod_l+0x276>
 8015176:	2a45      	cmp	r2, #69	@ 0x45
 8015178:	f43f ab65 	beq.w	8014846 <_strtod_l+0x276>
 801517c:	2301      	movs	r3, #1
 801517e:	f7ff bba0 	b.w	80148c2 <_strtod_l+0x2f2>
 8015182:	bf00      	nop
 8015184:	f3af 8000 	nop.w
 8015188:	ffc00000 	.word	0xffc00000
 801518c:	41dfffff 	.word	0x41dfffff
 8015190:	94a03595 	.word	0x94a03595
 8015194:	3fcfffff 	.word	0x3fcfffff

08015198 <_strtod_r>:
 8015198:	4b01      	ldr	r3, [pc, #4]	@ (80151a0 <_strtod_r+0x8>)
 801519a:	f7ff ba19 	b.w	80145d0 <_strtod_l>
 801519e:	bf00      	nop
 80151a0:	200000a4 	.word	0x200000a4

080151a4 <_strtol_l.isra.0>:
 80151a4:	2b24      	cmp	r3, #36	@ 0x24
 80151a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151aa:	4686      	mov	lr, r0
 80151ac:	4690      	mov	r8, r2
 80151ae:	d801      	bhi.n	80151b4 <_strtol_l.isra.0+0x10>
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d106      	bne.n	80151c2 <_strtol_l.isra.0+0x1e>
 80151b4:	f7fd fdaa 	bl	8012d0c <__errno>
 80151b8:	2316      	movs	r3, #22
 80151ba:	6003      	str	r3, [r0, #0]
 80151bc:	2000      	movs	r0, #0
 80151be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c2:	4834      	ldr	r0, [pc, #208]	@ (8015294 <_strtol_l.isra.0+0xf0>)
 80151c4:	460d      	mov	r5, r1
 80151c6:	462a      	mov	r2, r5
 80151c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80151cc:	5d06      	ldrb	r6, [r0, r4]
 80151ce:	f016 0608 	ands.w	r6, r6, #8
 80151d2:	d1f8      	bne.n	80151c6 <_strtol_l.isra.0+0x22>
 80151d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80151d6:	d110      	bne.n	80151fa <_strtol_l.isra.0+0x56>
 80151d8:	782c      	ldrb	r4, [r5, #0]
 80151da:	2601      	movs	r6, #1
 80151dc:	1c95      	adds	r5, r2, #2
 80151de:	f033 0210 	bics.w	r2, r3, #16
 80151e2:	d115      	bne.n	8015210 <_strtol_l.isra.0+0x6c>
 80151e4:	2c30      	cmp	r4, #48	@ 0x30
 80151e6:	d10d      	bne.n	8015204 <_strtol_l.isra.0+0x60>
 80151e8:	782a      	ldrb	r2, [r5, #0]
 80151ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80151ee:	2a58      	cmp	r2, #88	@ 0x58
 80151f0:	d108      	bne.n	8015204 <_strtol_l.isra.0+0x60>
 80151f2:	786c      	ldrb	r4, [r5, #1]
 80151f4:	3502      	adds	r5, #2
 80151f6:	2310      	movs	r3, #16
 80151f8:	e00a      	b.n	8015210 <_strtol_l.isra.0+0x6c>
 80151fa:	2c2b      	cmp	r4, #43	@ 0x2b
 80151fc:	bf04      	itt	eq
 80151fe:	782c      	ldrbeq	r4, [r5, #0]
 8015200:	1c95      	addeq	r5, r2, #2
 8015202:	e7ec      	b.n	80151de <_strtol_l.isra.0+0x3a>
 8015204:	2b00      	cmp	r3, #0
 8015206:	d1f6      	bne.n	80151f6 <_strtol_l.isra.0+0x52>
 8015208:	2c30      	cmp	r4, #48	@ 0x30
 801520a:	bf14      	ite	ne
 801520c:	230a      	movne	r3, #10
 801520e:	2308      	moveq	r3, #8
 8015210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015214:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015218:	2200      	movs	r2, #0
 801521a:	fbbc f9f3 	udiv	r9, ip, r3
 801521e:	4610      	mov	r0, r2
 8015220:	fb03 ca19 	mls	sl, r3, r9, ip
 8015224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015228:	2f09      	cmp	r7, #9
 801522a:	d80f      	bhi.n	801524c <_strtol_l.isra.0+0xa8>
 801522c:	463c      	mov	r4, r7
 801522e:	42a3      	cmp	r3, r4
 8015230:	dd1b      	ble.n	801526a <_strtol_l.isra.0+0xc6>
 8015232:	1c57      	adds	r7, r2, #1
 8015234:	d007      	beq.n	8015246 <_strtol_l.isra.0+0xa2>
 8015236:	4581      	cmp	r9, r0
 8015238:	d314      	bcc.n	8015264 <_strtol_l.isra.0+0xc0>
 801523a:	d101      	bne.n	8015240 <_strtol_l.isra.0+0x9c>
 801523c:	45a2      	cmp	sl, r4
 801523e:	db11      	blt.n	8015264 <_strtol_l.isra.0+0xc0>
 8015240:	fb00 4003 	mla	r0, r0, r3, r4
 8015244:	2201      	movs	r2, #1
 8015246:	f815 4b01 	ldrb.w	r4, [r5], #1
 801524a:	e7eb      	b.n	8015224 <_strtol_l.isra.0+0x80>
 801524c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015250:	2f19      	cmp	r7, #25
 8015252:	d801      	bhi.n	8015258 <_strtol_l.isra.0+0xb4>
 8015254:	3c37      	subs	r4, #55	@ 0x37
 8015256:	e7ea      	b.n	801522e <_strtol_l.isra.0+0x8a>
 8015258:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801525c:	2f19      	cmp	r7, #25
 801525e:	d804      	bhi.n	801526a <_strtol_l.isra.0+0xc6>
 8015260:	3c57      	subs	r4, #87	@ 0x57
 8015262:	e7e4      	b.n	801522e <_strtol_l.isra.0+0x8a>
 8015264:	f04f 32ff 	mov.w	r2, #4294967295
 8015268:	e7ed      	b.n	8015246 <_strtol_l.isra.0+0xa2>
 801526a:	1c53      	adds	r3, r2, #1
 801526c:	d108      	bne.n	8015280 <_strtol_l.isra.0+0xdc>
 801526e:	2322      	movs	r3, #34	@ 0x22
 8015270:	f8ce 3000 	str.w	r3, [lr]
 8015274:	4660      	mov	r0, ip
 8015276:	f1b8 0f00 	cmp.w	r8, #0
 801527a:	d0a0      	beq.n	80151be <_strtol_l.isra.0+0x1a>
 801527c:	1e69      	subs	r1, r5, #1
 801527e:	e006      	b.n	801528e <_strtol_l.isra.0+0xea>
 8015280:	b106      	cbz	r6, 8015284 <_strtol_l.isra.0+0xe0>
 8015282:	4240      	negs	r0, r0
 8015284:	f1b8 0f00 	cmp.w	r8, #0
 8015288:	d099      	beq.n	80151be <_strtol_l.isra.0+0x1a>
 801528a:	2a00      	cmp	r2, #0
 801528c:	d1f6      	bne.n	801527c <_strtol_l.isra.0+0xd8>
 801528e:	f8c8 1000 	str.w	r1, [r8]
 8015292:	e794      	b.n	80151be <_strtol_l.isra.0+0x1a>
 8015294:	080190c1 	.word	0x080190c1

08015298 <_strtol_r>:
 8015298:	f7ff bf84 	b.w	80151a4 <_strtol_l.isra.0>

0801529c <__ssputs_r>:
 801529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152a0:	688e      	ldr	r6, [r1, #8]
 80152a2:	461f      	mov	r7, r3
 80152a4:	42be      	cmp	r6, r7
 80152a6:	680b      	ldr	r3, [r1, #0]
 80152a8:	4682      	mov	sl, r0
 80152aa:	460c      	mov	r4, r1
 80152ac:	4690      	mov	r8, r2
 80152ae:	d82d      	bhi.n	801530c <__ssputs_r+0x70>
 80152b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80152b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80152b8:	d026      	beq.n	8015308 <__ssputs_r+0x6c>
 80152ba:	6965      	ldr	r5, [r4, #20]
 80152bc:	6909      	ldr	r1, [r1, #16]
 80152be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152c2:	eba3 0901 	sub.w	r9, r3, r1
 80152c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80152ca:	1c7b      	adds	r3, r7, #1
 80152cc:	444b      	add	r3, r9
 80152ce:	106d      	asrs	r5, r5, #1
 80152d0:	429d      	cmp	r5, r3
 80152d2:	bf38      	it	cc
 80152d4:	461d      	movcc	r5, r3
 80152d6:	0553      	lsls	r3, r2, #21
 80152d8:	d527      	bpl.n	801532a <__ssputs_r+0x8e>
 80152da:	4629      	mov	r1, r5
 80152dc:	f7fe fc24 	bl	8013b28 <_malloc_r>
 80152e0:	4606      	mov	r6, r0
 80152e2:	b360      	cbz	r0, 801533e <__ssputs_r+0xa2>
 80152e4:	6921      	ldr	r1, [r4, #16]
 80152e6:	464a      	mov	r2, r9
 80152e8:	f7fd fd3d 	bl	8012d66 <memcpy>
 80152ec:	89a3      	ldrh	r3, [r4, #12]
 80152ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80152f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80152f6:	81a3      	strh	r3, [r4, #12]
 80152f8:	6126      	str	r6, [r4, #16]
 80152fa:	6165      	str	r5, [r4, #20]
 80152fc:	444e      	add	r6, r9
 80152fe:	eba5 0509 	sub.w	r5, r5, r9
 8015302:	6026      	str	r6, [r4, #0]
 8015304:	60a5      	str	r5, [r4, #8]
 8015306:	463e      	mov	r6, r7
 8015308:	42be      	cmp	r6, r7
 801530a:	d900      	bls.n	801530e <__ssputs_r+0x72>
 801530c:	463e      	mov	r6, r7
 801530e:	6820      	ldr	r0, [r4, #0]
 8015310:	4632      	mov	r2, r6
 8015312:	4641      	mov	r1, r8
 8015314:	f000 f9c6 	bl	80156a4 <memmove>
 8015318:	68a3      	ldr	r3, [r4, #8]
 801531a:	1b9b      	subs	r3, r3, r6
 801531c:	60a3      	str	r3, [r4, #8]
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	4433      	add	r3, r6
 8015322:	6023      	str	r3, [r4, #0]
 8015324:	2000      	movs	r0, #0
 8015326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801532a:	462a      	mov	r2, r5
 801532c:	f000 fd7d 	bl	8015e2a <_realloc_r>
 8015330:	4606      	mov	r6, r0
 8015332:	2800      	cmp	r0, #0
 8015334:	d1e0      	bne.n	80152f8 <__ssputs_r+0x5c>
 8015336:	6921      	ldr	r1, [r4, #16]
 8015338:	4650      	mov	r0, sl
 801533a:	f7fe fb81 	bl	8013a40 <_free_r>
 801533e:	230c      	movs	r3, #12
 8015340:	f8ca 3000 	str.w	r3, [sl]
 8015344:	89a3      	ldrh	r3, [r4, #12]
 8015346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801534a:	81a3      	strh	r3, [r4, #12]
 801534c:	f04f 30ff 	mov.w	r0, #4294967295
 8015350:	e7e9      	b.n	8015326 <__ssputs_r+0x8a>
	...

08015354 <_svfiprintf_r>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	4698      	mov	r8, r3
 801535a:	898b      	ldrh	r3, [r1, #12]
 801535c:	061b      	lsls	r3, r3, #24
 801535e:	b09d      	sub	sp, #116	@ 0x74
 8015360:	4607      	mov	r7, r0
 8015362:	460d      	mov	r5, r1
 8015364:	4614      	mov	r4, r2
 8015366:	d510      	bpl.n	801538a <_svfiprintf_r+0x36>
 8015368:	690b      	ldr	r3, [r1, #16]
 801536a:	b973      	cbnz	r3, 801538a <_svfiprintf_r+0x36>
 801536c:	2140      	movs	r1, #64	@ 0x40
 801536e:	f7fe fbdb 	bl	8013b28 <_malloc_r>
 8015372:	6028      	str	r0, [r5, #0]
 8015374:	6128      	str	r0, [r5, #16]
 8015376:	b930      	cbnz	r0, 8015386 <_svfiprintf_r+0x32>
 8015378:	230c      	movs	r3, #12
 801537a:	603b      	str	r3, [r7, #0]
 801537c:	f04f 30ff 	mov.w	r0, #4294967295
 8015380:	b01d      	add	sp, #116	@ 0x74
 8015382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015386:	2340      	movs	r3, #64	@ 0x40
 8015388:	616b      	str	r3, [r5, #20]
 801538a:	2300      	movs	r3, #0
 801538c:	9309      	str	r3, [sp, #36]	@ 0x24
 801538e:	2320      	movs	r3, #32
 8015390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015394:	f8cd 800c 	str.w	r8, [sp, #12]
 8015398:	2330      	movs	r3, #48	@ 0x30
 801539a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015538 <_svfiprintf_r+0x1e4>
 801539e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80153a2:	f04f 0901 	mov.w	r9, #1
 80153a6:	4623      	mov	r3, r4
 80153a8:	469a      	mov	sl, r3
 80153aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153ae:	b10a      	cbz	r2, 80153b4 <_svfiprintf_r+0x60>
 80153b0:	2a25      	cmp	r2, #37	@ 0x25
 80153b2:	d1f9      	bne.n	80153a8 <_svfiprintf_r+0x54>
 80153b4:	ebba 0b04 	subs.w	fp, sl, r4
 80153b8:	d00b      	beq.n	80153d2 <_svfiprintf_r+0x7e>
 80153ba:	465b      	mov	r3, fp
 80153bc:	4622      	mov	r2, r4
 80153be:	4629      	mov	r1, r5
 80153c0:	4638      	mov	r0, r7
 80153c2:	f7ff ff6b 	bl	801529c <__ssputs_r>
 80153c6:	3001      	adds	r0, #1
 80153c8:	f000 80a7 	beq.w	801551a <_svfiprintf_r+0x1c6>
 80153cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153ce:	445a      	add	r2, fp
 80153d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80153d2:	f89a 3000 	ldrb.w	r3, [sl]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	f000 809f 	beq.w	801551a <_svfiprintf_r+0x1c6>
 80153dc:	2300      	movs	r3, #0
 80153de:	f04f 32ff 	mov.w	r2, #4294967295
 80153e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153e6:	f10a 0a01 	add.w	sl, sl, #1
 80153ea:	9304      	str	r3, [sp, #16]
 80153ec:	9307      	str	r3, [sp, #28]
 80153ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80153f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80153f4:	4654      	mov	r4, sl
 80153f6:	2205      	movs	r2, #5
 80153f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153fc:	484e      	ldr	r0, [pc, #312]	@ (8015538 <_svfiprintf_r+0x1e4>)
 80153fe:	f7ea ff0f 	bl	8000220 <memchr>
 8015402:	9a04      	ldr	r2, [sp, #16]
 8015404:	b9d8      	cbnz	r0, 801543e <_svfiprintf_r+0xea>
 8015406:	06d0      	lsls	r0, r2, #27
 8015408:	bf44      	itt	mi
 801540a:	2320      	movmi	r3, #32
 801540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015410:	0711      	lsls	r1, r2, #28
 8015412:	bf44      	itt	mi
 8015414:	232b      	movmi	r3, #43	@ 0x2b
 8015416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801541a:	f89a 3000 	ldrb.w	r3, [sl]
 801541e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015420:	d015      	beq.n	801544e <_svfiprintf_r+0xfa>
 8015422:	9a07      	ldr	r2, [sp, #28]
 8015424:	4654      	mov	r4, sl
 8015426:	2000      	movs	r0, #0
 8015428:	f04f 0c0a 	mov.w	ip, #10
 801542c:	4621      	mov	r1, r4
 801542e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015432:	3b30      	subs	r3, #48	@ 0x30
 8015434:	2b09      	cmp	r3, #9
 8015436:	d94b      	bls.n	80154d0 <_svfiprintf_r+0x17c>
 8015438:	b1b0      	cbz	r0, 8015468 <_svfiprintf_r+0x114>
 801543a:	9207      	str	r2, [sp, #28]
 801543c:	e014      	b.n	8015468 <_svfiprintf_r+0x114>
 801543e:	eba0 0308 	sub.w	r3, r0, r8
 8015442:	fa09 f303 	lsl.w	r3, r9, r3
 8015446:	4313      	orrs	r3, r2
 8015448:	9304      	str	r3, [sp, #16]
 801544a:	46a2      	mov	sl, r4
 801544c:	e7d2      	b.n	80153f4 <_svfiprintf_r+0xa0>
 801544e:	9b03      	ldr	r3, [sp, #12]
 8015450:	1d19      	adds	r1, r3, #4
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	9103      	str	r1, [sp, #12]
 8015456:	2b00      	cmp	r3, #0
 8015458:	bfbb      	ittet	lt
 801545a:	425b      	neglt	r3, r3
 801545c:	f042 0202 	orrlt.w	r2, r2, #2
 8015460:	9307      	strge	r3, [sp, #28]
 8015462:	9307      	strlt	r3, [sp, #28]
 8015464:	bfb8      	it	lt
 8015466:	9204      	strlt	r2, [sp, #16]
 8015468:	7823      	ldrb	r3, [r4, #0]
 801546a:	2b2e      	cmp	r3, #46	@ 0x2e
 801546c:	d10a      	bne.n	8015484 <_svfiprintf_r+0x130>
 801546e:	7863      	ldrb	r3, [r4, #1]
 8015470:	2b2a      	cmp	r3, #42	@ 0x2a
 8015472:	d132      	bne.n	80154da <_svfiprintf_r+0x186>
 8015474:	9b03      	ldr	r3, [sp, #12]
 8015476:	1d1a      	adds	r2, r3, #4
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	9203      	str	r2, [sp, #12]
 801547c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015480:	3402      	adds	r4, #2
 8015482:	9305      	str	r3, [sp, #20]
 8015484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015548 <_svfiprintf_r+0x1f4>
 8015488:	7821      	ldrb	r1, [r4, #0]
 801548a:	2203      	movs	r2, #3
 801548c:	4650      	mov	r0, sl
 801548e:	f7ea fec7 	bl	8000220 <memchr>
 8015492:	b138      	cbz	r0, 80154a4 <_svfiprintf_r+0x150>
 8015494:	9b04      	ldr	r3, [sp, #16]
 8015496:	eba0 000a 	sub.w	r0, r0, sl
 801549a:	2240      	movs	r2, #64	@ 0x40
 801549c:	4082      	lsls	r2, r0
 801549e:	4313      	orrs	r3, r2
 80154a0:	3401      	adds	r4, #1
 80154a2:	9304      	str	r3, [sp, #16]
 80154a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154a8:	4824      	ldr	r0, [pc, #144]	@ (801553c <_svfiprintf_r+0x1e8>)
 80154aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80154ae:	2206      	movs	r2, #6
 80154b0:	f7ea feb6 	bl	8000220 <memchr>
 80154b4:	2800      	cmp	r0, #0
 80154b6:	d036      	beq.n	8015526 <_svfiprintf_r+0x1d2>
 80154b8:	4b21      	ldr	r3, [pc, #132]	@ (8015540 <_svfiprintf_r+0x1ec>)
 80154ba:	bb1b      	cbnz	r3, 8015504 <_svfiprintf_r+0x1b0>
 80154bc:	9b03      	ldr	r3, [sp, #12]
 80154be:	3307      	adds	r3, #7
 80154c0:	f023 0307 	bic.w	r3, r3, #7
 80154c4:	3308      	adds	r3, #8
 80154c6:	9303      	str	r3, [sp, #12]
 80154c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154ca:	4433      	add	r3, r6
 80154cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80154ce:	e76a      	b.n	80153a6 <_svfiprintf_r+0x52>
 80154d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80154d4:	460c      	mov	r4, r1
 80154d6:	2001      	movs	r0, #1
 80154d8:	e7a8      	b.n	801542c <_svfiprintf_r+0xd8>
 80154da:	2300      	movs	r3, #0
 80154dc:	3401      	adds	r4, #1
 80154de:	9305      	str	r3, [sp, #20]
 80154e0:	4619      	mov	r1, r3
 80154e2:	f04f 0c0a 	mov.w	ip, #10
 80154e6:	4620      	mov	r0, r4
 80154e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154ec:	3a30      	subs	r2, #48	@ 0x30
 80154ee:	2a09      	cmp	r2, #9
 80154f0:	d903      	bls.n	80154fa <_svfiprintf_r+0x1a6>
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d0c6      	beq.n	8015484 <_svfiprintf_r+0x130>
 80154f6:	9105      	str	r1, [sp, #20]
 80154f8:	e7c4      	b.n	8015484 <_svfiprintf_r+0x130>
 80154fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80154fe:	4604      	mov	r4, r0
 8015500:	2301      	movs	r3, #1
 8015502:	e7f0      	b.n	80154e6 <_svfiprintf_r+0x192>
 8015504:	ab03      	add	r3, sp, #12
 8015506:	9300      	str	r3, [sp, #0]
 8015508:	462a      	mov	r2, r5
 801550a:	4b0e      	ldr	r3, [pc, #56]	@ (8015544 <_svfiprintf_r+0x1f0>)
 801550c:	a904      	add	r1, sp, #16
 801550e:	4638      	mov	r0, r7
 8015510:	f7fc fc2a 	bl	8011d68 <_printf_float>
 8015514:	1c42      	adds	r2, r0, #1
 8015516:	4606      	mov	r6, r0
 8015518:	d1d6      	bne.n	80154c8 <_svfiprintf_r+0x174>
 801551a:	89ab      	ldrh	r3, [r5, #12]
 801551c:	065b      	lsls	r3, r3, #25
 801551e:	f53f af2d 	bmi.w	801537c <_svfiprintf_r+0x28>
 8015522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015524:	e72c      	b.n	8015380 <_svfiprintf_r+0x2c>
 8015526:	ab03      	add	r3, sp, #12
 8015528:	9300      	str	r3, [sp, #0]
 801552a:	462a      	mov	r2, r5
 801552c:	4b05      	ldr	r3, [pc, #20]	@ (8015544 <_svfiprintf_r+0x1f0>)
 801552e:	a904      	add	r1, sp, #16
 8015530:	4638      	mov	r0, r7
 8015532:	f7fc feb1 	bl	8012298 <_printf_i>
 8015536:	e7ed      	b.n	8015514 <_svfiprintf_r+0x1c0>
 8015538:	08018ebd 	.word	0x08018ebd
 801553c:	08018ec7 	.word	0x08018ec7
 8015540:	08011d69 	.word	0x08011d69
 8015544:	0801529d 	.word	0x0801529d
 8015548:	08018ec3 	.word	0x08018ec3

0801554c <__sflush_r>:
 801554c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015554:	0716      	lsls	r6, r2, #28
 8015556:	4605      	mov	r5, r0
 8015558:	460c      	mov	r4, r1
 801555a:	d454      	bmi.n	8015606 <__sflush_r+0xba>
 801555c:	684b      	ldr	r3, [r1, #4]
 801555e:	2b00      	cmp	r3, #0
 8015560:	dc02      	bgt.n	8015568 <__sflush_r+0x1c>
 8015562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015564:	2b00      	cmp	r3, #0
 8015566:	dd48      	ble.n	80155fa <__sflush_r+0xae>
 8015568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801556a:	2e00      	cmp	r6, #0
 801556c:	d045      	beq.n	80155fa <__sflush_r+0xae>
 801556e:	2300      	movs	r3, #0
 8015570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015574:	682f      	ldr	r7, [r5, #0]
 8015576:	6a21      	ldr	r1, [r4, #32]
 8015578:	602b      	str	r3, [r5, #0]
 801557a:	d030      	beq.n	80155de <__sflush_r+0x92>
 801557c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801557e:	89a3      	ldrh	r3, [r4, #12]
 8015580:	0759      	lsls	r1, r3, #29
 8015582:	d505      	bpl.n	8015590 <__sflush_r+0x44>
 8015584:	6863      	ldr	r3, [r4, #4]
 8015586:	1ad2      	subs	r2, r2, r3
 8015588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801558a:	b10b      	cbz	r3, 8015590 <__sflush_r+0x44>
 801558c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801558e:	1ad2      	subs	r2, r2, r3
 8015590:	2300      	movs	r3, #0
 8015592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015594:	6a21      	ldr	r1, [r4, #32]
 8015596:	4628      	mov	r0, r5
 8015598:	47b0      	blx	r6
 801559a:	1c43      	adds	r3, r0, #1
 801559c:	89a3      	ldrh	r3, [r4, #12]
 801559e:	d106      	bne.n	80155ae <__sflush_r+0x62>
 80155a0:	6829      	ldr	r1, [r5, #0]
 80155a2:	291d      	cmp	r1, #29
 80155a4:	d82b      	bhi.n	80155fe <__sflush_r+0xb2>
 80155a6:	4a2a      	ldr	r2, [pc, #168]	@ (8015650 <__sflush_r+0x104>)
 80155a8:	40ca      	lsrs	r2, r1
 80155aa:	07d6      	lsls	r6, r2, #31
 80155ac:	d527      	bpl.n	80155fe <__sflush_r+0xb2>
 80155ae:	2200      	movs	r2, #0
 80155b0:	6062      	str	r2, [r4, #4]
 80155b2:	04d9      	lsls	r1, r3, #19
 80155b4:	6922      	ldr	r2, [r4, #16]
 80155b6:	6022      	str	r2, [r4, #0]
 80155b8:	d504      	bpl.n	80155c4 <__sflush_r+0x78>
 80155ba:	1c42      	adds	r2, r0, #1
 80155bc:	d101      	bne.n	80155c2 <__sflush_r+0x76>
 80155be:	682b      	ldr	r3, [r5, #0]
 80155c0:	b903      	cbnz	r3, 80155c4 <__sflush_r+0x78>
 80155c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80155c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155c6:	602f      	str	r7, [r5, #0]
 80155c8:	b1b9      	cbz	r1, 80155fa <__sflush_r+0xae>
 80155ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80155ce:	4299      	cmp	r1, r3
 80155d0:	d002      	beq.n	80155d8 <__sflush_r+0x8c>
 80155d2:	4628      	mov	r0, r5
 80155d4:	f7fe fa34 	bl	8013a40 <_free_r>
 80155d8:	2300      	movs	r3, #0
 80155da:	6363      	str	r3, [r4, #52]	@ 0x34
 80155dc:	e00d      	b.n	80155fa <__sflush_r+0xae>
 80155de:	2301      	movs	r3, #1
 80155e0:	4628      	mov	r0, r5
 80155e2:	47b0      	blx	r6
 80155e4:	4602      	mov	r2, r0
 80155e6:	1c50      	adds	r0, r2, #1
 80155e8:	d1c9      	bne.n	801557e <__sflush_r+0x32>
 80155ea:	682b      	ldr	r3, [r5, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d0c6      	beq.n	801557e <__sflush_r+0x32>
 80155f0:	2b1d      	cmp	r3, #29
 80155f2:	d001      	beq.n	80155f8 <__sflush_r+0xac>
 80155f4:	2b16      	cmp	r3, #22
 80155f6:	d11e      	bne.n	8015636 <__sflush_r+0xea>
 80155f8:	602f      	str	r7, [r5, #0]
 80155fa:	2000      	movs	r0, #0
 80155fc:	e022      	b.n	8015644 <__sflush_r+0xf8>
 80155fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015602:	b21b      	sxth	r3, r3
 8015604:	e01b      	b.n	801563e <__sflush_r+0xf2>
 8015606:	690f      	ldr	r7, [r1, #16]
 8015608:	2f00      	cmp	r7, #0
 801560a:	d0f6      	beq.n	80155fa <__sflush_r+0xae>
 801560c:	0793      	lsls	r3, r2, #30
 801560e:	680e      	ldr	r6, [r1, #0]
 8015610:	bf08      	it	eq
 8015612:	694b      	ldreq	r3, [r1, #20]
 8015614:	600f      	str	r7, [r1, #0]
 8015616:	bf18      	it	ne
 8015618:	2300      	movne	r3, #0
 801561a:	eba6 0807 	sub.w	r8, r6, r7
 801561e:	608b      	str	r3, [r1, #8]
 8015620:	f1b8 0f00 	cmp.w	r8, #0
 8015624:	dde9      	ble.n	80155fa <__sflush_r+0xae>
 8015626:	6a21      	ldr	r1, [r4, #32]
 8015628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801562a:	4643      	mov	r3, r8
 801562c:	463a      	mov	r2, r7
 801562e:	4628      	mov	r0, r5
 8015630:	47b0      	blx	r6
 8015632:	2800      	cmp	r0, #0
 8015634:	dc08      	bgt.n	8015648 <__sflush_r+0xfc>
 8015636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801563a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801563e:	81a3      	strh	r3, [r4, #12]
 8015640:	f04f 30ff 	mov.w	r0, #4294967295
 8015644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015648:	4407      	add	r7, r0
 801564a:	eba8 0800 	sub.w	r8, r8, r0
 801564e:	e7e7      	b.n	8015620 <__sflush_r+0xd4>
 8015650:	20400001 	.word	0x20400001

08015654 <_fflush_r>:
 8015654:	b538      	push	{r3, r4, r5, lr}
 8015656:	690b      	ldr	r3, [r1, #16]
 8015658:	4605      	mov	r5, r0
 801565a:	460c      	mov	r4, r1
 801565c:	b913      	cbnz	r3, 8015664 <_fflush_r+0x10>
 801565e:	2500      	movs	r5, #0
 8015660:	4628      	mov	r0, r5
 8015662:	bd38      	pop	{r3, r4, r5, pc}
 8015664:	b118      	cbz	r0, 801566e <_fflush_r+0x1a>
 8015666:	6a03      	ldr	r3, [r0, #32]
 8015668:	b90b      	cbnz	r3, 801566e <_fflush_r+0x1a>
 801566a:	f7fd f9cd 	bl	8012a08 <__sinit>
 801566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d0f3      	beq.n	801565e <_fflush_r+0xa>
 8015676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015678:	07d0      	lsls	r0, r2, #31
 801567a:	d404      	bmi.n	8015686 <_fflush_r+0x32>
 801567c:	0599      	lsls	r1, r3, #22
 801567e:	d402      	bmi.n	8015686 <_fflush_r+0x32>
 8015680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015682:	f7fd fb6e 	bl	8012d62 <__retarget_lock_acquire_recursive>
 8015686:	4628      	mov	r0, r5
 8015688:	4621      	mov	r1, r4
 801568a:	f7ff ff5f 	bl	801554c <__sflush_r>
 801568e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015690:	07da      	lsls	r2, r3, #31
 8015692:	4605      	mov	r5, r0
 8015694:	d4e4      	bmi.n	8015660 <_fflush_r+0xc>
 8015696:	89a3      	ldrh	r3, [r4, #12]
 8015698:	059b      	lsls	r3, r3, #22
 801569a:	d4e1      	bmi.n	8015660 <_fflush_r+0xc>
 801569c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801569e:	f7fd fb61 	bl	8012d64 <__retarget_lock_release_recursive>
 80156a2:	e7dd      	b.n	8015660 <_fflush_r+0xc>

080156a4 <memmove>:
 80156a4:	4288      	cmp	r0, r1
 80156a6:	b510      	push	{r4, lr}
 80156a8:	eb01 0402 	add.w	r4, r1, r2
 80156ac:	d902      	bls.n	80156b4 <memmove+0x10>
 80156ae:	4284      	cmp	r4, r0
 80156b0:	4623      	mov	r3, r4
 80156b2:	d807      	bhi.n	80156c4 <memmove+0x20>
 80156b4:	1e43      	subs	r3, r0, #1
 80156b6:	42a1      	cmp	r1, r4
 80156b8:	d008      	beq.n	80156cc <memmove+0x28>
 80156ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156c2:	e7f8      	b.n	80156b6 <memmove+0x12>
 80156c4:	4402      	add	r2, r0
 80156c6:	4601      	mov	r1, r0
 80156c8:	428a      	cmp	r2, r1
 80156ca:	d100      	bne.n	80156ce <memmove+0x2a>
 80156cc:	bd10      	pop	{r4, pc}
 80156ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80156d6:	e7f7      	b.n	80156c8 <memmove+0x24>

080156d8 <strncmp>:
 80156d8:	b510      	push	{r4, lr}
 80156da:	b16a      	cbz	r2, 80156f8 <strncmp+0x20>
 80156dc:	3901      	subs	r1, #1
 80156de:	1884      	adds	r4, r0, r2
 80156e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d103      	bne.n	80156f4 <strncmp+0x1c>
 80156ec:	42a0      	cmp	r0, r4
 80156ee:	d001      	beq.n	80156f4 <strncmp+0x1c>
 80156f0:	2a00      	cmp	r2, #0
 80156f2:	d1f5      	bne.n	80156e0 <strncmp+0x8>
 80156f4:	1ad0      	subs	r0, r2, r3
 80156f6:	bd10      	pop	{r4, pc}
 80156f8:	4610      	mov	r0, r2
 80156fa:	e7fc      	b.n	80156f6 <strncmp+0x1e>

080156fc <_sbrk_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4d06      	ldr	r5, [pc, #24]	@ (8015718 <_sbrk_r+0x1c>)
 8015700:	2300      	movs	r3, #0
 8015702:	4604      	mov	r4, r0
 8015704:	4608      	mov	r0, r1
 8015706:	602b      	str	r3, [r5, #0]
 8015708:	f7ed fac4 	bl	8002c94 <_sbrk>
 801570c:	1c43      	adds	r3, r0, #1
 801570e:	d102      	bne.n	8015716 <_sbrk_r+0x1a>
 8015710:	682b      	ldr	r3, [r5, #0]
 8015712:	b103      	cbz	r3, 8015716 <_sbrk_r+0x1a>
 8015714:	6023      	str	r3, [r4, #0]
 8015716:	bd38      	pop	{r3, r4, r5, pc}
 8015718:	200049fc 	.word	0x200049fc
 801571c:	00000000 	.word	0x00000000

08015720 <nan>:
 8015720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015728 <nan+0x8>
 8015724:	4770      	bx	lr
 8015726:	bf00      	nop
 8015728:	00000000 	.word	0x00000000
 801572c:	7ff80000 	.word	0x7ff80000

08015730 <__assert_func>:
 8015730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015732:	4614      	mov	r4, r2
 8015734:	461a      	mov	r2, r3
 8015736:	4b09      	ldr	r3, [pc, #36]	@ (801575c <__assert_func+0x2c>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	4605      	mov	r5, r0
 801573c:	68d8      	ldr	r0, [r3, #12]
 801573e:	b14c      	cbz	r4, 8015754 <__assert_func+0x24>
 8015740:	4b07      	ldr	r3, [pc, #28]	@ (8015760 <__assert_func+0x30>)
 8015742:	9100      	str	r1, [sp, #0]
 8015744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015748:	4906      	ldr	r1, [pc, #24]	@ (8015764 <__assert_func+0x34>)
 801574a:	462b      	mov	r3, r5
 801574c:	f000 fba8 	bl	8015ea0 <fiprintf>
 8015750:	f000 fbb8 	bl	8015ec4 <abort>
 8015754:	4b04      	ldr	r3, [pc, #16]	@ (8015768 <__assert_func+0x38>)
 8015756:	461c      	mov	r4, r3
 8015758:	e7f3      	b.n	8015742 <__assert_func+0x12>
 801575a:	bf00      	nop
 801575c:	20000054 	.word	0x20000054
 8015760:	08018ed6 	.word	0x08018ed6
 8015764:	08018ee3 	.word	0x08018ee3
 8015768:	08018f11 	.word	0x08018f11

0801576c <_calloc_r>:
 801576c:	b570      	push	{r4, r5, r6, lr}
 801576e:	fba1 5402 	umull	r5, r4, r1, r2
 8015772:	b934      	cbnz	r4, 8015782 <_calloc_r+0x16>
 8015774:	4629      	mov	r1, r5
 8015776:	f7fe f9d7 	bl	8013b28 <_malloc_r>
 801577a:	4606      	mov	r6, r0
 801577c:	b928      	cbnz	r0, 801578a <_calloc_r+0x1e>
 801577e:	4630      	mov	r0, r6
 8015780:	bd70      	pop	{r4, r5, r6, pc}
 8015782:	220c      	movs	r2, #12
 8015784:	6002      	str	r2, [r0, #0]
 8015786:	2600      	movs	r6, #0
 8015788:	e7f9      	b.n	801577e <_calloc_r+0x12>
 801578a:	462a      	mov	r2, r5
 801578c:	4621      	mov	r1, r4
 801578e:	f7fd fa0c 	bl	8012baa <memset>
 8015792:	e7f4      	b.n	801577e <_calloc_r+0x12>

08015794 <rshift>:
 8015794:	6903      	ldr	r3, [r0, #16]
 8015796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801579a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801579e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80157a2:	f100 0414 	add.w	r4, r0, #20
 80157a6:	dd45      	ble.n	8015834 <rshift+0xa0>
 80157a8:	f011 011f 	ands.w	r1, r1, #31
 80157ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157b4:	d10c      	bne.n	80157d0 <rshift+0x3c>
 80157b6:	f100 0710 	add.w	r7, r0, #16
 80157ba:	4629      	mov	r1, r5
 80157bc:	42b1      	cmp	r1, r6
 80157be:	d334      	bcc.n	801582a <rshift+0x96>
 80157c0:	1a9b      	subs	r3, r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	1eea      	subs	r2, r5, #3
 80157c6:	4296      	cmp	r6, r2
 80157c8:	bf38      	it	cc
 80157ca:	2300      	movcc	r3, #0
 80157cc:	4423      	add	r3, r4
 80157ce:	e015      	b.n	80157fc <rshift+0x68>
 80157d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157d4:	f1c1 0820 	rsb	r8, r1, #32
 80157d8:	40cf      	lsrs	r7, r1
 80157da:	f105 0e04 	add.w	lr, r5, #4
 80157de:	46a1      	mov	r9, r4
 80157e0:	4576      	cmp	r6, lr
 80157e2:	46f4      	mov	ip, lr
 80157e4:	d815      	bhi.n	8015812 <rshift+0x7e>
 80157e6:	1a9a      	subs	r2, r3, r2
 80157e8:	0092      	lsls	r2, r2, #2
 80157ea:	3a04      	subs	r2, #4
 80157ec:	3501      	adds	r5, #1
 80157ee:	42ae      	cmp	r6, r5
 80157f0:	bf38      	it	cc
 80157f2:	2200      	movcc	r2, #0
 80157f4:	18a3      	adds	r3, r4, r2
 80157f6:	50a7      	str	r7, [r4, r2]
 80157f8:	b107      	cbz	r7, 80157fc <rshift+0x68>
 80157fa:	3304      	adds	r3, #4
 80157fc:	1b1a      	subs	r2, r3, r4
 80157fe:	42a3      	cmp	r3, r4
 8015800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015804:	bf08      	it	eq
 8015806:	2300      	moveq	r3, #0
 8015808:	6102      	str	r2, [r0, #16]
 801580a:	bf08      	it	eq
 801580c:	6143      	streq	r3, [r0, #20]
 801580e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015812:	f8dc c000 	ldr.w	ip, [ip]
 8015816:	fa0c fc08 	lsl.w	ip, ip, r8
 801581a:	ea4c 0707 	orr.w	r7, ip, r7
 801581e:	f849 7b04 	str.w	r7, [r9], #4
 8015822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015826:	40cf      	lsrs	r7, r1
 8015828:	e7da      	b.n	80157e0 <rshift+0x4c>
 801582a:	f851 cb04 	ldr.w	ip, [r1], #4
 801582e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015832:	e7c3      	b.n	80157bc <rshift+0x28>
 8015834:	4623      	mov	r3, r4
 8015836:	e7e1      	b.n	80157fc <rshift+0x68>

08015838 <__hexdig_fun>:
 8015838:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801583c:	2b09      	cmp	r3, #9
 801583e:	d802      	bhi.n	8015846 <__hexdig_fun+0xe>
 8015840:	3820      	subs	r0, #32
 8015842:	b2c0      	uxtb	r0, r0
 8015844:	4770      	bx	lr
 8015846:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801584a:	2b05      	cmp	r3, #5
 801584c:	d801      	bhi.n	8015852 <__hexdig_fun+0x1a>
 801584e:	3847      	subs	r0, #71	@ 0x47
 8015850:	e7f7      	b.n	8015842 <__hexdig_fun+0xa>
 8015852:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015856:	2b05      	cmp	r3, #5
 8015858:	d801      	bhi.n	801585e <__hexdig_fun+0x26>
 801585a:	3827      	subs	r0, #39	@ 0x27
 801585c:	e7f1      	b.n	8015842 <__hexdig_fun+0xa>
 801585e:	2000      	movs	r0, #0
 8015860:	4770      	bx	lr
	...

08015864 <__gethex>:
 8015864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015868:	b085      	sub	sp, #20
 801586a:	468a      	mov	sl, r1
 801586c:	9302      	str	r3, [sp, #8]
 801586e:	680b      	ldr	r3, [r1, #0]
 8015870:	9001      	str	r0, [sp, #4]
 8015872:	4690      	mov	r8, r2
 8015874:	1c9c      	adds	r4, r3, #2
 8015876:	46a1      	mov	r9, r4
 8015878:	f814 0b01 	ldrb.w	r0, [r4], #1
 801587c:	2830      	cmp	r0, #48	@ 0x30
 801587e:	d0fa      	beq.n	8015876 <__gethex+0x12>
 8015880:	eba9 0303 	sub.w	r3, r9, r3
 8015884:	f1a3 0b02 	sub.w	fp, r3, #2
 8015888:	f7ff ffd6 	bl	8015838 <__hexdig_fun>
 801588c:	4605      	mov	r5, r0
 801588e:	2800      	cmp	r0, #0
 8015890:	d168      	bne.n	8015964 <__gethex+0x100>
 8015892:	49a0      	ldr	r1, [pc, #640]	@ (8015b14 <__gethex+0x2b0>)
 8015894:	2201      	movs	r2, #1
 8015896:	4648      	mov	r0, r9
 8015898:	f7ff ff1e 	bl	80156d8 <strncmp>
 801589c:	4607      	mov	r7, r0
 801589e:	2800      	cmp	r0, #0
 80158a0:	d167      	bne.n	8015972 <__gethex+0x10e>
 80158a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80158a6:	4626      	mov	r6, r4
 80158a8:	f7ff ffc6 	bl	8015838 <__hexdig_fun>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d062      	beq.n	8015976 <__gethex+0x112>
 80158b0:	4623      	mov	r3, r4
 80158b2:	7818      	ldrb	r0, [r3, #0]
 80158b4:	2830      	cmp	r0, #48	@ 0x30
 80158b6:	4699      	mov	r9, r3
 80158b8:	f103 0301 	add.w	r3, r3, #1
 80158bc:	d0f9      	beq.n	80158b2 <__gethex+0x4e>
 80158be:	f7ff ffbb 	bl	8015838 <__hexdig_fun>
 80158c2:	fab0 f580 	clz	r5, r0
 80158c6:	096d      	lsrs	r5, r5, #5
 80158c8:	f04f 0b01 	mov.w	fp, #1
 80158cc:	464a      	mov	r2, r9
 80158ce:	4616      	mov	r6, r2
 80158d0:	3201      	adds	r2, #1
 80158d2:	7830      	ldrb	r0, [r6, #0]
 80158d4:	f7ff ffb0 	bl	8015838 <__hexdig_fun>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d1f8      	bne.n	80158ce <__gethex+0x6a>
 80158dc:	498d      	ldr	r1, [pc, #564]	@ (8015b14 <__gethex+0x2b0>)
 80158de:	2201      	movs	r2, #1
 80158e0:	4630      	mov	r0, r6
 80158e2:	f7ff fef9 	bl	80156d8 <strncmp>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d13f      	bne.n	801596a <__gethex+0x106>
 80158ea:	b944      	cbnz	r4, 80158fe <__gethex+0x9a>
 80158ec:	1c74      	adds	r4, r6, #1
 80158ee:	4622      	mov	r2, r4
 80158f0:	4616      	mov	r6, r2
 80158f2:	3201      	adds	r2, #1
 80158f4:	7830      	ldrb	r0, [r6, #0]
 80158f6:	f7ff ff9f 	bl	8015838 <__hexdig_fun>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d1f8      	bne.n	80158f0 <__gethex+0x8c>
 80158fe:	1ba4      	subs	r4, r4, r6
 8015900:	00a7      	lsls	r7, r4, #2
 8015902:	7833      	ldrb	r3, [r6, #0]
 8015904:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015908:	2b50      	cmp	r3, #80	@ 0x50
 801590a:	d13e      	bne.n	801598a <__gethex+0x126>
 801590c:	7873      	ldrb	r3, [r6, #1]
 801590e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015910:	d033      	beq.n	801597a <__gethex+0x116>
 8015912:	2b2d      	cmp	r3, #45	@ 0x2d
 8015914:	d034      	beq.n	8015980 <__gethex+0x11c>
 8015916:	1c71      	adds	r1, r6, #1
 8015918:	2400      	movs	r4, #0
 801591a:	7808      	ldrb	r0, [r1, #0]
 801591c:	f7ff ff8c 	bl	8015838 <__hexdig_fun>
 8015920:	1e43      	subs	r3, r0, #1
 8015922:	b2db      	uxtb	r3, r3
 8015924:	2b18      	cmp	r3, #24
 8015926:	d830      	bhi.n	801598a <__gethex+0x126>
 8015928:	f1a0 0210 	sub.w	r2, r0, #16
 801592c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015930:	f7ff ff82 	bl	8015838 <__hexdig_fun>
 8015934:	f100 3cff 	add.w	ip, r0, #4294967295
 8015938:	fa5f fc8c 	uxtb.w	ip, ip
 801593c:	f1bc 0f18 	cmp.w	ip, #24
 8015940:	f04f 030a 	mov.w	r3, #10
 8015944:	d91e      	bls.n	8015984 <__gethex+0x120>
 8015946:	b104      	cbz	r4, 801594a <__gethex+0xe6>
 8015948:	4252      	negs	r2, r2
 801594a:	4417      	add	r7, r2
 801594c:	f8ca 1000 	str.w	r1, [sl]
 8015950:	b1ed      	cbz	r5, 801598e <__gethex+0x12a>
 8015952:	f1bb 0f00 	cmp.w	fp, #0
 8015956:	bf0c      	ite	eq
 8015958:	2506      	moveq	r5, #6
 801595a:	2500      	movne	r5, #0
 801595c:	4628      	mov	r0, r5
 801595e:	b005      	add	sp, #20
 8015960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015964:	2500      	movs	r5, #0
 8015966:	462c      	mov	r4, r5
 8015968:	e7b0      	b.n	80158cc <__gethex+0x68>
 801596a:	2c00      	cmp	r4, #0
 801596c:	d1c7      	bne.n	80158fe <__gethex+0x9a>
 801596e:	4627      	mov	r7, r4
 8015970:	e7c7      	b.n	8015902 <__gethex+0x9e>
 8015972:	464e      	mov	r6, r9
 8015974:	462f      	mov	r7, r5
 8015976:	2501      	movs	r5, #1
 8015978:	e7c3      	b.n	8015902 <__gethex+0x9e>
 801597a:	2400      	movs	r4, #0
 801597c:	1cb1      	adds	r1, r6, #2
 801597e:	e7cc      	b.n	801591a <__gethex+0xb6>
 8015980:	2401      	movs	r4, #1
 8015982:	e7fb      	b.n	801597c <__gethex+0x118>
 8015984:	fb03 0002 	mla	r0, r3, r2, r0
 8015988:	e7ce      	b.n	8015928 <__gethex+0xc4>
 801598a:	4631      	mov	r1, r6
 801598c:	e7de      	b.n	801594c <__gethex+0xe8>
 801598e:	eba6 0309 	sub.w	r3, r6, r9
 8015992:	3b01      	subs	r3, #1
 8015994:	4629      	mov	r1, r5
 8015996:	2b07      	cmp	r3, #7
 8015998:	dc0a      	bgt.n	80159b0 <__gethex+0x14c>
 801599a:	9801      	ldr	r0, [sp, #4]
 801599c:	f7fe f950 	bl	8013c40 <_Balloc>
 80159a0:	4604      	mov	r4, r0
 80159a2:	b940      	cbnz	r0, 80159b6 <__gethex+0x152>
 80159a4:	4b5c      	ldr	r3, [pc, #368]	@ (8015b18 <__gethex+0x2b4>)
 80159a6:	4602      	mov	r2, r0
 80159a8:	21e4      	movs	r1, #228	@ 0xe4
 80159aa:	485c      	ldr	r0, [pc, #368]	@ (8015b1c <__gethex+0x2b8>)
 80159ac:	f7ff fec0 	bl	8015730 <__assert_func>
 80159b0:	3101      	adds	r1, #1
 80159b2:	105b      	asrs	r3, r3, #1
 80159b4:	e7ef      	b.n	8015996 <__gethex+0x132>
 80159b6:	f100 0a14 	add.w	sl, r0, #20
 80159ba:	2300      	movs	r3, #0
 80159bc:	4655      	mov	r5, sl
 80159be:	469b      	mov	fp, r3
 80159c0:	45b1      	cmp	r9, r6
 80159c2:	d337      	bcc.n	8015a34 <__gethex+0x1d0>
 80159c4:	f845 bb04 	str.w	fp, [r5], #4
 80159c8:	eba5 050a 	sub.w	r5, r5, sl
 80159cc:	10ad      	asrs	r5, r5, #2
 80159ce:	6125      	str	r5, [r4, #16]
 80159d0:	4658      	mov	r0, fp
 80159d2:	f7fe fa27 	bl	8013e24 <__hi0bits>
 80159d6:	016d      	lsls	r5, r5, #5
 80159d8:	f8d8 6000 	ldr.w	r6, [r8]
 80159dc:	1a2d      	subs	r5, r5, r0
 80159de:	42b5      	cmp	r5, r6
 80159e0:	dd54      	ble.n	8015a8c <__gethex+0x228>
 80159e2:	1bad      	subs	r5, r5, r6
 80159e4:	4629      	mov	r1, r5
 80159e6:	4620      	mov	r0, r4
 80159e8:	f7fe fdb3 	bl	8014552 <__any_on>
 80159ec:	4681      	mov	r9, r0
 80159ee:	b178      	cbz	r0, 8015a10 <__gethex+0x1ac>
 80159f0:	1e6b      	subs	r3, r5, #1
 80159f2:	1159      	asrs	r1, r3, #5
 80159f4:	f003 021f 	and.w	r2, r3, #31
 80159f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80159fc:	f04f 0901 	mov.w	r9, #1
 8015a00:	fa09 f202 	lsl.w	r2, r9, r2
 8015a04:	420a      	tst	r2, r1
 8015a06:	d003      	beq.n	8015a10 <__gethex+0x1ac>
 8015a08:	454b      	cmp	r3, r9
 8015a0a:	dc36      	bgt.n	8015a7a <__gethex+0x216>
 8015a0c:	f04f 0902 	mov.w	r9, #2
 8015a10:	4629      	mov	r1, r5
 8015a12:	4620      	mov	r0, r4
 8015a14:	f7ff febe 	bl	8015794 <rshift>
 8015a18:	442f      	add	r7, r5
 8015a1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a1e:	42bb      	cmp	r3, r7
 8015a20:	da42      	bge.n	8015aa8 <__gethex+0x244>
 8015a22:	9801      	ldr	r0, [sp, #4]
 8015a24:	4621      	mov	r1, r4
 8015a26:	f7fe f94b 	bl	8013cc0 <_Bfree>
 8015a2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	25a3      	movs	r5, #163	@ 0xa3
 8015a32:	e793      	b.n	801595c <__gethex+0xf8>
 8015a34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015a38:	2a2e      	cmp	r2, #46	@ 0x2e
 8015a3a:	d012      	beq.n	8015a62 <__gethex+0x1fe>
 8015a3c:	2b20      	cmp	r3, #32
 8015a3e:	d104      	bne.n	8015a4a <__gethex+0x1e6>
 8015a40:	f845 bb04 	str.w	fp, [r5], #4
 8015a44:	f04f 0b00 	mov.w	fp, #0
 8015a48:	465b      	mov	r3, fp
 8015a4a:	7830      	ldrb	r0, [r6, #0]
 8015a4c:	9303      	str	r3, [sp, #12]
 8015a4e:	f7ff fef3 	bl	8015838 <__hexdig_fun>
 8015a52:	9b03      	ldr	r3, [sp, #12]
 8015a54:	f000 000f 	and.w	r0, r0, #15
 8015a58:	4098      	lsls	r0, r3
 8015a5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8015a5e:	3304      	adds	r3, #4
 8015a60:	e7ae      	b.n	80159c0 <__gethex+0x15c>
 8015a62:	45b1      	cmp	r9, r6
 8015a64:	d8ea      	bhi.n	8015a3c <__gethex+0x1d8>
 8015a66:	492b      	ldr	r1, [pc, #172]	@ (8015b14 <__gethex+0x2b0>)
 8015a68:	9303      	str	r3, [sp, #12]
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	4630      	mov	r0, r6
 8015a6e:	f7ff fe33 	bl	80156d8 <strncmp>
 8015a72:	9b03      	ldr	r3, [sp, #12]
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d1e1      	bne.n	8015a3c <__gethex+0x1d8>
 8015a78:	e7a2      	b.n	80159c0 <__gethex+0x15c>
 8015a7a:	1ea9      	subs	r1, r5, #2
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	f7fe fd68 	bl	8014552 <__any_on>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d0c2      	beq.n	8015a0c <__gethex+0x1a8>
 8015a86:	f04f 0903 	mov.w	r9, #3
 8015a8a:	e7c1      	b.n	8015a10 <__gethex+0x1ac>
 8015a8c:	da09      	bge.n	8015aa2 <__gethex+0x23e>
 8015a8e:	1b75      	subs	r5, r6, r5
 8015a90:	4621      	mov	r1, r4
 8015a92:	9801      	ldr	r0, [sp, #4]
 8015a94:	462a      	mov	r2, r5
 8015a96:	f7fe fb23 	bl	80140e0 <__lshift>
 8015a9a:	1b7f      	subs	r7, r7, r5
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	f100 0a14 	add.w	sl, r0, #20
 8015aa2:	f04f 0900 	mov.w	r9, #0
 8015aa6:	e7b8      	b.n	8015a1a <__gethex+0x1b6>
 8015aa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015aac:	42bd      	cmp	r5, r7
 8015aae:	dd6f      	ble.n	8015b90 <__gethex+0x32c>
 8015ab0:	1bed      	subs	r5, r5, r7
 8015ab2:	42ae      	cmp	r6, r5
 8015ab4:	dc34      	bgt.n	8015b20 <__gethex+0x2bc>
 8015ab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015aba:	2b02      	cmp	r3, #2
 8015abc:	d022      	beq.n	8015b04 <__gethex+0x2a0>
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d024      	beq.n	8015b0c <__gethex+0x2a8>
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d115      	bne.n	8015af2 <__gethex+0x28e>
 8015ac6:	42ae      	cmp	r6, r5
 8015ac8:	d113      	bne.n	8015af2 <__gethex+0x28e>
 8015aca:	2e01      	cmp	r6, #1
 8015acc:	d10b      	bne.n	8015ae6 <__gethex+0x282>
 8015ace:	9a02      	ldr	r2, [sp, #8]
 8015ad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ad4:	6013      	str	r3, [r2, #0]
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	6123      	str	r3, [r4, #16]
 8015ada:	f8ca 3000 	str.w	r3, [sl]
 8015ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae0:	2562      	movs	r5, #98	@ 0x62
 8015ae2:	601c      	str	r4, [r3, #0]
 8015ae4:	e73a      	b.n	801595c <__gethex+0xf8>
 8015ae6:	1e71      	subs	r1, r6, #1
 8015ae8:	4620      	mov	r0, r4
 8015aea:	f7fe fd32 	bl	8014552 <__any_on>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d1ed      	bne.n	8015ace <__gethex+0x26a>
 8015af2:	9801      	ldr	r0, [sp, #4]
 8015af4:	4621      	mov	r1, r4
 8015af6:	f7fe f8e3 	bl	8013cc0 <_Bfree>
 8015afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015afc:	2300      	movs	r3, #0
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	2550      	movs	r5, #80	@ 0x50
 8015b02:	e72b      	b.n	801595c <__gethex+0xf8>
 8015b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d1f3      	bne.n	8015af2 <__gethex+0x28e>
 8015b0a:	e7e0      	b.n	8015ace <__gethex+0x26a>
 8015b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d1dd      	bne.n	8015ace <__gethex+0x26a>
 8015b12:	e7ee      	b.n	8015af2 <__gethex+0x28e>
 8015b14:	08018ebb 	.word	0x08018ebb
 8015b18:	08018e51 	.word	0x08018e51
 8015b1c:	08018f12 	.word	0x08018f12
 8015b20:	1e6f      	subs	r7, r5, #1
 8015b22:	f1b9 0f00 	cmp.w	r9, #0
 8015b26:	d130      	bne.n	8015b8a <__gethex+0x326>
 8015b28:	b127      	cbz	r7, 8015b34 <__gethex+0x2d0>
 8015b2a:	4639      	mov	r1, r7
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f7fe fd10 	bl	8014552 <__any_on>
 8015b32:	4681      	mov	r9, r0
 8015b34:	117a      	asrs	r2, r7, #5
 8015b36:	2301      	movs	r3, #1
 8015b38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015b3c:	f007 071f 	and.w	r7, r7, #31
 8015b40:	40bb      	lsls	r3, r7
 8015b42:	4213      	tst	r3, r2
 8015b44:	4629      	mov	r1, r5
 8015b46:	4620      	mov	r0, r4
 8015b48:	bf18      	it	ne
 8015b4a:	f049 0902 	orrne.w	r9, r9, #2
 8015b4e:	f7ff fe21 	bl	8015794 <rshift>
 8015b52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015b56:	1b76      	subs	r6, r6, r5
 8015b58:	2502      	movs	r5, #2
 8015b5a:	f1b9 0f00 	cmp.w	r9, #0
 8015b5e:	d047      	beq.n	8015bf0 <__gethex+0x38c>
 8015b60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	d015      	beq.n	8015b94 <__gethex+0x330>
 8015b68:	2b03      	cmp	r3, #3
 8015b6a:	d017      	beq.n	8015b9c <__gethex+0x338>
 8015b6c:	2b01      	cmp	r3, #1
 8015b6e:	d109      	bne.n	8015b84 <__gethex+0x320>
 8015b70:	f019 0f02 	tst.w	r9, #2
 8015b74:	d006      	beq.n	8015b84 <__gethex+0x320>
 8015b76:	f8da 3000 	ldr.w	r3, [sl]
 8015b7a:	ea49 0903 	orr.w	r9, r9, r3
 8015b7e:	f019 0f01 	tst.w	r9, #1
 8015b82:	d10e      	bne.n	8015ba2 <__gethex+0x33e>
 8015b84:	f045 0510 	orr.w	r5, r5, #16
 8015b88:	e032      	b.n	8015bf0 <__gethex+0x38c>
 8015b8a:	f04f 0901 	mov.w	r9, #1
 8015b8e:	e7d1      	b.n	8015b34 <__gethex+0x2d0>
 8015b90:	2501      	movs	r5, #1
 8015b92:	e7e2      	b.n	8015b5a <__gethex+0x2f6>
 8015b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b96:	f1c3 0301 	rsb	r3, r3, #1
 8015b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d0f0      	beq.n	8015b84 <__gethex+0x320>
 8015ba2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ba6:	f104 0314 	add.w	r3, r4, #20
 8015baa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015bae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015bb2:	f04f 0c00 	mov.w	ip, #0
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015bc0:	d01b      	beq.n	8015bfa <__gethex+0x396>
 8015bc2:	3201      	adds	r2, #1
 8015bc4:	6002      	str	r2, [r0, #0]
 8015bc6:	2d02      	cmp	r5, #2
 8015bc8:	f104 0314 	add.w	r3, r4, #20
 8015bcc:	d13c      	bne.n	8015c48 <__gethex+0x3e4>
 8015bce:	f8d8 2000 	ldr.w	r2, [r8]
 8015bd2:	3a01      	subs	r2, #1
 8015bd4:	42b2      	cmp	r2, r6
 8015bd6:	d109      	bne.n	8015bec <__gethex+0x388>
 8015bd8:	1171      	asrs	r1, r6, #5
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015be0:	f006 061f 	and.w	r6, r6, #31
 8015be4:	fa02 f606 	lsl.w	r6, r2, r6
 8015be8:	421e      	tst	r6, r3
 8015bea:	d13a      	bne.n	8015c62 <__gethex+0x3fe>
 8015bec:	f045 0520 	orr.w	r5, r5, #32
 8015bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bf2:	601c      	str	r4, [r3, #0]
 8015bf4:	9b02      	ldr	r3, [sp, #8]
 8015bf6:	601f      	str	r7, [r3, #0]
 8015bf8:	e6b0      	b.n	801595c <__gethex+0xf8>
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c00:	d8d9      	bhi.n	8015bb6 <__gethex+0x352>
 8015c02:	68a3      	ldr	r3, [r4, #8]
 8015c04:	459b      	cmp	fp, r3
 8015c06:	db17      	blt.n	8015c38 <__gethex+0x3d4>
 8015c08:	6861      	ldr	r1, [r4, #4]
 8015c0a:	9801      	ldr	r0, [sp, #4]
 8015c0c:	3101      	adds	r1, #1
 8015c0e:	f7fe f817 	bl	8013c40 <_Balloc>
 8015c12:	4681      	mov	r9, r0
 8015c14:	b918      	cbnz	r0, 8015c1e <__gethex+0x3ba>
 8015c16:	4b1a      	ldr	r3, [pc, #104]	@ (8015c80 <__gethex+0x41c>)
 8015c18:	4602      	mov	r2, r0
 8015c1a:	2184      	movs	r1, #132	@ 0x84
 8015c1c:	e6c5      	b.n	80159aa <__gethex+0x146>
 8015c1e:	6922      	ldr	r2, [r4, #16]
 8015c20:	3202      	adds	r2, #2
 8015c22:	f104 010c 	add.w	r1, r4, #12
 8015c26:	0092      	lsls	r2, r2, #2
 8015c28:	300c      	adds	r0, #12
 8015c2a:	f7fd f89c 	bl	8012d66 <memcpy>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	9801      	ldr	r0, [sp, #4]
 8015c32:	f7fe f845 	bl	8013cc0 <_Bfree>
 8015c36:	464c      	mov	r4, r9
 8015c38:	6923      	ldr	r3, [r4, #16]
 8015c3a:	1c5a      	adds	r2, r3, #1
 8015c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c40:	6122      	str	r2, [r4, #16]
 8015c42:	2201      	movs	r2, #1
 8015c44:	615a      	str	r2, [r3, #20]
 8015c46:	e7be      	b.n	8015bc6 <__gethex+0x362>
 8015c48:	6922      	ldr	r2, [r4, #16]
 8015c4a:	455a      	cmp	r2, fp
 8015c4c:	dd0b      	ble.n	8015c66 <__gethex+0x402>
 8015c4e:	2101      	movs	r1, #1
 8015c50:	4620      	mov	r0, r4
 8015c52:	f7ff fd9f 	bl	8015794 <rshift>
 8015c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c5a:	3701      	adds	r7, #1
 8015c5c:	42bb      	cmp	r3, r7
 8015c5e:	f6ff aee0 	blt.w	8015a22 <__gethex+0x1be>
 8015c62:	2501      	movs	r5, #1
 8015c64:	e7c2      	b.n	8015bec <__gethex+0x388>
 8015c66:	f016 061f 	ands.w	r6, r6, #31
 8015c6a:	d0fa      	beq.n	8015c62 <__gethex+0x3fe>
 8015c6c:	4453      	add	r3, sl
 8015c6e:	f1c6 0620 	rsb	r6, r6, #32
 8015c72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015c76:	f7fe f8d5 	bl	8013e24 <__hi0bits>
 8015c7a:	42b0      	cmp	r0, r6
 8015c7c:	dbe7      	blt.n	8015c4e <__gethex+0x3ea>
 8015c7e:	e7f0      	b.n	8015c62 <__gethex+0x3fe>
 8015c80:	08018e51 	.word	0x08018e51

08015c84 <L_shift>:
 8015c84:	f1c2 0208 	rsb	r2, r2, #8
 8015c88:	0092      	lsls	r2, r2, #2
 8015c8a:	b570      	push	{r4, r5, r6, lr}
 8015c8c:	f1c2 0620 	rsb	r6, r2, #32
 8015c90:	6843      	ldr	r3, [r0, #4]
 8015c92:	6804      	ldr	r4, [r0, #0]
 8015c94:	fa03 f506 	lsl.w	r5, r3, r6
 8015c98:	432c      	orrs	r4, r5
 8015c9a:	40d3      	lsrs	r3, r2
 8015c9c:	6004      	str	r4, [r0, #0]
 8015c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ca2:	4288      	cmp	r0, r1
 8015ca4:	d3f4      	bcc.n	8015c90 <L_shift+0xc>
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <__match>:
 8015ca8:	b530      	push	{r4, r5, lr}
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	3301      	adds	r3, #1
 8015cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cb2:	b914      	cbnz	r4, 8015cba <__match+0x12>
 8015cb4:	6003      	str	r3, [r0, #0]
 8015cb6:	2001      	movs	r0, #1
 8015cb8:	bd30      	pop	{r4, r5, pc}
 8015cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015cc2:	2d19      	cmp	r5, #25
 8015cc4:	bf98      	it	ls
 8015cc6:	3220      	addls	r2, #32
 8015cc8:	42a2      	cmp	r2, r4
 8015cca:	d0f0      	beq.n	8015cae <__match+0x6>
 8015ccc:	2000      	movs	r0, #0
 8015cce:	e7f3      	b.n	8015cb8 <__match+0x10>

08015cd0 <__hexnan>:
 8015cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd4:	680b      	ldr	r3, [r1, #0]
 8015cd6:	6801      	ldr	r1, [r0, #0]
 8015cd8:	115e      	asrs	r6, r3, #5
 8015cda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015cde:	f013 031f 	ands.w	r3, r3, #31
 8015ce2:	b087      	sub	sp, #28
 8015ce4:	bf18      	it	ne
 8015ce6:	3604      	addne	r6, #4
 8015ce8:	2500      	movs	r5, #0
 8015cea:	1f37      	subs	r7, r6, #4
 8015cec:	4682      	mov	sl, r0
 8015cee:	4690      	mov	r8, r2
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8015cf6:	46b9      	mov	r9, r7
 8015cf8:	463c      	mov	r4, r7
 8015cfa:	9502      	str	r5, [sp, #8]
 8015cfc:	46ab      	mov	fp, r5
 8015cfe:	784a      	ldrb	r2, [r1, #1]
 8015d00:	1c4b      	adds	r3, r1, #1
 8015d02:	9303      	str	r3, [sp, #12]
 8015d04:	b342      	cbz	r2, 8015d58 <__hexnan+0x88>
 8015d06:	4610      	mov	r0, r2
 8015d08:	9105      	str	r1, [sp, #20]
 8015d0a:	9204      	str	r2, [sp, #16]
 8015d0c:	f7ff fd94 	bl	8015838 <__hexdig_fun>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d151      	bne.n	8015db8 <__hexnan+0xe8>
 8015d14:	9a04      	ldr	r2, [sp, #16]
 8015d16:	9905      	ldr	r1, [sp, #20]
 8015d18:	2a20      	cmp	r2, #32
 8015d1a:	d818      	bhi.n	8015d4e <__hexnan+0x7e>
 8015d1c:	9b02      	ldr	r3, [sp, #8]
 8015d1e:	459b      	cmp	fp, r3
 8015d20:	dd13      	ble.n	8015d4a <__hexnan+0x7a>
 8015d22:	454c      	cmp	r4, r9
 8015d24:	d206      	bcs.n	8015d34 <__hexnan+0x64>
 8015d26:	2d07      	cmp	r5, #7
 8015d28:	dc04      	bgt.n	8015d34 <__hexnan+0x64>
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4649      	mov	r1, r9
 8015d2e:	4620      	mov	r0, r4
 8015d30:	f7ff ffa8 	bl	8015c84 <L_shift>
 8015d34:	4544      	cmp	r4, r8
 8015d36:	d952      	bls.n	8015dde <__hexnan+0x10e>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8015d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d42:	f8cd b008 	str.w	fp, [sp, #8]
 8015d46:	464c      	mov	r4, r9
 8015d48:	461d      	mov	r5, r3
 8015d4a:	9903      	ldr	r1, [sp, #12]
 8015d4c:	e7d7      	b.n	8015cfe <__hexnan+0x2e>
 8015d4e:	2a29      	cmp	r2, #41	@ 0x29
 8015d50:	d157      	bne.n	8015e02 <__hexnan+0x132>
 8015d52:	3102      	adds	r1, #2
 8015d54:	f8ca 1000 	str.w	r1, [sl]
 8015d58:	f1bb 0f00 	cmp.w	fp, #0
 8015d5c:	d051      	beq.n	8015e02 <__hexnan+0x132>
 8015d5e:	454c      	cmp	r4, r9
 8015d60:	d206      	bcs.n	8015d70 <__hexnan+0xa0>
 8015d62:	2d07      	cmp	r5, #7
 8015d64:	dc04      	bgt.n	8015d70 <__hexnan+0xa0>
 8015d66:	462a      	mov	r2, r5
 8015d68:	4649      	mov	r1, r9
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f7ff ff8a 	bl	8015c84 <L_shift>
 8015d70:	4544      	cmp	r4, r8
 8015d72:	d936      	bls.n	8015de2 <__hexnan+0x112>
 8015d74:	f1a8 0204 	sub.w	r2, r8, #4
 8015d78:	4623      	mov	r3, r4
 8015d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8015d7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015d82:	429f      	cmp	r7, r3
 8015d84:	d2f9      	bcs.n	8015d7a <__hexnan+0xaa>
 8015d86:	1b3b      	subs	r3, r7, r4
 8015d88:	f023 0303 	bic.w	r3, r3, #3
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	3401      	adds	r4, #1
 8015d90:	3e03      	subs	r6, #3
 8015d92:	42b4      	cmp	r4, r6
 8015d94:	bf88      	it	hi
 8015d96:	2304      	movhi	r3, #4
 8015d98:	4443      	add	r3, r8
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	f843 2b04 	str.w	r2, [r3], #4
 8015da0:	429f      	cmp	r7, r3
 8015da2:	d2fb      	bcs.n	8015d9c <__hexnan+0xcc>
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	b91b      	cbnz	r3, 8015db0 <__hexnan+0xe0>
 8015da8:	4547      	cmp	r7, r8
 8015daa:	d128      	bne.n	8015dfe <__hexnan+0x12e>
 8015dac:	2301      	movs	r3, #1
 8015dae:	603b      	str	r3, [r7, #0]
 8015db0:	2005      	movs	r0, #5
 8015db2:	b007      	add	sp, #28
 8015db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015db8:	3501      	adds	r5, #1
 8015dba:	2d08      	cmp	r5, #8
 8015dbc:	f10b 0b01 	add.w	fp, fp, #1
 8015dc0:	dd06      	ble.n	8015dd0 <__hexnan+0x100>
 8015dc2:	4544      	cmp	r4, r8
 8015dc4:	d9c1      	bls.n	8015d4a <__hexnan+0x7a>
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8015dcc:	2501      	movs	r5, #1
 8015dce:	3c04      	subs	r4, #4
 8015dd0:	6822      	ldr	r2, [r4, #0]
 8015dd2:	f000 000f 	and.w	r0, r0, #15
 8015dd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015dda:	6020      	str	r0, [r4, #0]
 8015ddc:	e7b5      	b.n	8015d4a <__hexnan+0x7a>
 8015dde:	2508      	movs	r5, #8
 8015de0:	e7b3      	b.n	8015d4a <__hexnan+0x7a>
 8015de2:	9b01      	ldr	r3, [sp, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d0dd      	beq.n	8015da4 <__hexnan+0xd4>
 8015de8:	f1c3 0320 	rsb	r3, r3, #32
 8015dec:	f04f 32ff 	mov.w	r2, #4294967295
 8015df0:	40da      	lsrs	r2, r3
 8015df2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015df6:	4013      	ands	r3, r2
 8015df8:	f846 3c04 	str.w	r3, [r6, #-4]
 8015dfc:	e7d2      	b.n	8015da4 <__hexnan+0xd4>
 8015dfe:	3f04      	subs	r7, #4
 8015e00:	e7d0      	b.n	8015da4 <__hexnan+0xd4>
 8015e02:	2004      	movs	r0, #4
 8015e04:	e7d5      	b.n	8015db2 <__hexnan+0xe2>

08015e06 <__ascii_mbtowc>:
 8015e06:	b082      	sub	sp, #8
 8015e08:	b901      	cbnz	r1, 8015e0c <__ascii_mbtowc+0x6>
 8015e0a:	a901      	add	r1, sp, #4
 8015e0c:	b142      	cbz	r2, 8015e20 <__ascii_mbtowc+0x1a>
 8015e0e:	b14b      	cbz	r3, 8015e24 <__ascii_mbtowc+0x1e>
 8015e10:	7813      	ldrb	r3, [r2, #0]
 8015e12:	600b      	str	r3, [r1, #0]
 8015e14:	7812      	ldrb	r2, [r2, #0]
 8015e16:	1e10      	subs	r0, r2, #0
 8015e18:	bf18      	it	ne
 8015e1a:	2001      	movne	r0, #1
 8015e1c:	b002      	add	sp, #8
 8015e1e:	4770      	bx	lr
 8015e20:	4610      	mov	r0, r2
 8015e22:	e7fb      	b.n	8015e1c <__ascii_mbtowc+0x16>
 8015e24:	f06f 0001 	mvn.w	r0, #1
 8015e28:	e7f8      	b.n	8015e1c <__ascii_mbtowc+0x16>

08015e2a <_realloc_r>:
 8015e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2e:	4607      	mov	r7, r0
 8015e30:	4614      	mov	r4, r2
 8015e32:	460d      	mov	r5, r1
 8015e34:	b921      	cbnz	r1, 8015e40 <_realloc_r+0x16>
 8015e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3a:	4611      	mov	r1, r2
 8015e3c:	f7fd be74 	b.w	8013b28 <_malloc_r>
 8015e40:	b92a      	cbnz	r2, 8015e4e <_realloc_r+0x24>
 8015e42:	f7fd fdfd 	bl	8013a40 <_free_r>
 8015e46:	4625      	mov	r5, r4
 8015e48:	4628      	mov	r0, r5
 8015e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e4e:	f000 f840 	bl	8015ed2 <_malloc_usable_size_r>
 8015e52:	4284      	cmp	r4, r0
 8015e54:	4606      	mov	r6, r0
 8015e56:	d802      	bhi.n	8015e5e <_realloc_r+0x34>
 8015e58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e5c:	d8f4      	bhi.n	8015e48 <_realloc_r+0x1e>
 8015e5e:	4621      	mov	r1, r4
 8015e60:	4638      	mov	r0, r7
 8015e62:	f7fd fe61 	bl	8013b28 <_malloc_r>
 8015e66:	4680      	mov	r8, r0
 8015e68:	b908      	cbnz	r0, 8015e6e <_realloc_r+0x44>
 8015e6a:	4645      	mov	r5, r8
 8015e6c:	e7ec      	b.n	8015e48 <_realloc_r+0x1e>
 8015e6e:	42b4      	cmp	r4, r6
 8015e70:	4622      	mov	r2, r4
 8015e72:	4629      	mov	r1, r5
 8015e74:	bf28      	it	cs
 8015e76:	4632      	movcs	r2, r6
 8015e78:	f7fc ff75 	bl	8012d66 <memcpy>
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	4638      	mov	r0, r7
 8015e80:	f7fd fdde 	bl	8013a40 <_free_r>
 8015e84:	e7f1      	b.n	8015e6a <_realloc_r+0x40>

08015e86 <__ascii_wctomb>:
 8015e86:	4603      	mov	r3, r0
 8015e88:	4608      	mov	r0, r1
 8015e8a:	b141      	cbz	r1, 8015e9e <__ascii_wctomb+0x18>
 8015e8c:	2aff      	cmp	r2, #255	@ 0xff
 8015e8e:	d904      	bls.n	8015e9a <__ascii_wctomb+0x14>
 8015e90:	228a      	movs	r2, #138	@ 0x8a
 8015e92:	601a      	str	r2, [r3, #0]
 8015e94:	f04f 30ff 	mov.w	r0, #4294967295
 8015e98:	4770      	bx	lr
 8015e9a:	700a      	strb	r2, [r1, #0]
 8015e9c:	2001      	movs	r0, #1
 8015e9e:	4770      	bx	lr

08015ea0 <fiprintf>:
 8015ea0:	b40e      	push	{r1, r2, r3}
 8015ea2:	b503      	push	{r0, r1, lr}
 8015ea4:	4601      	mov	r1, r0
 8015ea6:	ab03      	add	r3, sp, #12
 8015ea8:	4805      	ldr	r0, [pc, #20]	@ (8015ec0 <fiprintf+0x20>)
 8015eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015eae:	6800      	ldr	r0, [r0, #0]
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	f000 f83f 	bl	8015f34 <_vfiprintf_r>
 8015eb6:	b002      	add	sp, #8
 8015eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ebc:	b003      	add	sp, #12
 8015ebe:	4770      	bx	lr
 8015ec0:	20000054 	.word	0x20000054

08015ec4 <abort>:
 8015ec4:	b508      	push	{r3, lr}
 8015ec6:	2006      	movs	r0, #6
 8015ec8:	f000 fa08 	bl	80162dc <raise>
 8015ecc:	2001      	movs	r0, #1
 8015ece:	f7ec fe69 	bl	8002ba4 <_exit>

08015ed2 <_malloc_usable_size_r>:
 8015ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ed6:	1f18      	subs	r0, r3, #4
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	bfbc      	itt	lt
 8015edc:	580b      	ldrlt	r3, [r1, r0]
 8015ede:	18c0      	addlt	r0, r0, r3
 8015ee0:	4770      	bx	lr

08015ee2 <__sfputc_r>:
 8015ee2:	6893      	ldr	r3, [r2, #8]
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	b410      	push	{r4}
 8015eea:	6093      	str	r3, [r2, #8]
 8015eec:	da08      	bge.n	8015f00 <__sfputc_r+0x1e>
 8015eee:	6994      	ldr	r4, [r2, #24]
 8015ef0:	42a3      	cmp	r3, r4
 8015ef2:	db01      	blt.n	8015ef8 <__sfputc_r+0x16>
 8015ef4:	290a      	cmp	r1, #10
 8015ef6:	d103      	bne.n	8015f00 <__sfputc_r+0x1e>
 8015ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015efc:	f000 b932 	b.w	8016164 <__swbuf_r>
 8015f00:	6813      	ldr	r3, [r2, #0]
 8015f02:	1c58      	adds	r0, r3, #1
 8015f04:	6010      	str	r0, [r2, #0]
 8015f06:	7019      	strb	r1, [r3, #0]
 8015f08:	4608      	mov	r0, r1
 8015f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f0e:	4770      	bx	lr

08015f10 <__sfputs_r>:
 8015f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f12:	4606      	mov	r6, r0
 8015f14:	460f      	mov	r7, r1
 8015f16:	4614      	mov	r4, r2
 8015f18:	18d5      	adds	r5, r2, r3
 8015f1a:	42ac      	cmp	r4, r5
 8015f1c:	d101      	bne.n	8015f22 <__sfputs_r+0x12>
 8015f1e:	2000      	movs	r0, #0
 8015f20:	e007      	b.n	8015f32 <__sfputs_r+0x22>
 8015f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f26:	463a      	mov	r2, r7
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ff ffda 	bl	8015ee2 <__sfputc_r>
 8015f2e:	1c43      	adds	r3, r0, #1
 8015f30:	d1f3      	bne.n	8015f1a <__sfputs_r+0xa>
 8015f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f34 <_vfiprintf_r>:
 8015f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f38:	460d      	mov	r5, r1
 8015f3a:	b09d      	sub	sp, #116	@ 0x74
 8015f3c:	4614      	mov	r4, r2
 8015f3e:	4698      	mov	r8, r3
 8015f40:	4606      	mov	r6, r0
 8015f42:	b118      	cbz	r0, 8015f4c <_vfiprintf_r+0x18>
 8015f44:	6a03      	ldr	r3, [r0, #32]
 8015f46:	b90b      	cbnz	r3, 8015f4c <_vfiprintf_r+0x18>
 8015f48:	f7fc fd5e 	bl	8012a08 <__sinit>
 8015f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f4e:	07d9      	lsls	r1, r3, #31
 8015f50:	d405      	bmi.n	8015f5e <_vfiprintf_r+0x2a>
 8015f52:	89ab      	ldrh	r3, [r5, #12]
 8015f54:	059a      	lsls	r2, r3, #22
 8015f56:	d402      	bmi.n	8015f5e <_vfiprintf_r+0x2a>
 8015f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f5a:	f7fc ff02 	bl	8012d62 <__retarget_lock_acquire_recursive>
 8015f5e:	89ab      	ldrh	r3, [r5, #12]
 8015f60:	071b      	lsls	r3, r3, #28
 8015f62:	d501      	bpl.n	8015f68 <_vfiprintf_r+0x34>
 8015f64:	692b      	ldr	r3, [r5, #16]
 8015f66:	b99b      	cbnz	r3, 8015f90 <_vfiprintf_r+0x5c>
 8015f68:	4629      	mov	r1, r5
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	f000 f938 	bl	80161e0 <__swsetup_r>
 8015f70:	b170      	cbz	r0, 8015f90 <_vfiprintf_r+0x5c>
 8015f72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f74:	07dc      	lsls	r4, r3, #31
 8015f76:	d504      	bpl.n	8015f82 <_vfiprintf_r+0x4e>
 8015f78:	f04f 30ff 	mov.w	r0, #4294967295
 8015f7c:	b01d      	add	sp, #116	@ 0x74
 8015f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f82:	89ab      	ldrh	r3, [r5, #12]
 8015f84:	0598      	lsls	r0, r3, #22
 8015f86:	d4f7      	bmi.n	8015f78 <_vfiprintf_r+0x44>
 8015f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f8a:	f7fc feeb 	bl	8012d64 <__retarget_lock_release_recursive>
 8015f8e:	e7f3      	b.n	8015f78 <_vfiprintf_r+0x44>
 8015f90:	2300      	movs	r3, #0
 8015f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f94:	2320      	movs	r3, #32
 8015f96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f9e:	2330      	movs	r3, #48	@ 0x30
 8015fa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016150 <_vfiprintf_r+0x21c>
 8015fa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015fa8:	f04f 0901 	mov.w	r9, #1
 8015fac:	4623      	mov	r3, r4
 8015fae:	469a      	mov	sl, r3
 8015fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fb4:	b10a      	cbz	r2, 8015fba <_vfiprintf_r+0x86>
 8015fb6:	2a25      	cmp	r2, #37	@ 0x25
 8015fb8:	d1f9      	bne.n	8015fae <_vfiprintf_r+0x7a>
 8015fba:	ebba 0b04 	subs.w	fp, sl, r4
 8015fbe:	d00b      	beq.n	8015fd8 <_vfiprintf_r+0xa4>
 8015fc0:	465b      	mov	r3, fp
 8015fc2:	4622      	mov	r2, r4
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	f7ff ffa2 	bl	8015f10 <__sfputs_r>
 8015fcc:	3001      	adds	r0, #1
 8015fce:	f000 80a7 	beq.w	8016120 <_vfiprintf_r+0x1ec>
 8015fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fd4:	445a      	add	r2, fp
 8015fd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f000 809f 	beq.w	8016120 <_vfiprintf_r+0x1ec>
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8015fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fec:	f10a 0a01 	add.w	sl, sl, #1
 8015ff0:	9304      	str	r3, [sp, #16]
 8015ff2:	9307      	str	r3, [sp, #28]
 8015ff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ff8:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ffa:	4654      	mov	r4, sl
 8015ffc:	2205      	movs	r2, #5
 8015ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016002:	4853      	ldr	r0, [pc, #332]	@ (8016150 <_vfiprintf_r+0x21c>)
 8016004:	f7ea f90c 	bl	8000220 <memchr>
 8016008:	9a04      	ldr	r2, [sp, #16]
 801600a:	b9d8      	cbnz	r0, 8016044 <_vfiprintf_r+0x110>
 801600c:	06d1      	lsls	r1, r2, #27
 801600e:	bf44      	itt	mi
 8016010:	2320      	movmi	r3, #32
 8016012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016016:	0713      	lsls	r3, r2, #28
 8016018:	bf44      	itt	mi
 801601a:	232b      	movmi	r3, #43	@ 0x2b
 801601c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016020:	f89a 3000 	ldrb.w	r3, [sl]
 8016024:	2b2a      	cmp	r3, #42	@ 0x2a
 8016026:	d015      	beq.n	8016054 <_vfiprintf_r+0x120>
 8016028:	9a07      	ldr	r2, [sp, #28]
 801602a:	4654      	mov	r4, sl
 801602c:	2000      	movs	r0, #0
 801602e:	f04f 0c0a 	mov.w	ip, #10
 8016032:	4621      	mov	r1, r4
 8016034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016038:	3b30      	subs	r3, #48	@ 0x30
 801603a:	2b09      	cmp	r3, #9
 801603c:	d94b      	bls.n	80160d6 <_vfiprintf_r+0x1a2>
 801603e:	b1b0      	cbz	r0, 801606e <_vfiprintf_r+0x13a>
 8016040:	9207      	str	r2, [sp, #28]
 8016042:	e014      	b.n	801606e <_vfiprintf_r+0x13a>
 8016044:	eba0 0308 	sub.w	r3, r0, r8
 8016048:	fa09 f303 	lsl.w	r3, r9, r3
 801604c:	4313      	orrs	r3, r2
 801604e:	9304      	str	r3, [sp, #16]
 8016050:	46a2      	mov	sl, r4
 8016052:	e7d2      	b.n	8015ffa <_vfiprintf_r+0xc6>
 8016054:	9b03      	ldr	r3, [sp, #12]
 8016056:	1d19      	adds	r1, r3, #4
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	9103      	str	r1, [sp, #12]
 801605c:	2b00      	cmp	r3, #0
 801605e:	bfbb      	ittet	lt
 8016060:	425b      	neglt	r3, r3
 8016062:	f042 0202 	orrlt.w	r2, r2, #2
 8016066:	9307      	strge	r3, [sp, #28]
 8016068:	9307      	strlt	r3, [sp, #28]
 801606a:	bfb8      	it	lt
 801606c:	9204      	strlt	r2, [sp, #16]
 801606e:	7823      	ldrb	r3, [r4, #0]
 8016070:	2b2e      	cmp	r3, #46	@ 0x2e
 8016072:	d10a      	bne.n	801608a <_vfiprintf_r+0x156>
 8016074:	7863      	ldrb	r3, [r4, #1]
 8016076:	2b2a      	cmp	r3, #42	@ 0x2a
 8016078:	d132      	bne.n	80160e0 <_vfiprintf_r+0x1ac>
 801607a:	9b03      	ldr	r3, [sp, #12]
 801607c:	1d1a      	adds	r2, r3, #4
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	9203      	str	r2, [sp, #12]
 8016082:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016086:	3402      	adds	r4, #2
 8016088:	9305      	str	r3, [sp, #20]
 801608a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016160 <_vfiprintf_r+0x22c>
 801608e:	7821      	ldrb	r1, [r4, #0]
 8016090:	2203      	movs	r2, #3
 8016092:	4650      	mov	r0, sl
 8016094:	f7ea f8c4 	bl	8000220 <memchr>
 8016098:	b138      	cbz	r0, 80160aa <_vfiprintf_r+0x176>
 801609a:	9b04      	ldr	r3, [sp, #16]
 801609c:	eba0 000a 	sub.w	r0, r0, sl
 80160a0:	2240      	movs	r2, #64	@ 0x40
 80160a2:	4082      	lsls	r2, r0
 80160a4:	4313      	orrs	r3, r2
 80160a6:	3401      	adds	r4, #1
 80160a8:	9304      	str	r3, [sp, #16]
 80160aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160ae:	4829      	ldr	r0, [pc, #164]	@ (8016154 <_vfiprintf_r+0x220>)
 80160b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160b4:	2206      	movs	r2, #6
 80160b6:	f7ea f8b3 	bl	8000220 <memchr>
 80160ba:	2800      	cmp	r0, #0
 80160bc:	d03f      	beq.n	801613e <_vfiprintf_r+0x20a>
 80160be:	4b26      	ldr	r3, [pc, #152]	@ (8016158 <_vfiprintf_r+0x224>)
 80160c0:	bb1b      	cbnz	r3, 801610a <_vfiprintf_r+0x1d6>
 80160c2:	9b03      	ldr	r3, [sp, #12]
 80160c4:	3307      	adds	r3, #7
 80160c6:	f023 0307 	bic.w	r3, r3, #7
 80160ca:	3308      	adds	r3, #8
 80160cc:	9303      	str	r3, [sp, #12]
 80160ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160d0:	443b      	add	r3, r7
 80160d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80160d4:	e76a      	b.n	8015fac <_vfiprintf_r+0x78>
 80160d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80160da:	460c      	mov	r4, r1
 80160dc:	2001      	movs	r0, #1
 80160de:	e7a8      	b.n	8016032 <_vfiprintf_r+0xfe>
 80160e0:	2300      	movs	r3, #0
 80160e2:	3401      	adds	r4, #1
 80160e4:	9305      	str	r3, [sp, #20]
 80160e6:	4619      	mov	r1, r3
 80160e8:	f04f 0c0a 	mov.w	ip, #10
 80160ec:	4620      	mov	r0, r4
 80160ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160f2:	3a30      	subs	r2, #48	@ 0x30
 80160f4:	2a09      	cmp	r2, #9
 80160f6:	d903      	bls.n	8016100 <_vfiprintf_r+0x1cc>
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d0c6      	beq.n	801608a <_vfiprintf_r+0x156>
 80160fc:	9105      	str	r1, [sp, #20]
 80160fe:	e7c4      	b.n	801608a <_vfiprintf_r+0x156>
 8016100:	fb0c 2101 	mla	r1, ip, r1, r2
 8016104:	4604      	mov	r4, r0
 8016106:	2301      	movs	r3, #1
 8016108:	e7f0      	b.n	80160ec <_vfiprintf_r+0x1b8>
 801610a:	ab03      	add	r3, sp, #12
 801610c:	9300      	str	r3, [sp, #0]
 801610e:	462a      	mov	r2, r5
 8016110:	4b12      	ldr	r3, [pc, #72]	@ (801615c <_vfiprintf_r+0x228>)
 8016112:	a904      	add	r1, sp, #16
 8016114:	4630      	mov	r0, r6
 8016116:	f7fb fe27 	bl	8011d68 <_printf_float>
 801611a:	4607      	mov	r7, r0
 801611c:	1c78      	adds	r0, r7, #1
 801611e:	d1d6      	bne.n	80160ce <_vfiprintf_r+0x19a>
 8016120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016122:	07d9      	lsls	r1, r3, #31
 8016124:	d405      	bmi.n	8016132 <_vfiprintf_r+0x1fe>
 8016126:	89ab      	ldrh	r3, [r5, #12]
 8016128:	059a      	lsls	r2, r3, #22
 801612a:	d402      	bmi.n	8016132 <_vfiprintf_r+0x1fe>
 801612c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801612e:	f7fc fe19 	bl	8012d64 <__retarget_lock_release_recursive>
 8016132:	89ab      	ldrh	r3, [r5, #12]
 8016134:	065b      	lsls	r3, r3, #25
 8016136:	f53f af1f 	bmi.w	8015f78 <_vfiprintf_r+0x44>
 801613a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801613c:	e71e      	b.n	8015f7c <_vfiprintf_r+0x48>
 801613e:	ab03      	add	r3, sp, #12
 8016140:	9300      	str	r3, [sp, #0]
 8016142:	462a      	mov	r2, r5
 8016144:	4b05      	ldr	r3, [pc, #20]	@ (801615c <_vfiprintf_r+0x228>)
 8016146:	a904      	add	r1, sp, #16
 8016148:	4630      	mov	r0, r6
 801614a:	f7fc f8a5 	bl	8012298 <_printf_i>
 801614e:	e7e4      	b.n	801611a <_vfiprintf_r+0x1e6>
 8016150:	08018ebd 	.word	0x08018ebd
 8016154:	08018ec7 	.word	0x08018ec7
 8016158:	08011d69 	.word	0x08011d69
 801615c:	08015f11 	.word	0x08015f11
 8016160:	08018ec3 	.word	0x08018ec3

08016164 <__swbuf_r>:
 8016164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016166:	460e      	mov	r6, r1
 8016168:	4614      	mov	r4, r2
 801616a:	4605      	mov	r5, r0
 801616c:	b118      	cbz	r0, 8016176 <__swbuf_r+0x12>
 801616e:	6a03      	ldr	r3, [r0, #32]
 8016170:	b90b      	cbnz	r3, 8016176 <__swbuf_r+0x12>
 8016172:	f7fc fc49 	bl	8012a08 <__sinit>
 8016176:	69a3      	ldr	r3, [r4, #24]
 8016178:	60a3      	str	r3, [r4, #8]
 801617a:	89a3      	ldrh	r3, [r4, #12]
 801617c:	071a      	lsls	r2, r3, #28
 801617e:	d501      	bpl.n	8016184 <__swbuf_r+0x20>
 8016180:	6923      	ldr	r3, [r4, #16]
 8016182:	b943      	cbnz	r3, 8016196 <__swbuf_r+0x32>
 8016184:	4621      	mov	r1, r4
 8016186:	4628      	mov	r0, r5
 8016188:	f000 f82a 	bl	80161e0 <__swsetup_r>
 801618c:	b118      	cbz	r0, 8016196 <__swbuf_r+0x32>
 801618e:	f04f 37ff 	mov.w	r7, #4294967295
 8016192:	4638      	mov	r0, r7
 8016194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016196:	6823      	ldr	r3, [r4, #0]
 8016198:	6922      	ldr	r2, [r4, #16]
 801619a:	1a98      	subs	r0, r3, r2
 801619c:	6963      	ldr	r3, [r4, #20]
 801619e:	b2f6      	uxtb	r6, r6
 80161a0:	4283      	cmp	r3, r0
 80161a2:	4637      	mov	r7, r6
 80161a4:	dc05      	bgt.n	80161b2 <__swbuf_r+0x4e>
 80161a6:	4621      	mov	r1, r4
 80161a8:	4628      	mov	r0, r5
 80161aa:	f7ff fa53 	bl	8015654 <_fflush_r>
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d1ed      	bne.n	801618e <__swbuf_r+0x2a>
 80161b2:	68a3      	ldr	r3, [r4, #8]
 80161b4:	3b01      	subs	r3, #1
 80161b6:	60a3      	str	r3, [r4, #8]
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	6022      	str	r2, [r4, #0]
 80161be:	701e      	strb	r6, [r3, #0]
 80161c0:	6962      	ldr	r2, [r4, #20]
 80161c2:	1c43      	adds	r3, r0, #1
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d004      	beq.n	80161d2 <__swbuf_r+0x6e>
 80161c8:	89a3      	ldrh	r3, [r4, #12]
 80161ca:	07db      	lsls	r3, r3, #31
 80161cc:	d5e1      	bpl.n	8016192 <__swbuf_r+0x2e>
 80161ce:	2e0a      	cmp	r6, #10
 80161d0:	d1df      	bne.n	8016192 <__swbuf_r+0x2e>
 80161d2:	4621      	mov	r1, r4
 80161d4:	4628      	mov	r0, r5
 80161d6:	f7ff fa3d 	bl	8015654 <_fflush_r>
 80161da:	2800      	cmp	r0, #0
 80161dc:	d0d9      	beq.n	8016192 <__swbuf_r+0x2e>
 80161de:	e7d6      	b.n	801618e <__swbuf_r+0x2a>

080161e0 <__swsetup_r>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4b29      	ldr	r3, [pc, #164]	@ (8016288 <__swsetup_r+0xa8>)
 80161e4:	4605      	mov	r5, r0
 80161e6:	6818      	ldr	r0, [r3, #0]
 80161e8:	460c      	mov	r4, r1
 80161ea:	b118      	cbz	r0, 80161f4 <__swsetup_r+0x14>
 80161ec:	6a03      	ldr	r3, [r0, #32]
 80161ee:	b90b      	cbnz	r3, 80161f4 <__swsetup_r+0x14>
 80161f0:	f7fc fc0a 	bl	8012a08 <__sinit>
 80161f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161f8:	0719      	lsls	r1, r3, #28
 80161fa:	d422      	bmi.n	8016242 <__swsetup_r+0x62>
 80161fc:	06da      	lsls	r2, r3, #27
 80161fe:	d407      	bmi.n	8016210 <__swsetup_r+0x30>
 8016200:	2209      	movs	r2, #9
 8016202:	602a      	str	r2, [r5, #0]
 8016204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016208:	81a3      	strh	r3, [r4, #12]
 801620a:	f04f 30ff 	mov.w	r0, #4294967295
 801620e:	e033      	b.n	8016278 <__swsetup_r+0x98>
 8016210:	0758      	lsls	r0, r3, #29
 8016212:	d512      	bpl.n	801623a <__swsetup_r+0x5a>
 8016214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016216:	b141      	cbz	r1, 801622a <__swsetup_r+0x4a>
 8016218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801621c:	4299      	cmp	r1, r3
 801621e:	d002      	beq.n	8016226 <__swsetup_r+0x46>
 8016220:	4628      	mov	r0, r5
 8016222:	f7fd fc0d 	bl	8013a40 <_free_r>
 8016226:	2300      	movs	r3, #0
 8016228:	6363      	str	r3, [r4, #52]	@ 0x34
 801622a:	89a3      	ldrh	r3, [r4, #12]
 801622c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016230:	81a3      	strh	r3, [r4, #12]
 8016232:	2300      	movs	r3, #0
 8016234:	6063      	str	r3, [r4, #4]
 8016236:	6923      	ldr	r3, [r4, #16]
 8016238:	6023      	str	r3, [r4, #0]
 801623a:	89a3      	ldrh	r3, [r4, #12]
 801623c:	f043 0308 	orr.w	r3, r3, #8
 8016240:	81a3      	strh	r3, [r4, #12]
 8016242:	6923      	ldr	r3, [r4, #16]
 8016244:	b94b      	cbnz	r3, 801625a <__swsetup_r+0x7a>
 8016246:	89a3      	ldrh	r3, [r4, #12]
 8016248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801624c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016250:	d003      	beq.n	801625a <__swsetup_r+0x7a>
 8016252:	4621      	mov	r1, r4
 8016254:	4628      	mov	r0, r5
 8016256:	f000 f883 	bl	8016360 <__smakebuf_r>
 801625a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801625e:	f013 0201 	ands.w	r2, r3, #1
 8016262:	d00a      	beq.n	801627a <__swsetup_r+0x9a>
 8016264:	2200      	movs	r2, #0
 8016266:	60a2      	str	r2, [r4, #8]
 8016268:	6962      	ldr	r2, [r4, #20]
 801626a:	4252      	negs	r2, r2
 801626c:	61a2      	str	r2, [r4, #24]
 801626e:	6922      	ldr	r2, [r4, #16]
 8016270:	b942      	cbnz	r2, 8016284 <__swsetup_r+0xa4>
 8016272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016276:	d1c5      	bne.n	8016204 <__swsetup_r+0x24>
 8016278:	bd38      	pop	{r3, r4, r5, pc}
 801627a:	0799      	lsls	r1, r3, #30
 801627c:	bf58      	it	pl
 801627e:	6962      	ldrpl	r2, [r4, #20]
 8016280:	60a2      	str	r2, [r4, #8]
 8016282:	e7f4      	b.n	801626e <__swsetup_r+0x8e>
 8016284:	2000      	movs	r0, #0
 8016286:	e7f7      	b.n	8016278 <__swsetup_r+0x98>
 8016288:	20000054 	.word	0x20000054

0801628c <_raise_r>:
 801628c:	291f      	cmp	r1, #31
 801628e:	b538      	push	{r3, r4, r5, lr}
 8016290:	4605      	mov	r5, r0
 8016292:	460c      	mov	r4, r1
 8016294:	d904      	bls.n	80162a0 <_raise_r+0x14>
 8016296:	2316      	movs	r3, #22
 8016298:	6003      	str	r3, [r0, #0]
 801629a:	f04f 30ff 	mov.w	r0, #4294967295
 801629e:	bd38      	pop	{r3, r4, r5, pc}
 80162a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80162a2:	b112      	cbz	r2, 80162aa <_raise_r+0x1e>
 80162a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162a8:	b94b      	cbnz	r3, 80162be <_raise_r+0x32>
 80162aa:	4628      	mov	r0, r5
 80162ac:	f000 f830 	bl	8016310 <_getpid_r>
 80162b0:	4622      	mov	r2, r4
 80162b2:	4601      	mov	r1, r0
 80162b4:	4628      	mov	r0, r5
 80162b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162ba:	f000 b817 	b.w	80162ec <_kill_r>
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d00a      	beq.n	80162d8 <_raise_r+0x4c>
 80162c2:	1c59      	adds	r1, r3, #1
 80162c4:	d103      	bne.n	80162ce <_raise_r+0x42>
 80162c6:	2316      	movs	r3, #22
 80162c8:	6003      	str	r3, [r0, #0]
 80162ca:	2001      	movs	r0, #1
 80162cc:	e7e7      	b.n	801629e <_raise_r+0x12>
 80162ce:	2100      	movs	r1, #0
 80162d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80162d4:	4620      	mov	r0, r4
 80162d6:	4798      	blx	r3
 80162d8:	2000      	movs	r0, #0
 80162da:	e7e0      	b.n	801629e <_raise_r+0x12>

080162dc <raise>:
 80162dc:	4b02      	ldr	r3, [pc, #8]	@ (80162e8 <raise+0xc>)
 80162de:	4601      	mov	r1, r0
 80162e0:	6818      	ldr	r0, [r3, #0]
 80162e2:	f7ff bfd3 	b.w	801628c <_raise_r>
 80162e6:	bf00      	nop
 80162e8:	20000054 	.word	0x20000054

080162ec <_kill_r>:
 80162ec:	b538      	push	{r3, r4, r5, lr}
 80162ee:	4d07      	ldr	r5, [pc, #28]	@ (801630c <_kill_r+0x20>)
 80162f0:	2300      	movs	r3, #0
 80162f2:	4604      	mov	r4, r0
 80162f4:	4608      	mov	r0, r1
 80162f6:	4611      	mov	r1, r2
 80162f8:	602b      	str	r3, [r5, #0]
 80162fa:	f7ec fc43 	bl	8002b84 <_kill>
 80162fe:	1c43      	adds	r3, r0, #1
 8016300:	d102      	bne.n	8016308 <_kill_r+0x1c>
 8016302:	682b      	ldr	r3, [r5, #0]
 8016304:	b103      	cbz	r3, 8016308 <_kill_r+0x1c>
 8016306:	6023      	str	r3, [r4, #0]
 8016308:	bd38      	pop	{r3, r4, r5, pc}
 801630a:	bf00      	nop
 801630c:	200049fc 	.word	0x200049fc

08016310 <_getpid_r>:
 8016310:	f7ec bc30 	b.w	8002b74 <_getpid>

08016314 <__swhatbuf_r>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	460c      	mov	r4, r1
 8016318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801631c:	2900      	cmp	r1, #0
 801631e:	b096      	sub	sp, #88	@ 0x58
 8016320:	4615      	mov	r5, r2
 8016322:	461e      	mov	r6, r3
 8016324:	da0d      	bge.n	8016342 <__swhatbuf_r+0x2e>
 8016326:	89a3      	ldrh	r3, [r4, #12]
 8016328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801632c:	f04f 0100 	mov.w	r1, #0
 8016330:	bf14      	ite	ne
 8016332:	2340      	movne	r3, #64	@ 0x40
 8016334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016338:	2000      	movs	r0, #0
 801633a:	6031      	str	r1, [r6, #0]
 801633c:	602b      	str	r3, [r5, #0]
 801633e:	b016      	add	sp, #88	@ 0x58
 8016340:	bd70      	pop	{r4, r5, r6, pc}
 8016342:	466a      	mov	r2, sp
 8016344:	f000 f848 	bl	80163d8 <_fstat_r>
 8016348:	2800      	cmp	r0, #0
 801634a:	dbec      	blt.n	8016326 <__swhatbuf_r+0x12>
 801634c:	9901      	ldr	r1, [sp, #4]
 801634e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016356:	4259      	negs	r1, r3
 8016358:	4159      	adcs	r1, r3
 801635a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801635e:	e7eb      	b.n	8016338 <__swhatbuf_r+0x24>

08016360 <__smakebuf_r>:
 8016360:	898b      	ldrh	r3, [r1, #12]
 8016362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016364:	079d      	lsls	r5, r3, #30
 8016366:	4606      	mov	r6, r0
 8016368:	460c      	mov	r4, r1
 801636a:	d507      	bpl.n	801637c <__smakebuf_r+0x1c>
 801636c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016370:	6023      	str	r3, [r4, #0]
 8016372:	6123      	str	r3, [r4, #16]
 8016374:	2301      	movs	r3, #1
 8016376:	6163      	str	r3, [r4, #20]
 8016378:	b003      	add	sp, #12
 801637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801637c:	ab01      	add	r3, sp, #4
 801637e:	466a      	mov	r2, sp
 8016380:	f7ff ffc8 	bl	8016314 <__swhatbuf_r>
 8016384:	9f00      	ldr	r7, [sp, #0]
 8016386:	4605      	mov	r5, r0
 8016388:	4639      	mov	r1, r7
 801638a:	4630      	mov	r0, r6
 801638c:	f7fd fbcc 	bl	8013b28 <_malloc_r>
 8016390:	b948      	cbnz	r0, 80163a6 <__smakebuf_r+0x46>
 8016392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016396:	059a      	lsls	r2, r3, #22
 8016398:	d4ee      	bmi.n	8016378 <__smakebuf_r+0x18>
 801639a:	f023 0303 	bic.w	r3, r3, #3
 801639e:	f043 0302 	orr.w	r3, r3, #2
 80163a2:	81a3      	strh	r3, [r4, #12]
 80163a4:	e7e2      	b.n	801636c <__smakebuf_r+0xc>
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	6020      	str	r0, [r4, #0]
 80163aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163ae:	81a3      	strh	r3, [r4, #12]
 80163b0:	9b01      	ldr	r3, [sp, #4]
 80163b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80163b6:	b15b      	cbz	r3, 80163d0 <__smakebuf_r+0x70>
 80163b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163bc:	4630      	mov	r0, r6
 80163be:	f000 f81d 	bl	80163fc <_isatty_r>
 80163c2:	b128      	cbz	r0, 80163d0 <__smakebuf_r+0x70>
 80163c4:	89a3      	ldrh	r3, [r4, #12]
 80163c6:	f023 0303 	bic.w	r3, r3, #3
 80163ca:	f043 0301 	orr.w	r3, r3, #1
 80163ce:	81a3      	strh	r3, [r4, #12]
 80163d0:	89a3      	ldrh	r3, [r4, #12]
 80163d2:	431d      	orrs	r5, r3
 80163d4:	81a5      	strh	r5, [r4, #12]
 80163d6:	e7cf      	b.n	8016378 <__smakebuf_r+0x18>

080163d8 <_fstat_r>:
 80163d8:	b538      	push	{r3, r4, r5, lr}
 80163da:	4d07      	ldr	r5, [pc, #28]	@ (80163f8 <_fstat_r+0x20>)
 80163dc:	2300      	movs	r3, #0
 80163de:	4604      	mov	r4, r0
 80163e0:	4608      	mov	r0, r1
 80163e2:	4611      	mov	r1, r2
 80163e4:	602b      	str	r3, [r5, #0]
 80163e6:	f7ec fc2d 	bl	8002c44 <_fstat>
 80163ea:	1c43      	adds	r3, r0, #1
 80163ec:	d102      	bne.n	80163f4 <_fstat_r+0x1c>
 80163ee:	682b      	ldr	r3, [r5, #0]
 80163f0:	b103      	cbz	r3, 80163f4 <_fstat_r+0x1c>
 80163f2:	6023      	str	r3, [r4, #0]
 80163f4:	bd38      	pop	{r3, r4, r5, pc}
 80163f6:	bf00      	nop
 80163f8:	200049fc 	.word	0x200049fc

080163fc <_isatty_r>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	4d06      	ldr	r5, [pc, #24]	@ (8016418 <_isatty_r+0x1c>)
 8016400:	2300      	movs	r3, #0
 8016402:	4604      	mov	r4, r0
 8016404:	4608      	mov	r0, r1
 8016406:	602b      	str	r3, [r5, #0]
 8016408:	f7ec fc2c 	bl	8002c64 <_isatty>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	d102      	bne.n	8016416 <_isatty_r+0x1a>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	b103      	cbz	r3, 8016416 <_isatty_r+0x1a>
 8016414:	6023      	str	r3, [r4, #0]
 8016416:	bd38      	pop	{r3, r4, r5, pc}
 8016418:	200049fc 	.word	0x200049fc

0801641c <powf>:
 801641c:	b508      	push	{r3, lr}
 801641e:	ed2d 8b04 	vpush	{d8-d9}
 8016422:	eeb0 8a60 	vmov.f32	s16, s1
 8016426:	eeb0 9a40 	vmov.f32	s18, s0
 801642a:	f000 f859 	bl	80164e0 <__ieee754_powf>
 801642e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016436:	eef0 8a40 	vmov.f32	s17, s0
 801643a:	d63e      	bvs.n	80164ba <powf+0x9e>
 801643c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016444:	d112      	bne.n	801646c <powf+0x50>
 8016446:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644e:	d039      	beq.n	80164c4 <powf+0xa8>
 8016450:	eeb0 0a48 	vmov.f32	s0, s16
 8016454:	f000 f839 	bl	80164ca <finitef>
 8016458:	b378      	cbz	r0, 80164ba <powf+0x9e>
 801645a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016462:	d52a      	bpl.n	80164ba <powf+0x9e>
 8016464:	f7fc fc52 	bl	8012d0c <__errno>
 8016468:	2322      	movs	r3, #34	@ 0x22
 801646a:	e014      	b.n	8016496 <powf+0x7a>
 801646c:	f000 f82d 	bl	80164ca <finitef>
 8016470:	b998      	cbnz	r0, 801649a <powf+0x7e>
 8016472:	eeb0 0a49 	vmov.f32	s0, s18
 8016476:	f000 f828 	bl	80164ca <finitef>
 801647a:	b170      	cbz	r0, 801649a <powf+0x7e>
 801647c:	eeb0 0a48 	vmov.f32	s0, s16
 8016480:	f000 f823 	bl	80164ca <finitef>
 8016484:	b148      	cbz	r0, 801649a <powf+0x7e>
 8016486:	eef4 8a68 	vcmp.f32	s17, s17
 801648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801648e:	d7e9      	bvc.n	8016464 <powf+0x48>
 8016490:	f7fc fc3c 	bl	8012d0c <__errno>
 8016494:	2321      	movs	r3, #33	@ 0x21
 8016496:	6003      	str	r3, [r0, #0]
 8016498:	e00f      	b.n	80164ba <powf+0x9e>
 801649a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a2:	d10a      	bne.n	80164ba <powf+0x9e>
 80164a4:	eeb0 0a49 	vmov.f32	s0, s18
 80164a8:	f000 f80f 	bl	80164ca <finitef>
 80164ac:	b128      	cbz	r0, 80164ba <powf+0x9e>
 80164ae:	eeb0 0a48 	vmov.f32	s0, s16
 80164b2:	f000 f80a 	bl	80164ca <finitef>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d1d4      	bne.n	8016464 <powf+0x48>
 80164ba:	eeb0 0a68 	vmov.f32	s0, s17
 80164be:	ecbd 8b04 	vpop	{d8-d9}
 80164c2:	bd08      	pop	{r3, pc}
 80164c4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80164c8:	e7f7      	b.n	80164ba <powf+0x9e>

080164ca <finitef>:
 80164ca:	ee10 3a10 	vmov	r3, s0
 80164ce:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80164d2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80164d6:	bfac      	ite	ge
 80164d8:	2000      	movge	r0, #0
 80164da:	2001      	movlt	r0, #1
 80164dc:	4770      	bx	lr
	...

080164e0 <__ieee754_powf>:
 80164e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164e4:	ee10 4a90 	vmov	r4, s1
 80164e8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80164ec:	ed2d 8b02 	vpush	{d8}
 80164f0:	ee10 6a10 	vmov	r6, s0
 80164f4:	eeb0 8a40 	vmov.f32	s16, s0
 80164f8:	eef0 8a60 	vmov.f32	s17, s1
 80164fc:	d10c      	bne.n	8016518 <__ieee754_powf+0x38>
 80164fe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8016502:	0076      	lsls	r6, r6, #1
 8016504:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8016508:	f240 8274 	bls.w	80169f4 <__ieee754_powf+0x514>
 801650c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8016510:	ecbd 8b02 	vpop	{d8}
 8016514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016518:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801651c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8016520:	d802      	bhi.n	8016528 <__ieee754_powf+0x48>
 8016522:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8016526:	d908      	bls.n	801653a <__ieee754_powf+0x5a>
 8016528:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801652c:	d1ee      	bne.n	801650c <__ieee754_powf+0x2c>
 801652e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8016532:	0064      	lsls	r4, r4, #1
 8016534:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8016538:	e7e6      	b.n	8016508 <__ieee754_powf+0x28>
 801653a:	2e00      	cmp	r6, #0
 801653c:	da1f      	bge.n	801657e <__ieee754_powf+0x9e>
 801653e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8016542:	f080 8260 	bcs.w	8016a06 <__ieee754_powf+0x526>
 8016546:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801654a:	d32f      	bcc.n	80165ac <__ieee754_powf+0xcc>
 801654c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8016550:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8016554:	fa49 f503 	asr.w	r5, r9, r3
 8016558:	fa05 f303 	lsl.w	r3, r5, r3
 801655c:	454b      	cmp	r3, r9
 801655e:	d123      	bne.n	80165a8 <__ieee754_powf+0xc8>
 8016560:	f005 0501 	and.w	r5, r5, #1
 8016564:	f1c5 0502 	rsb	r5, r5, #2
 8016568:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801656c:	d11f      	bne.n	80165ae <__ieee754_powf+0xce>
 801656e:	2c00      	cmp	r4, #0
 8016570:	f280 8246 	bge.w	8016a00 <__ieee754_powf+0x520>
 8016574:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016578:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801657c:	e7c8      	b.n	8016510 <__ieee754_powf+0x30>
 801657e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8016582:	d111      	bne.n	80165a8 <__ieee754_powf+0xc8>
 8016584:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8016588:	f000 8234 	beq.w	80169f4 <__ieee754_powf+0x514>
 801658c:	d906      	bls.n	801659c <__ieee754_powf+0xbc>
 801658e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80168a4 <__ieee754_powf+0x3c4>
 8016592:	2c00      	cmp	r4, #0
 8016594:	bfa8      	it	ge
 8016596:	eeb0 0a68 	vmovge.f32	s0, s17
 801659a:	e7b9      	b.n	8016510 <__ieee754_powf+0x30>
 801659c:	2c00      	cmp	r4, #0
 801659e:	f280 822c 	bge.w	80169fa <__ieee754_powf+0x51a>
 80165a2:	eeb1 0a68 	vneg.f32	s0, s17
 80165a6:	e7b3      	b.n	8016510 <__ieee754_powf+0x30>
 80165a8:	2500      	movs	r5, #0
 80165aa:	e7dd      	b.n	8016568 <__ieee754_powf+0x88>
 80165ac:	2500      	movs	r5, #0
 80165ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80165b2:	d102      	bne.n	80165ba <__ieee754_powf+0xda>
 80165b4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80165b8:	e7aa      	b.n	8016510 <__ieee754_powf+0x30>
 80165ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80165be:	f040 8227 	bne.w	8016a10 <__ieee754_powf+0x530>
 80165c2:	2e00      	cmp	r6, #0
 80165c4:	f2c0 8224 	blt.w	8016a10 <__ieee754_powf+0x530>
 80165c8:	eeb0 0a48 	vmov.f32	s0, s16
 80165cc:	ecbd 8b02 	vpop	{d8}
 80165d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165d4:	f000 bae6 	b.w	8016ba4 <__ieee754_sqrtf>
 80165d8:	2d01      	cmp	r5, #1
 80165da:	d199      	bne.n	8016510 <__ieee754_powf+0x30>
 80165dc:	eeb1 0a40 	vneg.f32	s0, s0
 80165e0:	e796      	b.n	8016510 <__ieee754_powf+0x30>
 80165e2:	0ff0      	lsrs	r0, r6, #31
 80165e4:	3801      	subs	r0, #1
 80165e6:	ea55 0300 	orrs.w	r3, r5, r0
 80165ea:	d104      	bne.n	80165f6 <__ieee754_powf+0x116>
 80165ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 80165f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80165f4:	e78c      	b.n	8016510 <__ieee754_powf+0x30>
 80165f6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80165fa:	d96d      	bls.n	80166d8 <__ieee754_powf+0x1f8>
 80165fc:	4baa      	ldr	r3, [pc, #680]	@ (80168a8 <__ieee754_powf+0x3c8>)
 80165fe:	4598      	cmp	r8, r3
 8016600:	d808      	bhi.n	8016614 <__ieee754_powf+0x134>
 8016602:	2c00      	cmp	r4, #0
 8016604:	da0b      	bge.n	801661e <__ieee754_powf+0x13e>
 8016606:	2000      	movs	r0, #0
 8016608:	ecbd 8b02 	vpop	{d8}
 801660c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016610:	f000 bac2 	b.w	8016b98 <__math_oflowf>
 8016614:	4ba5      	ldr	r3, [pc, #660]	@ (80168ac <__ieee754_powf+0x3cc>)
 8016616:	4598      	cmp	r8, r3
 8016618:	d908      	bls.n	801662c <__ieee754_powf+0x14c>
 801661a:	2c00      	cmp	r4, #0
 801661c:	dcf3      	bgt.n	8016606 <__ieee754_powf+0x126>
 801661e:	2000      	movs	r0, #0
 8016620:	ecbd 8b02 	vpop	{d8}
 8016624:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016628:	f000 bab0 	b.w	8016b8c <__math_uflowf>
 801662c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016630:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016634:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80168b0 <__ieee754_powf+0x3d0>
 8016638:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801663c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8016640:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016644:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8016648:	ee20 7a00 	vmul.f32	s14, s0, s0
 801664c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80168b4 <__ieee754_powf+0x3d4>
 8016650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016654:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80168b8 <__ieee754_powf+0x3d8>
 8016658:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801665c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80168bc <__ieee754_powf+0x3dc>
 8016660:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016664:	eeb0 7a67 	vmov.f32	s14, s15
 8016668:	eea0 7a26 	vfma.f32	s14, s0, s13
 801666c:	ee17 3a10 	vmov	r3, s14
 8016670:	f36f 030b 	bfc	r3, #0, #12
 8016674:	ee07 3a10 	vmov	s14, r3
 8016678:	eeb0 6a47 	vmov.f32	s12, s14
 801667c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8016680:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016684:	3d01      	subs	r5, #1
 8016686:	4305      	orrs	r5, r0
 8016688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801668c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8016690:	f36f 040b 	bfc	r4, #0, #12
 8016694:	bf18      	it	ne
 8016696:	eeb0 8a66 	vmovne.f32	s16, s13
 801669a:	ee06 4a90 	vmov	s13, r4
 801669e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80166a2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80166a6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80166aa:	eee6 0a07 	vfma.f32	s1, s12, s14
 80166ae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80166b2:	ee17 1a10 	vmov	r1, s14
 80166b6:	2900      	cmp	r1, #0
 80166b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80166bc:	f340 80dd 	ble.w	801687a <__ieee754_powf+0x39a>
 80166c0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80166c4:	f240 80ca 	bls.w	801685c <__ieee754_powf+0x37c>
 80166c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80166cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d0:	bf4c      	ite	mi
 80166d2:	2001      	movmi	r0, #1
 80166d4:	2000      	movpl	r0, #0
 80166d6:	e797      	b.n	8016608 <__ieee754_powf+0x128>
 80166d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80166dc:	bf01      	itttt	eq
 80166de:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80168c0 <__ieee754_powf+0x3e0>
 80166e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80166e6:	f06f 0317 	mvneq.w	r3, #23
 80166ea:	ee17 7a90 	vmoveq	r7, s15
 80166ee:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80166f2:	bf18      	it	ne
 80166f4:	2300      	movne	r3, #0
 80166f6:	3a7f      	subs	r2, #127	@ 0x7f
 80166f8:	441a      	add	r2, r3
 80166fa:	4b72      	ldr	r3, [pc, #456]	@ (80168c4 <__ieee754_powf+0x3e4>)
 80166fc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8016700:	429f      	cmp	r7, r3
 8016702:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8016706:	dd06      	ble.n	8016716 <__ieee754_powf+0x236>
 8016708:	4b6f      	ldr	r3, [pc, #444]	@ (80168c8 <__ieee754_powf+0x3e8>)
 801670a:	429f      	cmp	r7, r3
 801670c:	f340 80a4 	ble.w	8016858 <__ieee754_powf+0x378>
 8016710:	3201      	adds	r2, #1
 8016712:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8016716:	2600      	movs	r6, #0
 8016718:	4b6c      	ldr	r3, [pc, #432]	@ (80168cc <__ieee754_powf+0x3ec>)
 801671a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801671e:	ee07 1a10 	vmov	s14, r1
 8016722:	edd3 5a00 	vldr	s11, [r3]
 8016726:	4b6a      	ldr	r3, [pc, #424]	@ (80168d0 <__ieee754_powf+0x3f0>)
 8016728:	ee75 7a87 	vadd.f32	s15, s11, s14
 801672c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016730:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8016734:	1049      	asrs	r1, r1, #1
 8016736:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801673a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801673e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8016742:	ee37 6a65 	vsub.f32	s12, s14, s11
 8016746:	ee07 1a90 	vmov	s15, r1
 801674a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801674e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8016752:	ee15 7a10 	vmov	r7, s10
 8016756:	401f      	ands	r7, r3
 8016758:	ee06 7a90 	vmov	s13, r7
 801675c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8016760:	ee37 7a65 	vsub.f32	s14, s14, s11
 8016764:	ee65 7a05 	vmul.f32	s15, s10, s10
 8016768:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801676c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80168d4 <__ieee754_powf+0x3f4>
 8016770:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80168d8 <__ieee754_powf+0x3f8>
 8016774:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016778:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80168dc <__ieee754_powf+0x3fc>
 801677c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016780:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80168b0 <__ieee754_powf+0x3d0>
 8016784:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016788:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80168e0 <__ieee754_powf+0x400>
 801678c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016790:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80168e4 <__ieee754_powf+0x404>
 8016794:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016798:	eee7 5a27 	vfma.f32	s11, s14, s15
 801679c:	ee35 7a26 	vadd.f32	s14, s10, s13
 80167a0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80167a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80167a8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80167ac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80167b0:	eef0 5a67 	vmov.f32	s11, s15
 80167b4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80167b8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80167bc:	ee15 1a90 	vmov	r1, s11
 80167c0:	4019      	ands	r1, r3
 80167c2:	ee05 1a90 	vmov	s11, r1
 80167c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80167ca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80167ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80167d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80167da:	eeb0 6a67 	vmov.f32	s12, s15
 80167de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80167e2:	ee16 1a10 	vmov	r1, s12
 80167e6:	4019      	ands	r1, r3
 80167e8:	ee06 1a10 	vmov	s12, r1
 80167ec:	eeb0 7a46 	vmov.f32	s14, s12
 80167f0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80167f4:	493c      	ldr	r1, [pc, #240]	@ (80168e8 <__ieee754_powf+0x408>)
 80167f6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80167fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167fe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80168ec <__ieee754_powf+0x40c>
 8016802:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80168f0 <__ieee754_powf+0x410>
 8016806:	ee67 7a87 	vmul.f32	s15, s15, s14
 801680a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80168f4 <__ieee754_powf+0x414>
 801680e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016812:	ed91 7a00 	vldr	s14, [r1]
 8016816:	ee77 7a87 	vadd.f32	s15, s15, s14
 801681a:	ee07 2a10 	vmov	s14, r2
 801681e:	4a36      	ldr	r2, [pc, #216]	@ (80168f8 <__ieee754_powf+0x418>)
 8016820:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8016824:	eeb0 7a67 	vmov.f32	s14, s15
 8016828:	eea6 7a25 	vfma.f32	s14, s12, s11
 801682c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8016830:	ed92 5a00 	vldr	s10, [r2]
 8016834:	ee37 7a05 	vadd.f32	s14, s14, s10
 8016838:	ee37 7a26 	vadd.f32	s14, s14, s13
 801683c:	ee17 2a10 	vmov	r2, s14
 8016840:	401a      	ands	r2, r3
 8016842:	ee07 2a10 	vmov	s14, r2
 8016846:	ee77 6a66 	vsub.f32	s13, s14, s13
 801684a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801684e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8016852:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016856:	e715      	b.n	8016684 <__ieee754_powf+0x1a4>
 8016858:	2601      	movs	r6, #1
 801685a:	e75d      	b.n	8016718 <__ieee754_powf+0x238>
 801685c:	d152      	bne.n	8016904 <__ieee754_powf+0x424>
 801685e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80168fc <__ieee754_powf+0x41c>
 8016862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016866:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801686a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016872:	f73f af29 	bgt.w	80166c8 <__ieee754_powf+0x1e8>
 8016876:	2386      	movs	r3, #134	@ 0x86
 8016878:	e048      	b.n	801690c <__ieee754_powf+0x42c>
 801687a:	4a21      	ldr	r2, [pc, #132]	@ (8016900 <__ieee754_powf+0x420>)
 801687c:	4293      	cmp	r3, r2
 801687e:	d907      	bls.n	8016890 <__ieee754_powf+0x3b0>
 8016880:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016888:	bf4c      	ite	mi
 801688a:	2001      	movmi	r0, #1
 801688c:	2000      	movpl	r0, #0
 801688e:	e6c7      	b.n	8016620 <__ieee754_powf+0x140>
 8016890:	d138      	bne.n	8016904 <__ieee754_powf+0x424>
 8016892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016896:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689e:	dbea      	blt.n	8016876 <__ieee754_powf+0x396>
 80168a0:	e7ee      	b.n	8016880 <__ieee754_powf+0x3a0>
 80168a2:	bf00      	nop
 80168a4:	00000000 	.word	0x00000000
 80168a8:	3f7ffff3 	.word	0x3f7ffff3
 80168ac:	3f800007 	.word	0x3f800007
 80168b0:	3eaaaaab 	.word	0x3eaaaaab
 80168b4:	3fb8aa00 	.word	0x3fb8aa00
 80168b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80168bc:	36eca570 	.word	0x36eca570
 80168c0:	4b800000 	.word	0x4b800000
 80168c4:	001cc471 	.word	0x001cc471
 80168c8:	005db3d6 	.word	0x005db3d6
 80168cc:	080191d4 	.word	0x080191d4
 80168d0:	fffff000 	.word	0xfffff000
 80168d4:	3e6c3255 	.word	0x3e6c3255
 80168d8:	3e53f142 	.word	0x3e53f142
 80168dc:	3e8ba305 	.word	0x3e8ba305
 80168e0:	3edb6db7 	.word	0x3edb6db7
 80168e4:	3f19999a 	.word	0x3f19999a
 80168e8:	080191c4 	.word	0x080191c4
 80168ec:	3f76384f 	.word	0x3f76384f
 80168f0:	3f763800 	.word	0x3f763800
 80168f4:	369dc3a0 	.word	0x369dc3a0
 80168f8:	080191cc 	.word	0x080191cc
 80168fc:	3338aa3c 	.word	0x3338aa3c
 8016900:	43160000 	.word	0x43160000
 8016904:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8016908:	d96f      	bls.n	80169ea <__ieee754_powf+0x50a>
 801690a:	15db      	asrs	r3, r3, #23
 801690c:	3b7e      	subs	r3, #126	@ 0x7e
 801690e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8016912:	4118      	asrs	r0, r3
 8016914:	4408      	add	r0, r1
 8016916:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801691a:	4a4e      	ldr	r2, [pc, #312]	@ (8016a54 <__ieee754_powf+0x574>)
 801691c:	3b7f      	subs	r3, #127	@ 0x7f
 801691e:	411a      	asrs	r2, r3
 8016920:	4002      	ands	r2, r0
 8016922:	ee07 2a10 	vmov	s14, r2
 8016926:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801692a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801692e:	f1c3 0317 	rsb	r3, r3, #23
 8016932:	4118      	asrs	r0, r3
 8016934:	2900      	cmp	r1, #0
 8016936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801693a:	bfb8      	it	lt
 801693c:	4240      	neglt	r0, r0
 801693e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8016942:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8016a58 <__ieee754_powf+0x578>
 8016946:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8016a5c <__ieee754_powf+0x57c>
 801694a:	ee16 3a90 	vmov	r3, s13
 801694e:	f36f 030b 	bfc	r3, #0, #12
 8016952:	ee06 3a90 	vmov	s13, r3
 8016956:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801695a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801695e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016962:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8016a60 <__ieee754_powf+0x580>
 8016966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801696a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801696e:	eeb0 7a67 	vmov.f32	s14, s15
 8016972:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016976:	eef0 5a47 	vmov.f32	s11, s14
 801697a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801697e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8016982:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016986:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8016a64 <__ieee754_powf+0x584>
 801698a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8016a68 <__ieee754_powf+0x588>
 801698e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016992:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8016a6c <__ieee754_powf+0x58c>
 8016996:	eee6 5a26 	vfma.f32	s11, s12, s13
 801699a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8016a70 <__ieee754_powf+0x590>
 801699e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80169a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8016a74 <__ieee754_powf+0x594>
 80169a6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80169aa:	eeb0 6a47 	vmov.f32	s12, s14
 80169ae:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80169b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80169b6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80169ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80169be:	eee7 7a27 	vfma.f32	s15, s14, s15
 80169c2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80169c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80169ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80169d2:	ee10 3a10 	vmov	r3, s0
 80169d6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80169da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80169de:	da06      	bge.n	80169ee <__ieee754_powf+0x50e>
 80169e0:	f000 f854 	bl	8016a8c <scalbnf>
 80169e4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80169e8:	e592      	b.n	8016510 <__ieee754_powf+0x30>
 80169ea:	2000      	movs	r0, #0
 80169ec:	e7a7      	b.n	801693e <__ieee754_powf+0x45e>
 80169ee:	ee00 3a10 	vmov	s0, r3
 80169f2:	e7f7      	b.n	80169e4 <__ieee754_powf+0x504>
 80169f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80169f8:	e58a      	b.n	8016510 <__ieee754_powf+0x30>
 80169fa:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8016a78 <__ieee754_powf+0x598>
 80169fe:	e587      	b.n	8016510 <__ieee754_powf+0x30>
 8016a00:	eeb0 0a48 	vmov.f32	s0, s16
 8016a04:	e584      	b.n	8016510 <__ieee754_powf+0x30>
 8016a06:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8016a0a:	f43f adbb 	beq.w	8016584 <__ieee754_powf+0xa4>
 8016a0e:	2502      	movs	r5, #2
 8016a10:	eeb0 0a48 	vmov.f32	s0, s16
 8016a14:	f000 f832 	bl	8016a7c <fabsf>
 8016a18:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8016a1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8016a20:	4647      	mov	r7, r8
 8016a22:	d003      	beq.n	8016a2c <__ieee754_powf+0x54c>
 8016a24:	f1b8 0f00 	cmp.w	r8, #0
 8016a28:	f47f addb 	bne.w	80165e2 <__ieee754_powf+0x102>
 8016a2c:	2c00      	cmp	r4, #0
 8016a2e:	bfbc      	itt	lt
 8016a30:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8016a34:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016a38:	2e00      	cmp	r6, #0
 8016a3a:	f6bf ad69 	bge.w	8016510 <__ieee754_powf+0x30>
 8016a3e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8016a42:	ea58 0805 	orrs.w	r8, r8, r5
 8016a46:	f47f adc7 	bne.w	80165d8 <__ieee754_powf+0xf8>
 8016a4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016a4e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016a52:	e55d      	b.n	8016510 <__ieee754_powf+0x30>
 8016a54:	ff800000 	.word	0xff800000
 8016a58:	3f317218 	.word	0x3f317218
 8016a5c:	3f317200 	.word	0x3f317200
 8016a60:	35bfbe8c 	.word	0x35bfbe8c
 8016a64:	b5ddea0e 	.word	0xb5ddea0e
 8016a68:	3331bb4c 	.word	0x3331bb4c
 8016a6c:	388ab355 	.word	0x388ab355
 8016a70:	bb360b61 	.word	0xbb360b61
 8016a74:	3e2aaaab 	.word	0x3e2aaaab
 8016a78:	00000000 	.word	0x00000000

08016a7c <fabsf>:
 8016a7c:	ee10 3a10 	vmov	r3, s0
 8016a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016a84:	ee00 3a10 	vmov	s0, r3
 8016a88:	4770      	bx	lr
	...

08016a8c <scalbnf>:
 8016a8c:	ee10 3a10 	vmov	r3, s0
 8016a90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016a94:	d02b      	beq.n	8016aee <scalbnf+0x62>
 8016a96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8016a9a:	d302      	bcc.n	8016aa2 <scalbnf+0x16>
 8016a9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016aa0:	4770      	bx	lr
 8016aa2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016aa6:	d123      	bne.n	8016af0 <scalbnf+0x64>
 8016aa8:	4b24      	ldr	r3, [pc, #144]	@ (8016b3c <scalbnf+0xb0>)
 8016aaa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016b40 <scalbnf+0xb4>
 8016aae:	4298      	cmp	r0, r3
 8016ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016ab4:	db17      	blt.n	8016ae6 <scalbnf+0x5a>
 8016ab6:	ee10 3a10 	vmov	r3, s0
 8016aba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016abe:	3a19      	subs	r2, #25
 8016ac0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016ac4:	4288      	cmp	r0, r1
 8016ac6:	dd15      	ble.n	8016af4 <scalbnf+0x68>
 8016ac8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016b44 <scalbnf+0xb8>
 8016acc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016b48 <scalbnf+0xbc>
 8016ad0:	ee10 3a10 	vmov	r3, s0
 8016ad4:	eeb0 7a67 	vmov.f32	s14, s15
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	bfb8      	it	lt
 8016adc:	eef0 7a66 	vmovlt.f32	s15, s13
 8016ae0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016ae4:	4770      	bx	lr
 8016ae6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016b4c <scalbnf+0xc0>
 8016aea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016aee:	4770      	bx	lr
 8016af0:	0dd2      	lsrs	r2, r2, #23
 8016af2:	e7e5      	b.n	8016ac0 <scalbnf+0x34>
 8016af4:	4410      	add	r0, r2
 8016af6:	28fe      	cmp	r0, #254	@ 0xfe
 8016af8:	dce6      	bgt.n	8016ac8 <scalbnf+0x3c>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	dd06      	ble.n	8016b0c <scalbnf+0x80>
 8016afe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016b02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016b06:	ee00 3a10 	vmov	s0, r3
 8016b0a:	4770      	bx	lr
 8016b0c:	f110 0f16 	cmn.w	r0, #22
 8016b10:	da09      	bge.n	8016b26 <scalbnf+0x9a>
 8016b12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016b4c <scalbnf+0xc0>
 8016b16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016b50 <scalbnf+0xc4>
 8016b1a:	ee10 3a10 	vmov	r3, s0
 8016b1e:	eeb0 7a67 	vmov.f32	s14, s15
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	e7d9      	b.n	8016ada <scalbnf+0x4e>
 8016b26:	3019      	adds	r0, #25
 8016b28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016b2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016b30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016b54 <scalbnf+0xc8>
 8016b34:	ee07 3a90 	vmov	s15, r3
 8016b38:	e7d7      	b.n	8016aea <scalbnf+0x5e>
 8016b3a:	bf00      	nop
 8016b3c:	ffff3cb0 	.word	0xffff3cb0
 8016b40:	4c000000 	.word	0x4c000000
 8016b44:	7149f2ca 	.word	0x7149f2ca
 8016b48:	f149f2ca 	.word	0xf149f2ca
 8016b4c:	0da24260 	.word	0x0da24260
 8016b50:	8da24260 	.word	0x8da24260
 8016b54:	33000000 	.word	0x33000000

08016b58 <with_errnof>:
 8016b58:	b510      	push	{r4, lr}
 8016b5a:	ed2d 8b02 	vpush	{d8}
 8016b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8016b62:	4604      	mov	r4, r0
 8016b64:	f7fc f8d2 	bl	8012d0c <__errno>
 8016b68:	eeb0 0a48 	vmov.f32	s0, s16
 8016b6c:	ecbd 8b02 	vpop	{d8}
 8016b70:	6004      	str	r4, [r0, #0]
 8016b72:	bd10      	pop	{r4, pc}

08016b74 <xflowf>:
 8016b74:	b130      	cbz	r0, 8016b84 <xflowf+0x10>
 8016b76:	eef1 7a40 	vneg.f32	s15, s0
 8016b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016b7e:	2022      	movs	r0, #34	@ 0x22
 8016b80:	f7ff bfea 	b.w	8016b58 <with_errnof>
 8016b84:	eef0 7a40 	vmov.f32	s15, s0
 8016b88:	e7f7      	b.n	8016b7a <xflowf+0x6>
	...

08016b8c <__math_uflowf>:
 8016b8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016b94 <__math_uflowf+0x8>
 8016b90:	f7ff bff0 	b.w	8016b74 <xflowf>
 8016b94:	10000000 	.word	0x10000000

08016b98 <__math_oflowf>:
 8016b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016ba0 <__math_oflowf+0x8>
 8016b9c:	f7ff bfea 	b.w	8016b74 <xflowf>
 8016ba0:	70000000 	.word	0x70000000

08016ba4 <__ieee754_sqrtf>:
 8016ba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016ba8:	4770      	bx	lr
	...

08016bac <_init>:
 8016bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bae:	bf00      	nop
 8016bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bb2:	bc08      	pop	{r3}
 8016bb4:	469e      	mov	lr, r3
 8016bb6:	4770      	bx	lr

08016bb8 <_fini>:
 8016bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bba:	bf00      	nop
 8016bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bbe:	bc08      	pop	{r3}
 8016bc0:	469e      	mov	lr, r3
 8016bc2:	4770      	bx	lr
