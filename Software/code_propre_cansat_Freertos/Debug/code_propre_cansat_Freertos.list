
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027e4  08019040  08019040  0001a040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b824  0801b824  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b824  0801b824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b82c  0801b82c  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b82c  0801b82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b830  0801b830  0001c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0801b834  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b8  20000210  0801ba44  0001d210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200049c8  0801ba44  0001d9c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a58  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007839  00000000  00000000  00053c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  0005b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f27  00000000  00000000  0005dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1c1  00000000  00000000  0005fc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038c7b  00000000  00000000  00089e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef5ad  00000000  00000000  000c2abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b2068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfa0  00000000  00000000  001b20ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001be04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019028 	.word	0x08019028

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08019028 	.word	0x08019028

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f006 ff66 	bl	8007f64 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f006 ff57 	bl	8007f64 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f006 ff48 	bl	8007f64 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f006 ff39 	bl	8007f64 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f006 ff2a 	bl	8007f64 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f006 ff1b 	bl	8007f64 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f007 f820 	bl	800818c <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f013 fec2 	bl	8014ee0 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f013 feba 	bl	8014ee0 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000380 	.word	0x20000380
 8001178:	0801907c 	.word	0x0801907c
 800117c:	080190b0 	.word	0x080190b0

08001180 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030b 	add.w	r3, r7, #11
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221e      	movs	r2, #30
 800119c:	21d6      	movs	r1, #214	@ 0xd6
 800119e:	4874      	ldr	r0, [pc, #464]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011a0:	f006 fff4 	bl	800818c <HAL_I2C_Mem_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Read_sensor_data+0x32>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e0da      	b.n	8001368 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <Read_sensor_data+0x46>
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0ce      	b.n	8001368 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	e044      	b.n	800125a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	3311      	adds	r3, #17
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030a 	add.w	r3, r7, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	21d6      	movs	r1, #214	@ 0xd6
 80011f8:	485d      	ldr	r0, [pc, #372]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011fa:	f006 ffc7 	bl	800818c <HAL_I2C_Mem_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <Read_sensor_data+0x8c>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	e0ad      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800120c:	7efb      	ldrb	r3, [r7, #27]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0309 	add.w	r3, r7, #9
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d6      	movs	r1, #214	@ 0xd6
 8001224:	4852      	ldr	r0, [pc, #328]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001226:	f006 ffb1 	bl	800818c <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <Read_sensor_data+0xb8>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	e097      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001238:	7a7b      	ldrb	r3, [r7, #9]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	443b      	add	r3, r7
 8001250:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	2b02      	cmp	r3, #2
 800125e:	ddb7      	ble.n	80011d0 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	e044      	b.n	80012f0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3314      	adds	r3, #20
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030a 	add.w	r3, r7, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	21d6      	movs	r1, #214	@ 0xd6
 800128e:	4838      	ldr	r0, [pc, #224]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001290:	f006 ff7c 	bl	800818c <HAL_I2C_Mem_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Read_sensor_data+0x122>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	e062      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012a2:	7f7b      	ldrb	r3, [r7, #29]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 0309 	add.w	r3, r7, #9
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d6      	movs	r1, #214	@ 0xd6
 80012ba:	482d      	ldr	r0, [pc, #180]	@ (8001370 <Read_sensor_data+0x1f0>)
 80012bc:	f006 ff66 	bl	800818c <HAL_I2C_Mem_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <Read_sensor_data+0x14e>
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	e04c      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012ce:	7a7b      	ldrb	r3, [r7, #9]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddb7      	ble.n	8001266 <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 8001308:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 800131a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 800132c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 800134a:	f000 f815 	bl	8001378 <Read_temp>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <Read_sensor_data+0x1f4>)
 8001358:	f7fe ffbe 	bl	80002d8 <__aeabi_dsub>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000380 	.word	0x20000380
 8001374:	40210000 	.word	0x40210000

08001378 <Read_temp>:

double Read_temp() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2220      	movs	r2, #32
 8001390:	21d6      	movs	r1, #214	@ 0xd6
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <Read_temp+0x98>)
 8001394:	f006 fefa 	bl	800818c <HAL_I2C_Mem_Read>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2221      	movs	r2, #33	@ 0x21
 80013ae:	21d6      	movs	r1, #214	@ 0xd6
 80013b0:	4817      	ldr	r0, [pc, #92]	@ (8001410 <Read_temp+0x98>)
 80013b2:	f006 feeb 	bl	800818c <HAL_I2C_Mem_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d0 	bl	8000574 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Read_temp+0x9c>)
 80013da:	f7ff fa5f 	bl	800089c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <Read_temp+0xa0>)
 80013ec:	f7fe ff76 	bl	80002dc <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001400:	eeb0 0a47 	vmov.f32	s0, s14
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000380 	.word	0x20000380
 8001414:	40700000 	.word	0x40700000
 8001418:	40390000 	.word	0x40390000
 800141c:	00000000 	.word	0x00000000

08001420 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7a1b      	ldrb	r3, [r3, #8]
 800142c:	2bb5      	cmp	r3, #181	@ 0xb5
 800142e:	f040 81d7 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	2b62      	cmp	r3, #98	@ 0x62
 8001438:	f040 81d2 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c9a      	ldrb	r2, [r3, #18]
 8001440:	4b9f      	ldr	r3, [pc, #636]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001442:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7c9a      	ldrb	r2, [r3, #18]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7cda      	ldrb	r2, [r3, #19]
 8001452:	4b9b      	ldr	r3, [pc, #620]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001454:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7cda      	ldrb	r2, [r3, #19]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001460:	4b97      	ldr	r3, [pc, #604]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7d1a      	ldrb	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7d5a      	ldrb	r2, [r3, #21]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9a      	ldrb	r2, [r3, #22]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7dda      	ldrb	r2, [r3, #23]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1a      	ldrb	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b8:	e017      	b.n	80014ea <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	331e      	adds	r3, #30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	7a19      	ldrb	r1, [r3, #8]
 80014c4:	4a7f      	ldr	r2, [pc, #508]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	331e      	adds	r3, #30
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	7a19      	ldrb	r1, [r3, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	4413      	add	r3, r2
 80014de:	3380      	adds	r3, #128	@ 0x80
 80014e0:	460a      	mov	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	3301      	adds	r3, #1
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dde4      	ble.n	80014ba <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014f0:	4b74      	ldr	r3, [pc, #464]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014f8:	4b72      	ldr	r3, [pc, #456]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001516:	e017      	b.n	8001548 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151a:	3322      	adds	r3, #34	@ 0x22
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	7a19      	ldrb	r1, [r3, #8]
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152e:	3322      	adds	r3, #34	@ 0x22
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	7a19      	ldrb	r1, [r3, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	4413      	add	r3, r2
 800153c:	3388      	adds	r3, #136	@ 0x88
 800153e:	460a      	mov	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	3301      	adds	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154a:	2b03      	cmp	r3, #3
 800154c:	dde4      	ble.n	8001518 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001558:	4b5a      	ldr	r3, [pc, #360]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	e00c      	b.n	8001592 <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	3326      	adds	r3, #38	@ 0x26
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	7a19      	ldrb	r1, [r3, #8]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	2b03      	cmp	r3, #3
 8001596:	ddef      	ble.n	8001578 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	e017      	b.n	80015f4 <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	332a      	adds	r3, #42	@ 0x2a
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	7a19      	ldrb	r1, [r3, #8]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	332a      	adds	r3, #42	@ 0x2a
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	7a19      	ldrb	r1, [r3, #8]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	4413      	add	r3, r2
 80015e8:	33a0      	adds	r3, #160	@ 0xa0
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	3301      	adds	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	dde4      	ble.n	80015c4 <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015fa:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e00c      	b.n	8001640 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	332e      	adds	r3, #46	@ 0x2e
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	7a19      	ldrb	r1, [r3, #8]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddef      	ble.n	8001626 <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e00c      	b.n	800168c <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3332      	adds	r3, #50	@ 0x32
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	7a19      	ldrb	r1, [r3, #8]
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	3301      	adds	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddef      	ble.n	8001672 <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016aa:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e022      	b.n	8001704 <GNSS_ParsePVTData+0x2e4>
 80016be:	bf00      	nop
 80016c0:	2000022c 	.word	0x2000022c
 80016c4:	20000234 	.word	0x20000234
 80016c8:	4b189680 	.word	0x4b189680
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	20000230 	.word	0x20000230
			iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	333e      	adds	r3, #62	@ 0x3e
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	7a19      	ldrb	r1, [r3, #8]
 80016de:	4a44      	ldr	r2, [pc, #272]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	460a      	mov	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
			GNSS->vspeedBytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	333e      	adds	r3, #62	@ 0x3e
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	7a19      	ldrb	r1, [r3, #8]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	33c8      	adds	r3, #200	@ 0xc8
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dde4      	ble.n	80016d4 <GNSS_ParsePVTData+0x2b4>
		}
	GNSS->vspeed = iLong.iLong;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	GNSS->fvspeed=(float)GNSS->vspeed/1000.0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	for (int var = 0; var < 4; ++var) {
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e017      	b.n	8001766 <GNSS_ParsePVTData+0x346>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	3342      	adds	r3, #66	@ 0x42
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	7a19      	ldrb	r1, [r3, #8]
 8001740:	4a2b      	ldr	r2, [pc, #172]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3342      	adds	r3, #66	@ 0x42
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	7a19      	ldrb	r1, [r3, #8]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	33bc      	adds	r3, #188	@ 0xbc
 800175c:	460a      	mov	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3301      	adds	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b03      	cmp	r3, #3
 800176a:	dde4      	ble.n	8001736 <GNSS_ParsePVTData+0x316>
	}
	GNSS->gSpeed = iLong.iLong;
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00c      	b.n	80017b2 <GNSS_ParsePVTData+0x392>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3346      	adds	r3, #70	@ 0x46
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	7a19      	ldrb	r1, [r3, #8]
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	ddef      	ble.n	8001798 <GNSS_ParsePVTData+0x378>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed9 	bl	8000574 <__aeabi_i2d>
 80017c2:	a309      	add	r3, pc, #36	@ (adr r3, 80017e8 <GNSS_ParsePVTData+0x3c8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff3e 	bl	8000648 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9e8 	bl	8000ba8 <__aeabi_d2iz>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	88e368f1 	.word	0x88e368f1
 80017ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80017f0:	20000234 	.word	0x20000234
 80017f4:	447a0000 	.word	0x447a0000

080017f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2220      	movs	r2, #32
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f013 fc9d 	bl	8015150 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001818:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800181c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001826:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182c:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <MX_ADC1_Init+0x120>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001838:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <MX_ADC1_Init+0x120>)
 800183a:	2201      	movs	r2, #1
 800183c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001840:	2208      	movs	r2, #8
 8001842:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001844:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001846:	2200      	movs	r2, #0
 8001848:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <MX_ADC1_Init+0x120>)
 800184c:	2201      	movs	r2, #1
 800184e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001852:	2203      	movs	r2, #3
 8001854:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185e:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800186a:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <MX_ADC1_Init+0x120>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001872:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001878:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <MX_ADC1_Init+0x120>)
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001880:	4825      	ldr	r0, [pc, #148]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001882:	f004 fa5b 	bl	8005d3c <HAL_ADC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800188c:	f001 fa26 	bl	8002cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	481f      	ldr	r0, [pc, #124]	@ (8001918 <MX_ADC1_Init+0x120>)
 800189c:	f005 fc20 	bl	80070e0 <HAL_ADCEx_MultiModeConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018a6:	f001 fa19 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_ADC1_Init+0x124>)
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ae:	2306      	movs	r3, #6
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80018b2:	2307      	movs	r3, #7
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b6:	237f      	movs	r3, #127	@ 0x7f
 80018b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018ba:	2304      	movs	r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4814      	ldr	r0, [pc, #80]	@ (8001918 <MX_ADC1_Init+0x120>)
 80018c8:	f004 fea8 	bl	800661c <HAL_ADC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018d2:	f001 fa03 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <MX_ADC1_Init+0x128>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018da:	230c      	movs	r3, #12
 80018dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	@ (8001918 <MX_ADC1_Init+0x120>)
 80018e4:	f004 fe9a 	bl	800661c <HAL_ADC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80018ee:	f001 f9f5 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_ADC1_Init+0x12c>)
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018f6:	2312      	movs	r3, #18
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001900:	f004 fe8c 	bl	800661c <HAL_ADC_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800190a:	f001 f9e7 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	@ 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000238 	.word	0x20000238
 800191c:	cb840000 	.word	0xcb840000
 8001920:	c3210000 	.word	0xc3210000
 8001924:	0c900008 	.word	0x0c900008

08001928 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b09a      	sub	sp, #104	@ 0x68
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2244      	movs	r2, #68	@ 0x44
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f013 fc01 	bl	8015150 <memset>
  if(adcHandle->Instance==ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001956:	d167      	bne.n	8001a28 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800195c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800195e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f007 fe93 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001974:	f001 f9b2 	bl	8002cdc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800197e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a8:	2304      	movs	r3, #4
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019be:	f006 f851 	bl	8007a64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_ADC_MspInit+0x110>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019ca:	2205      	movs	r2, #5
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019f0:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019f2:	2220      	movs	r2, #32
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019fe:	f005 fcf3 	bl	80073e8 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001a08:	f001 f968 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 8001a10:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f005 fcbb 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a22:	2012      	movs	r0, #18
 8001a24:	f005 fcd2 	bl	80073cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3768      	adds	r7, #104	@ 0x68
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	200002a4 	.word	0x200002a4
 8001a38:	4002001c 	.word	0x4002001c
 8001a3c:	00000000 	.word	0x00000000

08001a40 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a52:	f040 8097 	bne.w	8001b84 <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001a56:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd8a 	bl	8000574 <__aeabi_i2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	a14a      	add	r1, pc, #296	@ (adr r1, 8001b90 <HAL_ADC_ConvCpltCallback+0x150>)
 8001a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6a:	f7fe ff17 	bl	800089c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8df 	bl	8000c38 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001a7e:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001a80:	4b49      	ldr	r3, [pc, #292]	@ (8001ba8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <HAL_ADC_ConvCpltCallback+0x16c>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd80 	bl	8000598 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	4943      	ldr	r1, [pc, #268]	@ (8001bb0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001aa2:	f7fe fefb 	bl	800089c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001ab0:	885b      	ldrh	r3, [r3, #2]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd5e 	bl	8000574 <__aeabi_i2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fdb6 	bl	8000648 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <HAL_ADC_ConvCpltCallback+0x16c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbef 	bl	80002d8 <__aeabi_dsub>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4640      	mov	r0, r8
 8001b00:	4649      	mov	r1, r9
 8001b02:	f7fe fda1 	bl	8000648 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f893 	bl	8000c38 <__aeabi_d2f>
 8001b12:	ee07 0a10 	vmov	s14, r0
 8001b16:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_ADC_ConvCpltCallback+0x178>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd23 	bl	8000574 <__aeabi_i2d>
 8001b2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b98 <HAL_ADC_ConvCpltCallback+0x158>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe feb2 	bl	800089c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001b46:	f7fe fd7f 	bl	8000648 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	461d      	mov	r5, r3
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd1e 	bl	8000598 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f862 	bl	8000c38 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a11      	ldr	r2, [pc, #68]	@ (8001bbc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001b78:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	4908      	ldr	r1, [pc, #32]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b7e:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <HAL_ADC_ConvCpltCallback+0x180>)
 8001b80:	f004 fa60 	bl	8006044 <HAL_ADC_Start_DMA>

	}

}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8e:	bf00      	nop
 8001b90:	d70a3d70 	.word	0xd70a3d70
 8001b94:	40b36323 	.word	0x40b36323
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40affe00 	.word	0x40affe00
 8001ba0:	20000bec 	.word	0x20000bec
 8001ba4:	20000bf8 	.word	0x20000bf8
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	40590000 	.word	0x40590000
 8001bb4:	40080000 	.word	0x40080000
 8001bb8:	20000bf4 	.word	0x20000bf4
 8001bbc:	20000bfc 	.word	0x20000bfc
 8001bc0:	20000238 	.word	0x20000238

08001bc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b0a0      	sub	sp, #128	@ 0x80
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001bce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00f fe0d 	bl	80117f2 <osMutexCreate>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a37      	ldr	r2, [pc, #220]	@ (8001cb8 <MX_FREERTOS_Init+0xf4>)
 8001bdc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 300);
 8001bde:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <MX_FREERTOS_Init+0xf8>)
 8001be0:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001be4:	461d      	mov	r5, r3
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001bee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00f fdc1 	bl	801177c <osThreadCreate>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <MX_FREERTOS_Init+0xfc>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityAboveNormal, 0, 256);
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <MX_FREERTOS_Init+0x100>)
 8001c02:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001c10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00f fdb0 	bl	801177c <osThreadCreate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc8 <MX_FREERTOS_Init+0x104>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <MX_FREERTOS_Init+0x108>)
 8001c24:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001c28:	461d      	mov	r5, r3
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001c32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00f fd9f 	bl	801177c <osThreadCreate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <MX_FREERTOS_Init+0x10c>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityAboveNormal, 0, 256);
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <MX_FREERTOS_Init+0x110>)
 8001c46:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00f fd8e 	bl	801177c <osThreadCreate>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <MX_FREERTOS_Init+0x114>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityBelowNormal, 0, 256);
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_FREERTOS_Init+0x118>)
 8001c68:	f107 0418 	add.w	r4, r7, #24
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001c76:	f107 0318 	add.w	r3, r7, #24
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00f fd7d 	bl	801177c <osThreadCreate>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <MX_FREERTOS_Init+0x11c>)
 8001c86:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_FREERTOS_Init+0x120>)
 8001c8a:	1d3c      	adds	r4, r7, #4
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00f fd6e 	bl	801177c <osThreadCreate>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <MX_FREERTOS_Init+0x124>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifdef PARTIE_HAUT

  osThreadSuspend(distancecalcHandle);
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_FREERTOS_Init+0x11c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00f fee7 	bl	8011a7e <osThreadSuspend>

#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cb0:	bf00      	nop
 8001cb2:	3780      	adds	r7, #128	@ 0x80
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	20000328 	.word	0x20000328
 8001cbc:	080190ec 	.word	0x080190ec
 8001cc0:	20000310 	.word	0x20000310
 8001cc4:	0801910c 	.word	0x0801910c
 8001cc8:	20000314 	.word	0x20000314
 8001ccc:	0801912c 	.word	0x0801912c
 8001cd0:	20000318 	.word	0x20000318
 8001cd4:	08019148 	.word	0x08019148
 8001cd8:	2000031c 	.word	0x2000031c
 8001cdc:	0801916c 	.word	0x0801916c
 8001ce0:	20000320 	.word	0x20000320
 8001ce4:	08019190 	.word	0x08019190
 8001ce8:	20000324 	.word	0x20000324

08001cec <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  if(pbmseeker_flag==0){
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <Startstatemachine+0x7c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12d      	bne.n	8001d58 <Startstatemachine+0x6c>
		  if(pbmseeker==0){
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <Startstatemachine+0x80>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <Startstatemachine+0x36>
			  ssd1306_SetCursor(32, 40);
 8001d04:	2128      	movs	r1, #40	@ 0x28
 8001d06:	2020      	movs	r0, #32
 8001d08:	f001 fb90 	bl	800342c <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fa4b 	bl	80031a8 <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001d12:	4a17      	ldr	r2, [pc, #92]	@ (8001d70 <Startstatemachine+0x84>)
 8001d14:	2301      	movs	r3, #1
 8001d16:	ca06      	ldmia	r2, {r1, r2}
 8001d18:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <Startstatemachine+0x88>)
 8001d1a:	f001 fb61 	bl	80033e0 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001d1e:	f001 fa5b 	bl	80031d8 <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <Startstatemachine+0x80>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10e      	bne.n	8001d48 <Startstatemachine+0x5c>
			  ssd1306_SetCursor(32, 40);
 8001d2a:	2128      	movs	r1, #40	@ 0x28
 8001d2c:	2020      	movs	r0, #32
 8001d2e:	f001 fb7d 	bl	800342c <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f001 fa38 	bl	80031a8 <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <Startstatemachine+0x84>)
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	ca06      	ldmia	r2, {r1, r2}
 8001d3e:	480e      	ldr	r0, [pc, #56]	@ (8001d78 <Startstatemachine+0x8c>)
 8001d40:	f001 fb4e 	bl	80033e0 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001d44:	f001 fa48 	bl	80031d8 <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001d48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d4c:	f010 fe34 	bl	80129b8 <vTaskDelay>
		  pbmseeker_flag=1;
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <Startstatemachine+0x7c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e001      	b.n	8001d5c <Startstatemachine+0x70>
	  }
	  else{
	  statemachine();
 8001d58:	f001 fbb2 	bl	80034c0 <statemachine>
	  }
	  ssd1306_UpdateScreen();
 8001d5c:	f001 fa3c 	bl	80031d8 <ssd1306_UpdateScreen>





    osDelay(100);
 8001d60:	2064      	movs	r0, #100	@ 0x64
 8001d62:	f00f fd32 	bl	80117ca <osDelay>
	  if(pbmseeker_flag==0){
 8001d66:	e7c5      	b.n	8001cf4 <Startstatemachine+0x8>
 8001d68:	20000308 	.word	0x20000308
 8001d6c:	20000eb8 	.word	0x20000eb8
 8001d70:	20000018 	.word	0x20000018
 8001d74:	080191a4 	.word	0x080191a4
 8001d78:	080191a8 	.word	0x080191a8

08001d7c <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
  /* Infinite loop */
  for(;;)
  {
	  GNSS_ParsePVTData(&GNSSData);
 8001d84:	4811      	ldr	r0, [pc, #68]	@ (8001dcc <StartGNSSParse+0x50>)
 8001d86:	f7ff fb4b 	bl	8001420 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001d8a:	4811      	ldr	r0, [pc, #68]	@ (8001dd0 <StartGNSSParse+0x54>)
 8001d8c:	f000 f97e 	bl	800208c <bmp581_read_precise_normal>
	  Read_sensor_data(&myData6AXIS);
 8001d90:	4810      	ldr	r0, [pc, #64]	@ (8001dd4 <StartGNSSParse+0x58>)
 8001d92:	f7ff f9f5 	bl	8001180 <Read_sensor_data>

	  if(flag_calib){
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <StartGNSSParse+0x5c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <StartGNSSParse+0x38>
		  hauteur_relative=(float)(myDatabmp581.altitude-hauteur_Initiale);
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <StartGNSSParse+0x54>)
 8001da0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <StartGNSSParse+0x60>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <StartGNSSParse+0x64>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
	  }

		if(flag_fin==1){
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <StartGNSSParse+0x68>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d102      	bne.n	8001dc2 <StartGNSSParse+0x46>

			osThreadSuspend(NULL);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f00f fe5e 	bl	8011a7e <osThreadSuspend>
		}


    osDelay(100);
 8001dc2:	2064      	movs	r0, #100	@ 0x64
 8001dc4:	f00f fd01 	bl	80117ca <osDelay>
	  GNSS_ParsePVTData(&GNSSData);
 8001dc8:	e7dc      	b.n	8001d84 <StartGNSSParse+0x8>
 8001dca:	bf00      	nop
 8001dcc:	20000c7c 	.word	0x20000c7c
 8001dd0:	20000768 	.word	0x20000768
 8001dd4:	20000748 	.word	0x20000748
 8001dd8:	20000e9c 	.word	0x20000e9c
 8001ddc:	20000eb0 	.word	0x20000eb0
 8001de0:	20000eb4 	.word	0x20000eb4
 8001de4:	20000eac 	.word	0x20000eac

08001de8 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */
  /* Infinite loop */
  for(;;)
  {
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001df0:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <StartSdcard+0xa0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00f fd07 	bl	801180c <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 8001dfe:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <StartSdcard+0xa4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1c3 0301 	rsb	r3, r3, #1
 8001e06:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <StartSdcard+0xa4>)
 8001e08:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <StartSdcard+0xa4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10a      	bne.n	8001e28 <StartSdcard+0x40>
			  LED_Setcolour(0,0,0,255,255,255);
 8001e12:	23ff      	movs	r3, #255	@ 0xff
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	23ff      	movs	r3, #255	@ 0xff
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	23ff      	movs	r3, #255	@ 0xff
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f000 fc09 	bl	8002638 <LED_Setcolour>
 8001e26:	e009      	b.n	8001e3c <StartSdcard+0x54>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 fbfe 	bl	8002638 <LED_Setcolour>
		  }



		  if(flag_drop==0){
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <StartSdcard+0xa8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10e      	bne.n	8001e62 <StartSdcard+0x7a>

			  if(sd_counter==10){
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <StartSdcard+0xac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b0a      	cmp	r3, #10
 8001e4a:	d104      	bne.n	8001e56 <StartSdcard+0x6e>
				  store_in_sd();
 8001e4c:	f000 ff4c 	bl	8002ce8 <store_in_sd>

			  sd_counter=0;
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <StartSdcard+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <StartSdcard+0xac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <StartSdcard+0xac>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e001      	b.n	8001e66 <StartSdcard+0x7e>

		  }
		  else{
			  store_in_sd();
 8001e62:	f000 ff41 	bl	8002ce8 <store_in_sd>

		  }

		  osMutexRelease(SDCard_mutexeHandle);
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <StartSdcard+0xa0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00f fd1c 	bl	80118a8 <osMutexRelease>

			if(flag_fin==1){
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <StartSdcard+0xb0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <StartSdcard+0x96>

				osThreadSuspend(NULL);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f00f fe00 	bl	8011a7e <osThreadSuspend>
			}

    osDelay(100);
 8001e7e:	2064      	movs	r0, #100	@ 0x64
 8001e80:	f00f fca3 	bl	80117ca <osDelay>
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001e84:	e7b4      	b.n	8001df0 <StartSdcard+0x8>
 8001e86:	bf00      	nop
 8001e88:	20000328 	.word	0x20000328
 8001e8c:	2000030c 	.word	0x2000030c
 8001e90:	20000e94 	.word	0x20000e94
 8001e94:	20000304 	.word	0x20000304
 8001e98:	20000eac 	.word	0x20000eac

08001e9c <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_servo_started==1){
 8001ea4:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <Startservo+0xa4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d104      	bne.n	8001eb6 <Startservo+0x1a>
		  stop_servo();
 8001eac:	f001 f84e 	bl	8002f4c <stop_servo>
		  flag_servo_started=0;
 8001eb0:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <Startservo+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
	  }


	  if((flag_drop==1) && (flag_calib==1)){
 8001eb6:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <Startservo+0xa8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d118      	bne.n	8001ef0 <Startservo+0x54>
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <Startservo+0xac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d114      	bne.n	8001ef0 <Startservo+0x54>

		  if((hauteur_relative<=HAUTEUR_SEPARATION)){
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <Startservo+0xb0>)
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d80a      	bhi.n	8001ef0 <Startservo+0x54>
			  release_mecanism();
 8001eda:	f001 f817 	bl	8002f0c <release_mecanism>
			  flag_separation=1;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <Startservo+0xb4>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <Startservo+0xa4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
			  osThreadSuspend(NULL);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f00f fdc7 	bl	8011a7e <osThreadSuspend>



		  }
	  }
	  if(flag_drop==0){
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <Startservo+0xa8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d117      	bne.n	8001f28 <Startservo+0x8c>
		  if(flag_bouton_servo==1){
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <Startservo+0xb8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <Startservo+0x74>
			  release_mecanism();
 8001f00:	f001 f804 	bl	8002f0c <release_mecanism>
			  flag_bouton_servo=2;
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <Startservo+0xb8>)
 8001f06:	2202      	movs	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <Startservo+0xa4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
		  }
		  if(flag_bouton_servo==0){
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <Startservo+0xb8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <Startservo+0x8c>
			  lock_mecanism();
 8001f18:	f001 f808 	bl	8002f2c <lock_mecanism>
			  flag_bouton_servo=2;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <Startservo+0xb8>)
 8001f1e:	2202      	movs	r2, #2
 8001f20:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <Startservo+0xa4>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
		  }

	  }

		if(flag_fin==1){
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <Startservo+0xbc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <Startservo+0x9a>

			osThreadSuspend(NULL);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f00f fda4 	bl	8011a7e <osThreadSuspend>
		}

    osDelay(200);
 8001f36:	20c8      	movs	r0, #200	@ 0xc8
 8001f38:	f00f fc47 	bl	80117ca <osDelay>
	  if(flag_servo_started==1){
 8001f3c:	e7b2      	b.n	8001ea4 <Startservo+0x8>
 8001f3e:	bf00      	nop
 8001f40:	20000ea4 	.word	0x20000ea4
 8001f44:	20000e94 	.word	0x20000e94
 8001f48:	20000e9c 	.word	0x20000e9c
 8001f4c:	20000eb4 	.word	0x20000eb4
 8001f50:	20000e98 	.word	0x20000e98
 8001f54:	20000ea0 	.word	0x20000ea0
 8001f58:	20000eac 	.word	0x20000eac

08001f5c <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_calib==1){
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <Startdistancecalc+0x24>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1

#endif
	  }
}

		if(flag_fin==1){
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <Startdistancecalc+0x28>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <Startdistancecalc+0x1c>

			osThreadSuspend(NULL);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f00f fd83 	bl	8011a7e <osThreadSuspend>
		}
    osDelay(100);
 8001f78:	2064      	movs	r0, #100	@ 0x64
 8001f7a:	f00f fc26 	bl	80117ca <osDelay>
	  if(flag_calib==1){
 8001f7e:	e7f1      	b.n	8001f64 <Startdistancecalc+0x8>
 8001f80:	20000e9c 	.word	0x20000e9c
 8001f84:	20000eac 	.word	0x20000eac

08001f88 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <startTarvosDecode+0x38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <startTarvosDecode+0x20>
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
			  break;
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8001f98:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <startTarvosDecode+0x3c>)
 8001f9a:	480b      	ldr	r0, [pc, #44]	@ (8001fc8 <startTarvosDecode+0x40>)
 8001f9c:	f002 fa10 	bl	80043c0 <decode_payload>

			  break;
 8001fa0:	bf00      	nop
		  }
		  trameready=0;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <startTarvosDecode+0x38>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
	  }

		if(flag_fin==1){
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <startTarvosDecode+0x44>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d102      	bne.n	8001fb6 <startTarvosDecode+0x2e>

			osThreadSuspend(NULL);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f00f fd64 	bl	8011a7e <osThreadSuspend>
		}

    osDelay(100);
 8001fb6:	2064      	movs	r0, #100	@ 0x64
 8001fb8:	f00f fc07 	bl	80117ca <osDelay>
	  if(trameready==1){
 8001fbc:	e7e8      	b.n	8001f90 <startTarvosDecode+0x8>
 8001fbe:	bf00      	nop
 8001fc0:	20000ec0 	.word	0x20000ec0
 8001fc4:	20000454 	.word	0x20000454
 8001fc8:	20000c00 	.word	0x20000c00
 8001fcc:	20000eac 	.word	0x20000eac

08001fd0 <bmp581_init_precise_normal>:
extern I2C_HandleTypeDef hi2c1;


//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af04      	add	r7, sp, #16
 8001fd6:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8001fd8:	237b      	movs	r3, #123	@ 0x7b
 8001fda:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8001fdc:	2369      	movs	r3, #105	@ 0x69
 8001fde:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8001fe0:	232b      	movs	r3, #43	@ 0x2b
 8001fe2:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	723b      	strb	r3, [r7, #8]
	int check=0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001fec:	2364      	movs	r3, #100	@ 0x64
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	f107 030b 	add.w	r3, r7, #11
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2236      	movs	r2, #54	@ 0x36
 8001ffe:	218e      	movs	r1, #142	@ 0x8e
 8002000:	4821      	ldr	r0, [pc, #132]	@ (8002088 <bmp581_init_precise_normal+0xb8>)
 8002002:	f005 ffaf 	bl	8007f64 <HAL_I2C_Mem_Write>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <bmp581_init_precise_normal+0x40>
			check=1;
 800200c:	2301      	movs	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8002010:	2364      	movs	r3, #100	@ 0x64
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	2301      	movs	r3, #1
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	f107 030a 	add.w	r3, r7, #10
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	2237      	movs	r2, #55	@ 0x37
 8002022:	218e      	movs	r1, #142	@ 0x8e
 8002024:	4818      	ldr	r0, [pc, #96]	@ (8002088 <bmp581_init_precise_normal+0xb8>)
 8002026:	f005 ff9d 	bl	8007f64 <HAL_I2C_Mem_Write>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <bmp581_init_precise_normal+0x64>
					check=1;
 8002030:	2301      	movs	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8002034:	2364      	movs	r3, #100	@ 0x64
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2301      	movs	r3, #1
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	f107 0309 	add.w	r3, r7, #9
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2301      	movs	r3, #1
 8002044:	2230      	movs	r2, #48	@ 0x30
 8002046:	218e      	movs	r1, #142	@ 0x8e
 8002048:	480f      	ldr	r0, [pc, #60]	@ (8002088 <bmp581_init_precise_normal+0xb8>)
 800204a:	f005 ff8b 	bl	8007f64 <HAL_I2C_Mem_Write>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <bmp581_init_precise_normal+0x88>
				check=1;
 8002054:	2301      	movs	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2301      	movs	r3, #1
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	2230      	movs	r2, #48	@ 0x30
 800206a:	218e      	movs	r1, #142	@ 0x8e
 800206c:	4806      	ldr	r0, [pc, #24]	@ (8002088 <bmp581_init_precise_normal+0xb8>)
 800206e:	f005 ff79 	bl	8007f64 <HAL_I2C_Mem_Write>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <bmp581_init_precise_normal+0xac>
					check=1;
 8002078:	2301      	movs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
//	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
//					check=1;
//				}


	return check;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	b2db      	uxtb	r3, r3

}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000032c 	.word	0x2000032c

0800208c <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	@ 0x30
 8002090:	af04      	add	r7, sp, #16
 8002092:	6078      	str	r0, [r7, #4]
		int check=0;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 80020a0:	2364      	movs	r3, #100	@ 0x64
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	2306      	movs	r3, #6
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2301      	movs	r3, #1
 80020b0:	221d      	movs	r2, #29
 80020b2:	218f      	movs	r1, #143	@ 0x8f
 80020b4:	4829      	ldr	r0, [pc, #164]	@ (800215c <bmp581_read_precise_normal+0xd0>)
 80020b6:	f006 f869 	bl	800818c <HAL_I2C_Mem_Read>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <bmp581_read_precise_normal+0x38>
					check=1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d141      	bne.n	800214e <bmp581_read_precise_normal+0xc2>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4313      	orrs	r3, r2
 80020d4:	7b3a      	ldrb	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80020da:	7c7b      	ldrb	r3, [r7, #17]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	7c3b      	ldrb	r3, [r7, #16]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	4313      	orrs	r3, r2
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
		bmp581->press=(float) intbufferpres/64.0;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f4:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002160 <bmp581_read_precise_normal+0xd4>
 80020f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edc3 7a03 	vstr	s15, [r3, #12]
		bmp581->temps=(float) intbuffertemp/65536.0;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002164 <bmp581_read_precise_normal+0xd8>
 8002110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	edc3 7a04 	vstr	s15, [r3, #16]

		bmp581->altitude= (1.0f - powf(bmp581->press / 101325.0f, 0.190295f)) * 44330.0f;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002120:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002168 <bmp581_read_precise_normal+0xdc>
 8002124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002128:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800216c <bmp581_read_precise_normal+0xe0>
 800212c:	eeb0 0a47 	vmov.f32	s0, s14
 8002130:	f016 fbb4 	bl	801889c <powf>
 8002134:	eef0 7a40 	vmov.f32	s15, s0
 8002138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800213c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002140:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002170 <bmp581_read_precise_normal+0xe4>
 8002144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edc3 7a05 	vstr	s15, [r3, #20]
		}

		return check;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	b2db      	uxtb	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000032c 	.word	0x2000032c
 8002160:	42800000 	.word	0x42800000
 8002164:	47800000 	.word	0x47800000
 8002168:	47c5e680 	.word	0x47c5e680
 800216c:	3e42dcb1 	.word	0x3e42dcb1
 8002170:	472d2a00 	.word	0x472d2a00

08002174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <MX_DMA_Init+0x80>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <MX_DMA_Init+0x80>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6493      	str	r3, [r2, #72]	@ 0x48
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <MX_DMA_Init+0x80>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <MX_DMA_Init+0x80>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	4a17      	ldr	r2, [pc, #92]	@ (80021f4 <MX_DMA_Init+0x80>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6493      	str	r3, [r2, #72]	@ 0x48
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_DMA_Init+0x80>)
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2105      	movs	r1, #5
 80021ae:	200b      	movs	r0, #11
 80021b0:	f005 f8f2 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021b4:	200b      	movs	r0, #11
 80021b6:	f005 f909 	bl	80073cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2105      	movs	r1, #5
 80021be:	200c      	movs	r0, #12
 80021c0:	f005 f8ea 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021c4:	200c      	movs	r0, #12
 80021c6:	f005 f901 	bl	80073cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	200d      	movs	r0, #13
 80021d0:	f005 f8e2 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021d4:	200d      	movs	r0, #13
 80021d6:	f005 f8f9 	bl	80073cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2105      	movs	r1, #5
 80021de:	200f      	movs	r0, #15
 80021e0:	f005 f8da 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80021e4:	200f      	movs	r0, #15
 80021e6:	f005 f8f1 	bl	80073cc <HAL_NVIC_EnableIRQ>

}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800220e:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002214:	f043 0320 	orr.w	r3, r3, #32
 8002218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221a:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <MX_GPIO_Init+0x13c>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <MX_GPIO_Init+0x13c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002232:	4b40      	ldr	r3, [pc, #256]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	4a3c      	ldr	r2, [pc, #240]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224a:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <MX_GPIO_Init+0x13c>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a36      	ldr	r2, [pc, #216]	@ (8002334 <MX_GPIO_Init+0x13c>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <MX_GPIO_Init+0x13c>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2110      	movs	r1, #16
 8002272:	4831      	ldr	r0, [pc, #196]	@ (8002338 <MX_GPIO_Init+0x140>)
 8002274:	f005 fd90 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800227e:	482f      	ldr	r0, [pc, #188]	@ (800233c <MX_GPIO_Init+0x144>)
 8002280:	f005 fd8a 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002284:	2310      	movs	r3, #16
 8002286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002288:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229c:	f005 fbe2 	bl	8007a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022a0:	2310      	movs	r3, #16
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4820      	ldr	r0, [pc, #128]	@ (8002338 <MX_GPIO_Init+0x140>)
 80022b8:	f005 fbd4 	bl	8007a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022bc:	2302      	movs	r3, #2
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022c0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	481a      	ldr	r0, [pc, #104]	@ (800233c <MX_GPIO_Init+0x144>)
 80022d2:	f005 fbc7 	bl	8007a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d6:	2304      	movs	r3, #4
 80022d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4814      	ldr	r0, [pc, #80]	@ (800233c <MX_GPIO_Init+0x144>)
 80022ea:	f005 fbbb 	bl	8007a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 80022ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	@ (800233c <MX_GPIO_Init+0x144>)
 8002308:	f005 fbac 	bl	8007a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2105      	movs	r1, #5
 8002310:	2007      	movs	r0, #7
 8002312:	f005 f841 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002316:	2007      	movs	r0, #7
 8002318:	f005 f858 	bl	80073cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2105      	movs	r1, #5
 8002320:	200a      	movs	r0, #10
 8002322:	f005 f839 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002326:	200a      	movs	r0, #10
 8002328:	f005 f850 	bl	80073cc <HAL_NVIC_EnableIRQ>

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	48000800 	.word	0x48000800
 800233c:	48000400 	.word	0x48000400

08002340 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002346:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <MX_I2C1_Init+0x78>)
 8002348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <MX_I2C1_Init+0x74>)
 800234c:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <MX_I2C1_Init+0x7c>)
 800234e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002358:	2201      	movs	r2, #1
 800235a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <MX_I2C1_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <MX_I2C1_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <MX_I2C1_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800237a:	480e      	ldr	r0, [pc, #56]	@ (80023b4 <MX_I2C1_Init+0x74>)
 800237c:	f005 fd56 	bl	8007e2c <HAL_I2C_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002386:	f000 fca9 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <MX_I2C1_Init+0x74>)
 800238e:	f006 fad9 	bl	8008944 <HAL_I2CEx_ConfigAnalogFilter>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002398:	f000 fca0 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800239c:	2100      	movs	r1, #0
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_I2C1_Init+0x74>)
 80023a0:	f006 fb1b 	bl	80089da <HAL_I2CEx_ConfigDigitalFilter>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f000 fc97 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000032c 	.word	0x2000032c
 80023b8:	40005400 	.word	0x40005400
 80023bc:	20b182be 	.word	0x20b182be

080023c0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002438 <MX_I2C3_Init+0x78>)
 80023c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023cc:	4a1b      	ldr	r2, [pc, #108]	@ (800243c <MX_I2C3_Init+0x7c>)
 80023ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80023d0:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d6:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023d8:	2201      	movs	r2, #1
 80023da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023fa:	480e      	ldr	r0, [pc, #56]	@ (8002434 <MX_I2C3_Init+0x74>)
 80023fc:	f005 fd16 	bl	8007e2c <HAL_I2C_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002406:	f000 fc69 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800240a:	2100      	movs	r1, #0
 800240c:	4809      	ldr	r0, [pc, #36]	@ (8002434 <MX_I2C3_Init+0x74>)
 800240e:	f006 fa99 	bl	8008944 <HAL_I2CEx_ConfigAnalogFilter>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002418:	f000 fc60 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800241c:	2100      	movs	r1, #0
 800241e:	4805      	ldr	r0, [pc, #20]	@ (8002434 <MX_I2C3_Init+0x74>)
 8002420:	f006 fadb 	bl	80089da <HAL_I2CEx_ConfigDigitalFilter>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800242a:	f000 fc57 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000380 	.word	0x20000380
 8002438:	40007800 	.word	0x40007800
 800243c:	20b182be 	.word	0x20b182be

08002440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b09e      	sub	sp, #120	@ 0x78
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	2244      	movs	r2, #68	@ 0x44
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f012 fe75 	bl	8015150 <memset>
  if(i2cHandle->Instance==I2C1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5c      	ldr	r2, [pc, #368]	@ (80025dc <HAL_I2C_MspInit+0x19c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d155      	bne.n	800251c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002470:	2340      	movs	r3, #64	@ 0x40
 8002472:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	4618      	mov	r0, r3
 800247e:	f007 f909 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002488:	f000 fc28 	bl	8002cdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002490:	4a53      	ldr	r2, [pc, #332]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002498:	4b51      	ldr	r3, [pc, #324]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b4e      	ldr	r3, [pc, #312]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a8:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b0:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c2:	2312      	movs	r3, #18
 80024c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ce:	2304      	movs	r3, #4
 80024d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024dc:	f005 fac2 	bl	8007a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024f2:	2304      	movs	r3, #4
 80024f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024fa:	4619      	mov	r1, r3
 80024fc:	4839      	ldr	r0, [pc, #228]	@ (80025e4 <HAL_I2C_MspInit+0x1a4>)
 80024fe:	f005 fab1 	bl	8007a64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002502:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	4a36      	ldr	r2, [pc, #216]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800250c:	6593      	str	r3, [r2, #88]	@ 0x58
 800250e:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800251a:	e05a      	b.n	80025d2 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a31      	ldr	r2, [pc, #196]	@ (80025e8 <HAL_I2C_MspInit+0x1a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d155      	bne.n	80025d2 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800252a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800252c:	2300      	movs	r3, #0
 800252e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4618      	mov	r0, r3
 8002536:	f007 f8ad 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002540:	f000 fbcc 	bl	8002cdc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a25      	ldr	r2, [pc, #148]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255c:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002578:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002586:	2302      	movs	r3, #2
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002594:	f005 fa66 	bl	8007a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800259c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259e:	2312      	movs	r3, #18
 80025a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80025aa:	2308      	movs	r3, #8
 80025ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b2:	4619      	mov	r1, r3
 80025b4:	480d      	ldr	r0, [pc, #52]	@ (80025ec <HAL_I2C_MspInit+0x1ac>)
 80025b6:	f005 fa55 	bl	8007a64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80025c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_I2C_MspInit+0x1a0>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
}
 80025d2:	bf00      	nop
 80025d4:	3778      	adds	r7, #120	@ 0x78
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40005400 	.word	0x40005400
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48000400 	.word	0x48000400
 80025e8:	40007800 	.word	0x40007800
 80025ec:	48000800 	.word	0x48000800

080025f0 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 80025f6:	480d      	ldr	r0, [pc, #52]	@ (800262c <LED_Init+0x3c>)
 80025f8:	f007 ff2c 	bl	800a454 <HAL_TIM_PWM_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002600:	2300      	movs	r3, #0
 8002602:	80fb      	strh	r3, [r7, #6]
 8002604:	e006      	b.n	8002614 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <LED_Init+0x40>)
 800260a:	2100      	movs	r1, #0
 800260c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	3301      	adds	r3, #1
 8002612:	80fb      	strh	r3, [r7, #6]
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800261a:	d9f4      	bls.n	8002606 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <LED_Init+0x44>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002622:	797b      	ldrb	r3, [r7, #5]




}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20001488 	.word	0x20001488
 8002630:	20000d50 	.word	0x20000d50
 8002634:	20000e89 	.word	0x20000e89

08002638 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08b      	sub	sp, #44	@ 0x2c
 800263c:	af00      	add	r7, sp, #0
 800263e:	4604      	mov	r4, r0
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4623      	mov	r3, r4
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	4603      	mov	r3, r0
 800264c:	71bb      	strb	r3, [r7, #6]
 800264e:	460b      	mov	r3, r1
 8002650:	717b      	strb	r3, [r7, #5]
 8002652:	4613      	mov	r3, r2
 8002654:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8002656:	2300      	movs	r3, #0
 8002658:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8002662:	797b      	ldrb	r3, [r7, #5]
 8002664:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8002666:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800266a:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 800266c:	793b      	ldrb	r3, [r7, #4]
 800266e:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002670:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002674:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	e007      	b.n	800268c <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 800267c:	4a35      	ldr	r2, [pc, #212]	@ (8002754 <LED_Setcolour+0x11c>)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	4413      	add	r3, r2
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	3301      	adds	r3, #1
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002692:	ddf3      	ble.n	800267c <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8002694:	2300      	movs	r3, #0
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	e032      	b.n	8002700 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 800269a:	2300      	movs	r3, #0
 800269c:	77bb      	strb	r3, [r7, #30]
 800269e:	e029      	b.n	80026f4 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e020      	b.n	80026e8 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 80026a6:	7ffa      	ldrb	r2, [r7, #31]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	441a      	add	r2, r3
 80026ae:	7fbb      	ldrb	r3, [r7, #30]
 80026b0:	4413      	add	r3, r2
 80026b2:	3328      	adds	r3, #40	@ 0x28
 80026b4:	443b      	add	r3, r7
 80026b6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026ba:	461a      	mov	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa42 f303 	asr.w	r3, r2, r3
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 80026ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026cc:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <LED_Setcolour+0x11c>)
 80026ce:	215a      	movs	r1, #90	@ 0x5a
 80026d0:	54d1      	strb	r1, [r2, r3]
 80026d2:	e003      	b.n	80026dc <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 80026d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <LED_Setcolour+0x11c>)
 80026d8:	211e      	movs	r1, #30
 80026da:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 80026dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026de:	3301      	adds	r3, #1
 80026e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	dddb      	ble.n	80026a6 <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 80026ee:	7fbb      	ldrb	r3, [r7, #30]
 80026f0:	3301      	adds	r3, #1
 80026f2:	77bb      	strb	r3, [r7, #30]
 80026f4:	7fbb      	ldrb	r3, [r7, #30]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d9d2      	bls.n	80026a0 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d9c9      	bls.n	800269a <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e009      	b.n	8002720 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 800270c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800270e:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <LED_Setcolour+0x11c>)
 8002710:	2100      	movs	r1, #0
 8002712:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002716:	3301      	adds	r3, #1
 8002718:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002726:	dbf1      	blt.n	800270c <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e009      	b.n	8002742 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 800272e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002730:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <LED_Setcolour+0x11c>)
 8002732:	2100      	movs	r1, #0
 8002734:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002738:	3301      	adds	r3, #1
 800273a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	3301      	adds	r3, #1
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b04      	cmp	r3, #4
 8002746:	ddf2      	ble.n	800272e <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002748:	f000 f806 	bl	8002758 <LED_Update>

}
 800274c:	bf00      	nop
 800274e:	372c      	adds	r7, #44	@ 0x2c
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	20000d50 	.word	0x20000d50

08002758 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 800275e:	f240 1339 	movw	r3, #313	@ 0x139
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <LED_Update+0x28>)
 8002764:	2104      	movs	r1, #4
 8002766:	4807      	ldr	r0, [pc, #28]	@ (8002784 <LED_Update+0x2c>)
 8002768:	f008 f86c 	bl	800a844 <HAL_TIM_PWM_Start_DMA>
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002770:	2300      	movs	r3, #0
 8002772:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8002774:	79fb      	ldrb	r3, [r7, #7]

}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000d50 	.word	0x20000d50
 8002784:	20001488 	.word	0x20001488

08002788 <LED_Callback>:



void LED_Callback(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 800278c:	2104      	movs	r1, #4
 800278e:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <LED_Callback+0x18>)
 8002790:	f008 fa70 	bl	800ac74 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <LED_Callback+0x1c>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]


}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001488 	.word	0x20001488
 80027a4:	20000e89 	.word	0x20000e89

080027a8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d171      	bne.n	800289c <HAL_GPIO_EXTI_Callback+0xf4>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 80027b8:	2110      	movs	r1, #16
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027be:	f005 fad3 	bl	8007d68 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d109      	bne.n	80027dc <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 80027c8:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 80027ce:	f003 f847 	bl	8005860 <HAL_GetTick>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x124>)
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e05f      	b.n	800289c <HAL_GPIO_EXTI_Callback+0xf4>


					}
					else{

						gros_btn_time=(HAL_GetTick()-tbtn1);
 80027dc:	f003 f840 	bl	8005860 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4a3a      	ldr	r2, [pc, #232]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x124>)
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 80027ec:	601a      	str	r2, [r3, #0]


		if(gros_btn_time<=380){
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80027f6:	dc02      	bgt.n	80027fe <HAL_GPIO_EXTI_Callback+0x56>
#ifdef PARTIE_HAUT
			flag_bouton_servo=0;
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
#endif

							}
					if(gros_btn_time>=400 && gros_btn_time<=1500){
 80027fe:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002806:	db08      	blt.n	800281a <HAL_GPIO_EXTI_Callback+0x72>
 8002808:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002810:	4293      	cmp	r3, r2
 8002812:	dc02      	bgt.n	800281a <HAL_GPIO_EXTI_Callback+0x72>
#ifdef PARTIE_HAUT
						flag_bouton_servo=1;
 8002814:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
#endif
					}
					if(gros_btn_time>=1500 && gros_btn_time<=3500){
 800281a:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002822:	4293      	cmp	r3, r2
 8002824:	dd2a      	ble.n	800287c <HAL_GPIO_EXTI_Callback+0xd4>
 8002826:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800282e:	4293      	cmp	r3, r2
 8002830:	dc24      	bgt.n	800287c <HAL_GPIO_EXTI_Callback+0xd4>

						hauteur_Initiale=myDatabmp581.altitude;
 8002832:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_GPIO_EXTI_Callback+0x130>)
 8002838:	6013      	str	r3, [r2, #0]
						flag_calib=1;
 800283a:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x134>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
#ifdef PARTIE_HAUT
						create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8002840:	2300      	movs	r3, #0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	ed9f 5a26 	vldr	s10, [pc, #152]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002848:	eddf 4a25 	vldr	s9, [pc, #148]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 800284c:	ed9f 4a24 	vldr	s8, [pc, #144]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002850:	eddf 3a23 	vldr	s7, [pc, #140]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002854:	ed9f 3a22 	vldr	s6, [pc, #136]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002858:	eddf 2a21 	vldr	s5, [pc, #132]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 800285c:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002860:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002864:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002868:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 800286c:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80028e0 <HAL_GPIO_EXTI_Callback+0x138>
 8002870:	2320      	movs	r3, #32
 8002872:	2216      	movs	r2, #22
 8002874:	2182      	movs	r1, #130	@ 0x82
 8002876:	481b      	ldr	r0, [pc, #108]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002878:	f001 fd26 	bl	80042c8 <create_and_send_payload>
#endif

										}
					if(gros_btn_time>=4000){
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002884:	db07      	blt.n	8002896 <HAL_GPIO_EXTI_Callback+0xee>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800288a:	4817      	ldr	r0, [pc, #92]	@ (80028e8 <HAL_GPIO_EXTI_Callback+0x140>)
 800288c:	f005 fa9c 	bl	8007dc8 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

															}

					gros_btn_time=0;
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x120>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]


	}

#ifdef PARTIE_HAUT
	if(GPIO_Pin==GPIO_PIN_1){
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d10d      	bne.n	80028be <HAL_GPIO_EXTI_Callback+0x116>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_SET){
 80028a2:	2102      	movs	r1, #2
 80028a4:	4810      	ldr	r0, [pc, #64]	@ (80028e8 <HAL_GPIO_EXTI_Callback+0x140>)
 80028a6:	f005 fa5f 	bl	8007d68 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d103      	bne.n	80028b8 <HAL_GPIO_EXTI_Callback+0x110>
			flag_drop=0;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_GPIO_EXTI_Callback+0x144>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 80028b6:	e002      	b.n	80028be <HAL_GPIO_EXTI_Callback+0x116>
			flag_drop=1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_GPIO_EXTI_Callback+0x144>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
	}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000e8c 	.word	0x20000e8c
 80028cc:	20000be8 	.word	0x20000be8
 80028d0:	20000ea0 	.word	0x20000ea0
 80028d4:	20000768 	.word	0x20000768
 80028d8:	20000eb0 	.word	0x20000eb0
 80028dc:	20000e9c 	.word	0x20000e9c
 80028e0:	00000000 	.word	0x00000000
 80028e4:	200003d4 	.word	0x200003d4
 80028e8:	48000400 	.word	0x48000400
 80028ec:	20000e94 	.word	0x20000e94

080028f0 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

	LED_Callback();
 80028f8:	f7ff ff46 	bl	8002788 <LED_Callback>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	@ 0x28
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800290a:	f002 ff7e 	bl	800580a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800290e:	f000 f989 	bl	8002c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002912:	f7ff fc71 	bl	80021f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002916:	f7ff fc2d 	bl	8002174 <MX_DMA_Init>
  MX_ADC1_Init();
 800291a:	f7fe ff6d 	bl	80017f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800291e:	f7ff fd0f 	bl	8002340 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002922:	f7ff fd4d 	bl	80023c0 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002926:	f001 fffd 	bl	8004924 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800292a:	f002 f845 	bl	80049b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800292e:	f001 fe55 	bl	80045dc <MX_TIM3_Init>
  MX_TIM2_Init();
 8002932:	f001 fddd 	bl	80044f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002936:	f000 fb13 	bl	8002f60 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800293a:	f00c f86b 	bl	800ea14 <MX_FATFS_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <main+0x44>
    Error_Handler();
 8002944:	f000 f9ca 	bl	8002cdc <Error_Handler>
  }
  MX_TIM4_Init();
 8002948:	f001 fec0 	bl	80046cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 800294c:	f000 fbc2 	bl	80030d4 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002950:	2000      	movs	r0, #0
 8002952:	f000 fc29 	bl	80031a8 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002956:	2128      	movs	r1, #40	@ 0x28
 8002958:	2020      	movs	r0, #32
 800295a:	f000 fd67 	bl	800342c <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 800295e:	4a96      	ldr	r2, [pc, #600]	@ (8002bb8 <main+0x2b4>)
 8002960:	2301      	movs	r3, #1
 8002962:	ca06      	ldmia	r2, {r1, r2}
 8002964:	4895      	ldr	r0, [pc, #596]	@ (8002bbc <main+0x2b8>)
 8002966:	f000 fd3b 	bl	80033e0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800296a:	f000 fc35 	bl	80031d8 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002974:	4892      	ldr	r0, [pc, #584]	@ (8002bc0 <main+0x2bc>)
 8002976:	f005 fa0f 	bl	8007d98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002980:	488f      	ldr	r0, [pc, #572]	@ (8002bc0 <main+0x2bc>)
 8002982:	f005 fa09 	bl	8007d98 <HAL_GPIO_WritePin>


#ifdef PARTIE_HAUT
  if( release_mecanism()!=HAL_OK){
 8002986:	f000 fac1 	bl	8002f0c <release_mecanism>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <main+0xb8>
	  ssd1306_SetCursor(32, 40);
 8002990:	2128      	movs	r1, #40	@ 0x28
 8002992:	2020      	movs	r0, #32
 8002994:	f000 fd4a 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 fc05 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("servopbm", Font_7x10, White);
 800299e:	4a86      	ldr	r2, [pc, #536]	@ (8002bb8 <main+0x2b4>)
 80029a0:	2301      	movs	r3, #1
 80029a2:	ca06      	ldmia	r2, {r1, r2}
 80029a4:	4887      	ldr	r0, [pc, #540]	@ (8002bc4 <main+0x2c0>)
 80029a6:	f000 fd1b 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80029aa:	f000 fc15 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80029ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029b2:	f002 ff61 	bl	8005878 <HAL_Delay>
 	 pbmseeker=1;
 80029b6:	4b84      	ldr	r3, [pc, #528]	@ (8002bc8 <main+0x2c4>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]


   }
  flag_servo_started=1;
 80029bc:	4b83      	ldr	r3, [pc, #524]	@ (8002bcc <main+0x2c8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 80029c2:	2203      	movs	r2, #3
 80029c4:	4982      	ldr	r1, [pc, #520]	@ (8002bd0 <main+0x2cc>)
 80029c6:	4883      	ldr	r0, [pc, #524]	@ (8002bd4 <main+0x2d0>)
 80029c8:	f003 fb3c 	bl	8006044 <HAL_ADC_Start_DMA>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <main+0xfa>
	  ssd1306_SetCursor(32, 40);
 80029d2:	2128      	movs	r1, #40	@ 0x28
 80029d4:	2020      	movs	r0, #32
 80029d6:	f000 fd29 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 fbe4 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 80029e0:	4a75      	ldr	r2, [pc, #468]	@ (8002bb8 <main+0x2b4>)
 80029e2:	2301      	movs	r3, #1
 80029e4:	ca06      	ldmia	r2, {r1, r2}
 80029e6:	487c      	ldr	r0, [pc, #496]	@ (8002bd8 <main+0x2d4>)
 80029e8:	f000 fcfa 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80029ec:	f000 fbf4 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80029f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029f4:	f002 ff40 	bl	8005878 <HAL_Delay>
 	 pbmseeker=1;
 80029f8:	4b73      	ldr	r3, [pc, #460]	@ (8002bc8 <main+0x2c4>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 80029fe:	2064      	movs	r0, #100	@ 0x64
 8002a00:	f002 ff3a 	bl	8005878 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002a04:	4875      	ldr	r0, [pc, #468]	@ (8002bdc <main+0x2d8>)
 8002a06:	f009 fd21 	bl	800c44c <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002a0a:	2264      	movs	r2, #100	@ 0x64
 8002a0c:	4974      	ldr	r1, [pc, #464]	@ (8002be0 <main+0x2dc>)
 8002a0e:	4873      	ldr	r0, [pc, #460]	@ (8002bdc <main+0x2d8>)
 8002a10:	f009 fcd0 	bl	800c3b4 <HAL_UART_Receive_DMA>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <main+0x142>
	   ssd1306_SetCursor(32, 40);
 8002a1a:	2128      	movs	r1, #40	@ 0x28
 8002a1c:	2020      	movs	r0, #32
 8002a1e:	f000 fd05 	bl	800342c <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 fbc0 	bl	80031a8 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002a28:	4a63      	ldr	r2, [pc, #396]	@ (8002bb8 <main+0x2b4>)
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	ca06      	ldmia	r2, {r1, r2}
 8002a2e:	486d      	ldr	r0, [pc, #436]	@ (8002be4 <main+0x2e0>)
 8002a30:	f000 fcd6 	bl	80033e0 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002a34:	f000 fbd0 	bl	80031d8 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002a38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a3c:	f002 ff1c 	bl	8005878 <HAL_Delay>
  	pbmseeker=1;
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <main+0x2c4>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002a46:	f7ff fdd3 	bl	80025f0 <LED_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002a50:	2128      	movs	r1, #40	@ 0x28
 8002a52:	2020      	movs	r0, #32
 8002a54:	f000 fcea 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f000 fba5 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002a5e:	4a56      	ldr	r2, [pc, #344]	@ (8002bb8 <main+0x2b4>)
 8002a60:	2301      	movs	r3, #1
 8002a62:	ca06      	ldmia	r2, {r1, r2}
 8002a64:	4860      	ldr	r0, [pc, #384]	@ (8002be8 <main+0x2e4>)
 8002a66:	f000 fcbb 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002a6a:	f000 fbb5 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002a6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a72:	f002 ff01 	bl	8005878 <HAL_Delay>
 	 pbmseeker=1;
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <main+0x2c4>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002a7c:	f7fe faf8 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002a80:	485a      	ldr	r0, [pc, #360]	@ (8002bec <main+0x2e8>)
 8002a82:	f7ff faa5 	bl	8001fd0 <bmp581_init_precise_normal>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <main+0x1b4>
	  ssd1306_SetCursor(32, 40);
 8002a8c:	2128      	movs	r1, #40	@ 0x28
 8002a8e:	2020      	movs	r0, #32
 8002a90:	f000 fccc 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f000 fb87 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002a9a:	4a47      	ldr	r2, [pc, #284]	@ (8002bb8 <main+0x2b4>)
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	ca06      	ldmia	r2, {r1, r2}
 8002aa0:	4853      	ldr	r0, [pc, #332]	@ (8002bf0 <main+0x2ec>)
 8002aa2:	f000 fc9d 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002aa6:	f000 fb97 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002aaa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002aae:	f002 fee3 	bl	8005878 <HAL_Delay>
 	 pbmseeker=1;
 8002ab2:	4b45      	ldr	r3, [pc, #276]	@ (8002bc8 <main+0x2c4>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

   }
#endif

#ifdef PARTIE_HAUT
  if( INIT_PERM_TARVOS(TOP_ADDR, BOTTOM_ADDR)!=HAL_OK){
 8002ab8:	2116      	movs	r1, #22
 8002aba:	2015      	movs	r0, #21
 8002abc:	f001 fa68 	bl	8003f90 <INIT_PERM_TARVOS>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <main+0x1ee>
	  ssd1306_SetCursor(32, 40);
 8002ac6:	2128      	movs	r1, #40	@ 0x28
 8002ac8:	2020      	movs	r0, #32
 8002aca:	f000 fcaf 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 fb6a 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8002ad4:	4a38      	ldr	r2, [pc, #224]	@ (8002bb8 <main+0x2b4>)
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	ca06      	ldmia	r2, {r1, r2}
 8002ada:	4846      	ldr	r0, [pc, #280]	@ (8002bf4 <main+0x2f0>)
 8002adc:	f000 fc80 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002ae0:	f000 fb7a 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002ae4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ae8:	f002 fec6 	bl	8005878 <HAL_Delay>
 	 pbmseeker=1;
 8002aec:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <main+0x2c4>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 8002af2:	2064      	movs	r0, #100	@ 0x64
 8002af4:	f002 fec0 	bl	8005878 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002af8:	483f      	ldr	r0, [pc, #252]	@ (8002bf8 <main+0x2f4>)
 8002afa:	f009 fca7 	bl	800c44c <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 8002afe:	2205      	movs	r2, #5
 8002b00:	493e      	ldr	r1, [pc, #248]	@ (8002bfc <main+0x2f8>)
 8002b02:	483d      	ldr	r0, [pc, #244]	@ (8002bf8 <main+0x2f4>)
 8002b04:	f009 fc56 	bl	800c3b4 <HAL_UART_Receive_DMA>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <main+0x236>
	   ssd1306_SetCursor(32, 40);
 8002b0e:	2128      	movs	r1, #40	@ 0x28
 8002b10:	2020      	movs	r0, #32
 8002b12:	f000 fc8b 	bl	800342c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 fb46 	bl	80031a8 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002b1c:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <main+0x2b4>)
 8002b1e:	2301      	movs	r3, #1
 8002b20:	ca06      	ldmia	r2, {r1, r2}
 8002b22:	4837      	ldr	r0, [pc, #220]	@ (8002c00 <main+0x2fc>)
 8002b24:	f000 fc5c 	bl	80033e0 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002b28:	f000 fb56 	bl	80031d8 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002b2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b30:	f002 fea2 	bl	8005878 <HAL_Delay>
 	pbmseeker=1;
 8002b34:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <main+0x2c4>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8002b3a:	4832      	ldr	r0, [pc, #200]	@ (8002c04 <main+0x300>)
 8002b3c:	f007 fc20 	bl	800a380 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002b40:	200a      	movs	r0, #10
 8002b42:	f002 fe99 	bl	8005878 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8002b46:	2201      	movs	r2, #1
 8002b48:	492f      	ldr	r1, [pc, #188]	@ (8002c08 <main+0x304>)
 8002b4a:	4830      	ldr	r0, [pc, #192]	@ (8002c0c <main+0x308>)
 8002b4c:	f00d fd5e 	bl	801060c <f_mount>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <main+0x30c>)
 8002b56:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <main+0x30c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d125      	bne.n	8002bac <main+0x2a8>
  			  fres = f_mkdir("DEMO");
 8002b60:	482c      	ldr	r0, [pc, #176]	@ (8002c14 <main+0x310>)
 8002b62:	f00e fc27 	bl	80113b4 <f_mkdir>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <main+0x30c>)
 8002b6c:	701a      	strb	r2, [r3, #0]
  			  BYTE readBuf[30];
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8002b6e:	2212      	movs	r2, #18
 8002b70:	4929      	ldr	r1, [pc, #164]	@ (8002c18 <main+0x314>)
 8002b72:	482a      	ldr	r0, [pc, #168]	@ (8002c1c <main+0x318>)
 8002b74:	f00d fdae 	bl	80106d4 <f_open>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <main+0x30c>)
 8002b7e:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <main+0x30c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <main+0x29e>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	220b      	movs	r2, #11
 8002b8c:	4924      	ldr	r1, [pc, #144]	@ (8002c20 <main+0x31c>)
 8002b8e:	4823      	ldr	r0, [pc, #140]	@ (8002c1c <main+0x318>)
 8002b90:	f00d ff61 	bl	8010a56 <f_write>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <main+0x30c>)
 8002b9a:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002b9c:	481f      	ldr	r0, [pc, #124]	@ (8002c1c <main+0x318>)
 8002b9e:	f00e f987 	bl	8010eb0 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4918      	ldr	r1, [pc, #96]	@ (8002c08 <main+0x304>)
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f00d fd30 	bl	801060c <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002bac:	f7ff f80a 	bl	8001bc4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bb0:	f00e fddd 	bl	801176e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <main+0x2b0>
 8002bb8:	20000010 	.word	0x20000010
 8002bbc:	080191ac 	.word	0x080191ac
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	080191b4 	.word	0x080191b4
 8002bc8:	20000eb8 	.word	0x20000eb8
 8002bcc:	20000ea4 	.word	0x20000ea4
 8002bd0:	20000bec 	.word	0x20000bec
 8002bd4:	20000238 	.word	0x20000238
 8002bd8:	080191c0 	.word	0x080191c0
 8002bdc:	20001668 	.word	0x20001668
 8002be0:	200004d4 	.word	0x200004d4
 8002be4:	080191c8 	.word	0x080191c8
 8002be8:	080191d0 	.word	0x080191d0
 8002bec:	20000768 	.word	0x20000768
 8002bf0:	080191d8 	.word	0x080191d8
 8002bf4:	080191e0 	.word	0x080191e0
 8002bf8:	200015d4 	.word	0x200015d4
 8002bfc:	20000494 	.word	0x20000494
 8002c00:	080191ec 	.word	0x080191ec
 8002c04:	20001520 	.word	0x20001520
 8002c08:	080191f8 	.word	0x080191f8
 8002c0c:	20000780 	.word	0x20000780
 8002c10:	200009b4 	.word	0x200009b4
 8002c14:	080191fc 	.word	0x080191fc
 8002c18:	08019204 	.word	0x08019204
 8002c1c:	200009b8 	.word	0x200009b8
 8002c20:	08019214 	.word	0x08019214

08002c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b094      	sub	sp, #80	@ 0x50
 8002c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2a:	f107 0318 	add.w	r3, r7, #24
 8002c2e:	2238      	movs	r2, #56	@ 0x38
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f012 fa8c 	bl	8015150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c4a:	f005 ff13 	bl	8008a74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002c60:	2302      	movs	r3, #2
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002c64:	2319      	movs	r3, #25
 8002c66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f005 ffaf 	bl	8008bdc <HAL_RCC_OscConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002c84:	f000 f82a 	bl	8002cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c88:	230f      	movs	r3, #15
 8002c8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 faad 	bl	8009200 <HAL_RCC_ClockConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002cac:	f000 f816 	bl	8002cdc <Error_Handler>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3750      	adds	r7, #80	@ 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002cca:	f002 fdb7 	bl	800583c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <Error_Handler+0x8>

08002ce8 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(void){
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	b0b5      	sub	sp, #212	@ 0xd4
 8002cee:	af1e      	add	r7, sp, #120	@ 0x78

	uint16_t sizeligne=0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	FRESULT fres=FR_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

#ifdef PARTIE_HAUT

	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002cfc:	4b72      	ldr	r3, [pc, #456]	@ (8002ec8 <store_in_sd+0x1e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d02:	4b72      	ldr	r3, [pc, #456]	@ (8002ecc <store_in_sd+0x1e4>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002d08:	4b71      	ldr	r3, [pc, #452]	@ (8002ed0 <store_in_sd+0x1e8>)
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	6479      	str	r1, [r7, #68]	@ 0x44
			"%d,%d,%d,%0.7f,%0.7f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.0f,%0.0f,%0.0f,%d,%0.2f,%0.2f,%lu\n\r",
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002d0e:	4b71      	ldr	r3, [pc, #452]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc3f 	bl	8000598 <__aeabi_f2d>
 8002d1a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fc37 	bl	8000598 <__aeabi_f2d>
 8002d2a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002d2e:	4b69      	ldr	r3, [pc, #420]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002d30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc2f 	bl	8000598 <__aeabi_f2d>
 8002d3a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002d3e:	4b66      	ldr	r3, [pc, #408]	@ (8002ed8 <store_in_sd+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc28 	bl	8000598 <__aeabi_f2d>
 8002d48:	e9c7 0108 	strd	r0, r1, [r7, #32]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002d4c:	4b61      	ldr	r3, [pc, #388]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fc20 	bl	8000598 <__aeabi_f2d>
 8002d58:	e9c7 0106 	strd	r0, r1, [r7, #24]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002d5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc18 	bl	8000598 <__aeabi_f2d>
 8002d68:	e9c7 0104 	strd	r0, r1, [r7, #16]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002edc <store_in_sd+0x1f4>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc11 	bl	8000598 <__aeabi_f2d>
 8002d76:	e9c7 0102 	strd	r0, r1, [r7, #8]
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8002d7a:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <store_in_sd+0x1f8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fc0a 	bl	8000598 <__aeabi_f2d>
 8002d84:	e9c7 0100 	strd	r0, r1, [r7]
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8002d88:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <store_in_sd+0x1f8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fc03 	bl	8000598 <__aeabi_f2d>
 8002d92:	4682      	mov	sl, r0
 8002d94:	468b      	mov	fp, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8002d96:	4b52      	ldr	r3, [pc, #328]	@ (8002ee0 <store_in_sd+0x1f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbfc 	bl	8000598 <__aeabi_f2d>
 8002da0:	4680      	mov	r8, r0
 8002da2:	4689      	mov	r9, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8002da4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <store_in_sd+0x1ec>)
 8002da6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8002daa:	461e      	mov	r6, r3
 8002dac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <store_in_sd+0x1fc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbf1 	bl	8000598 <__aeabi_f2d>
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <store_in_sd+0x200>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fbea 	bl	8000598 <__aeabi_f2d>
 8002dc4:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <store_in_sd+0x204>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	931c      	str	r3, [sp, #112]	@ 0x70
 8002dca:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8002dce:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8002dd2:	9616      	str	r6, [sp, #88]	@ 0x58
 8002dd4:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 8002dd8:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 8002ddc:	ed97 7b00 	vldr	d7, [r7]
 8002de0:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002de4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002de8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002dec:	ed97 7b04 	vldr	d7, [r7, #16]
 8002df0:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002df4:	ed97 7b06 	vldr	d7, [r7, #24]
 8002df8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002dfc:	ed97 7b08 	vldr	d7, [r7, #32]
 8002e00:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e04:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002e08:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e0c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002e10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e14:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002e18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e1e:	9101      	str	r1, [sp, #4]
 8002e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e22:	9200      	str	r2, [sp, #0]
 8002e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e26:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <store_in_sd+0x208>)
 8002e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e2c:	4831      	ldr	r0, [pc, #196]	@ (8002ef4 <store_in_sd+0x20c>)
 8002e2e:	f012 f85f 	bl	8014ef0 <sniprintf>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
#endif


	 fres = f_mount(&FatFs, "", 1);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	492f      	ldr	r1, [pc, #188]	@ (8002ef8 <store_in_sd+0x210>)
 8002e3c:	482f      	ldr	r0, [pc, #188]	@ (8002efc <store_in_sd+0x214>)
 8002e3e:	f00d fbe5 	bl	801060c <f_mount>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			  if (fres == FR_OK) {
 8002e48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d134      	bne.n	8002eba <store_in_sd+0x1d2>
				  if(flag_drop==0){
 8002e50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ecc <store_in_sd+0x1e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <store_in_sd+0x182>
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002e58:	2212      	movs	r2, #18
 8002e5a:	4929      	ldr	r1, [pc, #164]	@ (8002f00 <store_in_sd+0x218>)
 8002e5c:	4829      	ldr	r0, [pc, #164]	@ (8002f04 <store_in_sd+0x21c>)
 8002e5e:	f00d fc39 	bl	80106d4 <f_open>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002e68:	e007      	b.n	8002e7a <store_in_sd+0x192>
					  fres = f_open(&fil, (uint8_t *) "BOT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
				  }
				  else{
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002e6a:	2212      	movs	r2, #18
 8002e6c:	4926      	ldr	r1, [pc, #152]	@ (8002f08 <store_in_sd+0x220>)
 8002e6e:	4825      	ldr	r0, [pc, #148]	@ (8002f04 <store_in_sd+0x21c>)
 8002e70:	f00d fc30 	bl	80106d4 <f_open>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif

				  }
				  if (fres == FR_OK) {
 8002e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <store_in_sd+0x1c8>
					  fres=f_lseek(&fil, f_size(&fil));
 8002e82:	4b20      	ldr	r3, [pc, #128]	@ (8002f04 <store_in_sd+0x21c>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4619      	mov	r1, r3
 8002e88:	481e      	ldr	r0, [pc, #120]	@ (8002f04 <store_in_sd+0x21c>)
 8002e8a:	f00e f840 	bl	8010f0e <f_lseek>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 8002e94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8002e98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e9c:	4915      	ldr	r1, [pc, #84]	@ (8002ef4 <store_in_sd+0x20c>)
 8002e9e:	4819      	ldr	r0, [pc, #100]	@ (8002f04 <store_in_sd+0x21c>)
 8002ea0:	f00d fdd9 	bl	8010a56 <f_write>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					  f_close(&fil);
 8002eaa:	4816      	ldr	r0, [pc, #88]	@ (8002f04 <store_in_sd+0x21c>)
 8002eac:	f00e f800 	bl	8010eb0 <f_close>
				  }
				  f_mount(NULL, "", 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4911      	ldr	r1, [pc, #68]	@ (8002ef8 <store_in_sd+0x210>)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f00d fba9 	bl	801060c <f_mount>
			  }


	return fres;
 8002eba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57

}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	375c      	adds	r7, #92	@ 0x5c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec8:	20000e9c 	.word	0x20000e9c
 8002ecc:	20000e94 	.word	0x20000e94
 8002ed0:	20000e98 	.word	0x20000e98
 8002ed4:	20000c7c 	.word	0x20000c7c
 8002ed8:	20000eb4 	.word	0x20000eb4
 8002edc:	20000768 	.word	0x20000768
 8002ee0:	20000748 	.word	0x20000748
 8002ee4:	20000bf4 	.word	0x20000bf4
 8002ee8:	20000bfc 	.word	0x20000bfc
 8002eec:	20000ec4 	.word	0x20000ec4
 8002ef0:	08019220 	.word	0x08019220
 8002ef4:	20000544 	.word	0x20000544
 8002ef8:	0801927c 	.word	0x0801927c
 8002efc:	20000780 	.word	0x20000780
 8002f00:	08019280 	.word	0x08019280
 8002f04:	200009b8 	.word	0x200009b8
 8002f08:	0801928c 	.word	0x0801928c

08002f0c <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <release_mecanism+0x1c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4802      	ldr	r0, [pc, #8]	@ (8002f28 <release_mecanism+0x1c>)
 8002f1e:	f007 fafb 	bl	800a518 <HAL_TIM_PWM_Start>
 8002f22:	4603      	mov	r3, r0


}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200014d4 	.word	0x200014d4

08002f2c <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <lock_mecanism+0x1c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002f38:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <lock_mecanism+0x1c>)
 8002f3e:	f007 faeb 	bl	800a518 <HAL_TIM_PWM_Start>
 8002f42:	4603      	mov	r3, r0


}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	200014d4 	.word	0x200014d4

08002f4c <stop_servo>:
void stop_servo(void){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f50:	2100      	movs	r1, #0
 8002f52:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <stop_servo+0x10>)
 8002f54:	f007 fbe0 	bl	800a718 <HAL_TIM_PWM_Stop>

}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	200014d4 	.word	0x200014d4

08002f60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f66:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <MX_SPI1_Init+0x78>)
 8002f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f72:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f7a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f86:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f96:	2218      	movs	r2, #24
 8002f98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fae:	2207      	movs	r2, #7
 8002fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fba:	2208      	movs	r2, #8
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fbe:	4805      	ldr	r0, [pc, #20]	@ (8002fd4 <MX_SPI1_Init+0x74>)
 8002fc0:	f006 fd58 	bl	8009a74 <HAL_SPI_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f7ff fe87 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000ec8 	.word	0x20000ec8
 8002fd8:	40013000 	.word	0x40013000

08002fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <HAL_SPI_MspInit+0x7c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d128      	bne.n	8003050 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_SPI_MspInit+0x80>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003002:	4a16      	ldr	r2, [pc, #88]	@ (800305c <HAL_SPI_MspInit+0x80>)
 8003004:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003008:	6613      	str	r3, [r2, #96]	@ 0x60
 800300a:	4b14      	ldr	r3, [pc, #80]	@ (800305c <HAL_SPI_MspInit+0x80>)
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_SPI_MspInit+0x80>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <HAL_SPI_MspInit+0x80>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_SPI_MspInit+0x80>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800302e:	23e0      	movs	r3, #224	@ 0xe0
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800303e:	2305      	movs	r3, #5
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800304c:	f004 fd0a 	bl	8007a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	@ 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40013000 	.word	0x40013000
 800305c:	40021000 	.word	0x40021000

08003060 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af04      	add	r7, sp, #16
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	2301      	movs	r3, #1
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	2200      	movs	r2, #0
 800308c:	2178      	movs	r1, #120	@ 0x78
 800308e:	4803      	ldr	r0, [pc, #12]	@ (800309c <ssd1306_WriteCommand+0x2c>)
 8003090:	f004 ff68 	bl	8007f64 <HAL_I2C_Mem_Write>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000380 	.word	0x20000380

080030a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f04f 32ff 	mov.w	r2, #4294967295
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2301      	movs	r3, #1
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	2178      	movs	r1, #120	@ 0x78
 80030c0:	4803      	ldr	r0, [pc, #12]	@ (80030d0 <ssd1306_WriteData+0x30>)
 80030c2:	f004 ff4f 	bl	8007f64 <HAL_I2C_Mem_Write>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000380 	.word	0x20000380

080030d4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030d8:	f7ff ffc2 	bl	8003060 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030dc:	2064      	movs	r0, #100	@ 0x64
 80030de:	f002 fbcb 	bl	8005878 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80030e2:	2000      	movs	r0, #0
 80030e4:	f000 f9ce 	bl	8003484 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80030e8:	2020      	movs	r0, #32
 80030ea:	f7ff ffc1 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffbe 	bl	8003070 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030f4:	20b0      	movs	r0, #176	@ 0xb0
 80030f6:	f7ff ffbb 	bl	8003070 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80030fa:	20c8      	movs	r0, #200	@ 0xc8
 80030fc:	f7ff ffb8 	bl	8003070 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff ffb5 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003106:	2010      	movs	r0, #16
 8003108:	f7ff ffb2 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800310c:	2040      	movs	r0, #64	@ 0x40
 800310e:	f7ff ffaf 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003112:	20ff      	movs	r0, #255	@ 0xff
 8003114:	f000 f9a2 	bl	800345c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003118:	20a1      	movs	r0, #161	@ 0xa1
 800311a:	f7ff ffa9 	bl	8003070 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800311e:	20a6      	movs	r0, #166	@ 0xa6
 8003120:	f7ff ffa6 	bl	8003070 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003124:	20a8      	movs	r0, #168	@ 0xa8
 8003126:	f7ff ffa3 	bl	8003070 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800312a:	203f      	movs	r0, #63	@ 0x3f
 800312c:	f7ff ffa0 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003130:	20a4      	movs	r0, #164	@ 0xa4
 8003132:	f7ff ff9d 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003136:	20d3      	movs	r0, #211	@ 0xd3
 8003138:	f7ff ff9a 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff ff97 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003142:	20d5      	movs	r0, #213	@ 0xd5
 8003144:	f7ff ff94 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003148:	20f0      	movs	r0, #240	@ 0xf0
 800314a:	f7ff ff91 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800314e:	20d9      	movs	r0, #217	@ 0xd9
 8003150:	f7ff ff8e 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003154:	2022      	movs	r0, #34	@ 0x22
 8003156:	f7ff ff8b 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800315a:	20da      	movs	r0, #218	@ 0xda
 800315c:	f7ff ff88 	bl	8003070 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003160:	2012      	movs	r0, #18
 8003162:	f7ff ff85 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003166:	20db      	movs	r0, #219	@ 0xdb
 8003168:	f7ff ff82 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800316c:	2020      	movs	r0, #32
 800316e:	f7ff ff7f 	bl	8003070 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003172:	208d      	movs	r0, #141	@ 0x8d
 8003174:	f7ff ff7c 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003178:	2014      	movs	r0, #20
 800317a:	f7ff ff79 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800317e:	2001      	movs	r0, #1
 8003180:	f000 f980 	bl	8003484 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003184:	2000      	movs	r0, #0
 8003186:	f000 f80f 	bl	80031a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800318a:	f000 f825 	bl	80031d8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <ssd1306_Init+0xd0>)
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <ssd1306_Init+0xd0>)
 8003196:	2200      	movs	r2, #0
 8003198:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800319a:	4b02      	ldr	r3, [pc, #8]	@ (80031a4 <ssd1306_Init+0xd0>)
 800319c:	2201      	movs	r2, #1
 800319e:	711a      	strb	r2, [r3, #4]
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000132c 	.word	0x2000132c

080031a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <ssd1306_Fill+0x14>
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <ssd1306_Fill+0x16>
 80031bc:	23ff      	movs	r3, #255	@ 0xff
 80031be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031c2:	4619      	mov	r1, r3
 80031c4:	4803      	ldr	r0, [pc, #12]	@ (80031d4 <ssd1306_Fill+0x2c>)
 80031c6:	f011 ffc3 	bl	8015150 <memset>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000f2c 	.word	0x20000f2c

080031d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031de:	2300      	movs	r3, #0
 80031e0:	71fb      	strb	r3, [r7, #7]
 80031e2:	e016      	b.n	8003212 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	3b50      	subs	r3, #80	@ 0x50
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff40 	bl	8003070 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff ff3d 	bl	8003070 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031f6:	2010      	movs	r0, #16
 80031f8:	f7ff ff3a 	bl	8003070 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	01db      	lsls	r3, r3, #7
 8003200:	4a08      	ldr	r2, [pc, #32]	@ (8003224 <ssd1306_UpdateScreen+0x4c>)
 8003202:	4413      	add	r3, r2
 8003204:	2180      	movs	r1, #128	@ 0x80
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff4a 	bl	80030a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	3301      	adds	r3, #1
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b07      	cmp	r3, #7
 8003216:	d9e5      	bls.n	80031e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000f2c 	.word	0x20000f2c

08003228 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
 8003232:	460b      	mov	r3, r1
 8003234:	71bb      	strb	r3, [r7, #6]
 8003236:	4613      	mov	r3, r2
 8003238:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db3d      	blt.n	80032be <ssd1306_DrawPixel+0x96>
 8003242:	79bb      	ldrb	r3, [r7, #6]
 8003244:	2b3f      	cmp	r3, #63	@ 0x3f
 8003246:	d83a      	bhi.n	80032be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003248:	797b      	ldrb	r3, [r7, #5]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11a      	bne.n	8003284 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800324e:	79fa      	ldrb	r2, [r7, #7]
 8003250:	79bb      	ldrb	r3, [r7, #6]
 8003252:	08db      	lsrs	r3, r3, #3
 8003254:	b2d8      	uxtb	r0, r3
 8003256:	4603      	mov	r3, r0
 8003258:	01db      	lsls	r3, r3, #7
 800325a:	4413      	add	r3, r2
 800325c:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <ssd1306_DrawPixel+0xa4>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	b25a      	sxtb	r2, r3
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	b25b      	sxtb	r3, r3
 8003270:	4313      	orrs	r3, r2
 8003272:	b259      	sxtb	r1, r3
 8003274:	79fa      	ldrb	r2, [r7, #7]
 8003276:	4603      	mov	r3, r0
 8003278:	01db      	lsls	r3, r3, #7
 800327a:	4413      	add	r3, r2
 800327c:	b2c9      	uxtb	r1, r1
 800327e:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <ssd1306_DrawPixel+0xa4>)
 8003280:	54d1      	strb	r1, [r2, r3]
 8003282:	e01d      	b.n	80032c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003284:	79fa      	ldrb	r2, [r7, #7]
 8003286:	79bb      	ldrb	r3, [r7, #6]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	4603      	mov	r3, r0
 800328e:	01db      	lsls	r3, r3, #7
 8003290:	4413      	add	r3, r2
 8003292:	4a0e      	ldr	r2, [pc, #56]	@ (80032cc <ssd1306_DrawPixel+0xa4>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	b25a      	sxtb	r2, r3
 8003298:	79bb      	ldrb	r3, [r7, #6]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	4013      	ands	r3, r2
 80032ac:	b259      	sxtb	r1, r3
 80032ae:	79fa      	ldrb	r2, [r7, #7]
 80032b0:	4603      	mov	r3, r0
 80032b2:	01db      	lsls	r3, r3, #7
 80032b4:	4413      	add	r3, r2
 80032b6:	b2c9      	uxtb	r1, r1
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <ssd1306_DrawPixel+0xa4>)
 80032ba:	54d1      	strb	r1, [r2, r3]
 80032bc:	e000      	b.n	80032c0 <ssd1306_DrawPixel+0x98>
        return;
 80032be:	bf00      	nop
    }
}
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000f2c 	.word	0x20000f2c

080032d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4604      	mov	r4, r0
 80032d8:	1d38      	adds	r0, r7, #4
 80032da:	e880 0006 	stmia.w	r0, {r1, r2}
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	4613      	mov	r3, r2
 80032e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b1f      	cmp	r3, #31
 80032ec:	d902      	bls.n	80032f4 <ssd1306_WriteChar+0x24>
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80032f2:	d901      	bls.n	80032f8 <ssd1306_WriteChar+0x28>
        return 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e06c      	b.n	80033d2 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80032f8:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	793b      	ldrb	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	dc06      	bgt.n	8003314 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003306:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 8003308:	885b      	ldrh	r3, [r3, #2]
 800330a:	461a      	mov	r2, r3
 800330c:	797b      	ldrb	r3, [r7, #5]
 800330e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	dd01      	ble.n	8003318 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003314:	2300      	movs	r3, #0
 8003316:	e05c      	b.n	80033d2 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e04c      	b.n	80033b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	3b20      	subs	r3, #32
 8003324:	7979      	ldrb	r1, [r7, #5]
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4619      	mov	r1, r3
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	440b      	add	r3, r1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e034      	b.n	80033a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800334e:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4413      	add	r3, r2
 800335a:	b2d8      	uxtb	r0, r3
 800335c:	4b1f      	ldr	r3, [pc, #124]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 800335e:	885b      	ldrh	r3, [r3, #2]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	7bba      	ldrb	r2, [r7, #14]
 800336c:	4619      	mov	r1, r3
 800336e:	f7ff ff5b 	bl	8003228 <ssd1306_DrawPixel>
 8003372:	e016      	b.n	80033a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4413      	add	r3, r2
 8003380:	b2d8      	uxtb	r0, r3
 8003382:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4413      	add	r3, r2
 800338e:	b2d9      	uxtb	r1, r3
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	f7ff ff43 	bl	8003228 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	793b      	ldrb	r3, [r7, #4]
 80033aa:	461a      	mov	r2, r3
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d3c5      	bcc.n	800333e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	797b      	ldrb	r3, [r7, #5]
 80033ba:	461a      	mov	r2, r3
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d3ad      	bcc.n	800331e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	793a      	ldrb	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <ssd1306_WriteChar+0x10c>)
 80033ce:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd90      	pop	{r4, r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000132c 	.word	0x2000132c

080033e0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	1d38      	adds	r0, r7, #4
 80033ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80033ee:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80033f0:	e012      	b.n	8003418 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	7818      	ldrb	r0, [r3, #0]
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	1d3a      	adds	r2, r7, #4
 80033fa:	ca06      	ldmia	r2, {r1, r2}
 80033fc:	f7ff ff68 	bl	80032d0 <ssd1306_WriteChar>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d002      	beq.n	8003412 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	e008      	b.n	8003424 <ssd1306_WriteString+0x44>
        }
        str++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e8      	bne.n	80033f2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	781b      	ldrb	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	460a      	mov	r2, r1
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	4613      	mov	r3, r2
 800343a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <ssd1306_SetCursor+0x2c>)
 8003442:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b03      	ldr	r3, [pc, #12]	@ (8003458 <ssd1306_SetCursor+0x2c>)
 800344a:	805a      	strh	r2, [r3, #2]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	2000132c 	.word	0x2000132c

0800345c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003466:	2381      	movs	r3, #129	@ 0x81
 8003468:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fdff 	bl	8003070 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fdfb 	bl	8003070 <ssd1306_WriteCommand>
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003494:	23af      	movs	r3, #175	@ 0xaf
 8003496:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003498:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <ssd1306_SetDisplayOn+0x38>)
 800349a:	2201      	movs	r2, #1
 800349c:	715a      	strb	r2, [r3, #5]
 800349e:	e004      	b.n	80034aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80034a0:	23ae      	movs	r3, #174	@ 0xae
 80034a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <ssd1306_SetDisplayOn+0x38>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fddf 	bl	8003070 <ssd1306_WriteCommand>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000132c 	.word	0x2000132c

080034c0 <statemachine>:
extern uint32_t timeindex;




void statemachine(void){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af02      	add	r7, sp, #8

	switch(state){
 80034c6:	4b5d      	ldr	r3, [pc, #372]	@ (800363c <statemachine+0x17c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	f200 82e8 	bhi.w	8003aa0 <statemachine+0x5e0>
 80034d0:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <statemachine+0x18>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	0800380d 	.word	0x0800380d
 80034e0:	0800392d 	.word	0x0800392d
 80034e4:	08003a67 	.word	0x08003a67

	case IDLE:
		ssd1306_Fill(Black);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7ff fe5d 	bl	80031a8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 80034ee:	2120      	movs	r1, #32
 80034f0:	2020      	movs	r0, #32
 80034f2:	f7ff ff9b 	bl	800342c <ssd1306_SetCursor>
switch(screenindex){
 80034f6:	4b52      	ldr	r3, [pc, #328]	@ (8003640 <statemachine+0x180>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d86f      	bhi.n	80035de <statemachine+0x11e>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <statemachine+0x44>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	0800354d 	.word	0x0800354d
 800350c:	08003577 	.word	0x08003577
 8003510:	080035a3 	.word	0x080035a3
case 0:
	if (vbat <= 7){
 8003514:	4b4b      	ldr	r3, [pc, #300]	@ (8003644 <statemachine+0x184>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800351e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d900      	bls.n	800352a <statemachine+0x6a>
					ssd1306_WriteString("bat_low", Font_6x8, White);
					LED_Setcolour(255,0,0,0,0,0);
				}
	break;
 8003528:	e059      	b.n	80035de <statemachine+0x11e>
					ssd1306_WriteString("bat_low", Font_6x8, White);
 800352a:	4a47      	ldr	r2, [pc, #284]	@ (8003648 <statemachine+0x188>)
 800352c:	2301      	movs	r3, #1
 800352e:	ca06      	ldmia	r2, {r1, r2}
 8003530:	4846      	ldr	r0, [pc, #280]	@ (800364c <statemachine+0x18c>)
 8003532:	f7ff ff55 	bl	80033e0 <ssd1306_WriteString>
					LED_Setcolour(255,0,0,0,0,0);
 8003536:	2300      	movs	r3, #0
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2300      	movs	r3, #0
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2300      	movs	r3, #0
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	20ff      	movs	r0, #255	@ 0xff
 8003546:	f7ff f877 	bl	8002638 <LED_Setcolour>
	break;
 800354a:	e048      	b.n	80035de <statemachine+0x11e>
case 1:
	if(flag_calib==0){
 800354c:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <statemachine+0x190>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13f      	bne.n	80035d4 <statemachine+0x114>
		ssd1306_WriteString("alt_cal", Font_6x8, White);
 8003554:	4a3c      	ldr	r2, [pc, #240]	@ (8003648 <statemachine+0x188>)
 8003556:	2301      	movs	r3, #1
 8003558:	ca06      	ldmia	r2, {r1, r2}
 800355a:	483e      	ldr	r0, [pc, #248]	@ (8003654 <statemachine+0x194>)
 800355c:	f7ff ff40 	bl	80033e0 <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,0,0);
 8003560:	2300      	movs	r3, #0
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	2200      	movs	r2, #0
 800356c:	21ff      	movs	r1, #255	@ 0xff
 800356e:	2000      	movs	r0, #0
 8003570:	f7ff f862 	bl	8002638 <LED_Setcolour>
				}
	break;
 8003574:	e02e      	b.n	80035d4 <statemachine+0x114>
case 2:
	if (GNSSData.fixType <= 2){
 8003576:	4b38      	ldr	r3, [pc, #224]	@ (8003658 <statemachine+0x198>)
 8003578:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800357c:	2b02      	cmp	r3, #2
 800357e:	d82b      	bhi.n	80035d8 <statemachine+0x118>
		ssd1306_WriteString("gps_fix", Font_6x8, White);
 8003580:	4a31      	ldr	r2, [pc, #196]	@ (8003648 <statemachine+0x188>)
 8003582:	2301      	movs	r3, #1
 8003584:	ca06      	ldmia	r2, {r1, r2}
 8003586:	4835      	ldr	r0, [pc, #212]	@ (800365c <statemachine+0x19c>)
 8003588:	f7ff ff2a 	bl	80033e0 <ssd1306_WriteString>
		LED_Setcolour(255,255,0,0,0,0);
 800358c:	2300      	movs	r3, #0
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2300      	movs	r3, #0
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	2200      	movs	r2, #0
 8003598:	21ff      	movs	r1, #255	@ 0xff
 800359a:	20ff      	movs	r0, #255	@ 0xff
 800359c:	f7ff f84c 	bl	8002638 <LED_Setcolour>
				}

	break;
 80035a0:	e01a      	b.n	80035d8 <statemachine+0x118>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 80035a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a6:	482e      	ldr	r0, [pc, #184]	@ (8003660 <statemachine+0x1a0>)
 80035a8:	f004 fbde 	bl	8007d68 <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d114      	bne.n	80035dc <statemachine+0x11c>
		ssd1306_WriteString("TELEPWR", Font_6x8, White);
 80035b2:	4a25      	ldr	r2, [pc, #148]	@ (8003648 <statemachine+0x188>)
 80035b4:	2301      	movs	r3, #1
 80035b6:	ca06      	ldmia	r2, {r1, r2}
 80035b8:	482a      	ldr	r0, [pc, #168]	@ (8003664 <statemachine+0x1a4>)
 80035ba:	f7ff ff11 	bl	80033e0 <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,0,0);
 80035be:	2300      	movs	r3, #0
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	22ff      	movs	r2, #255	@ 0xff
 80035ca:	21ff      	movs	r1, #255	@ 0xff
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7ff f833 	bl	8002638 <LED_Setcolour>
	}
	break;
 80035d2:	e003      	b.n	80035dc <statemachine+0x11c>
	break;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <statemachine+0x11e>
	break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <statemachine+0x11e>
	break;
 80035dc:	bf00      	nop
}


			ssd1306_SetCursor(32, 40);
 80035de:	2128      	movs	r1, #40	@ 0x28
 80035e0:	2020      	movs	r0, #32
 80035e2:	f7ff ff23 	bl	800342c <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"sat:%d",GNSSData.numSV);
 80035e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <statemachine+0x198>)
 80035e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80035ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003668 <statemachine+0x1a8>)
 80035ee:	2132      	movs	r1, #50	@ 0x32
 80035f0:	481e      	ldr	r0, [pc, #120]	@ (800366c <statemachine+0x1ac>)
 80035f2:	f011 fc7d 	bl	8014ef0 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 80035f6:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <statemachine+0x188>)
 80035f8:	2301      	movs	r3, #1
 80035fa:	ca06      	ldmia	r2, {r1, r2}
 80035fc:	481b      	ldr	r0, [pc, #108]	@ (800366c <statemachine+0x1ac>)
 80035fe:	f7ff feef 	bl	80033e0 <ssd1306_WriteString>
			ssd1306_SetCursor(32, 48);
 8003602:	2130      	movs	r1, #48	@ 0x30
 8003604:	2020      	movs	r0, #32
 8003606:	f7ff ff11 	bl	800342c <ssd1306_SetCursor>
		if(flag_calib==0){
 800360a:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <statemachine+0x190>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d132      	bne.n	8003678 <statemachine+0x1b8>
			snprintf((char *)screenbuffer,50,"Hba:%0.2f",myDatabmp581.altitude);
 8003612:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <statemachine+0x1b0>)
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ffbe 	bl	8000598 <__aeabi_f2d>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	e9cd 2300 	strd	r2, r3, [sp]
 8003624:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <statemachine+0x1b4>)
 8003626:	2132      	movs	r1, #50	@ 0x32
 8003628:	4810      	ldr	r0, [pc, #64]	@ (800366c <statemachine+0x1ac>)
 800362a:	f011 fc61 	bl	8014ef0 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 800362e:	4a06      	ldr	r2, [pc, #24]	@ (8003648 <statemachine+0x188>)
 8003630:	2301      	movs	r3, #1
 8003632:	ca06      	ldmia	r2, {r1, r2}
 8003634:	480d      	ldr	r0, [pc, #52]	@ (800366c <statemachine+0x1ac>)
 8003636:	f7ff fed3 	bl	80033e0 <ssd1306_WriteString>
 800363a:	e031      	b.n	80036a0 <statemachine+0x1e0>
 800363c:	20000e90 	.word	0x20000e90
 8003640:	20001368 	.word	0x20001368
 8003644:	20000bfc 	.word	0x20000bfc
 8003648:	20000008 	.word	0x20000008
 800364c:	08019298 	.word	0x08019298
 8003650:	20000e9c 	.word	0x20000e9c
 8003654:	080192a0 	.word	0x080192a0
 8003658:	20000c7c 	.word	0x20000c7c
 800365c:	080192a8 	.word	0x080192a8
 8003660:	48000400 	.word	0x48000400
 8003664:	080192b0 	.word	0x080192b0
 8003668:	080192b8 	.word	0x080192b8
 800366c:	20001334 	.word	0x20001334
 8003670:	20000768 	.word	0x20000768
 8003674:	080192c0 	.word	0x080192c0
			}
		else{
			snprintf((char *)screenbuffer,50,"Hre:%0.2f",hauteur_relative);
 8003678:	4b97      	ldr	r3, [pc, #604]	@ (80038d8 <statemachine+0x418>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff8b 	bl	8000598 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9cd 2300 	strd	r2, r3, [sp]
 800368a:	4a94      	ldr	r2, [pc, #592]	@ (80038dc <statemachine+0x41c>)
 800368c:	2132      	movs	r1, #50	@ 0x32
 800368e:	4894      	ldr	r0, [pc, #592]	@ (80038e0 <statemachine+0x420>)
 8003690:	f011 fc2e 	bl	8014ef0 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003694:	4a93      	ldr	r2, [pc, #588]	@ (80038e4 <statemachine+0x424>)
 8003696:	2301      	movs	r3, #1
 8003698:	ca06      	ldmia	r2, {r1, r2}
 800369a:	4891      	ldr	r0, [pc, #580]	@ (80038e0 <statemachine+0x420>)
 800369c:	f7ff fea0 	bl	80033e0 <ssd1306_WriteString>
#endif




delaycounterforscreenindex++;
 80036a0:	4b91      	ldr	r3, [pc, #580]	@ (80038e8 <statemachine+0x428>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	4a90      	ldr	r2, [pc, #576]	@ (80038e8 <statemachine+0x428>)
 80036a8:	6013      	str	r3, [r2, #0]
if(delaycounterforscreenindex>=5){
 80036aa:	4b8f      	ldr	r3, [pc, #572]	@ (80038e8 <statemachine+0x428>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	dd07      	ble.n	80036c2 <statemachine+0x202>
	delaycounterforscreenindex=0;
 80036b2:	4b8d      	ldr	r3, [pc, #564]	@ (80038e8 <statemachine+0x428>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
	screenindex++;
 80036b8:	4b8c      	ldr	r3, [pc, #560]	@ (80038ec <statemachine+0x42c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	4a8b      	ldr	r2, [pc, #556]	@ (80038ec <statemachine+0x42c>)
 80036c0:	6013      	str	r3, [r2, #0]
}

if(screenindex>3){
 80036c2:	4b8a      	ldr	r3, [pc, #552]	@ (80038ec <statemachine+0x42c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	dd02      	ble.n	80036d0 <statemachine+0x210>
	screenindex=0;
 80036ca:	4b88      	ldr	r3, [pc, #544]	@ (80038ec <statemachine+0x42c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
}

#ifdef PARTIE_HAUT
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,
 80036d0:	4b87      	ldr	r3, [pc, #540]	@ (80038f0 <statemachine+0x430>)
 80036d2:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80036d6:	4b86      	ldr	r3, [pc, #536]	@ (80038f0 <statemachine+0x430>)
 80036d8:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80036dc:	4b84      	ldr	r3, [pc, #528]	@ (80038f0 <statemachine+0x430>)
 80036de:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 80036e2:	4b7d      	ldr	r3, [pc, #500]	@ (80038d8 <statemachine+0x418>)
 80036e4:	ed93 6a00 	vldr	s12, [r3]
 80036e8:	4b81      	ldr	r3, [pc, #516]	@ (80038f0 <statemachine+0x430>)
 80036ea:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 80036ee:	4b80      	ldr	r3, [pc, #512]	@ (80038f0 <statemachine+0x430>)
 80036f0:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 80036f4:	4b7f      	ldr	r3, [pc, #508]	@ (80038f4 <statemachine+0x434>)
 80036f6:	ed93 3a00 	vldr	s6, [r3]
 80036fa:	4b7f      	ldr	r3, [pc, #508]	@ (80038f8 <statemachine+0x438>)
 80036fc:	edd3 3a03 	vldr	s7, [r3, #12]
 8003700:	4b7e      	ldr	r3, [pc, #504]	@ (80038fc <statemachine+0x43c>)
 8003702:	ed93 4a00 	vldr	s8, [r3]
 8003706:	4b7d      	ldr	r3, [pc, #500]	@ (80038fc <statemachine+0x43c>)
 8003708:	edd3 4a01 	vldr	s9, [r3, #4]
 800370c:	4b7b      	ldr	r3, [pc, #492]	@ (80038fc <statemachine+0x43c>)
 800370e:	ed93 5a02 	vldr	s10, [r3, #8]
 8003712:	4b7b      	ldr	r3, [pc, #492]	@ (8003900 <statemachine+0x440>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	eeb0 2a65 	vmov.f32	s4, s11
 800371c:	eef0 1a46 	vmov.f32	s3, s12
 8003720:	eeb0 1a66 	vmov.f32	s2, s13
 8003724:	eef0 0a47 	vmov.f32	s1, s14
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	2310      	movs	r3, #16
 800372e:	2216      	movs	r2, #22
 8003730:	2182      	movs	r1, #130	@ 0x82
 8003732:	4874      	ldr	r0, [pc, #464]	@ (8003904 <statemachine+0x444>)
 8003734:	f000 fdc8 	bl	80042c8 <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

vTaskDelay(pdMS_TO_TICKS(5));
 8003738:	2005      	movs	r0, #5
 800373a:	f00f f93d 	bl	80129b8 <vTaskDelay>

create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 800373e:	4b6c      	ldr	r3, [pc, #432]	@ (80038f0 <statemachine+0x430>)
 8003740:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003744:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <statemachine+0x430>)
 8003746:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 800374a:	4b69      	ldr	r3, [pc, #420]	@ (80038f0 <statemachine+0x430>)
 800374c:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003750:	4b61      	ldr	r3, [pc, #388]	@ (80038d8 <statemachine+0x418>)
 8003752:	ed93 6a00 	vldr	s12, [r3]
 8003756:	4b66      	ldr	r3, [pc, #408]	@ (80038f0 <statemachine+0x430>)
 8003758:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 800375c:	4b64      	ldr	r3, [pc, #400]	@ (80038f0 <statemachine+0x430>)
 800375e:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003762:	4b64      	ldr	r3, [pc, #400]	@ (80038f4 <statemachine+0x434>)
 8003764:	ed93 3a00 	vldr	s6, [r3]
 8003768:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <statemachine+0x438>)
 800376a:	edd3 3a03 	vldr	s7, [r3, #12]
 800376e:	4b63      	ldr	r3, [pc, #396]	@ (80038fc <statemachine+0x43c>)
 8003770:	ed93 4a00 	vldr	s8, [r3]
 8003774:	4b61      	ldr	r3, [pc, #388]	@ (80038fc <statemachine+0x43c>)
 8003776:	edd3 4a01 	vldr	s9, [r3, #4]
 800377a:	4b60      	ldr	r3, [pc, #384]	@ (80038fc <statemachine+0x43c>)
 800377c:	ed93 5a02 	vldr	s10, [r3, #8]
 8003780:	4b5f      	ldr	r3, [pc, #380]	@ (8003900 <statemachine+0x440>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	eeb0 2a65 	vmov.f32	s4, s11
 800378a:	eef0 1a46 	vmov.f32	s3, s12
 800378e:	eeb0 1a66 	vmov.f32	s2, s13
 8003792:	eef0 0a47 	vmov.f32	s1, s14
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	2310      	movs	r3, #16
 800379c:	2201      	movs	r2, #1
 800379e:	2182      	movs	r1, #130	@ 0x82
 80037a0:	4858      	ldr	r0, [pc, #352]	@ (8003904 <statemachine+0x444>)
 80037a2:	f000 fd91 	bl	80042c8 <create_and_send_payload>
		  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
		  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
#endif


if((flag_drop==1) && (flag_calib==1)){
 80037a6:	4b58      	ldr	r3, [pc, #352]	@ (8003908 <statemachine+0x448>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	f040 8173 	bne.w	8003a96 <statemachine+0x5d6>
 80037b0:	4b56      	ldr	r3, [pc, #344]	@ (800390c <statemachine+0x44c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 816e 	bne.w	8003a96 <statemachine+0x5d6>

				state++;
 80037ba:	4b55      	ldr	r3, [pc, #340]	@ (8003910 <statemachine+0x450>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4b53      	ldr	r3, [pc, #332]	@ (8003910 <statemachine+0x450>)
 80037c4:	701a      	strb	r2, [r3, #0]
				cpt_tps_chute=timeindex;
 80037c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003900 <statemachine+0x440>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a52      	ldr	r2, [pc, #328]	@ (8003914 <statemachine+0x454>)
 80037cc:	6013      	str	r3, [r2, #0]
#ifdef PARTIE_HAUT
				create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	ed9f 5a51 	vldr	s10, [pc, #324]	@ 8003918 <statemachine+0x458>
 80037d6:	eddf 4a50 	vldr	s9, [pc, #320]	@ 8003918 <statemachine+0x458>
 80037da:	ed9f 4a4f 	vldr	s8, [pc, #316]	@ 8003918 <statemachine+0x458>
 80037de:	eddf 3a4e 	vldr	s7, [pc, #312]	@ 8003918 <statemachine+0x458>
 80037e2:	ed9f 3a4d 	vldr	s6, [pc, #308]	@ 8003918 <statemachine+0x458>
 80037e6:	eddf 2a4c 	vldr	s5, [pc, #304]	@ 8003918 <statemachine+0x458>
 80037ea:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8003918 <statemachine+0x458>
 80037ee:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8003918 <statemachine+0x458>
 80037f2:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 8003918 <statemachine+0x458>
 80037f6:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8003918 <statemachine+0x458>
 80037fa:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8003918 <statemachine+0x458>
 80037fe:	2310      	movs	r3, #16
 8003800:	2216      	movs	r2, #22
 8003802:	2182      	movs	r1, #130	@ 0x82
 8003804:	483f      	ldr	r0, [pc, #252]	@ (8003904 <statemachine+0x444>)
 8003806:	f000 fd5f 	bl	80042c8 <create_and_send_payload>
#endif
			}

		break;
 800380a:	e144      	b.n	8003a96 <statemachine+0x5d6>

	case PRESEPARATION:
		ssd1306_Fill(Black);
 800380c:	2000      	movs	r0, #0
 800380e:	f7ff fccb 	bl	80031a8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003812:	2120      	movs	r1, #32
 8003814:	2020      	movs	r0, #32
 8003816:	f7ff fe09 	bl	800342c <ssd1306_SetCursor>
		ssd1306_WriteString("PRE", Font_16x24, White);
 800381a:	4a40      	ldr	r2, [pc, #256]	@ (800391c <statemachine+0x45c>)
 800381c:	2301      	movs	r3, #1
 800381e:	ca06      	ldmia	r2, {r1, r2}
 8003820:	483f      	ldr	r0, [pc, #252]	@ (8003920 <statemachine+0x460>)
 8003822:	f7ff fddd 	bl	80033e0 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003826:	2138      	movs	r1, #56	@ 0x38
 8003828:	2020      	movs	r0, #32
 800382a:	f7ff fdff 	bl	800342c <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"h=%f",hauteur_relative);
 800382e:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <statemachine+0x418>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc feb0 	bl	8000598 <__aeabi_f2d>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	e9cd 2300 	strd	r2, r3, [sp]
 8003840:	4a38      	ldr	r2, [pc, #224]	@ (8003924 <statemachine+0x464>)
 8003842:	2132      	movs	r1, #50	@ 0x32
 8003844:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <statemachine+0x420>)
 8003846:	f011 fb53 	bl	8014ef0 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 800384a:	4a26      	ldr	r2, [pc, #152]	@ (80038e4 <statemachine+0x424>)
 800384c:	2301      	movs	r3, #1
 800384e:	ca06      	ldmia	r2, {r1, r2}
 8003850:	4823      	ldr	r0, [pc, #140]	@ (80038e0 <statemachine+0x420>)
 8003852:	f7ff fdc5 	bl	80033e0 <ssd1306_WriteString>
#ifdef PARTIE_HAUT
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003856:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <statemachine+0x430>)
 8003858:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800385c:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <statemachine+0x430>)
 800385e:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003862:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <statemachine+0x430>)
 8003864:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003868:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <statemachine+0x418>)
 800386a:	ed93 6a00 	vldr	s12, [r3]
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <statemachine+0x430>)
 8003870:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <statemachine+0x430>)
 8003876:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <statemachine+0x434>)
 800387c:	ed93 3a00 	vldr	s6, [r3]
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <statemachine+0x438>)
 8003882:	edd3 3a03 	vldr	s7, [r3, #12]
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <statemachine+0x43c>)
 8003888:	ed93 4a00 	vldr	s8, [r3]
 800388c:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <statemachine+0x43c>)
 800388e:	edd3 4a01 	vldr	s9, [r3, #4]
 8003892:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <statemachine+0x43c>)
 8003894:	ed93 5a02 	vldr	s10, [r3, #8]
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <statemachine+0x440>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	eeb0 2a65 	vmov.f32	s4, s11
 80038a2:	eef0 1a46 	vmov.f32	s3, s12
 80038a6:	eeb0 1a66 	vmov.f32	s2, s13
 80038aa:	eef0 0a47 	vmov.f32	s1, s14
 80038ae:	eeb0 0a67 	vmov.f32	s0, s15
 80038b2:	2310      	movs	r3, #16
 80038b4:	2201      	movs	r2, #1
 80038b6:	2182      	movs	r1, #130	@ 0x82
 80038b8:	4812      	ldr	r0, [pc, #72]	@ (8003904 <statemachine+0x444>)
 80038ba:	f000 fd05 	bl	80042c8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if(flag_separation==1){
 80038be:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <statemachine+0x468>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 80e9 	bne.w	8003a9a <statemachine+0x5da>
			state++;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <statemachine+0x450>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <statemachine+0x450>)
 80038d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80038d4:	e0e1      	b.n	8003a9a <statemachine+0x5da>
 80038d6:	bf00      	nop
 80038d8:	20000eb4 	.word	0x20000eb4
 80038dc:	080192cc 	.word	0x080192cc
 80038e0:	20001334 	.word	0x20001334
 80038e4:	20000008 	.word	0x20000008
 80038e8:	2000136c 	.word	0x2000136c
 80038ec:	20001368 	.word	0x20001368
 80038f0:	20000c7c 	.word	0x20000c7c
 80038f4:	20000bf4 	.word	0x20000bf4
 80038f8:	20000768 	.word	0x20000768
 80038fc:	20000748 	.word	0x20000748
 8003900:	20000ec4 	.word	0x20000ec4
 8003904:	200003d4 	.word	0x200003d4
 8003908:	20000e94 	.word	0x20000e94
 800390c:	20000e9c 	.word	0x20000e9c
 8003910:	20000e90 	.word	0x20000e90
 8003914:	20000ea8 	.word	0x20000ea8
 8003918:	00000000 	.word	0x00000000
 800391c:	20000018 	.word	0x20000018
 8003920:	080192d8 	.word	0x080192d8
 8003924:	080192dc 	.word	0x080192dc
 8003928:	20000e98 	.word	0x20000e98

	case POSTSEPARATION:
		ssd1306_Fill(Black);
 800392c:	2000      	movs	r0, #0
 800392e:	f7ff fc3b 	bl	80031a8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003932:	2120      	movs	r1, #32
 8003934:	2020      	movs	r0, #32
 8003936:	f7ff fd79 	bl	800342c <ssd1306_SetCursor>
		ssd1306_WriteString("POST", Font_16x24, White);
 800393a:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa8 <statemachine+0x5e8>)
 800393c:	2301      	movs	r3, #1
 800393e:	ca06      	ldmia	r2, {r1, r2}
 8003940:	485a      	ldr	r0, [pc, #360]	@ (8003aac <statemachine+0x5ec>)
 8003942:	f7ff fd4d 	bl	80033e0 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003946:	2138      	movs	r1, #56	@ 0x38
 8003948:	2020      	movs	r0, #32
 800394a:	f7ff fd6f 	bl	800342c <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"tps=%lu",(timeindex-cpt_tps_chute));
 800394e:	4b58      	ldr	r3, [pc, #352]	@ (8003ab0 <statemachine+0x5f0>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <statemachine+0x5f4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	4a57      	ldr	r2, [pc, #348]	@ (8003ab8 <statemachine+0x5f8>)
 800395a:	2132      	movs	r1, #50	@ 0x32
 800395c:	4857      	ldr	r0, [pc, #348]	@ (8003abc <statemachine+0x5fc>)
 800395e:	f011 fac7 	bl	8014ef0 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003962:	4a57      	ldr	r2, [pc, #348]	@ (8003ac0 <statemachine+0x600>)
 8003964:	2301      	movs	r3, #1
 8003966:	ca06      	ldmia	r2, {r1, r2}
 8003968:	4854      	ldr	r0, [pc, #336]	@ (8003abc <statemachine+0x5fc>)
 800396a:	f7ff fd39 	bl	80033e0 <ssd1306_WriteString>

#ifdef PARTIE_HAUT
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,
 800396e:	4b55      	ldr	r3, [pc, #340]	@ (8003ac4 <statemachine+0x604>)
 8003970:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003974:	4b53      	ldr	r3, [pc, #332]	@ (8003ac4 <statemachine+0x604>)
 8003976:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 800397a:	4b52      	ldr	r3, [pc, #328]	@ (8003ac4 <statemachine+0x604>)
 800397c:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003980:	4b51      	ldr	r3, [pc, #324]	@ (8003ac8 <statemachine+0x608>)
 8003982:	ed93 6a00 	vldr	s12, [r3]
 8003986:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac4 <statemachine+0x604>)
 8003988:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 800398c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac4 <statemachine+0x604>)
 800398e:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003992:	4b4e      	ldr	r3, [pc, #312]	@ (8003acc <statemachine+0x60c>)
 8003994:	ed93 3a00 	vldr	s6, [r3]
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <statemachine+0x610>)
 800399a:	edd3 3a03 	vldr	s7, [r3, #12]
 800399e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <statemachine+0x614>)
 80039a0:	ed93 4a00 	vldr	s8, [r3]
 80039a4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad4 <statemachine+0x614>)
 80039a6:	edd3 4a01 	vldr	s9, [r3, #4]
 80039aa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <statemachine+0x614>)
 80039ac:	ed93 5a02 	vldr	s10, [r3, #8]
 80039b0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <statemachine+0x5f0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	eeb0 2a65 	vmov.f32	s4, s11
 80039ba:	eef0 1a46 	vmov.f32	s3, s12
 80039be:	eeb0 1a66 	vmov.f32	s2, s13
 80039c2:	eef0 0a47 	vmov.f32	s1, s14
 80039c6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ca:	2310      	movs	r3, #16
 80039cc:	2216      	movs	r2, #22
 80039ce:	2182      	movs	r1, #130	@ 0x82
 80039d0:	4841      	ldr	r0, [pc, #260]	@ (8003ad8 <statemachine+0x618>)
 80039d2:	f000 fc79 	bl	80042c8 <create_and_send_payload>
								  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
								  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

		vTaskDelay(pdMS_TO_TICKS(5));
 80039d6:	2005      	movs	r0, #5
 80039d8:	f00e ffee 	bl	80129b8 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 80039dc:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <statemachine+0x604>)
 80039de:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80039e2:	4b38      	ldr	r3, [pc, #224]	@ (8003ac4 <statemachine+0x604>)
 80039e4:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80039e8:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <statemachine+0x604>)
 80039ea:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <statemachine+0x608>)
 80039f0:	ed93 6a00 	vldr	s12, [r3]
 80039f4:	4b33      	ldr	r3, [pc, #204]	@ (8003ac4 <statemachine+0x604>)
 80039f6:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 80039fa:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <statemachine+0x604>)
 80039fc:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <statemachine+0x60c>)
 8003a02:	ed93 3a00 	vldr	s6, [r3]
 8003a06:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <statemachine+0x610>)
 8003a08:	edd3 3a03 	vldr	s7, [r3, #12]
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <statemachine+0x614>)
 8003a0e:	ed93 4a00 	vldr	s8, [r3]
 8003a12:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <statemachine+0x614>)
 8003a14:	edd3 4a01 	vldr	s9, [r3, #4]
 8003a18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <statemachine+0x614>)
 8003a1a:	ed93 5a02 	vldr	s10, [r3, #8]
 8003a1e:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <statemachine+0x5f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	eeb0 2a65 	vmov.f32	s4, s11
 8003a28:	eef0 1a46 	vmov.f32	s3, s12
 8003a2c:	eeb0 1a66 	vmov.f32	s2, s13
 8003a30:	eef0 0a47 	vmov.f32	s1, s14
 8003a34:	eeb0 0a67 	vmov.f32	s0, s15
 8003a38:	2310      	movs	r3, #16
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2182      	movs	r1, #130	@ 0x82
 8003a3e:	4826      	ldr	r0, [pc, #152]	@ (8003ad8 <statemachine+0x618>)
 8003a40:	f000 fc42 	bl	80042c8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if((timeindex-cpt_tps_chute)>=120){
 8003a44:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <statemachine+0x5f0>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <statemachine+0x5f4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b77      	cmp	r3, #119	@ 0x77
 8003a50:	d925      	bls.n	8003a9e <statemachine+0x5de>
			state++;
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <statemachine+0x61c>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <statemachine+0x61c>)
 8003a5c:	701a      	strb	r2, [r3, #0]
			flag_fin=1;
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <statemachine+0x620>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]





		break;
 8003a64:	e01b      	b.n	8003a9e <statemachine+0x5de>
	case FIN:

		ssd1306_Fill(Black);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7ff fb9e 	bl	80031a8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003a6c:	2120      	movs	r1, #32
 8003a6e:	2020      	movs	r0, #32
 8003a70:	f7ff fcdc 	bl	800342c <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 8003a74:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa8 <statemachine+0x5e8>)
 8003a76:	2301      	movs	r3, #1
 8003a78:	ca06      	ldmia	r2, {r1, r2}
 8003a7a:	481a      	ldr	r0, [pc, #104]	@ (8003ae4 <statemachine+0x624>)
 8003a7c:	f7ff fcb0 	bl	80033e0 <ssd1306_WriteString>

		LED_Setcolour(0,255,0,0,255,0);
 8003a80:	2300      	movs	r3, #0
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	23ff      	movs	r3, #255	@ 0xff
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	21ff      	movs	r1, #255	@ 0xff
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7fe fdd2 	bl	8002638 <LED_Setcolour>

		break;
 8003a94:	e004      	b.n	8003aa0 <statemachine+0x5e0>
		break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <statemachine+0x5e0>
		break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <statemachine+0x5e0>
		break;
 8003a9e:	bf00      	nop
	}

}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000018 	.word	0x20000018
 8003aac:	080192e4 	.word	0x080192e4
 8003ab0:	20000ec4 	.word	0x20000ec4
 8003ab4:	20000ea8 	.word	0x20000ea8
 8003ab8:	080192ec 	.word	0x080192ec
 8003abc:	20001334 	.word	0x20001334
 8003ac0:	20000008 	.word	0x20000008
 8003ac4:	20000c7c 	.word	0x20000c7c
 8003ac8:	20000eb4 	.word	0x20000eb4
 8003acc:	20000bf4 	.word	0x20000bf4
 8003ad0:	20000768 	.word	0x20000768
 8003ad4:	20000748 	.word	0x20000748
 8003ad8:	200003d4 	.word	0x200003d4
 8003adc:	20000e90 	.word	0x20000e90
 8003ae0:	20000eac 	.word	0x20000eac
 8003ae4:	080192f4 	.word	0x080192f4

08003ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <HAL_MspInit+0x50>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	4a11      	ldr	r2, [pc, #68]	@ (8003b38 <HAL_MspInit+0x50>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003afa:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <HAL_MspInit+0x50>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <HAL_MspInit+0x50>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b38 <HAL_MspInit+0x50>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <HAL_MspInit+0x50>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	210f      	movs	r1, #15
 8003b22:	f06f 0001 	mvn.w	r0, #1
 8003b26:	f003 fc37 	bl	8007398 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b2a:	f005 f847 	bl	8008bbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	@ 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c00 <HAL_InitTick+0xc4>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	4a2b      	ldr	r2, [pc, #172]	@ (8003c00 <HAL_InitTick+0xc4>)
 8003b52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b56:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b58:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <HAL_InitTick+0xc4>)
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b64:	f107 020c 	add.w	r2, r7, #12
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f005 fd1a 	bl	80095a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b74:	f005 fd02 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 8003b78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_InitTick+0xc8>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9b      	lsrs	r3, r3, #18
 8003b84:	3b01      	subs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003b8a:	4a20      	ldr	r2, [pc, #128]	@ (8003c0c <HAL_InitTick+0xd0>)
 8003b8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b96:	4a1c      	ldr	r2, [pc, #112]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba2:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003ba8:	4817      	ldr	r0, [pc, #92]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003baa:	f006 fb91 	bl	800a2d0 <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11b      	bne.n	8003bf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003bbc:	4812      	ldr	r0, [pc, #72]	@ (8003c08 <HAL_InitTick+0xcc>)
 8003bbe:	f006 fbdf 	bl	800a380 <HAL_TIM_Base_Start_IT>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bd0:	2019      	movs	r0, #25
 8003bd2:	f003 fbfb 	bl	80073cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0f      	cmp	r3, #15
 8003bda:	d808      	bhi.n	8003bee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	2019      	movs	r0, #25
 8003be2:	f003 fbd9 	bl	8007398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <HAL_InitTick+0xd4>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e002      	b.n	8003bf4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3730      	adds	r7, #48	@ 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	431bde83 	.word	0x431bde83
 8003c08:	20001370 	.word	0x20001370
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	20000028 	.word	0x20000028

08003c14 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b092      	sub	sp, #72	@ 0x48
 8003c18:	af08      	add	r7, sp, #32
 8003c1a:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	9306      	str	r3, [sp, #24]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9303      	str	r3, [sp, #12]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	9302      	str	r3, [sp, #8]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	4a03      	ldr	r2, [pc, #12]	@ (8003c78 <hard_fault_handler_c+0x64>)
 8003c6c:	21c8      	movs	r1, #200	@ 0xc8
 8003c6e:	4803      	ldr	r0, [pc, #12]	@ (8003c7c <hard_fault_handler_c+0x68>)
 8003c70:	f011 f93e 	bl	8014ef0 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <hard_fault_handler_c+0x60>
 8003c78:	080192f8 	.word	0x080192f8
 8003c7c:	200013bc 	.word	0x200013bc

08003c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <NMI_Handler+0x4>

08003c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8003c8c:	f01e 0f04 	tst.w	lr, #4
 8003c90:	bf0c      	ite	eq
 8003c92:	f3ef 8008 	mrseq	r0, MSP
 8003c96:	f3ef 8009 	mrsne	r0, PSP
 8003c9a:	f7ff bfbb 	b.w	8003c14 <hard_fault_handler_c>
        "ITE EQ\n"
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
	  ssd1306_SetCursor(32, 32);
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	2020      	movs	r0, #32
 8003ca2:	f7ff fbc3 	bl	800342c <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7ff fa7e 	bl	80031a8 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HardFault_Handler+0x38>)
 8003cae:	2301      	movs	r3, #1
 8003cb0:	ca06      	ldmia	r2, {r1, r2}
 8003cb2:	4804      	ldr	r0, [pc, #16]	@ (8003cc4 <HardFault_Handler+0x3c>)
 8003cb4:	f7ff fb94 	bl	80033e0 <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 8003cb8:	f7ff fa8e 	bl	80031d8 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <HardFault_Handler+0x34>
 8003cc0:	20000010 	.word	0x20000010
 8003cc4:	08019360 	.word	0x08019360

08003cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <MemManage_Handler+0x4>

08003cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <BusFault_Handler+0x4>

08003cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <UsageFault_Handler+0x4>

08003ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f004 f882 	bl	8007dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003d00:	2010      	movs	r0, #16
 8003d02:	f004 f87b 	bl	8007dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8003d10:	4802      	ldr	r0, [pc, #8]	@ (8003d1c <DMA1_Channel1_IRQHandler+0x10>)
 8003d12:	f003 fd4c 	bl	80077ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000156c 	.word	0x2000156c

08003d20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d24:	4802      	ldr	r0, [pc, #8]	@ (8003d30 <DMA1_Channel2_IRQHandler+0x10>)
 8003d26:	f003 fd42 	bl	80077ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200002a4 	.word	0x200002a4

08003d34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <DMA1_Channel3_IRQHandler+0x10>)
 8003d3a:	f003 fd38 	bl	80077ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200016fc 	.word	0x200016fc

08003d48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <DMA1_Channel5_IRQHandler+0x10>)
 8003d4e:	f003 fd2e 	bl	80077ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000175c 	.word	0x2000175c

08003d5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <ADC1_2_IRQHandler+0x10>)
 8003d62:	f002 fa23 	bl	80061ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000238 	.word	0x20000238

08003d70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d74:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003d76:	f007 f875 	bl	800ae64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20001370 	.word	0x20001370

08003d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d88:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <TIM2_IRQHandler+0x10>)
 8003d8a:	f007 f86b 	bl	800ae64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20001488 	.word	0x20001488

08003d98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <TIM4_IRQHandler+0x18>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	4a03      	ldr	r2, [pc, #12]	@ (8003db0 <TIM4_IRQHandler+0x18>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003da6:	4803      	ldr	r0, [pc, #12]	@ (8003db4 <TIM4_IRQHandler+0x1c>)
 8003da8:	f007 f85c 	bl	800ae64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000ec4 	.word	0x20000ec4
 8003db4:	20001520 	.word	0x20001520

08003db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dbc:	4802      	ldr	r0, [pc, #8]	@ (8003dc8 <USART1_IRQHandler+0x10>)
 8003dbe:	f008 fc53 	bl	800c668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001668 	.word	0x20001668

08003dcc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003dd0:	4802      	ldr	r0, [pc, #8]	@ (8003ddc <LPUART1_IRQHandler+0x10>)
 8003dd2:	f008 fc49 	bl	800c668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200015d4 	.word	0x200015d4

08003de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return 1;
 8003de4:	2301      	movs	r3, #1
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_kill>:

int _kill(int pid, int sig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dfa:	f011 fa59 	bl	80152b0 <__errno>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2216      	movs	r2, #22
 8003e02:	601a      	str	r2, [r3, #0]
  return -1;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_exit>:

void _exit (int status)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e18:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ffe7 	bl	8003df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e22:	bf00      	nop
 8003e24:	e7fd      	b.n	8003e22 <_exit+0x12>

08003e26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e00a      	b.n	8003e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e38:	f3af 8000 	nop.w
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	60ba      	str	r2, [r7, #8]
 8003e44:	b2ca      	uxtb	r2, r1
 8003e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	dbf0      	blt.n	8003e38 <_read+0x12>
  }

  return len;
 8003e56:	687b      	ldr	r3, [r7, #4]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e009      	b.n	8003e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	60ba      	str	r2, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3301      	adds	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	dbf1      	blt.n	8003e72 <_write+0x12>
  }
  return len;
 8003e8e:	687b      	ldr	r3, [r7, #4]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_close>:

int _close(int file)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_isatty>:

int _isatty(int file)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ed8:	2301      	movs	r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f08:	4a14      	ldr	r2, [pc, #80]	@ (8003f5c <_sbrk+0x5c>)
 8003f0a:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <_sbrk+0x60>)
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f14:	4b13      	ldr	r3, [pc, #76]	@ (8003f64 <_sbrk+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <_sbrk+0x64>)
 8003f1e:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <_sbrk+0x68>)
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f22:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <_sbrk+0x64>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d207      	bcs.n	8003f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f30:	f011 f9be 	bl	80152b0 <__errno>
 8003f34:	4603      	mov	r3, r0
 8003f36:	220c      	movs	r2, #12
 8003f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	e009      	b.n	8003f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <_sbrk+0x64>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f46:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <_sbrk+0x64>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	4a05      	ldr	r2, [pc, #20]	@ (8003f64 <_sbrk+0x64>)
 8003f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20008000 	.word	0x20008000
 8003f60:	00000400 	.word	0x00000400
 8003f64:	20001484 	.word	0x20001484
 8003f68:	200049c8 	.word	0x200049c8

08003f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <SystemInit+0x20>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f76:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <SystemInit+0x20>)
 8003f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	@ 0x38
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	460a      	mov	r2, r1
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8003fa0:	2306      	movs	r3, #6
 8003fa2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	@ (8004170 <INIT_PERM_TARVOS+0x1e0>)
 8003fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fbc:	6018      	str	r0, [r3, #0]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8003fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004174 <INIT_PERM_TARVOS+0x1e4>)
 8003fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fcc:	6018      	str	r0, [r3, #0]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003fd2:	4a69      	ldr	r2, [pc, #420]	@ (8004178 <INIT_PERM_TARVOS+0x1e8>)
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fdc:	6018      	str	r0, [r3, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	753b      	strb	r3, [r7, #20]
 8003fe6:	2309      	movs	r3, #9
 8003fe8:	757b      	strb	r3, [r7, #21]
 8003fea:	2302      	movs	r3, #2
 8003fec:	75bb      	strb	r3, [r7, #22]
 8003fee:	230b      	movs	r3, #11
 8003ff0:	75fb      	strb	r3, [r7, #23]
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	763b      	strb	r3, [r7, #24]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	733b      	strb	r3, [r7, #12]
 8003ffe:	2309      	movs	r3, #9
 8004000:	737b      	strb	r3, [r7, #13]
 8004002:	2302      	movs	r3, #2
 8004004:	73bb      	strb	r3, [r7, #14]
 8004006:	2308      	movs	r3, #8
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	79bb      	ldrb	r3, [r7, #6]
 800400c:	743b      	strb	r3, [r7, #16]
 800400e:	2300      	movs	r3, #0
 8004010:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8004012:	4b5a      	ldr	r3, [pc, #360]	@ (800417c <INIT_PERM_TARVOS+0x1ec>)
 8004014:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8004016:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8ac 	bl	8004184 <Get_CRC8>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8004032:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004036:	b29a      	uxth	r2, r3
 8004038:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800403c:	2364      	movs	r3, #100	@ 0x64
 800403e:	4850      	ldr	r0, [pc, #320]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 8004040:	f008 f8de 	bl	800c200 <HAL_UART_Transmit>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8004050:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f88f 	bl	8004184 <Get_CRC8>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 800406c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004070:	b29a      	uxth	r2, r3
 8004072:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004076:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800407a:	4841      	ldr	r0, [pc, #260]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 800407c:	f008 f8c0 	bl	800c200 <HAL_UART_Transmit>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 800408c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	f107 031c 	add.w	r3, r7, #28
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f871 	bl	8004184 <Get_CRC8>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 80040a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f107 011c 	add.w	r1, r7, #28
 80040b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040b6:	4832      	ldr	r0, [pc, #200]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 80040b8:	f008 f8a2 	bl	800c200 <HAL_UART_Transmit>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 80040c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f853 	bl	8004184 <Get_CRC8>
 80040de:	4603      	mov	r3, r0
 80040e0:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 80040e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	f107 0114 	add.w	r1, r7, #20
 80040ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040f0:	4823      	ldr	r0, [pc, #140]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 80040f2:	f008 f885 	bl	800c200 <HAL_UART_Transmit>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8004102:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	f107 030c 	add.w	r3, r7, #12
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f836 	bl	8004184 <Get_CRC8>
 8004118:	4603      	mov	r3, r0
 800411a:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 800411c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004120:	b29a      	uxth	r2, r3
 8004122:	f107 010c 	add.w	r1, r7, #12
 8004126:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800412a:	4815      	ldr	r0, [pc, #84]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 800412c:	f008 f868 	bl	800c200 <HAL_UART_Transmit>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 800413c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004140:	b29a      	uxth	r2, r3
 8004142:	f107 0108 	add.w	r1, r7, #8
 8004146:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800414a:	480d      	ldr	r0, [pc, #52]	@ (8004180 <INIT_PERM_TARVOS+0x1f0>)
 800414c:	f008 f858 	bl	800c200 <HAL_UART_Transmit>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 800415c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004160:	f001 fb8a 	bl	8005878 <HAL_Delay>
    return status;
 8004164:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8004168:	4618      	mov	r0, r3
 800416a:	3738      	adds	r7, #56	@ 0x38
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	08019390 	.word	0x08019390
 8004174:	08019398 	.word	0x08019398
 8004178:	080193a0 	.word	0x080193a0
 800417c:	07000502 	.word	0x07000502
 8004180:	200015d4 	.word	0x200015d4

08004184 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8004194:	2300      	movs	r3, #0
 8004196:	81bb      	strh	r3, [r7, #12]
 8004198:	e009      	b.n	80041ae <Get_CRC8+0x2a>
		crc ^= bufP[i];
 800419a:	89bb      	ldrh	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	4053      	eors	r3, r2
 80041a6:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80041a8:	89bb      	ldrh	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	81bb      	strh	r3, [r7, #12]
 80041ae:	89ba      	ldrh	r2, [r7, #12]
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d3f1      	bcc.n	800419a <Get_CRC8+0x16>
	}
	return crc;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80041c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	b08a      	sub	sp, #40	@ 0x28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	72fb      	strb	r3, [r7, #11]
 80041d4:	4613      	mov	r3, r2
 80041d6:	72bb      	strb	r3, [r7, #10]
 80041d8:	466b      	mov	r3, sp
 80041da:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1d9e      	adds	r6, r3, #6
 80041e0:	1e73      	subs	r3, r6, #1
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	4632      	mov	r2, r6
 80041e6:	2300      	movs	r3, #0
 80041e8:	4690      	mov	r8, r2
 80041ea:	4699      	mov	r9, r3
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004200:	4632      	mov	r2, r6
 8004202:	2300      	movs	r3, #0
 8004204:	4614      	mov	r4, r2
 8004206:	461d      	mov	r5, r3
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	00eb      	lsls	r3, r5, #3
 8004212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004216:	00e2      	lsls	r2, r4, #3
 8004218:	4633      	mov	r3, r6
 800421a:	3307      	adds	r3, #7
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	ebad 0d03 	sub.w	sp, sp, r3
 8004224:	466b      	mov	r3, sp
 8004226:	3300      	adds	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2201      	movs	r2, #1
 8004234:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	3302      	adds	r3, #2
 800423c:	b2da      	uxtb	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	7afa      	ldrb	r2, [r7, #11]
 8004246:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	7aba      	ldrb	r2, [r7, #10]
 800424c:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 800424e:	2300      	movs	r3, #0
 8004250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004254:	e00e      	b.n	8004274 <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 8004256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	441a      	add	r2, r3
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004262:	3305      	adds	r3, #5
 8004264:	7811      	ldrb	r1, [r2, #0]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 800426a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800426e:	3301      	adds	r3, #1
 8004270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	dceb      	bgt.n	8004256 <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	b29b      	uxth	r3, r3
 8004282:	3305      	adds	r3, #5
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	1d5c      	adds	r4, r3, #5
 800428a:	4611      	mov	r1, r2
 800428c:	69f8      	ldr	r0, [r7, #28]
 800428e:	f7ff ff79 	bl	8004184 <Get_CRC8>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 800429a:	b2b2      	uxth	r2, r6
 800429c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4808      	ldr	r0, [pc, #32]	@ (80042c4 <SEND_DATA_NETW1+0x100>)
 80042a4:	f007 ffac 	bl	800c200 <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 80042a8:	f107 0310 	add.w	r3, r7, #16
 80042ac:	2205      	movs	r2, #5
 80042ae:	4619      	mov	r1, r3
 80042b0:	4804      	ldr	r0, [pc, #16]	@ (80042c4 <SEND_DATA_NETW1+0x100>)
 80042b2:	f008 f833 	bl	800c31c <HAL_UART_Receive_IT>
 80042b6:	46d5      	mov	sp, sl

}
 80042b8:	bf00      	nop
 80042ba:	3728      	adds	r7, #40	@ 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	bf00      	nop
 80042c4:	200015d4 	.word	0x200015d4

080042c8 <create_and_send_payload>:
}

//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,
		float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,
		float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b09c      	sub	sp, #112	@ 0x70
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80042da:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 80042de:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 80042e2:	edc7 1a08 	vstr	s3, [r7, #32]
 80042e6:	ed87 2a07 	vstr	s4, [r7, #28]
 80042ea:	edc7 2a06 	vstr	s5, [r7, #24]
 80042ee:	ed87 3a05 	vstr	s6, [r7, #20]
 80042f2:	edc7 3a04 	vstr	s7, [r7, #16]
 80042f6:	ed87 4a03 	vstr	s8, [r7, #12]
 80042fa:	edc7 4a02 	vstr	s9, [r7, #8]
 80042fe:	ed87 5a01 	vstr	s10, [r7, #4]
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004308:	460b      	mov	r3, r1
 800430a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800430e:	4613      	mov	r3, r2
 8004310:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004312:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	b29b      	uxth	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 800431e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 8004326:	4b22      	ldr	r3, [pc, #136]	@ (80043b0 <create_and_send_payload+0xe8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004330:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <create_and_send_payload+0xec>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 800433a:	4b1f      	ldr	r3, [pc, #124]	@ (80043b8 <create_and_send_payload+0xf0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_fin;
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <create_and_send_payload+0xf4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 8004390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004392:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 8004396:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800439a:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 800439e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80043a2:	2336      	movs	r3, #54	@ 0x36
 80043a4:	f7ff ff0e 	bl	80041c4 <SEND_DATA_NETW1>

}
 80043a8:	bf00      	nop
 80043aa:	3770      	adds	r7, #112	@ 0x70
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000e9c 	.word	0x20000e9c
 80043b4:	20000e94 	.word	0x20000e94
 80043b8:	20000e98 	.word	0x20000e98
 80043bc:	20000eac 	.word	0x20000eac

080043c0 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	f040 8088 	bne.w	80044e4 <decode_payload+0x124>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b81      	cmp	r3, #129	@ 0x81
 80043dc:	f040 8082 	bne.w	80044e4 <decode_payload+0x124>
		return;
	}
	if(receivingbuffer[2]!=56){
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3302      	adds	r3, #2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b38      	cmp	r3, #56	@ 0x38
 80043e8:	d17e      	bne.n	80044e8 <decode_payload+0x128>
		return;
	}

	out->senderadress=receivingbuffer[3];
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	78da      	ldrb	r2, [r3, #3]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	b21a      	sxth	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	3305      	adds	r3, #5
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b21b      	sxth	r3, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	b21b      	sxth	r3, r3
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	799a      	ldrb	r2, [r3, #6]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	79da      	ldrb	r2, [r3, #7]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	7a1a      	ldrb	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	7a5a      	ldrb	r2, [r3, #9]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }

#endif

#ifdef PARTIE_HAUT
    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3348      	adds	r3, #72	@ 0x48
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	320a      	adds	r2, #10
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	334c      	adds	r3, #76	@ 0x4c
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	320e      	adds	r2, #14
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3350      	adds	r3, #80	@ 0x50
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	3212      	adds	r2, #18
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3354      	adds	r3, #84	@ 0x54
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	3216      	adds	r2, #22
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3358      	adds	r3, #88	@ 0x58
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	321a      	adds	r2, #26
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	335c      	adds	r3, #92	@ 0x5c
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	321e      	adds	r2, #30
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3360      	adds	r3, #96	@ 0x60
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	3222      	adds	r2, #34	@ 0x22
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3370      	adds	r3, #112	@ 0x70
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	3226      	adds	r2, #38	@ 0x26
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3364      	adds	r3, #100	@ 0x64
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	322a      	adds	r2, #42	@ 0x2a
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3368      	adds	r3, #104	@ 0x68
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	322e      	adds	r2, #46	@ 0x2e
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	336c      	adds	r3, #108	@ 0x6c
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	3232      	adds	r2, #50	@ 0x32
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3374      	adds	r3, #116	@ 0x74
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	3236      	adds	r2, #54	@ 0x36
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3378      	adds	r3, #120	@ 0x78
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	323a      	adds	r2, #58	@ 0x3a
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	701a      	strb	r2, [r3, #0]
#endif




    memset((uint8_t *)receivingbuffer,0,64);
 80044d8:	2240      	movs	r2, #64	@ 0x40
 80044da:	2100      	movs	r1, #0
 80044dc:	6838      	ldr	r0, [r7, #0]
 80044de:	f010 fe37 	bl	8015150 <memset>
 80044e2:	e002      	b.n	80044ea <decode_payload+0x12a>
		return;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <decode_payload+0x12a>
		return;
 80044e8:	bf00      	nop
}
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	@ 0x38
 80044f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	609a      	str	r2, [r3, #8]
 8004502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004510:	463b      	mov	r3, r7
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	609a      	str	r2, [r3, #8]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	611a      	str	r2, [r3, #16]
 800451e:	615a      	str	r2, [r3, #20]
 8004520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004522:	4b2d      	ldr	r3, [pc, #180]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800452a:	4b2b      	ldr	r3, [pc, #172]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004530:	4b29      	ldr	r3, [pc, #164]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8004536:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004538:	2277      	movs	r2, #119	@ 0x77
 800453a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800453c:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004542:	4b25      	ldr	r3, [pc, #148]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004548:	4823      	ldr	r0, [pc, #140]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 800454a:	f005 fec1 	bl	800a2d0 <HAL_TIM_Base_Init>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004554:	f7fe fbc2 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800455e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004562:	4619      	mov	r1, r3
 8004564:	481c      	ldr	r0, [pc, #112]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004566:	f006 fee1 	bl	800b32c <HAL_TIM_ConfigClockSource>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004570:	f7fe fbb4 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004574:	4818      	ldr	r0, [pc, #96]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004576:	f005 ff6d 	bl	800a454 <HAL_TIM_PWM_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004580:	f7fe fbac 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800458c:	f107 031c 	add.w	r3, r7, #28
 8004590:	4619      	mov	r1, r3
 8004592:	4811      	ldr	r0, [pc, #68]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 8004594:	f007 fd1c 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800459e:	f7fe fb9d 	bl	8002cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a2:	2360      	movs	r3, #96	@ 0x60
 80045a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80045ae:	2304      	movs	r3, #4
 80045b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045b2:	463b      	mov	r3, r7
 80045b4:	2204      	movs	r2, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4807      	ldr	r0, [pc, #28]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 80045ba:	f006 fda3 	bl	800b104 <HAL_TIM_PWM_ConfigChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80045c4:	f7fe fb8a 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045c8:	4803      	ldr	r0, [pc, #12]	@ (80045d8 <MX_TIM2_Init+0xe8>)
 80045ca:	f000 f951 	bl	8004870 <HAL_TIM_MspPostInit>

}
 80045ce:	bf00      	nop
 80045d0:	3738      	adds	r7, #56	@ 0x38
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20001488 	.word	0x20001488

080045dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	@ 0x38
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045f0:	f107 031c 	add.w	r3, r7, #28
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045fc:	463b      	mov	r3, r7
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	615a      	str	r2, [r3, #20]
 800460c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800460e:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004610:	4a2d      	ldr	r2, [pc, #180]	@ (80046c8 <MX_TIM3_Init+0xec>)
 8004612:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004616:	2263      	movs	r2, #99	@ 0x63
 8004618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461a:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004622:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004628:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800462e:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004634:	4823      	ldr	r0, [pc, #140]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004636:	f005 fe4b 	bl	800a2d0 <HAL_TIM_Base_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004640:	f7fe fb4c 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800464a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800464e:	4619      	mov	r1, r3
 8004650:	481c      	ldr	r0, [pc, #112]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004652:	f006 fe6b 	bl	800b32c <HAL_TIM_ConfigClockSource>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800465c:	f7fe fb3e 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004660:	4818      	ldr	r0, [pc, #96]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004662:	f005 fef7 	bl	800a454 <HAL_TIM_PWM_Init>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800466c:	f7fe fb36 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	4619      	mov	r1, r3
 800467e:	4811      	ldr	r0, [pc, #68]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 8004680:	f007 fca6 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800468a:	f7fe fb27 	bl	8002cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800468e:	2360      	movs	r3, #96	@ 0x60
 8004690:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800469e:	463b      	mov	r3, r7
 80046a0:	2200      	movs	r2, #0
 80046a2:	4619      	mov	r1, r3
 80046a4:	4807      	ldr	r0, [pc, #28]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 80046a6:	f006 fd2d 	bl	800b104 <HAL_TIM_PWM_ConfigChannel>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80046b0:	f7fe fb14 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046b4:	4803      	ldr	r0, [pc, #12]	@ (80046c4 <MX_TIM3_Init+0xe8>)
 80046b6:	f000 f8db 	bl	8004870 <HAL_TIM_MspPostInit>

}
 80046ba:	bf00      	nop
 80046bc:	3738      	adds	r7, #56	@ 0x38
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200014d4 	.word	0x200014d4
 80046c8:	40000400 	.word	0x40000400

080046cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004764 <MX_TIM4_Init+0x98>)
 80046ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004768 <MX_TIM4_Init+0x9c>)
 80046ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80046f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004764 <MX_TIM4_Init+0x98>)
 80046f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80046f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <MX_TIM4_Init+0x98>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80046fe:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <MX_TIM4_Init+0x98>)
 8004700:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004704:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <MX_TIM4_Init+0x98>)
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800470c:	4b15      	ldr	r3, [pc, #84]	@ (8004764 <MX_TIM4_Init+0x98>)
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004712:	4814      	ldr	r0, [pc, #80]	@ (8004764 <MX_TIM4_Init+0x98>)
 8004714:	f005 fddc 	bl	800a2d0 <HAL_TIM_Base_Init>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800471e:	f7fe fadd 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004728:	f107 0310 	add.w	r3, r7, #16
 800472c:	4619      	mov	r1, r3
 800472e:	480d      	ldr	r0, [pc, #52]	@ (8004764 <MX_TIM4_Init+0x98>)
 8004730:	f006 fdfc 	bl	800b32c <HAL_TIM_ConfigClockSource>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800473a:	f7fe facf 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004746:	1d3b      	adds	r3, r7, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4806      	ldr	r0, [pc, #24]	@ (8004764 <MX_TIM4_Init+0x98>)
 800474c:	f007 fc40 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004756:	f7fe fac1 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800475a:	bf00      	nop
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20001520 	.word	0x20001520
 8004768:	40000800 	.word	0x40000800

0800476c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477c:	d13e      	bne.n	80047fc <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800477e:	4b37      	ldr	r3, [pc, #220]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	4a36      	ldr	r2, [pc, #216]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6593      	str	r3, [r2, #88]	@ 0x58
 800478a:	4b34      	ldr	r3, [pc, #208]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004796:	4b32      	ldr	r3, [pc, #200]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 8004798:	4a32      	ldr	r2, [pc, #200]	@ (8004864 <HAL_TIM_Base_MspInit+0xf8>)
 800479a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 800479c:	4b30      	ldr	r3, [pc, #192]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 800479e:	2239      	movs	r2, #57	@ 0x39
 80047a0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047a4:	2210      	movs	r2, #16
 80047a6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80047ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80047c2:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80047c8:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80047ce:	4824      	ldr	r0, [pc, #144]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047d0:	f002 fe0a 	bl	80073e8 <HAL_DMA_Init>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80047da:	f7fe fa7f 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004860 <HAL_TIM_Base_MspInit+0xf4>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2105      	movs	r1, #5
 80047ee:	201c      	movs	r0, #28
 80047f0:	f002 fdd2 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047f4:	201c      	movs	r0, #28
 80047f6:	f002 fde9 	bl	80073cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80047fa:	e02a      	b.n	8004852 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <HAL_TIM_Base_MspInit+0xfc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10c      	bne.n	8004820 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4a14      	ldr	r2, [pc, #80]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
 8004812:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
}
 800481e:	e018      	b.n	8004852 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	@ (800486c <HAL_TIM_Base_MspInit+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d113      	bne.n	8004852 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6593      	str	r3, [r2, #88]	@ 0x58
 8004836:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_TIM_Base_MspInit+0xf0>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2106      	movs	r1, #6
 8004846:	201e      	movs	r0, #30
 8004848:	f002 fda6 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800484c:	201e      	movs	r0, #30
 800484e:	f002 fdbd 	bl	80073cc <HAL_NVIC_EnableIRQ>
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	2000156c 	.word	0x2000156c
 8004864:	40020008 	.word	0x40020008
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800

08004870 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d11d      	bne.n	80048ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004892:	4b21      	ldr	r3, [pc, #132]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	4a20      	ldr	r2, [pc, #128]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 80048a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80048aa:	2302      	movs	r3, #2
 80048ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80048b6:	2301      	movs	r3, #1
 80048b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048ba:	2301      	movs	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4619      	mov	r1, r3
 80048c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048c8:	f003 f8cc 	bl	8007a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048cc:	e020      	b.n	8004910 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a12      	ldr	r2, [pc, #72]	@ (800491c <HAL_TIM_MspPostInit+0xac>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 80048da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <HAL_TIM_MspPostInit+0xa8>)
 80048e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048f0:	2340      	movs	r3, #64	@ 0x40
 80048f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f4:	2302      	movs	r3, #2
 80048f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004900:	2302      	movs	r3, #2
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	4619      	mov	r1, r3
 800490a:	4805      	ldr	r0, [pc, #20]	@ (8004920 <HAL_TIM_MspPostInit+0xb0>)
 800490c:	f003 f8aa 	bl	8007a64 <HAL_GPIO_Init>
}
 8004910:	bf00      	nop
 8004912:	3728      	adds	r7, #40	@ 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	40000400 	.word	0x40000400
 8004920:	48000800 	.word	0x48000800

08004924 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004928:	4b21      	ldr	r3, [pc, #132]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800492a:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <MX_LPUART1_UART_Init+0x90>)
 800492c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800492e:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004934:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004936:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800493c:	4b1c      	ldr	r3, [pc, #112]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004948:	4b19      	ldr	r3, [pc, #100]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800494a:	220c      	movs	r2, #12
 800494c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800494e:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004954:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004956:	2200      	movs	r2, #0
 8004958:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800495a:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004962:	2200      	movs	r2, #0
 8004964:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004966:	4812      	ldr	r0, [pc, #72]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 8004968:	f007 fbfa 	bl	800c160 <HAL_UART_Init>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8004972:	f7fe f9b3 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004976:	2100      	movs	r1, #0
 8004978:	480d      	ldr	r0, [pc, #52]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800497a:	f009 ff80 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004984:	f7fe f9aa 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004988:	2100      	movs	r1, #0
 800498a:	4809      	ldr	r0, [pc, #36]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800498c:	f009 ffb5 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004996:	f7fe f9a1 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800499a:	4805      	ldr	r0, [pc, #20]	@ (80049b0 <MX_LPUART1_UART_Init+0x8c>)
 800499c:	f009 ff36 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80049a6:	f7fe f999 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	200015d4 	.word	0x200015d4
 80049b4:	40008000 	.word	0x40008000

080049b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049bc:	4b22      	ldr	r3, [pc, #136]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049be:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <MX_USART1_UART_Init+0x94>)
 80049c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049c2:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049de:	220c      	movs	r2, #12
 80049e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049e2:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e8:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ee:	4b16      	ldr	r3, [pc, #88]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049f4:	4b14      	ldr	r3, [pc, #80]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049fa:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a00:	4811      	ldr	r0, [pc, #68]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 8004a02:	f007 fbad 	bl	800c160 <HAL_UART_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a0c:	f7fe f966 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a10:	2100      	movs	r1, #0
 8004a12:	480d      	ldr	r0, [pc, #52]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 8004a14:	f009 ff33 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a1e:	f7fe f95d 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a22:	2100      	movs	r1, #0
 8004a24:	4808      	ldr	r0, [pc, #32]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 8004a26:	f009 ff68 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a30:	f7fe f954 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004a34:	4804      	ldr	r0, [pc, #16]	@ (8004a48 <MX_USART1_UART_Init+0x90>)
 8004a36:	f009 fee9 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a40:	f7fe f94c 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20001668 	.word	0x20001668
 8004a4c:	40013800 	.word	0x40013800

08004a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b09e      	sub	sp, #120	@ 0x78
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a68:	f107 0320 	add.w	r3, r7, #32
 8004a6c:	2244      	movs	r2, #68	@ 0x44
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f010 fb6d 	bl	8015150 <memset>
  if(uartHandle->Instance==LPUART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c74 <HAL_UART_MspInit+0x224>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f040 8087 	bne.w	8004b90 <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004a82:	2320      	movs	r3, #32
 8004a84:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a8a:	f107 0320 	add.w	r3, r7, #32
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fe00 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a9a:	f7fe f91f 	bl	8002cdc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004a9e:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	4a75      	ldr	r2, [pc, #468]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004aaa:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab6:	4b70      	ldr	r3, [pc, #448]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aba:	4a6f      	ldr	r2, [pc, #444]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ace:	4b6a      	ldr	r3, [pc, #424]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad2:	4a69      	ldr	r2, [pc, #420]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ada:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aea:	2302      	movs	r3, #2
 8004aec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004af6:	230c      	movs	r3, #12
 8004af8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004afe:	4619      	mov	r1, r3
 8004b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b04:	f002 ffae 	bl	8007a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b16:	2300      	movs	r3, #0
 8004b18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b22:	4619      	mov	r1, r3
 8004b24:	4855      	ldr	r0, [pc, #340]	@ (8004c7c <HAL_UART_MspInit+0x22c>)
 8004b26:	f002 ff9d 	bl	8007a64 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8004b2a:	4b55      	ldr	r3, [pc, #340]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b2c:	4a55      	ldr	r2, [pc, #340]	@ (8004c84 <HAL_UART_MspInit+0x234>)
 8004b2e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004b30:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b32:	2222      	movs	r2, #34	@ 0x22
 8004b34:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b36:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b3c:	4b50      	ldr	r3, [pc, #320]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b42:	4b4f      	ldr	r3, [pc, #316]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b44:	2280      	movs	r2, #128	@ 0x80
 8004b46:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b48:	4b4d      	ldr	r3, [pc, #308]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b54:	4b4a      	ldr	r3, [pc, #296]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b56:	2220      	movs	r2, #32
 8004b58:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b5a:	4b49      	ldr	r3, [pc, #292]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004b60:	4847      	ldr	r0, [pc, #284]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b62:	f002 fc41 	bl	80073e8 <HAL_DMA_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8004b6c:	f7fe f8b6 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004b78:	4a41      	ldr	r2, [pc, #260]	@ (8004c80 <HAL_UART_MspInit+0x230>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2105      	movs	r1, #5
 8004b82:	205b      	movs	r0, #91	@ 0x5b
 8004b84:	f002 fc08 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004b88:	205b      	movs	r0, #91	@ 0x5b
 8004b8a:	f002 fc1f 	bl	80073cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004b8e:	e06c      	b.n	8004c6a <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3c      	ldr	r2, [pc, #240]	@ (8004c88 <HAL_UART_MspInit+0x238>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d167      	bne.n	8004c6a <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ba2:	f107 0320 	add.w	r3, r7, #32
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fd74 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8004bb2:	f7fe f893 	bl	8002cdc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bb6:	4b30      	ldr	r3, [pc, #192]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bce:	4b2a      	ldr	r3, [pc, #168]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd2:	4a29      	ldr	r2, [pc, #164]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bda:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <HAL_UART_MspInit+0x228>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004be6:	23c0      	movs	r3, #192	@ 0xc0
 8004be8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bf6:	2307      	movs	r3, #7
 8004bf8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004bfe:	4619      	mov	r1, r3
 8004c00:	481e      	ldr	r0, [pc, #120]	@ (8004c7c <HAL_UART_MspInit+0x22c>)
 8004c02:	f002 ff2f 	bl	8007a64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004c06:	4b21      	ldr	r3, [pc, #132]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c08:	4a21      	ldr	r2, [pc, #132]	@ (8004c90 <HAL_UART_MspInit+0x240>)
 8004c0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c0e:	2218      	movs	r2, #24
 8004c10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c12:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c18:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c20:	2280      	movs	r2, #128	@ 0x80
 8004c22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c2a:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004c30:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c32:	2220      	movs	r2, #32
 8004c34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c3c:	4813      	ldr	r0, [pc, #76]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c3e:	f002 fbd3 	bl	80073e8 <HAL_DMA_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004c48:	f7fe f848 	bl	8002cdc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <HAL_UART_MspInit+0x23c>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2105      	movs	r1, #5
 8004c5e:	2025      	movs	r0, #37	@ 0x25
 8004c60:	f002 fb9a 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c64:	2025      	movs	r0, #37	@ 0x25
 8004c66:	f002 fbb1 	bl	80073cc <HAL_NVIC_EnableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3778      	adds	r7, #120	@ 0x78
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40008000 	.word	0x40008000
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	48000400 	.word	0x48000400
 8004c80:	200016fc 	.word	0x200016fc
 8004c84:	40020030 	.word	0x40020030
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	2000175c 	.word	0x2000175c
 8004c90:	40020058 	.word	0x40020058

08004c94 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a48      	ldr	r2, [pc, #288]	@ (8004dc4 <HAL_UART_RxCpltCallback+0x130>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d114      	bne.n	8004cd0 <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8004ca6:	4b48      	ldr	r3, [pc, #288]	@ (8004dc8 <HAL_UART_RxCpltCallback+0x134>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8004cac:	2264      	movs	r2, #100	@ 0x64
 8004cae:	4947      	ldr	r1, [pc, #284]	@ (8004dcc <HAL_UART_RxCpltCallback+0x138>)
 8004cb0:	4847      	ldr	r0, [pc, #284]	@ (8004dd0 <HAL_UART_RxCpltCallback+0x13c>)
 8004cb2:	f010 fb2a 	bl	801530a <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8004cb6:	2264      	movs	r2, #100	@ 0x64
 8004cb8:	4944      	ldr	r1, [pc, #272]	@ (8004dcc <HAL_UART_RxCpltCallback+0x138>)
 8004cba:	4846      	ldr	r0, [pc, #280]	@ (8004dd4 <HAL_UART_RxCpltCallback+0x140>)
 8004cbc:	f007 fb7a 	bl	800c3b4 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8004cc0:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <HAL_UART_RxCpltCallback+0x144>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b44      	ldr	r3, [pc, #272]	@ (8004dd8 <HAL_UART_RxCpltCallback+0x144>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a41      	ldr	r2, [pc, #260]	@ (8004ddc <HAL_UART_RxCpltCallback+0x148>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d170      	bne.n	8004dbc <HAL_UART_RxCpltCallback+0x128>



		if(receivingflag==0){
 8004cda:	4b41      	ldr	r3, [pc, #260]	@ (8004de0 <HAL_UART_RxCpltCallback+0x14c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d122      	bne.n	8004d28 <HAL_UART_RxCpltCallback+0x94>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 8004ce2:	4b40      	ldr	r3, [pc, #256]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b81      	cmp	r3, #129	@ 0x81
 8004ce8:	d110      	bne.n	8004d0c <HAL_UART_RxCpltCallback+0x78>
 8004cea:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d10c      	bne.n	8004d0c <HAL_UART_RxCpltCallback+0x78>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	493b      	ldr	r1, [pc, #236]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004cf6:	483c      	ldr	r0, [pc, #240]	@ (8004de8 <HAL_UART_RxCpltCallback+0x154>)
 8004cf8:	f010 fb07 	bl	801530a <memcpy>




			receivingflag=1;
 8004cfc:	4b38      	ldr	r3, [pc, #224]	@ (8004de0 <HAL_UART_RxCpltCallback+0x14c>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
			receivingindex++;
 8004d02:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a38      	ldr	r2, [pc, #224]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d0a:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 8004d0c:	4b35      	ldr	r3, [pc, #212]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d139      	bne.n	8004d88 <HAL_UART_RxCpltCallback+0xf4>
 8004d14:	4b33      	ldr	r3, [pc, #204]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d135      	bne.n	8004d88 <HAL_UART_RxCpltCallback+0xf4>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4830      	ldr	r0, [pc, #192]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d22:	f010 fa15 	bl	8015150 <memset>
 8004d26:	e02f      	b.n	8004d88 <HAL_UART_RxCpltCallback+0xf4>
				}


		}
		else{
			if(tarvos_RX_Buffer[0]==0x02 && tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[2]==0x01 ){
 8004d28:	4b2e      	ldr	r3, [pc, #184]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d115      	bne.n	8004d5c <HAL_UART_RxCpltCallback+0xc8>
 8004d30:	4b2c      	ldr	r3, [pc, #176]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d111      	bne.n	8004d5c <HAL_UART_RxCpltCallback+0xc8>
 8004d38:	4b2a      	ldr	r3, [pc, #168]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d3a:	789b      	ldrb	r3, [r3, #2]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10d      	bne.n	8004d5c <HAL_UART_RxCpltCallback+0xc8>
				memset((uint8_t *)tarvos_RX_Buffer,0,5);
 8004d40:	2205      	movs	r2, #5
 8004d42:	2100      	movs	r1, #0
 8004d44:	4827      	ldr	r0, [pc, #156]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d46:	f010 fa03 	bl	8015150 <memset>
				receivingindex=0;
 8004d4a:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
				receivingflag=0;
 8004d50:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <HAL_UART_RxCpltCallback+0x14c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
				trameready=0;
 8004d56:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <HAL_UART_RxCpltCallback+0x15c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

			}
			if(receivingindex!=0){
 8004d5c:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d011      	beq.n	8004d88 <HAL_UART_RxCpltCallback+0xf4>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 8004d64:	4b21      	ldr	r3, [pc, #132]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_UART_RxCpltCallback+0x154>)
 8004d72:	4413      	add	r3, r2
 8004d74:	2205      	movs	r2, #5
 8004d76:	491b      	ldr	r1, [pc, #108]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f010 fac6 	bl	801530a <memcpy>
				receivingindex++;
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a19      	ldr	r2, [pc, #100]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d86:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==12){
 8004d88:	4b18      	ldr	r3, [pc, #96]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d108      	bne.n	8004da2 <HAL_UART_RxCpltCallback+0x10e>
			receivingindex=0;
 8004d90:	4b16      	ldr	r3, [pc, #88]	@ (8004dec <HAL_UART_RxCpltCallback+0x158>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8004d96:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <HAL_UART_RxCpltCallback+0x14c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
			trameready=1;
 8004d9c:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <HAL_UART_RxCpltCallback+0x15c>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 8004da2:	2205      	movs	r2, #5
 8004da4:	490f      	ldr	r1, [pc, #60]	@ (8004de4 <HAL_UART_RxCpltCallback+0x150>)
 8004da6:	480b      	ldr	r0, [pc, #44]	@ (8004dd4 <HAL_UART_RxCpltCallback+0x140>)
 8004da8:	f007 fb04 	bl	800c3b4 <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_UART_RxCpltCallback+0x160>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <HAL_UART_RxCpltCallback+0x160>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	601a      	str	r2, [r3, #0]

		}


}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40013800 	.word	0x40013800
 8004dc8:	20000ebc 	.word	0x20000ebc
 8004dcc:	200004d4 	.word	0x200004d4
 8004dd0:	20000c84 	.word	0x20000c84
 8004dd4:	200015d4 	.word	0x200015d4
 8004dd8:	2000175c 	.word	0x2000175c
 8004ddc:	40008000 	.word	0x40008000
 8004de0:	200015cc 	.word	0x200015cc
 8004de4:	20000494 	.word	0x20000494
 8004de8:	20000454 	.word	0x20000454
 8004dec:	200015d0 	.word	0x200015d0
 8004df0:	20000ec0 	.word	0x20000ec0
 8004df4:	200016fc 	.word	0x200016fc

08004df8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004e00:	f000 fd2e 	bl	8005860 <HAL_GetTick>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a04      	ldr	r2, [pc, #16]	@ (8004e18 <SPI_Timer_On+0x20>)
 8004e08:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004e0a:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <SPI_Timer_On+0x24>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200017c0 	.word	0x200017c0
 8004e1c:	200017c4 	.word	0x200017c4

08004e20 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004e24:	f000 fd1c 	bl	8005860 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <SPI_Timer_Status+0x24>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <SPI_Timer_Status+0x28>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf34      	ite	cc
 8004e38:	2301      	movcc	r3, #1
 8004e3a:	2300      	movcs	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200017c0 	.word	0x200017c0
 8004e48:	200017c4 	.word	0x200017c4

08004e4c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004e56:	f107 020f 	add.w	r2, r7, #15
 8004e5a:	1df9      	adds	r1, r7, #7
 8004e5c:	2332      	movs	r3, #50	@ 0x32
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2301      	movs	r3, #1
 8004e62:	4804      	ldr	r0, [pc, #16]	@ (8004e74 <xchg_spi+0x28>)
 8004e64:	f004 feb1 	bl	8009bca <HAL_SPI_TransmitReceive>
    return rxDat;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000ec8 	.word	0x20000ec8

08004e78 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e00a      	b.n	8004e9e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	18d4      	adds	r4, r2, r3
 8004e8e:	20ff      	movs	r0, #255	@ 0xff
 8004e90:	f7ff ffdc 	bl	8004e4c <xchg_spi>
 8004e94:	4603      	mov	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d3f0      	bcc.n	8004e88 <rcvr_spi_multi+0x10>
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd90      	pop	{r4, r7, pc}

08004eb0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e009      	b.n	8004ed4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ffbf 	bl	8004e4c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d3f1      	bcc.n	8004ec0 <xmit_spi_multi+0x10>
	}
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004eee:	f000 fcb7 	bl	8005860 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004ef8:	20ff      	movs	r0, #255	@ 0xff
 8004efa:	f7ff ffa7 	bl	8004e4c <xchg_spi>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2bff      	cmp	r3, #255	@ 0xff
 8004f06:	d007      	beq.n	8004f18 <wait_ready+0x32>
 8004f08:	f000 fcaa 	bl	8005860 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d8ef      	bhi.n	8004ef8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2bff      	cmp	r3, #255	@ 0xff
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004f30:	2201      	movs	r2, #1
 8004f32:	2110      	movs	r1, #16
 8004f34:	4803      	ldr	r0, [pc, #12]	@ (8004f44 <despiselect+0x18>)
 8004f36:	f002 ff2f 	bl	8007d98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004f3a:	20ff      	movs	r0, #255	@ 0xff
 8004f3c:	f7ff ff86 	bl	8004e4c <xchg_spi>

}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	48000800 	.word	0x48000800

08004f48 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2110      	movs	r1, #16
 8004f50:	4809      	ldr	r0, [pc, #36]	@ (8004f78 <spiselect+0x30>)
 8004f52:	f002 ff21 	bl	8007d98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004f56:	20ff      	movs	r0, #255	@ 0xff
 8004f58:	f7ff ff78 	bl	8004e4c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004f5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f60:	f7ff ffc1 	bl	8004ee6 <wait_ready>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <spiselect+0x26>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e002      	b.n	8004f74 <spiselect+0x2c>

	despiselect();
 8004f6e:	f7ff ffdd 	bl	8004f2c <despiselect>
	return 0;	/* Timeout */
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	48000800 	.word	0x48000800

08004f7c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004f86:	20c8      	movs	r0, #200	@ 0xc8
 8004f88:	f7ff ff36 	bl	8004df8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004f8c:	20ff      	movs	r0, #255	@ 0xff
 8004f8e:	f7ff ff5d 	bl	8004e4c <xchg_spi>
 8004f92:	4603      	mov	r3, r0
 8004f94:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2bff      	cmp	r3, #255	@ 0xff
 8004f9a:	d104      	bne.n	8004fa6 <rcvr_datablock+0x2a>
 8004f9c:	f7ff ff40 	bl	8004e20 <SPI_Timer_Status>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f2      	bne.n	8004f8c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2bfe      	cmp	r3, #254	@ 0xfe
 8004faa:	d001      	beq.n	8004fb0 <rcvr_datablock+0x34>
 8004fac:	2300      	movs	r3, #0
 8004fae:	e00a      	b.n	8004fc6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff60 	bl	8004e78 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004fb8:	20ff      	movs	r0, #255	@ 0xff
 8004fba:	f7ff ff47 	bl	8004e4c <xchg_spi>
 8004fbe:	20ff      	movs	r0, #255	@ 0xff
 8004fc0:	f7ff ff44 	bl	8004e4c <xchg_spi>

	return 1;						/* Function succeeded */
 8004fc4:	2301      	movs	r3, #1
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004fda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004fde:	f7ff ff82 	bl	8004ee6 <wait_ready>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <xmit_datablock+0x1e>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e01e      	b.n	800502a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff2c 	bl	8004e4c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	2bfd      	cmp	r3, #253	@ 0xfd
 8004ff8:	d016      	beq.n	8005028 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ff56 	bl	8004eb0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005004:	20ff      	movs	r0, #255	@ 0xff
 8005006:	f7ff ff21 	bl	8004e4c <xchg_spi>
 800500a:	20ff      	movs	r0, #255	@ 0xff
 800500c:	f7ff ff1e 	bl	8004e4c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005010:	20ff      	movs	r0, #255	@ 0xff
 8005012:	f7ff ff1b 	bl	8004e4c <xchg_spi>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2b05      	cmp	r3, #5
 8005022:	d001      	beq.n	8005028 <xmit_datablock+0x5a>
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <xmit_datablock+0x5c>
	}
	return 1;
 8005028:	2301      	movs	r3, #1
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	6039      	str	r1, [r7, #0]
 800503c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800503e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da0e      	bge.n	8005064 <send_cmd+0x32>
		cmd &= 0x7F;
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800504e:	2100      	movs	r1, #0
 8005050:	2037      	movs	r0, #55	@ 0x37
 8005052:	f7ff ffee 	bl	8005032 <send_cmd>
 8005056:	4603      	mov	r3, r0
 8005058:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800505a:	7bbb      	ldrb	r3, [r7, #14]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d901      	bls.n	8005064 <send_cmd+0x32>
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	e051      	b.n	8005108 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d008      	beq.n	800507c <send_cmd+0x4a>
		despiselect();
 800506a:	f7ff ff5f 	bl	8004f2c <despiselect>
		if (!spiselect()) return 0xFF;
 800506e:	f7ff ff6b 	bl	8004f48 <spiselect>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <send_cmd+0x4a>
 8005078:	23ff      	movs	r3, #255	@ 0xff
 800507a:	e045      	b.n	8005108 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005082:	b2db      	uxtb	r3, r3
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fee1 	bl	8004e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fedb 	bl	8004e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	b2db      	uxtb	r3, r3
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fed5 	bl	8004e4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fecf 	bl	8004e4c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff feca 	bl	8004e4c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <send_cmd+0x94>
 80050c2:	2395      	movs	r3, #149	@ 0x95
 80050c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d101      	bne.n	80050d0 <send_cmd+0x9e>
 80050cc:	2387      	movs	r3, #135	@ 0x87
 80050ce:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff feba 	bl	8004e4c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d102      	bne.n	80050e4 <send_cmd+0xb2>
 80050de:	20ff      	movs	r0, #255	@ 0xff
 80050e0:	f7ff feb4 	bl	8004e4c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80050e4:	230a      	movs	r3, #10
 80050e6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80050e8:	20ff      	movs	r0, #255	@ 0xff
 80050ea:	f7ff feaf 	bl	8004e4c <xchg_spi>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80050f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da05      	bge.n	8005106 <send_cmd+0xd4>
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005106:	7bbb      	ldrb	r3, [r7, #14]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <USER_SPI_initialize+0x14>
 8005120:	2301      	movs	r3, #1
 8005122:	e0d6      	b.n	80052d2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005124:	4b6d      	ldr	r3, [pc, #436]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <USER_SPI_initialize+0x2a>
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e0cb      	b.n	80052d2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800513a:	4b69      	ldr	r3, [pc, #420]	@ (80052e0 <USER_SPI_initialize+0x1d0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005144:	4b66      	ldr	r3, [pc, #408]	@ (80052e0 <USER_SPI_initialize+0x1d0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800514c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800514e:	230a      	movs	r3, #10
 8005150:	73fb      	strb	r3, [r7, #15]
 8005152:	e005      	b.n	8005160 <USER_SPI_initialize+0x50>
 8005154:	20ff      	movs	r0, #255	@ 0xff
 8005156:	f7ff fe79 	bl	8004e4c <xchg_spi>
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3b01      	subs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f6      	bne.n	8005154 <USER_SPI_initialize+0x44>

	ty = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800516a:	2100      	movs	r1, #0
 800516c:	2000      	movs	r0, #0
 800516e:	f7ff ff60 	bl	8005032 <send_cmd>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 808b 	bne.w	8005290 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800517a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800517e:	f7ff fe3b 	bl	8004df8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005182:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005186:	2008      	movs	r0, #8
 8005188:	f7ff ff53 	bl	8005032 <send_cmd>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d151      	bne.n	8005236 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e00d      	b.n	80051b4 <USER_SPI_initialize+0xa4>
 8005198:	7bfc      	ldrb	r4, [r7, #15]
 800519a:	20ff      	movs	r0, #255	@ 0xff
 800519c:	f7ff fe56 	bl	8004e4c <xchg_spi>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	f104 0310 	add.w	r3, r4, #16
 80051a8:	443b      	add	r3, r7
 80051aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	3301      	adds	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d9ee      	bls.n	8005198 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80051ba:	7abb      	ldrb	r3, [r7, #10]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d167      	bne.n	8005290 <USER_SPI_initialize+0x180>
 80051c0:	7afb      	ldrb	r3, [r7, #11]
 80051c2:	2baa      	cmp	r3, #170	@ 0xaa
 80051c4:	d164      	bne.n	8005290 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80051c6:	bf00      	nop
 80051c8:	f7ff fe2a 	bl	8004e20 <SPI_Timer_Status>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <USER_SPI_initialize+0xd2>
 80051d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80051d6:	20a9      	movs	r0, #169	@ 0xa9
 80051d8:	f7ff ff2b 	bl	8005032 <send_cmd>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80051e2:	f7ff fe1d 	bl	8004e20 <SPI_Timer_Status>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d051      	beq.n	8005290 <USER_SPI_initialize+0x180>
 80051ec:	2100      	movs	r1, #0
 80051ee:	203a      	movs	r0, #58	@ 0x3a
 80051f0:	f7ff ff1f 	bl	8005032 <send_cmd>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d14a      	bne.n	8005290 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
 80051fe:	e00d      	b.n	800521c <USER_SPI_initialize+0x10c>
 8005200:	7bfc      	ldrb	r4, [r7, #15]
 8005202:	20ff      	movs	r0, #255	@ 0xff
 8005204:	f7ff fe22 	bl	8004e4c <xchg_spi>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	f104 0310 	add.w	r3, r4, #16
 8005210:	443b      	add	r3, r7
 8005212:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	3301      	adds	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d9ee      	bls.n	8005200 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005222:	7a3b      	ldrb	r3, [r7, #8]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <USER_SPI_initialize+0x120>
 800522c:	230c      	movs	r3, #12
 800522e:	e000      	b.n	8005232 <USER_SPI_initialize+0x122>
 8005230:	2304      	movs	r3, #4
 8005232:	737b      	strb	r3, [r7, #13]
 8005234:	e02c      	b.n	8005290 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005236:	2100      	movs	r1, #0
 8005238:	20a9      	movs	r0, #169	@ 0xa9
 800523a:	f7ff fefa 	bl	8005032 <send_cmd>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d804      	bhi.n	800524e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005244:	2302      	movs	r3, #2
 8005246:	737b      	strb	r3, [r7, #13]
 8005248:	23a9      	movs	r3, #169	@ 0xa9
 800524a:	73bb      	strb	r3, [r7, #14]
 800524c:	e003      	b.n	8005256 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800524e:	2301      	movs	r3, #1
 8005250:	737b      	strb	r3, [r7, #13]
 8005252:	2301      	movs	r3, #1
 8005254:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005256:	bf00      	nop
 8005258:	f7ff fde2 	bl	8004e20 <SPI_Timer_Status>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <USER_SPI_initialize+0x162>
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fee3 	bl	8005032 <send_cmd>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f2      	bne.n	8005258 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005272:	f7ff fdd5 	bl	8004e20 <SPI_Timer_Status>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <USER_SPI_initialize+0x17c>
 800527c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005280:	2010      	movs	r0, #16
 8005282:	f7ff fed6 	bl	8005032 <send_cmd>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <USER_SPI_initialize+0x180>
				ty = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005290:	4a14      	ldr	r2, [pc, #80]	@ (80052e4 <USER_SPI_initialize+0x1d4>)
 8005292:	7b7b      	ldrb	r3, [r7, #13]
 8005294:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005296:	f7ff fe49 	bl	8004f2c <despiselect>

	if (ty) {			/* OK */
 800529a:	7b7b      	ldrb	r3, [r7, #13]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d012      	beq.n	80052c6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80052a0:	4b0f      	ldr	r3, [pc, #60]	@ (80052e0 <USER_SPI_initialize+0x1d0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80052aa:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <USER_SPI_initialize+0x1d0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0210 	orr.w	r2, r2, #16
 80052b2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e002      	b.n	80052cc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80052c6:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80052cc:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <USER_SPI_initialize+0x1cc>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000024 	.word	0x20000024
 80052e0:	20000ec8 	.word	0x20000ec8
 80052e4:	200017bc 	.word	0x200017bc

080052e8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <USER_SPI_status+0x14>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e002      	b.n	8005302 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80052fc:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <USER_SPI_status+0x28>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000024 	.word	0x20000024

08005314 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <USER_SPI_read+0x1c>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <USER_SPI_read+0x20>
 8005330:	2304      	movs	r3, #4
 8005332:	e04d      	b.n	80053d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005334:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <USER_SPI_read+0xc4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <USER_SPI_read+0x32>
 8005342:	2303      	movs	r3, #3
 8005344:	e044      	b.n	80053d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005346:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <USER_SPI_read+0xc8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <USER_SPI_read+0x44>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d111      	bne.n	8005382 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	2011      	movs	r0, #17
 8005362:	f7ff fe66 	bl	8005032 <send_cmd>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d129      	bne.n	80053c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800536c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005370:	68b8      	ldr	r0, [r7, #8]
 8005372:	f7ff fe03 	bl	8004f7c <rcvr_datablock>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d021      	beq.n	80053c0 <USER_SPI_read+0xac>
			count = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e01e      	b.n	80053c0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	2012      	movs	r0, #18
 8005386:	f7ff fe54 	bl	8005032 <send_cmd>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d117      	bne.n	80053c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f7ff fdf1 	bl	8004f7c <rcvr_datablock>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <USER_SPI_read+0xa2>
				buff += 512;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80053a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ed      	bne.n	8005390 <USER_SPI_read+0x7c>
 80053b4:	e000      	b.n	80053b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80053b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80053b8:	2100      	movs	r1, #0
 80053ba:	200c      	movs	r0, #12
 80053bc:	f7ff fe39 	bl	8005032 <send_cmd>
		}
	}
	despiselect();
 80053c0:	f7ff fdb4 	bl	8004f2c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000024 	.word	0x20000024
 80053dc:	200017bc 	.word	0x200017bc

080053e0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <USER_SPI_write+0x1c>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <USER_SPI_write+0x20>
 80053fc:	2304      	movs	r3, #4
 80053fe:	e063      	b.n	80054c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005400:	4b33      	ldr	r3, [pc, #204]	@ (80054d0 <USER_SPI_write+0xf0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <USER_SPI_write+0x32>
 800540e:	2303      	movs	r3, #3
 8005410:	e05a      	b.n	80054c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005412:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <USER_SPI_write+0xf0>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <USER_SPI_write+0x44>
 8005420:	2302      	movs	r3, #2
 8005422:	e051      	b.n	80054c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005424:	4b2b      	ldr	r3, [pc, #172]	@ (80054d4 <USER_SPI_write+0xf4>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <USER_SPI_write+0x56>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	025b      	lsls	r3, r3, #9
 8005434:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d110      	bne.n	800545e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	2018      	movs	r0, #24
 8005440:	f7ff fdf7 	bl	8005032 <send_cmd>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d136      	bne.n	80054b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800544a:	21fe      	movs	r1, #254	@ 0xfe
 800544c:	68b8      	ldr	r0, [r7, #8]
 800544e:	f7ff fdbe 	bl	8004fce <xmit_datablock>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02f      	beq.n	80054b8 <USER_SPI_write+0xd8>
			count = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	e02c      	b.n	80054b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800545e:	4b1d      	ldr	r3, [pc, #116]	@ (80054d4 <USER_SPI_write+0xf4>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <USER_SPI_write+0x92>
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	2097      	movs	r0, #151	@ 0x97
 800546e:	f7ff fde0 	bl	8005032 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	2019      	movs	r0, #25
 8005476:	f7ff fddc 	bl	8005032 <send_cmd>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d11b      	bne.n	80054b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005480:	21fc      	movs	r1, #252	@ 0xfc
 8005482:	68b8      	ldr	r0, [r7, #8]
 8005484:	f7ff fda3 	bl	8004fce <xmit_datablock>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <USER_SPI_write+0xc4>
				buff += 512;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005494:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	3b01      	subs	r3, #1
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ee      	bne.n	8005480 <USER_SPI_write+0xa0>
 80054a2:	e000      	b.n	80054a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80054a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80054a6:	21fd      	movs	r1, #253	@ 0xfd
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7ff fd90 	bl	8004fce <xmit_datablock>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <USER_SPI_write+0xd8>
 80054b4:	2301      	movs	r3, #1
 80054b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80054b8:	f7ff fd38 	bl	8004f2c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf14      	ite	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	2300      	moveq	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000024 	.word	0x20000024
 80054d4:	200017bc 	.word	0x200017bc

080054d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	@ 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	603a      	str	r2, [r7, #0]
 80054e2:	71fb      	strb	r3, [r7, #7]
 80054e4:	460b      	mov	r3, r1
 80054e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <USER_SPI_ioctl+0x1a>
 80054ee:	2304      	movs	r3, #4
 80054f0:	e15a      	b.n	80057a8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80054f2:	4baf      	ldr	r3, [pc, #700]	@ (80057b0 <USER_SPI_ioctl+0x2d8>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USER_SPI_ioctl+0x2c>
 8005500:	2303      	movs	r3, #3
 8005502:	e151      	b.n	80057a8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800550a:	79bb      	ldrb	r3, [r7, #6]
 800550c:	2b04      	cmp	r3, #4
 800550e:	f200 8136 	bhi.w	800577e <USER_SPI_ioctl+0x2a6>
 8005512:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <USER_SPI_ioctl+0x40>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800552d 	.word	0x0800552d
 800551c:	08005541 	.word	0x08005541
 8005520:	0800577f 	.word	0x0800577f
 8005524:	080055ed 	.word	0x080055ed
 8005528:	080056e3 	.word	0x080056e3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800552c:	f7ff fd0c 	bl	8004f48 <spiselect>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8127 	beq.w	8005786 <USER_SPI_ioctl+0x2ae>
 8005538:	2300      	movs	r3, #0
 800553a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800553e:	e122      	b.n	8005786 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005540:	2100      	movs	r1, #0
 8005542:	2009      	movs	r0, #9
 8005544:	f7ff fd75 	bl	8005032 <send_cmd>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 811d 	bne.w	800578a <USER_SPI_ioctl+0x2b2>
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	2110      	movs	r1, #16
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fd10 	bl	8004f7c <rcvr_datablock>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8113 	beq.w	800578a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005564:	7b3b      	ldrb	r3, [r7, #12]
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d111      	bne.n	8005592 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800556e:	7d7b      	ldrb	r3, [r7, #21]
 8005570:	461a      	mov	r2, r3
 8005572:	7d3b      	ldrb	r3, [r7, #20]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	4413      	add	r3, r2
 8005578:	461a      	mov	r2, r3
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005582:	4413      	add	r3, r2
 8005584:	3301      	adds	r3, #1
 8005586:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	029a      	lsls	r2, r3, #10
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e028      	b.n	80055e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005592:	7c7b      	ldrb	r3, [r7, #17]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	b2da      	uxtb	r2, r3
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	09db      	lsrs	r3, r3, #7
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	7d7b      	ldrb	r3, [r7, #21]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	3302      	adds	r3, #2
 80055b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80055ba:	7d3b      	ldrb	r3, [r7, #20]
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	7cbb      	ldrb	r3, [r7, #18]
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055d0:	4413      	add	r3, r2
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80055d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055da:	3b09      	subs	r3, #9
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	409a      	lsls	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80055ea:	e0ce      	b.n	800578a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80055ec:	4b71      	ldr	r3, [pc, #452]	@ (80057b4 <USER_SPI_ioctl+0x2dc>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d031      	beq.n	800565c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80055f8:	2100      	movs	r1, #0
 80055fa:	208d      	movs	r0, #141	@ 0x8d
 80055fc:	f7ff fd19 	bl	8005032 <send_cmd>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80c3 	bne.w	800578e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005608:	20ff      	movs	r0, #255	@ 0xff
 800560a:	f7ff fc1f 	bl	8004e4c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800560e:	f107 030c 	add.w	r3, r7, #12
 8005612:	2110      	movs	r1, #16
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fcb1 	bl	8004f7c <rcvr_datablock>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80b6 	beq.w	800578e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005622:	2330      	movs	r3, #48	@ 0x30
 8005624:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005628:	e007      	b.n	800563a <USER_SPI_ioctl+0x162>
 800562a:	20ff      	movs	r0, #255	@ 0xff
 800562c:	f7ff fc0e 	bl	8004e4c <xchg_spi>
 8005630:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005634:	3b01      	subs	r3, #1
 8005636:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800563a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f3      	bne.n	800562a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005642:	7dbb      	ldrb	r3, [r7, #22]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	2310      	movs	r3, #16
 800564c:	fa03 f202 	lsl.w	r2, r3, r2
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800565a:	e098      	b.n	800578e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800565c:	2100      	movs	r1, #0
 800565e:	2009      	movs	r0, #9
 8005660:	f7ff fce7 	bl	8005032 <send_cmd>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 8091 	bne.w	800578e <USER_SPI_ioctl+0x2b6>
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	2110      	movs	r1, #16
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fc82 	bl	8004f7c <rcvr_datablock>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8087 	beq.w	800578e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005680:	4b4c      	ldr	r3, [pc, #304]	@ (80057b4 <USER_SPI_ioctl+0x2dc>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d012      	beq.n	80056b2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800568c:	7dbb      	ldrb	r3, [r7, #22]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005694:	7dfa      	ldrb	r2, [r7, #23]
 8005696:	09d2      	lsrs	r2, r2, #7
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	4413      	add	r3, r2
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	7e7b      	ldrb	r3, [r7, #25]
 80056a0:	099b      	lsrs	r3, r3, #6
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e013      	b.n	80056da <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80056b2:	7dbb      	ldrb	r3, [r7, #22]
 80056b4:	109b      	asrs	r3, r3, #2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	3301      	adds	r3, #1
 80056be:	7dfa      	ldrb	r2, [r7, #23]
 80056c0:	00d2      	lsls	r2, r2, #3
 80056c2:	f002 0218 	and.w	r2, r2, #24
 80056c6:	7df9      	ldrb	r1, [r7, #23]
 80056c8:	0949      	lsrs	r1, r1, #5
 80056ca:	b2c9      	uxtb	r1, r1
 80056cc:	440a      	add	r2, r1
 80056ce:	3201      	adds	r2, #1
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80056e0:	e055      	b.n	800578e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80056e2:	4b34      	ldr	r3, [pc, #208]	@ (80057b4 <USER_SPI_ioctl+0x2dc>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 0306 	and.w	r3, r3, #6
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d051      	beq.n	8005792 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80056ee:	f107 020c 	add.w	r2, r7, #12
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	210b      	movs	r1, #11
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff feee 	bl	80054d8 <USER_SPI_ioctl>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d149      	bne.n	8005796 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005702:	7b3b      	ldrb	r3, [r7, #12]
 8005704:	099b      	lsrs	r3, r3, #6
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <USER_SPI_ioctl+0x23e>
 800570c:	7dbb      	ldrb	r3, [r7, #22]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d041      	beq.n	800579a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005726:	4b23      	ldr	r3, [pc, #140]	@ (80057b4 <USER_SPI_ioctl+0x2dc>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	025b      	lsls	r3, r3, #9
 8005736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	025b      	lsls	r3, r3, #9
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800573e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005740:	2020      	movs	r0, #32
 8005742:	f7ff fc76 	bl	8005032 <send_cmd>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d128      	bne.n	800579e <USER_SPI_ioctl+0x2c6>
 800574c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800574e:	2021      	movs	r0, #33	@ 0x21
 8005750:	f7ff fc6f 	bl	8005032 <send_cmd>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d121      	bne.n	800579e <USER_SPI_ioctl+0x2c6>
 800575a:	2100      	movs	r1, #0
 800575c:	2026      	movs	r0, #38	@ 0x26
 800575e:	f7ff fc68 	bl	8005032 <send_cmd>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11a      	bne.n	800579e <USER_SPI_ioctl+0x2c6>
 8005768:	f247 5030 	movw	r0, #30000	@ 0x7530
 800576c:	f7ff fbbb 	bl	8004ee6 <wait_ready>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d013      	beq.n	800579e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005776:	2300      	movs	r3, #0
 8005778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800577c:	e00f      	b.n	800579e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800577e:	2304      	movs	r3, #4
 8005780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005784:	e00c      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		break;
 8005786:	bf00      	nop
 8005788:	e00a      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		break;
 800578a:	bf00      	nop
 800578c:	e008      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		break;
 800578e:	bf00      	nop
 8005790:	e006      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005792:	bf00      	nop
 8005794:	e004      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005796:	bf00      	nop
 8005798:	e002      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <USER_SPI_ioctl+0x2c8>
		break;
 800579e:	bf00      	nop
	}

	despiselect();
 80057a0:	f7ff fbc4 	bl	8004f2c <despiselect>

	return res;
 80057a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3730      	adds	r7, #48	@ 0x30
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000024 	.word	0x20000024
 80057b4:	200017bc 	.word	0x200017bc

080057b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80057b8:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80057ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80057bc:	f7fe fbd6 	bl	8003f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057c0:	480c      	ldr	r0, [pc, #48]	@ (80057f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80057c2:	490d      	ldr	r1, [pc, #52]	@ (80057f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057c4:	4a0d      	ldr	r2, [pc, #52]	@ (80057fc <LoopForever+0xe>)
  movs r3, #0
 80057c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80057c8:	e002      	b.n	80057d0 <LoopCopyDataInit>

080057ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057ce:	3304      	adds	r3, #4

080057d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057d4:	d3f9      	bcc.n	80057ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80057d8:	4c0a      	ldr	r4, [pc, #40]	@ (8005804 <LoopForever+0x16>)
  movs r3, #0
 80057da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057dc:	e001      	b.n	80057e2 <LoopFillZerobss>

080057de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057e0:	3204      	adds	r2, #4

080057e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057e4:	d3fb      	bcc.n	80057de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80057e6:	f00f fd69 	bl	80152bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057ea:	f7fd f88b 	bl	8002904 <main>

080057ee <LoopForever>:

LoopForever:
    b LoopForever
 80057ee:	e7fe      	b.n	80057ee <LoopForever>
  ldr   r0, =_estack
 80057f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80057f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057f8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80057fc:	0801b834 	.word	0x0801b834
  ldr r2, =_sbss
 8005800:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005804:	200049c8 	.word	0x200049c8

08005808 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005808:	e7fe      	b.n	8005808 <COMP1_2_3_IRQHandler>

0800580a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005814:	2003      	movs	r0, #3
 8005816:	f001 fdb4 	bl	8007382 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800581a:	200f      	movs	r0, #15
 800581c:	f7fe f98e 	bl	8003b3c <HAL_InitTick>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	71fb      	strb	r3, [r7, #7]
 800582a:	e001      	b.n	8005830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800582c:	f7fe f95c 	bl	8003ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005830:	79fb      	ldrb	r3, [r7, #7]

}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_IncTick+0x1c>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b05      	ldr	r3, [pc, #20]	@ (800585c <HAL_IncTick+0x20>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4413      	add	r3, r2
 800584a:	4a03      	ldr	r2, [pc, #12]	@ (8005858 <HAL_IncTick+0x1c>)
 800584c:	6013      	str	r3, [r2, #0]
}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	200017c8 	.word	0x200017c8
 800585c:	2000002c 	.word	0x2000002c

08005860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return uwTick;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <HAL_GetTick+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	200017c8 	.word	0x200017c8

08005878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005880:	f7ff ffee 	bl	8005860 <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d004      	beq.n	800589c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005892:	4b09      	ldr	r3, [pc, #36]	@ (80058b8 <HAL_Delay+0x40>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800589c:	bf00      	nop
 800589e:	f7ff ffdf 	bl	8005860 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d8f7      	bhi.n	800589e <HAL_Delay+0x26>
  {
  }
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	2000002c 	.word	0x2000002c

080058bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3360      	adds	r3, #96	@ 0x60
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <LL_ADC_SetOffset+0x44>)
 8005946:	4013      	ands	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	03fff000 	.word	0x03fff000

0800596c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3360      	adds	r3, #96	@ 0x60
 800597a:	461a      	mov	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3360      	adds	r3, #96	@ 0x60
 80059a8:	461a      	mov	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	431a      	orrs	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3360      	adds	r3, #96	@ 0x60
 80059de:	461a      	mov	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3360      	adds	r3, #96	@ 0x60
 8005a14:	461a      	mov	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	615a      	str	r2, [r3, #20]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3330      	adds	r3, #48	@ 0x30
 8005a96:	461a      	mov	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	4413      	add	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	211f      	movs	r1, #31
 8005ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	401a      	ands	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	f003 011f 	and.w	r1, r3, #31
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	431a      	orrs	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3314      	adds	r3, #20
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0e5b      	lsrs	r3, r3, #25
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	4413      	add	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	0d1b      	lsrs	r3, r3, #20
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2107      	movs	r1, #7
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	401a      	ands	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f003 0318 	and.w	r3, r3, #24
 8005b7e:	4908      	ldr	r1, [pc, #32]	@ (8005ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b80:	40d9      	lsrs	r1, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	400b      	ands	r3, r1
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	0007ffff 	.word	0x0007ffff

08005ba4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6093      	str	r3, [r2, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c14:	d101      	bne.n	8005c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c64:	d101      	bne.n	8005c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <LL_ADC_IsEnabled+0x18>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <LL_ADC_IsEnabled+0x1a>
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cd6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005cda:	f043 0204 	orr.w	r2, r3, #4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d101      	bne.n	8005d06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d101      	bne.n	8005d2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b089      	sub	sp, #36	@ 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e167      	b.n	8006026 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fb fddf 	bl	8001928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff ff3f 	bl	8005c00 <LL_ADC_IsDeepPowerDownEnabled>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff25 	bl	8005bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff5a 	bl	8005c50 <LL_ADC_IsInternalRegulatorEnabled>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d115      	bne.n	8005dce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ff3e 	bl	8005c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dac:	4ba0      	ldr	r3, [pc, #640]	@ (8006030 <HAL_ADC_Init+0x2f4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	099b      	lsrs	r3, r3, #6
 8005db2:	4aa0      	ldr	r2, [pc, #640]	@ (8006034 <HAL_ADC_Init+0x2f8>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	3301      	adds	r3, #1
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005dc0:	e002      	b.n	8005dc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f9      	bne.n	8005dc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ff3c 	bl	8005c50 <LL_ADC_IsInternalRegulatorEnabled>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f043 0210 	orr.w	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ff75 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8005e04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 8100 	bne.w	8006014 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 80fc 	bne.w	8006014 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff35 	bl	8005ca0 <LL_ADC_IsEnabled>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d111      	bne.n	8005e60 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e40:	f7ff ff2e 	bl	8005ca0 <LL_ADC_IsEnabled>
 8005e44:	4604      	mov	r4, r0
 8005e46:	487c      	ldr	r0, [pc, #496]	@ (8006038 <HAL_ADC_Init+0x2fc>)
 8005e48:	f7ff ff2a 	bl	8005ca0 <LL_ADC_IsEnabled>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4323      	orrs	r3, r4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4878      	ldr	r0, [pc, #480]	@ (800603c <HAL_ADC_Init+0x300>)
 8005e5c:	f7ff fd2e 	bl	80058bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7f5b      	ldrb	r3, [r3, #29]
 8005e64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005e70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005e76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d106      	bne.n	8005e9c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	3b01      	subs	r3, #1
 8005e94:	045b      	lsls	r3, r3, #17
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	4b60      	ldr	r3, [pc, #384]	@ (8006040 <HAL_ADC_Init+0x304>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	69b9      	ldr	r1, [r7, #24]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ff14 	bl	8005d14 <LL_ADC_INJ_IsConversionOngoing>
 8005eec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d16d      	bne.n	8005fd0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d16a      	bne.n	8005fd0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005efe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f16:	f023 0302 	bic.w	r3, r3, #2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d017      	beq.n	8005f5c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6911      	ldr	r1, [r2, #16]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005f5a:	e013      	b.n	8005f84 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f80:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d118      	bne.n	8005fc0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f98:	f023 0304 	bic.w	r3, r3, #4
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	611a      	str	r2, [r3, #16]
 8005fbe:	e007      	b.n	8005fd0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10c      	bne.n	8005ff2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	f023 010f 	bic.w	r1, r3, #15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ff0:	e007      	b.n	8006002 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 020f 	bic.w	r2, r2, #15
 8006000:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006012:	e007      	b.n	8006024 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006018:	f043 0210 	orr.w	r2, r3, #16
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006024:	7ffb      	ldrb	r3, [r7, #31]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3724      	adds	r7, #36	@ 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}
 800602e:	bf00      	nop
 8006030:	20000020 	.word	0x20000020
 8006034:	053e2d63 	.word	0x053e2d63
 8006038:	50000100 	.word	0x50000100
 800603c:	50000300 	.word	0x50000300
 8006040:	fff04007 	.word	0xfff04007

08006044 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006050:	4851      	ldr	r0, [pc, #324]	@ (8006198 <HAL_ADC_Start_DMA+0x154>)
 8006052:	f7ff fda7 	bl	8005ba4 <LL_ADC_GetMultimode>
 8006056:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fe46 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 808f 	bne.w	8006188 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_ADC_Start_DMA+0x34>
 8006074:	2302      	movs	r3, #2
 8006076:	e08a      	b.n	800618e <HAL_ADC_Start_DMA+0x14a>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b05      	cmp	r3, #5
 800608a:	d002      	beq.n	8006092 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b09      	cmp	r3, #9
 8006090:	d173      	bne.n	800617a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 feb2 	bl	8006dfc <ADC_Enable>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d166      	bne.n	8006170 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a38      	ldr	r2, [pc, #224]	@ (800619c <HAL_ADC_Start_DMA+0x158>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d002      	beq.n	80060c6 <HAL_ADC_Start_DMA+0x82>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	e001      	b.n	80060ca <HAL_ADC_Start_DMA+0x86>
 80060c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d002      	beq.n	80060d8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f4:	f023 0206 	bic.w	r2, r3, #6
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80060fc:	e002      	b.n	8006104 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	4a25      	ldr	r2, [pc, #148]	@ (80061a0 <HAL_ADC_Start_DMA+0x15c>)
 800610a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006110:	4a24      	ldr	r2, [pc, #144]	@ (80061a4 <HAL_ADC_Start_DMA+0x160>)
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	4a23      	ldr	r2, [pc, #140]	@ (80061a8 <HAL_ADC_Start_DMA+0x164>)
 800611a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	221c      	movs	r2, #28
 8006122:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0210 	orr.w	r2, r2, #16
 800613a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3340      	adds	r3, #64	@ 0x40
 8006156:	4619      	mov	r1, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f001 f9ec 	bl	8007538 <HAL_DMA_Start_IT>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fdac 	bl	8005cc6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800616e:	e00d      	b.n	800618c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006178:	e008      	b.n	800618c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006186:	e001      	b.n	800618c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006188:	2302      	movs	r3, #2
 800618a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	50000300 	.word	0x50000300
 800619c:	50000100 	.word	0x50000100
 80061a0:	08006f09 	.word	0x08006f09
 80061a4:	08006fe1 	.word	0x08006fe1
 80061a8:	08006ffd 	.word	0x08006ffd

080061ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	@ 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061c8:	4883      	ldr	r0, [pc, #524]	@ (80063d8 <HAL_ADC_IRQHandler+0x22c>)
 80061ca:	f7ff fceb 	bl	8005ba4 <LL_ADC_GetMultimode>
 80061ce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <HAL_ADC_IRQHandler+0x5e>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d012      	beq.n	800620a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 ff65 	bl	80070cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2202      	movs	r2, #2
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <HAL_ADC_IRQHandler+0x72>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8085 	beq.w	8006334 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d07f      	beq.n	8006334 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fc05 	bl	8005a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d064      	beq.n	8006326 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5e      	ldr	r2, [pc, #376]	@ (80063dc <HAL_ADC_IRQHandler+0x230>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d002      	beq.n	800626c <HAL_ADC_IRQHandler+0xc0>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	e001      	b.n	8006270 <HAL_ADC_IRQHandler+0xc4>
 800626c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	4293      	cmp	r3, r2
 8006276:	d008      	beq.n	800628a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b05      	cmp	r3, #5
 8006282:	d002      	beq.n	800628a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b09      	cmp	r3, #9
 8006288:	d104      	bne.n	8006294 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	e00d      	b.n	80062b0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a50      	ldr	r2, [pc, #320]	@ (80063dc <HAL_ADC_IRQHandler+0x230>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d002      	beq.n	80062a4 <HAL_ADC_IRQHandler+0xf8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	e001      	b.n	80062a8 <HAL_ADC_IRQHandler+0xfc>
 80062a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d135      	bne.n	8006326 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d12e      	bne.n	8006326 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fd0e 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11a      	bne.n	800630e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 020c 	bic.w	r2, r2, #12
 80062e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d112      	bne.n	8006326 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800630c:	e00b      	b.n	8006326 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006312:	f043 0210 	orr.w	r2, r3, #16
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fb8a 	bl	8001a40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	220c      	movs	r2, #12
 8006332:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <HAL_ADC_IRQHandler+0x19c>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 809e 	beq.w	8006490 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8098 	beq.w	8006490 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006370:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fbae 	bl	8005ade <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006382:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fb69 	bl	8005a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 800638e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <HAL_ADC_IRQHandler+0x230>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d002      	beq.n	80063a0 <HAL_ADC_IRQHandler+0x1f4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	e001      	b.n	80063a4 <HAL_ADC_IRQHandler+0x1f8>
 80063a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d008      	beq.n	80063be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d002      	beq.n	80063be <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	d104      	bne.n	80063c8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	e011      	b.n	80063ec <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a03      	ldr	r2, [pc, #12]	@ (80063dc <HAL_ADC_IRQHandler+0x230>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d006      	beq.n	80063e0 <HAL_ADC_IRQHandler+0x234>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	e005      	b.n	80063e4 <HAL_ADC_IRQHandler+0x238>
 80063d8:	50000300 	.word	0x50000300
 80063dc:	50000100 	.word	0x50000100
 80063e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80063e4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d047      	beq.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <HAL_ADC_IRQHandler+0x260>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d03f      	beq.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13a      	bne.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006416:	2b40      	cmp	r3, #64	@ 0x40
 8006418:	d133      	bne.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d12e      	bne.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fc73 	bl	8005d14 <LL_ADC_INJ_IsConversionOngoing>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11a      	bne.n	800646a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006442:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d112      	bne.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006460:	f043 0201 	orr.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006468:	e00b      	b.n	8006482 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	f043 0210 	orr.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647a:	f043 0201 	orr.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fdfa 	bl	800707c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2260      	movs	r2, #96	@ 0x60
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d011      	beq.n	80064be <HAL_ADC_IRQHandler+0x312>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f89f 	bl	80065f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d012      	beq.n	80064ee <HAL_ADC_IRQHandler+0x342>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fde0 	bl	80070a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d012      	beq.n	800651e <HAL_ADC_IRQHandler+0x372>
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006506:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fdd2 	bl	80070b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800651c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d036      	beq.n	8006596 <HAL_ADC_IRQHandler+0x3ea>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	d031      	beq.n	8006596 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800653a:	2301      	movs	r3, #1
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
 800653e:	e014      	b.n	800656a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006546:	4825      	ldr	r0, [pc, #148]	@ (80065dc <HAL_ADC_IRQHandler+0x430>)
 8006548:	f7ff fb3a 	bl	8005bc0 <LL_ADC_GetMultiDMATransfer>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006552:	2301      	movs	r3, #1
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
 8006556:	e008      	b.n	800656a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006566:	2301      	movs	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	2b01      	cmp	r3, #1
 800656e:	d10e      	bne.n	800658e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006574:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006580:	f043 0202 	orr.w	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f83d 	bl	8006608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2210      	movs	r2, #16
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800659c:	2b00      	cmp	r3, #0
 800659e:	d018      	beq.n	80065d2 <HAL_ADC_IRQHandler+0x426>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d013      	beq.n	80065d2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ba:	f043 0208 	orr.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065ca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd5f 	bl	8007090 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80065d2:	bf00      	nop
 80065d4:	3728      	adds	r7, #40	@ 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	50000300 	.word	0x50000300

080065e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b0b6      	sub	sp, #216	@ 0xd8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_ADC_ConfigChannel+0x22>
 800663a:	2302      	movs	r3, #2
 800663c:	e3c8      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x7b4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fb4f 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 83ad 	bne.w	8006db2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	f7ff fa0e 	bl	8005a86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fb3d 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8006674:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fb49 	bl	8005d14 <LL_ADC_INJ_IsConversionOngoing>
 8006682:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 81d9 	bne.w	8006a42 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 81d4 	bne.w	8006a42 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a2:	d10f      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	4619      	mov	r1, r3
 80066b0:	f7ff fa28 	bl	8005b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff f9bc 	bl	8005a3a <LL_ADC_SetSamplingTimeCommonConfig>
 80066c2:	e00e      	b.n	80066e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	461a      	mov	r2, r3
 80066d2:	f7ff fa17 	bl	8005b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff f9ac 	bl	8005a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b04      	cmp	r3, #4
 8006702:	d022      	beq.n	800674a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	6919      	ldr	r1, [r3, #16]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006714:	f7ff f906 	bl	8005924 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6919      	ldr	r1, [r3, #16]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	461a      	mov	r2, r3
 8006726:	f7ff f952 	bl	80059ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006736:	2b01      	cmp	r3, #1
 8006738:	d102      	bne.n	8006740 <HAL_ADC_ConfigChannel+0x124>
 800673a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800673e:	e000      	b.n	8006742 <HAL_ADC_ConfigChannel+0x126>
 8006740:	2300      	movs	r3, #0
 8006742:	461a      	mov	r2, r3
 8006744:	f7ff f95e 	bl	8005a04 <LL_ADC_SetOffsetSaturation>
 8006748:	e17b      	b.n	8006a42 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f90b 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006756:	4603      	mov	r3, r0
 8006758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <HAL_ADC_ConfigChannel+0x15a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f900 	bl	800596c <LL_ADC_GetOffsetChannel>
 800676c:	4603      	mov	r3, r0
 800676e:	0e9b      	lsrs	r3, r3, #26
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	e01e      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x198>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff f8f5 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006782:	4603      	mov	r3, r0
 8006784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800678c:	fa93 f3a3 	rbit	r3, r3
 8006790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800679c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80067a4:	2320      	movs	r3, #32
 80067a6:	e004      	b.n	80067b2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80067a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067ac:	fab3 f383 	clz	r3, r3
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x1b0>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	0e9b      	lsrs	r3, r3, #26
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	e018      	b.n	80067fe <HAL_ADC_ConfigChannel+0x1e2>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80067d8:	fa93 f3a3 	rbit	r3, r3
 80067dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80067e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80067e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80067f0:	2320      	movs	r3, #32
 80067f2:	e004      	b.n	80067fe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80067f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067fe:	429a      	cmp	r2, r3
 8006800:	d106      	bne.n	8006810 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff f8c4 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff f8a8 	bl	800596c <LL_ADC_GetOffsetChannel>
 800681c:	4603      	mov	r3, r0
 800681e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_ADC_ConfigChannel+0x220>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff f89d 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006832:	4603      	mov	r3, r0
 8006834:	0e9b      	lsrs	r3, r3, #26
 8006836:	f003 021f 	and.w	r2, r3, #31
 800683a:	e01e      	b.n	800687a <HAL_ADC_ConfigChannel+0x25e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff f892 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006848:	4603      	mov	r3, r0
 800684a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006852:	fa93 f3a3 	rbit	r3, r3
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800685e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800686a:	2320      	movs	r3, #32
 800686c:	e004      	b.n	8006878 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800686e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <HAL_ADC_ConfigChannel+0x276>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	0e9b      	lsrs	r3, r3, #26
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	e018      	b.n	80068c4 <HAL_ADC_ConfigChannel+0x2a8>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800689e:	fa93 f3a3 	rbit	r3, r3
 80068a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80068a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80068ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80068b6:	2320      	movs	r3, #32
 80068b8:	e004      	b.n	80068c4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80068ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068be:	fab3 f383 	clz	r3, r3
 80068c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d106      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff f861 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2102      	movs	r1, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff f845 	bl	800596c <LL_ADC_GetOffsetChannel>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <HAL_ADC_ConfigChannel+0x2e6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2102      	movs	r1, #2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff f83a 	bl	800596c <LL_ADC_GetOffsetChannel>
 80068f8:	4603      	mov	r3, r0
 80068fa:	0e9b      	lsrs	r3, r3, #26
 80068fc:	f003 021f 	and.w	r2, r3, #31
 8006900:	e01e      	b.n	8006940 <HAL_ADC_ConfigChannel+0x324>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2102      	movs	r1, #2
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff f82f 	bl	800596c <LL_ADC_GetOffsetChannel>
 800690e:	4603      	mov	r3, r0
 8006910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006918:	fa93 f3a3 	rbit	r3, r3
 800691c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006928:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006930:	2320      	movs	r3, #32
 8006932:	e004      	b.n	800693e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006934:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <HAL_ADC_ConfigChannel+0x33c>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	0e9b      	lsrs	r3, r3, #26
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	e016      	b.n	8006986 <HAL_ADC_ConfigChannel+0x36a>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006964:	fa93 f3a3 	rbit	r3, r3
 8006968:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800696a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800696c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006978:	2320      	movs	r3, #32
 800697a:	e004      	b.n	8006986 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800697c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006980:	fab3 f383 	clz	r3, r3
 8006984:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006986:	429a      	cmp	r2, r3
 8006988:	d106      	bne.n	8006998 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	2102      	movs	r1, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff f800 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2103      	movs	r1, #3
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe ffe4 	bl	800596c <LL_ADC_GetOffsetChannel>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x3a8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2103      	movs	r1, #3
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe ffd9 	bl	800596c <LL_ADC_GetOffsetChannel>
 80069ba:	4603      	mov	r3, r0
 80069bc:	0e9b      	lsrs	r3, r3, #26
 80069be:	f003 021f 	and.w	r2, r3, #31
 80069c2:	e017      	b.n	80069f4 <HAL_ADC_ConfigChannel+0x3d8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2103      	movs	r1, #3
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe ffce 	bl	800596c <LL_ADC_GetOffsetChannel>
 80069d0:	4603      	mov	r3, r0
 80069d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069d6:	fa93 f3a3 	rbit	r3, r3
 80069da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80069dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80069e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80069e6:	2320      	movs	r3, #32
 80069e8:	e003      	b.n	80069f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80069ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ec:	fab3 f383 	clz	r3, r3
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <HAL_ADC_ConfigChannel+0x3f0>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	0e9b      	lsrs	r3, r3, #26
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	e011      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x414>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a14:	fa93 f3a3 	rbit	r3, r3
 8006a18:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006a24:	2320      	movs	r3, #32
 8006a26:	e003      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d106      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2103      	movs	r1, #3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe ffab 	bl	8005998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff f92a 	bl	8005ca0 <LL_ADC_IsEnabled>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f040 8140 	bne.w	8006cd4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	461a      	mov	r2, r3
 8006a62:	f7ff f87b 	bl	8005b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	4a8f      	ldr	r2, [pc, #572]	@ (8006ca8 <HAL_ADC_ConfigChannel+0x68c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	f040 8131 	bne.w	8006cd4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <HAL_ADC_ConfigChannel+0x47e>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	0e9b      	lsrs	r3, r3, #26
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2b09      	cmp	r3, #9
 8006a90:	bf94      	ite	ls
 8006a92:	2301      	movls	r3, #1
 8006a94:	2300      	movhi	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e019      	b.n	8006ace <HAL_ADC_ConfigChannel+0x4b2>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa2:	fa93 f3a3 	rbit	r3, r3
 8006aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	e003      	b.n	8006abe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab8:	fab3 f383 	clz	r3, r3
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	bf94      	ite	ls
 8006ac8:	2301      	movls	r3, #1
 8006aca:	2300      	movhi	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d079      	beq.n	8006bc6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d107      	bne.n	8006aee <HAL_ADC_ConfigChannel+0x4d2>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	0e9b      	lsrs	r3, r3, #26
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	069b      	lsls	r3, r3, #26
 8006ae8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006aec:	e015      	b.n	8006b1a <HAL_ADC_ConfigChannel+0x4fe>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af6:	fa93 f3a3 	rbit	r3, r3
 8006afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006afe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006b06:	2320      	movs	r3, #32
 8006b08:	e003      	b.n	8006b12 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0c:	fab3 f383 	clz	r3, r3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	3301      	adds	r3, #1
 8006b14:	069b      	lsls	r3, r3, #26
 8006b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_ADC_ConfigChannel+0x51e>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	0e9b      	lsrs	r3, r3, #26
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	2101      	movs	r1, #1
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	e017      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x54e>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b42:	fa93 f3a3 	rbit	r3, r3
 8006b46:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006b52:	2320      	movs	r3, #32
 8006b54:	e003      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b58:	fab3 f383 	clz	r3, r3
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	2101      	movs	r1, #1
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	ea42 0103 	orr.w	r1, r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x574>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	0e9b      	lsrs	r3, r3, #26
 8006b80:	3301      	adds	r3, #1
 8006b82:	f003 021f 	and.w	r2, r3, #31
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	051b      	lsls	r3, r3, #20
 8006b8e:	e018      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x5a6>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	fa93 f3a3 	rbit	r3, r3
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006ba8:	2320      	movs	r3, #32
 8006baa:	e003      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bae:	fab3 f383 	clz	r3, r3
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f003 021f 	and.w	r2, r3, #31
 8006bba:	4613      	mov	r3, r2
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	4413      	add	r3, r2
 8006bc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	e081      	b.n	8006cca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <HAL_ADC_ConfigChannel+0x5c6>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	0e9b      	lsrs	r3, r3, #26
 8006bd8:	3301      	adds	r3, #1
 8006bda:	069b      	lsls	r3, r3, #26
 8006bdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006be0:	e015      	b.n	8006c0e <HAL_ADC_ConfigChannel+0x5f2>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	e003      	b.n	8006c06 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	fab3 f383 	clz	r3, r3
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	3301      	adds	r3, #1
 8006c08:	069b      	lsls	r3, r3, #26
 8006c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x612>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	0e9b      	lsrs	r3, r3, #26
 8006c20:	3301      	adds	r3, #1
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2101      	movs	r1, #1
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	e017      	b.n	8006c5e <HAL_ADC_ConfigChannel+0x642>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	fa93 f3a3 	rbit	r3, r3
 8006c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006c46:	2320      	movs	r3, #32
 8006c48:	e003      	b.n	8006c52 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	fab3 f383 	clz	r3, r3
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	3301      	adds	r3, #1
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	2101      	movs	r1, #1
 8006c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5e:	ea42 0103 	orr.w	r1, r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10d      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x66e>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	0e9b      	lsrs	r3, r3, #26
 8006c74:	3301      	adds	r3, #1
 8006c76:	f003 021f 	and.w	r2, r3, #31
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	3b1e      	subs	r3, #30
 8006c82:	051b      	lsls	r3, r3, #20
 8006c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c88:	e01e      	b.n	8006cc8 <HAL_ADC_ConfigChannel+0x6ac>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	fa93 f3a3 	rbit	r3, r3
 8006c96:	613b      	str	r3, [r7, #16]
  return result;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006ca2:	2320      	movs	r3, #32
 8006ca4:	e006      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x698>
 8006ca6:	bf00      	nop
 8006ca8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	fab3 f383 	clz	r3, r3
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	f003 021f 	and.w	r2, r3, #31
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3b1e      	subs	r3, #30
 8006cc2:	051b      	lsls	r3, r3, #20
 8006cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cc8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7fe ff18 	bl	8005b04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d071      	beq.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ce0:	483e      	ldr	r0, [pc, #248]	@ (8006ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8006ce2:	f7fe fe11 	bl	8005908 <LL_ADC_GetCommonPathInternalCh>
 8006ce6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3c      	ldr	r2, [pc, #240]	@ (8006de0 <HAL_ADC_ConfigChannel+0x7c4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_ADC_ConfigChannel+0x6e2>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8006de4 <HAL_ADC_ConfigChannel+0x7c8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d127      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d121      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d12:	d157      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	482f      	ldr	r0, [pc, #188]	@ (8006ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8006d20:	f7fe fddf 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d24:	4b30      	ldr	r3, [pc, #192]	@ (8006de8 <HAL_ADC_ConfigChannel+0x7cc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	099b      	lsrs	r3, r3, #6
 8006d2a:	4a30      	ldr	r2, [pc, #192]	@ (8006dec <HAL_ADC_ConfigChannel+0x7d0>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	099b      	lsrs	r3, r3, #6
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	4613      	mov	r3, r2
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d3e:	e002      	b.n	8006d46 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f9      	bne.n	8006d40 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d4c:	e03a      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a27      	ldr	r2, [pc, #156]	@ (8006df0 <HAL_ADC_ConfigChannel+0x7d4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d113      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10d      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a22      	ldr	r2, [pc, #136]	@ (8006df4 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d02a      	beq.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d76:	4619      	mov	r1, r3
 8006d78:	4818      	ldr	r0, [pc, #96]	@ (8006ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8006d7a:	f7fe fdb2 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d7e:	e021      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a1c      	ldr	r2, [pc, #112]	@ (8006df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d11c      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d116      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a16      	ldr	r2, [pc, #88]	@ (8006df4 <HAL_ADC_ConfigChannel+0x7d8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d011      	beq.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006da4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006da8:	4619      	mov	r1, r3
 8006daa:	480c      	ldr	r0, [pc, #48]	@ (8006ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8006dac:	f7fe fd99 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
 8006db0:	e008      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006dcc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	37d8      	adds	r7, #216	@ 0xd8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	80080000 	.word	0x80080000
 8006ddc:	50000300 	.word	0x50000300
 8006de0:	c3210000 	.word	0xc3210000
 8006de4:	90c00010 	.word	0x90c00010
 8006de8:	20000020 	.word	0x20000020
 8006dec:	053e2d63 	.word	0x053e2d63
 8006df0:	c7520000 	.word	0xc7520000
 8006df4:	50000100 	.word	0x50000100
 8006df8:	cb840000 	.word	0xcb840000

08006dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe ff47 	bl	8005ca0 <LL_ADC_IsEnabled>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d169      	bne.n	8006eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	4b36      	ldr	r3, [pc, #216]	@ (8006ef8 <ADC_Enable+0xfc>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2a:	f043 0210 	orr.w	r2, r3, #16
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e36:	f043 0201 	orr.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e055      	b.n	8006eee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe ff16 	bl	8005c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006e4c:	482b      	ldr	r0, [pc, #172]	@ (8006efc <ADC_Enable+0x100>)
 8006e4e:	f7fe fd5b 	bl	8005908 <LL_ADC_GetCommonPathInternalCh>
 8006e52:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d013      	beq.n	8006e84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e5c:	4b28      	ldr	r3, [pc, #160]	@ (8006f00 <ADC_Enable+0x104>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	099b      	lsrs	r3, r3, #6
 8006e62:	4a28      	ldr	r2, [pc, #160]	@ (8006f04 <ADC_Enable+0x108>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	099b      	lsrs	r3, r3, #6
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006e76:	e002      	b.n	8006e7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f9      	bne.n	8006e78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e84:	f7fe fcec 	bl	8005860 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e8a:	e028      	b.n	8006ede <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe ff05 	bl	8005ca0 <LL_ADC_IsEnabled>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fee9 	bl	8005c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ea6:	f7fe fcdb 	bl	8005860 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d914      	bls.n	8006ede <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00d      	beq.n	8006ede <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	f043 0210 	orr.w	r2, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e007      	b.n	8006eee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d1cf      	bne.n	8006e8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	8000003f 	.word	0x8000003f
 8006efc:	50000300 	.word	0x50000300
 8006f00:	20000020 	.word	0x20000020
 8006f04:	053e2d63 	.word	0x053e2d63

08006f08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d14b      	bne.n	8006fba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d021      	beq.n	8006f80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd8d 	bl	8005a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d032      	beq.n	8006fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d12b      	bne.n	8006fb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d11f      	bne.n	8006fb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f7e:	e018      	b.n	8006fb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d111      	bne.n	8006fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006faa:	f043 0201 	orr.w	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7fa fd44 	bl	8001a40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006fb8:	e00e      	b.n	8006fd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fb1e 	bl	8006608 <HAL_ADC_ErrorCallback>
}
 8006fcc:	e004      	b.n	8006fd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff faf6 	bl	80065e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ff4:	bf00      	nop
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701a:	f043 0204 	orr.w	r2, r3, #4
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff faf0 	bl	8006608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <LL_ADC_IsEnabled>:
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <LL_ADC_IsEnabled+0x18>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <LL_ADC_IsEnabled+0x1a>
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <LL_ADC_REG_IsConversionOngoing>:
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b04      	cmp	r3, #4
 8007068:	d101      	bne.n	800706e <LL_ADC_REG_IsConversionOngoing+0x18>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b0a1      	sub	sp, #132	@ 0x84
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e08b      	b.n	8007216 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007106:	2300      	movs	r3, #0
 8007108:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800710a:	2300      	movs	r3, #0
 800710c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007116:	d102      	bne.n	800711e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007118:	4b41      	ldr	r3, [pc, #260]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	e001      	b.n	8007122 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e06a      	b.n	8007216 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ff87 	bl	8007056 <LL_ADC_REG_IsConversionOngoing>
 8007148:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff ff81 	bl	8007056 <LL_ADC_REG_IsConversionOngoing>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d14c      	bne.n	80071f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800715a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800715c:	2b00      	cmp	r3, #0
 800715e:	d149      	bne.n	80071f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007160:	4b30      	ldr	r3, [pc, #192]	@ (8007224 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007162:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d028      	beq.n	80071be <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800716c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800717e:	035b      	lsls	r3, r3, #13
 8007180:	430b      	orrs	r3, r1
 8007182:	431a      	orrs	r2, r3
 8007184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007186:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007188:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800718c:	f7ff ff50 	bl	8007030 <LL_ADC_IsEnabled>
 8007190:	4604      	mov	r4, r0
 8007192:	4823      	ldr	r0, [pc, #140]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007194:	f7ff ff4c 	bl	8007030 <LL_ADC_IsEnabled>
 8007198:	4603      	mov	r3, r0
 800719a:	4323      	orrs	r3, r4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d133      	bne.n	8007208 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80071a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80071a8:	f023 030f 	bic.w	r3, r3, #15
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	6811      	ldr	r1, [r2, #0]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	6892      	ldr	r2, [r2, #8]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	431a      	orrs	r2, r3
 80071b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071ba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071bc:	e024      	b.n	8007208 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80071be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071ca:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80071ce:	f7ff ff2f 	bl	8007030 <LL_ADC_IsEnabled>
 80071d2:	4604      	mov	r4, r0
 80071d4:	4812      	ldr	r0, [pc, #72]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80071d6:	f7ff ff2b 	bl	8007030 <LL_ADC_IsEnabled>
 80071da:	4603      	mov	r3, r0
 80071dc:	4323      	orrs	r3, r4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d112      	bne.n	8007208 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80071e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80071ea:	f023 030f 	bic.w	r3, r3, #15
 80071ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80071f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071f2:	e009      	b.n	8007208 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007206:	e000      	b.n	800720a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007208:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007212:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007216:	4618      	mov	r0, r3
 8007218:	3784      	adds	r7, #132	@ 0x84
 800721a:	46bd      	mov	sp, r7
 800721c:	bd90      	pop	{r4, r7, pc}
 800721e:	bf00      	nop
 8007220:	50000100 	.word	0x50000100
 8007224:	50000300 	.word	0x50000300

08007228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007238:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <__NVIC_SetPriorityGrouping+0x44>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007244:	4013      	ands	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800725a:	4a04      	ldr	r2, [pc, #16]	@ (800726c <__NVIC_SetPriorityGrouping+0x44>)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	60d3      	str	r3, [r2, #12]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	e000ed00 	.word	0xe000ed00

08007270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007274:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <__NVIC_GetPriorityGrouping+0x18>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 0307 	and.w	r3, r3, #7
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	e000ed00 	.word	0xe000ed00

0800728c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	2b00      	cmp	r3, #0
 800729c:	db0b      	blt.n	80072b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	f003 021f 	and.w	r2, r3, #31
 80072a4:	4907      	ldr	r1, [pc, #28]	@ (80072c4 <__NVIC_EnableIRQ+0x38>)
 80072a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2001      	movs	r0, #1
 80072ae:	fa00 f202 	lsl.w	r2, r0, r2
 80072b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	e000e100 	.word	0xe000e100

080072c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	db0a      	blt.n	80072f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	490c      	ldr	r1, [pc, #48]	@ (8007314 <__NVIC_SetPriority+0x4c>)
 80072e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e6:	0112      	lsls	r2, r2, #4
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	440b      	add	r3, r1
 80072ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072f0:	e00a      	b.n	8007308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	4908      	ldr	r1, [pc, #32]	@ (8007318 <__NVIC_SetPriority+0x50>)
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	3b04      	subs	r3, #4
 8007300:	0112      	lsls	r2, r2, #4
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	440b      	add	r3, r1
 8007306:	761a      	strb	r2, [r3, #24]
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	e000e100 	.word	0xe000e100
 8007318:	e000ed00 	.word	0xe000ed00

0800731c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800731c:	b480      	push	{r7}
 800731e:	b089      	sub	sp, #36	@ 0x24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f1c3 0307 	rsb	r3, r3, #7
 8007336:	2b04      	cmp	r3, #4
 8007338:	bf28      	it	cs
 800733a:	2304      	movcs	r3, #4
 800733c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	3304      	adds	r3, #4
 8007342:	2b06      	cmp	r3, #6
 8007344:	d902      	bls.n	800734c <NVIC_EncodePriority+0x30>
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3b03      	subs	r3, #3
 800734a:	e000      	b.n	800734e <NVIC_EncodePriority+0x32>
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007350:	f04f 32ff 	mov.w	r2, #4294967295
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43da      	mvns	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	401a      	ands	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007364:	f04f 31ff 	mov.w	r1, #4294967295
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	fa01 f303 	lsl.w	r3, r1, r3
 800736e:	43d9      	mvns	r1, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007374:	4313      	orrs	r3, r2
         );
}
 8007376:	4618      	mov	r0, r3
 8007378:	3724      	adds	r7, #36	@ 0x24
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff ff4c 	bl	8007228 <__NVIC_SetPriorityGrouping>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80073a6:	f7ff ff63 	bl	8007270 <__NVIC_GetPriorityGrouping>
 80073aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	6978      	ldr	r0, [r7, #20]
 80073b2:	f7ff ffb3 	bl	800731c <NVIC_EncodePriority>
 80073b6:	4602      	mov	r2, r0
 80073b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff ff82 	bl	80072c8 <__NVIC_SetPriority>
}
 80073c4:	bf00      	nop
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff56 	bl	800728c <__NVIC_EnableIRQ>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e08d      	b.n	8007516 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <HAL_DMA_Init+0x138>)
 8007402:	429a      	cmp	r2, r3
 8007404:	d80f      	bhi.n	8007426 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	4b45      	ldr	r3, [pc, #276]	@ (8007524 <HAL_DMA_Init+0x13c>)
 800740e:	4413      	add	r3, r2
 8007410:	4a45      	ldr	r2, [pc, #276]	@ (8007528 <HAL_DMA_Init+0x140>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	009a      	lsls	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a42      	ldr	r2, [pc, #264]	@ (800752c <HAL_DMA_Init+0x144>)
 8007422:	641a      	str	r2, [r3, #64]	@ 0x40
 8007424:	e00e      	b.n	8007444 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	4b40      	ldr	r3, [pc, #256]	@ (8007530 <HAL_DMA_Init+0x148>)
 800742e:	4413      	add	r3, r2
 8007430:	4a3d      	ldr	r2, [pc, #244]	@ (8007528 <HAL_DMA_Init+0x140>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	009a      	lsls	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a3c      	ldr	r2, [pc, #240]	@ (8007534 <HAL_DMA_Init+0x14c>)
 8007442:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800745a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa82 	bl	80079a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074a4:	d102      	bne.n	80074ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <HAL_DMA_Init+0x104>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d80c      	bhi.n	80074ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 faa2 	bl	8007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	e008      	b.n	80074fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40020407 	.word	0x40020407
 8007524:	bffdfff8 	.word	0xbffdfff8
 8007528:	cccccccd 	.word	0xcccccccd
 800752c:	40020000 	.word	0x40020000
 8007530:	bffdfbf8 	.word	0xbffdfbf8
 8007534:	40020400 	.word	0x40020400

08007538 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_DMA_Start_IT+0x20>
 8007554:	2302      	movs	r3, #2
 8007556:	e066      	b.n	8007626 <HAL_DMA_Start_IT+0xee>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d155      	bne.n	8007618 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f9c7 	bl	8007924 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 020e 	orr.w	r2, r2, #14
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e00f      	b.n	80075d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 020a 	orr.w	r2, r2, #10
 80075ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007604:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e005      	b.n	8007624 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007620:	2302      	movs	r3, #2
 8007622:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d005      	beq.n	8007652 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e037      	b.n	80076c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 020e 	bic.w	r2, r2, #14
 8007660:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007670:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007686:	f003 021f 	and.w	r2, r3, #31
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768e:	2101      	movs	r1, #1
 8007690:	fa01 f202 	lsl.w	r2, r1, r2
 8007694:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800769e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80076c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d00d      	beq.n	8007714 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2204      	movs	r2, #4
 80076fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	e047      	b.n	80077a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 020e 	bic.w	r2, r2, #14
 8007722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007748:	f003 021f 	and.w	r2, r3, #31
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	2101      	movs	r1, #1
 8007752:	fa01 f202 	lsl.w	r2, r1, r2
 8007756:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007760:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00c      	beq.n	8007784 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007778:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007782:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
    }
  }
  return status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2204      	movs	r2, #4
 80077d0:	409a      	lsls	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d026      	beq.n	8007828 <HAL_DMA_IRQHandler+0x7a>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d021      	beq.n	8007828 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0204 	bic.w	r2, r2, #4
 8007800:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007806:	f003 021f 	and.w	r2, r3, #31
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780e:	2104      	movs	r1, #4
 8007810:	fa01 f202 	lsl.w	r2, r1, r2
 8007814:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781a:	2b00      	cmp	r3, #0
 800781c:	d071      	beq.n	8007902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007826:	e06c      	b.n	8007902 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	2202      	movs	r2, #2
 8007832:	409a      	lsls	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4013      	ands	r3, r2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d02e      	beq.n	800789a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d029      	beq.n	800789a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 020a 	bic.w	r2, r2, #10
 8007862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007870:	f003 021f 	and.w	r2, r3, #31
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	2102      	movs	r1, #2
 800787a:	fa01 f202 	lsl.w	r2, r1, r2
 800787e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d038      	beq.n	8007902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007898:	e033      	b.n	8007902 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789e:	f003 031f 	and.w	r3, r3, #31
 80078a2:	2208      	movs	r2, #8
 80078a4:	409a      	lsls	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02a      	beq.n	8007904 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d025      	beq.n	8007904 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 020e 	bic.w	r2, r2, #14
 80078c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078cc:	f003 021f 	and.w	r2, r3, #31
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	2101      	movs	r1, #1
 80078d6:	fa01 f202 	lsl.w	r2, r1, r2
 80078da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007902:	bf00      	nop
 8007904:	bf00      	nop
}
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800793a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800794c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007952:	f003 021f 	and.w	r2, r3, #31
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	2101      	movs	r1, #1
 800795c:	fa01 f202 	lsl.w	r2, r1, r2
 8007960:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b10      	cmp	r3, #16
 8007970:	d108      	bne.n	8007984 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007982:	e007      	b.n	8007994 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	4b16      	ldr	r3, [pc, #88]	@ (8007a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d802      	bhi.n	80079ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80079b4:	4b15      	ldr	r3, [pc, #84]	@ (8007a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e001      	b.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80079ba:	4b15      	ldr	r3, [pc, #84]	@ (8007a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80079bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	3b08      	subs	r3, #8
 80079ca:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d8:	089b      	lsrs	r3, r3, #2
 80079da:	009a      	lsls	r2, r3, #2
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80079ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2201      	movs	r2, #1
 80079f4:	409a      	lsls	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40020407 	.word	0x40020407
 8007a0c:	40020800 	.word	0x40020800
 8007a10:	40020820 	.word	0x40020820
 8007a14:	cccccccd 	.word	0xcccccccd
 8007a18:	40020880 	.word	0x40020880

08007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	461a      	mov	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a08      	ldr	r2, [pc, #32]	@ (8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007a3e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2201      	movs	r2, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	1000823f 	.word	0x1000823f
 8007a60:	40020940 	.word	0x40020940

08007a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a72:	e15a      	b.n	8007d2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	2101      	movs	r1, #1
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a80:	4013      	ands	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 814c 	beq.w	8007d24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d005      	beq.n	8007aa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d130      	bne.n	8007b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	2203      	movs	r2, #3
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ada:	2201      	movs	r2, #1
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	f003 0201 	and.w	r2, r3, #1
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d017      	beq.n	8007b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4013      	ands	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d123      	bne.n	8007b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	08da      	lsrs	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3208      	adds	r2, #8
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	220f      	movs	r2, #15
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	08da      	lsrs	r2, r3, #3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3208      	adds	r2, #8
 8007b90:	6939      	ldr	r1, [r7, #16]
 8007b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	4013      	ands	r3, r2
 8007bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f003 0203 	and.w	r2, r3, #3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80a6 	beq.w	8007d24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007d48 <HAL_GPIO_Init+0x2e4>)
 8007bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8007d48 <HAL_GPIO_Init+0x2e4>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6613      	str	r3, [r2, #96]	@ 0x60
 8007be4:	4b58      	ldr	r3, [pc, #352]	@ (8007d48 <HAL_GPIO_Init+0x2e4>)
 8007be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bf0:	4a56      	ldr	r2, [pc, #344]	@ (8007d4c <HAL_GPIO_Init+0x2e8>)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	089b      	lsrs	r3, r3, #2
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f003 0303 	and.w	r3, r3, #3
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	220f      	movs	r2, #15
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4013      	ands	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007c1a:	d01f      	beq.n	8007c5c <HAL_GPIO_Init+0x1f8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8007d50 <HAL_GPIO_Init+0x2ec>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d019      	beq.n	8007c58 <HAL_GPIO_Init+0x1f4>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a4b      	ldr	r2, [pc, #300]	@ (8007d54 <HAL_GPIO_Init+0x2f0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_GPIO_Init+0x1f0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8007d58 <HAL_GPIO_Init+0x2f4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00d      	beq.n	8007c50 <HAL_GPIO_Init+0x1ec>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a49      	ldr	r2, [pc, #292]	@ (8007d5c <HAL_GPIO_Init+0x2f8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d007      	beq.n	8007c4c <HAL_GPIO_Init+0x1e8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a48      	ldr	r2, [pc, #288]	@ (8007d60 <HAL_GPIO_Init+0x2fc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d101      	bne.n	8007c48 <HAL_GPIO_Init+0x1e4>
 8007c44:	2305      	movs	r3, #5
 8007c46:	e00a      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c48:	2306      	movs	r3, #6
 8007c4a:	e008      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	e006      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c50:	2303      	movs	r3, #3
 8007c52:	e004      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e002      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <HAL_GPIO_Init+0x1fa>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f002 0203 	and.w	r2, r2, #3
 8007c64:	0092      	lsls	r2, r2, #2
 8007c66:	4093      	lsls	r3, r2
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c6e:	4937      	ldr	r1, [pc, #220]	@ (8007d4c <HAL_GPIO_Init+0x2e8>)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	089b      	lsrs	r3, r3, #2
 8007c74:	3302      	adds	r3, #2
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c7c:	4b39      	ldr	r3, [pc, #228]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ca0:	4a30      	ldr	r2, [pc, #192]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007cca:	4a26      	ldr	r2, [pc, #152]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007cd0:	4b24      	ldr	r3, [pc, #144]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4013      	ands	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d1e:	4a11      	ldr	r2, [pc, #68]	@ (8007d64 <HAL_GPIO_Init+0x300>)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	3301      	adds	r3, #1
 8007d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f47f ae9d 	bne.w	8007a74 <HAL_GPIO_Init+0x10>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	40010000 	.word	0x40010000
 8007d50:	48000400 	.word	0x48000400
 8007d54:	48000800 	.word	0x48000800
 8007d58:	48000c00 	.word	0x48000c00
 8007d5c:	48001000 	.word	0x48001000
 8007d60:	48001400 	.word	0x48001400
 8007d64:	40010400 	.word	0x40010400

08007d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	e001      	b.n	8007d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	807b      	strh	r3, [r7, #2]
 8007da4:	4613      	mov	r3, r2
 8007da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007da8:	787b      	ldrb	r3, [r7, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dae:	887a      	ldrh	r2, [r7, #2]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007db4:	e002      	b.n	8007dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007dda:	887a      	ldrh	r2, [r7, #2]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4013      	ands	r3, r2
 8007de0:	041a      	lsls	r2, r3, #16
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	43d9      	mvns	r1, r3
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	400b      	ands	r3, r1
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	619a      	str	r2, [r3, #24]
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d006      	beq.n	8007e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e12:	4a05      	ldr	r2, [pc, #20]	@ (8007e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fa fcc4 	bl	80027a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40010400 	.word	0x40010400

08007e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e08d      	b.n	8007f5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fa faf4 	bl	8002440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	@ 0x24
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d107      	bne.n	8007ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e006      	b.n	8007eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d108      	bne.n	8007ece <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	e007      	b.n	8007ede <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	817b      	strh	r3, [r7, #10]
 8007f76:	460b      	mov	r3, r1
 8007f78:	813b      	strh	r3, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	f040 80f9 	bne.w	800817e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_I2C_Mem_Write+0x34>
 8007f92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d105      	bne.n	8007fa4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0ed      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_I2C_Mem_Write+0x4e>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e0e6      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fba:	f7fd fc51 	bl	8005860 <HAL_GetTick>
 8007fbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	2319      	movs	r3, #25
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fac3 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0d1      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2221      	movs	r2, #33	@ 0x21
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2240      	movs	r2, #64	@ 0x40
 8007fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a3a      	ldr	r2, [r7, #32]
 8007ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008004:	88f8      	ldrh	r0, [r7, #6]
 8008006:	893a      	ldrh	r2, [r7, #8]
 8008008:	8979      	ldrh	r1, [r7, #10]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4603      	mov	r3, r0
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f9d3 	bl	80083c0 <I2C_RequestMemoryWrite>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0a9      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	2bff      	cmp	r3, #255	@ 0xff
 8008034:	d90e      	bls.n	8008054 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	22ff      	movs	r2, #255	@ 0xff
 800803a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008040:	b2da      	uxtb	r2, r3
 8008042:	8979      	ldrh	r1, [r7, #10]
 8008044:	2300      	movs	r3, #0
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fc47 	bl	80088e0 <I2C_TransferConfig>
 8008052:	e00f      	b.n	8008074 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008062:	b2da      	uxtb	r2, r3
 8008064:	8979      	ldrh	r1, [r7, #10]
 8008066:	2300      	movs	r3, #0
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fc36 	bl	80088e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fac6 	bl	800860a <I2C_WaitOnTXISFlagUntilTimeout>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e07b      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d034      	beq.n	800812c <HAL_I2C_Mem_Write+0x1c8>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d130      	bne.n	800812c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	2200      	movs	r2, #0
 80080d2:	2180      	movs	r1, #128	@ 0x80
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fa3f 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e04d      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2bff      	cmp	r3, #255	@ 0xff
 80080ec:	d90e      	bls.n	800810c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	22ff      	movs	r2, #255	@ 0xff
 80080f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	8979      	ldrh	r1, [r7, #10]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fbeb 	bl	80088e0 <I2C_TransferConfig>
 800810a:	e00f      	b.n	800812c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800811a:	b2da      	uxtb	r2, r3
 800811c:	8979      	ldrh	r1, [r7, #10]
 800811e:	2300      	movs	r3, #0
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fbda 	bl	80088e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d19e      	bne.n	8008074 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 faac 	bl	8008698 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e01a      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2220      	movs	r2, #32
 8008150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6859      	ldr	r1, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <HAL_I2C_Mem_Write+0x224>)
 800815e:	400b      	ands	r3, r1
 8008160:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800817e:	2302      	movs	r3, #2
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	fe00e800 	.word	0xfe00e800

0800818c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4603      	mov	r3, r0
 800819c:	817b      	strh	r3, [r7, #10]
 800819e:	460b      	mov	r3, r1
 80081a0:	813b      	strh	r3, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	f040 80fd 	bne.w	80083ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_I2C_Mem_Read+0x34>
 80081ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0f1      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_I2C_Mem_Read+0x4e>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e0ea      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081e2:	f7fd fb3d 	bl	8005860 <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	2319      	movs	r3, #25
 80081ee:	2201      	movs	r2, #1
 80081f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f9af 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e0d5      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2222      	movs	r2, #34	@ 0x22
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2240      	movs	r2, #64	@ 0x40
 8008210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008224:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800822c:	88f8      	ldrh	r0, [r7, #6]
 800822e:	893a      	ldrh	r2, [r7, #8]
 8008230:	8979      	ldrh	r1, [r7, #10]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4603      	mov	r3, r0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f913 	bl	8008468 <I2C_RequestMemoryRead>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0ad      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008258:	b29b      	uxth	r3, r3
 800825a:	2bff      	cmp	r3, #255	@ 0xff
 800825c:	d90e      	bls.n	800827c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	22ff      	movs	r2, #255	@ 0xff
 8008262:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008268:	b2da      	uxtb	r2, r3
 800826a:	8979      	ldrh	r1, [r7, #10]
 800826c:	4b52      	ldr	r3, [pc, #328]	@ (80083b8 <HAL_I2C_Mem_Read+0x22c>)
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fb33 	bl	80088e0 <I2C_TransferConfig>
 800827a:	e00f      	b.n	800829c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828a:	b2da      	uxtb	r2, r3
 800828c:	8979      	ldrh	r1, [r7, #10]
 800828e:	4b4a      	ldr	r3, [pc, #296]	@ (80083b8 <HAL_I2C_Mem_Read+0x22c>)
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fb22 	bl	80088e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	2200      	movs	r2, #0
 80082a4:	2104      	movs	r1, #4
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f956 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e07c      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d034      	beq.n	800835c <HAL_I2C_Mem_Read+0x1d0>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d130      	bne.n	800835c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	2200      	movs	r2, #0
 8008302:	2180      	movs	r1, #128	@ 0x80
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f927 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e04d      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2bff      	cmp	r3, #255	@ 0xff
 800831c:	d90e      	bls.n	800833c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22ff      	movs	r2, #255	@ 0xff
 8008322:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008328:	b2da      	uxtb	r2, r3
 800832a:	8979      	ldrh	r1, [r7, #10]
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fad3 	bl	80088e0 <I2C_TransferConfig>
 800833a:	e00f      	b.n	800835c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834a:	b2da      	uxtb	r2, r3
 800834c:	8979      	ldrh	r1, [r7, #10]
 800834e:	2300      	movs	r3, #0
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fac2 	bl	80088e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d19a      	bne.n	800829c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f994 	bl	8008698 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e01a      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2220      	movs	r2, #32
 8008380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6859      	ldr	r1, [r3, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <HAL_I2C_Mem_Read+0x230>)
 800838e:	400b      	ands	r3, r1
 8008390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e000      	b.n	80083b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
  }
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	80002400 	.word	0x80002400
 80083bc:	fe00e800 	.word	0xfe00e800

080083c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	817b      	strh	r3, [r7, #10]
 80083d2:	460b      	mov	r3, r1
 80083d4:	813b      	strh	r3, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	8979      	ldrh	r1, [r7, #10]
 80083e0:	4b20      	ldr	r3, [pc, #128]	@ (8008464 <I2C_RequestMemoryWrite+0xa4>)
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fa79 	bl	80088e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	69b9      	ldr	r1, [r7, #24]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f909 	bl	800860a <I2C_WaitOnTXISFlagUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e02c      	b.n	800845c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d105      	bne.n	8008414 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008408:	893b      	ldrh	r3, [r7, #8]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	629a      	str	r2, [r3, #40]	@ 0x28
 8008412:	e015      	b.n	8008440 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008414:	893b      	ldrh	r3, [r7, #8]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	b2da      	uxtb	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	69b9      	ldr	r1, [r7, #24]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f8ef 	bl	800860a <I2C_WaitOnTXISFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e012      	b.n	800845c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008436:	893b      	ldrh	r3, [r7, #8]
 8008438:	b2da      	uxtb	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	2200      	movs	r2, #0
 8008448:	2180      	movs	r1, #128	@ 0x80
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f884 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	80002000 	.word	0x80002000

08008468 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af02      	add	r7, sp, #8
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4603      	mov	r3, r0
 8008478:	817b      	strh	r3, [r7, #10]
 800847a:	460b      	mov	r3, r1
 800847c:	813b      	strh	r3, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	8979      	ldrh	r1, [r7, #10]
 8008488:	4b20      	ldr	r3, [pc, #128]	@ (800850c <I2C_RequestMemoryRead+0xa4>)
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2300      	movs	r3, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fa26 	bl	80088e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	69b9      	ldr	r1, [r7, #24]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f8b6 	bl	800860a <I2C_WaitOnTXISFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e02c      	b.n	8008502 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084ae:	893b      	ldrh	r3, [r7, #8]
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80084b8:	e015      	b.n	80084e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084ba:	893b      	ldrh	r3, [r7, #8]
 80084bc:	0a1b      	lsrs	r3, r3, #8
 80084be:	b29b      	uxth	r3, r3
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	69b9      	ldr	r1, [r7, #24]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f89c 	bl	800860a <I2C_WaitOnTXISFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e012      	b.n	8008502 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084dc:	893b      	ldrh	r3, [r7, #8]
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2200      	movs	r2, #0
 80084ee:	2140      	movs	r1, #64	@ 0x40
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f831 	bl	8008558 <I2C_WaitOnFlagUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	80002000 	.word	0x80002000

08008510 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b02      	cmp	r3, #2
 8008524:	d103      	bne.n	800852e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b01      	cmp	r3, #1
 800853a:	d007      	beq.n	800854c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699a      	ldr	r2, [r3, #24]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	619a      	str	r2, [r3, #24]
  }
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008568:	e03b      	b.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f8d6 	bl	8008720 <I2C_IsErrorOccurred>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e041      	b.n	8008602 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d02d      	beq.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fd f96b 	bl	8005860 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d122      	bne.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699a      	ldr	r2, [r3, #24]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4013      	ands	r3, r2
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d113      	bne.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	f043 0220 	orr.w	r2, r3, #32
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e00f      	b.n	8008602 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4013      	ands	r3, r2
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	bf0c      	ite	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	2300      	movne	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d0b4      	beq.n	800856a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008616:	e033      	b.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 f87f 	bl	8008720 <I2C_IsErrorOccurred>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e031      	b.n	8008690 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008632:	d025      	beq.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008634:	f7fd f914 	bl	8005860 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d11a      	bne.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b02      	cmp	r3, #2
 8008656:	d013      	beq.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e007      	b.n	8008690 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b02      	cmp	r3, #2
 800868c:	d1c4      	bne.n	8008618 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086a4:	e02f      	b.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 f838 	bl	8008720 <I2C_IsErrorOccurred>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e02d      	b.n	8008716 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ba:	f7fd f8d1 	bl	8005860 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d302      	bcc.n	80086d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11a      	bne.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d013      	beq.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f043 0220 	orr.w	r2, r3, #32
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e007      	b.n	8008716 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b20      	cmp	r3, #32
 8008712:	d1c8      	bne.n	80086a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d068      	beq.n	800881e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2210      	movs	r2, #16
 8008752:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008754:	e049      	b.n	80087ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d045      	beq.n	80087ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800875e:	f7fd f87f 	bl	8005860 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	429a      	cmp	r2, r3
 800876c:	d302      	bcc.n	8008774 <I2C_IsErrorOccurred+0x54>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d13a      	bne.n	80087ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800877e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008786:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008796:	d121      	bne.n	80087dc <I2C_IsErrorOccurred+0xbc>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800879e:	d01d      	beq.n	80087dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80087a0:	7cfb      	ldrb	r3, [r7, #19]
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d01a      	beq.n	80087dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80087b6:	f7fd f853 	bl	8005860 <HAL_GetTick>
 80087ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087bc:	e00e      	b.n	80087dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80087be:	f7fd f84f 	bl	8005860 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b19      	cmp	r3, #25
 80087ca:	d907      	bls.n	80087dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	f043 0320 	orr.w	r3, r3, #32
 80087d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80087da:	e006      	b.n	80087ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f003 0320 	and.w	r3, r3, #32
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d1e9      	bne.n	80087be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 0320 	and.w	r3, r3, #32
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d003      	beq.n	8008800 <I2C_IsErrorOccurred+0xe0>
 80087f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0aa      	beq.n	8008756 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008804:	2b00      	cmp	r3, #0
 8008806:	d103      	bne.n	8008810 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2220      	movs	r2, #32
 800880e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	f043 0304 	orr.w	r3, r3, #4
 8008816:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00b      	beq.n	800886a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	f043 0308 	orr.w	r3, r3, #8
 8008858:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008862:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	f043 0302 	orr.w	r3, r3, #2
 800887a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800888c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01c      	beq.n	80088ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fe3b 	bl	8008510 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <I2C_IsErrorOccurred+0x1bc>)
 80088a6:	400b      	ands	r3, r1
 80088a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80088ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	@ 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	fe00e800 	.word	0xfe00e800

080088e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	817b      	strh	r3, [r7, #10]
 80088ee:	4613      	mov	r3, r2
 80088f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088f2:	897b      	ldrh	r3, [r7, #10]
 80088f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088f8:	7a7b      	ldrb	r3, [r7, #9]
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008900:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	4313      	orrs	r3, r2
 800890a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800890e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	0d5b      	lsrs	r3, r3, #21
 800891a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800891e:	4b08      	ldr	r3, [pc, #32]	@ (8008940 <I2C_TransferConfig+0x60>)
 8008920:	430b      	orrs	r3, r1
 8008922:	43db      	mvns	r3, r3
 8008924:	ea02 0103 	and.w	r1, r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	03ff63ff 	.word	0x03ff63ff

08008944 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b20      	cmp	r3, #32
 8008958:	d138      	bne.n	80089cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008964:	2302      	movs	r3, #2
 8008966:	e032      	b.n	80089ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2224      	movs	r2, #36	@ 0x24
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0201 	bic.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008996:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e000      	b.n	80089ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089cc:	2302      	movs	r3, #2
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d139      	bne.n	8008a64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e033      	b.n	8008a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2224      	movs	r2, #36	@ 0x24
 8008a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008a2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e000      	b.n	8008a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a64:	2302      	movs	r3, #2
  }
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d141      	bne.n	8008b06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a82:	4b4b      	ldr	r3, [pc, #300]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8e:	d131      	bne.n	8008af4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a90:	4b47      	ldr	r3, [pc, #284]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a96:	4a46      	ldr	r2, [pc, #280]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008aa0:	4b43      	ldr	r3, [pc, #268]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008aa8:	4a41      	ldr	r2, [pc, #260]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008aae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ab0:	4b40      	ldr	r3, [pc, #256]	@ (8008bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2232      	movs	r2, #50	@ 0x32
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	4a3f      	ldr	r2, [pc, #252]	@ (8008bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008abc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac0:	0c9b      	lsrs	r3, r3, #18
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ac6:	e002      	b.n	8008ace <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ace:	4b38      	ldr	r3, [pc, #224]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ada:	d102      	bne.n	8008ae2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1f2      	bne.n	8008ac8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ae2:	4b33      	ldr	r3, [pc, #204]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aee:	d158      	bne.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e057      	b.n	8008ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008af4:	4b2e      	ldr	r3, [pc, #184]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008afa:	4a2d      	ldr	r2, [pc, #180]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b04:	e04d      	b.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b0c:	d141      	bne.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b0e:	4b28      	ldr	r3, [pc, #160]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b1a:	d131      	bne.n	8008b80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b1c:	4b24      	ldr	r3, [pc, #144]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b22:	4a23      	ldr	r2, [pc, #140]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b2c:	4b20      	ldr	r3, [pc, #128]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b34:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2232      	movs	r2, #50	@ 0x32
 8008b42:	fb02 f303 	mul.w	r3, r2, r3
 8008b46:	4a1c      	ldr	r2, [pc, #112]	@ (8008bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b48:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4c:	0c9b      	lsrs	r3, r3, #18
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b52:	e002      	b.n	8008b5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b5a:	4b15      	ldr	r3, [pc, #84]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b66:	d102      	bne.n	8008b6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f2      	bne.n	8008b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b6e:	4b10      	ldr	r3, [pc, #64]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b7a:	d112      	bne.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e011      	b.n	8008ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b80:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b86:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b90:	e007      	b.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b92:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b9a:	4a05      	ldr	r2, [pc, #20]	@ (8008bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ba0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40007000 	.word	0x40007000
 8008bb4:	20000020 	.word	0x20000020
 8008bb8:	431bde83 	.word	0x431bde83

08008bbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4a04      	ldr	r2, [pc, #16]	@ (8008bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bca:	6093      	str	r3, [r2, #8]
}
 8008bcc:	bf00      	nop
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40007000 	.word	0x40007000

08008bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e2fe      	b.n	80091ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d075      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bfa:	4b97      	ldr	r3, [pc, #604]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 030c 	and.w	r3, r3, #12
 8008c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c04:	4b94      	ldr	r3, [pc, #592]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b0c      	cmp	r3, #12
 8008c12:	d102      	bne.n	8008c1a <HAL_RCC_OscConfig+0x3e>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d002      	beq.n	8008c20 <HAL_RCC_OscConfig+0x44>
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d10b      	bne.n	8008c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c20:	4b8d      	ldr	r3, [pc, #564]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d05b      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x108>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d157      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e2d9      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c40:	d106      	bne.n	8008c50 <HAL_RCC_OscConfig+0x74>
 8008c42:	4b85      	ldr	r3, [pc, #532]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a84      	ldr	r2, [pc, #528]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	e01d      	b.n	8008c8c <HAL_RCC_OscConfig+0xb0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c58:	d10c      	bne.n	8008c74 <HAL_RCC_OscConfig+0x98>
 8008c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	4b7c      	ldr	r3, [pc, #496]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	e00b      	b.n	8008c8c <HAL_RCC_OscConfig+0xb0>
 8008c74:	4b78      	ldr	r3, [pc, #480]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a77      	ldr	r2, [pc, #476]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	4b75      	ldr	r3, [pc, #468]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a74      	ldr	r2, [pc, #464]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d013      	beq.n	8008cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c94:	f7fc fde4 	bl	8005860 <HAL_GetTick>
 8008c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c9c:	f7fc fde0 	bl	8005860 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b64      	cmp	r3, #100	@ 0x64
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e29e      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cae:	4b6a      	ldr	r3, [pc, #424]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0f0      	beq.n	8008c9c <HAL_RCC_OscConfig+0xc0>
 8008cba:	e014      	b.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbc:	f7fc fdd0 	bl	8005860 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cc4:	f7fc fdcc 	bl	8005860 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b64      	cmp	r3, #100	@ 0x64
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e28a      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cd6:	4b60      	ldr	r3, [pc, #384]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0xe8>
 8008ce2:	e000      	b.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d075      	beq.n	8008dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cf2:	4b59      	ldr	r3, [pc, #356]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 030c 	and.w	r3, r3, #12
 8008cfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cfc:	4b56      	ldr	r3, [pc, #344]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b0c      	cmp	r3, #12
 8008d0a:	d102      	bne.n	8008d12 <HAL_RCC_OscConfig+0x136>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d002      	beq.n	8008d18 <HAL_RCC_OscConfig+0x13c>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d11f      	bne.n	8008d58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d18:	4b4f      	ldr	r3, [pc, #316]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_RCC_OscConfig+0x154>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e25d      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d30:	4b49      	ldr	r3, [pc, #292]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	061b      	lsls	r3, r3, #24
 8008d3e:	4946      	ldr	r1, [pc, #280]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d44:	4b45      	ldr	r3, [pc, #276]	@ (8008e5c <HAL_RCC_OscConfig+0x280>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fa fef7 	bl	8003b3c <HAL_InitTick>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d043      	beq.n	8008ddc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e249      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d023      	beq.n	8008da8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d60:	4b3d      	ldr	r3, [pc, #244]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a3c      	ldr	r2, [pc, #240]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6c:	f7fc fd78 	bl	8005860 <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d74:	f7fc fd74 	bl	8005860 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e232      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d86:	4b34      	ldr	r3, [pc, #208]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0f0      	beq.n	8008d74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d92:	4b31      	ldr	r3, [pc, #196]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	061b      	lsls	r3, r3, #24
 8008da0:	492d      	ldr	r1, [pc, #180]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	604b      	str	r3, [r1, #4]
 8008da6:	e01a      	b.n	8008dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008da8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2a      	ldr	r2, [pc, #168]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008dae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fc fd54 	bl	8005860 <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dbc:	f7fc fd50 	bl	8005860 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e20e      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008dce:	4b22      	ldr	r3, [pc, #136]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x1e0>
 8008dda:	e000      	b.n	8008dde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ddc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d041      	beq.n	8008e6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01c      	beq.n	8008e2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008df2:	4b19      	ldr	r3, [pc, #100]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008df8:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e02:	f7fc fd2d 	bl	8005860 <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e0a:	f7fc fd29 	bl	8005860 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e1e7      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0ef      	beq.n	8008e0a <HAL_RCC_OscConfig+0x22e>
 8008e2a:	e020      	b.n	8008e6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e32:	4a09      	ldr	r2, [pc, #36]	@ (8008e58 <HAL_RCC_OscConfig+0x27c>)
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3c:	f7fc fd10 	bl	8005860 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e42:	e00d      	b.n	8008e60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e44:	f7fc fd0c 	bl	8005860 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d906      	bls.n	8008e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e1ca      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
 8008e56:	bf00      	nop
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e60:	4b8c      	ldr	r3, [pc, #560]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1ea      	bne.n	8008e44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 80a6 	beq.w	8008fc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e80:	4b84      	ldr	r3, [pc, #528]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_RCC_OscConfig+0x2b4>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <HAL_RCC_OscConfig+0x2b6>
 8008e90:	2300      	movs	r3, #0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e96:	4b7f      	ldr	r3, [pc, #508]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008eb2:	4b79      	ldr	r3, [pc, #484]	@ (8009098 <HAL_RCC_OscConfig+0x4bc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d118      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ebe:	4b76      	ldr	r3, [pc, #472]	@ (8009098 <HAL_RCC_OscConfig+0x4bc>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a75      	ldr	r2, [pc, #468]	@ (8009098 <HAL_RCC_OscConfig+0x4bc>)
 8008ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eca:	f7fc fcc9 	bl	8005860 <HAL_GetTick>
 8008ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ed0:	e008      	b.n	8008ee4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ed2:	f7fc fcc5 	bl	8005860 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e183      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8009098 <HAL_RCC_OscConfig+0x4bc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0f0      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d108      	bne.n	8008f0a <HAL_RCC_OscConfig+0x32e>
 8008ef8:	4b66      	ldr	r3, [pc, #408]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efe:	4a65      	ldr	r2, [pc, #404]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f08:	e024      	b.n	8008f54 <HAL_RCC_OscConfig+0x378>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b05      	cmp	r3, #5
 8008f10:	d110      	bne.n	8008f34 <HAL_RCC_OscConfig+0x358>
 8008f12:	4b60      	ldr	r3, [pc, #384]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f18:	4a5e      	ldr	r2, [pc, #376]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f1a:	f043 0304 	orr.w	r3, r3, #4
 8008f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f22:	4b5c      	ldr	r3, [pc, #368]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f28:	4a5a      	ldr	r2, [pc, #360]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f2a:	f043 0301 	orr.w	r3, r3, #1
 8008f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f32:	e00f      	b.n	8008f54 <HAL_RCC_OscConfig+0x378>
 8008f34:	4b57      	ldr	r3, [pc, #348]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3a:	4a56      	ldr	r2, [pc, #344]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f3c:	f023 0301 	bic.w	r3, r3, #1
 8008f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f44:	4b53      	ldr	r3, [pc, #332]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4a:	4a52      	ldr	r2, [pc, #328]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f4c:	f023 0304 	bic.w	r3, r3, #4
 8008f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d016      	beq.n	8008f8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f5c:	f7fc fc80 	bl	8005860 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f62:	e00a      	b.n	8008f7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f64:	f7fc fc7c 	bl	8005860 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e138      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f7a:	4b46      	ldr	r3, [pc, #280]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0ed      	beq.n	8008f64 <HAL_RCC_OscConfig+0x388>
 8008f88:	e015      	b.n	8008fb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f8a:	f7fc fc69 	bl	8005860 <HAL_GetTick>
 8008f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f90:	e00a      	b.n	8008fa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f92:	f7fc fc65 	bl	8005860 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e121      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1ed      	bne.n	8008f92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008fb6:	7ffb      	ldrb	r3, [r7, #31]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d105      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fbc:	4b35      	ldr	r3, [pc, #212]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc0:	4a34      	ldr	r2, [pc, #208]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fc6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d03c      	beq.n	800904e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01c      	beq.n	8009016 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fec:	f7fc fc38 	bl	8005860 <HAL_GetTick>
 8008ff0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ff4:	f7fc fc34 	bl	8005860 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e0f2      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009006:	4b23      	ldr	r3, [pc, #140]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8009008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0ef      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x418>
 8009014:	e01b      	b.n	800904e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8009018:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800901c:	4a1d      	ldr	r2, [pc, #116]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009026:	f7fc fc1b 	bl	8005860 <HAL_GetTick>
 800902a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800902c:	e008      	b.n	8009040 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800902e:	f7fc fc17 	bl	8005860 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d901      	bls.n	8009040 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e0d5      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009040:	4b14      	ldr	r3, [pc, #80]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8009042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1ef      	bne.n	800902e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80c9 	beq.w	80091ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009058:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	2b0c      	cmp	r3, #12
 8009062:	f000 8083 	beq.w	800916c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d15e      	bne.n	800912c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800906e:	4b09      	ldr	r3, [pc, #36]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a08      	ldr	r2, [pc, #32]	@ (8009094 <HAL_RCC_OscConfig+0x4b8>)
 8009074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907a:	f7fc fbf1 	bl	8005860 <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009080:	e00c      	b.n	800909c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009082:	f7fc fbed 	bl	8005860 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d905      	bls.n	800909c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e0ab      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
 8009094:	40021000 	.word	0x40021000
 8009098:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800909c:	4b55      	ldr	r3, [pc, #340]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ec      	bne.n	8009082 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090a8:	4b52      	ldr	r3, [pc, #328]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	4b52      	ldr	r3, [pc, #328]	@ (80091f8 <HAL_RCC_OscConfig+0x61c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6a11      	ldr	r1, [r2, #32]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80090b8:	3a01      	subs	r2, #1
 80090ba:	0112      	lsls	r2, r2, #4
 80090bc:	4311      	orrs	r1, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090c2:	0212      	lsls	r2, r2, #8
 80090c4:	4311      	orrs	r1, r2
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090ca:	0852      	lsrs	r2, r2, #1
 80090cc:	3a01      	subs	r2, #1
 80090ce:	0552      	lsls	r2, r2, #21
 80090d0:	4311      	orrs	r1, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80090d6:	0852      	lsrs	r2, r2, #1
 80090d8:	3a01      	subs	r2, #1
 80090da:	0652      	lsls	r2, r2, #25
 80090dc:	4311      	orrs	r1, r2
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80090e2:	06d2      	lsls	r2, r2, #27
 80090e4:	430a      	orrs	r2, r1
 80090e6:	4943      	ldr	r1, [pc, #268]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090ec:	4b41      	ldr	r3, [pc, #260]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a40      	ldr	r2, [pc, #256]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090f8:	4b3e      	ldr	r3, [pc, #248]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	4a3d      	ldr	r2, [pc, #244]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 80090fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009102:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009104:	f7fc fbac 	bl	8005860 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800910c:	f7fc fba8 	bl	8005860 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e066      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800911e:	4b35      	ldr	r3, [pc, #212]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0f0      	beq.n	800910c <HAL_RCC_OscConfig+0x530>
 800912a:	e05e      	b.n	80091ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800912c:	4b31      	ldr	r3, [pc, #196]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a30      	ldr	r2, [pc, #192]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 8009132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009138:	f7fc fb92 	bl	8005860 <HAL_GetTick>
 800913c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800913e:	e008      	b.n	8009152 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009140:	f7fc fb8e 	bl	8005860 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d901      	bls.n	8009152 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e04c      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009152:	4b28      	ldr	r3, [pc, #160]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f0      	bne.n	8009140 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800915e:	4b25      	ldr	r3, [pc, #148]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	4924      	ldr	r1, [pc, #144]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 8009164:	4b25      	ldr	r3, [pc, #148]	@ (80091fc <HAL_RCC_OscConfig+0x620>)
 8009166:	4013      	ands	r3, r2
 8009168:	60cb      	str	r3, [r1, #12]
 800916a:	e03e      	b.n	80091ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e039      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009178:	4b1e      	ldr	r3, [pc, #120]	@ (80091f4 <HAL_RCC_OscConfig+0x618>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 0203 	and.w	r2, r3, #3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	429a      	cmp	r2, r3
 800918a:	d12c      	bne.n	80091e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009196:	3b01      	subs	r3, #1
 8009198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800919a:	429a      	cmp	r2, r3
 800919c:	d123      	bne.n	80091e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d11b      	bne.n	80091e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d113      	bne.n	80091e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	3b01      	subs	r3, #1
 80091cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d109      	bne.n	80091e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	3b01      	subs	r3, #1
 80091e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d001      	beq.n	80091ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40021000 	.word	0x40021000
 80091f8:	019f800c 	.word	0x019f800c
 80091fc:	feeefffc 	.word	0xfeeefffc

08009200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e11e      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009218:	4b91      	ldr	r3, [pc, #580]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 030f 	and.w	r3, r3, #15
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d910      	bls.n	8009248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009226:	4b8e      	ldr	r3, [pc, #568]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f023 020f 	bic.w	r2, r3, #15
 800922e:	498c      	ldr	r1, [pc, #560]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	4313      	orrs	r3, r2
 8009234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009236:	4b8a      	ldr	r3, [pc, #552]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d001      	beq.n	8009248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e106      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d073      	beq.n	800933c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d129      	bne.n	80092b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800925c:	4b81      	ldr	r3, [pc, #516]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e0f4      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800926c:	f000 f9ce 	bl	800960c <RCC_GetSysClockFreqFromPLLSource>
 8009270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	4a7c      	ldr	r2, [pc, #496]	@ (8009468 <HAL_RCC_ClockConfig+0x268>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d93f      	bls.n	80092fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800927a:	4b7a      	ldr	r3, [pc, #488]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800928e:	2b00      	cmp	r3, #0
 8009290:	d033      	beq.n	80092fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009296:	2b00      	cmp	r3, #0
 8009298:	d12f      	bne.n	80092fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800929a:	4b72      	ldr	r3, [pc, #456]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092a2:	4a70      	ldr	r2, [pc, #448]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	e024      	b.n	80092fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d107      	bne.n	80092c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092b8:	4b6a      	ldr	r3, [pc, #424]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e0c6      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092c8:	4b66      	ldr	r3, [pc, #408]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e0be      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80092d8:	f000 f8ce 	bl	8009478 <HAL_RCC_GetSysClockFreq>
 80092dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4a61      	ldr	r2, [pc, #388]	@ (8009468 <HAL_RCC_ClockConfig+0x268>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d909      	bls.n	80092fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80092e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092ee:	4a5d      	ldr	r2, [pc, #372]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092f6:	2380      	movs	r3, #128	@ 0x80
 80092f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092fa:	4b5a      	ldr	r3, [pc, #360]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f023 0203 	bic.w	r2, r3, #3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	4957      	ldr	r1, [pc, #348]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009308:	4313      	orrs	r3, r2
 800930a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800930c:	f7fc faa8 	bl	8005860 <HAL_GetTick>
 8009310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009312:	e00a      	b.n	800932a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009314:	f7fc faa4 	bl	8005860 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009322:	4293      	cmp	r3, r2
 8009324:	d901      	bls.n	800932a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e095      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800932a:	4b4e      	ldr	r3, [pc, #312]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 020c 	and.w	r2, r3, #12
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	429a      	cmp	r2, r3
 800933a:	d1eb      	bne.n	8009314 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d023      	beq.n	8009390 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009354:	4b43      	ldr	r3, [pc, #268]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	4a42      	ldr	r2, [pc, #264]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800935a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800935e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800936c:	4b3d      	ldr	r3, [pc, #244]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009374:	4a3b      	ldr	r2, [pc, #236]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800937a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800937c:	4b39      	ldr	r3, [pc, #228]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	4936      	ldr	r1, [pc, #216]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800938a:	4313      	orrs	r3, r2
 800938c:	608b      	str	r3, [r1, #8]
 800938e:	e008      	b.n	80093a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b80      	cmp	r3, #128	@ 0x80
 8009394:	d105      	bne.n	80093a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009396:	4b33      	ldr	r3, [pc, #204]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	4a32      	ldr	r2, [pc, #200]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 800939c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d21d      	bcs.n	80093ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093b0:	4b2b      	ldr	r3, [pc, #172]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f023 020f 	bic.w	r2, r3, #15
 80093b8:	4929      	ldr	r1, [pc, #164]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	4313      	orrs	r3, r2
 80093be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093c0:	f7fc fa4e 	bl	8005860 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093c6:	e00a      	b.n	80093de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093c8:	f7fc fa4a 	bl	8005860 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e03b      	b.n	8009456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093de:	4b20      	ldr	r3, [pc, #128]	@ (8009460 <HAL_RCC_ClockConfig+0x260>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d1ed      	bne.n	80093c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d008      	beq.n	800940a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4917      	ldr	r1, [pc, #92]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009406:	4313      	orrs	r3, r2
 8009408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0308 	and.w	r3, r3, #8
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009416:	4b13      	ldr	r3, [pc, #76]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	490f      	ldr	r1, [pc, #60]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009426:	4313      	orrs	r3, r2
 8009428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800942a:	f000 f825 	bl	8009478 <HAL_RCC_GetSysClockFreq>
 800942e:	4602      	mov	r2, r0
 8009430:	4b0c      	ldr	r3, [pc, #48]	@ (8009464 <HAL_RCC_ClockConfig+0x264>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	091b      	lsrs	r3, r3, #4
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	490c      	ldr	r1, [pc, #48]	@ (800946c <HAL_RCC_ClockConfig+0x26c>)
 800943c:	5ccb      	ldrb	r3, [r1, r3]
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	4a0a      	ldr	r2, [pc, #40]	@ (8009470 <HAL_RCC_ClockConfig+0x270>)
 8009448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800944a:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <HAL_RCC_ClockConfig+0x274>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f7fa fb74 	bl	8003b3c <HAL_InitTick>
 8009454:	4603      	mov	r3, r0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40022000 	.word	0x40022000
 8009464:	40021000 	.word	0x40021000
 8009468:	04c4b400 	.word	0x04c4b400
 800946c:	0801b320 	.word	0x0801b320
 8009470:	20000020 	.word	0x20000020
 8009474:	20000028 	.word	0x20000028

08009478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800947e:	4b2c      	ldr	r3, [pc, #176]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 030c 	and.w	r3, r3, #12
 8009486:	2b04      	cmp	r3, #4
 8009488:	d102      	bne.n	8009490 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800948a:	4b2a      	ldr	r3, [pc, #168]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xbc>)
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	e047      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009490:	4b27      	ldr	r3, [pc, #156]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 030c 	and.w	r3, r3, #12
 8009498:	2b08      	cmp	r3, #8
 800949a:	d102      	bne.n	80094a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800949c:	4b25      	ldr	r3, [pc, #148]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xbc>)
 800949e:	613b      	str	r3, [r7, #16]
 80094a0:	e03e      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80094a2:	4b23      	ldr	r3, [pc, #140]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f003 030c 	and.w	r3, r3, #12
 80094aa:	2b0c      	cmp	r3, #12
 80094ac:	d136      	bne.n	800951c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80094ae:	4b20      	ldr	r3, [pc, #128]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80094b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	091b      	lsrs	r3, r3, #4
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	3301      	adds	r3, #1
 80094c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d10c      	bne.n	80094e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094cc:	4a19      	ldr	r2, [pc, #100]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d4:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094d6:	68d2      	ldr	r2, [r2, #12]
 80094d8:	0a12      	lsrs	r2, r2, #8
 80094da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	617b      	str	r3, [r7, #20]
      break;
 80094e4:	e00c      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094e6:	4a13      	ldr	r2, [pc, #76]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ee:	4a10      	ldr	r2, [pc, #64]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094f0:	68d2      	ldr	r2, [r2, #12]
 80094f2:	0a12      	lsrs	r2, r2, #8
 80094f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094f8:	fb02 f303 	mul.w	r3, r2, r3
 80094fc:	617b      	str	r3, [r7, #20]
      break;
 80094fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009500:	4b0b      	ldr	r3, [pc, #44]	@ (8009530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	0e5b      	lsrs	r3, r3, #25
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	3301      	adds	r3, #1
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	fbb2 f3f3 	udiv	r3, r2, r3
 8009518:	613b      	str	r3, [r7, #16]
 800951a:	e001      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009520:	693b      	ldr	r3, [r7, #16]
}
 8009522:	4618      	mov	r0, r3
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40021000 	.word	0x40021000
 8009534:	00f42400 	.word	0x00f42400

08009538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800953c:	4b03      	ldr	r3, [pc, #12]	@ (800954c <HAL_RCC_GetHCLKFreq+0x14>)
 800953e:	681b      	ldr	r3, [r3, #0]
}
 8009540:	4618      	mov	r0, r3
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000020 	.word	0x20000020

08009550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009554:	f7ff fff0 	bl	8009538 <HAL_RCC_GetHCLKFreq>
 8009558:	4602      	mov	r2, r0
 800955a:	4b06      	ldr	r3, [pc, #24]	@ (8009574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	f003 0307 	and.w	r3, r3, #7
 8009564:	4904      	ldr	r1, [pc, #16]	@ (8009578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009566:	5ccb      	ldrb	r3, [r1, r3]
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40021000 	.word	0x40021000
 8009578:	0801b330 	.word	0x0801b330

0800957c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009580:	f7ff ffda 	bl	8009538 <HAL_RCC_GetHCLKFreq>
 8009584:	4602      	mov	r2, r0
 8009586:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	0adb      	lsrs	r3, r3, #11
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	4904      	ldr	r1, [pc, #16]	@ (80095a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009592:	5ccb      	ldrb	r3, [r1, r3]
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40021000 	.word	0x40021000
 80095a4:	0801b330 	.word	0x0801b330

080095a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	220f      	movs	r2, #15
 80095b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80095b8:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <HAL_RCC_GetClockConfig+0x5c>)
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0203 	and.w	r2, r3, #3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80095c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009604 <HAL_RCC_GetClockConfig+0x5c>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80095d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009604 <HAL_RCC_GetClockConfig+0x5c>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80095dc:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <HAL_RCC_GetClockConfig+0x5c>)
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	08db      	lsrs	r3, r3, #3
 80095e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80095ea:	4b07      	ldr	r3, [pc, #28]	@ (8009608 <HAL_RCC_GetClockConfig+0x60>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 020f 	and.w	r2, r3, #15
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	601a      	str	r2, [r3, #0]
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40021000 	.word	0x40021000
 8009608:	40022000 	.word	0x40022000

0800960c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009612:	4b1e      	ldr	r3, [pc, #120]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800961c:	4b1b      	ldr	r3, [pc, #108]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	091b      	lsrs	r3, r3, #4
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	3301      	adds	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d10c      	bne.n	800964a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009630:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	fbb2 f3f3 	udiv	r3, r2, r3
 8009638:	4a14      	ldr	r2, [pc, #80]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800963a:	68d2      	ldr	r2, [r2, #12]
 800963c:	0a12      	lsrs	r2, r2, #8
 800963e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009642:	fb02 f303 	mul.w	r3, r2, r3
 8009646:	617b      	str	r3, [r7, #20]
    break;
 8009648:	e00c      	b.n	8009664 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800964a:	4a11      	ldr	r2, [pc, #68]	@ (8009690 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009652:	4a0e      	ldr	r2, [pc, #56]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009654:	68d2      	ldr	r2, [r2, #12]
 8009656:	0a12      	lsrs	r2, r2, #8
 8009658:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	617b      	str	r3, [r7, #20]
    break;
 8009662:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009664:	4b09      	ldr	r3, [pc, #36]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	0e5b      	lsrs	r3, r3, #25
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	3301      	adds	r3, #1
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800967e:	687b      	ldr	r3, [r7, #4]
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	40021000 	.word	0x40021000
 8009690:	00f42400 	.word	0x00f42400

08009694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800969c:	2300      	movs	r3, #0
 800969e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096a0:	2300      	movs	r3, #0
 80096a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8098 	beq.w	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096b2:	2300      	movs	r3, #0
 80096b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096b6:	4b43      	ldr	r3, [pc, #268]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096c2:	4b40      	ldr	r3, [pc, #256]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c6:	4a3f      	ldr	r2, [pc, #252]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80096ce:	4b3d      	ldr	r3, [pc, #244]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d6:	60bb      	str	r3, [r7, #8]
 80096d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096da:	2301      	movs	r3, #1
 80096dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096de:	4b3a      	ldr	r3, [pc, #232]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a39      	ldr	r2, [pc, #228]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096ea:	f7fc f8b9 	bl	8005860 <HAL_GetTick>
 80096ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096f0:	e009      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f2:	f7fc f8b5 	bl	8005860 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d902      	bls.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	74fb      	strb	r3, [r7, #19]
        break;
 8009704:	e005      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009706:	4b30      	ldr	r3, [pc, #192]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0ef      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009712:	7cfb      	ldrb	r3, [r7, #19]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d159      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009718:	4b2a      	ldr	r3, [pc, #168]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009722:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01e      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	429a      	cmp	r2, r3
 8009732:	d019      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009734:	4b23      	ldr	r3, [pc, #140]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800973a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009740:	4b20      	ldr	r3, [pc, #128]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009746:	4a1f      	ldr	r2, [pc, #124]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800974c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009756:	4a1b      	ldr	r2, [pc, #108]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009760:	4a18      	ldr	r2, [pc, #96]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d016      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009772:	f7fc f875 	bl	8005860 <HAL_GetTick>
 8009776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009778:	e00b      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800977a:	f7fc f871 	bl	8005860 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009788:	4293      	cmp	r3, r2
 800978a:	d902      	bls.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	74fb      	strb	r3, [r7, #19]
            break;
 8009790:	e006      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009792:	4b0c      	ldr	r3, [pc, #48]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0ec      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80097a0:	7cfb      	ldrb	r3, [r7, #19]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10b      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097a6:	4b07      	ldr	r3, [pc, #28]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	4903      	ldr	r1, [pc, #12]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80097bc:	e008      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097be:	7cfb      	ldrb	r3, [r7, #19]
 80097c0:	74bb      	strb	r3, [r7, #18]
 80097c2:	e005      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80097c4:	40021000 	.word	0x40021000
 80097c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097d0:	7c7b      	ldrb	r3, [r7, #17]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d105      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097d6:	4ba6      	ldr	r3, [pc, #664]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097da:	4aa5      	ldr	r2, [pc, #660]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097ee:	4ba0      	ldr	r3, [pc, #640]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f4:	f023 0203 	bic.w	r2, r3, #3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	499c      	ldr	r1, [pc, #624]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009810:	4b97      	ldr	r3, [pc, #604]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009816:	f023 020c 	bic.w	r2, r3, #12
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4994      	ldr	r1, [pc, #592]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009820:	4313      	orrs	r3, r2
 8009822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009832:	4b8f      	ldr	r3, [pc, #572]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009838:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	498b      	ldr	r1, [pc, #556]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009854:	4b86      	ldr	r3, [pc, #536]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	4983      	ldr	r1, [pc, #524]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009864:	4313      	orrs	r3, r2
 8009866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0320 	and.w	r3, r3, #32
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009876:	4b7e      	ldr	r3, [pc, #504]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	497a      	ldr	r1, [pc, #488]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009886:	4313      	orrs	r3, r2
 8009888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009898:	4b75      	ldr	r3, [pc, #468]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	4972      	ldr	r1, [pc, #456]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	4969      	ldr	r1, [pc, #420]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00a      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098dc:	4b64      	ldr	r3, [pc, #400]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	4961      	ldr	r1, [pc, #388]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098fe:	4b5c      	ldr	r3, [pc, #368]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	4958      	ldr	r1, [pc, #352]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800990e:	4313      	orrs	r3, r2
 8009910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800991c:	2b00      	cmp	r3, #0
 800991e:	d015      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009920:	4b53      	ldr	r3, [pc, #332]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	4950      	ldr	r1, [pc, #320]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009930:	4313      	orrs	r3, r2
 8009932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800993e:	d105      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009940:	4b4b      	ldr	r3, [pc, #300]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4a4a      	ldr	r2, [pc, #296]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800994a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009954:	2b00      	cmp	r3, #0
 8009956:	d015      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009958:	4b45      	ldr	r3, [pc, #276]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	4942      	ldr	r1, [pc, #264]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009968:	4313      	orrs	r3, r2
 800996a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009976:	d105      	bne.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009978:	4b3d      	ldr	r3, [pc, #244]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009982:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d015      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009990:	4b37      	ldr	r3, [pc, #220]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009996:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	4934      	ldr	r1, [pc, #208]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099ae:	d105      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d015      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099c8:	4b29      	ldr	r3, [pc, #164]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d6:	4926      	ldr	r1, [pc, #152]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099e6:	d105      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099e8:	4b21      	ldr	r3, [pc, #132]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	4a20      	ldr	r2, [pc, #128]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d015      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a00:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0e:	4918      	ldr	r1, [pc, #96]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a1e:	d105      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a20:	4b13      	ldr	r3, [pc, #76]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d015      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a38:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a46:	490a      	ldr	r1, [pc, #40]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a56:	d105      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a58:	4b05      	ldr	r3, [pc, #20]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	4a04      	ldr	r2, [pc, #16]	@ (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a64:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	40021000 	.word	0x40021000

08009a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e09d      	b.n	8009bc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d108      	bne.n	8009aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a96:	d009      	beq.n	8009aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	61da      	str	r2, [r3, #28]
 8009a9e:	e005      	b.n	8009aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7f9 fa88 	bl	8002fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009aec:	d902      	bls.n	8009af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e002      	b.n	8009afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009b02:	d007      	beq.n	8009b14 <HAL_SPI_Init+0xa0>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b0c:	d002      	beq.n	8009b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b42:	431a      	orrs	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b56:	ea42 0103 	orr.w	r1, r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	0c1b      	lsrs	r3, r3, #16
 8009b70:	f003 0204 	and.w	r2, r3, #4
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b90:	ea42 0103 	orr.w	r1, r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b08a      	sub	sp, #40	@ 0x28
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bdc:	f7fb fe40 	bl	8005860 <HAL_GetTick>
 8009be0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009be8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009bf0:	887b      	ldrh	r3, [r7, #2]
 8009bf2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009bf4:	887b      	ldrh	r3, [r7, #2]
 8009bf6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bf8:	7ffb      	ldrb	r3, [r7, #31]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d00c      	beq.n	8009c18 <HAL_SPI_TransmitReceive+0x4e>
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c04:	d106      	bne.n	8009c14 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <HAL_SPI_TransmitReceive+0x4a>
 8009c0e:	7ffb      	ldrb	r3, [r7, #31]
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d001      	beq.n	8009c18 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c14:	2302      	movs	r3, #2
 8009c16:	e1f3      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <HAL_SPI_TransmitReceive+0x60>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <HAL_SPI_TransmitReceive+0x60>
 8009c24:	887b      	ldrh	r3, [r7, #2]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e1e8      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_SPI_TransmitReceive+0x72>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e1e1      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d003      	beq.n	8009c58 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2205      	movs	r2, #5
 8009c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	887a      	ldrh	r2, [r7, #2]
 8009c68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	887a      	ldrh	r2, [r7, #2]
 8009c70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	887a      	ldrh	r2, [r7, #2]
 8009c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	887a      	ldrh	r2, [r7, #2]
 8009c84:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c9a:	d802      	bhi.n	8009ca2 <HAL_SPI_TransmitReceive+0xd8>
 8009c9c:	8abb      	ldrh	r3, [r7, #20]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d908      	bls.n	8009cb4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009cb0:	605a      	str	r2, [r3, #4]
 8009cb2:	e007      	b.n	8009cc4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cce:	2b40      	cmp	r3, #64	@ 0x40
 8009cd0:	d007      	beq.n	8009ce2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cea:	f240 8083 	bls.w	8009df4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_SPI_TransmitReceive+0x132>
 8009cf6:	8afb      	ldrh	r3, [r7, #22]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d16f      	bne.n	8009ddc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0c:	1c9a      	adds	r2, r3, #2
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d20:	e05c      	b.n	8009ddc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d11b      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x19e>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d016      	beq.n	8009d68 <HAL_SPI_TransmitReceive+0x19e>
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d113      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d44:	881a      	ldrh	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d50:	1c9a      	adds	r2, r3, #2
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d11c      	bne.n	8009db0 <HAL_SPI_TransmitReceive+0x1e6>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d016      	beq.n	8009db0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8c:	b292      	uxth	r2, r2
 8009d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d94:	1c9a      	adds	r2, r3, #2
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dac:	2301      	movs	r3, #1
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009db0:	f7fb fd56 	bl	8005860 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d80d      	bhi.n	8009ddc <HAL_SPI_TransmitReceive+0x212>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d009      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e111      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d19d      	bne.n	8009d22 <HAL_SPI_TransmitReceive+0x158>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d197      	bne.n	8009d22 <HAL_SPI_TransmitReceive+0x158>
 8009df2:	e0e5      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_SPI_TransmitReceive+0x23a>
 8009dfc:	8afb      	ldrh	r3, [r7, #22]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	f040 80d1 	bne.w	8009fa6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d912      	bls.n	8009e34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e12:	881a      	ldrh	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b02      	subs	r3, #2
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e32:	e0b8      	b.n	8009fa6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e5a:	e0a4      	b.n	8009fa6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d134      	bne.n	8009ed4 <HAL_SPI_TransmitReceive+0x30a>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d02f      	beq.n	8009ed4 <HAL_SPI_TransmitReceive+0x30a>
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d12c      	bne.n	8009ed4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d912      	bls.n	8009eaa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	881a      	ldrh	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	1c9a      	adds	r2, r3, #2
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3b02      	subs	r3, #2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ea8:	e012      	b.n	8009ed0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d148      	bne.n	8009f74 <HAL_SPI_TransmitReceive+0x3aa>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d042      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d923      	bls.n	8009f42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f04:	b292      	uxth	r2, r2
 8009f06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0c:	1c9a      	adds	r2, r3, #2
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	3b02      	subs	r3, #2
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d81f      	bhi.n	8009f70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f3e:	605a      	str	r2, [r3, #4]
 8009f40:	e016      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f103 020c 	add.w	r2, r3, #12
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4e:	7812      	ldrb	r2, [r2, #0]
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f70:	2301      	movs	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f74:	f7fb fc74 	bl	8005860 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d803      	bhi.n	8009f8c <HAL_SPI_TransmitReceive+0x3c2>
 8009f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d102      	bne.n	8009f92 <HAL_SPI_TransmitReceive+0x3c8>
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d109      	bne.n	8009fa6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e02c      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f47f af55 	bne.w	8009e5c <HAL_SPI_TransmitReceive+0x292>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f47f af4e 	bne.w	8009e5c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fc0:	6a3a      	ldr	r2, [r7, #32]
 8009fc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f93d 	bl	800a244 <SPI_EndRxTxTransaction>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d008      	beq.n	8009fe2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e00e      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e000      	b.n	800a000 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
  }
}
 800a000:	4618      	mov	r0, r3
 800a002:	3728      	adds	r7, #40	@ 0x28
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	4613      	mov	r3, r2
 800a016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a018:	f7fb fc22 	bl	8005860 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	4413      	add	r3, r2
 800a026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a028:	f7fb fc1a 	bl	8005860 <HAL_GetTick>
 800a02c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a02e:	4b39      	ldr	r3, [pc, #228]	@ (800a114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	015b      	lsls	r3, r3, #5
 800a034:	0d1b      	lsrs	r3, r3, #20
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	fb02 f303 	mul.w	r3, r2, r3
 800a03c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a03e:	e054      	b.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a046:	d050      	beq.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a048:	f7fb fc0a 	bl	8005860 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	429a      	cmp	r2, r3
 800a056:	d902      	bls.n	800a05e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d13d      	bne.n	800a0da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a06c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a076:	d111      	bne.n	800a09c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a080:	d004      	beq.n	800a08c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a08a:	d107      	bne.n	800a09c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a09a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0a4:	d10f      	bne.n	800a0c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a0c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e017      	b.n	800a10a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	bf0c      	ite	eq
 800a0fa:	2301      	moveq	r3, #1
 800a0fc:	2300      	movne	r3, #0
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	461a      	mov	r2, r3
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	429a      	cmp	r2, r3
 800a106:	d19b      	bne.n	800a040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3720      	adds	r7, #32
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000020 	.word	0x20000020

0800a118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	@ 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a12a:	f7fb fb99 	bl	8005860 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	1a9b      	subs	r3, r3, r2
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	4413      	add	r3, r2
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a13a:	f7fb fb91 	bl	8005860 <HAL_GetTick>
 800a13e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	330c      	adds	r3, #12
 800a146:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a148:	4b3d      	ldr	r3, [pc, #244]	@ (800a240 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	00da      	lsls	r2, r3, #3
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	0d1b      	lsrs	r3, r3, #20
 800a158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15a:	fb02 f303 	mul.w	r3, r2, r3
 800a15e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a160:	e060      	b.n	800a224 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a168:	d107      	bne.n	800a17a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d104      	bne.n	800a17a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a178:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a180:	d050      	beq.n	800a224 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a182:	f7fb fb6d 	bl	8005860 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a18e:	429a      	cmp	r2, r3
 800a190:	d902      	bls.n	800a198 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	d13d      	bne.n	800a214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a1a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1b0:	d111      	bne.n	800a1d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1ba:	d004      	beq.n	800a1c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c4:	d107      	bne.n	800a1d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1de:	d10f      	bne.n	800a200 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e010      	b.n	800a236 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	3b01      	subs	r3, #1
 800a222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	4013      	ands	r3, r2
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d196      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3728      	adds	r7, #40	@ 0x28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000020 	.word	0x20000020

0800a244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af02      	add	r7, sp, #8
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff ff5b 	bl	800a118 <SPI_WaitFifoStateUntilTimeout>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a26c:	f043 0220 	orr.w	r2, r3, #32
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e027      	b.n	800a2c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	2180      	movs	r1, #128	@ 0x80
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fec0 	bl	800a008 <SPI_WaitFlagStateUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a292:	f043 0220 	orr.w	r2, r3, #32
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e014      	b.n	800a2c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff ff34 	bl	800a118 <SPI_WaitFifoStateUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d007      	beq.n	800a2c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ba:	f043 0220 	orr.w	r2, r3, #32
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e000      	b.n	800a2c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e049      	b.n	800a376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7fa fa38 	bl	800476c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3304      	adds	r3, #4
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f001 fa0a 	bl	800b728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d001      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e04a      	b.n	800a42e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a21      	ldr	r2, [pc, #132]	@ (800a43c <HAL_TIM_Base_Start_IT+0xbc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d018      	beq.n	800a3ec <HAL_TIM_Base_Start_IT+0x6c>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c2:	d013      	beq.n	800a3ec <HAL_TIM_Base_Start_IT+0x6c>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a440 <HAL_TIM_Base_Start_IT+0xc0>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00e      	beq.n	800a3ec <HAL_TIM_Base_Start_IT+0x6c>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a444 <HAL_TIM_Base_Start_IT+0xc4>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <HAL_TIM_Base_Start_IT+0x6c>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a448 <HAL_TIM_Base_Start_IT+0xc8>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d004      	beq.n	800a3ec <HAL_TIM_Base_Start_IT+0x6c>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a19      	ldr	r2, [pc, #100]	@ (800a44c <HAL_TIM_Base_Start_IT+0xcc>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d115      	bne.n	800a418 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	4b17      	ldr	r3, [pc, #92]	@ (800a450 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b06      	cmp	r3, #6
 800a3fc:	d015      	beq.n	800a42a <HAL_TIM_Base_Start_IT+0xaa>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a404:	d011      	beq.n	800a42a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f042 0201 	orr.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a416:	e008      	b.n	800a42a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0201 	orr.w	r2, r2, #1
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e000      	b.n	800a42c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40012c00 	.word	0x40012c00
 800a440:	40000400 	.word	0x40000400
 800a444:	40000800 	.word	0x40000800
 800a448:	40013400 	.word	0x40013400
 800a44c:	40014000 	.word	0x40014000
 800a450:	00010007 	.word	0x00010007

0800a454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e049      	b.n	800a4fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f841 	bl	800a502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f001 f948 	bl	800b728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
	...

0800a518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d109      	bne.n	800a53c <HAL_TIM_PWM_Start+0x24>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	bf14      	ite	ne
 800a534:	2301      	movne	r3, #1
 800a536:	2300      	moveq	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	e03c      	b.n	800a5b6 <HAL_TIM_PWM_Start+0x9e>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d109      	bne.n	800a556 <HAL_TIM_PWM_Start+0x3e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	bf14      	ite	ne
 800a54e:	2301      	movne	r3, #1
 800a550:	2300      	moveq	r3, #0
 800a552:	b2db      	uxtb	r3, r3
 800a554:	e02f      	b.n	800a5b6 <HAL_TIM_PWM_Start+0x9e>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d109      	bne.n	800a570 <HAL_TIM_PWM_Start+0x58>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	bf14      	ite	ne
 800a568:	2301      	movne	r3, #1
 800a56a:	2300      	moveq	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	e022      	b.n	800a5b6 <HAL_TIM_PWM_Start+0x9e>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b0c      	cmp	r3, #12
 800a574:	d109      	bne.n	800a58a <HAL_TIM_PWM_Start+0x72>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b01      	cmp	r3, #1
 800a580:	bf14      	ite	ne
 800a582:	2301      	movne	r3, #1
 800a584:	2300      	moveq	r3, #0
 800a586:	b2db      	uxtb	r3, r3
 800a588:	e015      	b.n	800a5b6 <HAL_TIM_PWM_Start+0x9e>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b10      	cmp	r3, #16
 800a58e:	d109      	bne.n	800a5a4 <HAL_TIM_PWM_Start+0x8c>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b01      	cmp	r3, #1
 800a59a:	bf14      	ite	ne
 800a59c:	2301      	movne	r3, #1
 800a59e:	2300      	moveq	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	e008      	b.n	800a5b6 <HAL_TIM_PWM_Start+0x9e>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	bf14      	ite	ne
 800a5b0:	2301      	movne	r3, #1
 800a5b2:	2300      	moveq	r3, #0
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e097      	b.n	800a6ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <HAL_TIM_PWM_Start+0xb6>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5cc:	e023      	b.n	800a616 <HAL_TIM_PWM_Start+0xfe>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d104      	bne.n	800a5de <HAL_TIM_PWM_Start+0xc6>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5dc:	e01b      	b.n	800a616 <HAL_TIM_PWM_Start+0xfe>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b08      	cmp	r3, #8
 800a5e2:	d104      	bne.n	800a5ee <HAL_TIM_PWM_Start+0xd6>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5ec:	e013      	b.n	800a616 <HAL_TIM_PWM_Start+0xfe>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b0c      	cmp	r3, #12
 800a5f2:	d104      	bne.n	800a5fe <HAL_TIM_PWM_Start+0xe6>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5fc:	e00b      	b.n	800a616 <HAL_TIM_PWM_Start+0xfe>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b10      	cmp	r3, #16
 800a602:	d104      	bne.n	800a60e <HAL_TIM_PWM_Start+0xf6>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a60c:	e003      	b.n	800a616 <HAL_TIM_PWM_Start+0xfe>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2201      	movs	r2, #1
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 fcb0 	bl	800bf84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a33      	ldr	r2, [pc, #204]	@ (800a6f8 <HAL_TIM_PWM_Start+0x1e0>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <HAL_TIM_PWM_Start+0x13e>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a32      	ldr	r2, [pc, #200]	@ (800a6fc <HAL_TIM_PWM_Start+0x1e4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00e      	beq.n	800a656 <HAL_TIM_PWM_Start+0x13e>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a30      	ldr	r2, [pc, #192]	@ (800a700 <HAL_TIM_PWM_Start+0x1e8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d009      	beq.n	800a656 <HAL_TIM_PWM_Start+0x13e>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a2f      	ldr	r2, [pc, #188]	@ (800a704 <HAL_TIM_PWM_Start+0x1ec>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d004      	beq.n	800a656 <HAL_TIM_PWM_Start+0x13e>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a2d      	ldr	r2, [pc, #180]	@ (800a708 <HAL_TIM_PWM_Start+0x1f0>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d101      	bne.n	800a65a <HAL_TIM_PWM_Start+0x142>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <HAL_TIM_PWM_Start+0x144>
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a66e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a20      	ldr	r2, [pc, #128]	@ (800a6f8 <HAL_TIM_PWM_Start+0x1e0>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d018      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x194>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a682:	d013      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x194>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a20      	ldr	r2, [pc, #128]	@ (800a70c <HAL_TIM_PWM_Start+0x1f4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00e      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x194>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a1f      	ldr	r2, [pc, #124]	@ (800a710 <HAL_TIM_PWM_Start+0x1f8>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x194>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a17      	ldr	r2, [pc, #92]	@ (800a6fc <HAL_TIM_PWM_Start+0x1e4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x194>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a16      	ldr	r2, [pc, #88]	@ (800a700 <HAL_TIM_PWM_Start+0x1e8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d115      	bne.n	800a6d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	4b18      	ldr	r3, [pc, #96]	@ (800a714 <HAL_TIM_PWM_Start+0x1fc>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b06      	cmp	r3, #6
 800a6bc:	d015      	beq.n	800a6ea <HAL_TIM_PWM_Start+0x1d2>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6c4:	d011      	beq.n	800a6ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0201 	orr.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d6:	e008      	b.n	800a6ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0201 	orr.w	r2, r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	e000      	b.n	800a6ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40012c00 	.word	0x40012c00
 800a6fc:	40013400 	.word	0x40013400
 800a700:	40014000 	.word	0x40014000
 800a704:	40014400 	.word	0x40014400
 800a708:	40014800 	.word	0x40014800
 800a70c:	40000400 	.word	0x40000400
 800a710:	40000800 	.word	0x40000800
 800a714:	00010007 	.word	0x00010007

0800a718 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2200      	movs	r2, #0
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fc2a 	bl	800bf84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a3e      	ldr	r2, [pc, #248]	@ (800a830 <HAL_TIM_PWM_Stop+0x118>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d013      	beq.n	800a762 <HAL_TIM_PWM_Stop+0x4a>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a3d      	ldr	r2, [pc, #244]	@ (800a834 <HAL_TIM_PWM_Stop+0x11c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00e      	beq.n	800a762 <HAL_TIM_PWM_Stop+0x4a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a3b      	ldr	r2, [pc, #236]	@ (800a838 <HAL_TIM_PWM_Stop+0x120>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d009      	beq.n	800a762 <HAL_TIM_PWM_Stop+0x4a>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a3a      	ldr	r2, [pc, #232]	@ (800a83c <HAL_TIM_PWM_Stop+0x124>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d004      	beq.n	800a762 <HAL_TIM_PWM_Stop+0x4a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a38      	ldr	r2, [pc, #224]	@ (800a840 <HAL_TIM_PWM_Stop+0x128>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d101      	bne.n	800a766 <HAL_TIM_PWM_Stop+0x4e>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <HAL_TIM_PWM_Stop+0x50>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d017      	beq.n	800a79c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10f      	bne.n	800a79c <HAL_TIM_PWM_Stop+0x84>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6a1a      	ldr	r2, [r3, #32]
 800a782:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a786:	4013      	ands	r3, r2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d107      	bne.n	800a79c <HAL_TIM_PWM_Stop+0x84>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a79a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10f      	bne.n	800a7cc <HAL_TIM_PWM_Stop+0xb4>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d107      	bne.n	800a7cc <HAL_TIM_PWM_Stop+0xb4>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d104      	bne.n	800a7dc <HAL_TIM_PWM_Stop+0xc4>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7da:	e023      	b.n	800a824 <HAL_TIM_PWM_Stop+0x10c>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d104      	bne.n	800a7ec <HAL_TIM_PWM_Stop+0xd4>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7ea:	e01b      	b.n	800a824 <HAL_TIM_PWM_Stop+0x10c>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d104      	bne.n	800a7fc <HAL_TIM_PWM_Stop+0xe4>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7fa:	e013      	b.n	800a824 <HAL_TIM_PWM_Stop+0x10c>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b0c      	cmp	r3, #12
 800a800:	d104      	bne.n	800a80c <HAL_TIM_PWM_Stop+0xf4>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a80a:	e00b      	b.n	800a824 <HAL_TIM_PWM_Stop+0x10c>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d104      	bne.n	800a81c <HAL_TIM_PWM_Stop+0x104>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a81a:	e003      	b.n	800a824 <HAL_TIM_PWM_Stop+0x10c>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	40012c00 	.word	0x40012c00
 800a834:	40013400 	.word	0x40013400
 800a838:	40014000 	.word	0x40014000
 800a83c:	40014400 	.word	0x40014400
 800a840:	40014800 	.word	0x40014800

0800a844 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d109      	bne.n	800a870 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	bf0c      	ite	eq
 800a868:	2301      	moveq	r3, #1
 800a86a:	2300      	movne	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	e03c      	b.n	800a8ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b04      	cmp	r3, #4
 800a874:	d109      	bne.n	800a88a <HAL_TIM_PWM_Start_DMA+0x46>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	bf0c      	ite	eq
 800a882:	2301      	moveq	r3, #1
 800a884:	2300      	movne	r3, #0
 800a886:	b2db      	uxtb	r3, r3
 800a888:	e02f      	b.n	800a8ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d109      	bne.n	800a8a4 <HAL_TIM_PWM_Start_DMA+0x60>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	bf0c      	ite	eq
 800a89c:	2301      	moveq	r3, #1
 800a89e:	2300      	movne	r3, #0
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	e022      	b.n	800a8ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b0c      	cmp	r3, #12
 800a8a8:	d109      	bne.n	800a8be <HAL_TIM_PWM_Start_DMA+0x7a>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	bf0c      	ite	eq
 800a8b6:	2301      	moveq	r3, #1
 800a8b8:	2300      	movne	r3, #0
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	e015      	b.n	800a8ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d109      	bne.n	800a8d8 <HAL_TIM_PWM_Start_DMA+0x94>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	bf0c      	ite	eq
 800a8d0:	2301      	moveq	r3, #1
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	e008      	b.n	800a8ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2301      	moveq	r3, #1
 800a8e6:	2300      	movne	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e1a6      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d109      	bne.n	800a90c <HAL_TIM_PWM_Start_DMA+0xc8>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b01      	cmp	r3, #1
 800a902:	bf0c      	ite	eq
 800a904:	2301      	moveq	r3, #1
 800a906:	2300      	movne	r3, #0
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	e03c      	b.n	800a986 <HAL_TIM_PWM_Start_DMA+0x142>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d109      	bne.n	800a926 <HAL_TIM_PWM_Start_DMA+0xe2>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	bf0c      	ite	eq
 800a91e:	2301      	moveq	r3, #1
 800a920:	2300      	movne	r3, #0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	e02f      	b.n	800a986 <HAL_TIM_PWM_Start_DMA+0x142>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d109      	bne.n	800a940 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	bf0c      	ite	eq
 800a938:	2301      	moveq	r3, #1
 800a93a:	2300      	movne	r3, #0
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	e022      	b.n	800a986 <HAL_TIM_PWM_Start_DMA+0x142>
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b0c      	cmp	r3, #12
 800a944:	d109      	bne.n	800a95a <HAL_TIM_PWM_Start_DMA+0x116>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b01      	cmp	r3, #1
 800a950:	bf0c      	ite	eq
 800a952:	2301      	moveq	r3, #1
 800a954:	2300      	movne	r3, #0
 800a956:	b2db      	uxtb	r3, r3
 800a958:	e015      	b.n	800a986 <HAL_TIM_PWM_Start_DMA+0x142>
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b10      	cmp	r3, #16
 800a95e:	d109      	bne.n	800a974 <HAL_TIM_PWM_Start_DMA+0x130>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b01      	cmp	r3, #1
 800a96a:	bf0c      	ite	eq
 800a96c:	2301      	moveq	r3, #1
 800a96e:	2300      	movne	r3, #0
 800a970:	b2db      	uxtb	r3, r3
 800a972:	e008      	b.n	800a986 <HAL_TIM_PWM_Start_DMA+0x142>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	bf0c      	ite	eq
 800a980:	2301      	moveq	r3, #1
 800a982:	2300      	movne	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d034      	beq.n	800a9f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_TIM_PWM_Start_DMA+0x152>
 800a990:	887b      	ldrh	r3, [r7, #2]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e152      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d104      	bne.n	800a9aa <HAL_TIM_PWM_Start_DMA+0x166>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9a8:	e026      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d104      	bne.n	800a9ba <HAL_TIM_PWM_Start_DMA+0x176>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9b8:	e01e      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d104      	bne.n	800a9ca <HAL_TIM_PWM_Start_DMA+0x186>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9c8:	e016      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b0c      	cmp	r3, #12
 800a9ce:	d104      	bne.n	800a9da <HAL_TIM_PWM_Start_DMA+0x196>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9d8:	e00e      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b10      	cmp	r3, #16
 800a9de:	d104      	bne.n	800a9ea <HAL_TIM_PWM_Start_DMA+0x1a6>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9e8:	e006      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9f2:	e001      	b.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e123      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b0c      	cmp	r3, #12
 800a9fc:	f200 80ae 	bhi.w	800ab5c <HAL_TIM_PWM_Start_DMA+0x318>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa3d 	.word	0x0800aa3d
 800aa0c:	0800ab5d 	.word	0x0800ab5d
 800aa10:	0800ab5d 	.word	0x0800ab5d
 800aa14:	0800ab5d 	.word	0x0800ab5d
 800aa18:	0800aa85 	.word	0x0800aa85
 800aa1c:	0800ab5d 	.word	0x0800ab5d
 800aa20:	0800ab5d 	.word	0x0800ab5d
 800aa24:	0800ab5d 	.word	0x0800ab5d
 800aa28:	0800aacd 	.word	0x0800aacd
 800aa2c:	0800ab5d 	.word	0x0800ab5d
 800aa30:	0800ab5d 	.word	0x0800ab5d
 800aa34:	0800ab5d 	.word	0x0800ab5d
 800aa38:	0800ab15 	.word	0x0800ab15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	4a81      	ldr	r2, [pc, #516]	@ (800ac48 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aa42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa48:	4a80      	ldr	r2, [pc, #512]	@ (800ac4c <HAL_TIM_PWM_Start_DMA+0x408>)
 800aa4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	4a7f      	ldr	r2, [pc, #508]	@ (800ac50 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aa52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3334      	adds	r3, #52	@ 0x34
 800aa60:	461a      	mov	r2, r3
 800aa62:	887b      	ldrh	r3, [r7, #2]
 800aa64:	f7fc fd68 	bl	8007538 <HAL_DMA_Start_IT>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e0e6      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa80:	60da      	str	r2, [r3, #12]
      break;
 800aa82:	e06e      	b.n	800ab62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa88:	4a6f      	ldr	r2, [pc, #444]	@ (800ac48 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aa8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	4a6e      	ldr	r2, [pc, #440]	@ (800ac4c <HAL_TIM_PWM_Start_DMA+0x408>)
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa98:	4a6d      	ldr	r2, [pc, #436]	@ (800ac50 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aa9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3338      	adds	r3, #56	@ 0x38
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	887b      	ldrh	r3, [r7, #2]
 800aaac:	f7fc fd44 	bl	8007538 <HAL_DMA_Start_IT>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e0c2      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aac8:	60da      	str	r2, [r3, #12]
      break;
 800aaca:	e04a      	b.n	800ab62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad0:	4a5d      	ldr	r2, [pc, #372]	@ (800ac48 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aad2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad8:	4a5c      	ldr	r2, [pc, #368]	@ (800ac4c <HAL_TIM_PWM_Start_DMA+0x408>)
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	4a5b      	ldr	r2, [pc, #364]	@ (800ac50 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aae2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	333c      	adds	r3, #60	@ 0x3c
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	887b      	ldrh	r3, [r7, #2]
 800aaf4:	f7fc fd20 	bl	8007538 <HAL_DMA_Start_IT>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e09e      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab10:	60da      	str	r2, [r3, #12]
      break;
 800ab12:	e026      	b.n	800ab62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab18:	4a4b      	ldr	r2, [pc, #300]	@ (800ac48 <HAL_TIM_PWM_Start_DMA+0x404>)
 800ab1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab20:	4a4a      	ldr	r2, [pc, #296]	@ (800ac4c <HAL_TIM_PWM_Start_DMA+0x408>)
 800ab22:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab28:	4a49      	ldr	r2, [pc, #292]	@ (800ac50 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800ab2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3340      	adds	r3, #64	@ 0x40
 800ab38:	461a      	mov	r2, r3
 800ab3a:	887b      	ldrh	r3, [r7, #2]
 800ab3c:	f7fc fcfc 	bl	8007538 <HAL_DMA_Start_IT>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e07a      	b.n	800ac40 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab58:	60da      	str	r2, [r3, #12]
      break;
 800ab5a:	e002      	b.n	800ab62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab60:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d16a      	bne.n	800ac3e <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 fa07 	bl	800bf84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a36      	ldr	r2, [pc, #216]	@ (800ac54 <HAL_TIM_PWM_Start_DMA+0x410>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d013      	beq.n	800aba8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a34      	ldr	r2, [pc, #208]	@ (800ac58 <HAL_TIM_PWM_Start_DMA+0x414>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00e      	beq.n	800aba8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a33      	ldr	r2, [pc, #204]	@ (800ac5c <HAL_TIM_PWM_Start_DMA+0x418>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d009      	beq.n	800aba8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a31      	ldr	r2, [pc, #196]	@ (800ac60 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d004      	beq.n	800aba8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a30      	ldr	r2, [pc, #192]	@ (800ac64 <HAL_TIM_PWM_Start_DMA+0x420>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d101      	bne.n	800abac <HAL_TIM_PWM_Start_DMA+0x368>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e000      	b.n	800abae <HAL_TIM_PWM_Start_DMA+0x36a>
 800abac:	2300      	movs	r3, #0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a23      	ldr	r2, [pc, #140]	@ (800ac54 <HAL_TIM_PWM_Start_DMA+0x410>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d018      	beq.n	800abfe <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd4:	d013      	beq.n	800abfe <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a23      	ldr	r2, [pc, #140]	@ (800ac68 <HAL_TIM_PWM_Start_DMA+0x424>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00e      	beq.n	800abfe <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a21      	ldr	r2, [pc, #132]	@ (800ac6c <HAL_TIM_PWM_Start_DMA+0x428>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d009      	beq.n	800abfe <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a1a      	ldr	r2, [pc, #104]	@ (800ac58 <HAL_TIM_PWM_Start_DMA+0x414>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d004      	beq.n	800abfe <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a18      	ldr	r2, [pc, #96]	@ (800ac5c <HAL_TIM_PWM_Start_DMA+0x418>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d115      	bne.n	800ac2a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ac06:	4013      	ands	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b06      	cmp	r3, #6
 800ac0e:	d015      	beq.n	800ac3c <HAL_TIM_PWM_Start_DMA+0x3f8>
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac16:	d011      	beq.n	800ac3c <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0201 	orr.w	r2, r2, #1
 800ac26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac28:	e008      	b.n	800ac3c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f042 0201 	orr.w	r2, r2, #1
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e000      	b.n	800ac3e <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac3c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	0800b617 	.word	0x0800b617
 800ac4c:	0800b6bf 	.word	0x0800b6bf
 800ac50:	0800b585 	.word	0x0800b585
 800ac54:	40012c00 	.word	0x40012c00
 800ac58:	40013400 	.word	0x40013400
 800ac5c:	40014000 	.word	0x40014000
 800ac60:	40014400 	.word	0x40014400
 800ac64:	40014800 	.word	0x40014800
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	00010007 	.word	0x00010007

0800ac74 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b0c      	cmp	r3, #12
 800ac86:	d855      	bhi.n	800ad34 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800ac88:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acc5 	.word	0x0800acc5
 800ac94:	0800ad35 	.word	0x0800ad35
 800ac98:	0800ad35 	.word	0x0800ad35
 800ac9c:	0800ad35 	.word	0x0800ad35
 800aca0:	0800ace1 	.word	0x0800ace1
 800aca4:	0800ad35 	.word	0x0800ad35
 800aca8:	0800ad35 	.word	0x0800ad35
 800acac:	0800ad35 	.word	0x0800ad35
 800acb0:	0800acfd 	.word	0x0800acfd
 800acb4:	0800ad35 	.word	0x0800ad35
 800acb8:	0800ad35 	.word	0x0800ad35
 800acbc:	0800ad35 	.word	0x0800ad35
 800acc0:	0800ad19 	.word	0x0800ad19
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800acd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fc fd01 	bl	80076e0 <HAL_DMA_Abort_IT>
      break;
 800acde:	e02c      	b.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fc fcf3 	bl	80076e0 <HAL_DMA_Abort_IT>
      break;
 800acfa:	e01e      	b.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fc fce5 	bl	80076e0 <HAL_DMA_Abort_IT>
      break;
 800ad16:	e010      	b.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ad26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fc fcd7 	bl	80076e0 <HAL_DMA_Abort_IT>
      break;
 800ad32:	e002      	b.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	73fb      	strb	r3, [r7, #15]
      break;
 800ad38:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 8081 	bne.w	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2200      	movs	r2, #0
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f001 f91a 	bl	800bf84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a3e      	ldr	r2, [pc, #248]	@ (800ae50 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d013      	beq.n	800ad82 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a3d      	ldr	r2, [pc, #244]	@ (800ae54 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d00e      	beq.n	800ad82 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a3b      	ldr	r2, [pc, #236]	@ (800ae58 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d009      	beq.n	800ad82 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a3a      	ldr	r2, [pc, #232]	@ (800ae5c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d004      	beq.n	800ad82 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a38      	ldr	r2, [pc, #224]	@ (800ae60 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d101      	bne.n	800ad86 <HAL_TIM_PWM_Stop_DMA+0x112>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <HAL_TIM_PWM_Stop_DMA+0x114>
 800ad86:	2300      	movs	r3, #0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d017      	beq.n	800adbc <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a1a      	ldr	r2, [r3, #32]
 800ad92:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad96:	4013      	ands	r3, r2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10f      	bne.n	800adbc <HAL_TIM_PWM_Stop_DMA+0x148>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6a1a      	ldr	r2, [r3, #32]
 800ada2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ada6:	4013      	ands	r3, r2
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d107      	bne.n	800adbc <HAL_TIM_PWM_Stop_DMA+0x148>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800adba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6a1a      	ldr	r2, [r3, #32]
 800adc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800adc6:	4013      	ands	r3, r2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10f      	bne.n	800adec <HAL_TIM_PWM_Stop_DMA+0x178>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6a1a      	ldr	r2, [r3, #32]
 800add2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800add6:	4013      	ands	r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d107      	bne.n	800adec <HAL_TIM_PWM_Stop_DMA+0x178>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x188>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adfa:	e023      	b.n	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d104      	bne.n	800ae0c <HAL_TIM_PWM_Stop_DMA+0x198>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae0a:	e01b      	b.n	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b08      	cmp	r3, #8
 800ae10:	d104      	bne.n	800ae1c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae1a:	e013      	b.n	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b0c      	cmp	r3, #12
 800ae20:	d104      	bne.n	800ae2c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae2a:	e00b      	b.n	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	d104      	bne.n	800ae3c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae3a:	e003      	b.n	800ae44 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40012c00 	.word	0x40012c00
 800ae54:	40013400 	.word	0x40013400
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800

0800ae64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d020      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01b      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0202 	mvn.w	r2, #2
 800ae98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fb40 	bl	800b534 <HAL_TIM_IC_CaptureCallback>
 800aeb4:	e005      	b.n	800aec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fb32 	bl	800b520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7f7 fd17 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f003 0304 	and.w	r3, r3, #4
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d020      	beq.n	800af14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01b      	beq.n	800af14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0204 	mvn.w	r2, #4
 800aee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fb1a 	bl	800b534 <HAL_TIM_IC_CaptureCallback>
 800af00:	e005      	b.n	800af0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fb0c 	bl	800b520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7f7 fcf1 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d020      	beq.n	800af60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01b      	beq.n	800af60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0208 	mvn.w	r2, #8
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 faf4 	bl	800b534 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fae6 	bl	800b520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7f7 fccb 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 0310 	and.w	r3, r3, #16
 800af66:	2b00      	cmp	r3, #0
 800af68:	d020      	beq.n	800afac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f003 0310 	and.w	r3, r3, #16
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0210 	mvn.w	r2, #16
 800af7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2208      	movs	r2, #8
 800af82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 face 	bl	800b534 <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fac0 	bl	800b520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7f7 fca5 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00c      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f06f 0201 	mvn.w	r2, #1
 800afc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7f7 fe74 	bl	8002cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00c      	beq.n	800affe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 f875 	bl	800c0e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00c      	beq.n	800b022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f86d 	bl	800c0fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00c      	beq.n	800b046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fa8b 	bl	800b55c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00c      	beq.n	800b06a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f003 0320 	and.w	r3, r3, #32
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f06f 0220 	mvn.w	r2, #32
 800b062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f835 	bl	800c0d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00c      	beq.n	800b08e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 f841 	bl	800c110 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00c      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f839 	bl	800c124 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b0ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f831 	bl	800c138 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00c      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 f829 	bl	800c14c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b11e:	2302      	movs	r3, #2
 800b120:	e0ff      	b.n	800b322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b14      	cmp	r3, #20
 800b12e:	f200 80f0 	bhi.w	800b312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b132:	a201      	add	r2, pc, #4	@ (adr r2, 800b138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b313 	.word	0x0800b313
 800b140:	0800b313 	.word	0x0800b313
 800b144:	0800b313 	.word	0x0800b313
 800b148:	0800b1cd 	.word	0x0800b1cd
 800b14c:	0800b313 	.word	0x0800b313
 800b150:	0800b313 	.word	0x0800b313
 800b154:	0800b313 	.word	0x0800b313
 800b158:	0800b20f 	.word	0x0800b20f
 800b15c:	0800b313 	.word	0x0800b313
 800b160:	0800b313 	.word	0x0800b313
 800b164:	0800b313 	.word	0x0800b313
 800b168:	0800b24f 	.word	0x0800b24f
 800b16c:	0800b313 	.word	0x0800b313
 800b170:	0800b313 	.word	0x0800b313
 800b174:	0800b313 	.word	0x0800b313
 800b178:	0800b291 	.word	0x0800b291
 800b17c:	0800b313 	.word	0x0800b313
 800b180:	0800b313 	.word	0x0800b313
 800b184:	0800b313 	.word	0x0800b313
 800b188:	0800b2d1 	.word	0x0800b2d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fb64 	bl	800b860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	699a      	ldr	r2, [r3, #24]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f042 0208 	orr.w	r2, r2, #8
 800b1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699a      	ldr	r2, [r3, #24]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f022 0204 	bic.w	r2, r2, #4
 800b1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6999      	ldr	r1, [r3, #24]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	691a      	ldr	r2, [r3, #16]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	619a      	str	r2, [r3, #24]
      break;
 800b1ca:	e0a5      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 fbd4 	bl	800b980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	699a      	ldr	r2, [r3, #24]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6999      	ldr	r1, [r3, #24]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	021a      	lsls	r2, r3, #8
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	619a      	str	r2, [r3, #24]
      break;
 800b20c:	e084      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 fc3d 	bl	800ba94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69da      	ldr	r2, [r3, #28]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 0208 	orr.w	r2, r2, #8
 800b228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0204 	bic.w	r2, r2, #4
 800b238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69d9      	ldr	r1, [r3, #28]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	691a      	ldr	r2, [r3, #16]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	61da      	str	r2, [r3, #28]
      break;
 800b24c:	e064      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fca5 	bl	800bba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69da      	ldr	r2, [r3, #28]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69da      	ldr	r2, [r3, #28]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	69d9      	ldr	r1, [r3, #28]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	021a      	lsls	r2, r3, #8
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	61da      	str	r2, [r3, #28]
      break;
 800b28e:	e043      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fd0e 	bl	800bcb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0208 	orr.w	r2, r2, #8
 800b2aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0204 	bic.w	r2, r2, #4
 800b2ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	691a      	ldr	r2, [r3, #16]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b2ce:	e023      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fd52 	bl	800bd80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	021a      	lsls	r2, r3, #8
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b310:	e002      	b.n	800b318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
      break;
 800b316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop

0800b32c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_TIM_ConfigClockSource+0x1c>
 800b344:	2302      	movs	r3, #2
 800b346:	e0de      	b.n	800b506 <HAL_TIM_ConfigClockSource+0x1da>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2202      	movs	r2, #2
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b366:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a63      	ldr	r2, [pc, #396]	@ (800b510 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	f000 80a9 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b388:	4a61      	ldr	r2, [pc, #388]	@ (800b510 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	f200 80ae 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b390:	4a60      	ldr	r2, [pc, #384]	@ (800b514 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b392:	4293      	cmp	r3, r2
 800b394:	f000 80a1 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b398:	4a5e      	ldr	r2, [pc, #376]	@ (800b514 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	f200 80a6 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3a0:	4a5d      	ldr	r2, [pc, #372]	@ (800b518 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	f000 8099 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b3a8:	4a5b      	ldr	r2, [pc, #364]	@ (800b518 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	f200 809e 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3b0:	4a5a      	ldr	r2, [pc, #360]	@ (800b51c <HAL_TIM_ConfigClockSource+0x1f0>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	f000 8091 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b3b8:	4a58      	ldr	r2, [pc, #352]	@ (800b51c <HAL_TIM_ConfigClockSource+0x1f0>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	f200 8096 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3c4:	f000 8089 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b3c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3cc:	f200 808e 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3d4:	d03e      	beq.n	800b454 <HAL_TIM_ConfigClockSource+0x128>
 800b3d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3da:	f200 8087 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3e2:	f000 8086 	beq.w	800b4f2 <HAL_TIM_ConfigClockSource+0x1c6>
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ea:	d87f      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3ec:	2b70      	cmp	r3, #112	@ 0x70
 800b3ee:	d01a      	beq.n	800b426 <HAL_TIM_ConfigClockSource+0xfa>
 800b3f0:	2b70      	cmp	r3, #112	@ 0x70
 800b3f2:	d87b      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3f4:	2b60      	cmp	r3, #96	@ 0x60
 800b3f6:	d050      	beq.n	800b49a <HAL_TIM_ConfigClockSource+0x16e>
 800b3f8:	2b60      	cmp	r3, #96	@ 0x60
 800b3fa:	d877      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b3fc:	2b50      	cmp	r3, #80	@ 0x50
 800b3fe:	d03c      	beq.n	800b47a <HAL_TIM_ConfigClockSource+0x14e>
 800b400:	2b50      	cmp	r3, #80	@ 0x50
 800b402:	d873      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b404:	2b40      	cmp	r3, #64	@ 0x40
 800b406:	d058      	beq.n	800b4ba <HAL_TIM_ConfigClockSource+0x18e>
 800b408:	2b40      	cmp	r3, #64	@ 0x40
 800b40a:	d86f      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b40c:	2b30      	cmp	r3, #48	@ 0x30
 800b40e:	d064      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b410:	2b30      	cmp	r3, #48	@ 0x30
 800b412:	d86b      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b414:	2b20      	cmp	r3, #32
 800b416:	d060      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d867      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d05c      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b420:	2b10      	cmp	r3, #16
 800b422:	d05a      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1ae>
 800b424:	e062      	b.n	800b4ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b436:	f000 fd85 	bl	800bf44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	609a      	str	r2, [r3, #8]
      break;
 800b452:	e04f      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b464:	f000 fd6e 	bl	800bf44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b476:	609a      	str	r2, [r3, #8]
      break;
 800b478:	e03c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b486:	461a      	mov	r2, r3
 800b488:	f000 fce0 	bl	800be4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2150      	movs	r1, #80	@ 0x50
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fd39 	bl	800bf0a <TIM_ITRx_SetConfig>
      break;
 800b498:	e02c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f000 fcff 	bl	800beaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2160      	movs	r1, #96	@ 0x60
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fd29 	bl	800bf0a <TIM_ITRx_SetConfig>
      break;
 800b4b8:	e01c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f000 fcc0 	bl	800be4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2140      	movs	r1, #64	@ 0x40
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fd19 	bl	800bf0a <TIM_ITRx_SetConfig>
      break;
 800b4d8:	e00c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f000 fd10 	bl	800bf0a <TIM_ITRx_SetConfig>
      break;
 800b4ea:	e003      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f0:	e000      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b4f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	00100070 	.word	0x00100070
 800b514:	00100040 	.word	0x00100040
 800b518:	00100030 	.word	0x00100030
 800b51c:	00100020 	.word	0x00100020

0800b520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b590:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d107      	bne.n	800b5ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5aa:	e02a      	b.n	800b602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d107      	bne.n	800b5c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5c4:	e01d      	b.n	800b602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d107      	bne.n	800b5e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5de:	e010      	b.n	800b602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d107      	bne.n	800b5fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5f8:	e003      	b.n	800b602 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f7ff ffb4 	bl	800b570 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	771a      	strb	r2, [r3, #28]
}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b622:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d10b      	bne.n	800b646 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d136      	bne.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b644:	e031      	b.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d10b      	bne.n	800b668 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2202      	movs	r2, #2
 800b654:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d125      	bne.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b666:	e020      	b.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d10b      	bne.n	800b68a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2204      	movs	r2, #4
 800b676:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d114      	bne.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b688:	e00f      	b.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	429a      	cmp	r2, r3
 800b692:	d10a      	bne.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2208      	movs	r2, #8
 800b698:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d103      	bne.n	800b6aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7f7 f920 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	771a      	strb	r2, [r3, #28]
}
 800b6b6:	bf00      	nop
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d103      	bne.n	800b6de <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	771a      	strb	r2, [r3, #28]
 800b6dc:	e019      	b.n	800b712 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d103      	bne.n	800b6f0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	771a      	strb	r2, [r3, #28]
 800b6ee:	e010      	b.n	800b712 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d103      	bne.n	800b702 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	771a      	strb	r2, [r3, #28]
 800b700:	e007      	b.n	800b712 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d102      	bne.n	800b712 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2208      	movs	r2, #8
 800b710:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff ff18 	bl	800b548 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	771a      	strb	r2, [r3, #28]
}
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a42      	ldr	r2, [pc, #264]	@ (800b844 <TIM_Base_SetConfig+0x11c>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d00f      	beq.n	800b760 <TIM_Base_SetConfig+0x38>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b746:	d00b      	beq.n	800b760 <TIM_Base_SetConfig+0x38>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a3f      	ldr	r2, [pc, #252]	@ (800b848 <TIM_Base_SetConfig+0x120>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d007      	beq.n	800b760 <TIM_Base_SetConfig+0x38>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a3e      	ldr	r2, [pc, #248]	@ (800b84c <TIM_Base_SetConfig+0x124>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d003      	beq.n	800b760 <TIM_Base_SetConfig+0x38>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a3d      	ldr	r2, [pc, #244]	@ (800b850 <TIM_Base_SetConfig+0x128>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d108      	bne.n	800b772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4313      	orrs	r3, r2
 800b770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a33      	ldr	r2, [pc, #204]	@ (800b844 <TIM_Base_SetConfig+0x11c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d01b      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b780:	d017      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a30      	ldr	r2, [pc, #192]	@ (800b848 <TIM_Base_SetConfig+0x120>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d013      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a2f      	ldr	r2, [pc, #188]	@ (800b84c <TIM_Base_SetConfig+0x124>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d00f      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a2e      	ldr	r2, [pc, #184]	@ (800b850 <TIM_Base_SetConfig+0x128>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d00b      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a2d      	ldr	r2, [pc, #180]	@ (800b854 <TIM_Base_SetConfig+0x12c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d007      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a2c      	ldr	r2, [pc, #176]	@ (800b858 <TIM_Base_SetConfig+0x130>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d003      	beq.n	800b7b2 <TIM_Base_SetConfig+0x8a>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b85c <TIM_Base_SetConfig+0x134>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d108      	bne.n	800b7c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a16      	ldr	r2, [pc, #88]	@ (800b844 <TIM_Base_SetConfig+0x11c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d00f      	beq.n	800b810 <TIM_Base_SetConfig+0xe8>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a17      	ldr	r2, [pc, #92]	@ (800b850 <TIM_Base_SetConfig+0x128>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00b      	beq.n	800b810 <TIM_Base_SetConfig+0xe8>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a16      	ldr	r2, [pc, #88]	@ (800b854 <TIM_Base_SetConfig+0x12c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d007      	beq.n	800b810 <TIM_Base_SetConfig+0xe8>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a15      	ldr	r2, [pc, #84]	@ (800b858 <TIM_Base_SetConfig+0x130>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d003      	beq.n	800b810 <TIM_Base_SetConfig+0xe8>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a14      	ldr	r2, [pc, #80]	@ (800b85c <TIM_Base_SetConfig+0x134>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d103      	bne.n	800b818 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b01      	cmp	r3, #1
 800b828:	d105      	bne.n	800b836 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	f023 0201 	bic.w	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	611a      	str	r2, [r3, #16]
  }
}
 800b836:	bf00      	nop
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	40012c00 	.word	0x40012c00
 800b848:	40000400 	.word	0x40000400
 800b84c:	40000800 	.word	0x40000800
 800b850:	40013400 	.word	0x40013400
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800

0800b860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	f023 0201 	bic.w	r2, r3, #1
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b88e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f023 0302 	bic.w	r3, r3, #2
 800b8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b96c <TIM_OC1_SetConfig+0x10c>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00f      	beq.n	800b8e0 <TIM_OC1_SetConfig+0x80>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b970 <TIM_OC1_SetConfig+0x110>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00b      	beq.n	800b8e0 <TIM_OC1_SetConfig+0x80>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b974 <TIM_OC1_SetConfig+0x114>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d007      	beq.n	800b8e0 <TIM_OC1_SetConfig+0x80>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a29      	ldr	r2, [pc, #164]	@ (800b978 <TIM_OC1_SetConfig+0x118>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d003      	beq.n	800b8e0 <TIM_OC1_SetConfig+0x80>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a28      	ldr	r2, [pc, #160]	@ (800b97c <TIM_OC1_SetConfig+0x11c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d10c      	bne.n	800b8fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f023 0308 	bic.w	r3, r3, #8
 800b8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f023 0304 	bic.w	r3, r3, #4
 800b8f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b96c <TIM_OC1_SetConfig+0x10c>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d00f      	beq.n	800b922 <TIM_OC1_SetConfig+0xc2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a1a      	ldr	r2, [pc, #104]	@ (800b970 <TIM_OC1_SetConfig+0x110>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d00b      	beq.n	800b922 <TIM_OC1_SetConfig+0xc2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a19      	ldr	r2, [pc, #100]	@ (800b974 <TIM_OC1_SetConfig+0x114>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d007      	beq.n	800b922 <TIM_OC1_SetConfig+0xc2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a18      	ldr	r2, [pc, #96]	@ (800b978 <TIM_OC1_SetConfig+0x118>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d003      	beq.n	800b922 <TIM_OC1_SetConfig+0xc2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a17      	ldr	r2, [pc, #92]	@ (800b97c <TIM_OC1_SetConfig+0x11c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d111      	bne.n	800b946 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	4313      	orrs	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	621a      	str	r2, [r3, #32]
}
 800b960:	bf00      	nop
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	40012c00 	.word	0x40012c00
 800b970:	40013400 	.word	0x40013400
 800b974:	40014000 	.word	0x40014000
 800b978:	40014400 	.word	0x40014400
 800b97c:	40014800 	.word	0x40014800

0800b980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	f023 0210 	bic.w	r2, r3, #16
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	021b      	lsls	r3, r3, #8
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f023 0320 	bic.w	r3, r3, #32
 800b9ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a28      	ldr	r2, [pc, #160]	@ (800ba80 <TIM_OC2_SetConfig+0x100>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d003      	beq.n	800b9ec <TIM_OC2_SetConfig+0x6c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a27      	ldr	r2, [pc, #156]	@ (800ba84 <TIM_OC2_SetConfig+0x104>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d10d      	bne.n	800ba08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	011b      	lsls	r3, r3, #4
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ba80 <TIM_OC2_SetConfig+0x100>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00f      	beq.n	800ba30 <TIM_OC2_SetConfig+0xb0>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a1c      	ldr	r2, [pc, #112]	@ (800ba84 <TIM_OC2_SetConfig+0x104>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00b      	beq.n	800ba30 <TIM_OC2_SetConfig+0xb0>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba88 <TIM_OC2_SetConfig+0x108>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d007      	beq.n	800ba30 <TIM_OC2_SetConfig+0xb0>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a1a      	ldr	r2, [pc, #104]	@ (800ba8c <TIM_OC2_SetConfig+0x10c>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d003      	beq.n	800ba30 <TIM_OC2_SetConfig+0xb0>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a19      	ldr	r2, [pc, #100]	@ (800ba90 <TIM_OC2_SetConfig+0x110>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d113      	bne.n	800ba58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	621a      	str	r2, [r3, #32]
}
 800ba72:	bf00      	nop
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	40012c00 	.word	0x40012c00
 800ba84:	40013400 	.word	0x40013400
 800ba88:	40014000 	.word	0x40014000
 800ba8c:	40014400 	.word	0x40014400
 800ba90:	40014800 	.word	0x40014800

0800ba94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
 800baa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	4313      	orrs	r3, r2
 800baec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a27      	ldr	r2, [pc, #156]	@ (800bb90 <TIM_OC3_SetConfig+0xfc>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d003      	beq.n	800bafe <TIM_OC3_SetConfig+0x6a>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a26      	ldr	r2, [pc, #152]	@ (800bb94 <TIM_OC3_SetConfig+0x100>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d10d      	bne.n	800bb1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	021b      	lsls	r3, r3, #8
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a1c      	ldr	r2, [pc, #112]	@ (800bb90 <TIM_OC3_SetConfig+0xfc>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00f      	beq.n	800bb42 <TIM_OC3_SetConfig+0xae>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a1b      	ldr	r2, [pc, #108]	@ (800bb94 <TIM_OC3_SetConfig+0x100>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d00b      	beq.n	800bb42 <TIM_OC3_SetConfig+0xae>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bb98 <TIM_OC3_SetConfig+0x104>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d007      	beq.n	800bb42 <TIM_OC3_SetConfig+0xae>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a19      	ldr	r2, [pc, #100]	@ (800bb9c <TIM_OC3_SetConfig+0x108>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d003      	beq.n	800bb42 <TIM_OC3_SetConfig+0xae>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a18      	ldr	r2, [pc, #96]	@ (800bba0 <TIM_OC3_SetConfig+0x10c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d113      	bne.n	800bb6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	621a      	str	r2, [r3, #32]
}
 800bb84:	bf00      	nop
 800bb86:	371c      	adds	r7, #28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	40012c00 	.word	0x40012c00
 800bb94:	40013400 	.word	0x40013400
 800bb98:	40014000 	.word	0x40014000
 800bb9c:	40014400 	.word	0x40014400
 800bba0:	40014800 	.word	0x40014800

0800bba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	031b      	lsls	r3, r3, #12
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a28      	ldr	r2, [pc, #160]	@ (800bca4 <TIM_OC4_SetConfig+0x100>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d003      	beq.n	800bc10 <TIM_OC4_SetConfig+0x6c>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a27      	ldr	r2, [pc, #156]	@ (800bca8 <TIM_OC4_SetConfig+0x104>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d10d      	bne.n	800bc2c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	031b      	lsls	r3, r3, #12
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bca4 <TIM_OC4_SetConfig+0x100>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00f      	beq.n	800bc54 <TIM_OC4_SetConfig+0xb0>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a1c      	ldr	r2, [pc, #112]	@ (800bca8 <TIM_OC4_SetConfig+0x104>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d00b      	beq.n	800bc54 <TIM_OC4_SetConfig+0xb0>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800bcac <TIM_OC4_SetConfig+0x108>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d007      	beq.n	800bc54 <TIM_OC4_SetConfig+0xb0>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a1a      	ldr	r2, [pc, #104]	@ (800bcb0 <TIM_OC4_SetConfig+0x10c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d003      	beq.n	800bc54 <TIM_OC4_SetConfig+0xb0>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a19      	ldr	r2, [pc, #100]	@ (800bcb4 <TIM_OC4_SetConfig+0x110>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d113      	bne.n	800bc7c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	695b      	ldr	r3, [r3, #20]
 800bc68:	019b      	lsls	r3, r3, #6
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	019b      	lsls	r3, r3, #6
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	621a      	str	r2, [r3, #32]
}
 800bc96:	bf00      	nop
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	40012c00 	.word	0x40012c00
 800bca8:	40013400 	.word	0x40013400
 800bcac:	40014000 	.word	0x40014000
 800bcb0:	40014400 	.word	0x40014400
 800bcb4:	40014800 	.word	0x40014800

0800bcb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bcfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a17      	ldr	r2, [pc, #92]	@ (800bd6c <TIM_OC5_SetConfig+0xb4>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00f      	beq.n	800bd32 <TIM_OC5_SetConfig+0x7a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a16      	ldr	r2, [pc, #88]	@ (800bd70 <TIM_OC5_SetConfig+0xb8>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d00b      	beq.n	800bd32 <TIM_OC5_SetConfig+0x7a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a15      	ldr	r2, [pc, #84]	@ (800bd74 <TIM_OC5_SetConfig+0xbc>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d007      	beq.n	800bd32 <TIM_OC5_SetConfig+0x7a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a14      	ldr	r2, [pc, #80]	@ (800bd78 <TIM_OC5_SetConfig+0xc0>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d003      	beq.n	800bd32 <TIM_OC5_SetConfig+0x7a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a13      	ldr	r2, [pc, #76]	@ (800bd7c <TIM_OC5_SetConfig+0xc4>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d109      	bne.n	800bd46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	621a      	str	r2, [r3, #32]
}
 800bd60:	bf00      	nop
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	40012c00 	.word	0x40012c00
 800bd70:	40013400 	.word	0x40013400
 800bd74:	40014000 	.word	0x40014000
 800bd78:	40014400 	.word	0x40014400
 800bd7c:	40014800 	.word	0x40014800

0800bd80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	021b      	lsls	r3, r3, #8
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bdc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	051b      	lsls	r3, r3, #20
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a18      	ldr	r2, [pc, #96]	@ (800be38 <TIM_OC6_SetConfig+0xb8>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00f      	beq.n	800bdfc <TIM_OC6_SetConfig+0x7c>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a17      	ldr	r2, [pc, #92]	@ (800be3c <TIM_OC6_SetConfig+0xbc>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d00b      	beq.n	800bdfc <TIM_OC6_SetConfig+0x7c>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a16      	ldr	r2, [pc, #88]	@ (800be40 <TIM_OC6_SetConfig+0xc0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d007      	beq.n	800bdfc <TIM_OC6_SetConfig+0x7c>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a15      	ldr	r2, [pc, #84]	@ (800be44 <TIM_OC6_SetConfig+0xc4>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d003      	beq.n	800bdfc <TIM_OC6_SetConfig+0x7c>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a14      	ldr	r2, [pc, #80]	@ (800be48 <TIM_OC6_SetConfig+0xc8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d109      	bne.n	800be10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	029b      	lsls	r3, r3, #10
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	621a      	str	r2, [r3, #32]
}
 800be2a:	bf00      	nop
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	40012c00 	.word	0x40012c00
 800be3c:	40013400 	.word	0x40013400
 800be40:	40014000 	.word	0x40014000
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800

0800be4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a1b      	ldr	r3, [r3, #32]
 800be5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	f023 0201 	bic.w	r2, r3, #1
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	4313      	orrs	r3, r2
 800be80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f023 030a 	bic.w	r3, r3, #10
 800be88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4313      	orrs	r3, r2
 800be90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	621a      	str	r2, [r3, #32]
}
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800beaa:	b480      	push	{r7}
 800beac:	b087      	sub	sp, #28
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	f023 0210 	bic.w	r2, r3, #16
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	031b      	lsls	r3, r3, #12
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	4313      	orrs	r3, r2
 800bede:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bee6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	4313      	orrs	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	621a      	str	r2, [r3, #32]
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b085      	sub	sp, #20
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bf20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	f043 0307 	orr.w	r3, r3, #7
 800bf30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	609a      	str	r2, [r3, #8]
}
 800bf38:	bf00      	nop
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	021a      	lsls	r2, r3, #8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	431a      	orrs	r2, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	609a      	str	r2, [r3, #8]
}
 800bf78:	bf00      	nop
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f003 031f 	and.w	r3, r3, #31
 800bf96:	2201      	movs	r2, #1
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6a1a      	ldr	r2, [r3, #32]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	43db      	mvns	r3, r3
 800bfa6:	401a      	ands	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6a1a      	ldr	r2, [r3, #32]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f003 031f 	and.w	r3, r3, #31
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d101      	bne.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	e065      	b.n	800c0b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a2c      	ldr	r2, [pc, #176]	@ (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d004      	beq.n	800c01c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a2b      	ldr	r2, [pc, #172]	@ (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d108      	bne.n	800c02e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	4313      	orrs	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d018      	beq.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c05e:	d013      	beq.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a18      	ldr	r2, [pc, #96]	@ (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00e      	beq.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a17      	ldr	r2, [pc, #92]	@ (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d009      	beq.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a12      	ldr	r2, [pc, #72]	@ (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d004      	beq.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a13      	ldr	r2, [pc, #76]	@ (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d10c      	bne.n	800c0a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c08e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	4313      	orrs	r3, r2
 800c098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	40012c00 	.word	0x40012c00
 800c0c4:	40013400 	.word	0x40013400
 800c0c8:	40000400 	.word	0x40000400
 800c0cc:	40000800 	.word	0x40000800
 800c0d0:	40014000 	.word	0x40014000

0800c0d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e042      	b.n	800c1f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7f8 fc63 	bl	8004a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2224      	movs	r2, #36	@ 0x24
 800c18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0201 	bic.w	r2, r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f001 f894 	bl	800d2d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fdc5 	bl	800cd40 <UART_SetConfig>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e01b      	b.n	800c1f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	689a      	ldr	r2, [r3, #8]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0201 	orr.w	r2, r2, #1
 800c1ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 f913 	bl	800d41c <UART_CheckIdleState>
 800c1f6:	4603      	mov	r3, r0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08a      	sub	sp, #40	@ 0x28
 800c204:	af02      	add	r7, sp, #8
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	4613      	mov	r3, r2
 800c20e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c216:	2b20      	cmp	r3, #32
 800c218:	d17b      	bne.n	800c312 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <HAL_UART_Transmit+0x26>
 800c220:	88fb      	ldrh	r3, [r7, #6]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e074      	b.n	800c314 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2221      	movs	r2, #33	@ 0x21
 800c236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c23a:	f7f9 fb11 	bl	8005860 <HAL_GetTick>
 800c23e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	88fa      	ldrh	r2, [r7, #6]
 800c244:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	88fa      	ldrh	r2, [r7, #6]
 800c24c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c258:	d108      	bne.n	800c26c <HAL_UART_Transmit+0x6c>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d104      	bne.n	800c26c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	61bb      	str	r3, [r7, #24]
 800c26a:	e003      	b.n	800c274 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c270:	2300      	movs	r3, #0
 800c272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c274:	e030      	b.n	800c2d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2200      	movs	r2, #0
 800c27e:	2180      	movs	r1, #128	@ 0x80
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f001 f975 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d005      	beq.n	800c298 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2220      	movs	r2, #32
 800c290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e03d      	b.n	800c314 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10b      	bne.n	800c2b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	3302      	adds	r3, #2
 800c2b2:	61bb      	str	r3, [r7, #24]
 800c2b4:	e007      	b.n	800c2c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	781a      	ldrb	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1c8      	bne.n	800c276 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2140      	movs	r1, #64	@ 0x40
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f001 f93e 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e006      	b.n	800c314 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2220      	movs	r2, #32
 800c30a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e000      	b.n	800c314 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c312:	2302      	movs	r3, #2
  }
}
 800c314:	4618      	mov	r0, r3
 800c316:	3720      	adds	r7, #32
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	@ 0x28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c330:	2b20      	cmp	r3, #32
 800c332:	d137      	bne.n	800c3a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <HAL_UART_Receive_IT+0x24>
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e030      	b.n	800c3a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a18      	ldr	r2, [pc, #96]	@ (800c3b0 <HAL_UART_Receive_IT+0x94>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d01f      	beq.n	800c394 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d018      	beq.n	800c394 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	613b      	str	r3, [r7, #16]
   return(result);
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c376:	627b      	str	r3, [r7, #36]	@ 0x24
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	623b      	str	r3, [r7, #32]
 800c382:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	69f9      	ldr	r1, [r7, #28]
 800c386:	6a3a      	ldr	r2, [r7, #32]
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c394:	88fb      	ldrh	r3, [r7, #6]
 800c396:	461a      	mov	r2, r3
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f001 f956 	bl	800d64c <UART_Start_Receive_IT>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	e000      	b.n	800c3a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c3a4:	2302      	movs	r3, #2
  }
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3728      	adds	r7, #40	@ 0x28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	40008000 	.word	0x40008000

0800c3b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08a      	sub	sp, #40	@ 0x28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	d137      	bne.n	800c43c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <HAL_UART_Receive_DMA+0x24>
 800c3d2:	88fb      	ldrh	r3, [r7, #6]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e030      	b.n	800c43e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a18      	ldr	r2, [pc, #96]	@ (800c448 <HAL_UART_Receive_DMA+0x94>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d01f      	beq.n	800c42c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d018      	beq.n	800c42c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	e853 3f00 	ldrex	r3, [r3]
 800c406:	613b      	str	r3, [r7, #16]
   return(result);
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c40e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	461a      	mov	r2, r3
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	623b      	str	r3, [r7, #32]
 800c41a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	69f9      	ldr	r1, [r7, #28]
 800c41e:	6a3a      	ldr	r2, [r7, #32]
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	61bb      	str	r3, [r7, #24]
   return(result);
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e6      	bne.n	800c3fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	461a      	mov	r2, r3
 800c430:	68b9      	ldr	r1, [r7, #8]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f001 fa2c 	bl	800d890 <UART_Start_Receive_DMA>
 800c438:	4603      	mov	r3, r0
 800c43a:	e000      	b.n	800c43e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c43c:	2302      	movs	r3, #2
  }
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3728      	adds	r7, #40	@ 0x28
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	40008000 	.word	0x40008000

0800c44c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b0a0      	sub	sp, #128	@ 0x80
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c464:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c468:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c472:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c474:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c478:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c480:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e6      	bne.n	800c454 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c490:	e853 3f00 	ldrex	r3, [r3]
 800c494:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c498:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800c49c:	f023 0301 	bic.w	r3, r3, #1
 800c4a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c4aa:	657a      	str	r2, [r7, #84]	@ 0x54
 800c4ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4b2:	e841 2300 	strex	r3, r2, [r1]
 800c4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e3      	bne.n	800c486 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d118      	bne.n	800c4f8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	f023 0310 	bic.w	r3, r3, #16
 800c4da:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c502:	2b80      	cmp	r3, #128	@ 0x80
 800c504:	d137      	bne.n	800c576 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3308      	adds	r3, #8
 800c50c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	61fb      	str	r3, [r7, #28]
   return(result);
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c51c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c52c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e5      	bne.n	800c506 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d019      	beq.n	800c576 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c546:	2200      	movs	r2, #0
 800c548:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fb f86d 	bl	800762e <HAL_DMA_Abort>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00d      	beq.n	800c576 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fb f9d4 	bl	800790c <HAL_DMA_GetError>
 800c564:	4603      	mov	r3, r0
 800c566:	2b20      	cmp	r3, #32
 800c568:	d105      	bne.n	800c576 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2210      	movs	r2, #16
 800c56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e073      	b.n	800c65e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c580:	2b40      	cmp	r3, #64	@ 0x40
 800c582:	d13b      	bne.n	800c5fc <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	60bb      	str	r3, [r7, #8]
   return(result);
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c59a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c5a4:	61ba      	str	r2, [r7, #24]
 800c5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	6979      	ldr	r1, [r7, #20]
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e5      	bne.n	800c584 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d01c      	beq.n	800c5fc <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fb f82b 	bl	800762e <HAL_DMA_Abort>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00e      	beq.n	800c5fc <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fb f991 	bl	800790c <HAL_DMA_GetError>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	d105      	bne.n	800c5fc <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2210      	movs	r2, #16
 800c5f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e030      	b.n	800c65e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	220f      	movs	r2, #15
 800c612:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c61c:	d107      	bne.n	800c62e <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	699a      	ldr	r2, [r3, #24]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0210 	orr.w	r2, r2, #16
 800c62c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	699a      	ldr	r2, [r3, #24]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f042 0208 	orr.w	r2, r2, #8
 800c63c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2220      	movs	r2, #32
 800c642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3780      	adds	r7, #128	@ 0x80
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b0ba      	sub	sp, #232	@ 0xe8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	69db      	ldr	r3, [r3, #28]
 800c676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c68e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c692:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c696:	4013      	ands	r3, r2
 800c698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c69c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11b      	bne.n	800c6dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6a8:	f003 0320 	and.w	r3, r3, #32
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d015      	beq.n	800c6dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6b4:	f003 0320 	and.w	r3, r3, #32
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d105      	bne.n	800c6c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d009      	beq.n	800c6dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 8300 	beq.w	800ccd2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	4798      	blx	r3
      }
      return;
 800c6da:	e2fa      	b.n	800ccd2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 8123 	beq.w	800c92c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c6e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6ea:	4b8d      	ldr	r3, [pc, #564]	@ (800c920 <HAL_UART_IRQHandler+0x2b8>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c6f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c6f6:	4b8b      	ldr	r3, [pc, #556]	@ (800c924 <HAL_UART_IRQHandler+0x2bc>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 8116 	beq.w	800c92c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d011      	beq.n	800c730 <HAL_UART_IRQHandler+0xc8>
 800c70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2201      	movs	r2, #1
 800c71e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c726:	f043 0201 	orr.w	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d011      	beq.n	800c760 <HAL_UART_IRQHandler+0xf8>
 800c73c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2202      	movs	r2, #2
 800c74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c756:	f043 0204 	orr.w	r2, r3, #4
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c764:	f003 0304 	and.w	r3, r3, #4
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d011      	beq.n	800c790 <HAL_UART_IRQHandler+0x128>
 800c76c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2204      	movs	r2, #4
 800c77e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c786:	f043 0202 	orr.w	r2, r3, #2
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c794:	f003 0308 	and.w	r3, r3, #8
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d017      	beq.n	800c7cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7a0:	f003 0320 	and.w	r3, r3, #32
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d105      	bne.n	800c7b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c7a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c920 <HAL_UART_IRQHandler+0x2b8>)
 800c7ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2208      	movs	r2, #8
 800c7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7c2:	f043 0208 	orr.w	r2, r3, #8
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d012      	beq.n	800c7fe <HAL_UART_IRQHandler+0x196>
 800c7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00c      	beq.n	800c7fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7f4:	f043 0220 	orr.w	r2, r3, #32
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 8266 	beq.w	800ccd6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b00      	cmp	r3, #0
 800c814:	d013      	beq.n	800c83e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c81a:	f003 0320 	and.w	r3, r3, #32
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d105      	bne.n	800c82e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c844:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c852:	2b40      	cmp	r3, #64	@ 0x40
 800c854:	d005      	beq.n	800c862 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c85a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d054      	beq.n	800c90c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f001 f8fb 	bl	800da5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c872:	2b40      	cmp	r3, #64	@ 0x40
 800c874:	d146      	bne.n	800c904 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3308      	adds	r3, #8
 800c87c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c884:	e853 3f00 	ldrex	r3, [r3]
 800c888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c88c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3308      	adds	r3, #8
 800c89e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c8a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c8a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1d9      	bne.n	800c876 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d017      	beq.n	800c8fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8d2:	4a15      	ldr	r2, [pc, #84]	@ (800c928 <HAL_UART_IRQHandler+0x2c0>)
 800c8d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fa feff 	bl	80076e0 <HAL_DMA_Abort_IT>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d019      	beq.n	800c91c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8fa:	e00f      	b.n	800c91c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fa09 	bl	800cd14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c902:	e00b      	b.n	800c91c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fa05 	bl	800cd14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c90a:	e007      	b.n	800c91c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fa01 	bl	800cd14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c91a:	e1dc      	b.n	800ccd6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c91c:	bf00      	nop
    return;
 800c91e:	e1da      	b.n	800ccd6 <HAL_UART_IRQHandler+0x66e>
 800c920:	10000001 	.word	0x10000001
 800c924:	04000120 	.word	0x04000120
 800c928:	0800dd15 	.word	0x0800dd15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c930:	2b01      	cmp	r3, #1
 800c932:	f040 8170 	bne.w	800cc16 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c93a:	f003 0310 	and.w	r3, r3, #16
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 8169 	beq.w	800cc16 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8162 	beq.w	800cc16 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2210      	movs	r2, #16
 800c958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c964:	2b40      	cmp	r3, #64	@ 0x40
 800c966:	f040 80d8 	bne.w	800cb1a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80af 	beq.w	800cae0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c98c:	429a      	cmp	r2, r3
 800c98e:	f080 80a7 	bcs.w	800cae0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0320 	and.w	r3, r3, #32
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f040 8087 	bne.w	800cabe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c9e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c9f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1da      	bne.n	800c9b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca04:	e853 3f00 	ldrex	r3, [r3]
 800ca08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca2a:	e841 2300 	strex	r3, r2, [r1]
 800ca2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1e1      	bne.n	800c9fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca40:	e853 3f00 	ldrex	r3, [r3]
 800ca44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3308      	adds	r3, #8
 800ca56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1e3      	bne.n	800ca36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2220      	movs	r2, #32
 800ca72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca8c:	f023 0310 	bic.w	r3, r3, #16
 800ca90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caa0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800caa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800caac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e4      	bne.n	800ca7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fa fdb8 	bl	800762e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2202      	movs	r2, #2
 800cac2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f925 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cade:	e0fc      	b.n	800ccda <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800caea:	429a      	cmp	r2, r3
 800caec:	f040 80f5 	bne.w	800ccda <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 0320 	and.w	r3, r3, #32
 800cafe:	2b20      	cmp	r3, #32
 800cb00:	f040 80eb 	bne.w	800ccda <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f908 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
      return;
 800cb18:	e0df      	b.n	800ccda <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f000 80d1 	beq.w	800ccde <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800cb3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 80cc 	beq.w	800ccde <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	e853 3f00 	ldrex	r3, [r3]
 800cb52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb68:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb70:	e841 2300 	strex	r3, r2, [r1]
 800cb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e4      	bne.n	800cb46 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	3308      	adds	r3, #8
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	e853 3f00 	ldrex	r3, [r3]
 800cb8a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb92:	f023 0301 	bic.w	r3, r3, #1
 800cb96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3308      	adds	r3, #8
 800cba0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cba4:	633a      	str	r2, [r7, #48]	@ 0x30
 800cba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbac:	e841 2300 	strex	r3, r2, [r1]
 800cbb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e1      	bne.n	800cb7c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f023 0310 	bic.w	r3, r3, #16
 800cbe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf2:	69b9      	ldr	r1, [r7, #24]
 800cbf4:	69fa      	ldr	r2, [r7, #28]
 800cbf6:	e841 2300 	strex	r3, r2, [r1]
 800cbfa:	617b      	str	r3, [r7, #20]
   return(result);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1e4      	bne.n	800cbcc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2202      	movs	r2, #2
 800cc06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f88a 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc14:	e063      	b.n	800ccde <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00e      	beq.n	800cc40 <HAL_UART_IRQHandler+0x5d8>
 800cc22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cc36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f001 fdc9 	bl	800e7d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc3e:	e051      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d014      	beq.n	800cc76 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d105      	bne.n	800cc64 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cc58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d008      	beq.n	800cc76 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d03a      	beq.n	800cce2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	4798      	blx	r3
    }
    return;
 800cc74:	e035      	b.n	800cce2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <HAL_UART_IRQHandler+0x62e>
 800cc82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f001 f852 	bl	800dd38 <UART_EndTransmit_IT>
    return;
 800cc94:	e026      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d009      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x64e>
 800cca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cca6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 fda2 	bl	800e7f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccb4:	e016      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ccb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d010      	beq.n	800cce4 <HAL_UART_IRQHandler+0x67c>
 800ccc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	da0c      	bge.n	800cce4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 fd8a 	bl	800e7e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccd0:	e008      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
      return;
 800ccd2:	bf00      	nop
 800ccd4:	e006      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
    return;
 800ccd6:	bf00      	nop
 800ccd8:	e004      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
      return;
 800ccda:	bf00      	nop
 800ccdc:	e002      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
      return;
 800ccde:	bf00      	nop
 800cce0:	e000      	b.n	800cce4 <HAL_UART_IRQHandler+0x67c>
    return;
 800cce2:	bf00      	nop
  }
}
 800cce4:	37e8      	adds	r7, #232	@ 0xe8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop

0800ccec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cd08:	bf00      	nop
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cd1c:	bf00      	nop
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	460b      	mov	r3, r1
 800cd32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd44:	b08c      	sub	sp, #48	@ 0x30
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4bab      	ldr	r3, [pc, #684]	@ (800d01c <UART_SetConfig+0x2dc>)
 800cd70:	4013      	ands	r3, r2
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	6812      	ldr	r2, [r2, #0]
 800cd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	430a      	orrs	r2, r1
 800cd90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4aa0      	ldr	r2, [pc, #640]	@ (800d020 <UART_SetConfig+0x2e0>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d004      	beq.n	800cdac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cdb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	6812      	ldr	r2, [r2, #0]
 800cdbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdc0:	430b      	orrs	r3, r1
 800cdc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	f023 010f 	bic.w	r1, r3, #15
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a91      	ldr	r2, [pc, #580]	@ (800d024 <UART_SetConfig+0x2e4>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d125      	bne.n	800ce30 <UART_SetConfig+0xf0>
 800cde4:	4b90      	ldr	r3, [pc, #576]	@ (800d028 <UART_SetConfig+0x2e8>)
 800cde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdea:	f003 0303 	and.w	r3, r3, #3
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d81a      	bhi.n	800ce28 <UART_SetConfig+0xe8>
 800cdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf8 <UART_SetConfig+0xb8>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce09 	.word	0x0800ce09
 800cdfc:	0800ce19 	.word	0x0800ce19
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce21 	.word	0x0800ce21
 800ce08:	2301      	movs	r3, #1
 800ce0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce0e:	e0d6      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce10:	2302      	movs	r3, #2
 800ce12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce16:	e0d2      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce18:	2304      	movs	r3, #4
 800ce1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce1e:	e0ce      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce20:	2308      	movs	r3, #8
 800ce22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce26:	e0ca      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce28:	2310      	movs	r3, #16
 800ce2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce2e:	e0c6      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a7d      	ldr	r2, [pc, #500]	@ (800d02c <UART_SetConfig+0x2ec>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d138      	bne.n	800ceac <UART_SetConfig+0x16c>
 800ce3a:	4b7b      	ldr	r3, [pc, #492]	@ (800d028 <UART_SetConfig+0x2e8>)
 800ce3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce40:	f003 030c 	and.w	r3, r3, #12
 800ce44:	2b0c      	cmp	r3, #12
 800ce46:	d82d      	bhi.n	800cea4 <UART_SetConfig+0x164>
 800ce48:	a201      	add	r2, pc, #4	@ (adr r2, 800ce50 <UART_SetConfig+0x110>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800ce85 	.word	0x0800ce85
 800ce54:	0800cea5 	.word	0x0800cea5
 800ce58:	0800cea5 	.word	0x0800cea5
 800ce5c:	0800cea5 	.word	0x0800cea5
 800ce60:	0800ce95 	.word	0x0800ce95
 800ce64:	0800cea5 	.word	0x0800cea5
 800ce68:	0800cea5 	.word	0x0800cea5
 800ce6c:	0800cea5 	.word	0x0800cea5
 800ce70:	0800ce8d 	.word	0x0800ce8d
 800ce74:	0800cea5 	.word	0x0800cea5
 800ce78:	0800cea5 	.word	0x0800cea5
 800ce7c:	0800cea5 	.word	0x0800cea5
 800ce80:	0800ce9d 	.word	0x0800ce9d
 800ce84:	2300      	movs	r3, #0
 800ce86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce8a:	e098      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce92:	e094      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce94:	2304      	movs	r3, #4
 800ce96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce9a:	e090      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ce9c:	2308      	movs	r3, #8
 800ce9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea2:	e08c      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cea4:	2310      	movs	r3, #16
 800cea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceaa:	e088      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a5f      	ldr	r2, [pc, #380]	@ (800d030 <UART_SetConfig+0x2f0>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d125      	bne.n	800cf02 <UART_SetConfig+0x1c2>
 800ceb6:	4b5c      	ldr	r3, [pc, #368]	@ (800d028 <UART_SetConfig+0x2e8>)
 800ceb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cec0:	2b30      	cmp	r3, #48	@ 0x30
 800cec2:	d016      	beq.n	800cef2 <UART_SetConfig+0x1b2>
 800cec4:	2b30      	cmp	r3, #48	@ 0x30
 800cec6:	d818      	bhi.n	800cefa <UART_SetConfig+0x1ba>
 800cec8:	2b20      	cmp	r3, #32
 800ceca:	d00a      	beq.n	800cee2 <UART_SetConfig+0x1a2>
 800cecc:	2b20      	cmp	r3, #32
 800cece:	d814      	bhi.n	800cefa <UART_SetConfig+0x1ba>
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <UART_SetConfig+0x19a>
 800ced4:	2b10      	cmp	r3, #16
 800ced6:	d008      	beq.n	800ceea <UART_SetConfig+0x1aa>
 800ced8:	e00f      	b.n	800cefa <UART_SetConfig+0x1ba>
 800ceda:	2300      	movs	r3, #0
 800cedc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cee0:	e06d      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cee2:	2302      	movs	r3, #2
 800cee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cee8:	e069      	b.n	800cfbe <UART_SetConfig+0x27e>
 800ceea:	2304      	movs	r3, #4
 800ceec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef0:	e065      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cef2:	2308      	movs	r3, #8
 800cef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef8:	e061      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cefa:	2310      	movs	r3, #16
 800cefc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf00:	e05d      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a4b      	ldr	r2, [pc, #300]	@ (800d034 <UART_SetConfig+0x2f4>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d125      	bne.n	800cf58 <UART_SetConfig+0x218>
 800cf0c:	4b46      	ldr	r3, [pc, #280]	@ (800d028 <UART_SetConfig+0x2e8>)
 800cf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cf16:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf18:	d016      	beq.n	800cf48 <UART_SetConfig+0x208>
 800cf1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf1c:	d818      	bhi.n	800cf50 <UART_SetConfig+0x210>
 800cf1e:	2b80      	cmp	r3, #128	@ 0x80
 800cf20:	d00a      	beq.n	800cf38 <UART_SetConfig+0x1f8>
 800cf22:	2b80      	cmp	r3, #128	@ 0x80
 800cf24:	d814      	bhi.n	800cf50 <UART_SetConfig+0x210>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <UART_SetConfig+0x1f0>
 800cf2a:	2b40      	cmp	r3, #64	@ 0x40
 800cf2c:	d008      	beq.n	800cf40 <UART_SetConfig+0x200>
 800cf2e:	e00f      	b.n	800cf50 <UART_SetConfig+0x210>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf36:	e042      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf38:	2302      	movs	r3, #2
 800cf3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf3e:	e03e      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf40:	2304      	movs	r3, #4
 800cf42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf46:	e03a      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf48:	2308      	movs	r3, #8
 800cf4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf4e:	e036      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf50:	2310      	movs	r3, #16
 800cf52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf56:	e032      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a30      	ldr	r2, [pc, #192]	@ (800d020 <UART_SetConfig+0x2e0>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d12a      	bne.n	800cfb8 <UART_SetConfig+0x278>
 800cf62:	4b31      	ldr	r3, [pc, #196]	@ (800d028 <UART_SetConfig+0x2e8>)
 800cf64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf70:	d01a      	beq.n	800cfa8 <UART_SetConfig+0x268>
 800cf72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf76:	d81b      	bhi.n	800cfb0 <UART_SetConfig+0x270>
 800cf78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf7c:	d00c      	beq.n	800cf98 <UART_SetConfig+0x258>
 800cf7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf82:	d815      	bhi.n	800cfb0 <UART_SetConfig+0x270>
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <UART_SetConfig+0x250>
 800cf88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf8c:	d008      	beq.n	800cfa0 <UART_SetConfig+0x260>
 800cf8e:	e00f      	b.n	800cfb0 <UART_SetConfig+0x270>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf96:	e012      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf9e:	e00e      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cfa0:	2304      	movs	r3, #4
 800cfa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfa6:	e00a      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfae:	e006      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfb6:	e002      	b.n	800cfbe <UART_SetConfig+0x27e>
 800cfb8:	2310      	movs	r3, #16
 800cfba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <UART_SetConfig+0x2e0>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	f040 80a8 	bne.w	800d11a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cfca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cfce:	2b08      	cmp	r3, #8
 800cfd0:	d834      	bhi.n	800d03c <UART_SetConfig+0x2fc>
 800cfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd8 <UART_SetConfig+0x298>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cffd 	.word	0x0800cffd
 800cfdc:	0800d03d 	.word	0x0800d03d
 800cfe0:	0800d005 	.word	0x0800d005
 800cfe4:	0800d03d 	.word	0x0800d03d
 800cfe8:	0800d00b 	.word	0x0800d00b
 800cfec:	0800d03d 	.word	0x0800d03d
 800cff0:	0800d03d 	.word	0x0800d03d
 800cff4:	0800d03d 	.word	0x0800d03d
 800cff8:	0800d013 	.word	0x0800d013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cffc:	f7fc faa8 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800d000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d002:	e021      	b.n	800d048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d004:	4b0c      	ldr	r3, [pc, #48]	@ (800d038 <UART_SetConfig+0x2f8>)
 800d006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d008:	e01e      	b.n	800d048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d00a:	f7fc fa35 	bl	8009478 <HAL_RCC_GetSysClockFreq>
 800d00e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d010:	e01a      	b.n	800d048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d018:	e016      	b.n	800d048 <UART_SetConfig+0x308>
 800d01a:	bf00      	nop
 800d01c:	cfff69f3 	.word	0xcfff69f3
 800d020:	40008000 	.word	0x40008000
 800d024:	40013800 	.word	0x40013800
 800d028:	40021000 	.word	0x40021000
 800d02c:	40004400 	.word	0x40004400
 800d030:	40004800 	.word	0x40004800
 800d034:	40004c00 	.word	0x40004c00
 800d038:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d03c:	2300      	movs	r3, #0
 800d03e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d046:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 812a 	beq.w	800d2a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d054:	4a9e      	ldr	r2, [pc, #632]	@ (800d2d0 <UART_SetConfig+0x590>)
 800d056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d05a:	461a      	mov	r2, r3
 800d05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d062:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	4613      	mov	r3, r2
 800d06a:	005b      	lsls	r3, r3, #1
 800d06c:	4413      	add	r3, r2
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	429a      	cmp	r2, r3
 800d072:	d305      	bcc.n	800d080 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d07a:	69ba      	ldr	r2, [r7, #24]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d903      	bls.n	800d088 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d086:	e10d      	b.n	800d2a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	2200      	movs	r2, #0
 800d08c:	60bb      	str	r3, [r7, #8]
 800d08e:	60fa      	str	r2, [r7, #12]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d094:	4a8e      	ldr	r2, [pc, #568]	@ (800d2d0 <UART_SetConfig+0x590>)
 800d096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	2200      	movs	r2, #0
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	607a      	str	r2, [r7, #4]
 800d0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d0aa:	f7f3 fe15 	bl	8000cd8 <__aeabi_uldivmod>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f04f 0200 	mov.w	r2, #0
 800d0ba:	f04f 0300 	mov.w	r3, #0
 800d0be:	020b      	lsls	r3, r1, #8
 800d0c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d0c4:	0202      	lsls	r2, r0, #8
 800d0c6:	6979      	ldr	r1, [r7, #20]
 800d0c8:	6849      	ldr	r1, [r1, #4]
 800d0ca:	0849      	lsrs	r1, r1, #1
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	eb12 0804 	adds.w	r8, r2, r4
 800d0d6:	eb43 0905 	adc.w	r9, r3, r5
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	469a      	mov	sl, r3
 800d0e2:	4693      	mov	fp, r2
 800d0e4:	4652      	mov	r2, sl
 800d0e6:	465b      	mov	r3, fp
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 fdf4 	bl	8000cd8 <__aeabi_uldivmod>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0fe:	d308      	bcc.n	800d112 <UART_SetConfig+0x3d2>
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d106:	d204      	bcs.n	800d112 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6a3a      	ldr	r2, [r7, #32]
 800d10e:	60da      	str	r2, [r3, #12]
 800d110:	e0c8      	b.n	800d2a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d118:	e0c4      	b.n	800d2a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d122:	d167      	bne.n	800d1f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d124:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d128:	2b08      	cmp	r3, #8
 800d12a:	d828      	bhi.n	800d17e <UART_SetConfig+0x43e>
 800d12c:	a201      	add	r2, pc, #4	@ (adr r2, 800d134 <UART_SetConfig+0x3f4>)
 800d12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d132:	bf00      	nop
 800d134:	0800d159 	.word	0x0800d159
 800d138:	0800d161 	.word	0x0800d161
 800d13c:	0800d169 	.word	0x0800d169
 800d140:	0800d17f 	.word	0x0800d17f
 800d144:	0800d16f 	.word	0x0800d16f
 800d148:	0800d17f 	.word	0x0800d17f
 800d14c:	0800d17f 	.word	0x0800d17f
 800d150:	0800d17f 	.word	0x0800d17f
 800d154:	0800d177 	.word	0x0800d177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d158:	f7fc f9fa 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800d15c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d15e:	e014      	b.n	800d18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d160:	f7fc fa0c 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 800d164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d166:	e010      	b.n	800d18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d168:	4b5a      	ldr	r3, [pc, #360]	@ (800d2d4 <UART_SetConfig+0x594>)
 800d16a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d16c:	e00d      	b.n	800d18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d16e:	f7fc f983 	bl	8009478 <HAL_RCC_GetSysClockFreq>
 800d172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d174:	e009      	b.n	800d18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d17a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d17c:	e005      	b.n	800d18a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 8089 	beq.w	800d2a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d196:	4a4e      	ldr	r2, [pc, #312]	@ (800d2d0 <UART_SetConfig+0x590>)
 800d198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d19c:	461a      	mov	r2, r3
 800d19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1a4:	005a      	lsls	r2, r3, #1
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	085b      	lsrs	r3, r3, #1
 800d1ac:	441a      	add	r2, r3
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	2b0f      	cmp	r3, #15
 800d1bc:	d916      	bls.n	800d1ec <UART_SetConfig+0x4ac>
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1c4:	d212      	bcs.n	800d1ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	f023 030f 	bic.w	r3, r3, #15
 800d1ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	085b      	lsrs	r3, r3, #1
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	8bfb      	ldrh	r3, [r7, #30]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	8bfa      	ldrh	r2, [r7, #30]
 800d1e8:	60da      	str	r2, [r3, #12]
 800d1ea:	e05b      	b.n	800d2a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d1f2:	e057      	b.n	800d2a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d1f8:	2b08      	cmp	r3, #8
 800d1fa:	d828      	bhi.n	800d24e <UART_SetConfig+0x50e>
 800d1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d204 <UART_SetConfig+0x4c4>)
 800d1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d202:	bf00      	nop
 800d204:	0800d229 	.word	0x0800d229
 800d208:	0800d231 	.word	0x0800d231
 800d20c:	0800d239 	.word	0x0800d239
 800d210:	0800d24f 	.word	0x0800d24f
 800d214:	0800d23f 	.word	0x0800d23f
 800d218:	0800d24f 	.word	0x0800d24f
 800d21c:	0800d24f 	.word	0x0800d24f
 800d220:	0800d24f 	.word	0x0800d24f
 800d224:	0800d247 	.word	0x0800d247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d228:	f7fc f992 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800d22c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d22e:	e014      	b.n	800d25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d230:	f7fc f9a4 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 800d234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d236:	e010      	b.n	800d25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d238:	4b26      	ldr	r3, [pc, #152]	@ (800d2d4 <UART_SetConfig+0x594>)
 800d23a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d23c:	e00d      	b.n	800d25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d23e:	f7fc f91b 	bl	8009478 <HAL_RCC_GetSysClockFreq>
 800d242:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d244:	e009      	b.n	800d25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d24a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d24c:	e005      	b.n	800d25a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d24e:	2300      	movs	r3, #0
 800d250:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d258:	bf00      	nop
    }

    if (pclk != 0U)
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d021      	beq.n	800d2a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d264:	4a1a      	ldr	r2, [pc, #104]	@ (800d2d0 <UART_SetConfig+0x590>)
 800d266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d26a:	461a      	mov	r2, r3
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	441a      	add	r2, r3
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d282:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d909      	bls.n	800d29e <UART_SetConfig+0x55e>
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d290:	d205      	bcs.n	800d29e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	b29a      	uxth	r2, r3
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60da      	str	r2, [r3, #12]
 800d29c:	e002      	b.n	800d2a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d2c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3730      	adds	r7, #48	@ 0x30
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ce:	bf00      	nop
 800d2d0:	0801b338 	.word	0x0801b338
 800d2d4:	00f42400 	.word	0x00f42400

0800d2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e4:	f003 0308 	and.w	r3, r3, #8
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00a      	beq.n	800d302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00a      	beq.n	800d324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	430a      	orrs	r2, r1
 800d322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00a      	beq.n	800d346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	430a      	orrs	r2, r1
 800d344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d34a:	f003 0304 	and.w	r3, r3, #4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00a      	beq.n	800d368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	430a      	orrs	r2, r1
 800d366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36c:	f003 0310 	and.w	r3, r3, #16
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00a      	beq.n	800d38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	430a      	orrs	r2, r1
 800d3aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01a      	beq.n	800d3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3d6:	d10a      	bne.n	800d3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	430a      	orrs	r2, r1
 800d40e:	605a      	str	r2, [r3, #4]
  }
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b098      	sub	sp, #96	@ 0x60
 800d420:	af02      	add	r7, sp, #8
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d42c:	f7f8 fa18 	bl	8005860 <HAL_GetTick>
 800d430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0308 	and.w	r3, r3, #8
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d12f      	bne.n	800d4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d448:	2200      	movs	r2, #0
 800d44a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f88e 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d022      	beq.n	800d4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d46e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d478:	647b      	str	r3, [r7, #68]	@ 0x44
 800d47a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e6      	bne.n	800d45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2220      	movs	r2, #32
 800d490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e063      	b.n	800d568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d149      	bne.n	800d542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f857 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d03c      	beq.n	800d542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e6      	bne.n	800d4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3308      	adds	r3, #8
 800d500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	60fb      	str	r3, [r7, #12]
   return(result);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f023 0301 	bic.w	r3, r3, #1
 800d510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3308      	adds	r3, #8
 800d518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d51a:	61fa      	str	r2, [r7, #28]
 800d51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	69b9      	ldr	r1, [r7, #24]
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	617b      	str	r3, [r7, #20]
   return(result);
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e5      	bne.n	800d4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e012      	b.n	800d568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2220      	movs	r2, #32
 800d546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3758      	adds	r7, #88	@ 0x58
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	4613      	mov	r3, r2
 800d57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d580:	e04f      	b.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d04b      	beq.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d58a:	f7f8 f969 	bl	8005860 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	429a      	cmp	r2, r3
 800d598:	d302      	bcc.n	800d5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	e04e      	b.n	800d642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0304 	and.w	r3, r3, #4
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d037      	beq.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b80      	cmp	r3, #128	@ 0x80
 800d5b6:	d034      	beq.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b40      	cmp	r3, #64	@ 0x40
 800d5bc:	d031      	beq.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f003 0308 	and.w	r3, r3, #8
 800d5c8:	2b08      	cmp	r3, #8
 800d5ca:	d110      	bne.n	800d5ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2208      	movs	r2, #8
 800d5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f000 fa42 	bl	800da5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2208      	movs	r2, #8
 800d5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e029      	b.n	800d642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5fc:	d111      	bne.n	800d622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 fa28 	bl	800da5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2220      	movs	r2, #32
 800d612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d61e:	2303      	movs	r3, #3
 800d620:	e00f      	b.n	800d642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	69da      	ldr	r2, [r3, #28]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	4013      	ands	r3, r2
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	429a      	cmp	r2, r3
 800d630:	bf0c      	ite	eq
 800d632:	2301      	moveq	r3, #1
 800d634:	2300      	movne	r3, #0
 800d636:	b2db      	uxtb	r3, r3
 800d638:	461a      	mov	r2, r3
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d0a0      	beq.n	800d582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b0a3      	sub	sp, #140	@ 0x8c
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	4613      	mov	r3, r2
 800d658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	88fa      	ldrh	r2, [r7, #6]
 800d664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	88fa      	ldrh	r2, [r7, #6]
 800d66c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d67e:	d10e      	bne.n	800d69e <UART_Start_Receive_IT+0x52>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d105      	bne.n	800d694 <UART_Start_Receive_IT+0x48>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d68e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d692:	e02d      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	22ff      	movs	r2, #255	@ 0xff
 800d698:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d69c:	e028      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10d      	bne.n	800d6c2 <UART_Start_Receive_IT+0x76>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d104      	bne.n	800d6b8 <UART_Start_Receive_IT+0x6c>
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	22ff      	movs	r2, #255	@ 0xff
 800d6b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6b6:	e01b      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	227f      	movs	r2, #127	@ 0x7f
 800d6bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6c0:	e016      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6ca:	d10d      	bne.n	800d6e8 <UART_Start_Receive_IT+0x9c>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <UART_Start_Receive_IT+0x92>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	227f      	movs	r2, #127	@ 0x7f
 800d6d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6dc:	e008      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	223f      	movs	r2, #63	@ 0x3f
 800d6e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6e6:	e003      	b.n	800d6f0 <UART_Start_Receive_IT+0xa4>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2222      	movs	r2, #34	@ 0x22
 800d6fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d710:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d712:	f043 0301 	orr.w	r3, r3, #1
 800d716:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d724:	673a      	str	r2, [r7, #112]	@ 0x70
 800d726:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d728:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d72a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d72c:	e841 2300 	strex	r3, r2, [r1]
 800d730:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1e3      	bne.n	800d700 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d740:	d14f      	bne.n	800d7e2 <UART_Start_Receive_IT+0x196>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d748:	88fa      	ldrh	r2, [r7, #6]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d349      	bcc.n	800d7e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d756:	d107      	bne.n	800d768 <UART_Start_Receive_IT+0x11c>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d103      	bne.n	800d768 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4a47      	ldr	r2, [pc, #284]	@ (800d880 <UART_Start_Receive_IT+0x234>)
 800d764:	675a      	str	r2, [r3, #116]	@ 0x74
 800d766:	e002      	b.n	800d76e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4a46      	ldr	r2, [pc, #280]	@ (800d884 <UART_Start_Receive_IT+0x238>)
 800d76c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01a      	beq.n	800d7ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d77e:	e853 3f00 	ldrex	r3, [r3]
 800d782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d78a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	461a      	mov	r2, r3
 800d794:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d79a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d79e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d7a0:	e841 2300 	strex	r3, r2, [r1]
 800d7a4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d7a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1e4      	bne.n	800d776 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d7c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d7cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d7ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7d4:	e841 2300 	strex	r3, r2, [r1]
 800d7d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1e5      	bne.n	800d7ac <UART_Start_Receive_IT+0x160>
 800d7e0:	e046      	b.n	800d870 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7ea:	d107      	bne.n	800d7fc <UART_Start_Receive_IT+0x1b0>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4a24      	ldr	r2, [pc, #144]	@ (800d888 <UART_Start_Receive_IT+0x23c>)
 800d7f8:	675a      	str	r2, [r3, #116]	@ 0x74
 800d7fa:	e002      	b.n	800d802 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	4a23      	ldr	r2, [pc, #140]	@ (800d88c <UART_Start_Receive_IT+0x240>)
 800d800:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d019      	beq.n	800d83e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d812:	e853 3f00 	ldrex	r3, [r3]
 800d816:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d81e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	461a      	mov	r2, r3
 800d826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d828:	637b      	str	r3, [r7, #52]	@ 0x34
 800d82a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d82e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d830:	e841 2300 	strex	r3, r2, [r1]
 800d834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1e6      	bne.n	800d80a <UART_Start_Receive_IT+0x1be>
 800d83c:	e018      	b.n	800d870 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	613b      	str	r3, [r7, #16]
   return(result);
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f043 0320 	orr.w	r3, r3, #32
 800d852:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	461a      	mov	r2, r3
 800d85a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d85c:	623b      	str	r3, [r7, #32]
 800d85e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d860:	69f9      	ldr	r1, [r7, #28]
 800d862:	6a3a      	ldr	r2, [r7, #32]
 800d864:	e841 2300 	strex	r3, r2, [r1]
 800d868:	61bb      	str	r3, [r7, #24]
   return(result);
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e6      	bne.n	800d83e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	378c      	adds	r7, #140	@ 0x8c
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	0800e465 	.word	0x0800e465
 800d884:	0800e101 	.word	0x0800e101
 800d888:	0800df49 	.word	0x0800df49
 800d88c:	0800dd91 	.word	0x0800dd91

0800d890 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b096      	sub	sp, #88	@ 0x58
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	4613      	mov	r3, r2
 800d89c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	88fa      	ldrh	r2, [r7, #6]
 800d8a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2222      	movs	r2, #34	@ 0x22
 800d8b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d02d      	beq.n	800d922 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8cc:	4a40      	ldr	r2, [pc, #256]	@ (800d9d0 <UART_Start_Receive_DMA+0x140>)
 800d8ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8d6:	4a3f      	ldr	r2, [pc, #252]	@ (800d9d4 <UART_Start_Receive_DMA+0x144>)
 800d8d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8e0:	4a3d      	ldr	r2, [pc, #244]	@ (800d9d8 <UART_Start_Receive_DMA+0x148>)
 800d8e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3324      	adds	r3, #36	@ 0x24
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d900:	461a      	mov	r2, r3
 800d902:	88fb      	ldrh	r3, [r7, #6]
 800d904:	f7f9 fe18 	bl	8007538 <HAL_DMA_Start_IT>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d009      	beq.n	800d922 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2210      	movs	r2, #16
 800d912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2220      	movs	r2, #32
 800d91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e051      	b.n	800d9c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d018      	beq.n	800d95c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	e853 3f00 	ldrex	r3, [r3]
 800d936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d93e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	461a      	mov	r2, r3
 800d946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d94a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d94e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d950:	e841 2300 	strex	r3, r2, [r1]
 800d954:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1e6      	bne.n	800d92a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	3308      	adds	r3, #8
 800d962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d966:	e853 3f00 	ldrex	r3, [r3]
 800d96a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96e:	f043 0301 	orr.w	r3, r3, #1
 800d972:	653b      	str	r3, [r7, #80]	@ 0x50
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3308      	adds	r3, #8
 800d97a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d97c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d97e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d980:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d984:	e841 2300 	strex	r3, r2, [r1]
 800d988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1e5      	bne.n	800d95c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3308      	adds	r3, #8
 800d996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	e853 3f00 	ldrex	r3, [r3]
 800d99e:	613b      	str	r3, [r7, #16]
   return(result);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9b0:	623a      	str	r2, [r7, #32]
 800d9b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b4:	69f9      	ldr	r1, [r7, #28]
 800d9b6:	6a3a      	ldr	r2, [r7, #32]
 800d9b8:	e841 2300 	strex	r3, r2, [r1]
 800d9bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1e5      	bne.n	800d990 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3758      	adds	r7, #88	@ 0x58
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	0800db2b 	.word	0x0800db2b
 800d9d4:	0800dc57 	.word	0x0800dc57
 800d9d8:	0800dc95 	.word	0x0800dc95

0800d9dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b08f      	sub	sp, #60	@ 0x3c
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	e853 3f00 	ldrex	r3, [r3]
 800d9f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d9f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da04:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da0a:	e841 2300 	strex	r3, r2, [r1]
 800da0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1e6      	bne.n	800d9e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3308      	adds	r3, #8
 800da1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	e853 3f00 	ldrex	r3, [r3]
 800da24:	60bb      	str	r3, [r7, #8]
   return(result);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800da2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3308      	adds	r3, #8
 800da34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da36:	61ba      	str	r2, [r7, #24]
 800da38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	6979      	ldr	r1, [r7, #20]
 800da3c:	69ba      	ldr	r2, [r7, #24]
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	613b      	str	r3, [r7, #16]
   return(result);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e5      	bne.n	800da16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2220      	movs	r2, #32
 800da4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800da52:	bf00      	nop
 800da54:	373c      	adds	r7, #60	@ 0x3c
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da5e:	b480      	push	{r7}
 800da60:	b095      	sub	sp, #84	@ 0x54
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6e:	e853 3f00 	ldrex	r3, [r3]
 800da72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	461a      	mov	r2, r3
 800da82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da84:	643b      	str	r3, [r7, #64]	@ 0x40
 800da86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da8c:	e841 2300 	strex	r3, r2, [r1]
 800da90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1e6      	bne.n	800da66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3308      	adds	r3, #8
 800da9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	e853 3f00 	ldrex	r3, [r3]
 800daa6:	61fb      	str	r3, [r7, #28]
   return(result);
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daae:	f023 0301 	bic.w	r3, r3, #1
 800dab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3308      	adds	r3, #8
 800daba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dabc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dabe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dac4:	e841 2300 	strex	r3, r2, [r1]
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800daca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1e3      	bne.n	800da98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d118      	bne.n	800db0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f023 0310 	bic.w	r3, r3, #16
 800daec:	647b      	str	r3, [r7, #68]	@ 0x44
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daf6:	61bb      	str	r3, [r7, #24]
 800daf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6979      	ldr	r1, [r7, #20]
 800dafc:	69ba      	ldr	r2, [r7, #24]
 800dafe:	e841 2300 	strex	r3, r2, [r1]
 800db02:	613b      	str	r3, [r7, #16]
   return(result);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1e6      	bne.n	800dad8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800db1e:	bf00      	nop
 800db20:	3754      	adds	r7, #84	@ 0x54
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b09c      	sub	sp, #112	@ 0x70
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db36:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0320 	and.w	r3, r3, #32
 800db42:	2b00      	cmp	r3, #0
 800db44:	d171      	bne.n	800dc2a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800db46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db48:	2200      	movs	r2, #0
 800db4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800db5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db62:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e6      	bne.n	800db4e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3308      	adds	r3, #8
 800db86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8a:	e853 3f00 	ldrex	r3, [r3]
 800db8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db92:	f023 0301 	bic.w	r3, r3, #1
 800db96:	667b      	str	r3, [r7, #100]	@ 0x64
 800db98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3308      	adds	r3, #8
 800db9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dba0:	647a      	str	r2, [r7, #68]	@ 0x44
 800dba2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dba8:	e841 2300 	strex	r3, r2, [r1]
 800dbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e5      	bne.n	800db80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	623b      	str	r3, [r7, #32]
   return(result);
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbca:	663b      	str	r3, [r7, #96]	@ 0x60
 800dbcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dbd4:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e5      	bne.n	800dbb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dbe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbea:	2220      	movs	r2, #32
 800dbec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d118      	bne.n	800dc2a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f023 0310 	bic.w	r3, r3, #16
 800dc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc16:	61fb      	str	r3, [r7, #28]
 800dc18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	69b9      	ldr	r1, [r7, #24]
 800dc1c:	69fa      	ldr	r2, [r7, #28]
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	617b      	str	r3, [r7, #20]
   return(result);
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e6      	bne.n	800dbf8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d107      	bne.n	800dc48 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dc42:	f7ff f871 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc46:	e002      	b.n	800dc4e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800dc48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dc4a:	f7f7 f823 	bl	8004c94 <HAL_UART_RxCpltCallback>
}
 800dc4e:	bf00      	nop
 800dc50:	3770      	adds	r7, #112	@ 0x70
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2201      	movs	r2, #1
 800dc68:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d109      	bne.n	800dc86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc78:	085b      	lsrs	r3, r3, #1
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f7ff f852 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc84:	e002      	b.n	800dc8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f7ff f83a 	bl	800cd00 <HAL_UART_RxHalfCpltCallback>
}
 800dc8c:	bf00      	nop
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dca8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dcb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcbc:	2b80      	cmp	r3, #128	@ 0x80
 800dcbe:	d109      	bne.n	800dcd4 <UART_DMAError+0x40>
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b21      	cmp	r3, #33	@ 0x21
 800dcc4:	d106      	bne.n	800dcd4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f7ff fe84 	bl	800d9dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcde:	2b40      	cmp	r3, #64	@ 0x40
 800dce0:	d109      	bne.n	800dcf6 <UART_DMAError+0x62>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b22      	cmp	r3, #34	@ 0x22
 800dce6:	d106      	bne.n	800dcf6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dcf0:	6978      	ldr	r0, [r7, #20]
 800dcf2:	f7ff feb4 	bl	800da5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcfc:	f043 0210 	orr.w	r2, r3, #16
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd06:	6978      	ldr	r0, [r7, #20]
 800dd08:	f7ff f804 	bl	800cd14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd0c:	bf00      	nop
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7fe fff2 	bl	800cd14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd30:	bf00      	nop
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd54:	61fb      	str	r3, [r7, #28]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	61bb      	str	r3, [r7, #24]
 800dd60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	69ba      	ldr	r2, [r7, #24]
 800dd66:	e841 2300 	strex	r3, r2, [r1]
 800dd6a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e6      	bne.n	800dd40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7fe ffb3 	bl	800ccec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd86:	bf00      	nop
 800dd88:	3720      	adds	r7, #32
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b09c      	sub	sp, #112	@ 0x70
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dda8:	2b22      	cmp	r3, #34	@ 0x22
 800ddaa:	f040 80be 	bne.w	800df2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ddb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ddbc:	b2d9      	uxtb	r1, r3
 800ddbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc8:	400a      	ands	r2, r1
 800ddca:	b2d2      	uxtb	r2, r2
 800ddcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	3b01      	subs	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f040 80a1 	bne.w	800df3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de00:	e853 3f00 	ldrex	r3, [r3]
 800de04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e6      	bne.n	800ddf8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3308      	adds	r3, #8
 800de30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	e853 3f00 	ldrex	r3, [r3]
 800de38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3c:	f023 0301 	bic.w	r3, r3, #1
 800de40:	667b      	str	r3, [r7, #100]	@ 0x64
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	3308      	adds	r3, #8
 800de48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800de4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de52:	e841 2300 	strex	r3, r2, [r1]
 800de56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1e5      	bne.n	800de2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2220      	movs	r2, #32
 800de62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a33      	ldr	r2, [pc, #204]	@ (800df44 <UART_RxISR_8BIT+0x1b4>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d01f      	beq.n	800debc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d018      	beq.n	800debc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	623b      	str	r3, [r7, #32]
   return(result);
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de9e:	663b      	str	r3, [r7, #96]	@ 0x60
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	461a      	mov	r2, r3
 800dea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea8:	633b      	str	r3, [r7, #48]	@ 0x30
 800deaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e6      	bne.n	800de8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d12e      	bne.n	800df22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	e853 3f00 	ldrex	r3, [r3]
 800ded6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f023 0310 	bic.w	r3, r3, #16
 800dede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
 800dee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dee8:	61fb      	str	r3, [r7, #28]
 800deea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deec:	69b9      	ldr	r1, [r7, #24]
 800deee:	69fa      	ldr	r2, [r7, #28]
 800def0:	e841 2300 	strex	r3, r2, [r1]
 800def4:	617b      	str	r3, [r7, #20]
   return(result);
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e6      	bne.n	800deca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	f003 0310 	and.w	r3, r3, #16
 800df06:	2b10      	cmp	r3, #16
 800df08:	d103      	bne.n	800df12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2210      	movs	r2, #16
 800df10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7fe ff04 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df20:	e00b      	b.n	800df3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7f6 feb6 	bl	8004c94 <HAL_UART_RxCpltCallback>
}
 800df28:	e007      	b.n	800df3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	699a      	ldr	r2, [r3, #24]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f042 0208 	orr.w	r2, r2, #8
 800df38:	619a      	str	r2, [r3, #24]
}
 800df3a:	bf00      	nop
 800df3c:	3770      	adds	r7, #112	@ 0x70
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	40008000 	.word	0x40008000

0800df48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b09c      	sub	sp, #112	@ 0x70
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df60:	2b22      	cmp	r3, #34	@ 0x22
 800df62:	f040 80be 	bne.w	800e0e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800df76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800df7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df7e:	4013      	ands	r3, r2
 800df80:	b29a      	uxth	r2, r3
 800df82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df8a:	1c9a      	adds	r2, r3, #2
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df96:	b29b      	uxth	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f040 80a1 	bne.w	800e0f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dfbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfc4:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfce:	657b      	str	r3, [r7, #84]	@ 0x54
 800dfd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dfd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dfd6:	e841 2300 	strex	r3, r2, [r1]
 800dfda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e6      	bne.n	800dfb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	663b      	str	r3, [r7, #96]	@ 0x60
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e002:	643a      	str	r2, [r7, #64]	@ 0x40
 800e004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e00a:	e841 2300 	strex	r3, r2, [r1]
 800e00e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e5      	bne.n	800dfe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a33      	ldr	r2, [pc, #204]	@ (800e0fc <UART_RxISR_16BIT+0x1b4>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d01f      	beq.n	800e074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d018      	beq.n	800e074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	e853 3f00 	ldrex	r3, [r3]
 800e04e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e056:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e062:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e068:	e841 2300 	strex	r3, r2, [r1]
 800e06c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1e6      	bne.n	800e042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d12e      	bne.n	800e0da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	e853 3f00 	ldrex	r3, [r3]
 800e08e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	f023 0310 	bic.w	r3, r3, #16
 800e096:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0a0:	61bb      	str	r3, [r7, #24]
 800e0a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a4:	6979      	ldr	r1, [r7, #20]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	e841 2300 	strex	r3, r2, [r1]
 800e0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1e6      	bne.n	800e082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	f003 0310 	and.w	r3, r3, #16
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	d103      	bne.n	800e0ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7fe fe28 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0d8:	e00b      	b.n	800e0f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f6 fdda 	bl	8004c94 <HAL_UART_RxCpltCallback>
}
 800e0e0:	e007      	b.n	800e0f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	699a      	ldr	r2, [r3, #24]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f042 0208 	orr.w	r2, r2, #8
 800e0f0:	619a      	str	r2, [r3, #24]
}
 800e0f2:	bf00      	nop
 800e0f4:	3770      	adds	r7, #112	@ 0x70
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	40008000 	.word	0x40008000

0800e100 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b0ac      	sub	sp, #176	@ 0xb0
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e10e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e136:	2b22      	cmp	r3, #34	@ 0x22
 800e138:	f040 8183 	bne.w	800e442 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e142:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e146:	e126      	b.n	800e396 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e152:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e156:	b2d9      	uxtb	r1, r3
 800e158:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e162:	400a      	ands	r2, r1
 800e164:	b2d2      	uxtb	r2, r2
 800e166:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b00      	cmp	r3, #0
 800e198:	d053      	beq.n	800e242 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d011      	beq.n	800e1ca <UART_RxISR_8BIT_FIFOEN+0xca>
 800e1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c0:	f043 0201 	orr.w	r2, r3, #1
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d011      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e1d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00b      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1f0:	f043 0204 	orr.w	r2, r3, #4
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1fe:	f003 0304 	and.w	r3, r3, #4
 800e202:	2b00      	cmp	r3, #0
 800e204:	d011      	beq.n	800e22a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00b      	beq.n	800e22a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2204      	movs	r2, #4
 800e218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e220:	f043 0202 	orr.w	r2, r3, #2
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e230:	2b00      	cmp	r3, #0
 800e232:	d006      	beq.n	800e242 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7fe fd6d 	bl	800cd14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e248:	b29b      	uxth	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 80a3 	bne.w	800e396 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e258:	e853 3f00 	ldrex	r3, [r3]
 800e25c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	461a      	mov	r2, r3
 800e26e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e274:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e276:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e278:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e4      	bne.n	800e250 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3308      	adds	r3, #8
 800e28c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e296:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e29c:	f023 0301 	bic.w	r3, r3, #1
 800e2a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e2ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e2b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e2b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e2b6:	e841 2300 	strex	r3, r2, [r1]
 800e2ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e2bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1e1      	bne.n	800e286 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a60      	ldr	r2, [pc, #384]	@ (800e45c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d021      	beq.n	800e324 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d01a      	beq.n	800e324 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2f6:	e853 3f00 	ldrex	r3, [r3]
 800e2fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e2fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	461a      	mov	r2, r3
 800e30c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e310:	657b      	str	r3, [r7, #84]	@ 0x54
 800e312:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e314:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e316:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e318:	e841 2300 	strex	r3, r2, [r1]
 800e31c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e31e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1e4      	bne.n	800e2ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d130      	bne.n	800e38e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33a:	e853 3f00 	ldrex	r3, [r3]
 800e33e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e342:	f023 0310 	bic.w	r3, r3, #16
 800e346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e354:	643b      	str	r3, [r7, #64]	@ 0x40
 800e356:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e358:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e35a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e35c:	e841 2300 	strex	r3, r2, [r1]
 800e360:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e4      	bne.n	800e332 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	69db      	ldr	r3, [r3, #28]
 800e36e:	f003 0310 	and.w	r3, r3, #16
 800e372:	2b10      	cmp	r3, #16
 800e374:	d103      	bne.n	800e37e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2210      	movs	r2, #16
 800e37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7fe fcce 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e38c:	e00e      	b.n	800e3ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7f6 fc80 	bl	8004c94 <HAL_UART_RxCpltCallback>
        break;
 800e394:	e00a      	b.n	800e3ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e396:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d006      	beq.n	800e3ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800e39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3a2:	f003 0320 	and.w	r3, r3, #32
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f47f aece 	bne.w	800e148 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e3b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d049      	beq.n	800e452 <UART_RxISR_8BIT_FIFOEN+0x352>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e3c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d242      	bcs.n	800e452 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	e853 3f00 	ldrex	r3, [r3]
 800e3da:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e3e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e3f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f8:	e841 2300 	strex	r3, r2, [r1]
 800e3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1e3      	bne.n	800e3cc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a16      	ldr	r2, [pc, #88]	@ (800e460 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e408:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	e853 3f00 	ldrex	r3, [r3]
 800e416:	60bb      	str	r3, [r7, #8]
   return(result);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f043 0320 	orr.w	r3, r3, #32
 800e41e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e42c:	61bb      	str	r3, [r7, #24]
 800e42e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e430:	6979      	ldr	r1, [r7, #20]
 800e432:	69ba      	ldr	r2, [r7, #24]
 800e434:	e841 2300 	strex	r3, r2, [r1]
 800e438:	613b      	str	r3, [r7, #16]
   return(result);
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e4      	bne.n	800e40a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e440:	e007      	b.n	800e452 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	699a      	ldr	r2, [r3, #24]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f042 0208 	orr.w	r2, r2, #8
 800e450:	619a      	str	r2, [r3, #24]
}
 800e452:	bf00      	nop
 800e454:	37b0      	adds	r7, #176	@ 0xb0
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	40008000 	.word	0x40008000
 800e460:	0800dd91 	.word	0x0800dd91

0800e464 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b0ae      	sub	sp, #184	@ 0xb8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e472:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	69db      	ldr	r3, [r3, #28]
 800e47c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e49a:	2b22      	cmp	r3, #34	@ 0x22
 800e49c:	f040 8187 	bne.w	800e7ae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e4a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4aa:	e12a      	b.n	800e702 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e4be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e4c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e4ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4d4:	1c9a      	adds	r2, r3, #2
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4fa:	f003 0307 	and.w	r3, r3, #7
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d053      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d011      	beq.n	800e532 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2201      	movs	r2, #1
 800e520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e528:	f043 0201 	orr.w	r2, r3, #1
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d011      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e53e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e542:	f003 0301 	and.w	r3, r3, #1
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2202      	movs	r2, #2
 800e550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e558:	f043 0204 	orr.w	r2, r3, #4
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e566:	f003 0304 	and.w	r3, r3, #4
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d011      	beq.n	800e592 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e56e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2204      	movs	r2, #4
 800e580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e588:	f043 0202 	orr.w	r2, r3, #2
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d006      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7fe fbb9 	bl	800cd14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f040 80a5 	bne.w	800e702 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e5c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e5c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e5da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e5de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e5e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e5ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e2      	bne.n	800e5b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e608:	f023 0301 	bic.w	r3, r3, #1
 800e60c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3308      	adds	r3, #8
 800e616:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e61a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e61c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e620:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e622:	e841 2300 	strex	r3, r2, [r1]
 800e626:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1e1      	bne.n	800e5f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2220      	movs	r2, #32
 800e632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a60      	ldr	r2, [pc, #384]	@ (800e7c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d021      	beq.n	800e690 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d01a      	beq.n	800e690 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e662:	e853 3f00 	ldrex	r3, [r3]
 800e666:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e66a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e66e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e67c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e67e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e680:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e682:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e684:	e841 2300 	strex	r3, r2, [r1]
 800e688:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e68a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1e4      	bne.n	800e65a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e694:	2b01      	cmp	r3, #1
 800e696:	d130      	bne.n	800e6fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a6:	e853 3f00 	ldrex	r3, [r3]
 800e6aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ae:	f023 0310 	bic.w	r3, r3, #16
 800e6b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e6c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6c8:	e841 2300 	strex	r3, r2, [r1]
 800e6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e4      	bne.n	800e69e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	69db      	ldr	r3, [r3, #28]
 800e6da:	f003 0310 	and.w	r3, r3, #16
 800e6de:	2b10      	cmp	r3, #16
 800e6e0:	d103      	bne.n	800e6ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2210      	movs	r2, #16
 800e6e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7fe fb18 	bl	800cd28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e6f8:	e00e      	b.n	800e718 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7f6 faca 	bl	8004c94 <HAL_UART_RxCpltCallback>
        break;
 800e700:	e00a      	b.n	800e718 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e702:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e706:	2b00      	cmp	r3, #0
 800e708:	d006      	beq.n	800e718 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800e70a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e70e:	f003 0320 	and.w	r3, r3, #32
 800e712:	2b00      	cmp	r3, #0
 800e714:	f47f aeca 	bne.w	800e4ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e71e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e722:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e726:	2b00      	cmp	r3, #0
 800e728:	d049      	beq.n	800e7be <UART_RxISR_16BIT_FIFOEN+0x35a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e730:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e734:	429a      	cmp	r2, r3
 800e736:	d242      	bcs.n	800e7be <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3308      	adds	r3, #8
 800e73e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e742:	e853 3f00 	ldrex	r3, [r3]
 800e746:	623b      	str	r3, [r7, #32]
   return(result);
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e74e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3308      	adds	r3, #8
 800e758:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e75c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e3      	bne.n	800e738 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a16      	ldr	r2, [pc, #88]	@ (800e7cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800e774:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	e853 3f00 	ldrex	r3, [r3]
 800e782:	60fb      	str	r3, [r7, #12]
   return(result);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f043 0320 	orr.w	r3, r3, #32
 800e78a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e798:	61fb      	str	r3, [r7, #28]
 800e79a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79c:	69b9      	ldr	r1, [r7, #24]
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	e841 2300 	strex	r3, r2, [r1]
 800e7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1e4      	bne.n	800e776 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7ac:	e007      	b.n	800e7be <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	699a      	ldr	r2, [r3, #24]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f042 0208 	orr.w	r2, r2, #8
 800e7bc:	619a      	str	r2, [r3, #24]
}
 800e7be:	bf00      	nop
 800e7c0:	37b8      	adds	r7, #184	@ 0xb8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	40008000 	.word	0x40008000
 800e7cc:	0800df49 	.word	0x0800df49

0800e7d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d101      	bne.n	800e822 <HAL_UARTEx_DisableFifoMode+0x16>
 800e81e:	2302      	movs	r3, #2
 800e820:	e027      	b.n	800e872 <HAL_UARTEx_DisableFifoMode+0x66>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2224      	movs	r2, #36	@ 0x24
 800e82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f022 0201 	bic.w	r2, r2, #1
 800e848:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2220      	movs	r2, #32
 800e864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b084      	sub	sp, #16
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e892:	2302      	movs	r3, #2
 800e894:	e02d      	b.n	800e8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2224      	movs	r2, #36	@ 0x24
 800e8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f022 0201 	bic.w	r2, r2, #1
 800e8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	430a      	orrs	r2, r1
 800e8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f850 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2220      	movs	r2, #32
 800e8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d101      	bne.n	800e912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e90e:	2302      	movs	r3, #2
 800e910:	e02d      	b.n	800e96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2224      	movs	r2, #36	@ 0x24
 800e91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0201 	bic.w	r2, r2, #1
 800e938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	430a      	orrs	r2, r1
 800e94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f812 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2220      	movs	r2, #32
 800e960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
	...

0800e978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e984:	2b00      	cmp	r3, #0
 800e986:	d108      	bne.n	800e99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e998:	e031      	b.n	800e9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e99a:	2308      	movs	r3, #8
 800e99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e99e:	2308      	movs	r3, #8
 800e9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	0e5b      	lsrs	r3, r3, #25
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	f003 0307 	and.w	r3, r3, #7
 800e9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	0f5b      	lsrs	r3, r3, #29
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 0307 	and.w	r3, r3, #7
 800e9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	7b3a      	ldrb	r2, [r7, #12]
 800e9c6:	4911      	ldr	r1, [pc, #68]	@ (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9c8:	5c8a      	ldrb	r2, [r1, r2]
 800e9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9ce:	7b3a      	ldrb	r2, [r7, #12]
 800e9d0:	490f      	ldr	r1, [pc, #60]	@ (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	7b7a      	ldrb	r2, [r7, #13]
 800e9e4:	4909      	ldr	r1, [pc, #36]	@ (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9e6:	5c8a      	ldrb	r2, [r1, r2]
 800e9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9ec:	7b7a      	ldrb	r2, [r7, #13]
 800e9ee:	4908      	ldr	r1, [pc, #32]	@ (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	0801b350 	.word	0x0801b350
 800ea10:	0801b358 	.word	0x0801b358

0800ea14 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800ea18:	4907      	ldr	r1, [pc, #28]	@ (800ea38 <MX_FATFS_Init+0x24>)
 800ea1a:	4808      	ldr	r0, [pc, #32]	@ (800ea3c <MX_FATFS_Init+0x28>)
 800ea1c:	f002 fe24 	bl	8011668 <FATFS_LinkDriver>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d002      	beq.n	800ea2c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800ea26:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2a:	e003      	b.n	800ea34 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800ea2c:	4b04      	ldr	r3, [pc, #16]	@ (800ea40 <MX_FATFS_Init+0x2c>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800ea32:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	200017cc 	.word	0x200017cc
 800ea3c:	20000030 	.word	0x20000030
 800ea40:	200017d0 	.word	0x200017d0

0800ea44 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ea44:	b480      	push	{r7}
 800ea46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f6 fb55 	bl	8005110 <USER_SPI_initialize>
 800ea66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f6 fc33 	bl	80052e8 <USER_SPI_status>
 800ea82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60b9      	str	r1, [r7, #8]
 800ea94:	607a      	str	r2, [r7, #4]
 800ea96:	603b      	str	r3, [r7, #0]
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ea9c:	7bf8      	ldrb	r0, [r7, #15]
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	68b9      	ldr	r1, [r7, #8]
 800eaa4:	f7f6 fc36 	bl	8005314 <USER_SPI_read>
 800eaa8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b084      	sub	sp, #16
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
 800eabe:	4603      	mov	r3, r0
 800eac0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800eac2:	7bf8      	ldrb	r0, [r7, #15]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	68b9      	ldr	r1, [r7, #8]
 800eaca:	f7f6 fc89 	bl	80053e0 <USER_SPI_write>
 800eace:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	603a      	str	r2, [r7, #0]
 800eae2:	71fb      	strb	r3, [r7, #7]
 800eae4:	460b      	mov	r3, r1
 800eae6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800eae8:	79b9      	ldrb	r1, [r7, #6]
 800eaea:	79fb      	ldrb	r3, [r7, #7]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7f6 fcf2 	bl	80054d8 <USER_SPI_ioctl>
 800eaf4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
	...

0800eb00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800eb0a:	79fb      	ldrb	r3, [r7, #7]
 800eb0c:	4a08      	ldr	r2, [pc, #32]	@ (800eb30 <disk_status+0x30>)
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4413      	add	r3, r2
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	79fa      	ldrb	r2, [r7, #7]
 800eb18:	4905      	ldr	r1, [pc, #20]	@ (800eb30 <disk_status+0x30>)
 800eb1a:	440a      	add	r2, r1
 800eb1c:	7a12      	ldrb	r2, [r2, #8]
 800eb1e:	4610      	mov	r0, r2
 800eb20:	4798      	blx	r3
 800eb22:	4603      	mov	r3, r0
 800eb24:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200017fc 	.word	0x200017fc

0800eb34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eb42:	79fb      	ldrb	r3, [r7, #7]
 800eb44:	4a0d      	ldr	r2, [pc, #52]	@ (800eb7c <disk_initialize+0x48>)
 800eb46:	5cd3      	ldrb	r3, [r2, r3]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d111      	bne.n	800eb70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	4a0b      	ldr	r2, [pc, #44]	@ (800eb7c <disk_initialize+0x48>)
 800eb50:	2101      	movs	r1, #1
 800eb52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eb54:	79fb      	ldrb	r3, [r7, #7]
 800eb56:	4a09      	ldr	r2, [pc, #36]	@ (800eb7c <disk_initialize+0x48>)
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	79fa      	ldrb	r2, [r7, #7]
 800eb62:	4906      	ldr	r1, [pc, #24]	@ (800eb7c <disk_initialize+0x48>)
 800eb64:	440a      	add	r2, r1
 800eb66:	7a12      	ldrb	r2, [r2, #8]
 800eb68:	4610      	mov	r0, r2
 800eb6a:	4798      	blx	r3
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	200017fc 	.word	0x200017fc

0800eb80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eb80:	b590      	push	{r4, r7, lr}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60b9      	str	r1, [r7, #8]
 800eb88:	607a      	str	r2, [r7, #4]
 800eb8a:	603b      	str	r3, [r7, #0]
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
 800eb92:	4a0a      	ldr	r2, [pc, #40]	@ (800ebbc <disk_read+0x3c>)
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4413      	add	r3, r2
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	689c      	ldr	r4, [r3, #8]
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	4a07      	ldr	r2, [pc, #28]	@ (800ebbc <disk_read+0x3c>)
 800eba0:	4413      	add	r3, r2
 800eba2:	7a18      	ldrb	r0, [r3, #8]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	68b9      	ldr	r1, [r7, #8]
 800ebaa:	47a0      	blx	r4
 800ebac:	4603      	mov	r3, r0
 800ebae:	75fb      	strb	r3, [r7, #23]
  return res;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	371c      	adds	r7, #28
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd90      	pop	{r4, r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	200017fc 	.word	0x200017fc

0800ebc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ebc0:	b590      	push	{r4, r7, lr}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60b9      	str	r1, [r7, #8]
 800ebc8:	607a      	str	r2, [r7, #4]
 800ebca:	603b      	str	r3, [r7, #0]
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
 800ebd2:	4a0a      	ldr	r2, [pc, #40]	@ (800ebfc <disk_write+0x3c>)
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	68dc      	ldr	r4, [r3, #12]
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	4a07      	ldr	r2, [pc, #28]	@ (800ebfc <disk_write+0x3c>)
 800ebe0:	4413      	add	r3, r2
 800ebe2:	7a18      	ldrb	r0, [r3, #8]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	68b9      	ldr	r1, [r7, #8]
 800ebea:	47a0      	blx	r4
 800ebec:	4603      	mov	r3, r0
 800ebee:	75fb      	strb	r3, [r7, #23]
  return res;
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd90      	pop	{r4, r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	200017fc 	.word	0x200017fc

0800ec00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	603a      	str	r2, [r7, #0]
 800ec0a:	71fb      	strb	r3, [r7, #7]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	4a09      	ldr	r2, [pc, #36]	@ (800ec38 <disk_ioctl+0x38>)
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	79fa      	ldrb	r2, [r7, #7]
 800ec1e:	4906      	ldr	r1, [pc, #24]	@ (800ec38 <disk_ioctl+0x38>)
 800ec20:	440a      	add	r2, r1
 800ec22:	7a10      	ldrb	r0, [r2, #8]
 800ec24:	79b9      	ldrb	r1, [r7, #6]
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	4798      	blx	r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	200017fc 	.word	0x200017fc

0800ec3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3301      	adds	r3, #1
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ec4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec50:	021b      	lsls	r3, r3, #8
 800ec52:	b21a      	sxth	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	b21b      	sxth	r3, r3
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	b21b      	sxth	r3, r3
 800ec5e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ec60:	89fb      	ldrh	r3, [r7, #14]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr

0800ec6e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ec6e:	b480      	push	{r7}
 800ec70:	b085      	sub	sp, #20
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	3303      	adds	r3, #3
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	3202      	adds	r2, #2
 800ec86:	7812      	ldrb	r2, [r2, #0]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	021b      	lsls	r3, r3, #8
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	3201      	adds	r2, #1
 800ec94:	7812      	ldrb	r2, [r2, #0]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	021b      	lsls	r3, r3, #8
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	7812      	ldrb	r2, [r2, #0]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	60fb      	str	r3, [r7, #12]
	return rv;
 800eca6:	68fb      	ldr	r3, [r7, #12]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	607a      	str	r2, [r7, #4]
 800ecc6:	887a      	ldrh	r2, [r7, #2]
 800ecc8:	b2d2      	uxtb	r2, r2
 800ecca:	701a      	strb	r2, [r3, #0]
 800eccc:	887b      	ldrh	r3, [r7, #2]
 800ecce:	0a1b      	lsrs	r3, r3, #8
 800ecd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	1c5a      	adds	r2, r3, #1
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	887a      	ldrh	r2, [r7, #2]
 800ecda:	b2d2      	uxtb	r2, r2
 800ecdc:	701a      	strb	r2, [r3, #0]
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ecea:	b480      	push	{r7}
 800ecec:	b083      	sub	sp, #12
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	607a      	str	r2, [r7, #4]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	b2d2      	uxtb	r2, r2
 800ecfe:	701a      	strb	r2, [r3, #0]
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	0a1b      	lsrs	r3, r3, #8
 800ed04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	607a      	str	r2, [r7, #4]
 800ed0c:	683a      	ldr	r2, [r7, #0]
 800ed0e:	b2d2      	uxtb	r2, r2
 800ed10:	701a      	strb	r2, [r3, #0]
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	0a1b      	lsrs	r3, r3, #8
 800ed16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	607a      	str	r2, [r7, #4]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	b2d2      	uxtb	r2, r2
 800ed22:	701a      	strb	r2, [r3, #0]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	0a1b      	lsrs	r3, r3, #8
 800ed28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	1c5a      	adds	r2, r3, #1
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	b2d2      	uxtb	r2, r2
 800ed34:	701a      	strb	r2, [r3, #0]
}
 800ed36:	bf00      	nop
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ed42:	b480      	push	{r7}
 800ed44:	b087      	sub	sp, #28
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	60f8      	str	r0, [r7, #12]
 800ed4a:	60b9      	str	r1, [r7, #8]
 800ed4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00d      	beq.n	800ed78 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ed5c:	693a      	ldr	r2, [r7, #16]
 800ed5e:	1c53      	adds	r3, r2, #1
 800ed60:	613b      	str	r3, [r7, #16]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	1c59      	adds	r1, r3, #1
 800ed66:	6179      	str	r1, [r7, #20]
 800ed68:	7812      	ldrb	r2, [r2, #0]
 800ed6a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	607b      	str	r3, [r7, #4]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1f1      	bne.n	800ed5c <mem_cpy+0x1a>
	}
}
 800ed78:	bf00      	nop
 800ed7a:	371c      	adds	r7, #28
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ed84:	b480      	push	{r7}
 800ed86:	b087      	sub	sp, #28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	617a      	str	r2, [r7, #20]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	b2d2      	uxtb	r2, r2
 800ed9e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3b01      	subs	r3, #1
 800eda4:	607b      	str	r3, [r7, #4]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1f3      	bne.n	800ed94 <mem_set+0x10>
}
 800edac:	bf00      	nop
 800edae:	bf00      	nop
 800edb0:	371c      	adds	r7, #28
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800edba:	b480      	push	{r7}
 800edbc:	b089      	sub	sp, #36	@ 0x24
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	60f8      	str	r0, [r7, #12]
 800edc2:	60b9      	str	r1, [r7, #8]
 800edc4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	61fb      	str	r3, [r7, #28]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	1c5a      	adds	r2, r3, #1
 800edd6:	61fa      	str	r2, [r7, #28]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	4619      	mov	r1, r3
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	1c5a      	adds	r2, r3, #1
 800ede0:	61ba      	str	r2, [r7, #24]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	1acb      	subs	r3, r1, r3
 800ede6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3b01      	subs	r3, #1
 800edec:	607b      	str	r3, [r7, #4]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d002      	beq.n	800edfa <mem_cmp+0x40>
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d0eb      	beq.n	800edd2 <mem_cmp+0x18>

	return r;
 800edfa:	697b      	ldr	r3, [r7, #20]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3724      	adds	r7, #36	@ 0x24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ee12:	e002      	b.n	800ee1a <chk_chr+0x12>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3301      	adds	r3, #1
 800ee18:	607b      	str	r3, [r7, #4]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d005      	beq.n	800ee2e <chk_chr+0x26>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d1f2      	bne.n	800ee14 <chk_chr+0xc>
	return *str;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	781b      	ldrb	r3, [r3, #0]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d009      	beq.n	800ee60 <lock_fs+0x22>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f002 fc42 	bl	80116da <ff_req_grant>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <lock_fs+0x22>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <lock_fs+0x24>
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	460b      	mov	r3, r1
 800ee74:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00d      	beq.n	800ee98 <unlock_fs+0x2e>
 800ee7c:	78fb      	ldrb	r3, [r7, #3]
 800ee7e:	2b0c      	cmp	r3, #12
 800ee80:	d00a      	beq.n	800ee98 <unlock_fs+0x2e>
 800ee82:	78fb      	ldrb	r3, [r7, #3]
 800ee84:	2b0b      	cmp	r3, #11
 800ee86:	d007      	beq.n	800ee98 <unlock_fs+0x2e>
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	2b0f      	cmp	r3, #15
 800ee8c:	d004      	beq.n	800ee98 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f002 fc36 	bl	8011704 <ff_rel_grant>
	}
}
 800ee98:	bf00      	nop
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60bb      	str	r3, [r7, #8]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	60fb      	str	r3, [r7, #12]
 800eeb2:	e029      	b.n	800ef08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eeb4:	4a27      	ldr	r2, [pc, #156]	@ (800ef54 <chk_lock+0xb4>)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	011b      	lsls	r3, r3, #4
 800eeba:	4413      	add	r3, r2
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d01d      	beq.n	800eefe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eec2:	4a24      	ldr	r2, [pc, #144]	@ (800ef54 <chk_lock+0xb4>)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	011b      	lsls	r3, r3, #4
 800eec8:	4413      	add	r3, r2
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d116      	bne.n	800ef02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eed4:	4a1f      	ldr	r2, [pc, #124]	@ (800ef54 <chk_lock+0xb4>)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	011b      	lsls	r3, r3, #4
 800eeda:	4413      	add	r3, r2
 800eedc:	3304      	adds	r3, #4
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d10c      	bne.n	800ef02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eee8:	4a1a      	ldr	r2, [pc, #104]	@ (800ef54 <chk_lock+0xb4>)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	011b      	lsls	r3, r3, #4
 800eeee:	4413      	add	r3, r2
 800eef0:	3308      	adds	r3, #8
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d102      	bne.n	800ef02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eefc:	e007      	b.n	800ef0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eefe:	2301      	movs	r3, #1
 800ef00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3301      	adds	r3, #1
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d9d2      	bls.n	800eeb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d109      	bne.n	800ef28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d102      	bne.n	800ef20 <chk_lock+0x80>
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d101      	bne.n	800ef24 <chk_lock+0x84>
 800ef20:	2300      	movs	r3, #0
 800ef22:	e010      	b.n	800ef46 <chk_lock+0xa6>
 800ef24:	2312      	movs	r3, #18
 800ef26:	e00e      	b.n	800ef46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d108      	bne.n	800ef40 <chk_lock+0xa0>
 800ef2e:	4a09      	ldr	r2, [pc, #36]	@ (800ef54 <chk_lock+0xb4>)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	4413      	add	r3, r2
 800ef36:	330c      	adds	r3, #12
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef3e:	d101      	bne.n	800ef44 <chk_lock+0xa4>
 800ef40:	2310      	movs	r3, #16
 800ef42:	e000      	b.n	800ef46 <chk_lock+0xa6>
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	200017dc 	.word	0x200017dc

0800ef58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	607b      	str	r3, [r7, #4]
 800ef62:	e002      	b.n	800ef6a <enq_lock+0x12>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3301      	adds	r3, #1
 800ef68:	607b      	str	r3, [r7, #4]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d806      	bhi.n	800ef7e <enq_lock+0x26>
 800ef70:	4a09      	ldr	r2, [pc, #36]	@ (800ef98 <enq_lock+0x40>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	4413      	add	r3, r2
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1f2      	bne.n	800ef64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	bf14      	ite	ne
 800ef84:	2301      	movne	r3, #1
 800ef86:	2300      	moveq	r3, #0
 800ef88:	b2db      	uxtb	r3, r3
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	200017dc 	.word	0x200017dc

0800ef9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800efa6:	2300      	movs	r3, #0
 800efa8:	60fb      	str	r3, [r7, #12]
 800efaa:	e01f      	b.n	800efec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800efac:	4a41      	ldr	r2, [pc, #260]	@ (800f0b4 <inc_lock+0x118>)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	011b      	lsls	r3, r3, #4
 800efb2:	4413      	add	r3, r2
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d113      	bne.n	800efe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800efbe:	4a3d      	ldr	r2, [pc, #244]	@ (800f0b4 <inc_lock+0x118>)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	011b      	lsls	r3, r3, #4
 800efc4:	4413      	add	r3, r2
 800efc6:	3304      	adds	r3, #4
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800efce:	429a      	cmp	r2, r3
 800efd0:	d109      	bne.n	800efe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800efd2:	4a38      	ldr	r2, [pc, #224]	@ (800f0b4 <inc_lock+0x118>)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	011b      	lsls	r3, r3, #4
 800efd8:	4413      	add	r3, r2
 800efda:	3308      	adds	r3, #8
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d006      	beq.n	800eff4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d9dc      	bls.n	800efac <inc_lock+0x10>
 800eff2:	e000      	b.n	800eff6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eff4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2b02      	cmp	r3, #2
 800effa:	d132      	bne.n	800f062 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800effc:	2300      	movs	r3, #0
 800effe:	60fb      	str	r3, [r7, #12]
 800f000:	e002      	b.n	800f008 <inc_lock+0x6c>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3301      	adds	r3, #1
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d806      	bhi.n	800f01c <inc_lock+0x80>
 800f00e:	4a29      	ldr	r2, [pc, #164]	@ (800f0b4 <inc_lock+0x118>)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	011b      	lsls	r3, r3, #4
 800f014:	4413      	add	r3, r2
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f2      	bne.n	800f002 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b02      	cmp	r3, #2
 800f020:	d101      	bne.n	800f026 <inc_lock+0x8a>
 800f022:	2300      	movs	r3, #0
 800f024:	e040      	b.n	800f0a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	4922      	ldr	r1, [pc, #136]	@ (800f0b4 <inc_lock+0x118>)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	011b      	lsls	r3, r3, #4
 800f030:	440b      	add	r3, r1
 800f032:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	491e      	ldr	r1, [pc, #120]	@ (800f0b4 <inc_lock+0x118>)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	440b      	add	r3, r1
 800f040:	3304      	adds	r3, #4
 800f042:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	695a      	ldr	r2, [r3, #20]
 800f048:	491a      	ldr	r1, [pc, #104]	@ (800f0b4 <inc_lock+0x118>)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	011b      	lsls	r3, r3, #4
 800f04e:	440b      	add	r3, r1
 800f050:	3308      	adds	r3, #8
 800f052:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f054:	4a17      	ldr	r2, [pc, #92]	@ (800f0b4 <inc_lock+0x118>)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	011b      	lsls	r3, r3, #4
 800f05a:	4413      	add	r3, r2
 800f05c:	330c      	adds	r3, #12
 800f05e:	2200      	movs	r2, #0
 800f060:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d009      	beq.n	800f07c <inc_lock+0xe0>
 800f068:	4a12      	ldr	r2, [pc, #72]	@ (800f0b4 <inc_lock+0x118>)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	011b      	lsls	r3, r3, #4
 800f06e:	4413      	add	r3, r2
 800f070:	330c      	adds	r3, #12
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <inc_lock+0xe0>
 800f078:	2300      	movs	r3, #0
 800f07a:	e015      	b.n	800f0a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d108      	bne.n	800f094 <inc_lock+0xf8>
 800f082:	4a0c      	ldr	r2, [pc, #48]	@ (800f0b4 <inc_lock+0x118>)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	011b      	lsls	r3, r3, #4
 800f088:	4413      	add	r3, r2
 800f08a:	330c      	adds	r3, #12
 800f08c:	881b      	ldrh	r3, [r3, #0]
 800f08e:	3301      	adds	r3, #1
 800f090:	b29a      	uxth	r2, r3
 800f092:	e001      	b.n	800f098 <inc_lock+0xfc>
 800f094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f098:	4906      	ldr	r1, [pc, #24]	@ (800f0b4 <inc_lock+0x118>)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	011b      	lsls	r3, r3, #4
 800f09e:	440b      	add	r3, r1
 800f0a0:	330c      	adds	r3, #12
 800f0a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3301      	adds	r3, #1
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	200017dc 	.word	0x200017dc

0800f0b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	607b      	str	r3, [r7, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d825      	bhi.n	800f118 <dec_lock+0x60>
		n = Files[i].ctr;
 800f0cc:	4a17      	ldr	r2, [pc, #92]	@ (800f12c <dec_lock+0x74>)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	011b      	lsls	r3, r3, #4
 800f0d2:	4413      	add	r3, r2
 800f0d4:	330c      	adds	r3, #12
 800f0d6:	881b      	ldrh	r3, [r3, #0]
 800f0d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f0da:	89fb      	ldrh	r3, [r7, #14]
 800f0dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0e0:	d101      	bne.n	800f0e6 <dec_lock+0x2e>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f0e6:	89fb      	ldrh	r3, [r7, #14]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <dec_lock+0x3a>
 800f0ec:	89fb      	ldrh	r3, [r7, #14]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f0f2:	4a0e      	ldr	r2, [pc, #56]	@ (800f12c <dec_lock+0x74>)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	4413      	add	r3, r2
 800f0fa:	330c      	adds	r3, #12
 800f0fc:	89fa      	ldrh	r2, [r7, #14]
 800f0fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f100:	89fb      	ldrh	r3, [r7, #14]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <dec_lock+0x5a>
 800f106:	4a09      	ldr	r2, [pc, #36]	@ (800f12c <dec_lock+0x74>)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	4413      	add	r3, r2
 800f10e:	2200      	movs	r2, #0
 800f110:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	737b      	strb	r3, [r7, #13]
 800f116:	e001      	b.n	800f11c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f118:	2302      	movs	r3, #2
 800f11a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f11c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	200017dc 	.word	0x200017dc

0800f130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f138:	2300      	movs	r3, #0
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e010      	b.n	800f160 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f13e:	4a0d      	ldr	r2, [pc, #52]	@ (800f174 <clear_lock+0x44>)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	4413      	add	r3, r2
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d105      	bne.n	800f15a <clear_lock+0x2a>
 800f14e:	4a09      	ldr	r2, [pc, #36]	@ (800f174 <clear_lock+0x44>)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	011b      	lsls	r3, r3, #4
 800f154:	4413      	add	r3, r2
 800f156:	2200      	movs	r2, #0
 800f158:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3301      	adds	r3, #1
 800f15e:	60fb      	str	r3, [r7, #12]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d9eb      	bls.n	800f13e <clear_lock+0xe>
	}
}
 800f166:	bf00      	nop
 800f168:	bf00      	nop
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr
 800f174:	200017dc 	.word	0x200017dc

0800f178 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	78db      	ldrb	r3, [r3, #3]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d034      	beq.n	800f1f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	7858      	ldrb	r0, [r3, #1]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f19c:	2301      	movs	r3, #1
 800f19e:	697a      	ldr	r2, [r7, #20]
 800f1a0:	f7ff fd0e 	bl	800ebc0 <disk_write>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	73fb      	strb	r3, [r7, #15]
 800f1ae:	e022      	b.n	800f1f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	1ad2      	subs	r2, r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d217      	bcs.n	800f1f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	789b      	ldrb	r3, [r3, #2]
 800f1ca:	613b      	str	r3, [r7, #16]
 800f1cc:	e010      	b.n	800f1f0 <sync_window+0x78>
					wsect += fs->fsize;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	69db      	ldr	r3, [r3, #28]
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	7858      	ldrb	r0, [r3, #1]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	f7ff fceb 	bl	800ebc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	613b      	str	r3, [r7, #16]
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d8eb      	bhi.n	800f1ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	429a      	cmp	r2, r3
 800f216:	d01b      	beq.n	800f250 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff ffad 	bl	800f178 <sync_window>
 800f21e:	4603      	mov	r3, r0
 800f220:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d113      	bne.n	800f250 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	7858      	ldrb	r0, [r3, #1]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f232:	2301      	movs	r3, #1
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	f7ff fca3 	bl	800eb80 <disk_read>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d004      	beq.n	800f24a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f240:	f04f 33ff 	mov.w	r3, #4294967295
 800f244:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f246:	2301      	movs	r3, #1
 800f248:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f250:	7bfb      	ldrb	r3, [r7, #15]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
	...

0800f25c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff ff87 	bl	800f178 <sync_window>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d158      	bne.n	800f326 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	2b03      	cmp	r3, #3
 800f27a:	d148      	bne.n	800f30e <sync_fs+0xb2>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	791b      	ldrb	r3, [r3, #4]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d144      	bne.n	800f30e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3334      	adds	r3, #52	@ 0x34
 800f288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff fd78 	bl	800ed84 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3334      	adds	r3, #52	@ 0x34
 800f298:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f29c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7ff fd07 	bl	800ecb4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3334      	adds	r3, #52	@ 0x34
 800f2aa:	4921      	ldr	r1, [pc, #132]	@ (800f330 <sync_fs+0xd4>)
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff fd1c 	bl	800ecea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	3334      	adds	r3, #52	@ 0x34
 800f2b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f2ba:	491e      	ldr	r1, [pc, #120]	@ (800f334 <sync_fs+0xd8>)
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff fd14 	bl	800ecea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3334      	adds	r3, #52	@ 0x34
 800f2c6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	695b      	ldr	r3, [r3, #20]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	4610      	mov	r0, r2
 800f2d2:	f7ff fd0a 	bl	800ecea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	3334      	adds	r3, #52	@ 0x34
 800f2da:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	f7ff fd00 	bl	800ecea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	1c5a      	adds	r2, r3, #1
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7858      	ldrb	r0, [r3, #1]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f302:	2301      	movs	r3, #1
 800f304:	f7ff fc5c 	bl	800ebc0 <disk_write>
			fs->fsi_flag = 0;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	785b      	ldrb	r3, [r3, #1]
 800f312:	2200      	movs	r2, #0
 800f314:	2100      	movs	r1, #0
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fc72 	bl	800ec00 <disk_ioctl>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <sync_fs+0xca>
 800f322:	2301      	movs	r3, #1
 800f324:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f326:	7bfb      	ldrb	r3, [r7, #15]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	41615252 	.word	0x41615252
 800f334:	61417272 	.word	0x61417272

0800f338 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	3b02      	subs	r3, #2
 800f346:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	3b02      	subs	r3, #2
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	429a      	cmp	r2, r3
 800f352:	d301      	bcc.n	800f358 <clust2sect+0x20>
 800f354:	2300      	movs	r3, #0
 800f356:	e008      	b.n	800f36a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	895b      	ldrh	r3, [r3, #10]
 800f35c:	461a      	mov	r2, r3
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	fb03 f202 	mul.w	r2, r3, r2
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f368:	4413      	add	r3, r2
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b086      	sub	sp, #24
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d904      	bls.n	800f396 <get_fat+0x20>
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	699b      	ldr	r3, [r3, #24]
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	429a      	cmp	r2, r3
 800f394:	d302      	bcc.n	800f39c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f396:	2301      	movs	r3, #1
 800f398:	617b      	str	r3, [r7, #20]
 800f39a:	e08e      	b.n	800f4ba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f39c:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d061      	beq.n	800f46e <get_fat+0xf8>
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	dc7b      	bgt.n	800f4a6 <get_fat+0x130>
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d002      	beq.n	800f3b8 <get_fat+0x42>
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d041      	beq.n	800f43a <get_fat+0xc4>
 800f3b6:	e076      	b.n	800f4a6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	085b      	lsrs	r3, r3, #1
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	0a5b      	lsrs	r3, r3, #9
 800f3ce:	4413      	add	r3, r2
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6938      	ldr	r0, [r7, #16]
 800f3d4:	f7ff ff14 	bl	800f200 <move_window>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d166      	bne.n	800f4ac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	1c5a      	adds	r2, r3, #1
 800f3e2:	60fa      	str	r2, [r7, #12]
 800f3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	0a5b      	lsrs	r3, r3, #9
 800f3fa:	4413      	add	r3, r2
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6938      	ldr	r0, [r7, #16]
 800f400:	f7ff fefe 	bl	800f200 <move_window>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d152      	bne.n	800f4b0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f410:	693a      	ldr	r2, [r7, #16]
 800f412:	4413      	add	r3, r2
 800f414:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f418:	021b      	lsls	r3, r3, #8
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	f003 0301 	and.w	r3, r3, #1
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <get_fat+0xba>
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	091b      	lsrs	r3, r3, #4
 800f42e:	e002      	b.n	800f436 <get_fat+0xc0>
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f436:	617b      	str	r3, [r7, #20]
			break;
 800f438:	e03f      	b.n	800f4ba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	0a1b      	lsrs	r3, r3, #8
 800f442:	4413      	add	r3, r2
 800f444:	4619      	mov	r1, r3
 800f446:	6938      	ldr	r0, [r7, #16]
 800f448:	f7ff feda 	bl	800f200 <move_window>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d130      	bne.n	800f4b4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f460:	4413      	add	r3, r2
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff fbea 	bl	800ec3c <ld_word>
 800f468:	4603      	mov	r3, r0
 800f46a:	617b      	str	r3, [r7, #20]
			break;
 800f46c:	e025      	b.n	800f4ba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	09db      	lsrs	r3, r3, #7
 800f476:	4413      	add	r3, r2
 800f478:	4619      	mov	r1, r3
 800f47a:	6938      	ldr	r0, [r7, #16]
 800f47c:	f7ff fec0 	bl	800f200 <move_window>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d118      	bne.n	800f4b8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f494:	4413      	add	r3, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff fbe9 	bl	800ec6e <ld_dword>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f4a2:	617b      	str	r3, [r7, #20]
			break;
 800f4a4:	e009      	b.n	800f4ba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
 800f4aa:	e006      	b.n	800f4ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f4ac:	bf00      	nop
 800f4ae:	e004      	b.n	800f4ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f4b0:	bf00      	nop
 800f4b2:	e002      	b.n	800f4ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f4b4:	bf00      	nop
 800f4b6:	e000      	b.n	800f4ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f4b8:	bf00      	nop
		}
	}

	return val;
 800f4ba:	697b      	ldr	r3, [r7, #20]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3718      	adds	r7, #24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f4c4:	b590      	push	{r4, r7, lr}
 800f4c6:	b089      	sub	sp, #36	@ 0x24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	f240 80d9 	bls.w	800f68e <put_fat+0x1ca>
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	f080 80d3 	bcs.w	800f68e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2b03      	cmp	r3, #3
 800f4ee:	f000 8096 	beq.w	800f61e <put_fat+0x15a>
 800f4f2:	2b03      	cmp	r3, #3
 800f4f4:	f300 80cb 	bgt.w	800f68e <put_fat+0x1ca>
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d002      	beq.n	800f502 <put_fat+0x3e>
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d06e      	beq.n	800f5de <put_fat+0x11a>
 800f500:	e0c5      	b.n	800f68e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	61bb      	str	r3, [r7, #24]
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	085b      	lsrs	r3, r3, #1
 800f50a:	69ba      	ldr	r2, [r7, #24]
 800f50c:	4413      	add	r3, r2
 800f50e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	0a5b      	lsrs	r3, r3, #9
 800f518:	4413      	add	r3, r2
 800f51a:	4619      	mov	r1, r3
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f7ff fe6f 	bl	800f200 <move_window>
 800f522:	4603      	mov	r3, r0
 800f524:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f526:	7ffb      	ldrb	r3, [r7, #31]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f040 80a9 	bne.w	800f680 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	1c59      	adds	r1, r3, #1
 800f538:	61b9      	str	r1, [r7, #24]
 800f53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f53e:	4413      	add	r3, r2
 800f540:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00d      	beq.n	800f568 <put_fat+0xa4>
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	b25b      	sxtb	r3, r3
 800f552:	f003 030f 	and.w	r3, r3, #15
 800f556:	b25a      	sxtb	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	b25b      	sxtb	r3, r3
 800f55c:	011b      	lsls	r3, r3, #4
 800f55e:	b25b      	sxtb	r3, r3
 800f560:	4313      	orrs	r3, r2
 800f562:	b25b      	sxtb	r3, r3
 800f564:	b2db      	uxtb	r3, r3
 800f566:	e001      	b.n	800f56c <put_fat+0xa8>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	0a5b      	lsrs	r3, r3, #9
 800f57e:	4413      	add	r3, r2
 800f580:	4619      	mov	r1, r3
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7ff fe3c 	bl	800f200 <move_window>
 800f588:	4603      	mov	r3, r0
 800f58a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f58c:	7ffb      	ldrb	r3, [r7, #31]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d178      	bne.n	800f684 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f59e:	4413      	add	r3, r2
 800f5a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <put_fat+0xf0>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	091b      	lsrs	r3, r3, #4
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	e00e      	b.n	800f5d2 <put_fat+0x10e>
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	b25b      	sxtb	r3, r3
 800f5ba:	f023 030f 	bic.w	r3, r3, #15
 800f5be:	b25a      	sxtb	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	0a1b      	lsrs	r3, r3, #8
 800f5c4:	b25b      	sxtb	r3, r3
 800f5c6:	f003 030f 	and.w	r3, r3, #15
 800f5ca:	b25b      	sxtb	r3, r3
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	b25b      	sxtb	r3, r3
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	70da      	strb	r2, [r3, #3]
			break;
 800f5dc:	e057      	b.n	800f68e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	0a1b      	lsrs	r3, r3, #8
 800f5e6:	4413      	add	r3, r2
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f7ff fe08 	bl	800f200 <move_window>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5f4:	7ffb      	ldrb	r3, [r7, #31]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d146      	bne.n	800f688 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	005b      	lsls	r3, r3, #1
 800f604:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f608:	4413      	add	r3, r2
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	b292      	uxth	r2, r2
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f7ff fb4f 	bl	800ecb4 <st_word>
			fs->wflag = 1;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2201      	movs	r2, #1
 800f61a:	70da      	strb	r2, [r3, #3]
			break;
 800f61c:	e037      	b.n	800f68e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	09db      	lsrs	r3, r3, #7
 800f626:	4413      	add	r3, r2
 800f628:	4619      	mov	r1, r3
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f7ff fde8 	bl	800f200 <move_window>
 800f630:	4603      	mov	r3, r0
 800f632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f634:	7ffb      	ldrb	r3, [r7, #31]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d128      	bne.n	800f68c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f64e:	4413      	add	r3, r2
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fb0c 	bl	800ec6e <ld_dword>
 800f656:	4603      	mov	r3, r0
 800f658:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f65c:	4323      	orrs	r3, r4
 800f65e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f66e:	4413      	add	r3, r2
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	f7ff fb39 	bl	800ecea <st_dword>
			fs->wflag = 1;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2201      	movs	r2, #1
 800f67c:	70da      	strb	r2, [r3, #3]
			break;
 800f67e:	e006      	b.n	800f68e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f680:	bf00      	nop
 800f682:	e004      	b.n	800f68e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f684:	bf00      	nop
 800f686:	e002      	b.n	800f68e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f688:	bf00      	nop
 800f68a:	e000      	b.n	800f68e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f68c:	bf00      	nop
		}
	}
	return res;
 800f68e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3724      	adds	r7, #36	@ 0x24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd90      	pop	{r4, r7, pc}

0800f698 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d904      	bls.n	800f6be <remove_chain+0x26>
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d301      	bcc.n	800f6c2 <remove_chain+0x2a>
 800f6be:	2302      	movs	r3, #2
 800f6c0:	e04b      	b.n	800f75a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00c      	beq.n	800f6e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6cc:	6879      	ldr	r1, [r7, #4]
 800f6ce:	69b8      	ldr	r0, [r7, #24]
 800f6d0:	f7ff fef8 	bl	800f4c4 <put_fat>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f6d8:	7ffb      	ldrb	r3, [r7, #31]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <remove_chain+0x4a>
 800f6de:	7ffb      	ldrb	r3, [r7, #31]
 800f6e0:	e03b      	b.n	800f75a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f6e2:	68b9      	ldr	r1, [r7, #8]
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f7ff fe46 	bl	800f376 <get_fat>
 800f6ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d031      	beq.n	800f756 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d101      	bne.n	800f6fc <remove_chain+0x64>
 800f6f8:	2302      	movs	r3, #2
 800f6fa:	e02e      	b.n	800f75a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f702:	d101      	bne.n	800f708 <remove_chain+0x70>
 800f704:	2301      	movs	r3, #1
 800f706:	e028      	b.n	800f75a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f708:	2200      	movs	r2, #0
 800f70a:	68b9      	ldr	r1, [r7, #8]
 800f70c:	69b8      	ldr	r0, [r7, #24]
 800f70e:	f7ff fed9 	bl	800f4c4 <put_fat>
 800f712:	4603      	mov	r3, r0
 800f714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f716:	7ffb      	ldrb	r3, [r7, #31]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <remove_chain+0x88>
 800f71c:	7ffb      	ldrb	r3, [r7, #31]
 800f71e:	e01c      	b.n	800f75a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	695a      	ldr	r2, [r3, #20]
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	3b02      	subs	r3, #2
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d20b      	bcs.n	800f746 <remove_chain+0xae>
			fs->free_clst++;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	791b      	ldrb	r3, [r3, #4]
 800f73c:	f043 0301 	orr.w	r3, r3, #1
 800f740:	b2da      	uxtb	r2, r3
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	429a      	cmp	r2, r3
 800f752:	d3c6      	bcc.n	800f6e2 <remove_chain+0x4a>
 800f754:	e000      	b.n	800f758 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f756:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3720      	adds	r7, #32
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b088      	sub	sp, #32
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
 800f76a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10d      	bne.n	800f794 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d004      	beq.n	800f78e <create_chain+0x2c>
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	69ba      	ldr	r2, [r7, #24]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d31b      	bcc.n	800f7c6 <create_chain+0x64>
 800f78e:	2301      	movs	r3, #1
 800f790:	61bb      	str	r3, [r7, #24]
 800f792:	e018      	b.n	800f7c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fded 	bl	800f376 <get_fat>
 800f79c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d801      	bhi.n	800f7a8 <create_chain+0x46>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e070      	b.n	800f88a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ae:	d101      	bne.n	800f7b4 <create_chain+0x52>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	e06a      	b.n	800f88a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	699b      	ldr	r3, [r3, #24]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d201      	bcs.n	800f7c2 <create_chain+0x60>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	e063      	b.n	800f88a <create_chain+0x128>
		scl = clst;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	699b      	ldr	r3, [r3, #24]
 800f7d4:	69fa      	ldr	r2, [r7, #28]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d307      	bcc.n	800f7ea <create_chain+0x88>
				ncl = 2;
 800f7da:	2302      	movs	r3, #2
 800f7dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d901      	bls.n	800f7ea <create_chain+0x88>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e04f      	b.n	800f88a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f7ea:	69f9      	ldr	r1, [r7, #28]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff fdc2 	bl	800f376 <get_fat>
 800f7f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00e      	beq.n	800f818 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d003      	beq.n	800f808 <create_chain+0xa6>
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f806:	d101      	bne.n	800f80c <create_chain+0xaa>
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	e03e      	b.n	800f88a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f80c:	69fa      	ldr	r2, [r7, #28]
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	429a      	cmp	r2, r3
 800f812:	d1da      	bne.n	800f7ca <create_chain+0x68>
 800f814:	2300      	movs	r3, #0
 800f816:	e038      	b.n	800f88a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f818:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f81a:	f04f 32ff 	mov.w	r2, #4294967295
 800f81e:	69f9      	ldr	r1, [r7, #28]
 800f820:	6938      	ldr	r0, [r7, #16]
 800f822:	f7ff fe4f 	bl	800f4c4 <put_fat>
 800f826:	4603      	mov	r3, r0
 800f828:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f82a:	7dfb      	ldrb	r3, [r7, #23]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d109      	bne.n	800f844 <create_chain+0xe2>
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f836:	69fa      	ldr	r2, [r7, #28]
 800f838:	6839      	ldr	r1, [r7, #0]
 800f83a:	6938      	ldr	r0, [r7, #16]
 800f83c:	f7ff fe42 	bl	800f4c4 <put_fat>
 800f840:	4603      	mov	r3, r0
 800f842:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f844:	7dfb      	ldrb	r3, [r7, #23]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d116      	bne.n	800f878 <create_chain+0x116>
		fs->last_clst = ncl;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	69fa      	ldr	r2, [r7, #28]
 800f84e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	695a      	ldr	r2, [r3, #20]
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	3b02      	subs	r3, #2
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d804      	bhi.n	800f868 <create_chain+0x106>
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	1e5a      	subs	r2, r3, #1
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	791b      	ldrb	r3, [r3, #4]
 800f86c:	f043 0301 	orr.w	r3, r3, #1
 800f870:	b2da      	uxtb	r2, r3
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	711a      	strb	r2, [r3, #4]
 800f876:	e007      	b.n	800f888 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d102      	bne.n	800f884 <create_chain+0x122>
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	e000      	b.n	800f886 <create_chain+0x124>
 800f884:	2301      	movs	r3, #1
 800f886:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f888:	69fb      	ldr	r3, [r7, #28]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3720      	adds	r7, #32
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f892:	b480      	push	{r7}
 800f894:	b087      	sub	sp, #28
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a6:	3304      	adds	r3, #4
 800f8a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	0a5b      	lsrs	r3, r3, #9
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	8952      	ldrh	r2, [r2, #10]
 800f8b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	1d1a      	adds	r2, r3, #4
 800f8bc:	613a      	str	r2, [r7, #16]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <clmt_clust+0x3a>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e010      	b.n	800f8ee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d307      	bcc.n	800f8e4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f8d4:	697a      	ldr	r2, [r7, #20]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	617b      	str	r3, [r7, #20]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	3304      	adds	r3, #4
 800f8e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f8e2:	e7e9      	b.n	800f8b8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f8e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	4413      	add	r3, r2
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	371c      	adds	r7, #28
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b086      	sub	sp, #24
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
 800f902:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f910:	d204      	bcs.n	800f91c <dir_sdi+0x22>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	f003 031f 	and.w	r3, r3, #31
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f91c:	2302      	movs	r3, #2
 800f91e:	e063      	b.n	800f9e8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d106      	bne.n	800f940 <dir_sdi+0x46>
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b02      	cmp	r3, #2
 800f938:	d902      	bls.n	800f940 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10c      	bne.n	800f960 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	095b      	lsrs	r3, r3, #5
 800f94a:	693a      	ldr	r2, [r7, #16]
 800f94c:	8912      	ldrh	r2, [r2, #8]
 800f94e:	4293      	cmp	r3, r2
 800f950:	d301      	bcc.n	800f956 <dir_sdi+0x5c>
 800f952:	2302      	movs	r3, #2
 800f954:	e048      	b.n	800f9e8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	61da      	str	r2, [r3, #28]
 800f95e:	e029      	b.n	800f9b4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	895b      	ldrh	r3, [r3, #10]
 800f964:	025b      	lsls	r3, r3, #9
 800f966:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f968:	e019      	b.n	800f99e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6979      	ldr	r1, [r7, #20]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7ff fd01 	bl	800f376 <get_fat>
 800f974:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97c:	d101      	bne.n	800f982 <dir_sdi+0x88>
 800f97e:	2301      	movs	r3, #1
 800f980:	e032      	b.n	800f9e8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d904      	bls.n	800f992 <dir_sdi+0x98>
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	699b      	ldr	r3, [r3, #24]
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d301      	bcc.n	800f996 <dir_sdi+0x9c>
 800f992:	2302      	movs	r3, #2
 800f994:	e028      	b.n	800f9e8 <dir_sdi+0xee>
			ofs -= csz;
 800f996:	683a      	ldr	r2, [r7, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f99e:	683a      	ldr	r2, [r7, #0]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d2e1      	bcs.n	800f96a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f9a6:	6979      	ldr	r1, [r7, #20]
 800f9a8:	6938      	ldr	r0, [r7, #16]
 800f9aa:	f7ff fcc5 	bl	800f338 <clust2sect>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	697a      	ldr	r2, [r7, #20]
 800f9b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <dir_sdi+0xcc>
 800f9c2:	2302      	movs	r3, #2
 800f9c4:	e010      	b.n	800f9e8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	69da      	ldr	r2, [r3, #28]
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	0a5b      	lsrs	r3, r3, #9
 800f9ce:	441a      	add	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9e0:	441a      	add	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b086      	sub	sp, #24
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	3320      	adds	r3, #32
 800fa06:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	69db      	ldr	r3, [r3, #28]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d003      	beq.n	800fa18 <dir_next+0x28>
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa16:	d301      	bcc.n	800fa1c <dir_next+0x2c>
 800fa18:	2304      	movs	r3, #4
 800fa1a:	e0aa      	b.n	800fb72 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f040 8098 	bne.w	800fb58 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	1c5a      	adds	r2, r3, #1
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	699b      	ldr	r3, [r3, #24]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10b      	bne.n	800fa52 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	095b      	lsrs	r3, r3, #5
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	8912      	ldrh	r2, [r2, #8]
 800fa42:	4293      	cmp	r3, r2
 800fa44:	f0c0 8088 	bcc.w	800fb58 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	61da      	str	r2, [r3, #28]
 800fa4e:	2304      	movs	r3, #4
 800fa50:	e08f      	b.n	800fb72 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	0a5b      	lsrs	r3, r3, #9
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	8952      	ldrh	r2, [r2, #10]
 800fa5a:	3a01      	subs	r2, #1
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d17a      	bne.n	800fb58 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	f7ff fc83 	bl	800f376 <get_fat>
 800fa70:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d801      	bhi.n	800fa7c <dir_next+0x8c>
 800fa78:	2302      	movs	r3, #2
 800fa7a:	e07a      	b.n	800fb72 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa82:	d101      	bne.n	800fa88 <dir_next+0x98>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e074      	b.n	800fb72 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d358      	bcc.n	800fb44 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d104      	bne.n	800faa2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	61da      	str	r2, [r3, #28]
 800fa9e:	2304      	movs	r3, #4
 800faa0:	e067      	b.n	800fb72 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	4619      	mov	r1, r3
 800faaa:	4610      	mov	r0, r2
 800faac:	f7ff fe59 	bl	800f762 <create_chain>
 800fab0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <dir_next+0xcc>
 800fab8:	2307      	movs	r3, #7
 800faba:	e05a      	b.n	800fb72 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d101      	bne.n	800fac6 <dir_next+0xd6>
 800fac2:	2302      	movs	r3, #2
 800fac4:	e055      	b.n	800fb72 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800facc:	d101      	bne.n	800fad2 <dir_next+0xe2>
 800face:	2301      	movs	r3, #1
 800fad0:	e04f      	b.n	800fb72 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7ff fb50 	bl	800f178 <sync_window>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <dir_next+0xf2>
 800fade:	2301      	movs	r3, #1
 800fae0:	e047      	b.n	800fb72 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3334      	adds	r3, #52	@ 0x34
 800fae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faea:	2100      	movs	r1, #0
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff f949 	bl	800ed84 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800faf2:	2300      	movs	r3, #0
 800faf4:	613b      	str	r3, [r7, #16]
 800faf6:	6979      	ldr	r1, [r7, #20]
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f7ff fc1d 	bl	800f338 <clust2sect>
 800fafe:	4602      	mov	r2, r0
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb04:	e012      	b.n	800fb2c <dir_next+0x13c>
						fs->wflag = 1;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff fb33 	bl	800f178 <sync_window>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <dir_next+0x12c>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e02a      	b.n	800fb72 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	613b      	str	r3, [r7, #16]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	895b      	ldrh	r3, [r3, #10]
 800fb30:	461a      	mov	r2, r3
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d3e6      	bcc.n	800fb06 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	1ad2      	subs	r2, r2, r3
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fb4a:	6979      	ldr	r1, [r7, #20]
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff fbf3 	bl	800f338 <clust2sect>
 800fb52:	4602      	mov	r2, r0
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb6a:	441a      	add	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b086      	sub	sp, #24
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff feb4 	bl	800f8fa <dir_sdi>
 800fb92:	4603      	mov	r3, r0
 800fb94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d12b      	bne.n	800fbf4 <dir_alloc+0x7a>
		n = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	69db      	ldr	r3, [r3, #28]
 800fba4:	4619      	mov	r1, r3
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7ff fb2a 	bl	800f200 <move_window>
 800fbac:	4603      	mov	r3, r0
 800fbae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fbb0:	7dfb      	ldrb	r3, [r7, #23]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d11d      	bne.n	800fbf2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	2be5      	cmp	r3, #229	@ 0xe5
 800fbbe:	d004      	beq.n	800fbca <dir_alloc+0x50>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d107      	bne.n	800fbda <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	613b      	str	r3, [r7, #16]
 800fbd0:	693a      	ldr	r2, [r7, #16]
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d102      	bne.n	800fbde <dir_alloc+0x64>
 800fbd8:	e00c      	b.n	800fbf4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fbda:	2300      	movs	r3, #0
 800fbdc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fbde:	2101      	movs	r1, #1
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7ff ff05 	bl	800f9f0 <dir_next>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d0d7      	beq.n	800fba0 <dir_alloc+0x26>
 800fbf0:	e000      	b.n	800fbf4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fbf2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fbf4:	7dfb      	ldrb	r3, [r7, #23]
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d101      	bne.n	800fbfe <dir_alloc+0x84>
 800fbfa:	2307      	movs	r3, #7
 800fbfc:	75fb      	strb	r3, [r7, #23]
	return res;
 800fbfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3718      	adds	r7, #24
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	331a      	adds	r3, #26
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff f810 	bl	800ec3c <ld_word>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b03      	cmp	r3, #3
 800fc26:	d109      	bne.n	800fc3c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	3314      	adds	r3, #20
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff f805 	bl	800ec3c <ld_word>
 800fc32:	4603      	mov	r3, r0
 800fc34:	041b      	lsls	r3, r3, #16
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	60f8      	str	r0, [r7, #12]
 800fc4e:	60b9      	str	r1, [r7, #8]
 800fc50:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	331a      	adds	r3, #26
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	b292      	uxth	r2, r2
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff f829 	bl	800ecb4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d109      	bne.n	800fc7e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	f103 0214 	add.w	r2, r3, #20
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	0c1b      	lsrs	r3, r3, #16
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	4619      	mov	r1, r3
 800fc78:	4610      	mov	r0, r2
 800fc7a:	f7ff f81b 	bl	800ecb4 <st_word>
	}
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b086      	sub	sp, #24
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fc94:	2100      	movs	r1, #0
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff fe2f 	bl	800f8fa <dir_sdi>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d001      	beq.n	800fcaa <dir_find+0x24>
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
 800fca8:	e03e      	b.n	800fd28 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6938      	ldr	r0, [r7, #16]
 800fcb2:	f7ff faa5 	bl	800f200 <move_window>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d12f      	bne.n	800fd20 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6a1b      	ldr	r3, [r3, #32]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d102      	bne.n	800fcd4 <dir_find+0x4e>
 800fcce:	2304      	movs	r3, #4
 800fcd0:	75fb      	strb	r3, [r7, #23]
 800fcd2:	e028      	b.n	800fd26 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a1b      	ldr	r3, [r3, #32]
 800fcd8:	330b      	adds	r3, #11
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	330b      	adds	r3, #11
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	f003 0308 	and.w	r3, r3, #8
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10a      	bne.n	800fd0c <dir_find+0x86>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a18      	ldr	r0, [r3, #32]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	3324      	adds	r3, #36	@ 0x24
 800fcfe:	220b      	movs	r2, #11
 800fd00:	4619      	mov	r1, r3
 800fd02:	f7ff f85a 	bl	800edba <mem_cmp>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00b      	beq.n	800fd24 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7ff fe6e 	bl	800f9f0 <dir_next>
 800fd14:	4603      	mov	r3, r0
 800fd16:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fd18:	7dfb      	ldrb	r3, [r7, #23]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d0c5      	beq.n	800fcaa <dir_find+0x24>
 800fd1e:	e002      	b.n	800fd26 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fd20:	bf00      	nop
 800fd22:	e000      	b.n	800fd26 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd24:	bf00      	nop

	return res;
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fd3e:	2101      	movs	r1, #1
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff ff1a 	bl	800fb7a <dir_alloc>
 800fd46:	4603      	mov	r3, r0
 800fd48:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fd4a:	7bfb      	ldrb	r3, [r7, #15]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d11c      	bne.n	800fd8a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	4619      	mov	r1, r3
 800fd56:	68b8      	ldr	r0, [r7, #8]
 800fd58:	f7ff fa52 	bl	800f200 <move_window>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d111      	bne.n	800fd8a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	2220      	movs	r2, #32
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff f808 	bl	800ed84 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a18      	ldr	r0, [r3, #32]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	3324      	adds	r3, #36	@ 0x24
 800fd7c:	220b      	movs	r2, #11
 800fd7e:	4619      	mov	r1, r3
 800fd80:	f7fe ffdf 	bl	800ed42 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	2201      	movs	r2, #1
 800fd88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	3324      	adds	r3, #36	@ 0x24
 800fda8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fdaa:	220b      	movs	r2, #11
 800fdac:	2120      	movs	r1, #32
 800fdae:	68b8      	ldr	r0, [r7, #8]
 800fdb0:	f7fe ffe8 	bl	800ed84 <mem_set>
	si = i = 0; ni = 8;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	613b      	str	r3, [r7, #16]
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	61fb      	str	r3, [r7, #28]
 800fdbc:	2308      	movs	r3, #8
 800fdbe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	1c5a      	adds	r2, r3, #1
 800fdc4:	61fa      	str	r2, [r7, #28]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	4413      	add	r3, r2
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fdce:	7efb      	ldrb	r3, [r7, #27]
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	d94e      	bls.n	800fe72 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fdd4:	7efb      	ldrb	r3, [r7, #27]
 800fdd6:	2b2f      	cmp	r3, #47	@ 0x2f
 800fdd8:	d006      	beq.n	800fde8 <create_name+0x54>
 800fdda:	7efb      	ldrb	r3, [r7, #27]
 800fddc:	2b5c      	cmp	r3, #92	@ 0x5c
 800fdde:	d110      	bne.n	800fe02 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fde0:	e002      	b.n	800fde8 <create_name+0x54>
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	3301      	adds	r3, #1
 800fde6:	61fb      	str	r3, [r7, #28]
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	2b2f      	cmp	r3, #47	@ 0x2f
 800fdf2:	d0f6      	beq.n	800fde2 <create_name+0x4e>
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b5c      	cmp	r3, #92	@ 0x5c
 800fdfe:	d0f0      	beq.n	800fde2 <create_name+0x4e>
			break;
 800fe00:	e038      	b.n	800fe74 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fe02:	7efb      	ldrb	r3, [r7, #27]
 800fe04:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe06:	d003      	beq.n	800fe10 <create_name+0x7c>
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d30c      	bcc.n	800fe2a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2b0b      	cmp	r3, #11
 800fe14:	d002      	beq.n	800fe1c <create_name+0x88>
 800fe16:	7efb      	ldrb	r3, [r7, #27]
 800fe18:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe1a:	d001      	beq.n	800fe20 <create_name+0x8c>
 800fe1c:	2306      	movs	r3, #6
 800fe1e:	e044      	b.n	800feaa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fe20:	2308      	movs	r3, #8
 800fe22:	613b      	str	r3, [r7, #16]
 800fe24:	230b      	movs	r3, #11
 800fe26:	617b      	str	r3, [r7, #20]
			continue;
 800fe28:	e022      	b.n	800fe70 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fe2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da04      	bge.n	800fe3c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fe32:	7efb      	ldrb	r3, [r7, #27]
 800fe34:	3b80      	subs	r3, #128	@ 0x80
 800fe36:	4a1f      	ldr	r2, [pc, #124]	@ (800feb4 <create_name+0x120>)
 800fe38:	5cd3      	ldrb	r3, [r2, r3]
 800fe3a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fe3c:	7efb      	ldrb	r3, [r7, #27]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	481d      	ldr	r0, [pc, #116]	@ (800feb8 <create_name+0x124>)
 800fe42:	f7fe ffe1 	bl	800ee08 <chk_chr>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d001      	beq.n	800fe50 <create_name+0xbc>
 800fe4c:	2306      	movs	r3, #6
 800fe4e:	e02c      	b.n	800feaa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fe50:	7efb      	ldrb	r3, [r7, #27]
 800fe52:	2b60      	cmp	r3, #96	@ 0x60
 800fe54:	d905      	bls.n	800fe62 <create_name+0xce>
 800fe56:	7efb      	ldrb	r3, [r7, #27]
 800fe58:	2b7a      	cmp	r3, #122	@ 0x7a
 800fe5a:	d802      	bhi.n	800fe62 <create_name+0xce>
 800fe5c:	7efb      	ldrb	r3, [r7, #27]
 800fe5e:	3b20      	subs	r3, #32
 800fe60:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	613a      	str	r2, [r7, #16]
 800fe68:	68ba      	ldr	r2, [r7, #8]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	7efa      	ldrb	r2, [r7, #27]
 800fe6e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fe70:	e7a6      	b.n	800fdc0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fe72:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	441a      	add	r2, r3
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <create_name+0xf4>
 800fe84:	2306      	movs	r3, #6
 800fe86:	e010      	b.n	800feaa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2be5      	cmp	r3, #229	@ 0xe5
 800fe8e:	d102      	bne.n	800fe96 <create_name+0x102>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2205      	movs	r2, #5
 800fe94:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fe96:	7efb      	ldrb	r3, [r7, #27]
 800fe98:	2b20      	cmp	r3, #32
 800fe9a:	d801      	bhi.n	800fea0 <create_name+0x10c>
 800fe9c:	2204      	movs	r2, #4
 800fe9e:	e000      	b.n	800fea2 <create_name+0x10e>
 800fea0:	2200      	movs	r2, #0
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	330b      	adds	r3, #11
 800fea6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fea8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3720      	adds	r7, #32
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	0801b360 	.word	0x0801b360
 800feb8:	080193a8 	.word	0x080193a8

0800febc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fed0:	e002      	b.n	800fed8 <follow_path+0x1c>
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	3301      	adds	r3, #1
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b2f      	cmp	r3, #47	@ 0x2f
 800fede:	d0f8      	beq.n	800fed2 <follow_path+0x16>
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2b5c      	cmp	r3, #92	@ 0x5c
 800fee6:	d0f4      	beq.n	800fed2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2200      	movs	r2, #0
 800feec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	2b1f      	cmp	r3, #31
 800fef4:	d80a      	bhi.n	800ff0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2280      	movs	r2, #128	@ 0x80
 800fefa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fefe:	2100      	movs	r1, #0
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff fcfa 	bl	800f8fa <dir_sdi>
 800ff06:	4603      	mov	r3, r0
 800ff08:	75fb      	strb	r3, [r7, #23]
 800ff0a:	e043      	b.n	800ff94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff0c:	463b      	mov	r3, r7
 800ff0e:	4619      	mov	r1, r3
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7ff ff3f 	bl	800fd94 <create_name>
 800ff16:	4603      	mov	r3, r0
 800ff18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff1a:	7dfb      	ldrb	r3, [r7, #23]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d134      	bne.n	800ff8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff feb0 	bl	800fc86 <dir_find>
 800ff26:	4603      	mov	r3, r0
 800ff28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ff30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00a      	beq.n	800ff4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
 800ff3a:	2b04      	cmp	r3, #4
 800ff3c:	d127      	bne.n	800ff8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ff3e:	7afb      	ldrb	r3, [r7, #11]
 800ff40:	f003 0304 	and.w	r3, r3, #4
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d122      	bne.n	800ff8e <follow_path+0xd2>
 800ff48:	2305      	movs	r3, #5
 800ff4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ff4c:	e01f      	b.n	800ff8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff4e:	7afb      	ldrb	r3, [r7, #11]
 800ff50:	f003 0304 	and.w	r3, r3, #4
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d11c      	bne.n	800ff92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	799b      	ldrb	r3, [r3, #6]
 800ff5c:	f003 0310 	and.w	r3, r3, #16
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d102      	bne.n	800ff6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ff64:	2305      	movs	r3, #5
 800ff66:	75fb      	strb	r3, [r7, #23]
 800ff68:	e014      	b.n	800ff94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	695b      	ldr	r3, [r3, #20]
 800ff74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff78:	4413      	add	r3, r2
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7ff fe43 	bl	800fc08 <ld_clust>
 800ff82:	4602      	mov	r2, r0
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff88:	e7c0      	b.n	800ff0c <follow_path+0x50>
			if (res != FR_OK) break;
 800ff8a:	bf00      	nop
 800ff8c:	e002      	b.n	800ff94 <follow_path+0xd8>
				break;
 800ff8e:	bf00      	nop
 800ff90:	e000      	b.n	800ff94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff92:	bf00      	nop
			}
		}
	}

	return res;
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b087      	sub	sp, #28
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ffa6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d031      	beq.n	8010018 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	617b      	str	r3, [r7, #20]
 800ffba:	e002      	b.n	800ffc2 <get_ldnumber+0x24>
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b20      	cmp	r3, #32
 800ffc8:	d903      	bls.n	800ffd2 <get_ldnumber+0x34>
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b3a      	cmp	r3, #58	@ 0x3a
 800ffd0:	d1f4      	bne.n	800ffbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	2b3a      	cmp	r3, #58	@ 0x3a
 800ffd8:	d11c      	bne.n	8010014 <get_ldnumber+0x76>
			tp = *path;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	1c5a      	adds	r2, r3, #1
 800ffe4:	60fa      	str	r2, [r7, #12]
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	3b30      	subs	r3, #48	@ 0x30
 800ffea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b09      	cmp	r3, #9
 800fff0:	d80e      	bhi.n	8010010 <get_ldnumber+0x72>
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d10a      	bne.n	8010010 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d107      	bne.n	8010010 <get_ldnumber+0x72>
					vol = (int)i;
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	3301      	adds	r3, #1
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	e002      	b.n	801001a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010014:	2300      	movs	r3, #0
 8010016:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010018:	693b      	ldr	r3, [r7, #16]
}
 801001a:	4618      	mov	r0, r3
 801001c:	371c      	adds	r7, #28
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
	...

08010028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	70da      	strb	r2, [r3, #3]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f04f 32ff 	mov.w	r2, #4294967295
 801003e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7ff f8dc 	bl	800f200 <move_window>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <check_fs+0x2a>
 801004e:	2304      	movs	r3, #4
 8010050:	e038      	b.n	80100c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3334      	adds	r3, #52	@ 0x34
 8010056:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe fdee 	bl	800ec3c <ld_word>
 8010060:	4603      	mov	r3, r0
 8010062:	461a      	mov	r2, r3
 8010064:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010068:	429a      	cmp	r2, r3
 801006a:	d001      	beq.n	8010070 <check_fs+0x48>
 801006c:	2303      	movs	r3, #3
 801006e:	e029      	b.n	80100c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010076:	2be9      	cmp	r3, #233	@ 0xe9
 8010078:	d009      	beq.n	801008e <check_fs+0x66>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010080:	2beb      	cmp	r3, #235	@ 0xeb
 8010082:	d11e      	bne.n	80100c2 <check_fs+0x9a>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801008a:	2b90      	cmp	r3, #144	@ 0x90
 801008c:	d119      	bne.n	80100c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	3334      	adds	r3, #52	@ 0x34
 8010092:	3336      	adds	r3, #54	@ 0x36
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe fdea 	bl	800ec6e <ld_dword>
 801009a:	4603      	mov	r3, r0
 801009c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80100a0:	4a0a      	ldr	r2, [pc, #40]	@ (80100cc <check_fs+0xa4>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d101      	bne.n	80100aa <check_fs+0x82>
 80100a6:	2300      	movs	r3, #0
 80100a8:	e00c      	b.n	80100c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3334      	adds	r3, #52	@ 0x34
 80100ae:	3352      	adds	r3, #82	@ 0x52
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fe fddc 	bl	800ec6e <ld_dword>
 80100b6:	4603      	mov	r3, r0
 80100b8:	4a05      	ldr	r2, [pc, #20]	@ (80100d0 <check_fs+0xa8>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d101      	bne.n	80100c2 <check_fs+0x9a>
 80100be:	2300      	movs	r3, #0
 80100c0:	e000      	b.n	80100c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80100c2:	2302      	movs	r3, #2
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	00544146 	.word	0x00544146
 80100d0:	33544146 	.word	0x33544146

080100d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b096      	sub	sp, #88	@ 0x58
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	4613      	mov	r3, r2
 80100e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2200      	movs	r2, #0
 80100e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff ff58 	bl	800ff9e <get_ldnumber>
 80100ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80100f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	da01      	bge.n	80100fa <find_volume+0x26>
 80100f6:	230b      	movs	r3, #11
 80100f8:	e235      	b.n	8010566 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80100fa:	4aa5      	ldr	r2, [pc, #660]	@ (8010390 <find_volume+0x2bc>)
 80100fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010102:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <find_volume+0x3a>
 801010a:	230c      	movs	r3, #12
 801010c:	e22b      	b.n	8010566 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801010e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010110:	f7fe fe95 	bl	800ee3e <lock_fs>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <find_volume+0x4a>
 801011a:	230f      	movs	r3, #15
 801011c:	e223      	b.n	8010566 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010122:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	f023 0301 	bic.w	r3, r3, #1
 801012a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801012c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d01a      	beq.n	801016a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010136:	785b      	ldrb	r3, [r3, #1]
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fce1 	bl	800eb00 <disk_status>
 801013e:	4603      	mov	r3, r0
 8010140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10c      	bne.n	801016a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d007      	beq.n	8010166 <find_volume+0x92>
 8010156:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801015a:	f003 0304 	and.w	r3, r3, #4
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010162:	230a      	movs	r3, #10
 8010164:	e1ff      	b.n	8010566 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010166:	2300      	movs	r3, #0
 8010168:	e1fd      	b.n	8010566 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801016a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801016c:	2200      	movs	r2, #0
 801016e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010172:	b2da      	uxtb	r2, r3
 8010174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010176:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017a:	785b      	ldrb	r3, [r3, #1]
 801017c:	4618      	mov	r0, r3
 801017e:	f7fe fcd9 	bl	800eb34 <disk_initialize>
 8010182:	4603      	mov	r3, r0
 8010184:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010188:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801018c:	f003 0301 	and.w	r3, r3, #1
 8010190:	2b00      	cmp	r3, #0
 8010192:	d001      	beq.n	8010198 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010194:	2303      	movs	r3, #3
 8010196:	e1e6      	b.n	8010566 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d007      	beq.n	80101ae <find_volume+0xda>
 801019e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101a2:	f003 0304 	and.w	r3, r3, #4
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80101aa:	230a      	movs	r3, #10
 80101ac:	e1db      	b.n	8010566 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80101b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80101b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101b6:	f7ff ff37 	bl	8010028 <check_fs>
 80101ba:	4603      	mov	r3, r0
 80101bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80101c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d149      	bne.n	801025c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80101c8:	2300      	movs	r3, #0
 80101ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80101cc:	e01e      	b.n	801020c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80101ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80101d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80101dc:	4413      	add	r3, r2
 80101de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e2:	3304      	adds	r3, #4
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d006      	beq.n	80101f8 <find_volume+0x124>
 80101ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ec:	3308      	adds	r3, #8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe fd3d 	bl	800ec6e <ld_dword>
 80101f4:	4602      	mov	r2, r0
 80101f6:	e000      	b.n	80101fa <find_volume+0x126>
 80101f8:	2200      	movs	r2, #0
 80101fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	3358      	adds	r3, #88	@ 0x58
 8010200:	443b      	add	r3, r7
 8010202:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010208:	3301      	adds	r3, #1
 801020a:	643b      	str	r3, [r7, #64]	@ 0x40
 801020c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801020e:	2b03      	cmp	r3, #3
 8010210:	d9dd      	bls.n	80101ce <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010212:	2300      	movs	r3, #0
 8010214:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010218:	2b00      	cmp	r3, #0
 801021a:	d002      	beq.n	8010222 <find_volume+0x14e>
 801021c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801021e:	3b01      	subs	r3, #1
 8010220:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	3358      	adds	r3, #88	@ 0x58
 8010228:	443b      	add	r3, r7
 801022a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801022e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010232:	2b00      	cmp	r3, #0
 8010234:	d005      	beq.n	8010242 <find_volume+0x16e>
 8010236:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010238:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801023a:	f7ff fef5 	bl	8010028 <check_fs>
 801023e:	4603      	mov	r3, r0
 8010240:	e000      	b.n	8010244 <find_volume+0x170>
 8010242:	2303      	movs	r3, #3
 8010244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801024c:	2b01      	cmp	r3, #1
 801024e:	d905      	bls.n	801025c <find_volume+0x188>
 8010250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010252:	3301      	adds	r3, #1
 8010254:	643b      	str	r3, [r7, #64]	@ 0x40
 8010256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010258:	2b03      	cmp	r3, #3
 801025a:	d9e2      	bls.n	8010222 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801025c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010260:	2b04      	cmp	r3, #4
 8010262:	d101      	bne.n	8010268 <find_volume+0x194>
 8010264:	2301      	movs	r3, #1
 8010266:	e17e      	b.n	8010566 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010268:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801026c:	2b01      	cmp	r3, #1
 801026e:	d901      	bls.n	8010274 <find_volume+0x1a0>
 8010270:	230d      	movs	r3, #13
 8010272:	e178      	b.n	8010566 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	3334      	adds	r3, #52	@ 0x34
 8010278:	330b      	adds	r3, #11
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe fcde 	bl	800ec3c <ld_word>
 8010280:	4603      	mov	r3, r0
 8010282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010286:	d001      	beq.n	801028c <find_volume+0x1b8>
 8010288:	230d      	movs	r3, #13
 801028a:	e16c      	b.n	8010566 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801028c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028e:	3334      	adds	r3, #52	@ 0x34
 8010290:	3316      	adds	r3, #22
 8010292:	4618      	mov	r0, r3
 8010294:	f7fe fcd2 	bl	800ec3c <ld_word>
 8010298:	4603      	mov	r3, r0
 801029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801029c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <find_volume+0x1dc>
 80102a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a4:	3334      	adds	r3, #52	@ 0x34
 80102a6:	3324      	adds	r3, #36	@ 0x24
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe fce0 	bl	800ec6e <ld_dword>
 80102ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80102b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80102b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80102b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80102bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80102c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c2:	789b      	ldrb	r3, [r3, #2]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d005      	beq.n	80102d4 <find_volume+0x200>
 80102c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ca:	789b      	ldrb	r3, [r3, #2]
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d001      	beq.n	80102d4 <find_volume+0x200>
 80102d0:	230d      	movs	r3, #13
 80102d2:	e148      	b.n	8010566 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80102d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d6:	789b      	ldrb	r3, [r3, #2]
 80102d8:	461a      	mov	r2, r3
 80102da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102dc:	fb02 f303 	mul.w	r3, r2, r3
 80102e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80102e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102e8:	461a      	mov	r2, r3
 80102ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80102ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f0:	895b      	ldrh	r3, [r3, #10]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <find_volume+0x234>
 80102f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f8:	895b      	ldrh	r3, [r3, #10]
 80102fa:	461a      	mov	r2, r3
 80102fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102fe:	895b      	ldrh	r3, [r3, #10]
 8010300:	3b01      	subs	r3, #1
 8010302:	4013      	ands	r3, r2
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <find_volume+0x238>
 8010308:	230d      	movs	r3, #13
 801030a:	e12c      	b.n	8010566 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801030c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801030e:	3334      	adds	r3, #52	@ 0x34
 8010310:	3311      	adds	r3, #17
 8010312:	4618      	mov	r0, r3
 8010314:	f7fe fc92 	bl	800ec3c <ld_word>
 8010318:	4603      	mov	r3, r0
 801031a:	461a      	mov	r2, r3
 801031c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801031e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010322:	891b      	ldrh	r3, [r3, #8]
 8010324:	f003 030f 	and.w	r3, r3, #15
 8010328:	b29b      	uxth	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d001      	beq.n	8010332 <find_volume+0x25e>
 801032e:	230d      	movs	r3, #13
 8010330:	e119      	b.n	8010566 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010334:	3334      	adds	r3, #52	@ 0x34
 8010336:	3313      	adds	r3, #19
 8010338:	4618      	mov	r0, r3
 801033a:	f7fe fc7f 	bl	800ec3c <ld_word>
 801033e:	4603      	mov	r3, r0
 8010340:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010344:	2b00      	cmp	r3, #0
 8010346:	d106      	bne.n	8010356 <find_volume+0x282>
 8010348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034a:	3334      	adds	r3, #52	@ 0x34
 801034c:	3320      	adds	r3, #32
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe fc8d 	bl	800ec6e <ld_dword>
 8010354:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010358:	3334      	adds	r3, #52	@ 0x34
 801035a:	330e      	adds	r3, #14
 801035c:	4618      	mov	r0, r3
 801035e:	f7fe fc6d 	bl	800ec3c <ld_word>
 8010362:	4603      	mov	r3, r0
 8010364:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010366:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010368:	2b00      	cmp	r3, #0
 801036a:	d101      	bne.n	8010370 <find_volume+0x29c>
 801036c:	230d      	movs	r3, #13
 801036e:	e0fa      	b.n	8010566 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010370:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010374:	4413      	add	r3, r2
 8010376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010378:	8912      	ldrh	r2, [r2, #8]
 801037a:	0912      	lsrs	r2, r2, #4
 801037c:	b292      	uxth	r2, r2
 801037e:	4413      	add	r3, r2
 8010380:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010386:	429a      	cmp	r2, r3
 8010388:	d204      	bcs.n	8010394 <find_volume+0x2c0>
 801038a:	230d      	movs	r3, #13
 801038c:	e0eb      	b.n	8010566 <find_volume+0x492>
 801038e:	bf00      	nop
 8010390:	200017d4 	.word	0x200017d4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010398:	1ad3      	subs	r3, r2, r3
 801039a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801039c:	8952      	ldrh	r2, [r2, #10]
 801039e:	fbb3 f3f2 	udiv	r3, r3, r2
 80103a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80103a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d101      	bne.n	80103ae <find_volume+0x2da>
 80103aa:	230d      	movs	r3, #13
 80103ac:	e0db      	b.n	8010566 <find_volume+0x492>
		fmt = FS_FAT32;
 80103ae:	2303      	movs	r3, #3
 80103b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80103b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d802      	bhi.n	80103c4 <find_volume+0x2f0>
 80103be:	2302      	movs	r3, #2
 80103c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80103c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d802      	bhi.n	80103d4 <find_volume+0x300>
 80103ce:	2301      	movs	r3, #1
 80103d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80103d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d6:	1c9a      	adds	r2, r3, #2
 80103d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103da:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80103e0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80103e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80103e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103e6:	441a      	add	r2, r3
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80103ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80103ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f0:	441a      	add	r2, r3
 80103f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80103f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80103fa:	2b03      	cmp	r3, #3
 80103fc:	d11e      	bne.n	801043c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80103fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010400:	3334      	adds	r3, #52	@ 0x34
 8010402:	332a      	adds	r3, #42	@ 0x2a
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe fc19 	bl	800ec3c <ld_word>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <find_volume+0x340>
 8010410:	230d      	movs	r3, #13
 8010412:	e0a8      	b.n	8010566 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010416:	891b      	ldrh	r3, [r3, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d001      	beq.n	8010420 <find_volume+0x34c>
 801041c:	230d      	movs	r3, #13
 801041e:	e0a2      	b.n	8010566 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010422:	3334      	adds	r3, #52	@ 0x34
 8010424:	332c      	adds	r3, #44	@ 0x2c
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fc21 	bl	800ec6e <ld_dword>
 801042c:	4602      	mov	r2, r0
 801042e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010430:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	647b      	str	r3, [r7, #68]	@ 0x44
 801043a:	e01f      	b.n	801047c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801043c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801043e:	891b      	ldrh	r3, [r3, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <find_volume+0x374>
 8010444:	230d      	movs	r3, #13
 8010446:	e08e      	b.n	8010566 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801044c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801044e:	441a      	add	r2, r3
 8010450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010452:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010458:	2b02      	cmp	r3, #2
 801045a:	d103      	bne.n	8010464 <find_volume+0x390>
 801045c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	e00a      	b.n	801047a <find_volume+0x3a6>
 8010464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010466:	699a      	ldr	r2, [r3, #24]
 8010468:	4613      	mov	r3, r2
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	4413      	add	r3, r2
 801046e:	085a      	lsrs	r2, r3, #1
 8010470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801047a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801047c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047e:	69da      	ldr	r2, [r3, #28]
 8010480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010482:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010486:	0a5b      	lsrs	r3, r3, #9
 8010488:	429a      	cmp	r2, r3
 801048a:	d201      	bcs.n	8010490 <find_volume+0x3bc>
 801048c:	230d      	movs	r3, #13
 801048e:	e06a      	b.n	8010566 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	f04f 32ff 	mov.w	r2, #4294967295
 8010496:	615a      	str	r2, [r3, #20]
 8010498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801049a:	695a      	ldr	r2, [r3, #20]
 801049c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801049e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80104a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a2:	2280      	movs	r2, #128	@ 0x80
 80104a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80104a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80104aa:	2b03      	cmp	r3, #3
 80104ac:	d149      	bne.n	8010542 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80104ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b0:	3334      	adds	r3, #52	@ 0x34
 80104b2:	3330      	adds	r3, #48	@ 0x30
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fe fbc1 	bl	800ec3c <ld_word>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d140      	bne.n	8010542 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80104c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104c2:	3301      	adds	r3, #1
 80104c4:	4619      	mov	r1, r3
 80104c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80104c8:	f7fe fe9a 	bl	800f200 <move_window>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d137      	bne.n	8010542 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80104d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d4:	2200      	movs	r2, #0
 80104d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80104d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104da:	3334      	adds	r3, #52	@ 0x34
 80104dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fe fbab 	bl	800ec3c <ld_word>
 80104e6:	4603      	mov	r3, r0
 80104e8:	461a      	mov	r2, r3
 80104ea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d127      	bne.n	8010542 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80104f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f4:	3334      	adds	r3, #52	@ 0x34
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fe fbb9 	bl	800ec6e <ld_dword>
 80104fc:	4603      	mov	r3, r0
 80104fe:	4a1c      	ldr	r2, [pc, #112]	@ (8010570 <find_volume+0x49c>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d11e      	bne.n	8010542 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010506:	3334      	adds	r3, #52	@ 0x34
 8010508:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801050c:	4618      	mov	r0, r3
 801050e:	f7fe fbae 	bl	800ec6e <ld_dword>
 8010512:	4603      	mov	r3, r0
 8010514:	4a17      	ldr	r2, [pc, #92]	@ (8010574 <find_volume+0x4a0>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d113      	bne.n	8010542 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801051a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051c:	3334      	adds	r3, #52	@ 0x34
 801051e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe fba3 	bl	800ec6e <ld_dword>
 8010528:	4602      	mov	r2, r0
 801052a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801052e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010530:	3334      	adds	r3, #52	@ 0x34
 8010532:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fb99 	bl	800ec6e <ld_dword>
 801053c:	4602      	mov	r2, r0
 801053e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010540:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010544:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010548:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801054a:	4b0b      	ldr	r3, [pc, #44]	@ (8010578 <find_volume+0x4a4>)
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	3301      	adds	r3, #1
 8010550:	b29a      	uxth	r2, r3
 8010552:	4b09      	ldr	r3, [pc, #36]	@ (8010578 <find_volume+0x4a4>)
 8010554:	801a      	strh	r2, [r3, #0]
 8010556:	4b08      	ldr	r3, [pc, #32]	@ (8010578 <find_volume+0x4a4>)
 8010558:	881a      	ldrh	r2, [r3, #0]
 801055a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801055e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010560:	f7fe fde6 	bl	800f130 <clear_lock>
#endif
	return FR_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3758      	adds	r7, #88	@ 0x58
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	41615252 	.word	0x41615252
 8010574:	61417272 	.word	0x61417272
 8010578:	200017d8 	.word	0x200017d8

0801057c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010586:	2309      	movs	r3, #9
 8010588:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d02e      	beq.n	80105ee <validate+0x72>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d02a      	beq.n	80105ee <validate+0x72>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d025      	beq.n	80105ee <validate+0x72>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	889a      	ldrh	r2, [r3, #4]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	88db      	ldrh	r3, [r3, #6]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d11e      	bne.n	80105ee <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe fc42 	bl	800ee3e <lock_fs>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d014      	beq.n	80105ea <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	785b      	ldrb	r3, [r3, #1]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe fa9a 	bl	800eb00 <disk_status>
 80105cc:	4603      	mov	r3, r0
 80105ce:	f003 0301 	and.w	r3, r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d102      	bne.n	80105dc <validate+0x60>
				res = FR_OK;
 80105d6:	2300      	movs	r3, #0
 80105d8:	73fb      	strb	r3, [r7, #15]
 80105da:	e008      	b.n	80105ee <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2100      	movs	r1, #0
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fc41 	bl	800ee6a <unlock_fs>
 80105e8:	e001      	b.n	80105ee <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80105ea:	230f      	movs	r3, #15
 80105ec:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d102      	bne.n	80105fa <validate+0x7e>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	e000      	b.n	80105fc <validate+0x80>
 80105fa:	2300      	movs	r3, #0
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	6013      	str	r3, [r2, #0]
	return res;
 8010600:	7bfb      	ldrb	r3, [r7, #15]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
	...

0801060c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b088      	sub	sp, #32
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	4613      	mov	r3, r2
 8010618:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801061e:	f107 0310 	add.w	r3, r7, #16
 8010622:	4618      	mov	r0, r3
 8010624:	f7ff fcbb 	bl	800ff9e <get_ldnumber>
 8010628:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	2b00      	cmp	r3, #0
 801062e:	da01      	bge.n	8010634 <f_mount+0x28>
 8010630:	230b      	movs	r3, #11
 8010632:	e048      	b.n	80106c6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010634:	4a26      	ldr	r2, [pc, #152]	@ (80106d0 <f_mount+0xc4>)
 8010636:	69fb      	ldr	r3, [r7, #28]
 8010638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801063c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00f      	beq.n	8010664 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010644:	69b8      	ldr	r0, [r7, #24]
 8010646:	f7fe fd73 	bl	800f130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	4618      	mov	r0, r3
 8010650:	f001 f837 	bl	80116c2 <ff_del_syncobj>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d101      	bne.n	801065e <f_mount+0x52>
 801065a:	2302      	movs	r3, #2
 801065c:	e033      	b.n	80106c6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00f      	beq.n	801068a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	b2da      	uxtb	r2, r3
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	330c      	adds	r3, #12
 8010678:	4619      	mov	r1, r3
 801067a:	4610      	mov	r0, r2
 801067c:	f001 f803 	bl	8011686 <ff_cre_syncobj>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <f_mount+0x7e>
 8010686:	2302      	movs	r3, #2
 8010688:	e01d      	b.n	80106c6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	4910      	ldr	r1, [pc, #64]	@ (80106d0 <f_mount+0xc4>)
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d002      	beq.n	80106a0 <f_mount+0x94>
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d001      	beq.n	80106a4 <f_mount+0x98>
 80106a0:	2300      	movs	r3, #0
 80106a2:	e010      	b.n	80106c6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80106a4:	f107 010c 	add.w	r1, r7, #12
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	2200      	movs	r2, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff fd10 	bl	80100d4 <find_volume>
 80106b4:	4603      	mov	r3, r0
 80106b6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	7dfa      	ldrb	r2, [r7, #23]
 80106bc:	4611      	mov	r1, r2
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fe fbd3 	bl	800ee6a <unlock_fs>
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	200017d4 	.word	0x200017d4

080106d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b098      	sub	sp, #96	@ 0x60
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4613      	mov	r3, r2
 80106e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d101      	bne.n	80106ec <f_open+0x18>
 80106e8:	2309      	movs	r3, #9
 80106ea:	e1b0      	b.n	8010a4e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80106ec:	79fb      	ldrb	r3, [r7, #7]
 80106ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80106f4:	79fa      	ldrb	r2, [r7, #7]
 80106f6:	f107 0110 	add.w	r1, r7, #16
 80106fa:	f107 0308 	add.w	r3, r7, #8
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ff fce8 	bl	80100d4 <find_volume>
 8010704:	4603      	mov	r3, r0
 8010706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801070a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801070e:	2b00      	cmp	r3, #0
 8010710:	f040 818d 	bne.w	8010a2e <f_open+0x35a>
		dj.obj.fs = fs;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	f107 0314 	add.w	r3, r7, #20
 801071e:	4611      	mov	r1, r2
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff fbcb 	bl	800febc <follow_path>
 8010726:	4603      	mov	r3, r0
 8010728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801072c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010730:	2b00      	cmp	r3, #0
 8010732:	d118      	bne.n	8010766 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010734:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010738:	b25b      	sxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	da03      	bge.n	8010746 <f_open+0x72>
				res = FR_INVALID_NAME;
 801073e:	2306      	movs	r3, #6
 8010740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010744:	e00f      	b.n	8010766 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010746:	79fb      	ldrb	r3, [r7, #7]
 8010748:	2b01      	cmp	r3, #1
 801074a:	bf8c      	ite	hi
 801074c:	2301      	movhi	r3, #1
 801074e:	2300      	movls	r3, #0
 8010750:	b2db      	uxtb	r3, r3
 8010752:	461a      	mov	r2, r3
 8010754:	f107 0314 	add.w	r3, r7, #20
 8010758:	4611      	mov	r1, r2
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe fba0 	bl	800eea0 <chk_lock>
 8010760:	4603      	mov	r3, r0
 8010762:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	f003 031c 	and.w	r3, r3, #28
 801076c:	2b00      	cmp	r3, #0
 801076e:	d07f      	beq.n	8010870 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010770:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010774:	2b00      	cmp	r3, #0
 8010776:	d017      	beq.n	80107a8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801077c:	2b04      	cmp	r3, #4
 801077e:	d10e      	bne.n	801079e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010780:	f7fe fbea 	bl	800ef58 <enq_lock>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d006      	beq.n	8010798 <f_open+0xc4>
 801078a:	f107 0314 	add.w	r3, r7, #20
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff face 	bl	800fd30 <dir_register>
 8010794:	4603      	mov	r3, r0
 8010796:	e000      	b.n	801079a <f_open+0xc6>
 8010798:	2312      	movs	r3, #18
 801079a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	f043 0308 	orr.w	r3, r3, #8
 80107a4:	71fb      	strb	r3, [r7, #7]
 80107a6:	e010      	b.n	80107ca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80107a8:	7ebb      	ldrb	r3, [r7, #26]
 80107aa:	f003 0311 	and.w	r3, r3, #17
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d003      	beq.n	80107ba <f_open+0xe6>
					res = FR_DENIED;
 80107b2:	2307      	movs	r3, #7
 80107b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80107b8:	e007      	b.n	80107ca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <f_open+0xf6>
 80107c4:	2308      	movs	r3, #8
 80107c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80107ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d168      	bne.n	80108a4 <f_open+0x1d0>
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	f003 0308 	and.w	r3, r3, #8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d063      	beq.n	80108a4 <f_open+0x1d0>
				dw = GET_FATTIME();
 80107dc:	f7fe f932 	bl	800ea44 <get_fattime>
 80107e0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80107e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107e4:	330e      	adds	r3, #14
 80107e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fe fa7e 	bl	800ecea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80107ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f0:	3316      	adds	r3, #22
 80107f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7fe fa78 	bl	800ecea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80107fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107fc:	330b      	adds	r3, #11
 80107fe:	2220      	movs	r2, #32
 8010800:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010806:	4611      	mov	r1, r2
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff f9fd 	bl	800fc08 <ld_clust>
 801080e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010814:	2200      	movs	r2, #0
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff fa15 	bl	800fc46 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801081e:	331c      	adds	r3, #28
 8010820:	2100      	movs	r1, #0
 8010822:	4618      	mov	r0, r3
 8010824:	f7fe fa61 	bl	800ecea <st_dword>
					fs->wflag = 1;
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2201      	movs	r2, #1
 801082c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801082e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d037      	beq.n	80108a4 <f_open+0x1d0>
						dw = fs->winsect;
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010838:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801083a:	f107 0314 	add.w	r3, r7, #20
 801083e:	2200      	movs	r2, #0
 8010840:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe ff28 	bl	800f698 <remove_chain>
 8010848:	4603      	mov	r3, r0
 801084a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801084e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010852:	2b00      	cmp	r3, #0
 8010854:	d126      	bne.n	80108a4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe fcd0 	bl	800f200 <move_window>
 8010860:	4603      	mov	r3, r0
 8010862:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801086a:	3a01      	subs	r2, #1
 801086c:	611a      	str	r2, [r3, #16]
 801086e:	e019      	b.n	80108a4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010874:	2b00      	cmp	r3, #0
 8010876:	d115      	bne.n	80108a4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010878:	7ebb      	ldrb	r3, [r7, #26]
 801087a:	f003 0310 	and.w	r3, r3, #16
 801087e:	2b00      	cmp	r3, #0
 8010880:	d003      	beq.n	801088a <f_open+0x1b6>
					res = FR_NO_FILE;
 8010882:	2304      	movs	r3, #4
 8010884:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010888:	e00c      	b.n	80108a4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801088a:	79fb      	ldrb	r3, [r7, #7]
 801088c:	f003 0302 	and.w	r3, r3, #2
 8010890:	2b00      	cmp	r3, #0
 8010892:	d007      	beq.n	80108a4 <f_open+0x1d0>
 8010894:	7ebb      	ldrb	r3, [r7, #26]
 8010896:	f003 0301 	and.w	r3, r3, #1
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <f_open+0x1d0>
						res = FR_DENIED;
 801089e:	2307      	movs	r3, #7
 80108a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80108a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d126      	bne.n	80108fa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80108ac:	79fb      	ldrb	r3, [r7, #7]
 80108ae:	f003 0308 	and.w	r3, r3, #8
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80108c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80108cc:	79fb      	ldrb	r3, [r7, #7]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	bf8c      	ite	hi
 80108d2:	2301      	movhi	r3, #1
 80108d4:	2300      	movls	r3, #0
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	461a      	mov	r2, r3
 80108da:	f107 0314 	add.w	r3, r7, #20
 80108de:	4611      	mov	r1, r2
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fb5b 	bl	800ef9c <inc_lock>
 80108e6:	4602      	mov	r2, r0
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d102      	bne.n	80108fa <f_open+0x226>
 80108f4:	2302      	movs	r3, #2
 80108f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80108fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f040 8095 	bne.w	8010a2e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010908:	4611      	mov	r1, r2
 801090a:	4618      	mov	r0, r3
 801090c:	f7ff f97c 	bl	800fc08 <ld_clust>
 8010910:	4602      	mov	r2, r0
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010918:	331c      	adds	r3, #28
 801091a:	4618      	mov	r0, r3
 801091c:	f7fe f9a7 	bl	800ec6e <ld_dword>
 8010920:	4602      	mov	r2, r0
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2200      	movs	r2, #0
 801092a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	88da      	ldrh	r2, [r3, #6]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	79fa      	ldrb	r2, [r7, #7]
 801093e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2200      	movs	r2, #0
 8010944:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2200      	movs	r2, #0
 8010950:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	3330      	adds	r3, #48	@ 0x30
 8010956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801095a:	2100      	movs	r1, #0
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fa11 	bl	800ed84 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010962:	79fb      	ldrb	r3, [r7, #7]
 8010964:	f003 0320 	and.w	r3, r3, #32
 8010968:	2b00      	cmp	r3, #0
 801096a:	d060      	beq.n	8010a2e <f_open+0x35a>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d05c      	beq.n	8010a2e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68da      	ldr	r2, [r3, #12]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	895b      	ldrh	r3, [r3, #10]
 8010980:	025b      	lsls	r3, r3, #9
 8010982:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010990:	e016      	b.n	80109c0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe fced 	bl	800f376 <get_fat>
 801099c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801099e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d802      	bhi.n	80109aa <f_open+0x2d6>
 80109a4:	2302      	movs	r3, #2
 80109a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b0:	d102      	bne.n	80109b8 <f_open+0x2e4>
 80109b2:	2301      	movs	r3, #1
 80109b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	657b      	str	r3, [r7, #84]	@ 0x54
 80109c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d103      	bne.n	80109d0 <f_open+0x2fc>
 80109c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d8e0      	bhi.n	8010992 <f_open+0x2be>
				}
				fp->clust = clst;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80109d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d127      	bne.n	8010a2e <f_open+0x35a>
 80109de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d022      	beq.n	8010a2e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fe fca3 	bl	800f338 <clust2sect>
 80109f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80109f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d103      	bne.n	8010a02 <f_open+0x32e>
						res = FR_INT_ERR;
 80109fa:	2302      	movs	r3, #2
 80109fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010a00:	e015      	b.n	8010a2e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a04:	0a5a      	lsrs	r2, r3, #9
 8010a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a08:	441a      	add	r2, r3
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	7858      	ldrb	r0, [r3, #1]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6a1a      	ldr	r2, [r3, #32]
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	f7fe f8af 	bl	800eb80 <disk_read>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d002      	beq.n	8010a2e <f_open+0x35a>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d002      	beq.n	8010a3c <f_open+0x368>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8010a42:	4611      	mov	r1, r2
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fe fa10 	bl	800ee6a <unlock_fs>
 8010a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3760      	adds	r7, #96	@ 0x60
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a56:	b580      	push	{r7, lr}
 8010a58:	b08c      	sub	sp, #48	@ 0x30
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	60f8      	str	r0, [r7, #12]
 8010a5e:	60b9      	str	r1, [r7, #8]
 8010a60:	607a      	str	r2, [r7, #4]
 8010a62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f107 0210 	add.w	r2, r7, #16
 8010a74:	4611      	mov	r1, r2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff fd80 	bl	801057c <validate>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d107      	bne.n	8010a9a <f_write+0x44>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	7d5b      	ldrb	r3, [r3, #21]
 8010a8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d009      	beq.n	8010aae <f_write+0x58>
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010aa0:	4611      	mov	r1, r2
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fe f9e1 	bl	800ee6a <unlock_fs>
 8010aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010aac:	e173      	b.n	8010d96 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	7d1b      	ldrb	r3, [r3, #20]
 8010ab2:	f003 0302 	and.w	r3, r3, #2
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d106      	bne.n	8010ac8 <f_write+0x72>
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	2107      	movs	r1, #7
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe f9d3 	bl	800ee6a <unlock_fs>
 8010ac4:	2307      	movs	r3, #7
 8010ac6:	e166      	b.n	8010d96 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	699a      	ldr	r2, [r3, #24]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	441a      	add	r2, r3
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	f080 814b 	bcs.w	8010d70 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	43db      	mvns	r3, r3
 8010ae0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ae2:	e145      	b.n	8010d70 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	699b      	ldr	r3, [r3, #24]
 8010ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f040 8101 	bne.w	8010cf4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	0a5b      	lsrs	r3, r3, #9
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	8952      	ldrh	r2, [r2, #10]
 8010afc:	3a01      	subs	r2, #1
 8010afe:	4013      	ands	r3, r2
 8010b00:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d14d      	bne.n	8010ba4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d10c      	bne.n	8010b2a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d11a      	bne.n	8010b52 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fe fe1e 	bl	800f762 <create_chain>
 8010b26:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010b28:	e013      	b.n	8010b52 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d007      	beq.n	8010b42 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	699b      	ldr	r3, [r3, #24]
 8010b36:	4619      	mov	r1, r3
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f7fe feaa 	bl	800f892 <clmt_clust>
 8010b3e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010b40:	e007      	b.n	8010b52 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	69db      	ldr	r3, [r3, #28]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	f7fe fe09 	bl	800f762 <create_chain>
 8010b50:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f000 8110 	beq.w	8010d7a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d109      	bne.n	8010b74 <f_write+0x11e>
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2202      	movs	r2, #2
 8010b64:	755a      	strb	r2, [r3, #21]
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	2102      	movs	r1, #2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe f97d 	bl	800ee6a <unlock_fs>
 8010b70:	2302      	movs	r3, #2
 8010b72:	e110      	b.n	8010d96 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b7a:	d109      	bne.n	8010b90 <f_write+0x13a>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	755a      	strb	r2, [r3, #21]
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	2101      	movs	r1, #1
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fe f96f 	bl	800ee6a <unlock_fs>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	e102      	b.n	8010d96 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d102      	bne.n	8010ba4 <f_write+0x14e>
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ba2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	7d1b      	ldrb	r3, [r3, #20]
 8010ba8:	b25b      	sxtb	r3, r3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	da1d      	bge.n	8010bea <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	7858      	ldrb	r0, [r3, #1]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6a1a      	ldr	r2, [r3, #32]
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f7fd ffff 	bl	800ebc0 <disk_write>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d009      	beq.n	8010bdc <f_write+0x186>
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	755a      	strb	r2, [r3, #21]
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	2101      	movs	r1, #1
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fe f949 	bl	800ee6a <unlock_fs>
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e0dc      	b.n	8010d96 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010bea:	693a      	ldr	r2, [r7, #16]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	69db      	ldr	r3, [r3, #28]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	4610      	mov	r0, r2
 8010bf4:	f7fe fba0 	bl	800f338 <clust2sect>
 8010bf8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d109      	bne.n	8010c14 <f_write+0x1be>
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2202      	movs	r2, #2
 8010c04:	755a      	strb	r2, [r3, #21]
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	2102      	movs	r1, #2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fe f92d 	bl	800ee6a <unlock_fs>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e0c0      	b.n	8010d96 <f_write+0x340>
			sect += csect;
 8010c14:	697a      	ldr	r2, [r7, #20]
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	4413      	add	r3, r2
 8010c1a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	0a5b      	lsrs	r3, r3, #9
 8010c20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c22:	6a3b      	ldr	r3, [r7, #32]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d041      	beq.n	8010cac <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c28:	69ba      	ldr	r2, [r7, #24]
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	693a      	ldr	r2, [r7, #16]
 8010c30:	8952      	ldrh	r2, [r2, #10]
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d905      	bls.n	8010c42 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	895b      	ldrh	r3, [r3, #10]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	7858      	ldrb	r0, [r3, #1]
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	69f9      	ldr	r1, [r7, #28]
 8010c4c:	f7fd ffb8 	bl	800ebc0 <disk_write>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <f_write+0x214>
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	755a      	strb	r2, [r3, #21]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	2101      	movs	r1, #1
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fe f902 	bl	800ee6a <unlock_fs>
 8010c66:	2301      	movs	r3, #1
 8010c68:	e095      	b.n	8010d96 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6a1a      	ldr	r2, [r3, #32]
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	6a3a      	ldr	r2, [r7, #32]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d915      	bls.n	8010ca4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6a1a      	ldr	r2, [r3, #32]
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	025b      	lsls	r3, r3, #9
 8010c88:	69fa      	ldr	r2, [r7, #28]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c90:	4619      	mov	r1, r3
 8010c92:	f7fe f856 	bl	800ed42 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	7d1b      	ldrb	r3, [r3, #20]
 8010c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	025b      	lsls	r3, r3, #9
 8010ca8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010caa:	e044      	b.n	8010d36 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6a1b      	ldr	r3, [r3, #32]
 8010cb0:	697a      	ldr	r2, [r7, #20]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d01b      	beq.n	8010cee <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	699a      	ldr	r2, [r3, #24]
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d215      	bcs.n	8010cee <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	7858      	ldrb	r0, [r3, #1]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010ccc:	2301      	movs	r3, #1
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	f7fd ff56 	bl	800eb80 <disk_read>
 8010cd4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d009      	beq.n	8010cee <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2201      	movs	r2, #1
 8010cde:	755a      	strb	r2, [r3, #21]
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fe f8c0 	bl	800ee6a <unlock_fs>
 8010cea:	2301      	movs	r3, #1
 8010cec:	e053      	b.n	8010d96 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	697a      	ldr	r2, [r7, #20]
 8010cf2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cfc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010d00:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d901      	bls.n	8010d0e <f_write+0x2b8>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	699b      	ldr	r3, [r3, #24]
 8010d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d1c:	4413      	add	r3, r2
 8010d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d20:	69f9      	ldr	r1, [r7, #28]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fe f80d 	bl	800ed42 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	7d1b      	ldrb	r3, [r3, #20]
 8010d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010d36:	69fa      	ldr	r2, [r7, #28]
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	4413      	add	r3, r2
 8010d3c:	61fb      	str	r3, [r7, #28]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	699a      	ldr	r2, [r3, #24]
 8010d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d44:	441a      	add	r2, r3
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	619a      	str	r2, [r3, #24]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	68da      	ldr	r2, [r3, #12]
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	699b      	ldr	r3, [r3, #24]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	bf38      	it	cc
 8010d56:	461a      	movcc	r2, r3
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	60da      	str	r2, [r3, #12]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	681a      	ldr	r2, [r3, #0]
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	441a      	add	r2, r3
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	601a      	str	r2, [r3, #0]
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f47f aeb6 	bne.w	8010ae4 <f_write+0x8e>
 8010d78:	e000      	b.n	8010d7c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d7a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fe f86b 	bl	800ee6a <unlock_fs>
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3730      	adds	r7, #48	@ 0x30
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b086      	sub	sp, #24
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f107 0208 	add.w	r2, r7, #8
 8010dac:	4611      	mov	r1, r2
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ff fbe4 	bl	801057c <validate>
 8010db4:	4603      	mov	r3, r0
 8010db6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010db8:	7dfb      	ldrb	r3, [r7, #23]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d16d      	bne.n	8010e9a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	7d1b      	ldrb	r3, [r3, #20]
 8010dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d067      	beq.n	8010e9a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7d1b      	ldrb	r3, [r3, #20]
 8010dce:	b25b      	sxtb	r3, r3
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	da1a      	bge.n	8010e0a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	7858      	ldrb	r0, [r3, #1]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a1a      	ldr	r2, [r3, #32]
 8010de2:	2301      	movs	r3, #1
 8010de4:	f7fd feec 	bl	800ebc0 <disk_write>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d006      	beq.n	8010dfc <f_sync+0x5e>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2101      	movs	r1, #1
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fe f839 	bl	800ee6a <unlock_fs>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e055      	b.n	8010ea8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	7d1b      	ldrb	r3, [r3, #20]
 8010e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e04:	b2da      	uxtb	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e0a:	f7fd fe1b 	bl	800ea44 <get_fattime>
 8010e0e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e16:	4619      	mov	r1, r3
 8010e18:	4610      	mov	r0, r2
 8010e1a:	f7fe f9f1 	bl	800f200 <move_window>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d138      	bne.n	8010e9a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e2c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	330b      	adds	r3, #11
 8010e32:	781a      	ldrb	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	330b      	adds	r3, #11
 8010e38:	f042 0220 	orr.w	r2, r2, #32
 8010e3c:	b2d2      	uxtb	r2, r2
 8010e3e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6818      	ldr	r0, [r3, #0]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	461a      	mov	r2, r3
 8010e4a:	68f9      	ldr	r1, [r7, #12]
 8010e4c:	f7fe fefb 	bl	800fc46 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f103 021c 	add.w	r2, r3, #28
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	f7fd ff44 	bl	800ecea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3316      	adds	r3, #22
 8010e66:	6939      	ldr	r1, [r7, #16]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd ff3e 	bl	800ecea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	3312      	adds	r3, #18
 8010e72:	2100      	movs	r1, #0
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fd ff1d 	bl	800ecb4 <st_word>
					fs->wflag = 1;
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fe f9ea 	bl	800f25c <sync_fs>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	7d1b      	ldrb	r3, [r3, #20]
 8010e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	7dfa      	ldrb	r2, [r7, #23]
 8010e9e:	4611      	mov	r1, r2
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fd ffe2 	bl	800ee6a <unlock_fs>
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3718      	adds	r7, #24
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7ff ff70 	bl	8010d9e <f_sync>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010ec2:	7bfb      	ldrb	r3, [r7, #15]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d11d      	bne.n	8010f04 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f107 0208 	add.w	r2, r7, #8
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff fb53 	bl	801057c <validate>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d111      	bne.n	8010f04 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe f8e7 	bl	800f0b8 <dec_lock>
 8010eea:	4603      	mov	r3, r0
 8010eec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010eee:	7bfb      	ldrb	r3, [r7, #15]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fd ffb3 	bl	800ee6a <unlock_fs>
#endif
		}
	}
	return res;
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b090      	sub	sp, #64	@ 0x40
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f107 0208 	add.w	r2, r7, #8
 8010f1e:	4611      	mov	r1, r2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7ff fb2b 	bl	801057c <validate>
 8010f26:	4603      	mov	r3, r0
 8010f28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010f2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d103      	bne.n	8010f3c <f_lseek+0x2e>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	7d5b      	ldrb	r3, [r3, #21]
 8010f38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010f3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d009      	beq.n	8010f58 <f_lseek+0x4a>
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fd ff8c 	bl	800ee6a <unlock_fs>
 8010f52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010f56:	e229      	b.n	80113ac <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 80ea 	beq.w	8011136 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f68:	d164      	bne.n	8011034 <f_lseek+0x126>
			tbl = fp->cltbl;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f6e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f72:	1d1a      	adds	r2, r3, #4
 8010f74:	627a      	str	r2, [r7, #36]	@ 0x24
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	617b      	str	r3, [r7, #20]
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d044      	beq.n	8011014 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8c:	613b      	str	r3, [r7, #16]
 8010f8e:	2300      	movs	r3, #0
 8010f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f94:	3302      	adds	r3, #2
 8010f96:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9a:	60fb      	str	r3, [r7, #12]
 8010f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe f9e5 	bl	800f376 <get_fat>
 8010fac:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d809      	bhi.n	8010fc8 <f_lseek+0xba>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	755a      	strb	r2, [r3, #21]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	2102      	movs	r1, #2
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fd ff53 	bl	800ee6a <unlock_fs>
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	e1f1      	b.n	80113ac <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fce:	d109      	bne.n	8010fe4 <f_lseek+0xd6>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	755a      	strb	r2, [r3, #21]
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	2101      	movs	r1, #1
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fd ff45 	bl	800ee6a <unlock_fs>
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e1e3      	b.n	80113ac <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d0d4      	beq.n	8010f98 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d809      	bhi.n	801100a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	1d1a      	adds	r2, r3, #4
 8010ffa:	627a      	str	r2, [r7, #36]	@ 0x24
 8010ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ffe:	601a      	str	r2, [r3, #0]
 8011000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011002:	1d1a      	adds	r2, r3, #4
 8011004:	627a      	str	r2, [r7, #36]	@ 0x24
 8011006:	693a      	ldr	r2, [r7, #16]
 8011008:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	699b      	ldr	r3, [r3, #24]
 801100e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011010:	429a      	cmp	r2, r3
 8011012:	d3ba      	bcc.n	8010f8a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801101a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801101c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	429a      	cmp	r2, r3
 8011022:	d803      	bhi.n	801102c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011026:	2200      	movs	r2, #0
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	e1b6      	b.n	801139a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801102c:	2311      	movs	r3, #17
 801102e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011032:	e1b2      	b.n	801139a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	429a      	cmp	r2, r3
 801103c:	d902      	bls.n	8011044 <f_lseek+0x136>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	f000 81a4 	beq.w	801139a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	3b01      	subs	r3, #1
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f7fe fc1a 	bl	800f892 <clmt_clust>
 801105e:	4602      	mov	r2, r0
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	69db      	ldr	r3, [r3, #28]
 801106a:	4619      	mov	r1, r3
 801106c:	4610      	mov	r0, r2
 801106e:	f7fe f963 	bl	800f338 <clust2sect>
 8011072:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d109      	bne.n	801108e <f_lseek+0x180>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2202      	movs	r2, #2
 801107e:	755a      	strb	r2, [r3, #21]
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	2102      	movs	r1, #2
 8011084:	4618      	mov	r0, r3
 8011086:	f7fd fef0 	bl	800ee6a <unlock_fs>
 801108a:	2302      	movs	r3, #2
 801108c:	e18e      	b.n	80113ac <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	3b01      	subs	r3, #1
 8011092:	0a5b      	lsrs	r3, r3, #9
 8011094:	68ba      	ldr	r2, [r7, #8]
 8011096:	8952      	ldrh	r2, [r2, #10]
 8011098:	3a01      	subs	r2, #1
 801109a:	4013      	ands	r3, r2
 801109c:	69ba      	ldr	r2, [r7, #24]
 801109e:	4413      	add	r3, r2
 80110a0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f000 8175 	beq.w	801139a <f_lseek+0x48c>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6a1b      	ldr	r3, [r3, #32]
 80110b4:	69ba      	ldr	r2, [r7, #24]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	f000 816f 	beq.w	801139a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	7d1b      	ldrb	r3, [r3, #20]
 80110c0:	b25b      	sxtb	r3, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	da1d      	bge.n	8011102 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	7858      	ldrb	r0, [r3, #1]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a1a      	ldr	r2, [r3, #32]
 80110d4:	2301      	movs	r3, #1
 80110d6:	f7fd fd73 	bl	800ebc0 <disk_write>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d009      	beq.n	80110f4 <f_lseek+0x1e6>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	755a      	strb	r2, [r3, #21]
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2101      	movs	r1, #1
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fd febd 	bl	800ee6a <unlock_fs>
 80110f0:	2301      	movs	r3, #1
 80110f2:	e15b      	b.n	80113ac <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	7d1b      	ldrb	r3, [r3, #20]
 80110f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	7858      	ldrb	r0, [r3, #1]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801110c:	2301      	movs	r3, #1
 801110e:	69ba      	ldr	r2, [r7, #24]
 8011110:	f7fd fd36 	bl	800eb80 <disk_read>
 8011114:	4603      	mov	r3, r0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d009      	beq.n	801112e <f_lseek+0x220>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2201      	movs	r2, #1
 801111e:	755a      	strb	r2, [r3, #21]
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	2101      	movs	r1, #1
 8011124:	4618      	mov	r0, r3
 8011126:	f7fd fea0 	bl	800ee6a <unlock_fs>
 801112a:	2301      	movs	r3, #1
 801112c:	e13e      	b.n	80113ac <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	69ba      	ldr	r2, [r7, #24]
 8011132:	621a      	str	r2, [r3, #32]
 8011134:	e131      	b.n	801139a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	429a      	cmp	r2, r3
 801113e:	d908      	bls.n	8011152 <f_lseek+0x244>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	7d1b      	ldrb	r3, [r3, #20]
 8011144:	f003 0302 	and.w	r3, r3, #2
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	699b      	ldr	r3, [r3, #24]
 8011156:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011158:	2300      	movs	r3, #0
 801115a:	637b      	str	r3, [r7, #52]	@ 0x34
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011160:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 80c0 	beq.w	80112ea <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	895b      	ldrh	r3, [r3, #10]
 801116e:	025b      	lsls	r3, r3, #9
 8011170:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011172:	6a3b      	ldr	r3, [r7, #32]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01b      	beq.n	80111b0 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	1e5a      	subs	r2, r3, #1
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011182:	6a3b      	ldr	r3, [r7, #32]
 8011184:	1e59      	subs	r1, r3, #1
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801118c:	429a      	cmp	r2, r3
 801118e:	d30f      	bcc.n	80111b0 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	1e5a      	subs	r2, r3, #1
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	425b      	negs	r3, r3
 8011198:	401a      	ands	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	699b      	ldr	r3, [r3, #24]
 80111a2:	683a      	ldr	r2, [r7, #0]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	69db      	ldr	r3, [r3, #28]
 80111ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80111ae:	e02c      	b.n	801120a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80111b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d123      	bne.n	8011204 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2100      	movs	r1, #0
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe face 	bl	800f762 <create_chain>
 80111c6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80111c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d109      	bne.n	80111e2 <f_lseek+0x2d4>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2202      	movs	r2, #2
 80111d2:	755a      	strb	r2, [r3, #21]
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	2102      	movs	r1, #2
 80111d8:	4618      	mov	r0, r3
 80111da:	f7fd fe46 	bl	800ee6a <unlock_fs>
 80111de:	2302      	movs	r3, #2
 80111e0:	e0e4      	b.n	80113ac <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e8:	d109      	bne.n	80111fe <f_lseek+0x2f0>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2201      	movs	r2, #1
 80111ee:	755a      	strb	r2, [r3, #21]
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	2101      	movs	r1, #1
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7fd fe38 	bl	800ee6a <unlock_fs>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e0d6      	b.n	80113ac <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011202:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011208:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801120a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801120c:	2b00      	cmp	r3, #0
 801120e:	d06c      	beq.n	80112ea <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011210:	e044      	b.n	801129c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011212:	683a      	ldr	r2, [r7, #0]
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	603b      	str	r3, [r7, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	699a      	ldr	r2, [r3, #24]
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	441a      	add	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	7d1b      	ldrb	r3, [r3, #20]
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00b      	beq.n	801124a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011236:	4618      	mov	r0, r3
 8011238:	f7fe fa93 	bl	800f762 <create_chain>
 801123c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801123e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011240:	2b00      	cmp	r3, #0
 8011242:	d108      	bne.n	8011256 <f_lseek+0x348>
							ofs = 0; break;
 8011244:	2300      	movs	r3, #0
 8011246:	603b      	str	r3, [r7, #0]
 8011248:	e02c      	b.n	80112a4 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe f891 	bl	800f376 <get_fat>
 8011254:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125c:	d109      	bne.n	8011272 <f_lseek+0x364>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2201      	movs	r2, #1
 8011262:	755a      	strb	r2, [r3, #21]
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2101      	movs	r1, #1
 8011268:	4618      	mov	r0, r3
 801126a:	f7fd fdfe 	bl	800ee6a <unlock_fs>
 801126e:	2301      	movs	r3, #1
 8011270:	e09c      	b.n	80113ac <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011274:	2b01      	cmp	r3, #1
 8011276:	d904      	bls.n	8011282 <f_lseek+0x374>
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	699b      	ldr	r3, [r3, #24]
 801127c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801127e:	429a      	cmp	r2, r3
 8011280:	d309      	bcc.n	8011296 <f_lseek+0x388>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2202      	movs	r2, #2
 8011286:	755a      	strb	r2, [r3, #21]
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2102      	movs	r1, #2
 801128c:	4618      	mov	r0, r3
 801128e:	f7fd fdec 	bl	800ee6a <unlock_fs>
 8011292:	2302      	movs	r3, #2
 8011294:	e08a      	b.n	80113ac <f_lseek+0x49e>
					fp->clust = clst;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801129a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d8b6      	bhi.n	8011212 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	699a      	ldr	r2, [r3, #24]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	441a      	add	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d017      	beq.n	80112ea <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fe f83a 	bl	800f338 <clust2sect>
 80112c4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80112c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d109      	bne.n	80112e0 <f_lseek+0x3d2>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2202      	movs	r2, #2
 80112d0:	755a      	strb	r2, [r3, #21]
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	2102      	movs	r1, #2
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fd fdc7 	bl	800ee6a <unlock_fs>
 80112dc:	2302      	movs	r3, #2
 80112de:	e065      	b.n	80113ac <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	0a5b      	lsrs	r3, r3, #9
 80112e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112e6:	4413      	add	r3, r2
 80112e8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	699a      	ldr	r2, [r3, #24]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d90a      	bls.n	801130c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	699a      	ldr	r2, [r3, #24]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	7d1b      	ldrb	r3, [r3, #20]
 8011302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011306:	b2da      	uxtb	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	699b      	ldr	r3, [r3, #24]
 8011310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011314:	2b00      	cmp	r3, #0
 8011316:	d040      	beq.n	801139a <f_lseek+0x48c>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a1b      	ldr	r3, [r3, #32]
 801131c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801131e:	429a      	cmp	r2, r3
 8011320:	d03b      	beq.n	801139a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	7d1b      	ldrb	r3, [r3, #20]
 8011326:	b25b      	sxtb	r3, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	da1d      	bge.n	8011368 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	7858      	ldrb	r0, [r3, #1]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a1a      	ldr	r2, [r3, #32]
 801133a:	2301      	movs	r3, #1
 801133c:	f7fd fc40 	bl	800ebc0 <disk_write>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d009      	beq.n	801135a <f_lseek+0x44c>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2201      	movs	r2, #1
 801134a:	755a      	strb	r2, [r3, #21]
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2101      	movs	r1, #1
 8011350:	4618      	mov	r0, r3
 8011352:	f7fd fd8a 	bl	800ee6a <unlock_fs>
 8011356:	2301      	movs	r3, #1
 8011358:	e028      	b.n	80113ac <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	7d1b      	ldrb	r3, [r3, #20]
 801135e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011362:	b2da      	uxtb	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	7858      	ldrb	r0, [r3, #1]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011372:	2301      	movs	r3, #1
 8011374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011376:	f7fd fc03 	bl	800eb80 <disk_read>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d009      	beq.n	8011394 <f_lseek+0x486>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	755a      	strb	r2, [r3, #21]
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	2101      	movs	r1, #1
 801138a:	4618      	mov	r0, r3
 801138c:	f7fd fd6d 	bl	800ee6a <unlock_fs>
 8011390:	2301      	movs	r3, #1
 8011392:	e00b      	b.n	80113ac <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011398:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80113a0:	4611      	mov	r1, r2
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fd fd61 	bl	800ee6a <unlock_fs>
 80113a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3740      	adds	r7, #64	@ 0x40
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b096      	sub	sp, #88	@ 0x58
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80113bc:	f107 0108 	add.w	r1, r7, #8
 80113c0:	1d3b      	adds	r3, r7, #4
 80113c2:	2202      	movs	r2, #2
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fe fe85 	bl	80100d4 <find_volume>
 80113ca:	4603      	mov	r3, r0
 80113cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80113d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f040 80ec 	bne.w	80115b6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	f107 030c 	add.w	r3, r7, #12
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fe fd68 	bl	800febc <follow_path>
 80113ec:	4603      	mov	r3, r0
 80113ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80113f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d102      	bne.n	8011400 <f_mkdir+0x4c>
 80113fa:	2308      	movs	r3, #8
 80113fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011400:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011404:	2b04      	cmp	r3, #4
 8011406:	f040 80d6 	bne.w	80115b6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801140a:	f107 030c 	add.w	r3, r7, #12
 801140e:	2100      	movs	r1, #0
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe f9a6 	bl	800f762 <create_chain>
 8011416:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	895b      	ldrh	r3, [r3, #10]
 801141c:	025b      	lsls	r3, r3, #9
 801141e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <f_mkdir+0x7e>
 801142c:	2307      	movs	r3, #7
 801142e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011434:	2b01      	cmp	r3, #1
 8011436:	d102      	bne.n	801143e <f_mkdir+0x8a>
 8011438:	2302      	movs	r3, #2
 801143a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801143e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011444:	d102      	bne.n	801144c <f_mkdir+0x98>
 8011446:	2301      	movs	r3, #1
 8011448:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801144c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011450:	2b00      	cmp	r3, #0
 8011452:	d106      	bne.n	8011462 <f_mkdir+0xae>
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	4618      	mov	r0, r3
 8011458:	f7fd fe8e 	bl	800f178 <sync_window>
 801145c:	4603      	mov	r3, r0
 801145e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8011462:	f7fd faef 	bl	800ea44 <get_fattime>
 8011466:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011468:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801146c:	2b00      	cmp	r3, #0
 801146e:	d16a      	bne.n	8011546 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011474:	4618      	mov	r0, r3
 8011476:	f7fd ff5f 	bl	800f338 <clust2sect>
 801147a:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	3334      	adds	r3, #52	@ 0x34
 8011480:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8011482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011486:	2100      	movs	r1, #0
 8011488:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801148a:	f7fd fc7b 	bl	800ed84 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801148e:	220b      	movs	r2, #11
 8011490:	2120      	movs	r1, #32
 8011492:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011494:	f7fd fc76 	bl	800ed84 <mem_set>
					dir[DIR_Name] = '.';
 8011498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801149a:	222e      	movs	r2, #46	@ 0x2e
 801149c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801149e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114a0:	330b      	adds	r3, #11
 80114a2:	2210      	movs	r2, #16
 80114a4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80114a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114a8:	3316      	adds	r3, #22
 80114aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fd fc1c 	bl	800ecea <st_dword>
					st_clust(fs, dir, dcl);
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80114b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fbc4 	bl	800fc46 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80114be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114c0:	3320      	adds	r3, #32
 80114c2:	2220      	movs	r2, #32
 80114c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fd fc3b 	bl	800ed42 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80114cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114ce:	3321      	adds	r3, #33	@ 0x21
 80114d0:	222e      	movs	r2, #46	@ 0x2e
 80114d2:	701a      	strb	r2, [r3, #0]
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	2b03      	cmp	r3, #3
 80114de:	d106      	bne.n	80114ee <f_mkdir+0x13a>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d101      	bne.n	80114ee <f_mkdir+0x13a>
 80114ea:	2300      	movs	r3, #0
 80114ec:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80114ee:	68b8      	ldr	r0, [r7, #8]
 80114f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114f2:	3320      	adds	r3, #32
 80114f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114f6:	4619      	mov	r1, r3
 80114f8:	f7fe fba5 	bl	800fc46 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	895b      	ldrh	r3, [r3, #10]
 8011500:	653b      	str	r3, [r7, #80]	@ 0x50
 8011502:	e01b      	b.n	801153c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8011504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011506:	1c5a      	adds	r2, r3, #1
 8011508:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801150a:	68ba      	ldr	r2, [r7, #8]
 801150c:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2201      	movs	r2, #1
 8011512:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fd fe2e 	bl	800f178 <sync_window>
 801151c:	4603      	mov	r3, r0
 801151e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8011522:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011526:	2b00      	cmp	r3, #0
 8011528:	d10c      	bne.n	8011544 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801152a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801152e:	2100      	movs	r1, #0
 8011530:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011532:	f7fd fc27 	bl	800ed84 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011538:	3b01      	subs	r3, #1
 801153a:	653b      	str	r3, [r7, #80]	@ 0x50
 801153c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1e0      	bne.n	8011504 <f_mkdir+0x150>
 8011542:	e000      	b.n	8011546 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8011544:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011546:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801154a:	2b00      	cmp	r3, #0
 801154c:	d107      	bne.n	801155e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801154e:	f107 030c 	add.w	r3, r7, #12
 8011552:	4618      	mov	r0, r3
 8011554:	f7fe fbec 	bl	800fd30 <dir_register>
 8011558:	4603      	mov	r3, r0
 801155a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801155e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011562:	2b00      	cmp	r3, #0
 8011564:	d120      	bne.n	80115a8 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011568:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801156a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801156c:	3316      	adds	r3, #22
 801156e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011570:	4618      	mov	r0, r3
 8011572:	f7fd fbba 	bl	800ecea <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801157a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801157c:	4618      	mov	r0, r3
 801157e:	f7fe fb62 	bl	800fc46 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011584:	330b      	adds	r3, #11
 8011586:	2210      	movs	r2, #16
 8011588:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	2201      	movs	r2, #1
 801158e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011590:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10e      	bne.n	80115b6 <f_mkdir+0x202>
					res = sync_fs(fs);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	4618      	mov	r0, r3
 801159c:	f7fd fe5e 	bl	800f25c <sync_fs>
 80115a0:	4603      	mov	r3, r0
 80115a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80115a6:	e006      	b.n	80115b6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80115a8:	f107 030c 	add.w	r3, r7, #12
 80115ac:	2200      	movs	r2, #0
 80115ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fe f871 	bl	800f698 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80115bc:	4611      	mov	r1, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fd fc53 	bl	800ee6a <unlock_fs>
 80115c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3758      	adds	r7, #88	@ 0x58
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b087      	sub	sp, #28
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4613      	mov	r3, r2
 80115dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80115de:	2301      	movs	r3, #1
 80115e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80115e6:	4b1f      	ldr	r3, [pc, #124]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 80115e8:	7a5b      	ldrb	r3, [r3, #9]
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d131      	bne.n	8011654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80115f0:	4b1c      	ldr	r3, [pc, #112]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 80115f2:	7a5b      	ldrb	r3, [r3, #9]
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	461a      	mov	r2, r3
 80115f8:	4b1a      	ldr	r3, [pc, #104]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 80115fa:	2100      	movs	r1, #0
 80115fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115fe:	4b19      	ldr	r3, [pc, #100]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 8011600:	7a5b      	ldrb	r3, [r3, #9]
 8011602:	b2db      	uxtb	r3, r3
 8011604:	4a17      	ldr	r2, [pc, #92]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	4413      	add	r3, r2
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801160e:	4b15      	ldr	r3, [pc, #84]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 8011610:	7a5b      	ldrb	r3, [r3, #9]
 8011612:	b2db      	uxtb	r3, r3
 8011614:	461a      	mov	r2, r3
 8011616:	4b13      	ldr	r3, [pc, #76]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 8011618:	4413      	add	r3, r2
 801161a:	79fa      	ldrb	r2, [r7, #7]
 801161c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801161e:	4b11      	ldr	r3, [pc, #68]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 8011620:	7a5b      	ldrb	r3, [r3, #9]
 8011622:	b2db      	uxtb	r3, r3
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	b2d1      	uxtb	r1, r2
 8011628:	4a0e      	ldr	r2, [pc, #56]	@ (8011664 <FATFS_LinkDriverEx+0x94>)
 801162a:	7251      	strb	r1, [r2, #9]
 801162c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801162e:	7dbb      	ldrb	r3, [r7, #22]
 8011630:	3330      	adds	r3, #48	@ 0x30
 8011632:	b2da      	uxtb	r2, r3
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	3301      	adds	r3, #1
 801163c:	223a      	movs	r2, #58	@ 0x3a
 801163e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	3302      	adds	r3, #2
 8011644:	222f      	movs	r2, #47	@ 0x2f
 8011646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	3303      	adds	r3, #3
 801164c:	2200      	movs	r2, #0
 801164e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011654:	7dfb      	ldrb	r3, [r7, #23]
}
 8011656:	4618      	mov	r0, r3
 8011658:	371c      	adds	r7, #28
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	200017fc 	.word	0x200017fc

08011668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011672:	2200      	movs	r2, #0
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7ff ffaa 	bl	80115d0 <FATFS_LinkDriverEx>
 801167c:	4603      	mov	r3, r0
}
 801167e:	4618      	mov	r0, r3
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b084      	sub	sp, #16
 801168a:	af00      	add	r7, sp, #0
 801168c:	4603      	mov	r3, r0
 801168e:	6039      	str	r1, [r7, #0]
 8011690:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011692:	2300      	movs	r3, #0
 8011694:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011696:	f107 0308 	add.w	r3, r7, #8
 801169a:	2101      	movs	r1, #1
 801169c:	4618      	mov	r0, r3
 801169e:	f000 f939 	bl	8011914 <osSemaphoreCreate>
 80116a2:	4602      	mov	r2, r0
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	bf14      	ite	ne
 80116b0:	2301      	movne	r3, #1
 80116b2:	2300      	moveq	r3, #0
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	60fb      	str	r3, [r7, #12]

    return ret;
 80116b8:	68fb      	ldr	r3, [r7, #12]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b082      	sub	sp, #8
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f9c4 	bl	8011a58 <osSemaphoreDelete>
#endif
    return 1;
 80116d0:	2301      	movs	r3, #1
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b084      	sub	sp, #16
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80116e2:	2300      	movs	r3, #0
 80116e4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80116e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 f930 	bl	8011950 <osSemaphoreWait>
 80116f0:	4603      	mov	r3, r0
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80116f6:	2301      	movs	r3, #1
 80116f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80116fa:	68fb      	ldr	r3, [r7, #12]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 f96d 	bl	80119ec <osSemaphoreRelease>
#endif
}
 8011712:	bf00      	nop
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801171a:	b480      	push	{r7}
 801171c:	b085      	sub	sp, #20
 801171e:	af00      	add	r7, sp, #0
 8011720:	4603      	mov	r3, r0
 8011722:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011724:	2300      	movs	r3, #0
 8011726:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801172c:	2b84      	cmp	r3, #132	@ 0x84
 801172e:	d005      	beq.n	801173c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011730:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	4413      	add	r3, r2
 8011738:	3303      	adds	r3, #3
 801173a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801173c:	68fb      	ldr	r3, [r7, #12]
}
 801173e:	4618      	mov	r0, r3
 8011740:	3714      	adds	r7, #20
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801174a:	b480      	push	{r7}
 801174c:	b083      	sub	sp, #12
 801174e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011750:	f3ef 8305 	mrs	r3, IPSR
 8011754:	607b      	str	r3, [r7, #4]
  return(result);
 8011756:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011758:	2b00      	cmp	r3, #0
 801175a:	bf14      	ite	ne
 801175c:	2301      	movne	r3, #1
 801175e:	2300      	moveq	r3, #0
 8011760:	b2db      	uxtb	r3, r3
}
 8011762:	4618      	mov	r0, r3
 8011764:	370c      	adds	r7, #12
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr

0801176e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011772:	f001 f9eb 	bl	8012b4c <vTaskStartScheduler>
  
  return osOK;
 8011776:	2300      	movs	r3, #0
}
 8011778:	4618      	mov	r0, r3
 801177a:	bd80      	pop	{r7, pc}

0801177c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801177e:	b087      	sub	sp, #28
 8011780:	af02      	add	r7, sp, #8
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	685c      	ldr	r4, [r3, #4]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011792:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff ffbd 	bl	801171a <makeFreeRtosPriority>
 80117a0:	4602      	mov	r2, r0
 80117a2:	f107 030c 	add.w	r3, r7, #12
 80117a6:	9301      	str	r3, [sp, #4]
 80117a8:	9200      	str	r2, [sp, #0]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	4632      	mov	r2, r6
 80117ae:	4629      	mov	r1, r5
 80117b0:	4620      	mov	r0, r4
 80117b2:	f000 ffad 	bl	8012710 <xTaskCreate>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d001      	beq.n	80117c0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80117bc:	2300      	movs	r3, #0
 80117be:	e000      	b.n	80117c2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80117c0:	68fb      	ldr	r3, [r7, #12]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <osDelay+0x16>
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	e000      	b.n	80117e2 <osDelay+0x18>
 80117e0:	2301      	movs	r3, #1
 80117e2:	4618      	mov	r0, r3
 80117e4:	f001 f8e8 	bl	80129b8 <vTaskDelay>
  
  return osOK;
 80117e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b082      	sub	sp, #8
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80117fa:	2001      	movs	r0, #1
 80117fc:	f000 fada 	bl	8011db4 <xQueueCreateMutex>
 8011800:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8011802:	4618      	mov	r0, r3
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
	...

0801180c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011816:	2300      	movs	r3, #0
 8011818:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <osMutexWait+0x18>
    return osErrorParameter;
 8011820:	2380      	movs	r3, #128	@ 0x80
 8011822:	e03a      	b.n	801189a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011824:	2300      	movs	r3, #0
 8011826:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182e:	d103      	bne.n	8011838 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011830:	f04f 33ff 	mov.w	r3, #4294967295
 8011834:	60fb      	str	r3, [r7, #12]
 8011836:	e009      	b.n	801184c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d006      	beq.n	801184c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d101      	bne.n	801184c <osMutexWait+0x40>
      ticks = 1;
 8011848:	2301      	movs	r3, #1
 801184a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801184c:	f7ff ff7d 	bl	801174a <inHandlerMode>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d017      	beq.n	8011886 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011856:	f107 0308 	add.w	r3, r7, #8
 801185a:	461a      	mov	r2, r3
 801185c:	2100      	movs	r1, #0
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 fd62 	bl	8012328 <xQueueReceiveFromISR>
 8011864:	4603      	mov	r3, r0
 8011866:	2b01      	cmp	r3, #1
 8011868:	d001      	beq.n	801186e <osMutexWait+0x62>
      return osErrorOS;
 801186a:	23ff      	movs	r3, #255	@ 0xff
 801186c:	e015      	b.n	801189a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d011      	beq.n	8011898 <osMutexWait+0x8c>
 8011874:	4b0b      	ldr	r3, [pc, #44]	@ (80118a4 <osMutexWait+0x98>)
 8011876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	f3bf 8f6f 	isb	sy
 8011884:	e008      	b.n	8011898 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011886:	68f9      	ldr	r1, [r7, #12]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fc3d 	bl	8012108 <xQueueSemaphoreTake>
 801188e:	4603      	mov	r3, r0
 8011890:	2b01      	cmp	r3, #1
 8011892:	d001      	beq.n	8011898 <osMutexWait+0x8c>
    return osErrorOS;
 8011894:	23ff      	movs	r3, #255	@ 0xff
 8011896:	e000      	b.n	801189a <osMutexWait+0x8e>
  }
  
  return osOK;
 8011898:	2300      	movs	r3, #0
}
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	e000ed04 	.word	0xe000ed04

080118a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80118b0:	2300      	movs	r3, #0
 80118b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80118b4:	2300      	movs	r3, #0
 80118b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80118b8:	f7ff ff47 	bl	801174a <inHandlerMode>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d016      	beq.n	80118f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80118c2:	f107 0308 	add.w	r3, r7, #8
 80118c6:	4619      	mov	r1, r3
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 fb8d 	bl	8011fe8 <xQueueGiveFromISR>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d001      	beq.n	80118d8 <osMutexRelease+0x30>
      return osErrorOS;
 80118d4:	23ff      	movs	r3, #255	@ 0xff
 80118d6:	e017      	b.n	8011908 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d013      	beq.n	8011906 <osMutexRelease+0x5e>
 80118de:	4b0c      	ldr	r3, [pc, #48]	@ (8011910 <osMutexRelease+0x68>)
 80118e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118e4:	601a      	str	r2, [r3, #0]
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	e00a      	b.n	8011906 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80118f0:	2300      	movs	r3, #0
 80118f2:	2200      	movs	r2, #0
 80118f4:	2100      	movs	r1, #0
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fa74 	bl	8011de4 <xQueueGenericSend>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d001      	beq.n	8011906 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011902:	23ff      	movs	r3, #255	@ 0xff
 8011904:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011906:	68fb      	ldr	r3, [r7, #12]
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	e000ed04 	.word	0xe000ed04

08011914 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2b01      	cmp	r3, #1
 8011922:	d110      	bne.n	8011946 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011924:	2203      	movs	r2, #3
 8011926:	2100      	movs	r1, #0
 8011928:	2001      	movs	r0, #1
 801192a:	f000 f9d3 	bl	8011cd4 <xQueueGenericCreate>
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d005      	beq.n	8011942 <osSemaphoreCreate+0x2e>
 8011936:	2300      	movs	r3, #0
 8011938:	2200      	movs	r2, #0
 801193a:	2100      	movs	r1, #0
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f000 fa51 	bl	8011de4 <xQueueGenericSend>
    return sema;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	e000      	b.n	8011948 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8011946:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011948:	4618      	mov	r0, r3
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801195a:	2300      	movs	r3, #0
 801195c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d101      	bne.n	8011968 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011964:	2380      	movs	r3, #128	@ 0x80
 8011966:	e03a      	b.n	80119de <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011972:	d103      	bne.n	801197c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011974:	f04f 33ff 	mov.w	r3, #4294967295
 8011978:	60fb      	str	r3, [r7, #12]
 801197a:	e009      	b.n	8011990 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d006      	beq.n	8011990 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d101      	bne.n	8011990 <osSemaphoreWait+0x40>
      ticks = 1;
 801198c:	2301      	movs	r3, #1
 801198e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011990:	f7ff fedb 	bl	801174a <inHandlerMode>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d017      	beq.n	80119ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801199a:	f107 0308 	add.w	r3, r7, #8
 801199e:	461a      	mov	r2, r3
 80119a0:	2100      	movs	r1, #0
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fcc0 	bl	8012328 <xQueueReceiveFromISR>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d001      	beq.n	80119b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80119ae:	23ff      	movs	r3, #255	@ 0xff
 80119b0:	e015      	b.n	80119de <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d011      	beq.n	80119dc <osSemaphoreWait+0x8c>
 80119b8:	4b0b      	ldr	r3, [pc, #44]	@ (80119e8 <osSemaphoreWait+0x98>)
 80119ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	f3bf 8f4f 	dsb	sy
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	e008      	b.n	80119dc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80119ca:	68f9      	ldr	r1, [r7, #12]
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f000 fb9b 	bl	8012108 <xQueueSemaphoreTake>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d001      	beq.n	80119dc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80119d8:	23ff      	movs	r3, #255	@ 0xff
 80119da:	e000      	b.n	80119de <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	e000ed04 	.word	0xe000ed04

080119ec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80119f4:	2300      	movs	r3, #0
 80119f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80119f8:	2300      	movs	r3, #0
 80119fa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80119fc:	f7ff fea5 	bl	801174a <inHandlerMode>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d016      	beq.n	8011a34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011a06:	f107 0308 	add.w	r3, r7, #8
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 faeb 	bl	8011fe8 <xQueueGiveFromISR>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d001      	beq.n	8011a1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011a18:	23ff      	movs	r3, #255	@ 0xff
 8011a1a:	e017      	b.n	8011a4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d013      	beq.n	8011a4a <osSemaphoreRelease+0x5e>
 8011a22:	4b0c      	ldr	r3, [pc, #48]	@ (8011a54 <osSemaphoreRelease+0x68>)
 8011a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	f3bf 8f4f 	dsb	sy
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	e00a      	b.n	8011a4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011a34:	2300      	movs	r3, #0
 8011a36:	2200      	movs	r2, #0
 8011a38:	2100      	movs	r1, #0
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 f9d2 	bl	8011de4 <xQueueGenericSend>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d001      	beq.n	8011a4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011a46:	23ff      	movs	r3, #255	@ 0xff
 8011a48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	e000ed04 	.word	0xe000ed04

08011a58 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011a60:	f7ff fe73 	bl	801174a <inHandlerMode>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d001      	beq.n	8011a6e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011a6a:	2382      	movs	r3, #130	@ 0x82
 8011a6c:	e003      	b.n	8011a76 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 fcdc 	bl	801242c <vQueueDelete>

  return osOK; 
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 ffcc 	bl	8012a24 <vTaskSuspend>
  
  return osOK;
 8011a8c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011a96:	b480      	push	{r7}
 8011a98:	b083      	sub	sp, #12
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f103 0208 	add.w	r2, r3, #8
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8011aae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f103 0208 	add.w	r2, r3, #8
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f103 0208 	add.w	r2, r3, #8
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011aca:	bf00      	nop
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr

08011ad6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011ad6:	b480      	push	{r7}
 8011ad8:	b083      	sub	sp, #12
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ae4:	bf00      	nop
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	68fa      	ldr	r2, [r7, #12]
 8011b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	689a      	ldr	r2, [r3, #8]
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	689b      	ldr	r3, [r3, #8]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	683a      	ldr	r2, [r7, #0]
 8011b1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	1c5a      	adds	r2, r3, #1
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	601a      	str	r2, [r3, #0]
}
 8011b2c:	bf00      	nop
 8011b2e:	3714      	adds	r7, #20
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b4e:	d103      	bne.n	8011b58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	60fb      	str	r3, [r7, #12]
 8011b56:	e00c      	b.n	8011b72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	60fb      	str	r3, [r7, #12]
 8011b5e:	e002      	b.n	8011b66 <vListInsert+0x2e>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	60fb      	str	r3, [r7, #12]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	68ba      	ldr	r2, [r7, #8]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d2f6      	bcs.n	8011b60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	683a      	ldr	r2, [r7, #0]
 8011b80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	68fa      	ldr	r2, [r7, #12]
 8011b86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	1c5a      	adds	r2, r3, #1
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	601a      	str	r2, [r3, #0]
}
 8011b9e:	bf00      	nop
 8011ba0:	3714      	adds	r7, #20
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr

08011baa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011baa:	b480      	push	{r7}
 8011bac:	b085      	sub	sp, #20
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	691b      	ldr	r3, [r3, #16]
 8011bb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	6892      	ldr	r2, [r2, #8]
 8011bc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	689b      	ldr	r3, [r3, #8]
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	6852      	ldr	r2, [r2, #4]
 8011bca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d103      	bne.n	8011bde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	689a      	ldr	r2, [r3, #8]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	1e5a      	subs	r2, r3, #1
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3714      	adds	r7, #20
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr
	...

08011c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10b      	bne.n	8011c2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011c26:	bf00      	nop
 8011c28:	bf00      	nop
 8011c2a:	e7fd      	b.n	8011c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011c2c:	f001 fecc 	bl	80139c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c38:	68f9      	ldr	r1, [r7, #12]
 8011c3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011c3c:	fb01 f303 	mul.w	r3, r1, r3
 8011c40:	441a      	add	r2, r3
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	68f9      	ldr	r1, [r7, #12]
 8011c60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011c62:	fb01 f303 	mul.w	r3, r1, r3
 8011c66:	441a      	add	r2, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	22ff      	movs	r2, #255	@ 0xff
 8011c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	22ff      	movs	r2, #255	@ 0xff
 8011c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d114      	bne.n	8011cac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d01a      	beq.n	8011cc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	3310      	adds	r3, #16
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f001 f99e 	bl	8012fd0 <xTaskRemoveFromEventList>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d012      	beq.n	8011cc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cd0 <xQueueGenericReset+0xd0>)
 8011c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ca0:	601a      	str	r2, [r3, #0]
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	e009      	b.n	8011cc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	3310      	adds	r3, #16
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7ff fef0 	bl	8011a96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	3324      	adds	r3, #36	@ 0x24
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff feeb 	bl	8011a96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011cc0:	f001 feb4 	bl	8013a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011cc4:	2301      	movs	r3, #1
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	e000ed04 	.word	0xe000ed04

08011cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b08a      	sub	sp, #40	@ 0x28
 8011cd8:	af02      	add	r7, sp, #8
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10b      	bne.n	8011d00 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	613b      	str	r3, [r7, #16]
}
 8011cfa:	bf00      	nop
 8011cfc:	bf00      	nop
 8011cfe:	e7fd      	b.n	8011cfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	fb02 f303 	mul.w	r3, r2, r3
 8011d08:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	3348      	adds	r3, #72	@ 0x48
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f001 ff7c 	bl	8013c0c <pvPortMalloc>
 8011d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00d      	beq.n	8011d38 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	3348      	adds	r3, #72	@ 0x48
 8011d24:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011d26:	79fa      	ldrb	r2, [r7, #7]
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	68b9      	ldr	r1, [r7, #8]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 f805 	bl	8011d42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011d38:	69bb      	ldr	r3, [r7, #24]
	}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3720      	adds	r7, #32
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	60b9      	str	r1, [r7, #8]
 8011d4c:	607a      	str	r2, [r7, #4]
 8011d4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d103      	bne.n	8011d5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	69ba      	ldr	r2, [r7, #24]
 8011d5a:	601a      	str	r2, [r3, #0]
 8011d5c:	e002      	b.n	8011d64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d70:	2101      	movs	r1, #1
 8011d72:	69b8      	ldr	r0, [r7, #24]
 8011d74:	f7ff ff44 	bl	8011c00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d78:	bf00      	nop
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00e      	beq.n	8011dac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011da0:	2300      	movs	r3, #0
 8011da2:	2200      	movs	r2, #0
 8011da4:	2100      	movs	r1, #0
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 f81c 	bl	8011de4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	4603      	mov	r3, r0
 8011dbc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	617b      	str	r3, [r7, #20]
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011dc6:	79fb      	ldrb	r3, [r7, #7]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	6939      	ldr	r1, [r7, #16]
 8011dcc:	6978      	ldr	r0, [r7, #20]
 8011dce:	f7ff ff81 	bl	8011cd4 <xQueueGenericCreate>
 8011dd2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f7ff ffd3 	bl	8011d80 <prvInitialiseMutex>

		return xNewQueue;
 8011dda:	68fb      	ldr	r3, [r7, #12]
	}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b08e      	sub	sp, #56	@ 0x38
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011df2:	2300      	movs	r3, #0
 8011df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10b      	bne.n	8011e18 <xQueueGenericSend+0x34>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011e12:	bf00      	nop
 8011e14:	bf00      	nop
 8011e16:	e7fd      	b.n	8011e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d103      	bne.n	8011e26 <xQueueGenericSend+0x42>
 8011e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <xQueueGenericSend+0x46>
 8011e26:	2301      	movs	r3, #1
 8011e28:	e000      	b.n	8011e2c <xQueueGenericSend+0x48>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10b      	bne.n	8011e48 <xQueueGenericSend+0x64>
	__asm volatile
 8011e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e34:	f383 8811 	msr	BASEPRI, r3
 8011e38:	f3bf 8f6f 	isb	sy
 8011e3c:	f3bf 8f4f 	dsb	sy
 8011e40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011e42:	bf00      	nop
 8011e44:	bf00      	nop
 8011e46:	e7fd      	b.n	8011e44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	2b02      	cmp	r3, #2
 8011e4c:	d103      	bne.n	8011e56 <xQueueGenericSend+0x72>
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d101      	bne.n	8011e5a <xQueueGenericSend+0x76>
 8011e56:	2301      	movs	r3, #1
 8011e58:	e000      	b.n	8011e5c <xQueueGenericSend+0x78>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d10b      	bne.n	8011e78 <xQueueGenericSend+0x94>
	__asm volatile
 8011e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e64:	f383 8811 	msr	BASEPRI, r3
 8011e68:	f3bf 8f6f 	isb	sy
 8011e6c:	f3bf 8f4f 	dsb	sy
 8011e70:	623b      	str	r3, [r7, #32]
}
 8011e72:	bf00      	nop
 8011e74:	bf00      	nop
 8011e76:	e7fd      	b.n	8011e74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e78:	f001 fa50 	bl	801331c <xTaskGetSchedulerState>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d102      	bne.n	8011e88 <xQueueGenericSend+0xa4>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d101      	bne.n	8011e8c <xQueueGenericSend+0xa8>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e000      	b.n	8011e8e <xQueueGenericSend+0xaa>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d10b      	bne.n	8011eaa <xQueueGenericSend+0xc6>
	__asm volatile
 8011e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e96:	f383 8811 	msr	BASEPRI, r3
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	f3bf 8f4f 	dsb	sy
 8011ea2:	61fb      	str	r3, [r7, #28]
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop
 8011ea8:	e7fd      	b.n	8011ea6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011eaa:	f001 fd8d 	bl	80139c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d302      	bcc.n	8011ec0 <xQueueGenericSend+0xdc>
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d129      	bne.n	8011f14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ec0:	683a      	ldr	r2, [r7, #0]
 8011ec2:	68b9      	ldr	r1, [r7, #8]
 8011ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ec6:	f000 fae8 	bl	801249a <prvCopyDataToQueue>
 8011eca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d010      	beq.n	8011ef6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed6:	3324      	adds	r3, #36	@ 0x24
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f001 f879 	bl	8012fd0 <xTaskRemoveFromEventList>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d013      	beq.n	8011f0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8011fe4 <xQueueGenericSend+0x200>)
 8011ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	f3bf 8f6f 	isb	sy
 8011ef4:	e00a      	b.n	8011f0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d007      	beq.n	8011f0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011efc:	4b39      	ldr	r3, [pc, #228]	@ (8011fe4 <xQueueGenericSend+0x200>)
 8011efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f02:	601a      	str	r2, [r3, #0]
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f0c:	f001 fd8e 	bl	8013a2c <vPortExitCritical>
				return pdPASS;
 8011f10:	2301      	movs	r3, #1
 8011f12:	e063      	b.n	8011fdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d103      	bne.n	8011f22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f1a:	f001 fd87 	bl	8013a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	e05c      	b.n	8011fdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d106      	bne.n	8011f36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f28:	f107 0314 	add.w	r3, r7, #20
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f001 f8b3 	bl	8013098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f32:	2301      	movs	r3, #1
 8011f34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f36:	f001 fd79 	bl	8013a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f3a:	f000 fe59 	bl	8012bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f3e:	f001 fd43 	bl	80139c8 <vPortEnterCritical>
 8011f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f48:	b25b      	sxtb	r3, r3
 8011f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f4e:	d103      	bne.n	8011f58 <xQueueGenericSend+0x174>
 8011f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f52:	2200      	movs	r2, #0
 8011f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f5e:	b25b      	sxtb	r3, r3
 8011f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f64:	d103      	bne.n	8011f6e <xQueueGenericSend+0x18a>
 8011f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f6e:	f001 fd5d 	bl	8013a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f72:	1d3a      	adds	r2, r7, #4
 8011f74:	f107 0314 	add.w	r3, r7, #20
 8011f78:	4611      	mov	r1, r2
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f001 f8a2 	bl	80130c4 <xTaskCheckForTimeOut>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d124      	bne.n	8011fd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f88:	f000 fb7f 	bl	801268a <prvIsQueueFull>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d018      	beq.n	8011fc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f94:	3310      	adds	r3, #16
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	4611      	mov	r1, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 fff2 	bl	8012f84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011fa2:	f000 fb0a 	bl	80125ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011fa6:	f000 fe31 	bl	8012c0c <xTaskResumeAll>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	f47f af7c 	bne.w	8011eaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8011fe4 <xQueueGenericSend+0x200>)
 8011fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	f3bf 8f6f 	isb	sy
 8011fc2:	e772      	b.n	8011eaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011fc6:	f000 faf8 	bl	80125ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fca:	f000 fe1f 	bl	8012c0c <xTaskResumeAll>
 8011fce:	e76c      	b.n	8011eaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011fd2:	f000 faf2 	bl	80125ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fd6:	f000 fe19 	bl	8012c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3738      	adds	r7, #56	@ 0x38
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	e000ed04 	.word	0xe000ed04

08011fe8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08e      	sub	sp, #56	@ 0x38
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d10b      	bne.n	8012014 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012000:	f383 8811 	msr	BASEPRI, r3
 8012004:	f3bf 8f6f 	isb	sy
 8012008:	f3bf 8f4f 	dsb	sy
 801200c:	623b      	str	r3, [r7, #32]
}
 801200e:	bf00      	nop
 8012010:	bf00      	nop
 8012012:	e7fd      	b.n	8012010 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00b      	beq.n	8012034 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801201c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	61fb      	str	r3, [r7, #28]
}
 801202e:	bf00      	nop
 8012030:	bf00      	nop
 8012032:	e7fd      	b.n	8012030 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d103      	bne.n	8012044 <xQueueGiveFromISR+0x5c>
 801203c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801203e:	689b      	ldr	r3, [r3, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d101      	bne.n	8012048 <xQueueGiveFromISR+0x60>
 8012044:	2301      	movs	r3, #1
 8012046:	e000      	b.n	801204a <xQueueGiveFromISR+0x62>
 8012048:	2300      	movs	r3, #0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d10b      	bne.n	8012066 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801204e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	61bb      	str	r3, [r7, #24]
}
 8012060:	bf00      	nop
 8012062:	bf00      	nop
 8012064:	e7fd      	b.n	8012062 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012066:	f001 fd8f 	bl	8013b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801206a:	f3ef 8211 	mrs	r2, BASEPRI
 801206e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	617a      	str	r2, [r7, #20]
 8012080:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012082:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801208a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012092:	429a      	cmp	r2, r3
 8012094:	d22b      	bcs.n	80120ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a2:	1c5a      	adds	r2, r3, #1
 80120a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80120ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b0:	d112      	bne.n	80120d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d016      	beq.n	80120e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120bc:	3324      	adds	r3, #36	@ 0x24
 80120be:	4618      	mov	r0, r3
 80120c0:	f000 ff86 	bl	8012fd0 <xTaskRemoveFromEventList>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00e      	beq.n	80120e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00b      	beq.n	80120e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	2201      	movs	r2, #1
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	e007      	b.n	80120e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120dc:	3301      	adds	r3, #1
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	b25a      	sxtb	r2, r3
 80120e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80120e8:	2301      	movs	r3, #1
 80120ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80120ec:	e001      	b.n	80120f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80120f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80120fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012100:	4618      	mov	r0, r3
 8012102:	3738      	adds	r7, #56	@ 0x38
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b08e      	sub	sp, #56	@ 0x38
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012112:	2300      	movs	r3, #0
 8012114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801211a:	2300      	movs	r3, #0
 801211c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801211e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d10b      	bne.n	801213c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	623b      	str	r3, [r7, #32]
}
 8012136:	bf00      	nop
 8012138:	bf00      	nop
 801213a:	e7fd      	b.n	8012138 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00b      	beq.n	801215c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	61fb      	str	r3, [r7, #28]
}
 8012156:	bf00      	nop
 8012158:	bf00      	nop
 801215a:	e7fd      	b.n	8012158 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801215c:	f001 f8de 	bl	801331c <xTaskGetSchedulerState>
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d102      	bne.n	801216c <xQueueSemaphoreTake+0x64>
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d101      	bne.n	8012170 <xQueueSemaphoreTake+0x68>
 801216c:	2301      	movs	r3, #1
 801216e:	e000      	b.n	8012172 <xQueueSemaphoreTake+0x6a>
 8012170:	2300      	movs	r3, #0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10b      	bne.n	801218e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801217a:	f383 8811 	msr	BASEPRI, r3
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f3bf 8f4f 	dsb	sy
 8012186:	61bb      	str	r3, [r7, #24]
}
 8012188:	bf00      	nop
 801218a:	bf00      	nop
 801218c:	e7fd      	b.n	801218a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801218e:	f001 fc1b 	bl	80139c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012196:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801219a:	2b00      	cmp	r3, #0
 801219c:	d024      	beq.n	80121e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a0:	1e5a      	subs	r2, r3, #1
 80121a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d104      	bne.n	80121b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80121ae:	f001 fa61 	bl	8013674 <pvTaskIncrementMutexHeldCount>
 80121b2:	4602      	mov	r2, r0
 80121b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ba:	691b      	ldr	r3, [r3, #16]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00f      	beq.n	80121e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c2:	3310      	adds	r3, #16
 80121c4:	4618      	mov	r0, r3
 80121c6:	f000 ff03 	bl	8012fd0 <xTaskRemoveFromEventList>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d007      	beq.n	80121e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121d0:	4b54      	ldr	r3, [pc, #336]	@ (8012324 <xQueueSemaphoreTake+0x21c>)
 80121d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	f3bf 8f4f 	dsb	sy
 80121dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121e0:	f001 fc24 	bl	8013a2c <vPortExitCritical>
				return pdPASS;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e098      	b.n	801231a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d112      	bne.n	8012214 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80121ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00b      	beq.n	801220c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	617b      	str	r3, [r7, #20]
}
 8012206:	bf00      	nop
 8012208:	bf00      	nop
 801220a:	e7fd      	b.n	8012208 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801220c:	f001 fc0e 	bl	8013a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012210:	2300      	movs	r3, #0
 8012212:	e082      	b.n	801231a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012216:	2b00      	cmp	r3, #0
 8012218:	d106      	bne.n	8012228 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801221a:	f107 030c 	add.w	r3, r7, #12
 801221e:	4618      	mov	r0, r3
 8012220:	f000 ff3a 	bl	8013098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012224:	2301      	movs	r3, #1
 8012226:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012228:	f001 fc00 	bl	8013a2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801222c:	f000 fce0 	bl	8012bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012230:	f001 fbca 	bl	80139c8 <vPortEnterCritical>
 8012234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012236:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801223a:	b25b      	sxtb	r3, r3
 801223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012240:	d103      	bne.n	801224a <xQueueSemaphoreTake+0x142>
 8012242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012244:	2200      	movs	r2, #0
 8012246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012250:	b25b      	sxtb	r3, r3
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	d103      	bne.n	8012260 <xQueueSemaphoreTake+0x158>
 8012258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801225a:	2200      	movs	r2, #0
 801225c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012260:	f001 fbe4 	bl	8013a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012264:	463a      	mov	r2, r7
 8012266:	f107 030c 	add.w	r3, r7, #12
 801226a:	4611      	mov	r1, r2
 801226c:	4618      	mov	r0, r3
 801226e:	f000 ff29 	bl	80130c4 <xTaskCheckForTimeOut>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d132      	bne.n	80122de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012278:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801227a:	f000 f9f0 	bl	801265e <prvIsQueueEmpty>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d026      	beq.n	80122d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801228c:	f001 fb9c 	bl	80139c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	4618      	mov	r0, r3
 8012296:	f001 f85f 	bl	8013358 <xTaskPriorityInherit>
 801229a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801229c:	f001 fbc6 	bl	8013a2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80122a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a2:	3324      	adds	r3, #36	@ 0x24
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f000 fe6b 	bl	8012f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80122ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122b0:	f000 f983 	bl	80125ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80122b4:	f000 fcaa 	bl	8012c0c <xTaskResumeAll>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	f47f af67 	bne.w	801218e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80122c0:	4b18      	ldr	r3, [pc, #96]	@ (8012324 <xQueueSemaphoreTake+0x21c>)
 80122c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122c6:	601a      	str	r2, [r3, #0]
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	e75d      	b.n	801218e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80122d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122d4:	f000 f971 	bl	80125ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122d8:	f000 fc98 	bl	8012c0c <xTaskResumeAll>
 80122dc:	e757      	b.n	801218e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80122de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122e0:	f000 f96b 	bl	80125ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122e4:	f000 fc92 	bl	8012c0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122ea:	f000 f9b8 	bl	801265e <prvIsQueueEmpty>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f43f af4c 	beq.w	801218e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80122f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d00d      	beq.n	8012318 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80122fc:	f001 fb64 	bl	80139c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012302:	f000 f8b2 	bl	801246a <prvGetDisinheritPriorityAfterTimeout>
 8012306:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801230e:	4618      	mov	r0, r3
 8012310:	f001 f920 	bl	8013554 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012314:	f001 fb8a 	bl	8013a2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012318:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801231a:	4618      	mov	r0, r3
 801231c:	3738      	adds	r7, #56	@ 0x38
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	e000ed04 	.word	0xe000ed04

08012328 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b08e      	sub	sp, #56	@ 0x38
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10b      	bne.n	8012356 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801233e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	623b      	str	r3, [r7, #32]
}
 8012350:	bf00      	nop
 8012352:	bf00      	nop
 8012354:	e7fd      	b.n	8012352 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d103      	bne.n	8012364 <xQueueReceiveFromISR+0x3c>
 801235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <xQueueReceiveFromISR+0x40>
 8012364:	2301      	movs	r3, #1
 8012366:	e000      	b.n	801236a <xQueueReceiveFromISR+0x42>
 8012368:	2300      	movs	r3, #0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d10b      	bne.n	8012386 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801236e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	61fb      	str	r3, [r7, #28]
}
 8012380:	bf00      	nop
 8012382:	bf00      	nop
 8012384:	e7fd      	b.n	8012382 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012386:	f001 fbff 	bl	8013b88 <vPortValidateInterruptPriority>
	__asm volatile
 801238a:	f3ef 8211 	mrs	r2, BASEPRI
 801238e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012392:	f383 8811 	msr	BASEPRI, r3
 8012396:	f3bf 8f6f 	isb	sy
 801239a:	f3bf 8f4f 	dsb	sy
 801239e:	61ba      	str	r2, [r7, #24]
 80123a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80123a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80123ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d02f      	beq.n	8012412 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80123b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80123b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80123bc:	68b9      	ldr	r1, [r7, #8]
 80123be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80123c0:	f000 f8d5 	bl	801256e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80123c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c6:	1e5a      	subs	r2, r3, #1
 80123c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80123cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80123d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123d4:	d112      	bne.n	80123fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d016      	beq.n	801240c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e0:	3310      	adds	r3, #16
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 fdf4 	bl	8012fd0 <xTaskRemoveFromEventList>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00e      	beq.n	801240c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00b      	beq.n	801240c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2201      	movs	r2, #1
 80123f8:	601a      	str	r2, [r3, #0]
 80123fa:	e007      	b.n	801240c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80123fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012400:	3301      	adds	r3, #1
 8012402:	b2db      	uxtb	r3, r3
 8012404:	b25a      	sxtb	r2, r3
 8012406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801240c:	2301      	movs	r3, #1
 801240e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012410:	e001      	b.n	8012416 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8012412:	2300      	movs	r3, #0
 8012414:	637b      	str	r3, [r7, #52]	@ 0x34
 8012416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012418:	613b      	str	r3, [r7, #16]
	__asm volatile
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	f383 8811 	msr	BASEPRI, r3
}
 8012420:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012424:	4618      	mov	r0, r3
 8012426:	3738      	adds	r7, #56	@ 0x38
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10b      	bne.n	8012456 <vQueueDelete+0x2a>
	__asm volatile
 801243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012442:	f383 8811 	msr	BASEPRI, r3
 8012446:	f3bf 8f6f 	isb	sy
 801244a:	f3bf 8f4f 	dsb	sy
 801244e:	60bb      	str	r3, [r7, #8]
}
 8012450:	bf00      	nop
 8012452:	bf00      	nop
 8012454:	e7fd      	b.n	8012452 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f000 f930 	bl	80126bc <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f001 fca3 	bl	8013da8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801246a:	b480      	push	{r7}
 801246c:	b085      	sub	sp, #20
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012476:	2b00      	cmp	r3, #0
 8012478:	d006      	beq.n	8012488 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f1c3 0307 	rsb	r3, r3, #7
 8012484:	60fb      	str	r3, [r7, #12]
 8012486:	e001      	b.n	801248c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012488:	2300      	movs	r3, #0
 801248a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801248c:	68fb      	ldr	r3, [r7, #12]
	}
 801248e:	4618      	mov	r0, r3
 8012490:	3714      	adds	r7, #20
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr

0801249a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b086      	sub	sp, #24
 801249e:	af00      	add	r7, sp, #0
 80124a0:	60f8      	str	r0, [r7, #12]
 80124a2:	60b9      	str	r1, [r7, #8]
 80124a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80124a6:	2300      	movs	r3, #0
 80124a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10d      	bne.n	80124d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d14d      	bne.n	801255c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f000 ffbd 	bl	8013444 <xTaskPriorityDisinherit>
 80124ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2200      	movs	r2, #0
 80124d0:	609a      	str	r2, [r3, #8]
 80124d2:	e043      	b.n	801255c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d119      	bne.n	801250e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	6858      	ldr	r0, [r3, #4]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124e2:	461a      	mov	r2, r3
 80124e4:	68b9      	ldr	r1, [r7, #8]
 80124e6:	f002 ff10 	bl	801530a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	685a      	ldr	r2, [r3, #4]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124f2:	441a      	add	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	685a      	ldr	r2, [r3, #4]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	429a      	cmp	r2, r3
 8012502:	d32b      	bcc.n	801255c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	605a      	str	r2, [r3, #4]
 801250c:	e026      	b.n	801255c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	68d8      	ldr	r0, [r3, #12]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012516:	461a      	mov	r2, r3
 8012518:	68b9      	ldr	r1, [r7, #8]
 801251a:	f002 fef6 	bl	801530a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	68da      	ldr	r2, [r3, #12]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012526:	425b      	negs	r3, r3
 8012528:	441a      	add	r2, r3
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	68da      	ldr	r2, [r3, #12]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	429a      	cmp	r2, r3
 8012538:	d207      	bcs.n	801254a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	689a      	ldr	r2, [r3, #8]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012542:	425b      	negs	r3, r3
 8012544:	441a      	add	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b02      	cmp	r3, #2
 801254e:	d105      	bne.n	801255c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d002      	beq.n	801255c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	3b01      	subs	r3, #1
 801255a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012564:	697b      	ldr	r3, [r7, #20]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3718      	adds	r7, #24
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b082      	sub	sp, #8
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801257c:	2b00      	cmp	r3, #0
 801257e:	d018      	beq.n	80125b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	68da      	ldr	r2, [r3, #12]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012588:	441a      	add	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	68da      	ldr	r2, [r3, #12]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	429a      	cmp	r2, r3
 8012598:	d303      	bcc.n	80125a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	68d9      	ldr	r1, [r3, #12]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125aa:	461a      	mov	r2, r3
 80125ac:	6838      	ldr	r0, [r7, #0]
 80125ae:	f002 feac 	bl	801530a <memcpy>
	}
}
 80125b2:	bf00      	nop
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b084      	sub	sp, #16
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80125c2:	f001 fa01 	bl	80139c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80125cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125ce:	e011      	b.n	80125f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d012      	beq.n	80125fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	3324      	adds	r3, #36	@ 0x24
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 fcf7 	bl	8012fd0 <xTaskRemoveFromEventList>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d001      	beq.n	80125ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80125e8:	f000 fdd0 	bl	801318c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	dce9      	bgt.n	80125d0 <prvUnlockQueue+0x16>
 80125fc:	e000      	b.n	8012600 <prvUnlockQueue+0x46>
					break;
 80125fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	22ff      	movs	r2, #255	@ 0xff
 8012604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012608:	f001 fa10 	bl	8013a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801260c:	f001 f9dc 	bl	80139c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012616:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012618:	e011      	b.n	801263e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	691b      	ldr	r3, [r3, #16]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d012      	beq.n	8012648 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	3310      	adds	r3, #16
 8012626:	4618      	mov	r0, r3
 8012628:	f000 fcd2 	bl	8012fd0 <xTaskRemoveFromEventList>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012632:	f000 fdab 	bl	801318c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012636:	7bbb      	ldrb	r3, [r7, #14]
 8012638:	3b01      	subs	r3, #1
 801263a:	b2db      	uxtb	r3, r3
 801263c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801263e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012642:	2b00      	cmp	r3, #0
 8012644:	dce9      	bgt.n	801261a <prvUnlockQueue+0x60>
 8012646:	e000      	b.n	801264a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012648:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	22ff      	movs	r2, #255	@ 0xff
 801264e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012652:	f001 f9eb 	bl	8013a2c <vPortExitCritical>
}
 8012656:	bf00      	nop
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801265e:	b580      	push	{r7, lr}
 8012660:	b084      	sub	sp, #16
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012666:	f001 f9af 	bl	80139c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801266e:	2b00      	cmp	r3, #0
 8012670:	d102      	bne.n	8012678 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012672:	2301      	movs	r3, #1
 8012674:	60fb      	str	r3, [r7, #12]
 8012676:	e001      	b.n	801267c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012678:	2300      	movs	r3, #0
 801267a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801267c:	f001 f9d6 	bl	8013a2c <vPortExitCritical>

	return xReturn;
 8012680:	68fb      	ldr	r3, [r7, #12]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b084      	sub	sp, #16
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012692:	f001 f999 	bl	80139c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801269e:	429a      	cmp	r2, r3
 80126a0:	d102      	bne.n	80126a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80126a2:	2301      	movs	r3, #1
 80126a4:	60fb      	str	r3, [r7, #12]
 80126a6:	e001      	b.n	80126ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80126a8:	2300      	movs	r3, #0
 80126aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80126ac:	f001 f9be 	bl	8013a2c <vPortExitCritical>

	return xReturn;
 80126b0:	68fb      	ldr	r3, [r7, #12]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
	...

080126bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126c4:	2300      	movs	r3, #0
 80126c6:	60fb      	str	r3, [r7, #12]
 80126c8:	e016      	b.n	80126f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80126ca:	4a10      	ldr	r2, [pc, #64]	@ (801270c <vQueueUnregisterQueue+0x50>)
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	00db      	lsls	r3, r3, #3
 80126d0:	4413      	add	r3, r2
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d10b      	bne.n	80126f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80126da:	4a0c      	ldr	r2, [pc, #48]	@ (801270c <vQueueUnregisterQueue+0x50>)
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2100      	movs	r1, #0
 80126e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80126e4:	4a09      	ldr	r2, [pc, #36]	@ (801270c <vQueueUnregisterQueue+0x50>)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	4413      	add	r3, r2
 80126ec:	2200      	movs	r2, #0
 80126ee:	605a      	str	r2, [r3, #4]
				break;
 80126f0:	e006      	b.n	8012700 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3301      	adds	r3, #1
 80126f6:	60fb      	str	r3, [r7, #12]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b07      	cmp	r3, #7
 80126fc:	d9e5      	bls.n	80126ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80126fe:	bf00      	nop
 8012700:	bf00      	nop
 8012702:	3714      	adds	r7, #20
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	20001808 	.word	0x20001808

08012710 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012710:	b580      	push	{r7, lr}
 8012712:	b08c      	sub	sp, #48	@ 0x30
 8012714:	af04      	add	r7, sp, #16
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	603b      	str	r3, [r7, #0]
 801271c:	4613      	mov	r3, r2
 801271e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012720:	88fb      	ldrh	r3, [r7, #6]
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	4618      	mov	r0, r3
 8012726:	f001 fa71 	bl	8013c0c <pvPortMalloc>
 801272a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00e      	beq.n	8012750 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012732:	20a0      	movs	r0, #160	@ 0xa0
 8012734:	f001 fa6a 	bl	8013c0c <pvPortMalloc>
 8012738:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d003      	beq.n	8012748 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	697a      	ldr	r2, [r7, #20]
 8012744:	631a      	str	r2, [r3, #48]	@ 0x30
 8012746:	e005      	b.n	8012754 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012748:	6978      	ldr	r0, [r7, #20]
 801274a:	f001 fb2d 	bl	8013da8 <vPortFree>
 801274e:	e001      	b.n	8012754 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012750:	2300      	movs	r3, #0
 8012752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d013      	beq.n	8012782 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801275a:	88fa      	ldrh	r2, [r7, #6]
 801275c:	2300      	movs	r3, #0
 801275e:	9303      	str	r3, [sp, #12]
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	9302      	str	r3, [sp, #8]
 8012764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	68b9      	ldr	r1, [r7, #8]
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f000 f80f 	bl	8012794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012776:	69f8      	ldr	r0, [r7, #28]
 8012778:	f000 f8b4 	bl	80128e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801277c:	2301      	movs	r3, #1
 801277e:	61bb      	str	r3, [r7, #24]
 8012780:	e002      	b.n	8012788 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012782:	f04f 33ff 	mov.w	r3, #4294967295
 8012786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012788:	69bb      	ldr	r3, [r7, #24]
	}
 801278a:	4618      	mov	r0, r3
 801278c:	3720      	adds	r7, #32
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
	...

08012794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80127a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	461a      	mov	r2, r3
 80127ac:	21a5      	movs	r1, #165	@ 0xa5
 80127ae:	f002 fccf 	bl	8015150 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80127b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127bc:	3b01      	subs	r3, #1
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	f023 0307 	bic.w	r3, r3, #7
 80127ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	f003 0307 	and.w	r3, r3, #7
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00b      	beq.n	80127ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80127d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127da:	f383 8811 	msr	BASEPRI, r3
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	f3bf 8f4f 	dsb	sy
 80127e6:	617b      	str	r3, [r7, #20]
}
 80127e8:	bf00      	nop
 80127ea:	bf00      	nop
 80127ec:	e7fd      	b.n	80127ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d01f      	beq.n	8012834 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127f4:	2300      	movs	r3, #0
 80127f6:	61fb      	str	r3, [r7, #28]
 80127f8:	e012      	b.n	8012820 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	4413      	add	r3, r2
 8012800:	7819      	ldrb	r1, [r3, #0]
 8012802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	4413      	add	r3, r2
 8012808:	3334      	adds	r3, #52	@ 0x34
 801280a:	460a      	mov	r2, r1
 801280c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801280e:	68ba      	ldr	r2, [r7, #8]
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	4413      	add	r3, r2
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d006      	beq.n	8012828 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	3301      	adds	r3, #1
 801281e:	61fb      	str	r3, [r7, #28]
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	2b0f      	cmp	r3, #15
 8012824:	d9e9      	bls.n	80127fa <prvInitialiseNewTask+0x66>
 8012826:	e000      	b.n	801282a <prvInitialiseNewTask+0x96>
			{
				break;
 8012828:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282c:	2200      	movs	r2, #0
 801282e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012832:	e003      	b.n	801283c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012836:	2200      	movs	r2, #0
 8012838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801283e:	2b06      	cmp	r3, #6
 8012840:	d901      	bls.n	8012846 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012842:	2306      	movs	r3, #6
 8012844:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801284a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801284e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012850:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012854:	2200      	movs	r2, #0
 8012856:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801285a:	3304      	adds	r3, #4
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff f93a 	bl	8011ad6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012864:	3318      	adds	r3, #24
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff f935 	bl	8011ad6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801286e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012874:	f1c3 0207 	rsb	r2, r3, #7
 8012878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801287a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801287e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012880:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012884:	2200      	movs	r2, #0
 8012886:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801288c:	2200      	movs	r2, #0
 801288e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012894:	334c      	adds	r3, #76	@ 0x4c
 8012896:	224c      	movs	r2, #76	@ 0x4c
 8012898:	2100      	movs	r1, #0
 801289a:	4618      	mov	r0, r3
 801289c:	f002 fc58 	bl	8015150 <memset>
 80128a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a2:	4a0d      	ldr	r2, [pc, #52]	@ (80128d8 <prvInitialiseNewTask+0x144>)
 80128a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80128a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a8:	4a0c      	ldr	r2, [pc, #48]	@ (80128dc <prvInitialiseNewTask+0x148>)
 80128aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80128ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ae:	4a0c      	ldr	r2, [pc, #48]	@ (80128e0 <prvInitialiseNewTask+0x14c>)
 80128b0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80128b2:	683a      	ldr	r2, [r7, #0]
 80128b4:	68f9      	ldr	r1, [r7, #12]
 80128b6:	69b8      	ldr	r0, [r7, #24]
 80128b8:	f000 ff56 	bl	8013768 <pxPortInitialiseStack>
 80128bc:	4602      	mov	r2, r0
 80128be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80128c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80128c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128ce:	bf00      	nop
 80128d0:	3720      	adds	r7, #32
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	2000487c 	.word	0x2000487c
 80128dc:	200048e4 	.word	0x200048e4
 80128e0:	2000494c 	.word	0x2000494c

080128e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80128ec:	f001 f86c 	bl	80139c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80128f0:	4b2a      	ldr	r3, [pc, #168]	@ (801299c <prvAddNewTaskToReadyList+0xb8>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3301      	adds	r3, #1
 80128f6:	4a29      	ldr	r2, [pc, #164]	@ (801299c <prvAddNewTaskToReadyList+0xb8>)
 80128f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80128fa:	4b29      	ldr	r3, [pc, #164]	@ (80129a0 <prvAddNewTaskToReadyList+0xbc>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d109      	bne.n	8012916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012902:	4a27      	ldr	r2, [pc, #156]	@ (80129a0 <prvAddNewTaskToReadyList+0xbc>)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012908:	4b24      	ldr	r3, [pc, #144]	@ (801299c <prvAddNewTaskToReadyList+0xb8>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d110      	bne.n	8012932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012910:	f000 fc60 	bl	80131d4 <prvInitialiseTaskLists>
 8012914:	e00d      	b.n	8012932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012916:	4b23      	ldr	r3, [pc, #140]	@ (80129a4 <prvAddNewTaskToReadyList+0xc0>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d109      	bne.n	8012932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801291e:	4b20      	ldr	r3, [pc, #128]	@ (80129a0 <prvAddNewTaskToReadyList+0xbc>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012928:	429a      	cmp	r2, r3
 801292a:	d802      	bhi.n	8012932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801292c:	4a1c      	ldr	r2, [pc, #112]	@ (80129a0 <prvAddNewTaskToReadyList+0xbc>)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012932:	4b1d      	ldr	r3, [pc, #116]	@ (80129a8 <prvAddNewTaskToReadyList+0xc4>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3301      	adds	r3, #1
 8012938:	4a1b      	ldr	r2, [pc, #108]	@ (80129a8 <prvAddNewTaskToReadyList+0xc4>)
 801293a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012940:	2201      	movs	r2, #1
 8012942:	409a      	lsls	r2, r3
 8012944:	4b19      	ldr	r3, [pc, #100]	@ (80129ac <prvAddNewTaskToReadyList+0xc8>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4313      	orrs	r3, r2
 801294a:	4a18      	ldr	r2, [pc, #96]	@ (80129ac <prvAddNewTaskToReadyList+0xc8>)
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012952:	4613      	mov	r3, r2
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	4413      	add	r3, r2
 8012958:	009b      	lsls	r3, r3, #2
 801295a:	4a15      	ldr	r2, [pc, #84]	@ (80129b0 <prvAddNewTaskToReadyList+0xcc>)
 801295c:	441a      	add	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3304      	adds	r3, #4
 8012962:	4619      	mov	r1, r3
 8012964:	4610      	mov	r0, r2
 8012966:	f7ff f8c3 	bl	8011af0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801296a:	f001 f85f 	bl	8013a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801296e:	4b0d      	ldr	r3, [pc, #52]	@ (80129a4 <prvAddNewTaskToReadyList+0xc0>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d00e      	beq.n	8012994 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012976:	4b0a      	ldr	r3, [pc, #40]	@ (80129a0 <prvAddNewTaskToReadyList+0xbc>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012980:	429a      	cmp	r2, r3
 8012982:	d207      	bcs.n	8012994 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012984:	4b0b      	ldr	r3, [pc, #44]	@ (80129b4 <prvAddNewTaskToReadyList+0xd0>)
 8012986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	20001948 	.word	0x20001948
 80129a0:	20001848 	.word	0x20001848
 80129a4:	20001954 	.word	0x20001954
 80129a8:	20001964 	.word	0x20001964
 80129ac:	20001950 	.word	0x20001950
 80129b0:	2000184c 	.word	0x2000184c
 80129b4:	e000ed04 	.word	0xe000ed04

080129b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80129c0:	2300      	movs	r3, #0
 80129c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d018      	beq.n	80129fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80129ca:	4b14      	ldr	r3, [pc, #80]	@ (8012a1c <vTaskDelay+0x64>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00b      	beq.n	80129ea <vTaskDelay+0x32>
	__asm volatile
 80129d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d6:	f383 8811 	msr	BASEPRI, r3
 80129da:	f3bf 8f6f 	isb	sy
 80129de:	f3bf 8f4f 	dsb	sy
 80129e2:	60bb      	str	r3, [r7, #8]
}
 80129e4:	bf00      	nop
 80129e6:	bf00      	nop
 80129e8:	e7fd      	b.n	80129e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80129ea:	f000 f901 	bl	8012bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80129ee:	2100      	movs	r1, #0
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 fe53 	bl	801369c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80129f6:	f000 f909 	bl	8012c0c <xTaskResumeAll>
 80129fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d107      	bne.n	8012a12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012a02:	4b07      	ldr	r3, [pc, #28]	@ (8012a20 <vTaskDelay+0x68>)
 8012a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a08:	601a      	str	r2, [r3, #0]
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	20001970 	.word	0x20001970
 8012a20:	e000ed04 	.word	0xe000ed04

08012a24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012a2c:	f000 ffcc 	bl	80139c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d102      	bne.n	8012a3c <vTaskSuspend+0x18>
 8012a36:	4b3d      	ldr	r3, [pc, #244]	@ (8012b2c <vTaskSuspend+0x108>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	e000      	b.n	8012a3e <vTaskSuspend+0x1a>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	3304      	adds	r3, #4
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff f8b0 	bl	8011baa <uxListRemove>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d115      	bne.n	8012a7c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a54:	4936      	ldr	r1, [pc, #216]	@ (8012b30 <vTaskSuspend+0x10c>)
 8012a56:	4613      	mov	r3, r2
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4413      	add	r3, r2
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	440b      	add	r3, r1
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <vTaskSuspend+0x58>
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a70:	43da      	mvns	r2, r3
 8012a72:	4b30      	ldr	r3, [pc, #192]	@ (8012b34 <vTaskSuspend+0x110>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	4013      	ands	r3, r2
 8012a78:	4a2e      	ldr	r2, [pc, #184]	@ (8012b34 <vTaskSuspend+0x110>)
 8012a7a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d004      	beq.n	8012a8e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	3318      	adds	r3, #24
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7ff f88e 	bl	8011baa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	3304      	adds	r3, #4
 8012a92:	4619      	mov	r1, r3
 8012a94:	4828      	ldr	r0, [pc, #160]	@ (8012b38 <vTaskSuspend+0x114>)
 8012a96:	f7ff f82b 	bl	8011af0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d103      	bne.n	8012aae <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012aae:	f000 ffbd 	bl	8013a2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012ab2:	4b22      	ldr	r3, [pc, #136]	@ (8012b3c <vTaskSuspend+0x118>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d005      	beq.n	8012ac6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012aba:	f000 ff85 	bl	80139c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012abe:	f000 fc0d 	bl	80132dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012ac2:	f000 ffb3 	bl	8013a2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012ac6:	4b19      	ldr	r3, [pc, #100]	@ (8012b2c <vTaskSuspend+0x108>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	68fa      	ldr	r2, [r7, #12]
 8012acc:	429a      	cmp	r2, r3
 8012ace:	d128      	bne.n	8012b22 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b3c <vTaskSuspend+0x118>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d018      	beq.n	8012b0a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012ad8:	4b19      	ldr	r3, [pc, #100]	@ (8012b40 <vTaskSuspend+0x11c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00b      	beq.n	8012af8 <vTaskSuspend+0xd4>
	__asm volatile
 8012ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ae4:	f383 8811 	msr	BASEPRI, r3
 8012ae8:	f3bf 8f6f 	isb	sy
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	60bb      	str	r3, [r7, #8]
}
 8012af2:	bf00      	nop
 8012af4:	bf00      	nop
 8012af6:	e7fd      	b.n	8012af4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012af8:	4b12      	ldr	r3, [pc, #72]	@ (8012b44 <vTaskSuspend+0x120>)
 8012afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012afe:	601a      	str	r2, [r3, #0]
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b08:	e00b      	b.n	8012b22 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012b38 <vTaskSuspend+0x114>)
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8012b48 <vTaskSuspend+0x124>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d103      	bne.n	8012b1e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8012b16:	4b05      	ldr	r3, [pc, #20]	@ (8012b2c <vTaskSuspend+0x108>)
 8012b18:	2200      	movs	r2, #0
 8012b1a:	601a      	str	r2, [r3, #0]
	}
 8012b1c:	e001      	b.n	8012b22 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012b1e:	f000 f9cd 	bl	8012ebc <vTaskSwitchContext>
	}
 8012b22:	bf00      	nop
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	20001848 	.word	0x20001848
 8012b30:	2000184c 	.word	0x2000184c
 8012b34:	20001950 	.word	0x20001950
 8012b38:	20001934 	.word	0x20001934
 8012b3c:	20001954 	.word	0x20001954
 8012b40:	20001970 	.word	0x20001970
 8012b44:	e000ed04 	.word	0xe000ed04
 8012b48:	20001948 	.word	0x20001948

08012b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8012b52:	4b1f      	ldr	r3, [pc, #124]	@ (8012bd0 <vTaskStartScheduler+0x84>)
 8012b54:	9301      	str	r3, [sp, #4]
 8012b56:	2300      	movs	r3, #0
 8012b58:	9300      	str	r3, [sp, #0]
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	2280      	movs	r2, #128	@ 0x80
 8012b5e:	491d      	ldr	r1, [pc, #116]	@ (8012bd4 <vTaskStartScheduler+0x88>)
 8012b60:	481d      	ldr	r0, [pc, #116]	@ (8012bd8 <vTaskStartScheduler+0x8c>)
 8012b62:	f7ff fdd5 	bl	8012710 <xTaskCreate>
 8012b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d11b      	bne.n	8012ba6 <vTaskStartScheduler+0x5a>
	__asm volatile
 8012b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b72:	f383 8811 	msr	BASEPRI, r3
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	60bb      	str	r3, [r7, #8]
}
 8012b80:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012b82:	4b16      	ldr	r3, [pc, #88]	@ (8012bdc <vTaskStartScheduler+0x90>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	334c      	adds	r3, #76	@ 0x4c
 8012b88:	4a15      	ldr	r2, [pc, #84]	@ (8012be0 <vTaskStartScheduler+0x94>)
 8012b8a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012b8c:	4b15      	ldr	r3, [pc, #84]	@ (8012be4 <vTaskStartScheduler+0x98>)
 8012b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012b94:	4b14      	ldr	r3, [pc, #80]	@ (8012be8 <vTaskStartScheduler+0x9c>)
 8012b96:	2201      	movs	r2, #1
 8012b98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012b9a:	4b14      	ldr	r3, [pc, #80]	@ (8012bec <vTaskStartScheduler+0xa0>)
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ba0:	f000 fe6e 	bl	8013880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ba4:	e00f      	b.n	8012bc6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bac:	d10b      	bne.n	8012bc6 <vTaskStartScheduler+0x7a>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	607b      	str	r3, [r7, #4]
}
 8012bc0:	bf00      	nop
 8012bc2:	bf00      	nop
 8012bc4:	e7fd      	b.n	8012bc2 <vTaskStartScheduler+0x76>
}
 8012bc6:	bf00      	nop
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000196c 	.word	0x2000196c
 8012bd4:	080193ec 	.word	0x080193ec
 8012bd8:	080131a5 	.word	0x080131a5
 8012bdc:	20001848 	.word	0x20001848
 8012be0:	20000054 	.word	0x20000054
 8012be4:	20001968 	.word	0x20001968
 8012be8:	20001954 	.word	0x20001954
 8012bec:	2000194c 	.word	0x2000194c

08012bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012bf4:	4b04      	ldr	r3, [pc, #16]	@ (8012c08 <vTaskSuspendAll+0x18>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	4a03      	ldr	r2, [pc, #12]	@ (8012c08 <vTaskSuspendAll+0x18>)
 8012bfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012bfe:	bf00      	nop
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr
 8012c08:	20001970 	.word	0x20001970

08012c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c12:	2300      	movs	r3, #0
 8012c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c16:	2300      	movs	r3, #0
 8012c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c1a:	4b42      	ldr	r3, [pc, #264]	@ (8012d24 <xTaskResumeAll+0x118>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d10b      	bne.n	8012c3a <xTaskResumeAll+0x2e>
	__asm volatile
 8012c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c26:	f383 8811 	msr	BASEPRI, r3
 8012c2a:	f3bf 8f6f 	isb	sy
 8012c2e:	f3bf 8f4f 	dsb	sy
 8012c32:	603b      	str	r3, [r7, #0]
}
 8012c34:	bf00      	nop
 8012c36:	bf00      	nop
 8012c38:	e7fd      	b.n	8012c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012c3a:	f000 fec5 	bl	80139c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012c3e:	4b39      	ldr	r3, [pc, #228]	@ (8012d24 <xTaskResumeAll+0x118>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	3b01      	subs	r3, #1
 8012c44:	4a37      	ldr	r2, [pc, #220]	@ (8012d24 <xTaskResumeAll+0x118>)
 8012c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c48:	4b36      	ldr	r3, [pc, #216]	@ (8012d24 <xTaskResumeAll+0x118>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d161      	bne.n	8012d14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012c50:	4b35      	ldr	r3, [pc, #212]	@ (8012d28 <xTaskResumeAll+0x11c>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d05d      	beq.n	8012d14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c58:	e02e      	b.n	8012cb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c5a:	4b34      	ldr	r3, [pc, #208]	@ (8012d2c <xTaskResumeAll+0x120>)
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	3318      	adds	r3, #24
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fe ff9f 	bl	8011baa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	3304      	adds	r3, #4
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fe ff9a 	bl	8011baa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	409a      	lsls	r2, r3
 8012c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8012d30 <xTaskResumeAll+0x124>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4313      	orrs	r3, r2
 8012c84:	4a2a      	ldr	r2, [pc, #168]	@ (8012d30 <xTaskResumeAll+0x124>)
 8012c86:	6013      	str	r3, [r2, #0]
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	4413      	add	r3, r2
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	4a27      	ldr	r2, [pc, #156]	@ (8012d34 <xTaskResumeAll+0x128>)
 8012c96:	441a      	add	r2, r3
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	3304      	adds	r3, #4
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	4610      	mov	r0, r2
 8012ca0:	f7fe ff26 	bl	8011af0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ca8:	4b23      	ldr	r3, [pc, #140]	@ (8012d38 <xTaskResumeAll+0x12c>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d302      	bcc.n	8012cb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012cb2:	4b22      	ldr	r3, [pc, #136]	@ (8012d3c <xTaskResumeAll+0x130>)
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8012d2c <xTaskResumeAll+0x120>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d1cc      	bne.n	8012c5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d001      	beq.n	8012cca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012cc6:	f000 fb09 	bl	80132dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012cca:	4b1d      	ldr	r3, [pc, #116]	@ (8012d40 <xTaskResumeAll+0x134>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d010      	beq.n	8012cf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012cd6:	f000 f837 	bl	8012d48 <xTaskIncrementTick>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012ce0:	4b16      	ldr	r3, [pc, #88]	@ (8012d3c <xTaskResumeAll+0x130>)
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d1f1      	bne.n	8012cd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012cf2:	4b13      	ldr	r3, [pc, #76]	@ (8012d40 <xTaskResumeAll+0x134>)
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012cf8:	4b10      	ldr	r3, [pc, #64]	@ (8012d3c <xTaskResumeAll+0x130>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d009      	beq.n	8012d14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d00:	2301      	movs	r3, #1
 8012d02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d04:	4b0f      	ldr	r3, [pc, #60]	@ (8012d44 <xTaskResumeAll+0x138>)
 8012d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d0a:	601a      	str	r2, [r3, #0]
 8012d0c:	f3bf 8f4f 	dsb	sy
 8012d10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d14:	f000 fe8a 	bl	8013a2c <vPortExitCritical>

	return xAlreadyYielded;
 8012d18:	68bb      	ldr	r3, [r7, #8]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	20001970 	.word	0x20001970
 8012d28:	20001948 	.word	0x20001948
 8012d2c:	20001908 	.word	0x20001908
 8012d30:	20001950 	.word	0x20001950
 8012d34:	2000184c 	.word	0x2000184c
 8012d38:	20001848 	.word	0x20001848
 8012d3c:	2000195c 	.word	0x2000195c
 8012d40:	20001958 	.word	0x20001958
 8012d44:	e000ed04 	.word	0xe000ed04

08012d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d52:	4b4f      	ldr	r3, [pc, #316]	@ (8012e90 <xTaskIncrementTick+0x148>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f040 808f 	bne.w	8012e7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8012e94 <xTaskIncrementTick+0x14c>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	3301      	adds	r3, #1
 8012d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012d64:	4a4b      	ldr	r2, [pc, #300]	@ (8012e94 <xTaskIncrementTick+0x14c>)
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d121      	bne.n	8012db4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012d70:	4b49      	ldr	r3, [pc, #292]	@ (8012e98 <xTaskIncrementTick+0x150>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00b      	beq.n	8012d92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8012d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d7e:	f383 8811 	msr	BASEPRI, r3
 8012d82:	f3bf 8f6f 	isb	sy
 8012d86:	f3bf 8f4f 	dsb	sy
 8012d8a:	603b      	str	r3, [r7, #0]
}
 8012d8c:	bf00      	nop
 8012d8e:	bf00      	nop
 8012d90:	e7fd      	b.n	8012d8e <xTaskIncrementTick+0x46>
 8012d92:	4b41      	ldr	r3, [pc, #260]	@ (8012e98 <xTaskIncrementTick+0x150>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	4b40      	ldr	r3, [pc, #256]	@ (8012e9c <xTaskIncrementTick+0x154>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8012e98 <xTaskIncrementTick+0x150>)
 8012d9e:	6013      	str	r3, [r2, #0]
 8012da0:	4a3e      	ldr	r2, [pc, #248]	@ (8012e9c <xTaskIncrementTick+0x154>)
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6013      	str	r3, [r2, #0]
 8012da6:	4b3e      	ldr	r3, [pc, #248]	@ (8012ea0 <xTaskIncrementTick+0x158>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	3301      	adds	r3, #1
 8012dac:	4a3c      	ldr	r2, [pc, #240]	@ (8012ea0 <xTaskIncrementTick+0x158>)
 8012dae:	6013      	str	r3, [r2, #0]
 8012db0:	f000 fa94 	bl	80132dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012db4:	4b3b      	ldr	r3, [pc, #236]	@ (8012ea4 <xTaskIncrementTick+0x15c>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	693a      	ldr	r2, [r7, #16]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d348      	bcc.n	8012e50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012dbe:	4b36      	ldr	r3, [pc, #216]	@ (8012e98 <xTaskIncrementTick+0x150>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d104      	bne.n	8012dd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dc8:	4b36      	ldr	r3, [pc, #216]	@ (8012ea4 <xTaskIncrementTick+0x15c>)
 8012dca:	f04f 32ff 	mov.w	r2, #4294967295
 8012dce:	601a      	str	r2, [r3, #0]
					break;
 8012dd0:	e03e      	b.n	8012e50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dd2:	4b31      	ldr	r3, [pc, #196]	@ (8012e98 <xTaskIncrementTick+0x150>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012de2:	693a      	ldr	r2, [r7, #16]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d203      	bcs.n	8012df2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012dea:	4a2e      	ldr	r2, [pc, #184]	@ (8012ea4 <xTaskIncrementTick+0x15c>)
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012df0:	e02e      	b.n	8012e50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	3304      	adds	r3, #4
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fed7 	bl	8011baa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d004      	beq.n	8012e0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	3318      	adds	r3, #24
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7fe fece 	bl	8011baa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e12:	2201      	movs	r2, #1
 8012e14:	409a      	lsls	r2, r3
 8012e16:	4b24      	ldr	r3, [pc, #144]	@ (8012ea8 <xTaskIncrementTick+0x160>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	4a22      	ldr	r2, [pc, #136]	@ (8012ea8 <xTaskIncrementTick+0x160>)
 8012e1e:	6013      	str	r3, [r2, #0]
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e24:	4613      	mov	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8012eac <xTaskIncrementTick+0x164>)
 8012e2e:	441a      	add	r2, r3
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	3304      	adds	r3, #4
 8012e34:	4619      	mov	r1, r3
 8012e36:	4610      	mov	r0, r2
 8012e38:	f7fe fe5a 	bl	8011af0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e40:	4b1b      	ldr	r3, [pc, #108]	@ (8012eb0 <xTaskIncrementTick+0x168>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d3b9      	bcc.n	8012dbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e4e:	e7b6      	b.n	8012dbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012e50:	4b17      	ldr	r3, [pc, #92]	@ (8012eb0 <xTaskIncrementTick+0x168>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e56:	4915      	ldr	r1, [pc, #84]	@ (8012eac <xTaskIncrementTick+0x164>)
 8012e58:	4613      	mov	r3, r2
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4413      	add	r3, r2
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	440b      	add	r3, r1
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d901      	bls.n	8012e6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012e6c:	4b11      	ldr	r3, [pc, #68]	@ (8012eb4 <xTaskIncrementTick+0x16c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d007      	beq.n	8012e84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012e74:	2301      	movs	r3, #1
 8012e76:	617b      	str	r3, [r7, #20]
 8012e78:	e004      	b.n	8012e84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8012eb8 <xTaskIncrementTick+0x170>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3301      	adds	r3, #1
 8012e80:	4a0d      	ldr	r2, [pc, #52]	@ (8012eb8 <xTaskIncrementTick+0x170>)
 8012e82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012e84:	697b      	ldr	r3, [r7, #20]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	20001970 	.word	0x20001970
 8012e94:	2000194c 	.word	0x2000194c
 8012e98:	20001900 	.word	0x20001900
 8012e9c:	20001904 	.word	0x20001904
 8012ea0:	20001960 	.word	0x20001960
 8012ea4:	20001968 	.word	0x20001968
 8012ea8:	20001950 	.word	0x20001950
 8012eac:	2000184c 	.word	0x2000184c
 8012eb0:	20001848 	.word	0x20001848
 8012eb4:	2000195c 	.word	0x2000195c
 8012eb8:	20001958 	.word	0x20001958

08012ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b087      	sub	sp, #28
 8012ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8012f6c <vTaskSwitchContext+0xb0>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d003      	beq.n	8012ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012eca:	4b29      	ldr	r3, [pc, #164]	@ (8012f70 <vTaskSwitchContext+0xb4>)
 8012ecc:	2201      	movs	r2, #1
 8012ece:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ed0:	e045      	b.n	8012f5e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8012ed2:	4b27      	ldr	r3, [pc, #156]	@ (8012f70 <vTaskSwitchContext+0xb4>)
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ed8:	4b26      	ldr	r3, [pc, #152]	@ (8012f74 <vTaskSwitchContext+0xb8>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	fab3 f383 	clz	r3, r3
 8012ee4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012ee6:	7afb      	ldrb	r3, [r7, #11]
 8012ee8:	f1c3 031f 	rsb	r3, r3, #31
 8012eec:	617b      	str	r3, [r7, #20]
 8012eee:	4922      	ldr	r1, [pc, #136]	@ (8012f78 <vTaskSwitchContext+0xbc>)
 8012ef0:	697a      	ldr	r2, [r7, #20]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	440b      	add	r3, r1
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d10b      	bne.n	8012f1a <vTaskSwitchContext+0x5e>
	__asm volatile
 8012f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f06:	f383 8811 	msr	BASEPRI, r3
 8012f0a:	f3bf 8f6f 	isb	sy
 8012f0e:	f3bf 8f4f 	dsb	sy
 8012f12:	607b      	str	r3, [r7, #4]
}
 8012f14:	bf00      	nop
 8012f16:	bf00      	nop
 8012f18:	e7fd      	b.n	8012f16 <vTaskSwitchContext+0x5a>
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	4413      	add	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4a14      	ldr	r2, [pc, #80]	@ (8012f78 <vTaskSwitchContext+0xbc>)
 8012f26:	4413      	add	r3, r2
 8012f28:	613b      	str	r3, [r7, #16]
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	685a      	ldr	r2, [r3, #4]
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	605a      	str	r2, [r3, #4]
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	685a      	ldr	r2, [r3, #4]
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d104      	bne.n	8012f4a <vTaskSwitchContext+0x8e>
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	685a      	ldr	r2, [r3, #4]
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	605a      	str	r2, [r3, #4]
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	4a0a      	ldr	r2, [pc, #40]	@ (8012f7c <vTaskSwitchContext+0xc0>)
 8012f52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012f54:	4b09      	ldr	r3, [pc, #36]	@ (8012f7c <vTaskSwitchContext+0xc0>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	334c      	adds	r3, #76	@ 0x4c
 8012f5a:	4a09      	ldr	r2, [pc, #36]	@ (8012f80 <vTaskSwitchContext+0xc4>)
 8012f5c:	6013      	str	r3, [r2, #0]
}
 8012f5e:	bf00      	nop
 8012f60:	371c      	adds	r7, #28
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	20001970 	.word	0x20001970
 8012f70:	2000195c 	.word	0x2000195c
 8012f74:	20001950 	.word	0x20001950
 8012f78:	2000184c 	.word	0x2000184c
 8012f7c:	20001848 	.word	0x20001848
 8012f80:	20000054 	.word	0x20000054

08012f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d10b      	bne.n	8012fac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f98:	f383 8811 	msr	BASEPRI, r3
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	60fb      	str	r3, [r7, #12]
}
 8012fa6:	bf00      	nop
 8012fa8:	bf00      	nop
 8012faa:	e7fd      	b.n	8012fa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012fac:	4b07      	ldr	r3, [pc, #28]	@ (8012fcc <vTaskPlaceOnEventList+0x48>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	3318      	adds	r3, #24
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f7fe fdbf 	bl	8011b38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012fba:	2101      	movs	r1, #1
 8012fbc:	6838      	ldr	r0, [r7, #0]
 8012fbe:	f000 fb6d 	bl	801369c <prvAddCurrentTaskToDelayedList>
}
 8012fc2:	bf00      	nop
 8012fc4:	3710      	adds	r7, #16
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	20001848 	.word	0x20001848

08012fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d10b      	bne.n	8012ffe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	60fb      	str	r3, [r7, #12]
}
 8012ff8:	bf00      	nop
 8012ffa:	bf00      	nop
 8012ffc:	e7fd      	b.n	8012ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	3318      	adds	r3, #24
 8013002:	4618      	mov	r0, r3
 8013004:	f7fe fdd1 	bl	8011baa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013008:	4b1d      	ldr	r3, [pc, #116]	@ (8013080 <xTaskRemoveFromEventList+0xb0>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d11c      	bne.n	801304a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	3304      	adds	r3, #4
 8013014:	4618      	mov	r0, r3
 8013016:	f7fe fdc8 	bl	8011baa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801301e:	2201      	movs	r2, #1
 8013020:	409a      	lsls	r2, r3
 8013022:	4b18      	ldr	r3, [pc, #96]	@ (8013084 <xTaskRemoveFromEventList+0xb4>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	4313      	orrs	r3, r2
 8013028:	4a16      	ldr	r2, [pc, #88]	@ (8013084 <xTaskRemoveFromEventList+0xb4>)
 801302a:	6013      	str	r3, [r2, #0]
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013030:	4613      	mov	r3, r2
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	4413      	add	r3, r2
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	4a13      	ldr	r2, [pc, #76]	@ (8013088 <xTaskRemoveFromEventList+0xb8>)
 801303a:	441a      	add	r2, r3
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	3304      	adds	r3, #4
 8013040:	4619      	mov	r1, r3
 8013042:	4610      	mov	r0, r2
 8013044:	f7fe fd54 	bl	8011af0 <vListInsertEnd>
 8013048:	e005      	b.n	8013056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	3318      	adds	r3, #24
 801304e:	4619      	mov	r1, r3
 8013050:	480e      	ldr	r0, [pc, #56]	@ (801308c <xTaskRemoveFromEventList+0xbc>)
 8013052:	f7fe fd4d 	bl	8011af0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801305a:	4b0d      	ldr	r3, [pc, #52]	@ (8013090 <xTaskRemoveFromEventList+0xc0>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013060:	429a      	cmp	r2, r3
 8013062:	d905      	bls.n	8013070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013064:	2301      	movs	r3, #1
 8013066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013068:	4b0a      	ldr	r3, [pc, #40]	@ (8013094 <xTaskRemoveFromEventList+0xc4>)
 801306a:	2201      	movs	r2, #1
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	e001      	b.n	8013074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013070:	2300      	movs	r3, #0
 8013072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013074:	697b      	ldr	r3, [r7, #20]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	20001970 	.word	0x20001970
 8013084:	20001950 	.word	0x20001950
 8013088:	2000184c 	.word	0x2000184c
 801308c:	20001908 	.word	0x20001908
 8013090:	20001848 	.word	0x20001848
 8013094:	2000195c 	.word	0x2000195c

08013098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80130a0:	4b06      	ldr	r3, [pc, #24]	@ (80130bc <vTaskInternalSetTimeOutState+0x24>)
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80130a8:	4b05      	ldr	r3, [pc, #20]	@ (80130c0 <vTaskInternalSetTimeOutState+0x28>)
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	605a      	str	r2, [r3, #4]
}
 80130b0:	bf00      	nop
 80130b2:	370c      	adds	r7, #12
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr
 80130bc:	20001960 	.word	0x20001960
 80130c0:	2000194c 	.word	0x2000194c

080130c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b088      	sub	sp, #32
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10b      	bne.n	80130ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f3bf 8f4f 	dsb	sy
 80130e4:	613b      	str	r3, [r7, #16]
}
 80130e6:	bf00      	nop
 80130e8:	bf00      	nop
 80130ea:	e7fd      	b.n	80130e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d10b      	bne.n	801310a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80130f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130f6:	f383 8811 	msr	BASEPRI, r3
 80130fa:	f3bf 8f6f 	isb	sy
 80130fe:	f3bf 8f4f 	dsb	sy
 8013102:	60fb      	str	r3, [r7, #12]
}
 8013104:	bf00      	nop
 8013106:	bf00      	nop
 8013108:	e7fd      	b.n	8013106 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801310a:	f000 fc5d 	bl	80139c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801310e:	4b1d      	ldr	r3, [pc, #116]	@ (8013184 <xTaskCheckForTimeOut+0xc0>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	69ba      	ldr	r2, [r7, #24]
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013126:	d102      	bne.n	801312e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013128:	2300      	movs	r3, #0
 801312a:	61fb      	str	r3, [r7, #28]
 801312c:	e023      	b.n	8013176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681a      	ldr	r2, [r3, #0]
 8013132:	4b15      	ldr	r3, [pc, #84]	@ (8013188 <xTaskCheckForTimeOut+0xc4>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	429a      	cmp	r2, r3
 8013138:	d007      	beq.n	801314a <xTaskCheckForTimeOut+0x86>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	69ba      	ldr	r2, [r7, #24]
 8013140:	429a      	cmp	r2, r3
 8013142:	d302      	bcc.n	801314a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013144:	2301      	movs	r3, #1
 8013146:	61fb      	str	r3, [r7, #28]
 8013148:	e015      	b.n	8013176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	697a      	ldr	r2, [r7, #20]
 8013150:	429a      	cmp	r2, r3
 8013152:	d20b      	bcs.n	801316c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	1ad2      	subs	r2, r2, r3
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7ff ff99 	bl	8013098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013166:	2300      	movs	r3, #0
 8013168:	61fb      	str	r3, [r7, #28]
 801316a:	e004      	b.n	8013176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	2200      	movs	r2, #0
 8013170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013172:	2301      	movs	r3, #1
 8013174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013176:	f000 fc59 	bl	8013a2c <vPortExitCritical>

	return xReturn;
 801317a:	69fb      	ldr	r3, [r7, #28]
}
 801317c:	4618      	mov	r0, r3
 801317e:	3720      	adds	r7, #32
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	2000194c 	.word	0x2000194c
 8013188:	20001960 	.word	0x20001960

0801318c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801318c:	b480      	push	{r7}
 801318e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013190:	4b03      	ldr	r3, [pc, #12]	@ (80131a0 <vTaskMissedYield+0x14>)
 8013192:	2201      	movs	r2, #1
 8013194:	601a      	str	r2, [r3, #0]
}
 8013196:	bf00      	nop
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	2000195c 	.word	0x2000195c

080131a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80131ac:	f000 f852 	bl	8013254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80131b0:	4b06      	ldr	r3, [pc, #24]	@ (80131cc <prvIdleTask+0x28>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d9f9      	bls.n	80131ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80131b8:	4b05      	ldr	r3, [pc, #20]	@ (80131d0 <prvIdleTask+0x2c>)
 80131ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131be:	601a      	str	r2, [r3, #0]
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80131c8:	e7f0      	b.n	80131ac <prvIdleTask+0x8>
 80131ca:	bf00      	nop
 80131cc:	2000184c 	.word	0x2000184c
 80131d0:	e000ed04 	.word	0xe000ed04

080131d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131da:	2300      	movs	r3, #0
 80131dc:	607b      	str	r3, [r7, #4]
 80131de:	e00c      	b.n	80131fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	4613      	mov	r3, r2
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4413      	add	r3, r2
 80131e8:	009b      	lsls	r3, r3, #2
 80131ea:	4a12      	ldr	r2, [pc, #72]	@ (8013234 <prvInitialiseTaskLists+0x60>)
 80131ec:	4413      	add	r3, r2
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fe fc51 	bl	8011a96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	3301      	adds	r3, #1
 80131f8:	607b      	str	r3, [r7, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2b06      	cmp	r3, #6
 80131fe:	d9ef      	bls.n	80131e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013200:	480d      	ldr	r0, [pc, #52]	@ (8013238 <prvInitialiseTaskLists+0x64>)
 8013202:	f7fe fc48 	bl	8011a96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013206:	480d      	ldr	r0, [pc, #52]	@ (801323c <prvInitialiseTaskLists+0x68>)
 8013208:	f7fe fc45 	bl	8011a96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801320c:	480c      	ldr	r0, [pc, #48]	@ (8013240 <prvInitialiseTaskLists+0x6c>)
 801320e:	f7fe fc42 	bl	8011a96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013212:	480c      	ldr	r0, [pc, #48]	@ (8013244 <prvInitialiseTaskLists+0x70>)
 8013214:	f7fe fc3f 	bl	8011a96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013218:	480b      	ldr	r0, [pc, #44]	@ (8013248 <prvInitialiseTaskLists+0x74>)
 801321a:	f7fe fc3c 	bl	8011a96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801321e:	4b0b      	ldr	r3, [pc, #44]	@ (801324c <prvInitialiseTaskLists+0x78>)
 8013220:	4a05      	ldr	r2, [pc, #20]	@ (8013238 <prvInitialiseTaskLists+0x64>)
 8013222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013224:	4b0a      	ldr	r3, [pc, #40]	@ (8013250 <prvInitialiseTaskLists+0x7c>)
 8013226:	4a05      	ldr	r2, [pc, #20]	@ (801323c <prvInitialiseTaskLists+0x68>)
 8013228:	601a      	str	r2, [r3, #0]
}
 801322a:	bf00      	nop
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	2000184c 	.word	0x2000184c
 8013238:	200018d8 	.word	0x200018d8
 801323c:	200018ec 	.word	0x200018ec
 8013240:	20001908 	.word	0x20001908
 8013244:	2000191c 	.word	0x2000191c
 8013248:	20001934 	.word	0x20001934
 801324c:	20001900 	.word	0x20001900
 8013250:	20001904 	.word	0x20001904

08013254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801325a:	e019      	b.n	8013290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801325c:	f000 fbb4 	bl	80139c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013260:	4b10      	ldr	r3, [pc, #64]	@ (80132a4 <prvCheckTasksWaitingTermination+0x50>)
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	3304      	adds	r3, #4
 801326c:	4618      	mov	r0, r3
 801326e:	f7fe fc9c 	bl	8011baa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013272:	4b0d      	ldr	r3, [pc, #52]	@ (80132a8 <prvCheckTasksWaitingTermination+0x54>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	3b01      	subs	r3, #1
 8013278:	4a0b      	ldr	r2, [pc, #44]	@ (80132a8 <prvCheckTasksWaitingTermination+0x54>)
 801327a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801327c:	4b0b      	ldr	r3, [pc, #44]	@ (80132ac <prvCheckTasksWaitingTermination+0x58>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	3b01      	subs	r3, #1
 8013282:	4a0a      	ldr	r2, [pc, #40]	@ (80132ac <prvCheckTasksWaitingTermination+0x58>)
 8013284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013286:	f000 fbd1 	bl	8013a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 f810 	bl	80132b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013290:	4b06      	ldr	r3, [pc, #24]	@ (80132ac <prvCheckTasksWaitingTermination+0x58>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1e1      	bne.n	801325c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013298:	bf00      	nop
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	2000191c 	.word	0x2000191c
 80132a8:	20001948 	.word	0x20001948
 80132ac:	20001930 	.word	0x20001930

080132b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	334c      	adds	r3, #76	@ 0x4c
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 ff63 	bl	8015188 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132c6:	4618      	mov	r0, r3
 80132c8:	f000 fd6e 	bl	8013da8 <vPortFree>
			vPortFree( pxTCB );
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 fd6b 	bl	8013da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80132d2:	bf00      	nop
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80132e2:	4b0c      	ldr	r3, [pc, #48]	@ (8013314 <prvResetNextTaskUnblockTime+0x38>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d104      	bne.n	80132f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80132ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013318 <prvResetNextTaskUnblockTime+0x3c>)
 80132ee:	f04f 32ff 	mov.w	r2, #4294967295
 80132f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80132f4:	e008      	b.n	8013308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132f6:	4b07      	ldr	r3, [pc, #28]	@ (8013314 <prvResetNextTaskUnblockTime+0x38>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	4a04      	ldr	r2, [pc, #16]	@ (8013318 <prvResetNextTaskUnblockTime+0x3c>)
 8013306:	6013      	str	r3, [r2, #0]
}
 8013308:	bf00      	nop
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr
 8013314:	20001900 	.word	0x20001900
 8013318:	20001968 	.word	0x20001968

0801331c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013322:	4b0b      	ldr	r3, [pc, #44]	@ (8013350 <xTaskGetSchedulerState+0x34>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d102      	bne.n	8013330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801332a:	2301      	movs	r3, #1
 801332c:	607b      	str	r3, [r7, #4]
 801332e:	e008      	b.n	8013342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013330:	4b08      	ldr	r3, [pc, #32]	@ (8013354 <xTaskGetSchedulerState+0x38>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d102      	bne.n	801333e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013338:	2302      	movs	r3, #2
 801333a:	607b      	str	r3, [r7, #4]
 801333c:	e001      	b.n	8013342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801333e:	2300      	movs	r3, #0
 8013340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013342:	687b      	ldr	r3, [r7, #4]
	}
 8013344:	4618      	mov	r0, r3
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr
 8013350:	20001954 	.word	0x20001954
 8013354:	20001970 	.word	0x20001970

08013358 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013364:	2300      	movs	r3, #0
 8013366:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d05e      	beq.n	801342c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013372:	4b31      	ldr	r3, [pc, #196]	@ (8013438 <xTaskPriorityInherit+0xe0>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013378:	429a      	cmp	r2, r3
 801337a:	d24e      	bcs.n	801341a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	2b00      	cmp	r3, #0
 8013382:	db06      	blt.n	8013392 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013384:	4b2c      	ldr	r3, [pc, #176]	@ (8013438 <xTaskPriorityInherit+0xe0>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801338a:	f1c3 0207 	rsb	r2, r3, #7
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	6959      	ldr	r1, [r3, #20]
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801339a:	4613      	mov	r3, r2
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	4413      	add	r3, r2
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	4a26      	ldr	r2, [pc, #152]	@ (801343c <xTaskPriorityInherit+0xe4>)
 80133a4:	4413      	add	r3, r2
 80133a6:	4299      	cmp	r1, r3
 80133a8:	d12f      	bne.n	801340a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	3304      	adds	r3, #4
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fe fbfb 	bl	8011baa <uxListRemove>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d10a      	bne.n	80133d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133be:	2201      	movs	r2, #1
 80133c0:	fa02 f303 	lsl.w	r3, r2, r3
 80133c4:	43da      	mvns	r2, r3
 80133c6:	4b1e      	ldr	r3, [pc, #120]	@ (8013440 <xTaskPriorityInherit+0xe8>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	4013      	ands	r3, r2
 80133cc:	4a1c      	ldr	r2, [pc, #112]	@ (8013440 <xTaskPriorityInherit+0xe8>)
 80133ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80133d0:	4b19      	ldr	r3, [pc, #100]	@ (8013438 <xTaskPriorityInherit+0xe0>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133de:	2201      	movs	r2, #1
 80133e0:	409a      	lsls	r2, r3
 80133e2:	4b17      	ldr	r3, [pc, #92]	@ (8013440 <xTaskPriorityInherit+0xe8>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	4313      	orrs	r3, r2
 80133e8:	4a15      	ldr	r2, [pc, #84]	@ (8013440 <xTaskPriorityInherit+0xe8>)
 80133ea:	6013      	str	r3, [r2, #0]
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133f0:	4613      	mov	r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	4413      	add	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	4a10      	ldr	r2, [pc, #64]	@ (801343c <xTaskPriorityInherit+0xe4>)
 80133fa:	441a      	add	r2, r3
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	3304      	adds	r3, #4
 8013400:	4619      	mov	r1, r3
 8013402:	4610      	mov	r0, r2
 8013404:	f7fe fb74 	bl	8011af0 <vListInsertEnd>
 8013408:	e004      	b.n	8013414 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801340a:	4b0b      	ldr	r3, [pc, #44]	@ (8013438 <xTaskPriorityInherit+0xe0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013414:	2301      	movs	r3, #1
 8013416:	60fb      	str	r3, [r7, #12]
 8013418:	e008      	b.n	801342c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801341e:	4b06      	ldr	r3, [pc, #24]	@ (8013438 <xTaskPriorityInherit+0xe0>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013424:	429a      	cmp	r2, r3
 8013426:	d201      	bcs.n	801342c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013428:	2301      	movs	r3, #1
 801342a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801342c:	68fb      	ldr	r3, [r7, #12]
	}
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	20001848 	.word	0x20001848
 801343c:	2000184c 	.word	0x2000184c
 8013440:	20001950 	.word	0x20001950

08013444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013444:	b580      	push	{r7, lr}
 8013446:	b086      	sub	sp, #24
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013450:	2300      	movs	r3, #0
 8013452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d070      	beq.n	801353c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801345a:	4b3b      	ldr	r3, [pc, #236]	@ (8013548 <xTaskPriorityDisinherit+0x104>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	693a      	ldr	r2, [r7, #16]
 8013460:	429a      	cmp	r2, r3
 8013462:	d00b      	beq.n	801347c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013468:	f383 8811 	msr	BASEPRI, r3
 801346c:	f3bf 8f6f 	isb	sy
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	60fb      	str	r3, [r7, #12]
}
 8013476:	bf00      	nop
 8013478:	bf00      	nop
 801347a:	e7fd      	b.n	8013478 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013480:	2b00      	cmp	r3, #0
 8013482:	d10b      	bne.n	801349c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	60bb      	str	r3, [r7, #8]
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	e7fd      	b.n	8013498 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80134a0:	1e5a      	subs	r2, r3, #1
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d044      	beq.n	801353c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d140      	bne.n	801353c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	3304      	adds	r3, #4
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fe fb73 	bl	8011baa <uxListRemove>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d115      	bne.n	80134f6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ce:	491f      	ldr	r1, [pc, #124]	@ (801354c <xTaskPriorityDisinherit+0x108>)
 80134d0:	4613      	mov	r3, r2
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	4413      	add	r3, r2
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	440b      	add	r3, r1
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d10a      	bne.n	80134f6 <xTaskPriorityDisinherit+0xb2>
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134e4:	2201      	movs	r2, #1
 80134e6:	fa02 f303 	lsl.w	r3, r2, r3
 80134ea:	43da      	mvns	r2, r3
 80134ec:	4b18      	ldr	r3, [pc, #96]	@ (8013550 <xTaskPriorityDisinherit+0x10c>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	4013      	ands	r3, r2
 80134f2:	4a17      	ldr	r2, [pc, #92]	@ (8013550 <xTaskPriorityDisinherit+0x10c>)
 80134f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013502:	f1c3 0207 	rsb	r2, r3, #7
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801350e:	2201      	movs	r2, #1
 8013510:	409a      	lsls	r2, r3
 8013512:	4b0f      	ldr	r3, [pc, #60]	@ (8013550 <xTaskPriorityDisinherit+0x10c>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4313      	orrs	r3, r2
 8013518:	4a0d      	ldr	r2, [pc, #52]	@ (8013550 <xTaskPriorityDisinherit+0x10c>)
 801351a:	6013      	str	r3, [r2, #0]
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013520:	4613      	mov	r3, r2
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	4413      	add	r3, r2
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	4a08      	ldr	r2, [pc, #32]	@ (801354c <xTaskPriorityDisinherit+0x108>)
 801352a:	441a      	add	r2, r3
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	3304      	adds	r3, #4
 8013530:	4619      	mov	r1, r3
 8013532:	4610      	mov	r0, r2
 8013534:	f7fe fadc 	bl	8011af0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013538:	2301      	movs	r3, #1
 801353a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801353c:	697b      	ldr	r3, [r7, #20]
	}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	20001848 	.word	0x20001848
 801354c:	2000184c 	.word	0x2000184c
 8013550:	20001950 	.word	0x20001950

08013554 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013554:	b580      	push	{r7, lr}
 8013556:	b088      	sub	sp, #32
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013562:	2301      	movs	r3, #1
 8013564:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d079      	beq.n	8013660 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013570:	2b00      	cmp	r3, #0
 8013572:	d10b      	bne.n	801358c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8013574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	60fb      	str	r3, [r7, #12]
}
 8013586:	bf00      	nop
 8013588:	bf00      	nop
 801358a:	e7fd      	b.n	8013588 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	429a      	cmp	r2, r3
 8013594:	d902      	bls.n	801359c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	61fb      	str	r3, [r7, #28]
 801359a:	e002      	b.n	80135a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135a6:	69fa      	ldr	r2, [r7, #28]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d059      	beq.n	8013660 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135b0:	697a      	ldr	r2, [r7, #20]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d154      	bne.n	8013660 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80135b6:	4b2c      	ldr	r3, [pc, #176]	@ (8013668 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	69ba      	ldr	r2, [r7, #24]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d10b      	bne.n	80135d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80135c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135c4:	f383 8811 	msr	BASEPRI, r3
 80135c8:	f3bf 8f6f 	isb	sy
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	60bb      	str	r3, [r7, #8]
}
 80135d2:	bf00      	nop
 80135d4:	bf00      	nop
 80135d6:	e7fd      	b.n	80135d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	69fa      	ldr	r2, [r7, #28]
 80135e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	699b      	ldr	r3, [r3, #24]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	db04      	blt.n	80135f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	f1c3 0207 	rsb	r2, r3, #7
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	6959      	ldr	r1, [r3, #20]
 80135fa:	693a      	ldr	r2, [r7, #16]
 80135fc:	4613      	mov	r3, r2
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	4413      	add	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4a19      	ldr	r2, [pc, #100]	@ (801366c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013606:	4413      	add	r3, r2
 8013608:	4299      	cmp	r1, r3
 801360a:	d129      	bne.n	8013660 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	3304      	adds	r3, #4
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe faca 	bl	8011baa <uxListRemove>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d10a      	bne.n	8013632 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013620:	2201      	movs	r2, #1
 8013622:	fa02 f303 	lsl.w	r3, r2, r3
 8013626:	43da      	mvns	r2, r3
 8013628:	4b11      	ldr	r3, [pc, #68]	@ (8013670 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4013      	ands	r3, r2
 801362e:	4a10      	ldr	r2, [pc, #64]	@ (8013670 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013630:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013636:	2201      	movs	r2, #1
 8013638:	409a      	lsls	r2, r3
 801363a:	4b0d      	ldr	r3, [pc, #52]	@ (8013670 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4313      	orrs	r3, r2
 8013640:	4a0b      	ldr	r2, [pc, #44]	@ (8013670 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013648:	4613      	mov	r3, r2
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	4413      	add	r3, r2
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	4a06      	ldr	r2, [pc, #24]	@ (801366c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013652:	441a      	add	r2, r3
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	3304      	adds	r3, #4
 8013658:	4619      	mov	r1, r3
 801365a:	4610      	mov	r0, r2
 801365c:	f7fe fa48 	bl	8011af0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013660:	bf00      	nop
 8013662:	3720      	adds	r7, #32
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20001848 	.word	0x20001848
 801366c:	2000184c 	.word	0x2000184c
 8013670:	20001950 	.word	0x20001950

08013674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013674:	b480      	push	{r7}
 8013676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013678:	4b07      	ldr	r3, [pc, #28]	@ (8013698 <pvTaskIncrementMutexHeldCount+0x24>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013680:	4b05      	ldr	r3, [pc, #20]	@ (8013698 <pvTaskIncrementMutexHeldCount+0x24>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013686:	3201      	adds	r2, #1
 8013688:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801368a:	4b03      	ldr	r3, [pc, #12]	@ (8013698 <pvTaskIncrementMutexHeldCount+0x24>)
 801368c:	681b      	ldr	r3, [r3, #0]
	}
 801368e:	4618      	mov	r0, r3
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr
 8013698:	20001848 	.word	0x20001848

0801369c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80136a6:	4b29      	ldr	r3, [pc, #164]	@ (801374c <prvAddCurrentTaskToDelayedList+0xb0>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136ac:	4b28      	ldr	r3, [pc, #160]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	3304      	adds	r3, #4
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fe fa79 	bl	8011baa <uxListRemove>
 80136b8:	4603      	mov	r3, r0
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d10b      	bne.n	80136d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80136be:	4b24      	ldr	r3, [pc, #144]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136c4:	2201      	movs	r2, #1
 80136c6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ca:	43da      	mvns	r2, r3
 80136cc:	4b21      	ldr	r3, [pc, #132]	@ (8013754 <prvAddCurrentTaskToDelayedList+0xb8>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4013      	ands	r3, r2
 80136d2:	4a20      	ldr	r2, [pc, #128]	@ (8013754 <prvAddCurrentTaskToDelayedList+0xb8>)
 80136d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136dc:	d10a      	bne.n	80136f4 <prvAddCurrentTaskToDelayedList+0x58>
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d007      	beq.n	80136f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136e4:	4b1a      	ldr	r3, [pc, #104]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	3304      	adds	r3, #4
 80136ea:	4619      	mov	r1, r3
 80136ec:	481a      	ldr	r0, [pc, #104]	@ (8013758 <prvAddCurrentTaskToDelayedList+0xbc>)
 80136ee:	f7fe f9ff 	bl	8011af0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80136f2:	e026      	b.n	8013742 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80136f4:	68fa      	ldr	r2, [r7, #12]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4413      	add	r3, r2
 80136fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136fc:	4b14      	ldr	r3, [pc, #80]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	68ba      	ldr	r2, [r7, #8]
 8013702:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	429a      	cmp	r2, r3
 801370a:	d209      	bcs.n	8013720 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801370c:	4b13      	ldr	r3, [pc, #76]	@ (801375c <prvAddCurrentTaskToDelayedList+0xc0>)
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	4b0f      	ldr	r3, [pc, #60]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	3304      	adds	r3, #4
 8013716:	4619      	mov	r1, r3
 8013718:	4610      	mov	r0, r2
 801371a:	f7fe fa0d 	bl	8011b38 <vListInsert>
}
 801371e:	e010      	b.n	8013742 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013720:	4b0f      	ldr	r3, [pc, #60]	@ (8013760 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013722:	681a      	ldr	r2, [r3, #0]
 8013724:	4b0a      	ldr	r3, [pc, #40]	@ (8013750 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	3304      	adds	r3, #4
 801372a:	4619      	mov	r1, r3
 801372c:	4610      	mov	r0, r2
 801372e:	f7fe fa03 	bl	8011b38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013732:	4b0c      	ldr	r3, [pc, #48]	@ (8013764 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	68ba      	ldr	r2, [r7, #8]
 8013738:	429a      	cmp	r2, r3
 801373a:	d202      	bcs.n	8013742 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801373c:	4a09      	ldr	r2, [pc, #36]	@ (8013764 <prvAddCurrentTaskToDelayedList+0xc8>)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	6013      	str	r3, [r2, #0]
}
 8013742:	bf00      	nop
 8013744:	3710      	adds	r7, #16
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	2000194c 	.word	0x2000194c
 8013750:	20001848 	.word	0x20001848
 8013754:	20001950 	.word	0x20001950
 8013758:	20001934 	.word	0x20001934
 801375c:	20001904 	.word	0x20001904
 8013760:	20001900 	.word	0x20001900
 8013764:	20001968 	.word	0x20001968

08013768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013768:	b480      	push	{r7}
 801376a:	b085      	sub	sp, #20
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	3b04      	subs	r3, #4
 8013778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	3b04      	subs	r3, #4
 8013786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	f023 0201 	bic.w	r2, r3, #1
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	3b04      	subs	r3, #4
 8013796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013798:	4a0c      	ldr	r2, [pc, #48]	@ (80137cc <pxPortInitialiseStack+0x64>)
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	3b14      	subs	r3, #20
 80137a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	3b04      	subs	r3, #4
 80137ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f06f 0202 	mvn.w	r2, #2
 80137b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	3b20      	subs	r3, #32
 80137bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80137be:	68fb      	ldr	r3, [r7, #12]
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3714      	adds	r7, #20
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	080137d1 	.word	0x080137d1

080137d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80137d0:	b480      	push	{r7}
 80137d2:	b085      	sub	sp, #20
 80137d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80137da:	4b13      	ldr	r3, [pc, #76]	@ (8013828 <prvTaskExitError+0x58>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e2:	d00b      	beq.n	80137fc <prvTaskExitError+0x2c>
	__asm volatile
 80137e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	60fb      	str	r3, [r7, #12]
}
 80137f6:	bf00      	nop
 80137f8:	bf00      	nop
 80137fa:	e7fd      	b.n	80137f8 <prvTaskExitError+0x28>
	__asm volatile
 80137fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013800:	f383 8811 	msr	BASEPRI, r3
 8013804:	f3bf 8f6f 	isb	sy
 8013808:	f3bf 8f4f 	dsb	sy
 801380c:	60bb      	str	r3, [r7, #8]
}
 801380e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013810:	bf00      	nop
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d0fc      	beq.n	8013812 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013818:	bf00      	nop
 801381a:	bf00      	nop
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	20000044 	.word	0x20000044
 801382c:	00000000 	.word	0x00000000

08013830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013830:	4b07      	ldr	r3, [pc, #28]	@ (8013850 <pxCurrentTCBConst2>)
 8013832:	6819      	ldr	r1, [r3, #0]
 8013834:	6808      	ldr	r0, [r1, #0]
 8013836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383a:	f380 8809 	msr	PSP, r0
 801383e:	f3bf 8f6f 	isb	sy
 8013842:	f04f 0000 	mov.w	r0, #0
 8013846:	f380 8811 	msr	BASEPRI, r0
 801384a:	4770      	bx	lr
 801384c:	f3af 8000 	nop.w

08013850 <pxCurrentTCBConst2>:
 8013850:	20001848 	.word	0x20001848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013854:	bf00      	nop
 8013856:	bf00      	nop

08013858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013858:	4808      	ldr	r0, [pc, #32]	@ (801387c <prvPortStartFirstTask+0x24>)
 801385a:	6800      	ldr	r0, [r0, #0]
 801385c:	6800      	ldr	r0, [r0, #0]
 801385e:	f380 8808 	msr	MSP, r0
 8013862:	f04f 0000 	mov.w	r0, #0
 8013866:	f380 8814 	msr	CONTROL, r0
 801386a:	b662      	cpsie	i
 801386c:	b661      	cpsie	f
 801386e:	f3bf 8f4f 	dsb	sy
 8013872:	f3bf 8f6f 	isb	sy
 8013876:	df00      	svc	0
 8013878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801387a:	bf00      	nop
 801387c:	e000ed08 	.word	0xe000ed08

08013880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013886:	4b47      	ldr	r3, [pc, #284]	@ (80139a4 <xPortStartScheduler+0x124>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	4a47      	ldr	r2, [pc, #284]	@ (80139a8 <xPortStartScheduler+0x128>)
 801388c:	4293      	cmp	r3, r2
 801388e:	d10b      	bne.n	80138a8 <xPortStartScheduler+0x28>
	__asm volatile
 8013890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013894:	f383 8811 	msr	BASEPRI, r3
 8013898:	f3bf 8f6f 	isb	sy
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	60fb      	str	r3, [r7, #12]
}
 80138a2:	bf00      	nop
 80138a4:	bf00      	nop
 80138a6:	e7fd      	b.n	80138a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80138a8:	4b3e      	ldr	r3, [pc, #248]	@ (80139a4 <xPortStartScheduler+0x124>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	4a3f      	ldr	r2, [pc, #252]	@ (80139ac <xPortStartScheduler+0x12c>)
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d10b      	bne.n	80138ca <xPortStartScheduler+0x4a>
	__asm volatile
 80138b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b6:	f383 8811 	msr	BASEPRI, r3
 80138ba:	f3bf 8f6f 	isb	sy
 80138be:	f3bf 8f4f 	dsb	sy
 80138c2:	613b      	str	r3, [r7, #16]
}
 80138c4:	bf00      	nop
 80138c6:	bf00      	nop
 80138c8:	e7fd      	b.n	80138c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80138ca:	4b39      	ldr	r3, [pc, #228]	@ (80139b0 <xPortStartScheduler+0x130>)
 80138cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	22ff      	movs	r2, #255	@ 0xff
 80138da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80138e4:	78fb      	ldrb	r3, [r7, #3]
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	4b31      	ldr	r3, [pc, #196]	@ (80139b4 <xPortStartScheduler+0x134>)
 80138f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80138f2:	4b31      	ldr	r3, [pc, #196]	@ (80139b8 <xPortStartScheduler+0x138>)
 80138f4:	2207      	movs	r2, #7
 80138f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138f8:	e009      	b.n	801390e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80138fa:	4b2f      	ldr	r3, [pc, #188]	@ (80139b8 <xPortStartScheduler+0x138>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	3b01      	subs	r3, #1
 8013900:	4a2d      	ldr	r2, [pc, #180]	@ (80139b8 <xPortStartScheduler+0x138>)
 8013902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013904:	78fb      	ldrb	r3, [r7, #3]
 8013906:	b2db      	uxtb	r3, r3
 8013908:	005b      	lsls	r3, r3, #1
 801390a:	b2db      	uxtb	r3, r3
 801390c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801390e:	78fb      	ldrb	r3, [r7, #3]
 8013910:	b2db      	uxtb	r3, r3
 8013912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013916:	2b80      	cmp	r3, #128	@ 0x80
 8013918:	d0ef      	beq.n	80138fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801391a:	4b27      	ldr	r3, [pc, #156]	@ (80139b8 <xPortStartScheduler+0x138>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f1c3 0307 	rsb	r3, r3, #7
 8013922:	2b04      	cmp	r3, #4
 8013924:	d00b      	beq.n	801393e <xPortStartScheduler+0xbe>
	__asm volatile
 8013926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801392a:	f383 8811 	msr	BASEPRI, r3
 801392e:	f3bf 8f6f 	isb	sy
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	60bb      	str	r3, [r7, #8]
}
 8013938:	bf00      	nop
 801393a:	bf00      	nop
 801393c:	e7fd      	b.n	801393a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801393e:	4b1e      	ldr	r3, [pc, #120]	@ (80139b8 <xPortStartScheduler+0x138>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	021b      	lsls	r3, r3, #8
 8013944:	4a1c      	ldr	r2, [pc, #112]	@ (80139b8 <xPortStartScheduler+0x138>)
 8013946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013948:	4b1b      	ldr	r3, [pc, #108]	@ (80139b8 <xPortStartScheduler+0x138>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013950:	4a19      	ldr	r2, [pc, #100]	@ (80139b8 <xPortStartScheduler+0x138>)
 8013952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	b2da      	uxtb	r2, r3
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801395c:	4b17      	ldr	r3, [pc, #92]	@ (80139bc <xPortStartScheduler+0x13c>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	4a16      	ldr	r2, [pc, #88]	@ (80139bc <xPortStartScheduler+0x13c>)
 8013962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013968:	4b14      	ldr	r3, [pc, #80]	@ (80139bc <xPortStartScheduler+0x13c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	4a13      	ldr	r2, [pc, #76]	@ (80139bc <xPortStartScheduler+0x13c>)
 801396e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013974:	f000 f8da 	bl	8013b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013978:	4b11      	ldr	r3, [pc, #68]	@ (80139c0 <xPortStartScheduler+0x140>)
 801397a:	2200      	movs	r2, #0
 801397c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801397e:	f000 f8f9 	bl	8013b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013982:	4b10      	ldr	r3, [pc, #64]	@ (80139c4 <xPortStartScheduler+0x144>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	4a0f      	ldr	r2, [pc, #60]	@ (80139c4 <xPortStartScheduler+0x144>)
 8013988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801398c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801398e:	f7ff ff63 	bl	8013858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013992:	f7ff fa93 	bl	8012ebc <vTaskSwitchContext>
	prvTaskExitError();
 8013996:	f7ff ff1b 	bl	80137d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3718      	adds	r7, #24
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	e000ed00 	.word	0xe000ed00
 80139a8:	410fc271 	.word	0x410fc271
 80139ac:	410fc270 	.word	0x410fc270
 80139b0:	e000e400 	.word	0xe000e400
 80139b4:	20001974 	.word	0x20001974
 80139b8:	20001978 	.word	0x20001978
 80139bc:	e000ed20 	.word	0xe000ed20
 80139c0:	20000044 	.word	0x20000044
 80139c4:	e000ef34 	.word	0xe000ef34

080139c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	607b      	str	r3, [r7, #4]
}
 80139e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80139e2:	4b10      	ldr	r3, [pc, #64]	@ (8013a24 <vPortEnterCritical+0x5c>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	3301      	adds	r3, #1
 80139e8:	4a0e      	ldr	r2, [pc, #56]	@ (8013a24 <vPortEnterCritical+0x5c>)
 80139ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80139ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013a24 <vPortEnterCritical+0x5c>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d110      	bne.n	8013a16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80139f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013a28 <vPortEnterCritical+0x60>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00b      	beq.n	8013a16 <vPortEnterCritical+0x4e>
	__asm volatile
 80139fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a02:	f383 8811 	msr	BASEPRI, r3
 8013a06:	f3bf 8f6f 	isb	sy
 8013a0a:	f3bf 8f4f 	dsb	sy
 8013a0e:	603b      	str	r3, [r7, #0]
}
 8013a10:	bf00      	nop
 8013a12:	bf00      	nop
 8013a14:	e7fd      	b.n	8013a12 <vPortEnterCritical+0x4a>
	}
}
 8013a16:	bf00      	nop
 8013a18:	370c      	adds	r7, #12
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	20000044 	.word	0x20000044
 8013a28:	e000ed04 	.word	0xe000ed04

08013a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013a32:	4b12      	ldr	r3, [pc, #72]	@ (8013a7c <vPortExitCritical+0x50>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d10b      	bne.n	8013a52 <vPortExitCritical+0x26>
	__asm volatile
 8013a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a3e:	f383 8811 	msr	BASEPRI, r3
 8013a42:	f3bf 8f6f 	isb	sy
 8013a46:	f3bf 8f4f 	dsb	sy
 8013a4a:	607b      	str	r3, [r7, #4]
}
 8013a4c:	bf00      	nop
 8013a4e:	bf00      	nop
 8013a50:	e7fd      	b.n	8013a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013a52:	4b0a      	ldr	r3, [pc, #40]	@ (8013a7c <vPortExitCritical+0x50>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	4a08      	ldr	r2, [pc, #32]	@ (8013a7c <vPortExitCritical+0x50>)
 8013a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013a5c:	4b07      	ldr	r3, [pc, #28]	@ (8013a7c <vPortExitCritical+0x50>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d105      	bne.n	8013a70 <vPortExitCritical+0x44>
 8013a64:	2300      	movs	r3, #0
 8013a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	f383 8811 	msr	BASEPRI, r3
}
 8013a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr
 8013a7c:	20000044 	.word	0x20000044

08013a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013a80:	f3ef 8009 	mrs	r0, PSP
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	4b15      	ldr	r3, [pc, #84]	@ (8013ae0 <pxCurrentTCBConst>)
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	f01e 0f10 	tst.w	lr, #16
 8013a90:	bf08      	it	eq
 8013a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9a:	6010      	str	r0, [r2, #0]
 8013a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013aa4:	f380 8811 	msr	BASEPRI, r0
 8013aa8:	f3bf 8f4f 	dsb	sy
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f7ff fa04 	bl	8012ebc <vTaskSwitchContext>
 8013ab4:	f04f 0000 	mov.w	r0, #0
 8013ab8:	f380 8811 	msr	BASEPRI, r0
 8013abc:	bc09      	pop	{r0, r3}
 8013abe:	6819      	ldr	r1, [r3, #0]
 8013ac0:	6808      	ldr	r0, [r1, #0]
 8013ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac6:	f01e 0f10 	tst.w	lr, #16
 8013aca:	bf08      	it	eq
 8013acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013ad0:	f380 8809 	msr	PSP, r0
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	f3af 8000 	nop.w

08013ae0 <pxCurrentTCBConst>:
 8013ae0:	20001848 	.word	0x20001848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013ae4:	bf00      	nop
 8013ae6:	bf00      	nop

08013ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
	__asm volatile
 8013aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af2:	f383 8811 	msr	BASEPRI, r3
 8013af6:	f3bf 8f6f 	isb	sy
 8013afa:	f3bf 8f4f 	dsb	sy
 8013afe:	607b      	str	r3, [r7, #4]
}
 8013b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013b02:	f7ff f921 	bl	8012d48 <xTaskIncrementTick>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d003      	beq.n	8013b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013b0c:	4b06      	ldr	r3, [pc, #24]	@ (8013b28 <SysTick_Handler+0x40>)
 8013b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b12:	601a      	str	r2, [r3, #0]
 8013b14:	2300      	movs	r3, #0
 8013b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	f383 8811 	msr	BASEPRI, r3
}
 8013b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	e000ed04 	.word	0xe000ed04

08013b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013b30:	4b0b      	ldr	r3, [pc, #44]	@ (8013b60 <vPortSetupTimerInterrupt+0x34>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013b36:	4b0b      	ldr	r3, [pc, #44]	@ (8013b64 <vPortSetupTimerInterrupt+0x38>)
 8013b38:	2200      	movs	r2, #0
 8013b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8013b68 <vPortSetupTimerInterrupt+0x3c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4a0a      	ldr	r2, [pc, #40]	@ (8013b6c <vPortSetupTimerInterrupt+0x40>)
 8013b42:	fba2 2303 	umull	r2, r3, r2, r3
 8013b46:	099b      	lsrs	r3, r3, #6
 8013b48:	4a09      	ldr	r2, [pc, #36]	@ (8013b70 <vPortSetupTimerInterrupt+0x44>)
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013b4e:	4b04      	ldr	r3, [pc, #16]	@ (8013b60 <vPortSetupTimerInterrupt+0x34>)
 8013b50:	2207      	movs	r2, #7
 8013b52:	601a      	str	r2, [r3, #0]
}
 8013b54:	bf00      	nop
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	e000e010 	.word	0xe000e010
 8013b64:	e000e018 	.word	0xe000e018
 8013b68:	20000020 	.word	0x20000020
 8013b6c:	10624dd3 	.word	0x10624dd3
 8013b70:	e000e014 	.word	0xe000e014

08013b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013b74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013b84 <vPortEnableVFP+0x10>
 8013b78:	6801      	ldr	r1, [r0, #0]
 8013b7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013b7e:	6001      	str	r1, [r0, #0]
 8013b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013b82:	bf00      	nop
 8013b84:	e000ed88 	.word	0xe000ed88

08013b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b8e:	f3ef 8305 	mrs	r3, IPSR
 8013b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b0f      	cmp	r3, #15
 8013b98:	d915      	bls.n	8013bc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b9a:	4a18      	ldr	r2, [pc, #96]	@ (8013bfc <vPortValidateInterruptPriority+0x74>)
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013ba4:	4b16      	ldr	r3, [pc, #88]	@ (8013c00 <vPortValidateInterruptPriority+0x78>)
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	7afa      	ldrb	r2, [r7, #11]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d20b      	bcs.n	8013bc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb2:	f383 8811 	msr	BASEPRI, r3
 8013bb6:	f3bf 8f6f 	isb	sy
 8013bba:	f3bf 8f4f 	dsb	sy
 8013bbe:	607b      	str	r3, [r7, #4]
}
 8013bc0:	bf00      	nop
 8013bc2:	bf00      	nop
 8013bc4:	e7fd      	b.n	8013bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8013c04 <vPortValidateInterruptPriority+0x7c>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013bce:	4b0e      	ldr	r3, [pc, #56]	@ (8013c08 <vPortValidateInterruptPriority+0x80>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d90b      	bls.n	8013bee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	603b      	str	r3, [r7, #0]
}
 8013be8:	bf00      	nop
 8013bea:	bf00      	nop
 8013bec:	e7fd      	b.n	8013bea <vPortValidateInterruptPriority+0x62>
	}
 8013bee:	bf00      	nop
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop
 8013bfc:	e000e3f0 	.word	0xe000e3f0
 8013c00:	20001974 	.word	0x20001974
 8013c04:	e000ed0c 	.word	0xe000ed0c
 8013c08:	20001978 	.word	0x20001978

08013c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b08a      	sub	sp, #40	@ 0x28
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013c14:	2300      	movs	r3, #0
 8013c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013c18:	f7fe ffea 	bl	8012bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8013d90 <pvPortMalloc+0x184>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d101      	bne.n	8013c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013c24:	f000 f924 	bl	8013e70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013c28:	4b5a      	ldr	r3, [pc, #360]	@ (8013d94 <pvPortMalloc+0x188>)
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	4013      	ands	r3, r2
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f040 8095 	bne.w	8013d60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d01e      	beq.n	8013c7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013c3c:	2208      	movs	r2, #8
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4413      	add	r3, r2
 8013c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f003 0307 	and.w	r3, r3, #7
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d015      	beq.n	8013c7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f023 0307 	bic.w	r3, r3, #7
 8013c54:	3308      	adds	r3, #8
 8013c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f003 0307 	and.w	r3, r3, #7
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d00b      	beq.n	8013c7a <pvPortMalloc+0x6e>
	__asm volatile
 8013c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c66:	f383 8811 	msr	BASEPRI, r3
 8013c6a:	f3bf 8f6f 	isb	sy
 8013c6e:	f3bf 8f4f 	dsb	sy
 8013c72:	617b      	str	r3, [r7, #20]
}
 8013c74:	bf00      	nop
 8013c76:	bf00      	nop
 8013c78:	e7fd      	b.n	8013c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d06f      	beq.n	8013d60 <pvPortMalloc+0x154>
 8013c80:	4b45      	ldr	r3, [pc, #276]	@ (8013d98 <pvPortMalloc+0x18c>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d86a      	bhi.n	8013d60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c8a:	4b44      	ldr	r3, [pc, #272]	@ (8013d9c <pvPortMalloc+0x190>)
 8013c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c8e:	4b43      	ldr	r3, [pc, #268]	@ (8013d9c <pvPortMalloc+0x190>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c94:	e004      	b.n	8013ca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d903      	bls.n	8013cb2 <pvPortMalloc+0xa6>
 8013caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1f1      	bne.n	8013c96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013cb2:	4b37      	ldr	r3, [pc, #220]	@ (8013d90 <pvPortMalloc+0x184>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d051      	beq.n	8013d60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013cbc:	6a3b      	ldr	r3, [r7, #32]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2208      	movs	r2, #8
 8013cc2:	4413      	add	r3, r2
 8013cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	6a3b      	ldr	r3, [r7, #32]
 8013ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd0:	685a      	ldr	r2, [r3, #4]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	1ad2      	subs	r2, r2, r3
 8013cd6:	2308      	movs	r3, #8
 8013cd8:	005b      	lsls	r3, r3, #1
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d920      	bls.n	8013d20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4413      	add	r3, r2
 8013ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	f003 0307 	and.w	r3, r3, #7
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00b      	beq.n	8013d08 <pvPortMalloc+0xfc>
	__asm volatile
 8013cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cf4:	f383 8811 	msr	BASEPRI, r3
 8013cf8:	f3bf 8f6f 	isb	sy
 8013cfc:	f3bf 8f4f 	dsb	sy
 8013d00:	613b      	str	r3, [r7, #16]
}
 8013d02:	bf00      	nop
 8013d04:	bf00      	nop
 8013d06:	e7fd      	b.n	8013d04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d0a:	685a      	ldr	r2, [r3, #4]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	1ad2      	subs	r2, r2, r3
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013d1a:	69b8      	ldr	r0, [r7, #24]
 8013d1c:	f000 f90a 	bl	8013f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013d20:	4b1d      	ldr	r3, [pc, #116]	@ (8013d98 <pvPortMalloc+0x18c>)
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8013d98 <pvPortMalloc+0x18c>)
 8013d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013d98 <pvPortMalloc+0x18c>)
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	4b1b      	ldr	r3, [pc, #108]	@ (8013da0 <pvPortMalloc+0x194>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d203      	bcs.n	8013d42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013d3a:	4b17      	ldr	r3, [pc, #92]	@ (8013d98 <pvPortMalloc+0x18c>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4a18      	ldr	r2, [pc, #96]	@ (8013da0 <pvPortMalloc+0x194>)
 8013d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	4b13      	ldr	r3, [pc, #76]	@ (8013d94 <pvPortMalloc+0x188>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	431a      	orrs	r2, r3
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d52:	2200      	movs	r2, #0
 8013d54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013d56:	4b13      	ldr	r3, [pc, #76]	@ (8013da4 <pvPortMalloc+0x198>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	4a11      	ldr	r2, [pc, #68]	@ (8013da4 <pvPortMalloc+0x198>)
 8013d5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013d60:	f7fe ff54 	bl	8012c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	f003 0307 	and.w	r3, r3, #7
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d00b      	beq.n	8013d86 <pvPortMalloc+0x17a>
	__asm volatile
 8013d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d72:	f383 8811 	msr	BASEPRI, r3
 8013d76:	f3bf 8f6f 	isb	sy
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	60fb      	str	r3, [r7, #12]
}
 8013d80:	bf00      	nop
 8013d82:	bf00      	nop
 8013d84:	e7fd      	b.n	8013d82 <pvPortMalloc+0x176>
	return pvReturn;
 8013d86:	69fb      	ldr	r3, [r7, #28]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3728      	adds	r7, #40	@ 0x28
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	20004864 	.word	0x20004864
 8013d94:	20004878 	.word	0x20004878
 8013d98:	20004868 	.word	0x20004868
 8013d9c:	2000485c 	.word	0x2000485c
 8013da0:	2000486c 	.word	0x2000486c
 8013da4:	20004870 	.word	0x20004870

08013da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d04f      	beq.n	8013e5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013dba:	2308      	movs	r3, #8
 8013dbc:	425b      	negs	r3, r3
 8013dbe:	697a      	ldr	r2, [r7, #20]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	685a      	ldr	r2, [r3, #4]
 8013dcc:	4b25      	ldr	r3, [pc, #148]	@ (8013e64 <vPortFree+0xbc>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4013      	ands	r3, r2
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d10b      	bne.n	8013dee <vPortFree+0x46>
	__asm volatile
 8013dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dda:	f383 8811 	msr	BASEPRI, r3
 8013dde:	f3bf 8f6f 	isb	sy
 8013de2:	f3bf 8f4f 	dsb	sy
 8013de6:	60fb      	str	r3, [r7, #12]
}
 8013de8:	bf00      	nop
 8013dea:	bf00      	nop
 8013dec:	e7fd      	b.n	8013dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00b      	beq.n	8013e0e <vPortFree+0x66>
	__asm volatile
 8013df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dfa:	f383 8811 	msr	BASEPRI, r3
 8013dfe:	f3bf 8f6f 	isb	sy
 8013e02:	f3bf 8f4f 	dsb	sy
 8013e06:	60bb      	str	r3, [r7, #8]
}
 8013e08:	bf00      	nop
 8013e0a:	bf00      	nop
 8013e0c:	e7fd      	b.n	8013e0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	685a      	ldr	r2, [r3, #4]
 8013e12:	4b14      	ldr	r3, [pc, #80]	@ (8013e64 <vPortFree+0xbc>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4013      	ands	r3, r2
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d01e      	beq.n	8013e5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d11a      	bne.n	8013e5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	685a      	ldr	r2, [r3, #4]
 8013e28:	4b0e      	ldr	r3, [pc, #56]	@ (8013e64 <vPortFree+0xbc>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	43db      	mvns	r3, r3
 8013e2e:	401a      	ands	r2, r3
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013e34:	f7fe fedc 	bl	8012bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	685a      	ldr	r2, [r3, #4]
 8013e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8013e68 <vPortFree+0xc0>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4413      	add	r3, r2
 8013e42:	4a09      	ldr	r2, [pc, #36]	@ (8013e68 <vPortFree+0xc0>)
 8013e44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013e46:	6938      	ldr	r0, [r7, #16]
 8013e48:	f000 f874 	bl	8013f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013e4c:	4b07      	ldr	r3, [pc, #28]	@ (8013e6c <vPortFree+0xc4>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	3301      	adds	r3, #1
 8013e52:	4a06      	ldr	r2, [pc, #24]	@ (8013e6c <vPortFree+0xc4>)
 8013e54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013e56:	f7fe fed9 	bl	8012c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013e5a:	bf00      	nop
 8013e5c:	3718      	adds	r7, #24
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	20004878 	.word	0x20004878
 8013e68:	20004868 	.word	0x20004868
 8013e6c:	20004874 	.word	0x20004874

08013e70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013e70:	b480      	push	{r7}
 8013e72:	b085      	sub	sp, #20
 8013e74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013e76:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8013e7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013e7c:	4b27      	ldr	r3, [pc, #156]	@ (8013f1c <prvHeapInit+0xac>)
 8013e7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f003 0307 	and.w	r3, r3, #7
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00c      	beq.n	8013ea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	3307      	adds	r3, #7
 8013e8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f023 0307 	bic.w	r3, r3, #7
 8013e96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013e98:	68ba      	ldr	r2, [r7, #8]
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8013f1c <prvHeapInit+0xac>)
 8013ea0:	4413      	add	r3, r2
 8013ea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8013f20 <prvHeapInit+0xb0>)
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013eae:	4b1c      	ldr	r3, [pc, #112]	@ (8013f20 <prvHeapInit+0xb0>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	68ba      	ldr	r2, [r7, #8]
 8013eb8:	4413      	add	r3, r2
 8013eba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013ebc:	2208      	movs	r2, #8
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	1a9b      	subs	r3, r3, r2
 8013ec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f023 0307 	bic.w	r3, r3, #7
 8013eca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4a15      	ldr	r2, [pc, #84]	@ (8013f24 <prvHeapInit+0xb4>)
 8013ed0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013ed2:	4b14      	ldr	r3, [pc, #80]	@ (8013f24 <prvHeapInit+0xb4>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013eda:	4b12      	ldr	r3, [pc, #72]	@ (8013f24 <prvHeapInit+0xb4>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	1ad2      	subs	r2, r2, r3
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8013f24 <prvHeapInit+0xb4>)
 8013ef2:	681a      	ldr	r2, [r3, #0]
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	4a0a      	ldr	r2, [pc, #40]	@ (8013f28 <prvHeapInit+0xb8>)
 8013efe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	4a09      	ldr	r2, [pc, #36]	@ (8013f2c <prvHeapInit+0xbc>)
 8013f06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013f08:	4b09      	ldr	r3, [pc, #36]	@ (8013f30 <prvHeapInit+0xc0>)
 8013f0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013f0e:	601a      	str	r2, [r3, #0]
}
 8013f10:	bf00      	nop
 8013f12:	3714      	adds	r7, #20
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	2000197c 	.word	0x2000197c
 8013f20:	2000485c 	.word	0x2000485c
 8013f24:	20004864 	.word	0x20004864
 8013f28:	2000486c 	.word	0x2000486c
 8013f2c:	20004868 	.word	0x20004868
 8013f30:	20004878 	.word	0x20004878

08013f34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013f34:	b480      	push	{r7}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013f3c:	4b28      	ldr	r3, [pc, #160]	@ (8013fe0 <prvInsertBlockIntoFreeList+0xac>)
 8013f3e:	60fb      	str	r3, [r7, #12]
 8013f40:	e002      	b.n	8013f48 <prvInsertBlockIntoFreeList+0x14>
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d8f7      	bhi.n	8013f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	68ba      	ldr	r2, [r7, #8]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d108      	bne.n	8013f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	685a      	ldr	r2, [r3, #4]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	441a      	add	r2, r3
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	68ba      	ldr	r2, [r7, #8]
 8013f80:	441a      	add	r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d118      	bne.n	8013fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	4b15      	ldr	r3, [pc, #84]	@ (8013fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d00d      	beq.n	8013fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	685a      	ldr	r2, [r3, #4]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	441a      	add	r2, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	681a      	ldr	r2, [r3, #0]
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	e008      	b.n	8013fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8013fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	601a      	str	r2, [r3, #0]
 8013fba:	e003      	b.n	8013fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d002      	beq.n	8013fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013fd2:	bf00      	nop
 8013fd4:	3714      	adds	r7, #20
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop
 8013fe0:	2000485c 	.word	0x2000485c
 8013fe4:	20004864 	.word	0x20004864

08013fe8 <__cvt>:
 8013fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fec:	ec57 6b10 	vmov	r6, r7, d0
 8013ff0:	2f00      	cmp	r7, #0
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	463b      	mov	r3, r7
 8013ff8:	bfbb      	ittet	lt
 8013ffa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013ffe:	461f      	movlt	r7, r3
 8014000:	2300      	movge	r3, #0
 8014002:	232d      	movlt	r3, #45	@ 0x2d
 8014004:	700b      	strb	r3, [r1, #0]
 8014006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014008:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801400c:	4691      	mov	r9, r2
 801400e:	f023 0820 	bic.w	r8, r3, #32
 8014012:	bfbc      	itt	lt
 8014014:	4632      	movlt	r2, r6
 8014016:	4616      	movlt	r6, r2
 8014018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801401c:	d005      	beq.n	801402a <__cvt+0x42>
 801401e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014022:	d100      	bne.n	8014026 <__cvt+0x3e>
 8014024:	3401      	adds	r4, #1
 8014026:	2102      	movs	r1, #2
 8014028:	e000      	b.n	801402c <__cvt+0x44>
 801402a:	2103      	movs	r1, #3
 801402c:	ab03      	add	r3, sp, #12
 801402e:	9301      	str	r3, [sp, #4]
 8014030:	ab02      	add	r3, sp, #8
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	ec47 6b10 	vmov	d0, r6, r7
 8014038:	4653      	mov	r3, sl
 801403a:	4622      	mov	r2, r4
 801403c:	f001 fa04 	bl	8015448 <_dtoa_r>
 8014040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014044:	4605      	mov	r5, r0
 8014046:	d119      	bne.n	801407c <__cvt+0x94>
 8014048:	f019 0f01 	tst.w	r9, #1
 801404c:	d00e      	beq.n	801406c <__cvt+0x84>
 801404e:	eb00 0904 	add.w	r9, r0, r4
 8014052:	2200      	movs	r2, #0
 8014054:	2300      	movs	r3, #0
 8014056:	4630      	mov	r0, r6
 8014058:	4639      	mov	r1, r7
 801405a:	f7ec fd5d 	bl	8000b18 <__aeabi_dcmpeq>
 801405e:	b108      	cbz	r0, 8014064 <__cvt+0x7c>
 8014060:	f8cd 900c 	str.w	r9, [sp, #12]
 8014064:	2230      	movs	r2, #48	@ 0x30
 8014066:	9b03      	ldr	r3, [sp, #12]
 8014068:	454b      	cmp	r3, r9
 801406a:	d31e      	bcc.n	80140aa <__cvt+0xc2>
 801406c:	9b03      	ldr	r3, [sp, #12]
 801406e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014070:	1b5b      	subs	r3, r3, r5
 8014072:	4628      	mov	r0, r5
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	b004      	add	sp, #16
 8014078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801407c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014080:	eb00 0904 	add.w	r9, r0, r4
 8014084:	d1e5      	bne.n	8014052 <__cvt+0x6a>
 8014086:	7803      	ldrb	r3, [r0, #0]
 8014088:	2b30      	cmp	r3, #48	@ 0x30
 801408a:	d10a      	bne.n	80140a2 <__cvt+0xba>
 801408c:	2200      	movs	r2, #0
 801408e:	2300      	movs	r3, #0
 8014090:	4630      	mov	r0, r6
 8014092:	4639      	mov	r1, r7
 8014094:	f7ec fd40 	bl	8000b18 <__aeabi_dcmpeq>
 8014098:	b918      	cbnz	r0, 80140a2 <__cvt+0xba>
 801409a:	f1c4 0401 	rsb	r4, r4, #1
 801409e:	f8ca 4000 	str.w	r4, [sl]
 80140a2:	f8da 3000 	ldr.w	r3, [sl]
 80140a6:	4499      	add	r9, r3
 80140a8:	e7d3      	b.n	8014052 <__cvt+0x6a>
 80140aa:	1c59      	adds	r1, r3, #1
 80140ac:	9103      	str	r1, [sp, #12]
 80140ae:	701a      	strb	r2, [r3, #0]
 80140b0:	e7d9      	b.n	8014066 <__cvt+0x7e>

080140b2 <__exponent>:
 80140b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140b4:	2900      	cmp	r1, #0
 80140b6:	bfba      	itte	lt
 80140b8:	4249      	neglt	r1, r1
 80140ba:	232d      	movlt	r3, #45	@ 0x2d
 80140bc:	232b      	movge	r3, #43	@ 0x2b
 80140be:	2909      	cmp	r1, #9
 80140c0:	7002      	strb	r2, [r0, #0]
 80140c2:	7043      	strb	r3, [r0, #1]
 80140c4:	dd29      	ble.n	801411a <__exponent+0x68>
 80140c6:	f10d 0307 	add.w	r3, sp, #7
 80140ca:	461d      	mov	r5, r3
 80140cc:	270a      	movs	r7, #10
 80140ce:	461a      	mov	r2, r3
 80140d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80140d4:	fb07 1416 	mls	r4, r7, r6, r1
 80140d8:	3430      	adds	r4, #48	@ 0x30
 80140da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80140de:	460c      	mov	r4, r1
 80140e0:	2c63      	cmp	r4, #99	@ 0x63
 80140e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80140e6:	4631      	mov	r1, r6
 80140e8:	dcf1      	bgt.n	80140ce <__exponent+0x1c>
 80140ea:	3130      	adds	r1, #48	@ 0x30
 80140ec:	1e94      	subs	r4, r2, #2
 80140ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80140f2:	1c41      	adds	r1, r0, #1
 80140f4:	4623      	mov	r3, r4
 80140f6:	42ab      	cmp	r3, r5
 80140f8:	d30a      	bcc.n	8014110 <__exponent+0x5e>
 80140fa:	f10d 0309 	add.w	r3, sp, #9
 80140fe:	1a9b      	subs	r3, r3, r2
 8014100:	42ac      	cmp	r4, r5
 8014102:	bf88      	it	hi
 8014104:	2300      	movhi	r3, #0
 8014106:	3302      	adds	r3, #2
 8014108:	4403      	add	r3, r0
 801410a:	1a18      	subs	r0, r3, r0
 801410c:	b003      	add	sp, #12
 801410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014110:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014114:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014118:	e7ed      	b.n	80140f6 <__exponent+0x44>
 801411a:	2330      	movs	r3, #48	@ 0x30
 801411c:	3130      	adds	r1, #48	@ 0x30
 801411e:	7083      	strb	r3, [r0, #2]
 8014120:	70c1      	strb	r1, [r0, #3]
 8014122:	1d03      	adds	r3, r0, #4
 8014124:	e7f1      	b.n	801410a <__exponent+0x58>
	...

08014128 <_printf_float>:
 8014128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	b08d      	sub	sp, #52	@ 0x34
 801412e:	460c      	mov	r4, r1
 8014130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014134:	4616      	mov	r6, r2
 8014136:	461f      	mov	r7, r3
 8014138:	4605      	mov	r5, r0
 801413a:	f001 f811 	bl	8015160 <_localeconv_r>
 801413e:	6803      	ldr	r3, [r0, #0]
 8014140:	9304      	str	r3, [sp, #16]
 8014142:	4618      	mov	r0, r3
 8014144:	f7ec f8bc 	bl	80002c0 <strlen>
 8014148:	2300      	movs	r3, #0
 801414a:	930a      	str	r3, [sp, #40]	@ 0x28
 801414c:	f8d8 3000 	ldr.w	r3, [r8]
 8014150:	9005      	str	r0, [sp, #20]
 8014152:	3307      	adds	r3, #7
 8014154:	f023 0307 	bic.w	r3, r3, #7
 8014158:	f103 0208 	add.w	r2, r3, #8
 801415c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014160:	f8d4 b000 	ldr.w	fp, [r4]
 8014164:	f8c8 2000 	str.w	r2, [r8]
 8014168:	e9d3 8900 	ldrd	r8, r9, [r3]
 801416c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014170:	9307      	str	r3, [sp, #28]
 8014172:	f8cd 8018 	str.w	r8, [sp, #24]
 8014176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801417a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801417e:	4b9c      	ldr	r3, [pc, #624]	@ (80143f0 <_printf_float+0x2c8>)
 8014180:	f04f 32ff 	mov.w	r2, #4294967295
 8014184:	f7ec fcfa 	bl	8000b7c <__aeabi_dcmpun>
 8014188:	bb70      	cbnz	r0, 80141e8 <_printf_float+0xc0>
 801418a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801418e:	4b98      	ldr	r3, [pc, #608]	@ (80143f0 <_printf_float+0x2c8>)
 8014190:	f04f 32ff 	mov.w	r2, #4294967295
 8014194:	f7ec fcd4 	bl	8000b40 <__aeabi_dcmple>
 8014198:	bb30      	cbnz	r0, 80141e8 <_printf_float+0xc0>
 801419a:	2200      	movs	r2, #0
 801419c:	2300      	movs	r3, #0
 801419e:	4640      	mov	r0, r8
 80141a0:	4649      	mov	r1, r9
 80141a2:	f7ec fcc3 	bl	8000b2c <__aeabi_dcmplt>
 80141a6:	b110      	cbz	r0, 80141ae <_printf_float+0x86>
 80141a8:	232d      	movs	r3, #45	@ 0x2d
 80141aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141ae:	4a91      	ldr	r2, [pc, #580]	@ (80143f4 <_printf_float+0x2cc>)
 80141b0:	4b91      	ldr	r3, [pc, #580]	@ (80143f8 <_printf_float+0x2d0>)
 80141b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80141b6:	bf8c      	ite	hi
 80141b8:	4690      	movhi	r8, r2
 80141ba:	4698      	movls	r8, r3
 80141bc:	2303      	movs	r3, #3
 80141be:	6123      	str	r3, [r4, #16]
 80141c0:	f02b 0304 	bic.w	r3, fp, #4
 80141c4:	6023      	str	r3, [r4, #0]
 80141c6:	f04f 0900 	mov.w	r9, #0
 80141ca:	9700      	str	r7, [sp, #0]
 80141cc:	4633      	mov	r3, r6
 80141ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80141d0:	4621      	mov	r1, r4
 80141d2:	4628      	mov	r0, r5
 80141d4:	f000 f9d2 	bl	801457c <_printf_common>
 80141d8:	3001      	adds	r0, #1
 80141da:	f040 808d 	bne.w	80142f8 <_printf_float+0x1d0>
 80141de:	f04f 30ff 	mov.w	r0, #4294967295
 80141e2:	b00d      	add	sp, #52	@ 0x34
 80141e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e8:	4642      	mov	r2, r8
 80141ea:	464b      	mov	r3, r9
 80141ec:	4640      	mov	r0, r8
 80141ee:	4649      	mov	r1, r9
 80141f0:	f7ec fcc4 	bl	8000b7c <__aeabi_dcmpun>
 80141f4:	b140      	cbz	r0, 8014208 <_printf_float+0xe0>
 80141f6:	464b      	mov	r3, r9
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	bfbc      	itt	lt
 80141fc:	232d      	movlt	r3, #45	@ 0x2d
 80141fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014202:	4a7e      	ldr	r2, [pc, #504]	@ (80143fc <_printf_float+0x2d4>)
 8014204:	4b7e      	ldr	r3, [pc, #504]	@ (8014400 <_printf_float+0x2d8>)
 8014206:	e7d4      	b.n	80141b2 <_printf_float+0x8a>
 8014208:	6863      	ldr	r3, [r4, #4]
 801420a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801420e:	9206      	str	r2, [sp, #24]
 8014210:	1c5a      	adds	r2, r3, #1
 8014212:	d13b      	bne.n	801428c <_printf_float+0x164>
 8014214:	2306      	movs	r3, #6
 8014216:	6063      	str	r3, [r4, #4]
 8014218:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801421c:	2300      	movs	r3, #0
 801421e:	6022      	str	r2, [r4, #0]
 8014220:	9303      	str	r3, [sp, #12]
 8014222:	ab0a      	add	r3, sp, #40	@ 0x28
 8014224:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014228:	ab09      	add	r3, sp, #36	@ 0x24
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	6861      	ldr	r1, [r4, #4]
 801422e:	ec49 8b10 	vmov	d0, r8, r9
 8014232:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014236:	4628      	mov	r0, r5
 8014238:	f7ff fed6 	bl	8013fe8 <__cvt>
 801423c:	9b06      	ldr	r3, [sp, #24]
 801423e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014240:	2b47      	cmp	r3, #71	@ 0x47
 8014242:	4680      	mov	r8, r0
 8014244:	d129      	bne.n	801429a <_printf_float+0x172>
 8014246:	1cc8      	adds	r0, r1, #3
 8014248:	db02      	blt.n	8014250 <_printf_float+0x128>
 801424a:	6863      	ldr	r3, [r4, #4]
 801424c:	4299      	cmp	r1, r3
 801424e:	dd41      	ble.n	80142d4 <_printf_float+0x1ac>
 8014250:	f1aa 0a02 	sub.w	sl, sl, #2
 8014254:	fa5f fa8a 	uxtb.w	sl, sl
 8014258:	3901      	subs	r1, #1
 801425a:	4652      	mov	r2, sl
 801425c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014260:	9109      	str	r1, [sp, #36]	@ 0x24
 8014262:	f7ff ff26 	bl	80140b2 <__exponent>
 8014266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014268:	1813      	adds	r3, r2, r0
 801426a:	2a01      	cmp	r2, #1
 801426c:	4681      	mov	r9, r0
 801426e:	6123      	str	r3, [r4, #16]
 8014270:	dc02      	bgt.n	8014278 <_printf_float+0x150>
 8014272:	6822      	ldr	r2, [r4, #0]
 8014274:	07d2      	lsls	r2, r2, #31
 8014276:	d501      	bpl.n	801427c <_printf_float+0x154>
 8014278:	3301      	adds	r3, #1
 801427a:	6123      	str	r3, [r4, #16]
 801427c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014280:	2b00      	cmp	r3, #0
 8014282:	d0a2      	beq.n	80141ca <_printf_float+0xa2>
 8014284:	232d      	movs	r3, #45	@ 0x2d
 8014286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801428a:	e79e      	b.n	80141ca <_printf_float+0xa2>
 801428c:	9a06      	ldr	r2, [sp, #24]
 801428e:	2a47      	cmp	r2, #71	@ 0x47
 8014290:	d1c2      	bne.n	8014218 <_printf_float+0xf0>
 8014292:	2b00      	cmp	r3, #0
 8014294:	d1c0      	bne.n	8014218 <_printf_float+0xf0>
 8014296:	2301      	movs	r3, #1
 8014298:	e7bd      	b.n	8014216 <_printf_float+0xee>
 801429a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801429e:	d9db      	bls.n	8014258 <_printf_float+0x130>
 80142a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80142a4:	d118      	bne.n	80142d8 <_printf_float+0x1b0>
 80142a6:	2900      	cmp	r1, #0
 80142a8:	6863      	ldr	r3, [r4, #4]
 80142aa:	dd0b      	ble.n	80142c4 <_printf_float+0x19c>
 80142ac:	6121      	str	r1, [r4, #16]
 80142ae:	b913      	cbnz	r3, 80142b6 <_printf_float+0x18e>
 80142b0:	6822      	ldr	r2, [r4, #0]
 80142b2:	07d0      	lsls	r0, r2, #31
 80142b4:	d502      	bpl.n	80142bc <_printf_float+0x194>
 80142b6:	3301      	adds	r3, #1
 80142b8:	440b      	add	r3, r1
 80142ba:	6123      	str	r3, [r4, #16]
 80142bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80142be:	f04f 0900 	mov.w	r9, #0
 80142c2:	e7db      	b.n	801427c <_printf_float+0x154>
 80142c4:	b913      	cbnz	r3, 80142cc <_printf_float+0x1a4>
 80142c6:	6822      	ldr	r2, [r4, #0]
 80142c8:	07d2      	lsls	r2, r2, #31
 80142ca:	d501      	bpl.n	80142d0 <_printf_float+0x1a8>
 80142cc:	3302      	adds	r3, #2
 80142ce:	e7f4      	b.n	80142ba <_printf_float+0x192>
 80142d0:	2301      	movs	r3, #1
 80142d2:	e7f2      	b.n	80142ba <_printf_float+0x192>
 80142d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80142d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80142da:	4299      	cmp	r1, r3
 80142dc:	db05      	blt.n	80142ea <_printf_float+0x1c2>
 80142de:	6823      	ldr	r3, [r4, #0]
 80142e0:	6121      	str	r1, [r4, #16]
 80142e2:	07d8      	lsls	r0, r3, #31
 80142e4:	d5ea      	bpl.n	80142bc <_printf_float+0x194>
 80142e6:	1c4b      	adds	r3, r1, #1
 80142e8:	e7e7      	b.n	80142ba <_printf_float+0x192>
 80142ea:	2900      	cmp	r1, #0
 80142ec:	bfd4      	ite	le
 80142ee:	f1c1 0202 	rsble	r2, r1, #2
 80142f2:	2201      	movgt	r2, #1
 80142f4:	4413      	add	r3, r2
 80142f6:	e7e0      	b.n	80142ba <_printf_float+0x192>
 80142f8:	6823      	ldr	r3, [r4, #0]
 80142fa:	055a      	lsls	r2, r3, #21
 80142fc:	d407      	bmi.n	801430e <_printf_float+0x1e6>
 80142fe:	6923      	ldr	r3, [r4, #16]
 8014300:	4642      	mov	r2, r8
 8014302:	4631      	mov	r1, r6
 8014304:	4628      	mov	r0, r5
 8014306:	47b8      	blx	r7
 8014308:	3001      	adds	r0, #1
 801430a:	d12b      	bne.n	8014364 <_printf_float+0x23c>
 801430c:	e767      	b.n	80141de <_printf_float+0xb6>
 801430e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014312:	f240 80dd 	bls.w	80144d0 <_printf_float+0x3a8>
 8014316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801431a:	2200      	movs	r2, #0
 801431c:	2300      	movs	r3, #0
 801431e:	f7ec fbfb 	bl	8000b18 <__aeabi_dcmpeq>
 8014322:	2800      	cmp	r0, #0
 8014324:	d033      	beq.n	801438e <_printf_float+0x266>
 8014326:	4a37      	ldr	r2, [pc, #220]	@ (8014404 <_printf_float+0x2dc>)
 8014328:	2301      	movs	r3, #1
 801432a:	4631      	mov	r1, r6
 801432c:	4628      	mov	r0, r5
 801432e:	47b8      	blx	r7
 8014330:	3001      	adds	r0, #1
 8014332:	f43f af54 	beq.w	80141de <_printf_float+0xb6>
 8014336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801433a:	4543      	cmp	r3, r8
 801433c:	db02      	blt.n	8014344 <_printf_float+0x21c>
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	07d8      	lsls	r0, r3, #31
 8014342:	d50f      	bpl.n	8014364 <_printf_float+0x23c>
 8014344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014348:	4631      	mov	r1, r6
 801434a:	4628      	mov	r0, r5
 801434c:	47b8      	blx	r7
 801434e:	3001      	adds	r0, #1
 8014350:	f43f af45 	beq.w	80141de <_printf_float+0xb6>
 8014354:	f04f 0900 	mov.w	r9, #0
 8014358:	f108 38ff 	add.w	r8, r8, #4294967295
 801435c:	f104 0a1a 	add.w	sl, r4, #26
 8014360:	45c8      	cmp	r8, r9
 8014362:	dc09      	bgt.n	8014378 <_printf_float+0x250>
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	079b      	lsls	r3, r3, #30
 8014368:	f100 8103 	bmi.w	8014572 <_printf_float+0x44a>
 801436c:	68e0      	ldr	r0, [r4, #12]
 801436e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014370:	4298      	cmp	r0, r3
 8014372:	bfb8      	it	lt
 8014374:	4618      	movlt	r0, r3
 8014376:	e734      	b.n	80141e2 <_printf_float+0xba>
 8014378:	2301      	movs	r3, #1
 801437a:	4652      	mov	r2, sl
 801437c:	4631      	mov	r1, r6
 801437e:	4628      	mov	r0, r5
 8014380:	47b8      	blx	r7
 8014382:	3001      	adds	r0, #1
 8014384:	f43f af2b 	beq.w	80141de <_printf_float+0xb6>
 8014388:	f109 0901 	add.w	r9, r9, #1
 801438c:	e7e8      	b.n	8014360 <_printf_float+0x238>
 801438e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014390:	2b00      	cmp	r3, #0
 8014392:	dc39      	bgt.n	8014408 <_printf_float+0x2e0>
 8014394:	4a1b      	ldr	r2, [pc, #108]	@ (8014404 <_printf_float+0x2dc>)
 8014396:	2301      	movs	r3, #1
 8014398:	4631      	mov	r1, r6
 801439a:	4628      	mov	r0, r5
 801439c:	47b8      	blx	r7
 801439e:	3001      	adds	r0, #1
 80143a0:	f43f af1d 	beq.w	80141de <_printf_float+0xb6>
 80143a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80143a8:	ea59 0303 	orrs.w	r3, r9, r3
 80143ac:	d102      	bne.n	80143b4 <_printf_float+0x28c>
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	07d9      	lsls	r1, r3, #31
 80143b2:	d5d7      	bpl.n	8014364 <_printf_float+0x23c>
 80143b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143b8:	4631      	mov	r1, r6
 80143ba:	4628      	mov	r0, r5
 80143bc:	47b8      	blx	r7
 80143be:	3001      	adds	r0, #1
 80143c0:	f43f af0d 	beq.w	80141de <_printf_float+0xb6>
 80143c4:	f04f 0a00 	mov.w	sl, #0
 80143c8:	f104 0b1a 	add.w	fp, r4, #26
 80143cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ce:	425b      	negs	r3, r3
 80143d0:	4553      	cmp	r3, sl
 80143d2:	dc01      	bgt.n	80143d8 <_printf_float+0x2b0>
 80143d4:	464b      	mov	r3, r9
 80143d6:	e793      	b.n	8014300 <_printf_float+0x1d8>
 80143d8:	2301      	movs	r3, #1
 80143da:	465a      	mov	r2, fp
 80143dc:	4631      	mov	r1, r6
 80143de:	4628      	mov	r0, r5
 80143e0:	47b8      	blx	r7
 80143e2:	3001      	adds	r0, #1
 80143e4:	f43f aefb 	beq.w	80141de <_printf_float+0xb6>
 80143e8:	f10a 0a01 	add.w	sl, sl, #1
 80143ec:	e7ee      	b.n	80143cc <_printf_float+0x2a4>
 80143ee:	bf00      	nop
 80143f0:	7fefffff 	.word	0x7fefffff
 80143f4:	0801b3e4 	.word	0x0801b3e4
 80143f8:	0801b3e0 	.word	0x0801b3e0
 80143fc:	0801b3ec 	.word	0x0801b3ec
 8014400:	0801b3e8 	.word	0x0801b3e8
 8014404:	0801b3f0 	.word	0x0801b3f0
 8014408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801440a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801440e:	4553      	cmp	r3, sl
 8014410:	bfa8      	it	ge
 8014412:	4653      	movge	r3, sl
 8014414:	2b00      	cmp	r3, #0
 8014416:	4699      	mov	r9, r3
 8014418:	dc36      	bgt.n	8014488 <_printf_float+0x360>
 801441a:	f04f 0b00 	mov.w	fp, #0
 801441e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014422:	f104 021a 	add.w	r2, r4, #26
 8014426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014428:	9306      	str	r3, [sp, #24]
 801442a:	eba3 0309 	sub.w	r3, r3, r9
 801442e:	455b      	cmp	r3, fp
 8014430:	dc31      	bgt.n	8014496 <_printf_float+0x36e>
 8014432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014434:	459a      	cmp	sl, r3
 8014436:	dc3a      	bgt.n	80144ae <_printf_float+0x386>
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	07da      	lsls	r2, r3, #31
 801443c:	d437      	bmi.n	80144ae <_printf_float+0x386>
 801443e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014440:	ebaa 0903 	sub.w	r9, sl, r3
 8014444:	9b06      	ldr	r3, [sp, #24]
 8014446:	ebaa 0303 	sub.w	r3, sl, r3
 801444a:	4599      	cmp	r9, r3
 801444c:	bfa8      	it	ge
 801444e:	4699      	movge	r9, r3
 8014450:	f1b9 0f00 	cmp.w	r9, #0
 8014454:	dc33      	bgt.n	80144be <_printf_float+0x396>
 8014456:	f04f 0800 	mov.w	r8, #0
 801445a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801445e:	f104 0b1a 	add.w	fp, r4, #26
 8014462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014464:	ebaa 0303 	sub.w	r3, sl, r3
 8014468:	eba3 0309 	sub.w	r3, r3, r9
 801446c:	4543      	cmp	r3, r8
 801446e:	f77f af79 	ble.w	8014364 <_printf_float+0x23c>
 8014472:	2301      	movs	r3, #1
 8014474:	465a      	mov	r2, fp
 8014476:	4631      	mov	r1, r6
 8014478:	4628      	mov	r0, r5
 801447a:	47b8      	blx	r7
 801447c:	3001      	adds	r0, #1
 801447e:	f43f aeae 	beq.w	80141de <_printf_float+0xb6>
 8014482:	f108 0801 	add.w	r8, r8, #1
 8014486:	e7ec      	b.n	8014462 <_printf_float+0x33a>
 8014488:	4642      	mov	r2, r8
 801448a:	4631      	mov	r1, r6
 801448c:	4628      	mov	r0, r5
 801448e:	47b8      	blx	r7
 8014490:	3001      	adds	r0, #1
 8014492:	d1c2      	bne.n	801441a <_printf_float+0x2f2>
 8014494:	e6a3      	b.n	80141de <_printf_float+0xb6>
 8014496:	2301      	movs	r3, #1
 8014498:	4631      	mov	r1, r6
 801449a:	4628      	mov	r0, r5
 801449c:	9206      	str	r2, [sp, #24]
 801449e:	47b8      	blx	r7
 80144a0:	3001      	adds	r0, #1
 80144a2:	f43f ae9c 	beq.w	80141de <_printf_float+0xb6>
 80144a6:	9a06      	ldr	r2, [sp, #24]
 80144a8:	f10b 0b01 	add.w	fp, fp, #1
 80144ac:	e7bb      	b.n	8014426 <_printf_float+0x2fe>
 80144ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144b2:	4631      	mov	r1, r6
 80144b4:	4628      	mov	r0, r5
 80144b6:	47b8      	blx	r7
 80144b8:	3001      	adds	r0, #1
 80144ba:	d1c0      	bne.n	801443e <_printf_float+0x316>
 80144bc:	e68f      	b.n	80141de <_printf_float+0xb6>
 80144be:	9a06      	ldr	r2, [sp, #24]
 80144c0:	464b      	mov	r3, r9
 80144c2:	4442      	add	r2, r8
 80144c4:	4631      	mov	r1, r6
 80144c6:	4628      	mov	r0, r5
 80144c8:	47b8      	blx	r7
 80144ca:	3001      	adds	r0, #1
 80144cc:	d1c3      	bne.n	8014456 <_printf_float+0x32e>
 80144ce:	e686      	b.n	80141de <_printf_float+0xb6>
 80144d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80144d4:	f1ba 0f01 	cmp.w	sl, #1
 80144d8:	dc01      	bgt.n	80144de <_printf_float+0x3b6>
 80144da:	07db      	lsls	r3, r3, #31
 80144dc:	d536      	bpl.n	801454c <_printf_float+0x424>
 80144de:	2301      	movs	r3, #1
 80144e0:	4642      	mov	r2, r8
 80144e2:	4631      	mov	r1, r6
 80144e4:	4628      	mov	r0, r5
 80144e6:	47b8      	blx	r7
 80144e8:	3001      	adds	r0, #1
 80144ea:	f43f ae78 	beq.w	80141de <_printf_float+0xb6>
 80144ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144f2:	4631      	mov	r1, r6
 80144f4:	4628      	mov	r0, r5
 80144f6:	47b8      	blx	r7
 80144f8:	3001      	adds	r0, #1
 80144fa:	f43f ae70 	beq.w	80141de <_printf_float+0xb6>
 80144fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014502:	2200      	movs	r2, #0
 8014504:	2300      	movs	r3, #0
 8014506:	f10a 3aff 	add.w	sl, sl, #4294967295
 801450a:	f7ec fb05 	bl	8000b18 <__aeabi_dcmpeq>
 801450e:	b9c0      	cbnz	r0, 8014542 <_printf_float+0x41a>
 8014510:	4653      	mov	r3, sl
 8014512:	f108 0201 	add.w	r2, r8, #1
 8014516:	4631      	mov	r1, r6
 8014518:	4628      	mov	r0, r5
 801451a:	47b8      	blx	r7
 801451c:	3001      	adds	r0, #1
 801451e:	d10c      	bne.n	801453a <_printf_float+0x412>
 8014520:	e65d      	b.n	80141de <_printf_float+0xb6>
 8014522:	2301      	movs	r3, #1
 8014524:	465a      	mov	r2, fp
 8014526:	4631      	mov	r1, r6
 8014528:	4628      	mov	r0, r5
 801452a:	47b8      	blx	r7
 801452c:	3001      	adds	r0, #1
 801452e:	f43f ae56 	beq.w	80141de <_printf_float+0xb6>
 8014532:	f108 0801 	add.w	r8, r8, #1
 8014536:	45d0      	cmp	r8, sl
 8014538:	dbf3      	blt.n	8014522 <_printf_float+0x3fa>
 801453a:	464b      	mov	r3, r9
 801453c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014540:	e6df      	b.n	8014302 <_printf_float+0x1da>
 8014542:	f04f 0800 	mov.w	r8, #0
 8014546:	f104 0b1a 	add.w	fp, r4, #26
 801454a:	e7f4      	b.n	8014536 <_printf_float+0x40e>
 801454c:	2301      	movs	r3, #1
 801454e:	4642      	mov	r2, r8
 8014550:	e7e1      	b.n	8014516 <_printf_float+0x3ee>
 8014552:	2301      	movs	r3, #1
 8014554:	464a      	mov	r2, r9
 8014556:	4631      	mov	r1, r6
 8014558:	4628      	mov	r0, r5
 801455a:	47b8      	blx	r7
 801455c:	3001      	adds	r0, #1
 801455e:	f43f ae3e 	beq.w	80141de <_printf_float+0xb6>
 8014562:	f108 0801 	add.w	r8, r8, #1
 8014566:	68e3      	ldr	r3, [r4, #12]
 8014568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801456a:	1a5b      	subs	r3, r3, r1
 801456c:	4543      	cmp	r3, r8
 801456e:	dcf0      	bgt.n	8014552 <_printf_float+0x42a>
 8014570:	e6fc      	b.n	801436c <_printf_float+0x244>
 8014572:	f04f 0800 	mov.w	r8, #0
 8014576:	f104 0919 	add.w	r9, r4, #25
 801457a:	e7f4      	b.n	8014566 <_printf_float+0x43e>

0801457c <_printf_common>:
 801457c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014580:	4616      	mov	r6, r2
 8014582:	4698      	mov	r8, r3
 8014584:	688a      	ldr	r2, [r1, #8]
 8014586:	690b      	ldr	r3, [r1, #16]
 8014588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801458c:	4293      	cmp	r3, r2
 801458e:	bfb8      	it	lt
 8014590:	4613      	movlt	r3, r2
 8014592:	6033      	str	r3, [r6, #0]
 8014594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014598:	4607      	mov	r7, r0
 801459a:	460c      	mov	r4, r1
 801459c:	b10a      	cbz	r2, 80145a2 <_printf_common+0x26>
 801459e:	3301      	adds	r3, #1
 80145a0:	6033      	str	r3, [r6, #0]
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	0699      	lsls	r1, r3, #26
 80145a6:	bf42      	ittt	mi
 80145a8:	6833      	ldrmi	r3, [r6, #0]
 80145aa:	3302      	addmi	r3, #2
 80145ac:	6033      	strmi	r3, [r6, #0]
 80145ae:	6825      	ldr	r5, [r4, #0]
 80145b0:	f015 0506 	ands.w	r5, r5, #6
 80145b4:	d106      	bne.n	80145c4 <_printf_common+0x48>
 80145b6:	f104 0a19 	add.w	sl, r4, #25
 80145ba:	68e3      	ldr	r3, [r4, #12]
 80145bc:	6832      	ldr	r2, [r6, #0]
 80145be:	1a9b      	subs	r3, r3, r2
 80145c0:	42ab      	cmp	r3, r5
 80145c2:	dc26      	bgt.n	8014612 <_printf_common+0x96>
 80145c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80145c8:	6822      	ldr	r2, [r4, #0]
 80145ca:	3b00      	subs	r3, #0
 80145cc:	bf18      	it	ne
 80145ce:	2301      	movne	r3, #1
 80145d0:	0692      	lsls	r2, r2, #26
 80145d2:	d42b      	bmi.n	801462c <_printf_common+0xb0>
 80145d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80145d8:	4641      	mov	r1, r8
 80145da:	4638      	mov	r0, r7
 80145dc:	47c8      	blx	r9
 80145de:	3001      	adds	r0, #1
 80145e0:	d01e      	beq.n	8014620 <_printf_common+0xa4>
 80145e2:	6823      	ldr	r3, [r4, #0]
 80145e4:	6922      	ldr	r2, [r4, #16]
 80145e6:	f003 0306 	and.w	r3, r3, #6
 80145ea:	2b04      	cmp	r3, #4
 80145ec:	bf02      	ittt	eq
 80145ee:	68e5      	ldreq	r5, [r4, #12]
 80145f0:	6833      	ldreq	r3, [r6, #0]
 80145f2:	1aed      	subeq	r5, r5, r3
 80145f4:	68a3      	ldr	r3, [r4, #8]
 80145f6:	bf0c      	ite	eq
 80145f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145fc:	2500      	movne	r5, #0
 80145fe:	4293      	cmp	r3, r2
 8014600:	bfc4      	itt	gt
 8014602:	1a9b      	subgt	r3, r3, r2
 8014604:	18ed      	addgt	r5, r5, r3
 8014606:	2600      	movs	r6, #0
 8014608:	341a      	adds	r4, #26
 801460a:	42b5      	cmp	r5, r6
 801460c:	d11a      	bne.n	8014644 <_printf_common+0xc8>
 801460e:	2000      	movs	r0, #0
 8014610:	e008      	b.n	8014624 <_printf_common+0xa8>
 8014612:	2301      	movs	r3, #1
 8014614:	4652      	mov	r2, sl
 8014616:	4641      	mov	r1, r8
 8014618:	4638      	mov	r0, r7
 801461a:	47c8      	blx	r9
 801461c:	3001      	adds	r0, #1
 801461e:	d103      	bne.n	8014628 <_printf_common+0xac>
 8014620:	f04f 30ff 	mov.w	r0, #4294967295
 8014624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014628:	3501      	adds	r5, #1
 801462a:	e7c6      	b.n	80145ba <_printf_common+0x3e>
 801462c:	18e1      	adds	r1, r4, r3
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	2030      	movs	r0, #48	@ 0x30
 8014632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014636:	4422      	add	r2, r4
 8014638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801463c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014640:	3302      	adds	r3, #2
 8014642:	e7c7      	b.n	80145d4 <_printf_common+0x58>
 8014644:	2301      	movs	r3, #1
 8014646:	4622      	mov	r2, r4
 8014648:	4641      	mov	r1, r8
 801464a:	4638      	mov	r0, r7
 801464c:	47c8      	blx	r9
 801464e:	3001      	adds	r0, #1
 8014650:	d0e6      	beq.n	8014620 <_printf_common+0xa4>
 8014652:	3601      	adds	r6, #1
 8014654:	e7d9      	b.n	801460a <_printf_common+0x8e>
	...

08014658 <_printf_i>:
 8014658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801465c:	7e0f      	ldrb	r7, [r1, #24]
 801465e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014660:	2f78      	cmp	r7, #120	@ 0x78
 8014662:	4691      	mov	r9, r2
 8014664:	4680      	mov	r8, r0
 8014666:	460c      	mov	r4, r1
 8014668:	469a      	mov	sl, r3
 801466a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801466e:	d807      	bhi.n	8014680 <_printf_i+0x28>
 8014670:	2f62      	cmp	r7, #98	@ 0x62
 8014672:	d80a      	bhi.n	801468a <_printf_i+0x32>
 8014674:	2f00      	cmp	r7, #0
 8014676:	f000 80d1 	beq.w	801481c <_printf_i+0x1c4>
 801467a:	2f58      	cmp	r7, #88	@ 0x58
 801467c:	f000 80b8 	beq.w	80147f0 <_printf_i+0x198>
 8014680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014688:	e03a      	b.n	8014700 <_printf_i+0xa8>
 801468a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801468e:	2b15      	cmp	r3, #21
 8014690:	d8f6      	bhi.n	8014680 <_printf_i+0x28>
 8014692:	a101      	add	r1, pc, #4	@ (adr r1, 8014698 <_printf_i+0x40>)
 8014694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014698:	080146f1 	.word	0x080146f1
 801469c:	08014705 	.word	0x08014705
 80146a0:	08014681 	.word	0x08014681
 80146a4:	08014681 	.word	0x08014681
 80146a8:	08014681 	.word	0x08014681
 80146ac:	08014681 	.word	0x08014681
 80146b0:	08014705 	.word	0x08014705
 80146b4:	08014681 	.word	0x08014681
 80146b8:	08014681 	.word	0x08014681
 80146bc:	08014681 	.word	0x08014681
 80146c0:	08014681 	.word	0x08014681
 80146c4:	08014803 	.word	0x08014803
 80146c8:	0801472f 	.word	0x0801472f
 80146cc:	080147bd 	.word	0x080147bd
 80146d0:	08014681 	.word	0x08014681
 80146d4:	08014681 	.word	0x08014681
 80146d8:	08014825 	.word	0x08014825
 80146dc:	08014681 	.word	0x08014681
 80146e0:	0801472f 	.word	0x0801472f
 80146e4:	08014681 	.word	0x08014681
 80146e8:	08014681 	.word	0x08014681
 80146ec:	080147c5 	.word	0x080147c5
 80146f0:	6833      	ldr	r3, [r6, #0]
 80146f2:	1d1a      	adds	r2, r3, #4
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	6032      	str	r2, [r6, #0]
 80146f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80146fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014700:	2301      	movs	r3, #1
 8014702:	e09c      	b.n	801483e <_printf_i+0x1e6>
 8014704:	6833      	ldr	r3, [r6, #0]
 8014706:	6820      	ldr	r0, [r4, #0]
 8014708:	1d19      	adds	r1, r3, #4
 801470a:	6031      	str	r1, [r6, #0]
 801470c:	0606      	lsls	r6, r0, #24
 801470e:	d501      	bpl.n	8014714 <_printf_i+0xbc>
 8014710:	681d      	ldr	r5, [r3, #0]
 8014712:	e003      	b.n	801471c <_printf_i+0xc4>
 8014714:	0645      	lsls	r5, r0, #25
 8014716:	d5fb      	bpl.n	8014710 <_printf_i+0xb8>
 8014718:	f9b3 5000 	ldrsh.w	r5, [r3]
 801471c:	2d00      	cmp	r5, #0
 801471e:	da03      	bge.n	8014728 <_printf_i+0xd0>
 8014720:	232d      	movs	r3, #45	@ 0x2d
 8014722:	426d      	negs	r5, r5
 8014724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014728:	4858      	ldr	r0, [pc, #352]	@ (801488c <_printf_i+0x234>)
 801472a:	230a      	movs	r3, #10
 801472c:	e011      	b.n	8014752 <_printf_i+0xfa>
 801472e:	6821      	ldr	r1, [r4, #0]
 8014730:	6833      	ldr	r3, [r6, #0]
 8014732:	0608      	lsls	r0, r1, #24
 8014734:	f853 5b04 	ldr.w	r5, [r3], #4
 8014738:	d402      	bmi.n	8014740 <_printf_i+0xe8>
 801473a:	0649      	lsls	r1, r1, #25
 801473c:	bf48      	it	mi
 801473e:	b2ad      	uxthmi	r5, r5
 8014740:	2f6f      	cmp	r7, #111	@ 0x6f
 8014742:	4852      	ldr	r0, [pc, #328]	@ (801488c <_printf_i+0x234>)
 8014744:	6033      	str	r3, [r6, #0]
 8014746:	bf14      	ite	ne
 8014748:	230a      	movne	r3, #10
 801474a:	2308      	moveq	r3, #8
 801474c:	2100      	movs	r1, #0
 801474e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014752:	6866      	ldr	r6, [r4, #4]
 8014754:	60a6      	str	r6, [r4, #8]
 8014756:	2e00      	cmp	r6, #0
 8014758:	db05      	blt.n	8014766 <_printf_i+0x10e>
 801475a:	6821      	ldr	r1, [r4, #0]
 801475c:	432e      	orrs	r6, r5
 801475e:	f021 0104 	bic.w	r1, r1, #4
 8014762:	6021      	str	r1, [r4, #0]
 8014764:	d04b      	beq.n	80147fe <_printf_i+0x1a6>
 8014766:	4616      	mov	r6, r2
 8014768:	fbb5 f1f3 	udiv	r1, r5, r3
 801476c:	fb03 5711 	mls	r7, r3, r1, r5
 8014770:	5dc7      	ldrb	r7, [r0, r7]
 8014772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014776:	462f      	mov	r7, r5
 8014778:	42bb      	cmp	r3, r7
 801477a:	460d      	mov	r5, r1
 801477c:	d9f4      	bls.n	8014768 <_printf_i+0x110>
 801477e:	2b08      	cmp	r3, #8
 8014780:	d10b      	bne.n	801479a <_printf_i+0x142>
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	07df      	lsls	r7, r3, #31
 8014786:	d508      	bpl.n	801479a <_printf_i+0x142>
 8014788:	6923      	ldr	r3, [r4, #16]
 801478a:	6861      	ldr	r1, [r4, #4]
 801478c:	4299      	cmp	r1, r3
 801478e:	bfde      	ittt	le
 8014790:	2330      	movle	r3, #48	@ 0x30
 8014792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014796:	f106 36ff 	addle.w	r6, r6, #4294967295
 801479a:	1b92      	subs	r2, r2, r6
 801479c:	6122      	str	r2, [r4, #16]
 801479e:	f8cd a000 	str.w	sl, [sp]
 80147a2:	464b      	mov	r3, r9
 80147a4:	aa03      	add	r2, sp, #12
 80147a6:	4621      	mov	r1, r4
 80147a8:	4640      	mov	r0, r8
 80147aa:	f7ff fee7 	bl	801457c <_printf_common>
 80147ae:	3001      	adds	r0, #1
 80147b0:	d14a      	bne.n	8014848 <_printf_i+0x1f0>
 80147b2:	f04f 30ff 	mov.w	r0, #4294967295
 80147b6:	b004      	add	sp, #16
 80147b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	f043 0320 	orr.w	r3, r3, #32
 80147c2:	6023      	str	r3, [r4, #0]
 80147c4:	4832      	ldr	r0, [pc, #200]	@ (8014890 <_printf_i+0x238>)
 80147c6:	2778      	movs	r7, #120	@ 0x78
 80147c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80147cc:	6823      	ldr	r3, [r4, #0]
 80147ce:	6831      	ldr	r1, [r6, #0]
 80147d0:	061f      	lsls	r7, r3, #24
 80147d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80147d6:	d402      	bmi.n	80147de <_printf_i+0x186>
 80147d8:	065f      	lsls	r7, r3, #25
 80147da:	bf48      	it	mi
 80147dc:	b2ad      	uxthmi	r5, r5
 80147de:	6031      	str	r1, [r6, #0]
 80147e0:	07d9      	lsls	r1, r3, #31
 80147e2:	bf44      	itt	mi
 80147e4:	f043 0320 	orrmi.w	r3, r3, #32
 80147e8:	6023      	strmi	r3, [r4, #0]
 80147ea:	b11d      	cbz	r5, 80147f4 <_printf_i+0x19c>
 80147ec:	2310      	movs	r3, #16
 80147ee:	e7ad      	b.n	801474c <_printf_i+0xf4>
 80147f0:	4826      	ldr	r0, [pc, #152]	@ (801488c <_printf_i+0x234>)
 80147f2:	e7e9      	b.n	80147c8 <_printf_i+0x170>
 80147f4:	6823      	ldr	r3, [r4, #0]
 80147f6:	f023 0320 	bic.w	r3, r3, #32
 80147fa:	6023      	str	r3, [r4, #0]
 80147fc:	e7f6      	b.n	80147ec <_printf_i+0x194>
 80147fe:	4616      	mov	r6, r2
 8014800:	e7bd      	b.n	801477e <_printf_i+0x126>
 8014802:	6833      	ldr	r3, [r6, #0]
 8014804:	6825      	ldr	r5, [r4, #0]
 8014806:	6961      	ldr	r1, [r4, #20]
 8014808:	1d18      	adds	r0, r3, #4
 801480a:	6030      	str	r0, [r6, #0]
 801480c:	062e      	lsls	r6, r5, #24
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	d501      	bpl.n	8014816 <_printf_i+0x1be>
 8014812:	6019      	str	r1, [r3, #0]
 8014814:	e002      	b.n	801481c <_printf_i+0x1c4>
 8014816:	0668      	lsls	r0, r5, #25
 8014818:	d5fb      	bpl.n	8014812 <_printf_i+0x1ba>
 801481a:	8019      	strh	r1, [r3, #0]
 801481c:	2300      	movs	r3, #0
 801481e:	6123      	str	r3, [r4, #16]
 8014820:	4616      	mov	r6, r2
 8014822:	e7bc      	b.n	801479e <_printf_i+0x146>
 8014824:	6833      	ldr	r3, [r6, #0]
 8014826:	1d1a      	adds	r2, r3, #4
 8014828:	6032      	str	r2, [r6, #0]
 801482a:	681e      	ldr	r6, [r3, #0]
 801482c:	6862      	ldr	r2, [r4, #4]
 801482e:	2100      	movs	r1, #0
 8014830:	4630      	mov	r0, r6
 8014832:	f7eb fcf5 	bl	8000220 <memchr>
 8014836:	b108      	cbz	r0, 801483c <_printf_i+0x1e4>
 8014838:	1b80      	subs	r0, r0, r6
 801483a:	6060      	str	r0, [r4, #4]
 801483c:	6863      	ldr	r3, [r4, #4]
 801483e:	6123      	str	r3, [r4, #16]
 8014840:	2300      	movs	r3, #0
 8014842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014846:	e7aa      	b.n	801479e <_printf_i+0x146>
 8014848:	6923      	ldr	r3, [r4, #16]
 801484a:	4632      	mov	r2, r6
 801484c:	4649      	mov	r1, r9
 801484e:	4640      	mov	r0, r8
 8014850:	47d0      	blx	sl
 8014852:	3001      	adds	r0, #1
 8014854:	d0ad      	beq.n	80147b2 <_printf_i+0x15a>
 8014856:	6823      	ldr	r3, [r4, #0]
 8014858:	079b      	lsls	r3, r3, #30
 801485a:	d413      	bmi.n	8014884 <_printf_i+0x22c>
 801485c:	68e0      	ldr	r0, [r4, #12]
 801485e:	9b03      	ldr	r3, [sp, #12]
 8014860:	4298      	cmp	r0, r3
 8014862:	bfb8      	it	lt
 8014864:	4618      	movlt	r0, r3
 8014866:	e7a6      	b.n	80147b6 <_printf_i+0x15e>
 8014868:	2301      	movs	r3, #1
 801486a:	4632      	mov	r2, r6
 801486c:	4649      	mov	r1, r9
 801486e:	4640      	mov	r0, r8
 8014870:	47d0      	blx	sl
 8014872:	3001      	adds	r0, #1
 8014874:	d09d      	beq.n	80147b2 <_printf_i+0x15a>
 8014876:	3501      	adds	r5, #1
 8014878:	68e3      	ldr	r3, [r4, #12]
 801487a:	9903      	ldr	r1, [sp, #12]
 801487c:	1a5b      	subs	r3, r3, r1
 801487e:	42ab      	cmp	r3, r5
 8014880:	dcf2      	bgt.n	8014868 <_printf_i+0x210>
 8014882:	e7eb      	b.n	801485c <_printf_i+0x204>
 8014884:	2500      	movs	r5, #0
 8014886:	f104 0619 	add.w	r6, r4, #25
 801488a:	e7f5      	b.n	8014878 <_printf_i+0x220>
 801488c:	0801b3f2 	.word	0x0801b3f2
 8014890:	0801b403 	.word	0x0801b403

08014894 <_scanf_float>:
 8014894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014898:	b087      	sub	sp, #28
 801489a:	4691      	mov	r9, r2
 801489c:	9303      	str	r3, [sp, #12]
 801489e:	688b      	ldr	r3, [r1, #8]
 80148a0:	1e5a      	subs	r2, r3, #1
 80148a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80148a6:	bf81      	itttt	hi
 80148a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80148ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80148b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80148b4:	608b      	strhi	r3, [r1, #8]
 80148b6:	680b      	ldr	r3, [r1, #0]
 80148b8:	460a      	mov	r2, r1
 80148ba:	f04f 0500 	mov.w	r5, #0
 80148be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80148c2:	f842 3b1c 	str.w	r3, [r2], #28
 80148c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80148ca:	4680      	mov	r8, r0
 80148cc:	460c      	mov	r4, r1
 80148ce:	bf98      	it	ls
 80148d0:	f04f 0b00 	movls.w	fp, #0
 80148d4:	9201      	str	r2, [sp, #4]
 80148d6:	4616      	mov	r6, r2
 80148d8:	46aa      	mov	sl, r5
 80148da:	462f      	mov	r7, r5
 80148dc:	9502      	str	r5, [sp, #8]
 80148de:	68a2      	ldr	r2, [r4, #8]
 80148e0:	b15a      	cbz	r2, 80148fa <_scanf_float+0x66>
 80148e2:	f8d9 3000 	ldr.w	r3, [r9]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80148ea:	d863      	bhi.n	80149b4 <_scanf_float+0x120>
 80148ec:	2b40      	cmp	r3, #64	@ 0x40
 80148ee:	d83b      	bhi.n	8014968 <_scanf_float+0xd4>
 80148f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80148f4:	b2c8      	uxtb	r0, r1
 80148f6:	280e      	cmp	r0, #14
 80148f8:	d939      	bls.n	801496e <_scanf_float+0xda>
 80148fa:	b11f      	cbz	r7, 8014904 <_scanf_float+0x70>
 80148fc:	6823      	ldr	r3, [r4, #0]
 80148fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014902:	6023      	str	r3, [r4, #0]
 8014904:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014908:	f1ba 0f01 	cmp.w	sl, #1
 801490c:	f200 8114 	bhi.w	8014b38 <_scanf_float+0x2a4>
 8014910:	9b01      	ldr	r3, [sp, #4]
 8014912:	429e      	cmp	r6, r3
 8014914:	f200 8105 	bhi.w	8014b22 <_scanf_float+0x28e>
 8014918:	2001      	movs	r0, #1
 801491a:	b007      	add	sp, #28
 801491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014920:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014924:	2a0d      	cmp	r2, #13
 8014926:	d8e8      	bhi.n	80148fa <_scanf_float+0x66>
 8014928:	a101      	add	r1, pc, #4	@ (adr r1, 8014930 <_scanf_float+0x9c>)
 801492a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801492e:	bf00      	nop
 8014930:	08014a79 	.word	0x08014a79
 8014934:	080148fb 	.word	0x080148fb
 8014938:	080148fb 	.word	0x080148fb
 801493c:	080148fb 	.word	0x080148fb
 8014940:	08014ad5 	.word	0x08014ad5
 8014944:	08014aaf 	.word	0x08014aaf
 8014948:	080148fb 	.word	0x080148fb
 801494c:	080148fb 	.word	0x080148fb
 8014950:	08014a87 	.word	0x08014a87
 8014954:	080148fb 	.word	0x080148fb
 8014958:	080148fb 	.word	0x080148fb
 801495c:	080148fb 	.word	0x080148fb
 8014960:	080148fb 	.word	0x080148fb
 8014964:	08014a43 	.word	0x08014a43
 8014968:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801496c:	e7da      	b.n	8014924 <_scanf_float+0x90>
 801496e:	290e      	cmp	r1, #14
 8014970:	d8c3      	bhi.n	80148fa <_scanf_float+0x66>
 8014972:	a001      	add	r0, pc, #4	@ (adr r0, 8014978 <_scanf_float+0xe4>)
 8014974:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014978:	08014a33 	.word	0x08014a33
 801497c:	080148fb 	.word	0x080148fb
 8014980:	08014a33 	.word	0x08014a33
 8014984:	08014ac3 	.word	0x08014ac3
 8014988:	080148fb 	.word	0x080148fb
 801498c:	080149d5 	.word	0x080149d5
 8014990:	08014a19 	.word	0x08014a19
 8014994:	08014a19 	.word	0x08014a19
 8014998:	08014a19 	.word	0x08014a19
 801499c:	08014a19 	.word	0x08014a19
 80149a0:	08014a19 	.word	0x08014a19
 80149a4:	08014a19 	.word	0x08014a19
 80149a8:	08014a19 	.word	0x08014a19
 80149ac:	08014a19 	.word	0x08014a19
 80149b0:	08014a19 	.word	0x08014a19
 80149b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80149b6:	d809      	bhi.n	80149cc <_scanf_float+0x138>
 80149b8:	2b60      	cmp	r3, #96	@ 0x60
 80149ba:	d8b1      	bhi.n	8014920 <_scanf_float+0x8c>
 80149bc:	2b54      	cmp	r3, #84	@ 0x54
 80149be:	d07b      	beq.n	8014ab8 <_scanf_float+0x224>
 80149c0:	2b59      	cmp	r3, #89	@ 0x59
 80149c2:	d19a      	bne.n	80148fa <_scanf_float+0x66>
 80149c4:	2d07      	cmp	r5, #7
 80149c6:	d198      	bne.n	80148fa <_scanf_float+0x66>
 80149c8:	2508      	movs	r5, #8
 80149ca:	e02f      	b.n	8014a2c <_scanf_float+0x198>
 80149cc:	2b74      	cmp	r3, #116	@ 0x74
 80149ce:	d073      	beq.n	8014ab8 <_scanf_float+0x224>
 80149d0:	2b79      	cmp	r3, #121	@ 0x79
 80149d2:	e7f6      	b.n	80149c2 <_scanf_float+0x12e>
 80149d4:	6821      	ldr	r1, [r4, #0]
 80149d6:	05c8      	lsls	r0, r1, #23
 80149d8:	d51e      	bpl.n	8014a18 <_scanf_float+0x184>
 80149da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80149de:	6021      	str	r1, [r4, #0]
 80149e0:	3701      	adds	r7, #1
 80149e2:	f1bb 0f00 	cmp.w	fp, #0
 80149e6:	d003      	beq.n	80149f0 <_scanf_float+0x15c>
 80149e8:	3201      	adds	r2, #1
 80149ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80149ee:	60a2      	str	r2, [r4, #8]
 80149f0:	68a3      	ldr	r3, [r4, #8]
 80149f2:	3b01      	subs	r3, #1
 80149f4:	60a3      	str	r3, [r4, #8]
 80149f6:	6923      	ldr	r3, [r4, #16]
 80149f8:	3301      	adds	r3, #1
 80149fa:	6123      	str	r3, [r4, #16]
 80149fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014a00:	3b01      	subs	r3, #1
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f8c9 3004 	str.w	r3, [r9, #4]
 8014a08:	f340 8082 	ble.w	8014b10 <_scanf_float+0x27c>
 8014a0c:	f8d9 3000 	ldr.w	r3, [r9]
 8014a10:	3301      	adds	r3, #1
 8014a12:	f8c9 3000 	str.w	r3, [r9]
 8014a16:	e762      	b.n	80148de <_scanf_float+0x4a>
 8014a18:	eb1a 0105 	adds.w	r1, sl, r5
 8014a1c:	f47f af6d 	bne.w	80148fa <_scanf_float+0x66>
 8014a20:	6822      	ldr	r2, [r4, #0]
 8014a22:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014a26:	6022      	str	r2, [r4, #0]
 8014a28:	460d      	mov	r5, r1
 8014a2a:	468a      	mov	sl, r1
 8014a2c:	f806 3b01 	strb.w	r3, [r6], #1
 8014a30:	e7de      	b.n	80149f0 <_scanf_float+0x15c>
 8014a32:	6822      	ldr	r2, [r4, #0]
 8014a34:	0610      	lsls	r0, r2, #24
 8014a36:	f57f af60 	bpl.w	80148fa <_scanf_float+0x66>
 8014a3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014a3e:	6022      	str	r2, [r4, #0]
 8014a40:	e7f4      	b.n	8014a2c <_scanf_float+0x198>
 8014a42:	f1ba 0f00 	cmp.w	sl, #0
 8014a46:	d10c      	bne.n	8014a62 <_scanf_float+0x1ce>
 8014a48:	b977      	cbnz	r7, 8014a68 <_scanf_float+0x1d4>
 8014a4a:	6822      	ldr	r2, [r4, #0]
 8014a4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014a50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014a54:	d108      	bne.n	8014a68 <_scanf_float+0x1d4>
 8014a56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014a5a:	6022      	str	r2, [r4, #0]
 8014a5c:	f04f 0a01 	mov.w	sl, #1
 8014a60:	e7e4      	b.n	8014a2c <_scanf_float+0x198>
 8014a62:	f1ba 0f02 	cmp.w	sl, #2
 8014a66:	d050      	beq.n	8014b0a <_scanf_float+0x276>
 8014a68:	2d01      	cmp	r5, #1
 8014a6a:	d002      	beq.n	8014a72 <_scanf_float+0x1de>
 8014a6c:	2d04      	cmp	r5, #4
 8014a6e:	f47f af44 	bne.w	80148fa <_scanf_float+0x66>
 8014a72:	3501      	adds	r5, #1
 8014a74:	b2ed      	uxtb	r5, r5
 8014a76:	e7d9      	b.n	8014a2c <_scanf_float+0x198>
 8014a78:	f1ba 0f01 	cmp.w	sl, #1
 8014a7c:	f47f af3d 	bne.w	80148fa <_scanf_float+0x66>
 8014a80:	f04f 0a02 	mov.w	sl, #2
 8014a84:	e7d2      	b.n	8014a2c <_scanf_float+0x198>
 8014a86:	b975      	cbnz	r5, 8014aa6 <_scanf_float+0x212>
 8014a88:	2f00      	cmp	r7, #0
 8014a8a:	f47f af37 	bne.w	80148fc <_scanf_float+0x68>
 8014a8e:	6822      	ldr	r2, [r4, #0]
 8014a90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014a94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014a98:	f040 8103 	bne.w	8014ca2 <_scanf_float+0x40e>
 8014a9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014aa0:	6022      	str	r2, [r4, #0]
 8014aa2:	2501      	movs	r5, #1
 8014aa4:	e7c2      	b.n	8014a2c <_scanf_float+0x198>
 8014aa6:	2d03      	cmp	r5, #3
 8014aa8:	d0e3      	beq.n	8014a72 <_scanf_float+0x1de>
 8014aaa:	2d05      	cmp	r5, #5
 8014aac:	e7df      	b.n	8014a6e <_scanf_float+0x1da>
 8014aae:	2d02      	cmp	r5, #2
 8014ab0:	f47f af23 	bne.w	80148fa <_scanf_float+0x66>
 8014ab4:	2503      	movs	r5, #3
 8014ab6:	e7b9      	b.n	8014a2c <_scanf_float+0x198>
 8014ab8:	2d06      	cmp	r5, #6
 8014aba:	f47f af1e 	bne.w	80148fa <_scanf_float+0x66>
 8014abe:	2507      	movs	r5, #7
 8014ac0:	e7b4      	b.n	8014a2c <_scanf_float+0x198>
 8014ac2:	6822      	ldr	r2, [r4, #0]
 8014ac4:	0591      	lsls	r1, r2, #22
 8014ac6:	f57f af18 	bpl.w	80148fa <_scanf_float+0x66>
 8014aca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014ace:	6022      	str	r2, [r4, #0]
 8014ad0:	9702      	str	r7, [sp, #8]
 8014ad2:	e7ab      	b.n	8014a2c <_scanf_float+0x198>
 8014ad4:	6822      	ldr	r2, [r4, #0]
 8014ad6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014ada:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014ade:	d005      	beq.n	8014aec <_scanf_float+0x258>
 8014ae0:	0550      	lsls	r0, r2, #21
 8014ae2:	f57f af0a 	bpl.w	80148fa <_scanf_float+0x66>
 8014ae6:	2f00      	cmp	r7, #0
 8014ae8:	f000 80db 	beq.w	8014ca2 <_scanf_float+0x40e>
 8014aec:	0591      	lsls	r1, r2, #22
 8014aee:	bf58      	it	pl
 8014af0:	9902      	ldrpl	r1, [sp, #8]
 8014af2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014af6:	bf58      	it	pl
 8014af8:	1a79      	subpl	r1, r7, r1
 8014afa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014afe:	bf58      	it	pl
 8014b00:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014b04:	6022      	str	r2, [r4, #0]
 8014b06:	2700      	movs	r7, #0
 8014b08:	e790      	b.n	8014a2c <_scanf_float+0x198>
 8014b0a:	f04f 0a03 	mov.w	sl, #3
 8014b0e:	e78d      	b.n	8014a2c <_scanf_float+0x198>
 8014b10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014b14:	4649      	mov	r1, r9
 8014b16:	4640      	mov	r0, r8
 8014b18:	4798      	blx	r3
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	f43f aedf 	beq.w	80148de <_scanf_float+0x4a>
 8014b20:	e6eb      	b.n	80148fa <_scanf_float+0x66>
 8014b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014b2a:	464a      	mov	r2, r9
 8014b2c:	4640      	mov	r0, r8
 8014b2e:	4798      	blx	r3
 8014b30:	6923      	ldr	r3, [r4, #16]
 8014b32:	3b01      	subs	r3, #1
 8014b34:	6123      	str	r3, [r4, #16]
 8014b36:	e6eb      	b.n	8014910 <_scanf_float+0x7c>
 8014b38:	1e6b      	subs	r3, r5, #1
 8014b3a:	2b06      	cmp	r3, #6
 8014b3c:	d824      	bhi.n	8014b88 <_scanf_float+0x2f4>
 8014b3e:	2d02      	cmp	r5, #2
 8014b40:	d836      	bhi.n	8014bb0 <_scanf_float+0x31c>
 8014b42:	9b01      	ldr	r3, [sp, #4]
 8014b44:	429e      	cmp	r6, r3
 8014b46:	f67f aee7 	bls.w	8014918 <_scanf_float+0x84>
 8014b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014b52:	464a      	mov	r2, r9
 8014b54:	4640      	mov	r0, r8
 8014b56:	4798      	blx	r3
 8014b58:	6923      	ldr	r3, [r4, #16]
 8014b5a:	3b01      	subs	r3, #1
 8014b5c:	6123      	str	r3, [r4, #16]
 8014b5e:	e7f0      	b.n	8014b42 <_scanf_float+0x2ae>
 8014b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014b68:	464a      	mov	r2, r9
 8014b6a:	4640      	mov	r0, r8
 8014b6c:	4798      	blx	r3
 8014b6e:	6923      	ldr	r3, [r4, #16]
 8014b70:	3b01      	subs	r3, #1
 8014b72:	6123      	str	r3, [r4, #16]
 8014b74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b78:	fa5f fa8a 	uxtb.w	sl, sl
 8014b7c:	f1ba 0f02 	cmp.w	sl, #2
 8014b80:	d1ee      	bne.n	8014b60 <_scanf_float+0x2cc>
 8014b82:	3d03      	subs	r5, #3
 8014b84:	b2ed      	uxtb	r5, r5
 8014b86:	1b76      	subs	r6, r6, r5
 8014b88:	6823      	ldr	r3, [r4, #0]
 8014b8a:	05da      	lsls	r2, r3, #23
 8014b8c:	d530      	bpl.n	8014bf0 <_scanf_float+0x35c>
 8014b8e:	055b      	lsls	r3, r3, #21
 8014b90:	d511      	bpl.n	8014bb6 <_scanf_float+0x322>
 8014b92:	9b01      	ldr	r3, [sp, #4]
 8014b94:	429e      	cmp	r6, r3
 8014b96:	f67f aebf 	bls.w	8014918 <_scanf_float+0x84>
 8014b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ba2:	464a      	mov	r2, r9
 8014ba4:	4640      	mov	r0, r8
 8014ba6:	4798      	blx	r3
 8014ba8:	6923      	ldr	r3, [r4, #16]
 8014baa:	3b01      	subs	r3, #1
 8014bac:	6123      	str	r3, [r4, #16]
 8014bae:	e7f0      	b.n	8014b92 <_scanf_float+0x2fe>
 8014bb0:	46aa      	mov	sl, r5
 8014bb2:	46b3      	mov	fp, r6
 8014bb4:	e7de      	b.n	8014b74 <_scanf_float+0x2e0>
 8014bb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	2965      	cmp	r1, #101	@ 0x65
 8014bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8014bc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8014bc6:	6123      	str	r3, [r4, #16]
 8014bc8:	d00c      	beq.n	8014be4 <_scanf_float+0x350>
 8014bca:	2945      	cmp	r1, #69	@ 0x45
 8014bcc:	d00a      	beq.n	8014be4 <_scanf_float+0x350>
 8014bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014bd2:	464a      	mov	r2, r9
 8014bd4:	4640      	mov	r0, r8
 8014bd6:	4798      	blx	r3
 8014bd8:	6923      	ldr	r3, [r4, #16]
 8014bda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014bde:	3b01      	subs	r3, #1
 8014be0:	1eb5      	subs	r5, r6, #2
 8014be2:	6123      	str	r3, [r4, #16]
 8014be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014be8:	464a      	mov	r2, r9
 8014bea:	4640      	mov	r0, r8
 8014bec:	4798      	blx	r3
 8014bee:	462e      	mov	r6, r5
 8014bf0:	6822      	ldr	r2, [r4, #0]
 8014bf2:	f012 0210 	ands.w	r2, r2, #16
 8014bf6:	d001      	beq.n	8014bfc <_scanf_float+0x368>
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	e68e      	b.n	801491a <_scanf_float+0x86>
 8014bfc:	7032      	strb	r2, [r6, #0]
 8014bfe:	6823      	ldr	r3, [r4, #0]
 8014c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014c08:	d125      	bne.n	8014c56 <_scanf_float+0x3c2>
 8014c0a:	9b02      	ldr	r3, [sp, #8]
 8014c0c:	429f      	cmp	r7, r3
 8014c0e:	d00a      	beq.n	8014c26 <_scanf_float+0x392>
 8014c10:	1bda      	subs	r2, r3, r7
 8014c12:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014c16:	429e      	cmp	r6, r3
 8014c18:	bf28      	it	cs
 8014c1a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014c1e:	4922      	ldr	r1, [pc, #136]	@ (8014ca8 <_scanf_float+0x414>)
 8014c20:	4630      	mov	r0, r6
 8014c22:	f000 f99b 	bl	8014f5c <siprintf>
 8014c26:	9901      	ldr	r1, [sp, #4]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	f002 fd88 	bl	8017740 <_strtod_r>
 8014c30:	9b03      	ldr	r3, [sp, #12]
 8014c32:	6821      	ldr	r1, [r4, #0]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	f011 0f02 	tst.w	r1, #2
 8014c3a:	ec57 6b10 	vmov	r6, r7, d0
 8014c3e:	f103 0204 	add.w	r2, r3, #4
 8014c42:	d015      	beq.n	8014c70 <_scanf_float+0x3dc>
 8014c44:	9903      	ldr	r1, [sp, #12]
 8014c46:	600a      	str	r2, [r1, #0]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	e9c3 6700 	strd	r6, r7, [r3]
 8014c4e:	68e3      	ldr	r3, [r4, #12]
 8014c50:	3301      	adds	r3, #1
 8014c52:	60e3      	str	r3, [r4, #12]
 8014c54:	e7d0      	b.n	8014bf8 <_scanf_float+0x364>
 8014c56:	9b04      	ldr	r3, [sp, #16]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d0e4      	beq.n	8014c26 <_scanf_float+0x392>
 8014c5c:	9905      	ldr	r1, [sp, #20]
 8014c5e:	230a      	movs	r3, #10
 8014c60:	3101      	adds	r1, #1
 8014c62:	4640      	mov	r0, r8
 8014c64:	f002 fdec 	bl	8017840 <_strtol_r>
 8014c68:	9b04      	ldr	r3, [sp, #16]
 8014c6a:	9e05      	ldr	r6, [sp, #20]
 8014c6c:	1ac2      	subs	r2, r0, r3
 8014c6e:	e7d0      	b.n	8014c12 <_scanf_float+0x37e>
 8014c70:	f011 0f04 	tst.w	r1, #4
 8014c74:	9903      	ldr	r1, [sp, #12]
 8014c76:	600a      	str	r2, [r1, #0]
 8014c78:	d1e6      	bne.n	8014c48 <_scanf_float+0x3b4>
 8014c7a:	681d      	ldr	r5, [r3, #0]
 8014c7c:	4632      	mov	r2, r6
 8014c7e:	463b      	mov	r3, r7
 8014c80:	4630      	mov	r0, r6
 8014c82:	4639      	mov	r1, r7
 8014c84:	f7eb ff7a 	bl	8000b7c <__aeabi_dcmpun>
 8014c88:	b128      	cbz	r0, 8014c96 <_scanf_float+0x402>
 8014c8a:	4808      	ldr	r0, [pc, #32]	@ (8014cac <_scanf_float+0x418>)
 8014c8c:	f000 fb4c 	bl	8015328 <nanf>
 8014c90:	ed85 0a00 	vstr	s0, [r5]
 8014c94:	e7db      	b.n	8014c4e <_scanf_float+0x3ba>
 8014c96:	4630      	mov	r0, r6
 8014c98:	4639      	mov	r1, r7
 8014c9a:	f7eb ffcd 	bl	8000c38 <__aeabi_d2f>
 8014c9e:	6028      	str	r0, [r5, #0]
 8014ca0:	e7d5      	b.n	8014c4e <_scanf_float+0x3ba>
 8014ca2:	2700      	movs	r7, #0
 8014ca4:	e62e      	b.n	8014904 <_scanf_float+0x70>
 8014ca6:	bf00      	nop
 8014ca8:	0801b414 	.word	0x0801b414
 8014cac:	0801b555 	.word	0x0801b555

08014cb0 <std>:
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	b510      	push	{r4, lr}
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8014cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cbe:	6083      	str	r3, [r0, #8]
 8014cc0:	8181      	strh	r1, [r0, #12]
 8014cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014cc4:	81c2      	strh	r2, [r0, #14]
 8014cc6:	6183      	str	r3, [r0, #24]
 8014cc8:	4619      	mov	r1, r3
 8014cca:	2208      	movs	r2, #8
 8014ccc:	305c      	adds	r0, #92	@ 0x5c
 8014cce:	f000 fa3f 	bl	8015150 <memset>
 8014cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8014d08 <std+0x58>)
 8014cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8014cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8014d0c <std+0x5c>)
 8014cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014cda:	4b0d      	ldr	r3, [pc, #52]	@ (8014d10 <std+0x60>)
 8014cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014cde:	4b0d      	ldr	r3, [pc, #52]	@ (8014d14 <std+0x64>)
 8014ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8014ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8014d18 <std+0x68>)
 8014ce4:	6224      	str	r4, [r4, #32]
 8014ce6:	429c      	cmp	r4, r3
 8014ce8:	d006      	beq.n	8014cf8 <std+0x48>
 8014cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014cee:	4294      	cmp	r4, r2
 8014cf0:	d002      	beq.n	8014cf8 <std+0x48>
 8014cf2:	33d0      	adds	r3, #208	@ 0xd0
 8014cf4:	429c      	cmp	r4, r3
 8014cf6:	d105      	bne.n	8014d04 <std+0x54>
 8014cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d00:	f000 bb00 	b.w	8015304 <__retarget_lock_init_recursive>
 8014d04:	bd10      	pop	{r4, pc}
 8014d06:	bf00      	nop
 8014d08:	08014fa1 	.word	0x08014fa1
 8014d0c:	08014fc3 	.word	0x08014fc3
 8014d10:	08014ffb 	.word	0x08014ffb
 8014d14:	0801501f 	.word	0x0801501f
 8014d18:	2000487c 	.word	0x2000487c

08014d1c <stdio_exit_handler>:
 8014d1c:	4a02      	ldr	r2, [pc, #8]	@ (8014d28 <stdio_exit_handler+0xc>)
 8014d1e:	4903      	ldr	r1, [pc, #12]	@ (8014d2c <stdio_exit_handler+0x10>)
 8014d20:	4803      	ldr	r0, [pc, #12]	@ (8014d30 <stdio_exit_handler+0x14>)
 8014d22:	f000 b869 	b.w	8014df8 <_fwalk_sglue>
 8014d26:	bf00      	nop
 8014d28:	20000048 	.word	0x20000048
 8014d2c:	08017bfd 	.word	0x08017bfd
 8014d30:	20000058 	.word	0x20000058

08014d34 <cleanup_stdio>:
 8014d34:	6841      	ldr	r1, [r0, #4]
 8014d36:	4b0c      	ldr	r3, [pc, #48]	@ (8014d68 <cleanup_stdio+0x34>)
 8014d38:	4299      	cmp	r1, r3
 8014d3a:	b510      	push	{r4, lr}
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	d001      	beq.n	8014d44 <cleanup_stdio+0x10>
 8014d40:	f002 ff5c 	bl	8017bfc <_fflush_r>
 8014d44:	68a1      	ldr	r1, [r4, #8]
 8014d46:	4b09      	ldr	r3, [pc, #36]	@ (8014d6c <cleanup_stdio+0x38>)
 8014d48:	4299      	cmp	r1, r3
 8014d4a:	d002      	beq.n	8014d52 <cleanup_stdio+0x1e>
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	f002 ff55 	bl	8017bfc <_fflush_r>
 8014d52:	68e1      	ldr	r1, [r4, #12]
 8014d54:	4b06      	ldr	r3, [pc, #24]	@ (8014d70 <cleanup_stdio+0x3c>)
 8014d56:	4299      	cmp	r1, r3
 8014d58:	d004      	beq.n	8014d64 <cleanup_stdio+0x30>
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d60:	f002 bf4c 	b.w	8017bfc <_fflush_r>
 8014d64:	bd10      	pop	{r4, pc}
 8014d66:	bf00      	nop
 8014d68:	2000487c 	.word	0x2000487c
 8014d6c:	200048e4 	.word	0x200048e4
 8014d70:	2000494c 	.word	0x2000494c

08014d74 <global_stdio_init.part.0>:
 8014d74:	b510      	push	{r4, lr}
 8014d76:	4b0b      	ldr	r3, [pc, #44]	@ (8014da4 <global_stdio_init.part.0+0x30>)
 8014d78:	4c0b      	ldr	r4, [pc, #44]	@ (8014da8 <global_stdio_init.part.0+0x34>)
 8014d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8014dac <global_stdio_init.part.0+0x38>)
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	4620      	mov	r0, r4
 8014d80:	2200      	movs	r2, #0
 8014d82:	2104      	movs	r1, #4
 8014d84:	f7ff ff94 	bl	8014cb0 <std>
 8014d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014d8c:	2201      	movs	r2, #1
 8014d8e:	2109      	movs	r1, #9
 8014d90:	f7ff ff8e 	bl	8014cb0 <std>
 8014d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014d98:	2202      	movs	r2, #2
 8014d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d9e:	2112      	movs	r1, #18
 8014da0:	f7ff bf86 	b.w	8014cb0 <std>
 8014da4:	200049b4 	.word	0x200049b4
 8014da8:	2000487c 	.word	0x2000487c
 8014dac:	08014d1d 	.word	0x08014d1d

08014db0 <__sfp_lock_acquire>:
 8014db0:	4801      	ldr	r0, [pc, #4]	@ (8014db8 <__sfp_lock_acquire+0x8>)
 8014db2:	f000 baa8 	b.w	8015306 <__retarget_lock_acquire_recursive>
 8014db6:	bf00      	nop
 8014db8:	200049bd 	.word	0x200049bd

08014dbc <__sfp_lock_release>:
 8014dbc:	4801      	ldr	r0, [pc, #4]	@ (8014dc4 <__sfp_lock_release+0x8>)
 8014dbe:	f000 baa3 	b.w	8015308 <__retarget_lock_release_recursive>
 8014dc2:	bf00      	nop
 8014dc4:	200049bd 	.word	0x200049bd

08014dc8 <__sinit>:
 8014dc8:	b510      	push	{r4, lr}
 8014dca:	4604      	mov	r4, r0
 8014dcc:	f7ff fff0 	bl	8014db0 <__sfp_lock_acquire>
 8014dd0:	6a23      	ldr	r3, [r4, #32]
 8014dd2:	b11b      	cbz	r3, 8014ddc <__sinit+0x14>
 8014dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dd8:	f7ff bff0 	b.w	8014dbc <__sfp_lock_release>
 8014ddc:	4b04      	ldr	r3, [pc, #16]	@ (8014df0 <__sinit+0x28>)
 8014dde:	6223      	str	r3, [r4, #32]
 8014de0:	4b04      	ldr	r3, [pc, #16]	@ (8014df4 <__sinit+0x2c>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d1f5      	bne.n	8014dd4 <__sinit+0xc>
 8014de8:	f7ff ffc4 	bl	8014d74 <global_stdio_init.part.0>
 8014dec:	e7f2      	b.n	8014dd4 <__sinit+0xc>
 8014dee:	bf00      	nop
 8014df0:	08014d35 	.word	0x08014d35
 8014df4:	200049b4 	.word	0x200049b4

08014df8 <_fwalk_sglue>:
 8014df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dfc:	4607      	mov	r7, r0
 8014dfe:	4688      	mov	r8, r1
 8014e00:	4614      	mov	r4, r2
 8014e02:	2600      	movs	r6, #0
 8014e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e08:	f1b9 0901 	subs.w	r9, r9, #1
 8014e0c:	d505      	bpl.n	8014e1a <_fwalk_sglue+0x22>
 8014e0e:	6824      	ldr	r4, [r4, #0]
 8014e10:	2c00      	cmp	r4, #0
 8014e12:	d1f7      	bne.n	8014e04 <_fwalk_sglue+0xc>
 8014e14:	4630      	mov	r0, r6
 8014e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e1a:	89ab      	ldrh	r3, [r5, #12]
 8014e1c:	2b01      	cmp	r3, #1
 8014e1e:	d907      	bls.n	8014e30 <_fwalk_sglue+0x38>
 8014e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e24:	3301      	adds	r3, #1
 8014e26:	d003      	beq.n	8014e30 <_fwalk_sglue+0x38>
 8014e28:	4629      	mov	r1, r5
 8014e2a:	4638      	mov	r0, r7
 8014e2c:	47c0      	blx	r8
 8014e2e:	4306      	orrs	r6, r0
 8014e30:	3568      	adds	r5, #104	@ 0x68
 8014e32:	e7e9      	b.n	8014e08 <_fwalk_sglue+0x10>

08014e34 <_puts_r>:
 8014e34:	6a03      	ldr	r3, [r0, #32]
 8014e36:	b570      	push	{r4, r5, r6, lr}
 8014e38:	6884      	ldr	r4, [r0, #8]
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	460e      	mov	r6, r1
 8014e3e:	b90b      	cbnz	r3, 8014e44 <_puts_r+0x10>
 8014e40:	f7ff ffc2 	bl	8014dc8 <__sinit>
 8014e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e46:	07db      	lsls	r3, r3, #31
 8014e48:	d405      	bmi.n	8014e56 <_puts_r+0x22>
 8014e4a:	89a3      	ldrh	r3, [r4, #12]
 8014e4c:	0598      	lsls	r0, r3, #22
 8014e4e:	d402      	bmi.n	8014e56 <_puts_r+0x22>
 8014e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e52:	f000 fa58 	bl	8015306 <__retarget_lock_acquire_recursive>
 8014e56:	89a3      	ldrh	r3, [r4, #12]
 8014e58:	0719      	lsls	r1, r3, #28
 8014e5a:	d502      	bpl.n	8014e62 <_puts_r+0x2e>
 8014e5c:	6923      	ldr	r3, [r4, #16]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d135      	bne.n	8014ece <_puts_r+0x9a>
 8014e62:	4621      	mov	r1, r4
 8014e64:	4628      	mov	r0, r5
 8014e66:	f000 f91d 	bl	80150a4 <__swsetup_r>
 8014e6a:	b380      	cbz	r0, 8014ece <_puts_r+0x9a>
 8014e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8014e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e72:	07da      	lsls	r2, r3, #31
 8014e74:	d405      	bmi.n	8014e82 <_puts_r+0x4e>
 8014e76:	89a3      	ldrh	r3, [r4, #12]
 8014e78:	059b      	lsls	r3, r3, #22
 8014e7a:	d402      	bmi.n	8014e82 <_puts_r+0x4e>
 8014e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e7e:	f000 fa43 	bl	8015308 <__retarget_lock_release_recursive>
 8014e82:	4628      	mov	r0, r5
 8014e84:	bd70      	pop	{r4, r5, r6, pc}
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	da04      	bge.n	8014e94 <_puts_r+0x60>
 8014e8a:	69a2      	ldr	r2, [r4, #24]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	dc17      	bgt.n	8014ec0 <_puts_r+0x8c>
 8014e90:	290a      	cmp	r1, #10
 8014e92:	d015      	beq.n	8014ec0 <_puts_r+0x8c>
 8014e94:	6823      	ldr	r3, [r4, #0]
 8014e96:	1c5a      	adds	r2, r3, #1
 8014e98:	6022      	str	r2, [r4, #0]
 8014e9a:	7019      	strb	r1, [r3, #0]
 8014e9c:	68a3      	ldr	r3, [r4, #8]
 8014e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	60a3      	str	r3, [r4, #8]
 8014ea6:	2900      	cmp	r1, #0
 8014ea8:	d1ed      	bne.n	8014e86 <_puts_r+0x52>
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	da11      	bge.n	8014ed2 <_puts_r+0x9e>
 8014eae:	4622      	mov	r2, r4
 8014eb0:	210a      	movs	r1, #10
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f000 f8b7 	bl	8015026 <__swbuf_r>
 8014eb8:	3001      	adds	r0, #1
 8014eba:	d0d7      	beq.n	8014e6c <_puts_r+0x38>
 8014ebc:	250a      	movs	r5, #10
 8014ebe:	e7d7      	b.n	8014e70 <_puts_r+0x3c>
 8014ec0:	4622      	mov	r2, r4
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	f000 f8af 	bl	8015026 <__swbuf_r>
 8014ec8:	3001      	adds	r0, #1
 8014eca:	d1e7      	bne.n	8014e9c <_puts_r+0x68>
 8014ecc:	e7ce      	b.n	8014e6c <_puts_r+0x38>
 8014ece:	3e01      	subs	r6, #1
 8014ed0:	e7e4      	b.n	8014e9c <_puts_r+0x68>
 8014ed2:	6823      	ldr	r3, [r4, #0]
 8014ed4:	1c5a      	adds	r2, r3, #1
 8014ed6:	6022      	str	r2, [r4, #0]
 8014ed8:	220a      	movs	r2, #10
 8014eda:	701a      	strb	r2, [r3, #0]
 8014edc:	e7ee      	b.n	8014ebc <_puts_r+0x88>
	...

08014ee0 <puts>:
 8014ee0:	4b02      	ldr	r3, [pc, #8]	@ (8014eec <puts+0xc>)
 8014ee2:	4601      	mov	r1, r0
 8014ee4:	6818      	ldr	r0, [r3, #0]
 8014ee6:	f7ff bfa5 	b.w	8014e34 <_puts_r>
 8014eea:	bf00      	nop
 8014eec:	20000054 	.word	0x20000054

08014ef0 <sniprintf>:
 8014ef0:	b40c      	push	{r2, r3}
 8014ef2:	b530      	push	{r4, r5, lr}
 8014ef4:	4b18      	ldr	r3, [pc, #96]	@ (8014f58 <sniprintf+0x68>)
 8014ef6:	1e0c      	subs	r4, r1, #0
 8014ef8:	681d      	ldr	r5, [r3, #0]
 8014efa:	b09d      	sub	sp, #116	@ 0x74
 8014efc:	da08      	bge.n	8014f10 <sniprintf+0x20>
 8014efe:	238b      	movs	r3, #139	@ 0x8b
 8014f00:	602b      	str	r3, [r5, #0]
 8014f02:	f04f 30ff 	mov.w	r0, #4294967295
 8014f06:	b01d      	add	sp, #116	@ 0x74
 8014f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f0c:	b002      	add	sp, #8
 8014f0e:	4770      	bx	lr
 8014f10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014f14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014f18:	f04f 0300 	mov.w	r3, #0
 8014f1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014f1e:	bf14      	ite	ne
 8014f20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014f24:	4623      	moveq	r3, r4
 8014f26:	9304      	str	r3, [sp, #16]
 8014f28:	9307      	str	r3, [sp, #28]
 8014f2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f2e:	9002      	str	r0, [sp, #8]
 8014f30:	9006      	str	r0, [sp, #24]
 8014f32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014f36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014f38:	ab21      	add	r3, sp, #132	@ 0x84
 8014f3a:	a902      	add	r1, sp, #8
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	f002 fcdc 	bl	80178fc <_svfiprintf_r>
 8014f44:	1c43      	adds	r3, r0, #1
 8014f46:	bfbc      	itt	lt
 8014f48:	238b      	movlt	r3, #139	@ 0x8b
 8014f4a:	602b      	strlt	r3, [r5, #0]
 8014f4c:	2c00      	cmp	r4, #0
 8014f4e:	d0da      	beq.n	8014f06 <sniprintf+0x16>
 8014f50:	9b02      	ldr	r3, [sp, #8]
 8014f52:	2200      	movs	r2, #0
 8014f54:	701a      	strb	r2, [r3, #0]
 8014f56:	e7d6      	b.n	8014f06 <sniprintf+0x16>
 8014f58:	20000054 	.word	0x20000054

08014f5c <siprintf>:
 8014f5c:	b40e      	push	{r1, r2, r3}
 8014f5e:	b510      	push	{r4, lr}
 8014f60:	b09d      	sub	sp, #116	@ 0x74
 8014f62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014f64:	9002      	str	r0, [sp, #8]
 8014f66:	9006      	str	r0, [sp, #24]
 8014f68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014f6c:	480a      	ldr	r0, [pc, #40]	@ (8014f98 <siprintf+0x3c>)
 8014f6e:	9107      	str	r1, [sp, #28]
 8014f70:	9104      	str	r1, [sp, #16]
 8014f72:	490a      	ldr	r1, [pc, #40]	@ (8014f9c <siprintf+0x40>)
 8014f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f78:	9105      	str	r1, [sp, #20]
 8014f7a:	2400      	movs	r4, #0
 8014f7c:	a902      	add	r1, sp, #8
 8014f7e:	6800      	ldr	r0, [r0, #0]
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014f84:	f002 fcba 	bl	80178fc <_svfiprintf_r>
 8014f88:	9b02      	ldr	r3, [sp, #8]
 8014f8a:	701c      	strb	r4, [r3, #0]
 8014f8c:	b01d      	add	sp, #116	@ 0x74
 8014f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f92:	b003      	add	sp, #12
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	20000054 	.word	0x20000054
 8014f9c:	ffff0208 	.word	0xffff0208

08014fa0 <__sread>:
 8014fa0:	b510      	push	{r4, lr}
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa8:	f000 f95e 	bl	8015268 <_read_r>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	bfab      	itete	ge
 8014fb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8014fb4:	181b      	addge	r3, r3, r0
 8014fb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014fba:	bfac      	ite	ge
 8014fbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014fbe:	81a3      	strhlt	r3, [r4, #12]
 8014fc0:	bd10      	pop	{r4, pc}

08014fc2 <__swrite>:
 8014fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc6:	461f      	mov	r7, r3
 8014fc8:	898b      	ldrh	r3, [r1, #12]
 8014fca:	05db      	lsls	r3, r3, #23
 8014fcc:	4605      	mov	r5, r0
 8014fce:	460c      	mov	r4, r1
 8014fd0:	4616      	mov	r6, r2
 8014fd2:	d505      	bpl.n	8014fe0 <__swrite+0x1e>
 8014fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd8:	2302      	movs	r3, #2
 8014fda:	2200      	movs	r2, #0
 8014fdc:	f000 f932 	bl	8015244 <_lseek_r>
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014fea:	81a3      	strh	r3, [r4, #12]
 8014fec:	4632      	mov	r2, r6
 8014fee:	463b      	mov	r3, r7
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff6:	f000 b949 	b.w	801528c <_write_r>

08014ffa <__sseek>:
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	460c      	mov	r4, r1
 8014ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015002:	f000 f91f 	bl	8015244 <_lseek_r>
 8015006:	1c43      	adds	r3, r0, #1
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	bf15      	itete	ne
 801500c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801500e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015016:	81a3      	strheq	r3, [r4, #12]
 8015018:	bf18      	it	ne
 801501a:	81a3      	strhne	r3, [r4, #12]
 801501c:	bd10      	pop	{r4, pc}

0801501e <__sclose>:
 801501e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015022:	f000 b8a1 	b.w	8015168 <_close_r>

08015026 <__swbuf_r>:
 8015026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015028:	460e      	mov	r6, r1
 801502a:	4614      	mov	r4, r2
 801502c:	4605      	mov	r5, r0
 801502e:	b118      	cbz	r0, 8015038 <__swbuf_r+0x12>
 8015030:	6a03      	ldr	r3, [r0, #32]
 8015032:	b90b      	cbnz	r3, 8015038 <__swbuf_r+0x12>
 8015034:	f7ff fec8 	bl	8014dc8 <__sinit>
 8015038:	69a3      	ldr	r3, [r4, #24]
 801503a:	60a3      	str	r3, [r4, #8]
 801503c:	89a3      	ldrh	r3, [r4, #12]
 801503e:	071a      	lsls	r2, r3, #28
 8015040:	d501      	bpl.n	8015046 <__swbuf_r+0x20>
 8015042:	6923      	ldr	r3, [r4, #16]
 8015044:	b943      	cbnz	r3, 8015058 <__swbuf_r+0x32>
 8015046:	4621      	mov	r1, r4
 8015048:	4628      	mov	r0, r5
 801504a:	f000 f82b 	bl	80150a4 <__swsetup_r>
 801504e:	b118      	cbz	r0, 8015058 <__swbuf_r+0x32>
 8015050:	f04f 37ff 	mov.w	r7, #4294967295
 8015054:	4638      	mov	r0, r7
 8015056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015058:	6823      	ldr	r3, [r4, #0]
 801505a:	6922      	ldr	r2, [r4, #16]
 801505c:	1a98      	subs	r0, r3, r2
 801505e:	6963      	ldr	r3, [r4, #20]
 8015060:	b2f6      	uxtb	r6, r6
 8015062:	4283      	cmp	r3, r0
 8015064:	4637      	mov	r7, r6
 8015066:	dc05      	bgt.n	8015074 <__swbuf_r+0x4e>
 8015068:	4621      	mov	r1, r4
 801506a:	4628      	mov	r0, r5
 801506c:	f002 fdc6 	bl	8017bfc <_fflush_r>
 8015070:	2800      	cmp	r0, #0
 8015072:	d1ed      	bne.n	8015050 <__swbuf_r+0x2a>
 8015074:	68a3      	ldr	r3, [r4, #8]
 8015076:	3b01      	subs	r3, #1
 8015078:	60a3      	str	r3, [r4, #8]
 801507a:	6823      	ldr	r3, [r4, #0]
 801507c:	1c5a      	adds	r2, r3, #1
 801507e:	6022      	str	r2, [r4, #0]
 8015080:	701e      	strb	r6, [r3, #0]
 8015082:	6962      	ldr	r2, [r4, #20]
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	429a      	cmp	r2, r3
 8015088:	d004      	beq.n	8015094 <__swbuf_r+0x6e>
 801508a:	89a3      	ldrh	r3, [r4, #12]
 801508c:	07db      	lsls	r3, r3, #31
 801508e:	d5e1      	bpl.n	8015054 <__swbuf_r+0x2e>
 8015090:	2e0a      	cmp	r6, #10
 8015092:	d1df      	bne.n	8015054 <__swbuf_r+0x2e>
 8015094:	4621      	mov	r1, r4
 8015096:	4628      	mov	r0, r5
 8015098:	f002 fdb0 	bl	8017bfc <_fflush_r>
 801509c:	2800      	cmp	r0, #0
 801509e:	d0d9      	beq.n	8015054 <__swbuf_r+0x2e>
 80150a0:	e7d6      	b.n	8015050 <__swbuf_r+0x2a>
	...

080150a4 <__swsetup_r>:
 80150a4:	b538      	push	{r3, r4, r5, lr}
 80150a6:	4b29      	ldr	r3, [pc, #164]	@ (801514c <__swsetup_r+0xa8>)
 80150a8:	4605      	mov	r5, r0
 80150aa:	6818      	ldr	r0, [r3, #0]
 80150ac:	460c      	mov	r4, r1
 80150ae:	b118      	cbz	r0, 80150b8 <__swsetup_r+0x14>
 80150b0:	6a03      	ldr	r3, [r0, #32]
 80150b2:	b90b      	cbnz	r3, 80150b8 <__swsetup_r+0x14>
 80150b4:	f7ff fe88 	bl	8014dc8 <__sinit>
 80150b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150bc:	0719      	lsls	r1, r3, #28
 80150be:	d422      	bmi.n	8015106 <__swsetup_r+0x62>
 80150c0:	06da      	lsls	r2, r3, #27
 80150c2:	d407      	bmi.n	80150d4 <__swsetup_r+0x30>
 80150c4:	2209      	movs	r2, #9
 80150c6:	602a      	str	r2, [r5, #0]
 80150c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80150cc:	81a3      	strh	r3, [r4, #12]
 80150ce:	f04f 30ff 	mov.w	r0, #4294967295
 80150d2:	e033      	b.n	801513c <__swsetup_r+0x98>
 80150d4:	0758      	lsls	r0, r3, #29
 80150d6:	d512      	bpl.n	80150fe <__swsetup_r+0x5a>
 80150d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80150da:	b141      	cbz	r1, 80150ee <__swsetup_r+0x4a>
 80150dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80150e0:	4299      	cmp	r1, r3
 80150e2:	d002      	beq.n	80150ea <__swsetup_r+0x46>
 80150e4:	4628      	mov	r0, r5
 80150e6:	f000 ff7f 	bl	8015fe8 <_free_r>
 80150ea:	2300      	movs	r3, #0
 80150ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80150ee:	89a3      	ldrh	r3, [r4, #12]
 80150f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80150f4:	81a3      	strh	r3, [r4, #12]
 80150f6:	2300      	movs	r3, #0
 80150f8:	6063      	str	r3, [r4, #4]
 80150fa:	6923      	ldr	r3, [r4, #16]
 80150fc:	6023      	str	r3, [r4, #0]
 80150fe:	89a3      	ldrh	r3, [r4, #12]
 8015100:	f043 0308 	orr.w	r3, r3, #8
 8015104:	81a3      	strh	r3, [r4, #12]
 8015106:	6923      	ldr	r3, [r4, #16]
 8015108:	b94b      	cbnz	r3, 801511e <__swsetup_r+0x7a>
 801510a:	89a3      	ldrh	r3, [r4, #12]
 801510c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015114:	d003      	beq.n	801511e <__swsetup_r+0x7a>
 8015116:	4621      	mov	r1, r4
 8015118:	4628      	mov	r0, r5
 801511a:	f002 fdbd 	bl	8017c98 <__smakebuf_r>
 801511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015122:	f013 0201 	ands.w	r2, r3, #1
 8015126:	d00a      	beq.n	801513e <__swsetup_r+0x9a>
 8015128:	2200      	movs	r2, #0
 801512a:	60a2      	str	r2, [r4, #8]
 801512c:	6962      	ldr	r2, [r4, #20]
 801512e:	4252      	negs	r2, r2
 8015130:	61a2      	str	r2, [r4, #24]
 8015132:	6922      	ldr	r2, [r4, #16]
 8015134:	b942      	cbnz	r2, 8015148 <__swsetup_r+0xa4>
 8015136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801513a:	d1c5      	bne.n	80150c8 <__swsetup_r+0x24>
 801513c:	bd38      	pop	{r3, r4, r5, pc}
 801513e:	0799      	lsls	r1, r3, #30
 8015140:	bf58      	it	pl
 8015142:	6962      	ldrpl	r2, [r4, #20]
 8015144:	60a2      	str	r2, [r4, #8]
 8015146:	e7f4      	b.n	8015132 <__swsetup_r+0x8e>
 8015148:	2000      	movs	r0, #0
 801514a:	e7f7      	b.n	801513c <__swsetup_r+0x98>
 801514c:	20000054 	.word	0x20000054

08015150 <memset>:
 8015150:	4402      	add	r2, r0
 8015152:	4603      	mov	r3, r0
 8015154:	4293      	cmp	r3, r2
 8015156:	d100      	bne.n	801515a <memset+0xa>
 8015158:	4770      	bx	lr
 801515a:	f803 1b01 	strb.w	r1, [r3], #1
 801515e:	e7f9      	b.n	8015154 <memset+0x4>

08015160 <_localeconv_r>:
 8015160:	4800      	ldr	r0, [pc, #0]	@ (8015164 <_localeconv_r+0x4>)
 8015162:	4770      	bx	lr
 8015164:	20000194 	.word	0x20000194

08015168 <_close_r>:
 8015168:	b538      	push	{r3, r4, r5, lr}
 801516a:	4d06      	ldr	r5, [pc, #24]	@ (8015184 <_close_r+0x1c>)
 801516c:	2300      	movs	r3, #0
 801516e:	4604      	mov	r4, r0
 8015170:	4608      	mov	r0, r1
 8015172:	602b      	str	r3, [r5, #0]
 8015174:	f7ee fe90 	bl	8003e98 <_close>
 8015178:	1c43      	adds	r3, r0, #1
 801517a:	d102      	bne.n	8015182 <_close_r+0x1a>
 801517c:	682b      	ldr	r3, [r5, #0]
 801517e:	b103      	cbz	r3, 8015182 <_close_r+0x1a>
 8015180:	6023      	str	r3, [r4, #0]
 8015182:	bd38      	pop	{r3, r4, r5, pc}
 8015184:	200049b8 	.word	0x200049b8

08015188 <_reclaim_reent>:
 8015188:	4b2d      	ldr	r3, [pc, #180]	@ (8015240 <_reclaim_reent+0xb8>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4283      	cmp	r3, r0
 801518e:	b570      	push	{r4, r5, r6, lr}
 8015190:	4604      	mov	r4, r0
 8015192:	d053      	beq.n	801523c <_reclaim_reent+0xb4>
 8015194:	69c3      	ldr	r3, [r0, #28]
 8015196:	b31b      	cbz	r3, 80151e0 <_reclaim_reent+0x58>
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	b163      	cbz	r3, 80151b6 <_reclaim_reent+0x2e>
 801519c:	2500      	movs	r5, #0
 801519e:	69e3      	ldr	r3, [r4, #28]
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	5959      	ldr	r1, [r3, r5]
 80151a4:	b9b1      	cbnz	r1, 80151d4 <_reclaim_reent+0x4c>
 80151a6:	3504      	adds	r5, #4
 80151a8:	2d80      	cmp	r5, #128	@ 0x80
 80151aa:	d1f8      	bne.n	801519e <_reclaim_reent+0x16>
 80151ac:	69e3      	ldr	r3, [r4, #28]
 80151ae:	4620      	mov	r0, r4
 80151b0:	68d9      	ldr	r1, [r3, #12]
 80151b2:	f000 ff19 	bl	8015fe8 <_free_r>
 80151b6:	69e3      	ldr	r3, [r4, #28]
 80151b8:	6819      	ldr	r1, [r3, #0]
 80151ba:	b111      	cbz	r1, 80151c2 <_reclaim_reent+0x3a>
 80151bc:	4620      	mov	r0, r4
 80151be:	f000 ff13 	bl	8015fe8 <_free_r>
 80151c2:	69e3      	ldr	r3, [r4, #28]
 80151c4:	689d      	ldr	r5, [r3, #8]
 80151c6:	b15d      	cbz	r5, 80151e0 <_reclaim_reent+0x58>
 80151c8:	4629      	mov	r1, r5
 80151ca:	4620      	mov	r0, r4
 80151cc:	682d      	ldr	r5, [r5, #0]
 80151ce:	f000 ff0b 	bl	8015fe8 <_free_r>
 80151d2:	e7f8      	b.n	80151c6 <_reclaim_reent+0x3e>
 80151d4:	680e      	ldr	r6, [r1, #0]
 80151d6:	4620      	mov	r0, r4
 80151d8:	f000 ff06 	bl	8015fe8 <_free_r>
 80151dc:	4631      	mov	r1, r6
 80151de:	e7e1      	b.n	80151a4 <_reclaim_reent+0x1c>
 80151e0:	6961      	ldr	r1, [r4, #20]
 80151e2:	b111      	cbz	r1, 80151ea <_reclaim_reent+0x62>
 80151e4:	4620      	mov	r0, r4
 80151e6:	f000 feff 	bl	8015fe8 <_free_r>
 80151ea:	69e1      	ldr	r1, [r4, #28]
 80151ec:	b111      	cbz	r1, 80151f4 <_reclaim_reent+0x6c>
 80151ee:	4620      	mov	r0, r4
 80151f0:	f000 fefa 	bl	8015fe8 <_free_r>
 80151f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80151f6:	b111      	cbz	r1, 80151fe <_reclaim_reent+0x76>
 80151f8:	4620      	mov	r0, r4
 80151fa:	f000 fef5 	bl	8015fe8 <_free_r>
 80151fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015200:	b111      	cbz	r1, 8015208 <_reclaim_reent+0x80>
 8015202:	4620      	mov	r0, r4
 8015204:	f000 fef0 	bl	8015fe8 <_free_r>
 8015208:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801520a:	b111      	cbz	r1, 8015212 <_reclaim_reent+0x8a>
 801520c:	4620      	mov	r0, r4
 801520e:	f000 feeb 	bl	8015fe8 <_free_r>
 8015212:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015214:	b111      	cbz	r1, 801521c <_reclaim_reent+0x94>
 8015216:	4620      	mov	r0, r4
 8015218:	f000 fee6 	bl	8015fe8 <_free_r>
 801521c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801521e:	b111      	cbz	r1, 8015226 <_reclaim_reent+0x9e>
 8015220:	4620      	mov	r0, r4
 8015222:	f000 fee1 	bl	8015fe8 <_free_r>
 8015226:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015228:	b111      	cbz	r1, 8015230 <_reclaim_reent+0xa8>
 801522a:	4620      	mov	r0, r4
 801522c:	f000 fedc 	bl	8015fe8 <_free_r>
 8015230:	6a23      	ldr	r3, [r4, #32]
 8015232:	b11b      	cbz	r3, 801523c <_reclaim_reent+0xb4>
 8015234:	4620      	mov	r0, r4
 8015236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801523a:	4718      	bx	r3
 801523c:	bd70      	pop	{r4, r5, r6, pc}
 801523e:	bf00      	nop
 8015240:	20000054 	.word	0x20000054

08015244 <_lseek_r>:
 8015244:	b538      	push	{r3, r4, r5, lr}
 8015246:	4d07      	ldr	r5, [pc, #28]	@ (8015264 <_lseek_r+0x20>)
 8015248:	4604      	mov	r4, r0
 801524a:	4608      	mov	r0, r1
 801524c:	4611      	mov	r1, r2
 801524e:	2200      	movs	r2, #0
 8015250:	602a      	str	r2, [r5, #0]
 8015252:	461a      	mov	r2, r3
 8015254:	f7ee fe47 	bl	8003ee6 <_lseek>
 8015258:	1c43      	adds	r3, r0, #1
 801525a:	d102      	bne.n	8015262 <_lseek_r+0x1e>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	b103      	cbz	r3, 8015262 <_lseek_r+0x1e>
 8015260:	6023      	str	r3, [r4, #0]
 8015262:	bd38      	pop	{r3, r4, r5, pc}
 8015264:	200049b8 	.word	0x200049b8

08015268 <_read_r>:
 8015268:	b538      	push	{r3, r4, r5, lr}
 801526a:	4d07      	ldr	r5, [pc, #28]	@ (8015288 <_read_r+0x20>)
 801526c:	4604      	mov	r4, r0
 801526e:	4608      	mov	r0, r1
 8015270:	4611      	mov	r1, r2
 8015272:	2200      	movs	r2, #0
 8015274:	602a      	str	r2, [r5, #0]
 8015276:	461a      	mov	r2, r3
 8015278:	f7ee fdd5 	bl	8003e26 <_read>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_read_r+0x1e>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_read_r+0x1e>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	200049b8 	.word	0x200049b8

0801528c <_write_r>:
 801528c:	b538      	push	{r3, r4, r5, lr}
 801528e:	4d07      	ldr	r5, [pc, #28]	@ (80152ac <_write_r+0x20>)
 8015290:	4604      	mov	r4, r0
 8015292:	4608      	mov	r0, r1
 8015294:	4611      	mov	r1, r2
 8015296:	2200      	movs	r2, #0
 8015298:	602a      	str	r2, [r5, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	f7ee fde0 	bl	8003e60 <_write>
 80152a0:	1c43      	adds	r3, r0, #1
 80152a2:	d102      	bne.n	80152aa <_write_r+0x1e>
 80152a4:	682b      	ldr	r3, [r5, #0]
 80152a6:	b103      	cbz	r3, 80152aa <_write_r+0x1e>
 80152a8:	6023      	str	r3, [r4, #0]
 80152aa:	bd38      	pop	{r3, r4, r5, pc}
 80152ac:	200049b8 	.word	0x200049b8

080152b0 <__errno>:
 80152b0:	4b01      	ldr	r3, [pc, #4]	@ (80152b8 <__errno+0x8>)
 80152b2:	6818      	ldr	r0, [r3, #0]
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	20000054 	.word	0x20000054

080152bc <__libc_init_array>:
 80152bc:	b570      	push	{r4, r5, r6, lr}
 80152be:	4d0d      	ldr	r5, [pc, #52]	@ (80152f4 <__libc_init_array+0x38>)
 80152c0:	4c0d      	ldr	r4, [pc, #52]	@ (80152f8 <__libc_init_array+0x3c>)
 80152c2:	1b64      	subs	r4, r4, r5
 80152c4:	10a4      	asrs	r4, r4, #2
 80152c6:	2600      	movs	r6, #0
 80152c8:	42a6      	cmp	r6, r4
 80152ca:	d109      	bne.n	80152e0 <__libc_init_array+0x24>
 80152cc:	4d0b      	ldr	r5, [pc, #44]	@ (80152fc <__libc_init_array+0x40>)
 80152ce:	4c0c      	ldr	r4, [pc, #48]	@ (8015300 <__libc_init_array+0x44>)
 80152d0:	f003 feaa 	bl	8019028 <_init>
 80152d4:	1b64      	subs	r4, r4, r5
 80152d6:	10a4      	asrs	r4, r4, #2
 80152d8:	2600      	movs	r6, #0
 80152da:	42a6      	cmp	r6, r4
 80152dc:	d105      	bne.n	80152ea <__libc_init_array+0x2e>
 80152de:	bd70      	pop	{r4, r5, r6, pc}
 80152e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80152e4:	4798      	blx	r3
 80152e6:	3601      	adds	r6, #1
 80152e8:	e7ee      	b.n	80152c8 <__libc_init_array+0xc>
 80152ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80152ee:	4798      	blx	r3
 80152f0:	3601      	adds	r6, #1
 80152f2:	e7f2      	b.n	80152da <__libc_init_array+0x1e>
 80152f4:	0801b82c 	.word	0x0801b82c
 80152f8:	0801b82c 	.word	0x0801b82c
 80152fc:	0801b82c 	.word	0x0801b82c
 8015300:	0801b830 	.word	0x0801b830

08015304 <__retarget_lock_init_recursive>:
 8015304:	4770      	bx	lr

08015306 <__retarget_lock_acquire_recursive>:
 8015306:	4770      	bx	lr

08015308 <__retarget_lock_release_recursive>:
 8015308:	4770      	bx	lr

0801530a <memcpy>:
 801530a:	440a      	add	r2, r1
 801530c:	4291      	cmp	r1, r2
 801530e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015312:	d100      	bne.n	8015316 <memcpy+0xc>
 8015314:	4770      	bx	lr
 8015316:	b510      	push	{r4, lr}
 8015318:	f811 4b01 	ldrb.w	r4, [r1], #1
 801531c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015320:	4291      	cmp	r1, r2
 8015322:	d1f9      	bne.n	8015318 <memcpy+0xe>
 8015324:	bd10      	pop	{r4, pc}
	...

08015328 <nanf>:
 8015328:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015330 <nanf+0x8>
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	7fc00000 	.word	0x7fc00000

08015334 <quorem>:
 8015334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015338:	6903      	ldr	r3, [r0, #16]
 801533a:	690c      	ldr	r4, [r1, #16]
 801533c:	42a3      	cmp	r3, r4
 801533e:	4607      	mov	r7, r0
 8015340:	db7e      	blt.n	8015440 <quorem+0x10c>
 8015342:	3c01      	subs	r4, #1
 8015344:	f101 0814 	add.w	r8, r1, #20
 8015348:	00a3      	lsls	r3, r4, #2
 801534a:	f100 0514 	add.w	r5, r0, #20
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801535a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801535e:	3301      	adds	r3, #1
 8015360:	429a      	cmp	r2, r3
 8015362:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015366:	fbb2 f6f3 	udiv	r6, r2, r3
 801536a:	d32e      	bcc.n	80153ca <quorem+0x96>
 801536c:	f04f 0a00 	mov.w	sl, #0
 8015370:	46c4      	mov	ip, r8
 8015372:	46ae      	mov	lr, r5
 8015374:	46d3      	mov	fp, sl
 8015376:	f85c 3b04 	ldr.w	r3, [ip], #4
 801537a:	b298      	uxth	r0, r3
 801537c:	fb06 a000 	mla	r0, r6, r0, sl
 8015380:	0c02      	lsrs	r2, r0, #16
 8015382:	0c1b      	lsrs	r3, r3, #16
 8015384:	fb06 2303 	mla	r3, r6, r3, r2
 8015388:	f8de 2000 	ldr.w	r2, [lr]
 801538c:	b280      	uxth	r0, r0
 801538e:	b292      	uxth	r2, r2
 8015390:	1a12      	subs	r2, r2, r0
 8015392:	445a      	add	r2, fp
 8015394:	f8de 0000 	ldr.w	r0, [lr]
 8015398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801539c:	b29b      	uxth	r3, r3
 801539e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80153a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80153a6:	b292      	uxth	r2, r2
 80153a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80153ac:	45e1      	cmp	r9, ip
 80153ae:	f84e 2b04 	str.w	r2, [lr], #4
 80153b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80153b6:	d2de      	bcs.n	8015376 <quorem+0x42>
 80153b8:	9b00      	ldr	r3, [sp, #0]
 80153ba:	58eb      	ldr	r3, [r5, r3]
 80153bc:	b92b      	cbnz	r3, 80153ca <quorem+0x96>
 80153be:	9b01      	ldr	r3, [sp, #4]
 80153c0:	3b04      	subs	r3, #4
 80153c2:	429d      	cmp	r5, r3
 80153c4:	461a      	mov	r2, r3
 80153c6:	d32f      	bcc.n	8015428 <quorem+0xf4>
 80153c8:	613c      	str	r4, [r7, #16]
 80153ca:	4638      	mov	r0, r7
 80153cc:	f001 f9c8 	bl	8016760 <__mcmp>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	db25      	blt.n	8015420 <quorem+0xec>
 80153d4:	4629      	mov	r1, r5
 80153d6:	2000      	movs	r0, #0
 80153d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80153dc:	f8d1 c000 	ldr.w	ip, [r1]
 80153e0:	fa1f fe82 	uxth.w	lr, r2
 80153e4:	fa1f f38c 	uxth.w	r3, ip
 80153e8:	eba3 030e 	sub.w	r3, r3, lr
 80153ec:	4403      	add	r3, r0
 80153ee:	0c12      	lsrs	r2, r2, #16
 80153f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80153f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153fe:	45c1      	cmp	r9, r8
 8015400:	f841 3b04 	str.w	r3, [r1], #4
 8015404:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015408:	d2e6      	bcs.n	80153d8 <quorem+0xa4>
 801540a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801540e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015412:	b922      	cbnz	r2, 801541e <quorem+0xea>
 8015414:	3b04      	subs	r3, #4
 8015416:	429d      	cmp	r5, r3
 8015418:	461a      	mov	r2, r3
 801541a:	d30b      	bcc.n	8015434 <quorem+0x100>
 801541c:	613c      	str	r4, [r7, #16]
 801541e:	3601      	adds	r6, #1
 8015420:	4630      	mov	r0, r6
 8015422:	b003      	add	sp, #12
 8015424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015428:	6812      	ldr	r2, [r2, #0]
 801542a:	3b04      	subs	r3, #4
 801542c:	2a00      	cmp	r2, #0
 801542e:	d1cb      	bne.n	80153c8 <quorem+0x94>
 8015430:	3c01      	subs	r4, #1
 8015432:	e7c6      	b.n	80153c2 <quorem+0x8e>
 8015434:	6812      	ldr	r2, [r2, #0]
 8015436:	3b04      	subs	r3, #4
 8015438:	2a00      	cmp	r2, #0
 801543a:	d1ef      	bne.n	801541c <quorem+0xe8>
 801543c:	3c01      	subs	r4, #1
 801543e:	e7ea      	b.n	8015416 <quorem+0xe2>
 8015440:	2000      	movs	r0, #0
 8015442:	e7ee      	b.n	8015422 <quorem+0xee>
 8015444:	0000      	movs	r0, r0
	...

08015448 <_dtoa_r>:
 8015448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544c:	69c7      	ldr	r7, [r0, #28]
 801544e:	b097      	sub	sp, #92	@ 0x5c
 8015450:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015454:	ec55 4b10 	vmov	r4, r5, d0
 8015458:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801545a:	9107      	str	r1, [sp, #28]
 801545c:	4681      	mov	r9, r0
 801545e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015460:	9311      	str	r3, [sp, #68]	@ 0x44
 8015462:	b97f      	cbnz	r7, 8015484 <_dtoa_r+0x3c>
 8015464:	2010      	movs	r0, #16
 8015466:	f000 fe09 	bl	801607c <malloc>
 801546a:	4602      	mov	r2, r0
 801546c:	f8c9 001c 	str.w	r0, [r9, #28]
 8015470:	b920      	cbnz	r0, 801547c <_dtoa_r+0x34>
 8015472:	4ba9      	ldr	r3, [pc, #676]	@ (8015718 <_dtoa_r+0x2d0>)
 8015474:	21ef      	movs	r1, #239	@ 0xef
 8015476:	48a9      	ldr	r0, [pc, #676]	@ (801571c <_dtoa_r+0x2d4>)
 8015478:	f002 fcb2 	bl	8017de0 <__assert_func>
 801547c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015480:	6007      	str	r7, [r0, #0]
 8015482:	60c7      	str	r7, [r0, #12]
 8015484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015488:	6819      	ldr	r1, [r3, #0]
 801548a:	b159      	cbz	r1, 80154a4 <_dtoa_r+0x5c>
 801548c:	685a      	ldr	r2, [r3, #4]
 801548e:	604a      	str	r2, [r1, #4]
 8015490:	2301      	movs	r3, #1
 8015492:	4093      	lsls	r3, r2
 8015494:	608b      	str	r3, [r1, #8]
 8015496:	4648      	mov	r0, r9
 8015498:	f000 fee6 	bl	8016268 <_Bfree>
 801549c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]
 80154a4:	1e2b      	subs	r3, r5, #0
 80154a6:	bfb9      	ittee	lt
 80154a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80154ac:	9305      	strlt	r3, [sp, #20]
 80154ae:	2300      	movge	r3, #0
 80154b0:	6033      	strge	r3, [r6, #0]
 80154b2:	9f05      	ldr	r7, [sp, #20]
 80154b4:	4b9a      	ldr	r3, [pc, #616]	@ (8015720 <_dtoa_r+0x2d8>)
 80154b6:	bfbc      	itt	lt
 80154b8:	2201      	movlt	r2, #1
 80154ba:	6032      	strlt	r2, [r6, #0]
 80154bc:	43bb      	bics	r3, r7
 80154be:	d112      	bne.n	80154e6 <_dtoa_r+0x9e>
 80154c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80154c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80154cc:	4323      	orrs	r3, r4
 80154ce:	f000 855a 	beq.w	8015f86 <_dtoa_r+0xb3e>
 80154d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80154d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015734 <_dtoa_r+0x2ec>
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f000 855c 	beq.w	8015f96 <_dtoa_r+0xb4e>
 80154de:	f10a 0303 	add.w	r3, sl, #3
 80154e2:	f000 bd56 	b.w	8015f92 <_dtoa_r+0xb4a>
 80154e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80154ea:	2200      	movs	r2, #0
 80154ec:	ec51 0b17 	vmov	r0, r1, d7
 80154f0:	2300      	movs	r3, #0
 80154f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80154f6:	f7eb fb0f 	bl	8000b18 <__aeabi_dcmpeq>
 80154fa:	4680      	mov	r8, r0
 80154fc:	b158      	cbz	r0, 8015516 <_dtoa_r+0xce>
 80154fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015500:	2301      	movs	r3, #1
 8015502:	6013      	str	r3, [r2, #0]
 8015504:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015506:	b113      	cbz	r3, 801550e <_dtoa_r+0xc6>
 8015508:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801550a:	4b86      	ldr	r3, [pc, #536]	@ (8015724 <_dtoa_r+0x2dc>)
 801550c:	6013      	str	r3, [r2, #0]
 801550e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015738 <_dtoa_r+0x2f0>
 8015512:	f000 bd40 	b.w	8015f96 <_dtoa_r+0xb4e>
 8015516:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801551a:	aa14      	add	r2, sp, #80	@ 0x50
 801551c:	a915      	add	r1, sp, #84	@ 0x54
 801551e:	4648      	mov	r0, r9
 8015520:	f001 fa3e 	bl	80169a0 <__d2b>
 8015524:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015528:	9002      	str	r0, [sp, #8]
 801552a:	2e00      	cmp	r6, #0
 801552c:	d078      	beq.n	8015620 <_dtoa_r+0x1d8>
 801552e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015530:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801553c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015540:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015544:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015548:	4619      	mov	r1, r3
 801554a:	2200      	movs	r2, #0
 801554c:	4b76      	ldr	r3, [pc, #472]	@ (8015728 <_dtoa_r+0x2e0>)
 801554e:	f7ea fec3 	bl	80002d8 <__aeabi_dsub>
 8015552:	a36b      	add	r3, pc, #428	@ (adr r3, 8015700 <_dtoa_r+0x2b8>)
 8015554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015558:	f7eb f876 	bl	8000648 <__aeabi_dmul>
 801555c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015708 <_dtoa_r+0x2c0>)
 801555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015562:	f7ea febb 	bl	80002dc <__adddf3>
 8015566:	4604      	mov	r4, r0
 8015568:	4630      	mov	r0, r6
 801556a:	460d      	mov	r5, r1
 801556c:	f7eb f802 	bl	8000574 <__aeabi_i2d>
 8015570:	a367      	add	r3, pc, #412	@ (adr r3, 8015710 <_dtoa_r+0x2c8>)
 8015572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015576:	f7eb f867 	bl	8000648 <__aeabi_dmul>
 801557a:	4602      	mov	r2, r0
 801557c:	460b      	mov	r3, r1
 801557e:	4620      	mov	r0, r4
 8015580:	4629      	mov	r1, r5
 8015582:	f7ea feab 	bl	80002dc <__adddf3>
 8015586:	4604      	mov	r4, r0
 8015588:	460d      	mov	r5, r1
 801558a:	f7eb fb0d 	bl	8000ba8 <__aeabi_d2iz>
 801558e:	2200      	movs	r2, #0
 8015590:	4607      	mov	r7, r0
 8015592:	2300      	movs	r3, #0
 8015594:	4620      	mov	r0, r4
 8015596:	4629      	mov	r1, r5
 8015598:	f7eb fac8 	bl	8000b2c <__aeabi_dcmplt>
 801559c:	b140      	cbz	r0, 80155b0 <_dtoa_r+0x168>
 801559e:	4638      	mov	r0, r7
 80155a0:	f7ea ffe8 	bl	8000574 <__aeabi_i2d>
 80155a4:	4622      	mov	r2, r4
 80155a6:	462b      	mov	r3, r5
 80155a8:	f7eb fab6 	bl	8000b18 <__aeabi_dcmpeq>
 80155ac:	b900      	cbnz	r0, 80155b0 <_dtoa_r+0x168>
 80155ae:	3f01      	subs	r7, #1
 80155b0:	2f16      	cmp	r7, #22
 80155b2:	d852      	bhi.n	801565a <_dtoa_r+0x212>
 80155b4:	4b5d      	ldr	r3, [pc, #372]	@ (801572c <_dtoa_r+0x2e4>)
 80155b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80155c2:	f7eb fab3 	bl	8000b2c <__aeabi_dcmplt>
 80155c6:	2800      	cmp	r0, #0
 80155c8:	d049      	beq.n	801565e <_dtoa_r+0x216>
 80155ca:	3f01      	subs	r7, #1
 80155cc:	2300      	movs	r3, #0
 80155ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80155d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80155d2:	1b9b      	subs	r3, r3, r6
 80155d4:	1e5a      	subs	r2, r3, #1
 80155d6:	bf45      	ittet	mi
 80155d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80155dc:	9300      	strmi	r3, [sp, #0]
 80155de:	2300      	movpl	r3, #0
 80155e0:	2300      	movmi	r3, #0
 80155e2:	9206      	str	r2, [sp, #24]
 80155e4:	bf54      	ite	pl
 80155e6:	9300      	strpl	r3, [sp, #0]
 80155e8:	9306      	strmi	r3, [sp, #24]
 80155ea:	2f00      	cmp	r7, #0
 80155ec:	db39      	blt.n	8015662 <_dtoa_r+0x21a>
 80155ee:	9b06      	ldr	r3, [sp, #24]
 80155f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80155f2:	443b      	add	r3, r7
 80155f4:	9306      	str	r3, [sp, #24]
 80155f6:	2300      	movs	r3, #0
 80155f8:	9308      	str	r3, [sp, #32]
 80155fa:	9b07      	ldr	r3, [sp, #28]
 80155fc:	2b09      	cmp	r3, #9
 80155fe:	d863      	bhi.n	80156c8 <_dtoa_r+0x280>
 8015600:	2b05      	cmp	r3, #5
 8015602:	bfc4      	itt	gt
 8015604:	3b04      	subgt	r3, #4
 8015606:	9307      	strgt	r3, [sp, #28]
 8015608:	9b07      	ldr	r3, [sp, #28]
 801560a:	f1a3 0302 	sub.w	r3, r3, #2
 801560e:	bfcc      	ite	gt
 8015610:	2400      	movgt	r4, #0
 8015612:	2401      	movle	r4, #1
 8015614:	2b03      	cmp	r3, #3
 8015616:	d863      	bhi.n	80156e0 <_dtoa_r+0x298>
 8015618:	e8df f003 	tbb	[pc, r3]
 801561c:	2b375452 	.word	0x2b375452
 8015620:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015624:	441e      	add	r6, r3
 8015626:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801562a:	2b20      	cmp	r3, #32
 801562c:	bfc1      	itttt	gt
 801562e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015632:	409f      	lslgt	r7, r3
 8015634:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015638:	fa24 f303 	lsrgt.w	r3, r4, r3
 801563c:	bfd6      	itet	le
 801563e:	f1c3 0320 	rsble	r3, r3, #32
 8015642:	ea47 0003 	orrgt.w	r0, r7, r3
 8015646:	fa04 f003 	lslle.w	r0, r4, r3
 801564a:	f7ea ff83 	bl	8000554 <__aeabi_ui2d>
 801564e:	2201      	movs	r2, #1
 8015650:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015654:	3e01      	subs	r6, #1
 8015656:	9212      	str	r2, [sp, #72]	@ 0x48
 8015658:	e776      	b.n	8015548 <_dtoa_r+0x100>
 801565a:	2301      	movs	r3, #1
 801565c:	e7b7      	b.n	80155ce <_dtoa_r+0x186>
 801565e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015660:	e7b6      	b.n	80155d0 <_dtoa_r+0x188>
 8015662:	9b00      	ldr	r3, [sp, #0]
 8015664:	1bdb      	subs	r3, r3, r7
 8015666:	9300      	str	r3, [sp, #0]
 8015668:	427b      	negs	r3, r7
 801566a:	9308      	str	r3, [sp, #32]
 801566c:	2300      	movs	r3, #0
 801566e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015670:	e7c3      	b.n	80155fa <_dtoa_r+0x1b2>
 8015672:	2301      	movs	r3, #1
 8015674:	9309      	str	r3, [sp, #36]	@ 0x24
 8015676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015678:	eb07 0b03 	add.w	fp, r7, r3
 801567c:	f10b 0301 	add.w	r3, fp, #1
 8015680:	2b01      	cmp	r3, #1
 8015682:	9303      	str	r3, [sp, #12]
 8015684:	bfb8      	it	lt
 8015686:	2301      	movlt	r3, #1
 8015688:	e006      	b.n	8015698 <_dtoa_r+0x250>
 801568a:	2301      	movs	r3, #1
 801568c:	9309      	str	r3, [sp, #36]	@ 0x24
 801568e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015690:	2b00      	cmp	r3, #0
 8015692:	dd28      	ble.n	80156e6 <_dtoa_r+0x29e>
 8015694:	469b      	mov	fp, r3
 8015696:	9303      	str	r3, [sp, #12]
 8015698:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801569c:	2100      	movs	r1, #0
 801569e:	2204      	movs	r2, #4
 80156a0:	f102 0514 	add.w	r5, r2, #20
 80156a4:	429d      	cmp	r5, r3
 80156a6:	d926      	bls.n	80156f6 <_dtoa_r+0x2ae>
 80156a8:	6041      	str	r1, [r0, #4]
 80156aa:	4648      	mov	r0, r9
 80156ac:	f000 fd9c 	bl	80161e8 <_Balloc>
 80156b0:	4682      	mov	sl, r0
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d142      	bne.n	801573c <_dtoa_r+0x2f4>
 80156b6:	4b1e      	ldr	r3, [pc, #120]	@ (8015730 <_dtoa_r+0x2e8>)
 80156b8:	4602      	mov	r2, r0
 80156ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80156be:	e6da      	b.n	8015476 <_dtoa_r+0x2e>
 80156c0:	2300      	movs	r3, #0
 80156c2:	e7e3      	b.n	801568c <_dtoa_r+0x244>
 80156c4:	2300      	movs	r3, #0
 80156c6:	e7d5      	b.n	8015674 <_dtoa_r+0x22c>
 80156c8:	2401      	movs	r4, #1
 80156ca:	2300      	movs	r3, #0
 80156cc:	9307      	str	r3, [sp, #28]
 80156ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80156d0:	f04f 3bff 	mov.w	fp, #4294967295
 80156d4:	2200      	movs	r2, #0
 80156d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80156da:	2312      	movs	r3, #18
 80156dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80156de:	e7db      	b.n	8015698 <_dtoa_r+0x250>
 80156e0:	2301      	movs	r3, #1
 80156e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80156e4:	e7f4      	b.n	80156d0 <_dtoa_r+0x288>
 80156e6:	f04f 0b01 	mov.w	fp, #1
 80156ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80156ee:	465b      	mov	r3, fp
 80156f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80156f4:	e7d0      	b.n	8015698 <_dtoa_r+0x250>
 80156f6:	3101      	adds	r1, #1
 80156f8:	0052      	lsls	r2, r2, #1
 80156fa:	e7d1      	b.n	80156a0 <_dtoa_r+0x258>
 80156fc:	f3af 8000 	nop.w
 8015700:	636f4361 	.word	0x636f4361
 8015704:	3fd287a7 	.word	0x3fd287a7
 8015708:	8b60c8b3 	.word	0x8b60c8b3
 801570c:	3fc68a28 	.word	0x3fc68a28
 8015710:	509f79fb 	.word	0x509f79fb
 8015714:	3fd34413 	.word	0x3fd34413
 8015718:	0801b426 	.word	0x0801b426
 801571c:	0801b43d 	.word	0x0801b43d
 8015720:	7ff00000 	.word	0x7ff00000
 8015724:	0801b3f1 	.word	0x0801b3f1
 8015728:	3ff80000 	.word	0x3ff80000
 801572c:	0801b5f0 	.word	0x0801b5f0
 8015730:	0801b495 	.word	0x0801b495
 8015734:	0801b422 	.word	0x0801b422
 8015738:	0801b3f0 	.word	0x0801b3f0
 801573c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015740:	6018      	str	r0, [r3, #0]
 8015742:	9b03      	ldr	r3, [sp, #12]
 8015744:	2b0e      	cmp	r3, #14
 8015746:	f200 80a1 	bhi.w	801588c <_dtoa_r+0x444>
 801574a:	2c00      	cmp	r4, #0
 801574c:	f000 809e 	beq.w	801588c <_dtoa_r+0x444>
 8015750:	2f00      	cmp	r7, #0
 8015752:	dd33      	ble.n	80157bc <_dtoa_r+0x374>
 8015754:	4b9c      	ldr	r3, [pc, #624]	@ (80159c8 <_dtoa_r+0x580>)
 8015756:	f007 020f 	and.w	r2, r7, #15
 801575a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801575e:	ed93 7b00 	vldr	d7, [r3]
 8015762:	05f8      	lsls	r0, r7, #23
 8015764:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015768:	ea4f 1427 	mov.w	r4, r7, asr #4
 801576c:	d516      	bpl.n	801579c <_dtoa_r+0x354>
 801576e:	4b97      	ldr	r3, [pc, #604]	@ (80159cc <_dtoa_r+0x584>)
 8015770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015778:	f7eb f890 	bl	800089c <__aeabi_ddiv>
 801577c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015780:	f004 040f 	and.w	r4, r4, #15
 8015784:	2603      	movs	r6, #3
 8015786:	4d91      	ldr	r5, [pc, #580]	@ (80159cc <_dtoa_r+0x584>)
 8015788:	b954      	cbnz	r4, 80157a0 <_dtoa_r+0x358>
 801578a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801578e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015792:	f7eb f883 	bl	800089c <__aeabi_ddiv>
 8015796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801579a:	e028      	b.n	80157ee <_dtoa_r+0x3a6>
 801579c:	2602      	movs	r6, #2
 801579e:	e7f2      	b.n	8015786 <_dtoa_r+0x33e>
 80157a0:	07e1      	lsls	r1, r4, #31
 80157a2:	d508      	bpl.n	80157b6 <_dtoa_r+0x36e>
 80157a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80157a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80157ac:	f7ea ff4c 	bl	8000648 <__aeabi_dmul>
 80157b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80157b4:	3601      	adds	r6, #1
 80157b6:	1064      	asrs	r4, r4, #1
 80157b8:	3508      	adds	r5, #8
 80157ba:	e7e5      	b.n	8015788 <_dtoa_r+0x340>
 80157bc:	f000 80af 	beq.w	801591e <_dtoa_r+0x4d6>
 80157c0:	427c      	negs	r4, r7
 80157c2:	4b81      	ldr	r3, [pc, #516]	@ (80159c8 <_dtoa_r+0x580>)
 80157c4:	4d81      	ldr	r5, [pc, #516]	@ (80159cc <_dtoa_r+0x584>)
 80157c6:	f004 020f 	and.w	r2, r4, #15
 80157ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80157d6:	f7ea ff37 	bl	8000648 <__aeabi_dmul>
 80157da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157de:	1124      	asrs	r4, r4, #4
 80157e0:	2300      	movs	r3, #0
 80157e2:	2602      	movs	r6, #2
 80157e4:	2c00      	cmp	r4, #0
 80157e6:	f040 808f 	bne.w	8015908 <_dtoa_r+0x4c0>
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d1d3      	bne.n	8015796 <_dtoa_r+0x34e>
 80157ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80157f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 8094 	beq.w	8015922 <_dtoa_r+0x4da>
 80157fa:	4b75      	ldr	r3, [pc, #468]	@ (80159d0 <_dtoa_r+0x588>)
 80157fc:	2200      	movs	r2, #0
 80157fe:	4620      	mov	r0, r4
 8015800:	4629      	mov	r1, r5
 8015802:	f7eb f993 	bl	8000b2c <__aeabi_dcmplt>
 8015806:	2800      	cmp	r0, #0
 8015808:	f000 808b 	beq.w	8015922 <_dtoa_r+0x4da>
 801580c:	9b03      	ldr	r3, [sp, #12]
 801580e:	2b00      	cmp	r3, #0
 8015810:	f000 8087 	beq.w	8015922 <_dtoa_r+0x4da>
 8015814:	f1bb 0f00 	cmp.w	fp, #0
 8015818:	dd34      	ble.n	8015884 <_dtoa_r+0x43c>
 801581a:	4620      	mov	r0, r4
 801581c:	4b6d      	ldr	r3, [pc, #436]	@ (80159d4 <_dtoa_r+0x58c>)
 801581e:	2200      	movs	r2, #0
 8015820:	4629      	mov	r1, r5
 8015822:	f7ea ff11 	bl	8000648 <__aeabi_dmul>
 8015826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801582a:	f107 38ff 	add.w	r8, r7, #4294967295
 801582e:	3601      	adds	r6, #1
 8015830:	465c      	mov	r4, fp
 8015832:	4630      	mov	r0, r6
 8015834:	f7ea fe9e 	bl	8000574 <__aeabi_i2d>
 8015838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801583c:	f7ea ff04 	bl	8000648 <__aeabi_dmul>
 8015840:	4b65      	ldr	r3, [pc, #404]	@ (80159d8 <_dtoa_r+0x590>)
 8015842:	2200      	movs	r2, #0
 8015844:	f7ea fd4a 	bl	80002dc <__adddf3>
 8015848:	4605      	mov	r5, r0
 801584a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801584e:	2c00      	cmp	r4, #0
 8015850:	d16a      	bne.n	8015928 <_dtoa_r+0x4e0>
 8015852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015856:	4b61      	ldr	r3, [pc, #388]	@ (80159dc <_dtoa_r+0x594>)
 8015858:	2200      	movs	r2, #0
 801585a:	f7ea fd3d 	bl	80002d8 <__aeabi_dsub>
 801585e:	4602      	mov	r2, r0
 8015860:	460b      	mov	r3, r1
 8015862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015866:	462a      	mov	r2, r5
 8015868:	4633      	mov	r3, r6
 801586a:	f7eb f97d 	bl	8000b68 <__aeabi_dcmpgt>
 801586e:	2800      	cmp	r0, #0
 8015870:	f040 8298 	bne.w	8015da4 <_dtoa_r+0x95c>
 8015874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015878:	462a      	mov	r2, r5
 801587a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801587e:	f7eb f955 	bl	8000b2c <__aeabi_dcmplt>
 8015882:	bb38      	cbnz	r0, 80158d4 <_dtoa_r+0x48c>
 8015884:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015888:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801588c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801588e:	2b00      	cmp	r3, #0
 8015890:	f2c0 8157 	blt.w	8015b42 <_dtoa_r+0x6fa>
 8015894:	2f0e      	cmp	r7, #14
 8015896:	f300 8154 	bgt.w	8015b42 <_dtoa_r+0x6fa>
 801589a:	4b4b      	ldr	r3, [pc, #300]	@ (80159c8 <_dtoa_r+0x580>)
 801589c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80158a0:	ed93 7b00 	vldr	d7, [r3]
 80158a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	ed8d 7b00 	vstr	d7, [sp]
 80158ac:	f280 80e5 	bge.w	8015a7a <_dtoa_r+0x632>
 80158b0:	9b03      	ldr	r3, [sp, #12]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	f300 80e1 	bgt.w	8015a7a <_dtoa_r+0x632>
 80158b8:	d10c      	bne.n	80158d4 <_dtoa_r+0x48c>
 80158ba:	4b48      	ldr	r3, [pc, #288]	@ (80159dc <_dtoa_r+0x594>)
 80158bc:	2200      	movs	r2, #0
 80158be:	ec51 0b17 	vmov	r0, r1, d7
 80158c2:	f7ea fec1 	bl	8000648 <__aeabi_dmul>
 80158c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158ca:	f7eb f943 	bl	8000b54 <__aeabi_dcmpge>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	f000 8266 	beq.w	8015da0 <_dtoa_r+0x958>
 80158d4:	2400      	movs	r4, #0
 80158d6:	4625      	mov	r5, r4
 80158d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158da:	4656      	mov	r6, sl
 80158dc:	ea6f 0803 	mvn.w	r8, r3
 80158e0:	2700      	movs	r7, #0
 80158e2:	4621      	mov	r1, r4
 80158e4:	4648      	mov	r0, r9
 80158e6:	f000 fcbf 	bl	8016268 <_Bfree>
 80158ea:	2d00      	cmp	r5, #0
 80158ec:	f000 80bd 	beq.w	8015a6a <_dtoa_r+0x622>
 80158f0:	b12f      	cbz	r7, 80158fe <_dtoa_r+0x4b6>
 80158f2:	42af      	cmp	r7, r5
 80158f4:	d003      	beq.n	80158fe <_dtoa_r+0x4b6>
 80158f6:	4639      	mov	r1, r7
 80158f8:	4648      	mov	r0, r9
 80158fa:	f000 fcb5 	bl	8016268 <_Bfree>
 80158fe:	4629      	mov	r1, r5
 8015900:	4648      	mov	r0, r9
 8015902:	f000 fcb1 	bl	8016268 <_Bfree>
 8015906:	e0b0      	b.n	8015a6a <_dtoa_r+0x622>
 8015908:	07e2      	lsls	r2, r4, #31
 801590a:	d505      	bpl.n	8015918 <_dtoa_r+0x4d0>
 801590c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015910:	f7ea fe9a 	bl	8000648 <__aeabi_dmul>
 8015914:	3601      	adds	r6, #1
 8015916:	2301      	movs	r3, #1
 8015918:	1064      	asrs	r4, r4, #1
 801591a:	3508      	adds	r5, #8
 801591c:	e762      	b.n	80157e4 <_dtoa_r+0x39c>
 801591e:	2602      	movs	r6, #2
 8015920:	e765      	b.n	80157ee <_dtoa_r+0x3a6>
 8015922:	9c03      	ldr	r4, [sp, #12]
 8015924:	46b8      	mov	r8, r7
 8015926:	e784      	b.n	8015832 <_dtoa_r+0x3ea>
 8015928:	4b27      	ldr	r3, [pc, #156]	@ (80159c8 <_dtoa_r+0x580>)
 801592a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801592c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015930:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015934:	4454      	add	r4, sl
 8015936:	2900      	cmp	r1, #0
 8015938:	d054      	beq.n	80159e4 <_dtoa_r+0x59c>
 801593a:	4929      	ldr	r1, [pc, #164]	@ (80159e0 <_dtoa_r+0x598>)
 801593c:	2000      	movs	r0, #0
 801593e:	f7ea ffad 	bl	800089c <__aeabi_ddiv>
 8015942:	4633      	mov	r3, r6
 8015944:	462a      	mov	r2, r5
 8015946:	f7ea fcc7 	bl	80002d8 <__aeabi_dsub>
 801594a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801594e:	4656      	mov	r6, sl
 8015950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015954:	f7eb f928 	bl	8000ba8 <__aeabi_d2iz>
 8015958:	4605      	mov	r5, r0
 801595a:	f7ea fe0b 	bl	8000574 <__aeabi_i2d>
 801595e:	4602      	mov	r2, r0
 8015960:	460b      	mov	r3, r1
 8015962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015966:	f7ea fcb7 	bl	80002d8 <__aeabi_dsub>
 801596a:	3530      	adds	r5, #48	@ 0x30
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015974:	f806 5b01 	strb.w	r5, [r6], #1
 8015978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801597c:	f7eb f8d6 	bl	8000b2c <__aeabi_dcmplt>
 8015980:	2800      	cmp	r0, #0
 8015982:	d172      	bne.n	8015a6a <_dtoa_r+0x622>
 8015984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015988:	4911      	ldr	r1, [pc, #68]	@ (80159d0 <_dtoa_r+0x588>)
 801598a:	2000      	movs	r0, #0
 801598c:	f7ea fca4 	bl	80002d8 <__aeabi_dsub>
 8015990:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015994:	f7eb f8ca 	bl	8000b2c <__aeabi_dcmplt>
 8015998:	2800      	cmp	r0, #0
 801599a:	f040 80b4 	bne.w	8015b06 <_dtoa_r+0x6be>
 801599e:	42a6      	cmp	r6, r4
 80159a0:	f43f af70 	beq.w	8015884 <_dtoa_r+0x43c>
 80159a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80159a8:	4b0a      	ldr	r3, [pc, #40]	@ (80159d4 <_dtoa_r+0x58c>)
 80159aa:	2200      	movs	r2, #0
 80159ac:	f7ea fe4c 	bl	8000648 <__aeabi_dmul>
 80159b0:	4b08      	ldr	r3, [pc, #32]	@ (80159d4 <_dtoa_r+0x58c>)
 80159b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80159b6:	2200      	movs	r2, #0
 80159b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80159bc:	f7ea fe44 	bl	8000648 <__aeabi_dmul>
 80159c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80159c4:	e7c4      	b.n	8015950 <_dtoa_r+0x508>
 80159c6:	bf00      	nop
 80159c8:	0801b5f0 	.word	0x0801b5f0
 80159cc:	0801b5c8 	.word	0x0801b5c8
 80159d0:	3ff00000 	.word	0x3ff00000
 80159d4:	40240000 	.word	0x40240000
 80159d8:	401c0000 	.word	0x401c0000
 80159dc:	40140000 	.word	0x40140000
 80159e0:	3fe00000 	.word	0x3fe00000
 80159e4:	4631      	mov	r1, r6
 80159e6:	4628      	mov	r0, r5
 80159e8:	f7ea fe2e 	bl	8000648 <__aeabi_dmul>
 80159ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80159f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80159f2:	4656      	mov	r6, sl
 80159f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80159f8:	f7eb f8d6 	bl	8000ba8 <__aeabi_d2iz>
 80159fc:	4605      	mov	r5, r0
 80159fe:	f7ea fdb9 	bl	8000574 <__aeabi_i2d>
 8015a02:	4602      	mov	r2, r0
 8015a04:	460b      	mov	r3, r1
 8015a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a0a:	f7ea fc65 	bl	80002d8 <__aeabi_dsub>
 8015a0e:	3530      	adds	r5, #48	@ 0x30
 8015a10:	f806 5b01 	strb.w	r5, [r6], #1
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	42a6      	cmp	r6, r4
 8015a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a1e:	f04f 0200 	mov.w	r2, #0
 8015a22:	d124      	bne.n	8015a6e <_dtoa_r+0x626>
 8015a24:	4baf      	ldr	r3, [pc, #700]	@ (8015ce4 <_dtoa_r+0x89c>)
 8015a26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015a2a:	f7ea fc57 	bl	80002dc <__adddf3>
 8015a2e:	4602      	mov	r2, r0
 8015a30:	460b      	mov	r3, r1
 8015a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a36:	f7eb f897 	bl	8000b68 <__aeabi_dcmpgt>
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	d163      	bne.n	8015b06 <_dtoa_r+0x6be>
 8015a3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015a42:	49a8      	ldr	r1, [pc, #672]	@ (8015ce4 <_dtoa_r+0x89c>)
 8015a44:	2000      	movs	r0, #0
 8015a46:	f7ea fc47 	bl	80002d8 <__aeabi_dsub>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a52:	f7eb f86b 	bl	8000b2c <__aeabi_dcmplt>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	f43f af14 	beq.w	8015884 <_dtoa_r+0x43c>
 8015a5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015a5e:	1e73      	subs	r3, r6, #1
 8015a60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015a62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a66:	2b30      	cmp	r3, #48	@ 0x30
 8015a68:	d0f8      	beq.n	8015a5c <_dtoa_r+0x614>
 8015a6a:	4647      	mov	r7, r8
 8015a6c:	e03b      	b.n	8015ae6 <_dtoa_r+0x69e>
 8015a6e:	4b9e      	ldr	r3, [pc, #632]	@ (8015ce8 <_dtoa_r+0x8a0>)
 8015a70:	f7ea fdea 	bl	8000648 <__aeabi_dmul>
 8015a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a78:	e7bc      	b.n	80159f4 <_dtoa_r+0x5ac>
 8015a7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015a7e:	4656      	mov	r6, sl
 8015a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a84:	4620      	mov	r0, r4
 8015a86:	4629      	mov	r1, r5
 8015a88:	f7ea ff08 	bl	800089c <__aeabi_ddiv>
 8015a8c:	f7eb f88c 	bl	8000ba8 <__aeabi_d2iz>
 8015a90:	4680      	mov	r8, r0
 8015a92:	f7ea fd6f 	bl	8000574 <__aeabi_i2d>
 8015a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a9a:	f7ea fdd5 	bl	8000648 <__aeabi_dmul>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	4629      	mov	r1, r5
 8015aa6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015aaa:	f7ea fc15 	bl	80002d8 <__aeabi_dsub>
 8015aae:	f806 4b01 	strb.w	r4, [r6], #1
 8015ab2:	9d03      	ldr	r5, [sp, #12]
 8015ab4:	eba6 040a 	sub.w	r4, r6, sl
 8015ab8:	42a5      	cmp	r5, r4
 8015aba:	4602      	mov	r2, r0
 8015abc:	460b      	mov	r3, r1
 8015abe:	d133      	bne.n	8015b28 <_dtoa_r+0x6e0>
 8015ac0:	f7ea fc0c 	bl	80002dc <__adddf3>
 8015ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ac8:	4604      	mov	r4, r0
 8015aca:	460d      	mov	r5, r1
 8015acc:	f7eb f84c 	bl	8000b68 <__aeabi_dcmpgt>
 8015ad0:	b9c0      	cbnz	r0, 8015b04 <_dtoa_r+0x6bc>
 8015ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7eb f81d 	bl	8000b18 <__aeabi_dcmpeq>
 8015ade:	b110      	cbz	r0, 8015ae6 <_dtoa_r+0x69e>
 8015ae0:	f018 0f01 	tst.w	r8, #1
 8015ae4:	d10e      	bne.n	8015b04 <_dtoa_r+0x6bc>
 8015ae6:	9902      	ldr	r1, [sp, #8]
 8015ae8:	4648      	mov	r0, r9
 8015aea:	f000 fbbd 	bl	8016268 <_Bfree>
 8015aee:	2300      	movs	r3, #0
 8015af0:	7033      	strb	r3, [r6, #0]
 8015af2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015af4:	3701      	adds	r7, #1
 8015af6:	601f      	str	r7, [r3, #0]
 8015af8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 824b 	beq.w	8015f96 <_dtoa_r+0xb4e>
 8015b00:	601e      	str	r6, [r3, #0]
 8015b02:	e248      	b.n	8015f96 <_dtoa_r+0xb4e>
 8015b04:	46b8      	mov	r8, r7
 8015b06:	4633      	mov	r3, r6
 8015b08:	461e      	mov	r6, r3
 8015b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b0e:	2a39      	cmp	r2, #57	@ 0x39
 8015b10:	d106      	bne.n	8015b20 <_dtoa_r+0x6d8>
 8015b12:	459a      	cmp	sl, r3
 8015b14:	d1f8      	bne.n	8015b08 <_dtoa_r+0x6c0>
 8015b16:	2230      	movs	r2, #48	@ 0x30
 8015b18:	f108 0801 	add.w	r8, r8, #1
 8015b1c:	f88a 2000 	strb.w	r2, [sl]
 8015b20:	781a      	ldrb	r2, [r3, #0]
 8015b22:	3201      	adds	r2, #1
 8015b24:	701a      	strb	r2, [r3, #0]
 8015b26:	e7a0      	b.n	8015a6a <_dtoa_r+0x622>
 8015b28:	4b6f      	ldr	r3, [pc, #444]	@ (8015ce8 <_dtoa_r+0x8a0>)
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f7ea fd8c 	bl	8000648 <__aeabi_dmul>
 8015b30:	2200      	movs	r2, #0
 8015b32:	2300      	movs	r3, #0
 8015b34:	4604      	mov	r4, r0
 8015b36:	460d      	mov	r5, r1
 8015b38:	f7ea ffee 	bl	8000b18 <__aeabi_dcmpeq>
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	d09f      	beq.n	8015a80 <_dtoa_r+0x638>
 8015b40:	e7d1      	b.n	8015ae6 <_dtoa_r+0x69e>
 8015b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b44:	2a00      	cmp	r2, #0
 8015b46:	f000 80ea 	beq.w	8015d1e <_dtoa_r+0x8d6>
 8015b4a:	9a07      	ldr	r2, [sp, #28]
 8015b4c:	2a01      	cmp	r2, #1
 8015b4e:	f300 80cd 	bgt.w	8015cec <_dtoa_r+0x8a4>
 8015b52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015b54:	2a00      	cmp	r2, #0
 8015b56:	f000 80c1 	beq.w	8015cdc <_dtoa_r+0x894>
 8015b5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015b5e:	9c08      	ldr	r4, [sp, #32]
 8015b60:	9e00      	ldr	r6, [sp, #0]
 8015b62:	9a00      	ldr	r2, [sp, #0]
 8015b64:	441a      	add	r2, r3
 8015b66:	9200      	str	r2, [sp, #0]
 8015b68:	9a06      	ldr	r2, [sp, #24]
 8015b6a:	2101      	movs	r1, #1
 8015b6c:	441a      	add	r2, r3
 8015b6e:	4648      	mov	r0, r9
 8015b70:	9206      	str	r2, [sp, #24]
 8015b72:	f000 fc77 	bl	8016464 <__i2b>
 8015b76:	4605      	mov	r5, r0
 8015b78:	b166      	cbz	r6, 8015b94 <_dtoa_r+0x74c>
 8015b7a:	9b06      	ldr	r3, [sp, #24]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dd09      	ble.n	8015b94 <_dtoa_r+0x74c>
 8015b80:	42b3      	cmp	r3, r6
 8015b82:	9a00      	ldr	r2, [sp, #0]
 8015b84:	bfa8      	it	ge
 8015b86:	4633      	movge	r3, r6
 8015b88:	1ad2      	subs	r2, r2, r3
 8015b8a:	9200      	str	r2, [sp, #0]
 8015b8c:	9a06      	ldr	r2, [sp, #24]
 8015b8e:	1af6      	subs	r6, r6, r3
 8015b90:	1ad3      	subs	r3, r2, r3
 8015b92:	9306      	str	r3, [sp, #24]
 8015b94:	9b08      	ldr	r3, [sp, #32]
 8015b96:	b30b      	cbz	r3, 8015bdc <_dtoa_r+0x794>
 8015b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	f000 80c6 	beq.w	8015d2c <_dtoa_r+0x8e4>
 8015ba0:	2c00      	cmp	r4, #0
 8015ba2:	f000 80c0 	beq.w	8015d26 <_dtoa_r+0x8de>
 8015ba6:	4629      	mov	r1, r5
 8015ba8:	4622      	mov	r2, r4
 8015baa:	4648      	mov	r0, r9
 8015bac:	f000 fd12 	bl	80165d4 <__pow5mult>
 8015bb0:	9a02      	ldr	r2, [sp, #8]
 8015bb2:	4601      	mov	r1, r0
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	4648      	mov	r0, r9
 8015bb8:	f000 fc6a 	bl	8016490 <__multiply>
 8015bbc:	9902      	ldr	r1, [sp, #8]
 8015bbe:	4680      	mov	r8, r0
 8015bc0:	4648      	mov	r0, r9
 8015bc2:	f000 fb51 	bl	8016268 <_Bfree>
 8015bc6:	9b08      	ldr	r3, [sp, #32]
 8015bc8:	1b1b      	subs	r3, r3, r4
 8015bca:	9308      	str	r3, [sp, #32]
 8015bcc:	f000 80b1 	beq.w	8015d32 <_dtoa_r+0x8ea>
 8015bd0:	9a08      	ldr	r2, [sp, #32]
 8015bd2:	4641      	mov	r1, r8
 8015bd4:	4648      	mov	r0, r9
 8015bd6:	f000 fcfd 	bl	80165d4 <__pow5mult>
 8015bda:	9002      	str	r0, [sp, #8]
 8015bdc:	2101      	movs	r1, #1
 8015bde:	4648      	mov	r0, r9
 8015be0:	f000 fc40 	bl	8016464 <__i2b>
 8015be4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015be6:	4604      	mov	r4, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f000 81d8 	beq.w	8015f9e <_dtoa_r+0xb56>
 8015bee:	461a      	mov	r2, r3
 8015bf0:	4601      	mov	r1, r0
 8015bf2:	4648      	mov	r0, r9
 8015bf4:	f000 fcee 	bl	80165d4 <__pow5mult>
 8015bf8:	9b07      	ldr	r3, [sp, #28]
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	f300 809f 	bgt.w	8015d40 <_dtoa_r+0x8f8>
 8015c02:	9b04      	ldr	r3, [sp, #16]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	f040 8097 	bne.w	8015d38 <_dtoa_r+0x8f0>
 8015c0a:	9b05      	ldr	r3, [sp, #20]
 8015c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f040 8093 	bne.w	8015d3c <_dtoa_r+0x8f4>
 8015c16:	9b05      	ldr	r3, [sp, #20]
 8015c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015c1c:	0d1b      	lsrs	r3, r3, #20
 8015c1e:	051b      	lsls	r3, r3, #20
 8015c20:	b133      	cbz	r3, 8015c30 <_dtoa_r+0x7e8>
 8015c22:	9b00      	ldr	r3, [sp, #0]
 8015c24:	3301      	adds	r3, #1
 8015c26:	9300      	str	r3, [sp, #0]
 8015c28:	9b06      	ldr	r3, [sp, #24]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	9306      	str	r3, [sp, #24]
 8015c2e:	2301      	movs	r3, #1
 8015c30:	9308      	str	r3, [sp, #32]
 8015c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f000 81b8 	beq.w	8015faa <_dtoa_r+0xb62>
 8015c3a:	6923      	ldr	r3, [r4, #16]
 8015c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c40:	6918      	ldr	r0, [r3, #16]
 8015c42:	f000 fbc3 	bl	80163cc <__hi0bits>
 8015c46:	f1c0 0020 	rsb	r0, r0, #32
 8015c4a:	9b06      	ldr	r3, [sp, #24]
 8015c4c:	4418      	add	r0, r3
 8015c4e:	f010 001f 	ands.w	r0, r0, #31
 8015c52:	f000 8082 	beq.w	8015d5a <_dtoa_r+0x912>
 8015c56:	f1c0 0320 	rsb	r3, r0, #32
 8015c5a:	2b04      	cmp	r3, #4
 8015c5c:	dd73      	ble.n	8015d46 <_dtoa_r+0x8fe>
 8015c5e:	9b00      	ldr	r3, [sp, #0]
 8015c60:	f1c0 001c 	rsb	r0, r0, #28
 8015c64:	4403      	add	r3, r0
 8015c66:	9300      	str	r3, [sp, #0]
 8015c68:	9b06      	ldr	r3, [sp, #24]
 8015c6a:	4403      	add	r3, r0
 8015c6c:	4406      	add	r6, r0
 8015c6e:	9306      	str	r3, [sp, #24]
 8015c70:	9b00      	ldr	r3, [sp, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	dd05      	ble.n	8015c82 <_dtoa_r+0x83a>
 8015c76:	9902      	ldr	r1, [sp, #8]
 8015c78:	461a      	mov	r2, r3
 8015c7a:	4648      	mov	r0, r9
 8015c7c:	f000 fd04 	bl	8016688 <__lshift>
 8015c80:	9002      	str	r0, [sp, #8]
 8015c82:	9b06      	ldr	r3, [sp, #24]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	dd05      	ble.n	8015c94 <_dtoa_r+0x84c>
 8015c88:	4621      	mov	r1, r4
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	4648      	mov	r0, r9
 8015c8e:	f000 fcfb 	bl	8016688 <__lshift>
 8015c92:	4604      	mov	r4, r0
 8015c94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d061      	beq.n	8015d5e <_dtoa_r+0x916>
 8015c9a:	9802      	ldr	r0, [sp, #8]
 8015c9c:	4621      	mov	r1, r4
 8015c9e:	f000 fd5f 	bl	8016760 <__mcmp>
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	da5b      	bge.n	8015d5e <_dtoa_r+0x916>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	9902      	ldr	r1, [sp, #8]
 8015caa:	220a      	movs	r2, #10
 8015cac:	4648      	mov	r0, r9
 8015cae:	f000 fafd 	bl	80162ac <__multadd>
 8015cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cb4:	9002      	str	r0, [sp, #8]
 8015cb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f000 8177 	beq.w	8015fae <_dtoa_r+0xb66>
 8015cc0:	4629      	mov	r1, r5
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	220a      	movs	r2, #10
 8015cc6:	4648      	mov	r0, r9
 8015cc8:	f000 faf0 	bl	80162ac <__multadd>
 8015ccc:	f1bb 0f00 	cmp.w	fp, #0
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	dc6f      	bgt.n	8015db4 <_dtoa_r+0x96c>
 8015cd4:	9b07      	ldr	r3, [sp, #28]
 8015cd6:	2b02      	cmp	r3, #2
 8015cd8:	dc49      	bgt.n	8015d6e <_dtoa_r+0x926>
 8015cda:	e06b      	b.n	8015db4 <_dtoa_r+0x96c>
 8015cdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015cde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015ce2:	e73c      	b.n	8015b5e <_dtoa_r+0x716>
 8015ce4:	3fe00000 	.word	0x3fe00000
 8015ce8:	40240000 	.word	0x40240000
 8015cec:	9b03      	ldr	r3, [sp, #12]
 8015cee:	1e5c      	subs	r4, r3, #1
 8015cf0:	9b08      	ldr	r3, [sp, #32]
 8015cf2:	42a3      	cmp	r3, r4
 8015cf4:	db09      	blt.n	8015d0a <_dtoa_r+0x8c2>
 8015cf6:	1b1c      	subs	r4, r3, r4
 8015cf8:	9b03      	ldr	r3, [sp, #12]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	f6bf af30 	bge.w	8015b60 <_dtoa_r+0x718>
 8015d00:	9b00      	ldr	r3, [sp, #0]
 8015d02:	9a03      	ldr	r2, [sp, #12]
 8015d04:	1a9e      	subs	r6, r3, r2
 8015d06:	2300      	movs	r3, #0
 8015d08:	e72b      	b.n	8015b62 <_dtoa_r+0x71a>
 8015d0a:	9b08      	ldr	r3, [sp, #32]
 8015d0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015d0e:	9408      	str	r4, [sp, #32]
 8015d10:	1ae3      	subs	r3, r4, r3
 8015d12:	441a      	add	r2, r3
 8015d14:	9e00      	ldr	r6, [sp, #0]
 8015d16:	9b03      	ldr	r3, [sp, #12]
 8015d18:	920d      	str	r2, [sp, #52]	@ 0x34
 8015d1a:	2400      	movs	r4, #0
 8015d1c:	e721      	b.n	8015b62 <_dtoa_r+0x71a>
 8015d1e:	9c08      	ldr	r4, [sp, #32]
 8015d20:	9e00      	ldr	r6, [sp, #0]
 8015d22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015d24:	e728      	b.n	8015b78 <_dtoa_r+0x730>
 8015d26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015d2a:	e751      	b.n	8015bd0 <_dtoa_r+0x788>
 8015d2c:	9a08      	ldr	r2, [sp, #32]
 8015d2e:	9902      	ldr	r1, [sp, #8]
 8015d30:	e750      	b.n	8015bd4 <_dtoa_r+0x78c>
 8015d32:	f8cd 8008 	str.w	r8, [sp, #8]
 8015d36:	e751      	b.n	8015bdc <_dtoa_r+0x794>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	e779      	b.n	8015c30 <_dtoa_r+0x7e8>
 8015d3c:	9b04      	ldr	r3, [sp, #16]
 8015d3e:	e777      	b.n	8015c30 <_dtoa_r+0x7e8>
 8015d40:	2300      	movs	r3, #0
 8015d42:	9308      	str	r3, [sp, #32]
 8015d44:	e779      	b.n	8015c3a <_dtoa_r+0x7f2>
 8015d46:	d093      	beq.n	8015c70 <_dtoa_r+0x828>
 8015d48:	9a00      	ldr	r2, [sp, #0]
 8015d4a:	331c      	adds	r3, #28
 8015d4c:	441a      	add	r2, r3
 8015d4e:	9200      	str	r2, [sp, #0]
 8015d50:	9a06      	ldr	r2, [sp, #24]
 8015d52:	441a      	add	r2, r3
 8015d54:	441e      	add	r6, r3
 8015d56:	9206      	str	r2, [sp, #24]
 8015d58:	e78a      	b.n	8015c70 <_dtoa_r+0x828>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	e7f4      	b.n	8015d48 <_dtoa_r+0x900>
 8015d5e:	9b03      	ldr	r3, [sp, #12]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	46b8      	mov	r8, r7
 8015d64:	dc20      	bgt.n	8015da8 <_dtoa_r+0x960>
 8015d66:	469b      	mov	fp, r3
 8015d68:	9b07      	ldr	r3, [sp, #28]
 8015d6a:	2b02      	cmp	r3, #2
 8015d6c:	dd1e      	ble.n	8015dac <_dtoa_r+0x964>
 8015d6e:	f1bb 0f00 	cmp.w	fp, #0
 8015d72:	f47f adb1 	bne.w	80158d8 <_dtoa_r+0x490>
 8015d76:	4621      	mov	r1, r4
 8015d78:	465b      	mov	r3, fp
 8015d7a:	2205      	movs	r2, #5
 8015d7c:	4648      	mov	r0, r9
 8015d7e:	f000 fa95 	bl	80162ac <__multadd>
 8015d82:	4601      	mov	r1, r0
 8015d84:	4604      	mov	r4, r0
 8015d86:	9802      	ldr	r0, [sp, #8]
 8015d88:	f000 fcea 	bl	8016760 <__mcmp>
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	f77f ada3 	ble.w	80158d8 <_dtoa_r+0x490>
 8015d92:	4656      	mov	r6, sl
 8015d94:	2331      	movs	r3, #49	@ 0x31
 8015d96:	f806 3b01 	strb.w	r3, [r6], #1
 8015d9a:	f108 0801 	add.w	r8, r8, #1
 8015d9e:	e59f      	b.n	80158e0 <_dtoa_r+0x498>
 8015da0:	9c03      	ldr	r4, [sp, #12]
 8015da2:	46b8      	mov	r8, r7
 8015da4:	4625      	mov	r5, r4
 8015da6:	e7f4      	b.n	8015d92 <_dtoa_r+0x94a>
 8015da8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	f000 8101 	beq.w	8015fb6 <_dtoa_r+0xb6e>
 8015db4:	2e00      	cmp	r6, #0
 8015db6:	dd05      	ble.n	8015dc4 <_dtoa_r+0x97c>
 8015db8:	4629      	mov	r1, r5
 8015dba:	4632      	mov	r2, r6
 8015dbc:	4648      	mov	r0, r9
 8015dbe:	f000 fc63 	bl	8016688 <__lshift>
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	9b08      	ldr	r3, [sp, #32]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d05c      	beq.n	8015e84 <_dtoa_r+0xa3c>
 8015dca:	6869      	ldr	r1, [r5, #4]
 8015dcc:	4648      	mov	r0, r9
 8015dce:	f000 fa0b 	bl	80161e8 <_Balloc>
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	b928      	cbnz	r0, 8015de2 <_dtoa_r+0x99a>
 8015dd6:	4b82      	ldr	r3, [pc, #520]	@ (8015fe0 <_dtoa_r+0xb98>)
 8015dd8:	4602      	mov	r2, r0
 8015dda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015dde:	f7ff bb4a 	b.w	8015476 <_dtoa_r+0x2e>
 8015de2:	692a      	ldr	r2, [r5, #16]
 8015de4:	3202      	adds	r2, #2
 8015de6:	0092      	lsls	r2, r2, #2
 8015de8:	f105 010c 	add.w	r1, r5, #12
 8015dec:	300c      	adds	r0, #12
 8015dee:	f7ff fa8c 	bl	801530a <memcpy>
 8015df2:	2201      	movs	r2, #1
 8015df4:	4631      	mov	r1, r6
 8015df6:	4648      	mov	r0, r9
 8015df8:	f000 fc46 	bl	8016688 <__lshift>
 8015dfc:	f10a 0301 	add.w	r3, sl, #1
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	eb0a 030b 	add.w	r3, sl, fp
 8015e06:	9308      	str	r3, [sp, #32]
 8015e08:	9b04      	ldr	r3, [sp, #16]
 8015e0a:	f003 0301 	and.w	r3, r3, #1
 8015e0e:	462f      	mov	r7, r5
 8015e10:	9306      	str	r3, [sp, #24]
 8015e12:	4605      	mov	r5, r0
 8015e14:	9b00      	ldr	r3, [sp, #0]
 8015e16:	9802      	ldr	r0, [sp, #8]
 8015e18:	4621      	mov	r1, r4
 8015e1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8015e1e:	f7ff fa89 	bl	8015334 <quorem>
 8015e22:	4603      	mov	r3, r0
 8015e24:	3330      	adds	r3, #48	@ 0x30
 8015e26:	9003      	str	r0, [sp, #12]
 8015e28:	4639      	mov	r1, r7
 8015e2a:	9802      	ldr	r0, [sp, #8]
 8015e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e2e:	f000 fc97 	bl	8016760 <__mcmp>
 8015e32:	462a      	mov	r2, r5
 8015e34:	9004      	str	r0, [sp, #16]
 8015e36:	4621      	mov	r1, r4
 8015e38:	4648      	mov	r0, r9
 8015e3a:	f000 fcad 	bl	8016798 <__mdiff>
 8015e3e:	68c2      	ldr	r2, [r0, #12]
 8015e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e42:	4606      	mov	r6, r0
 8015e44:	bb02      	cbnz	r2, 8015e88 <_dtoa_r+0xa40>
 8015e46:	4601      	mov	r1, r0
 8015e48:	9802      	ldr	r0, [sp, #8]
 8015e4a:	f000 fc89 	bl	8016760 <__mcmp>
 8015e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e50:	4602      	mov	r2, r0
 8015e52:	4631      	mov	r1, r6
 8015e54:	4648      	mov	r0, r9
 8015e56:	920c      	str	r2, [sp, #48]	@ 0x30
 8015e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e5a:	f000 fa05 	bl	8016268 <_Bfree>
 8015e5e:	9b07      	ldr	r3, [sp, #28]
 8015e60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015e62:	9e00      	ldr	r6, [sp, #0]
 8015e64:	ea42 0103 	orr.w	r1, r2, r3
 8015e68:	9b06      	ldr	r3, [sp, #24]
 8015e6a:	4319      	orrs	r1, r3
 8015e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e6e:	d10d      	bne.n	8015e8c <_dtoa_r+0xa44>
 8015e70:	2b39      	cmp	r3, #57	@ 0x39
 8015e72:	d027      	beq.n	8015ec4 <_dtoa_r+0xa7c>
 8015e74:	9a04      	ldr	r2, [sp, #16]
 8015e76:	2a00      	cmp	r2, #0
 8015e78:	dd01      	ble.n	8015e7e <_dtoa_r+0xa36>
 8015e7a:	9b03      	ldr	r3, [sp, #12]
 8015e7c:	3331      	adds	r3, #49	@ 0x31
 8015e7e:	f88b 3000 	strb.w	r3, [fp]
 8015e82:	e52e      	b.n	80158e2 <_dtoa_r+0x49a>
 8015e84:	4628      	mov	r0, r5
 8015e86:	e7b9      	b.n	8015dfc <_dtoa_r+0x9b4>
 8015e88:	2201      	movs	r2, #1
 8015e8a:	e7e2      	b.n	8015e52 <_dtoa_r+0xa0a>
 8015e8c:	9904      	ldr	r1, [sp, #16]
 8015e8e:	2900      	cmp	r1, #0
 8015e90:	db04      	blt.n	8015e9c <_dtoa_r+0xa54>
 8015e92:	9807      	ldr	r0, [sp, #28]
 8015e94:	4301      	orrs	r1, r0
 8015e96:	9806      	ldr	r0, [sp, #24]
 8015e98:	4301      	orrs	r1, r0
 8015e9a:	d120      	bne.n	8015ede <_dtoa_r+0xa96>
 8015e9c:	2a00      	cmp	r2, #0
 8015e9e:	ddee      	ble.n	8015e7e <_dtoa_r+0xa36>
 8015ea0:	9902      	ldr	r1, [sp, #8]
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	2201      	movs	r2, #1
 8015ea6:	4648      	mov	r0, r9
 8015ea8:	f000 fbee 	bl	8016688 <__lshift>
 8015eac:	4621      	mov	r1, r4
 8015eae:	9002      	str	r0, [sp, #8]
 8015eb0:	f000 fc56 	bl	8016760 <__mcmp>
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	9b00      	ldr	r3, [sp, #0]
 8015eb8:	dc02      	bgt.n	8015ec0 <_dtoa_r+0xa78>
 8015eba:	d1e0      	bne.n	8015e7e <_dtoa_r+0xa36>
 8015ebc:	07da      	lsls	r2, r3, #31
 8015ebe:	d5de      	bpl.n	8015e7e <_dtoa_r+0xa36>
 8015ec0:	2b39      	cmp	r3, #57	@ 0x39
 8015ec2:	d1da      	bne.n	8015e7a <_dtoa_r+0xa32>
 8015ec4:	2339      	movs	r3, #57	@ 0x39
 8015ec6:	f88b 3000 	strb.w	r3, [fp]
 8015eca:	4633      	mov	r3, r6
 8015ecc:	461e      	mov	r6, r3
 8015ece:	3b01      	subs	r3, #1
 8015ed0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015ed4:	2a39      	cmp	r2, #57	@ 0x39
 8015ed6:	d04e      	beq.n	8015f76 <_dtoa_r+0xb2e>
 8015ed8:	3201      	adds	r2, #1
 8015eda:	701a      	strb	r2, [r3, #0]
 8015edc:	e501      	b.n	80158e2 <_dtoa_r+0x49a>
 8015ede:	2a00      	cmp	r2, #0
 8015ee0:	dd03      	ble.n	8015eea <_dtoa_r+0xaa2>
 8015ee2:	2b39      	cmp	r3, #57	@ 0x39
 8015ee4:	d0ee      	beq.n	8015ec4 <_dtoa_r+0xa7c>
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	e7c9      	b.n	8015e7e <_dtoa_r+0xa36>
 8015eea:	9a00      	ldr	r2, [sp, #0]
 8015eec:	9908      	ldr	r1, [sp, #32]
 8015eee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015ef2:	428a      	cmp	r2, r1
 8015ef4:	d028      	beq.n	8015f48 <_dtoa_r+0xb00>
 8015ef6:	9902      	ldr	r1, [sp, #8]
 8015ef8:	2300      	movs	r3, #0
 8015efa:	220a      	movs	r2, #10
 8015efc:	4648      	mov	r0, r9
 8015efe:	f000 f9d5 	bl	80162ac <__multadd>
 8015f02:	42af      	cmp	r7, r5
 8015f04:	9002      	str	r0, [sp, #8]
 8015f06:	f04f 0300 	mov.w	r3, #0
 8015f0a:	f04f 020a 	mov.w	r2, #10
 8015f0e:	4639      	mov	r1, r7
 8015f10:	4648      	mov	r0, r9
 8015f12:	d107      	bne.n	8015f24 <_dtoa_r+0xadc>
 8015f14:	f000 f9ca 	bl	80162ac <__multadd>
 8015f18:	4607      	mov	r7, r0
 8015f1a:	4605      	mov	r5, r0
 8015f1c:	9b00      	ldr	r3, [sp, #0]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	e777      	b.n	8015e14 <_dtoa_r+0x9cc>
 8015f24:	f000 f9c2 	bl	80162ac <__multadd>
 8015f28:	4629      	mov	r1, r5
 8015f2a:	4607      	mov	r7, r0
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	220a      	movs	r2, #10
 8015f30:	4648      	mov	r0, r9
 8015f32:	f000 f9bb 	bl	80162ac <__multadd>
 8015f36:	4605      	mov	r5, r0
 8015f38:	e7f0      	b.n	8015f1c <_dtoa_r+0xad4>
 8015f3a:	f1bb 0f00 	cmp.w	fp, #0
 8015f3e:	bfcc      	ite	gt
 8015f40:	465e      	movgt	r6, fp
 8015f42:	2601      	movle	r6, #1
 8015f44:	4456      	add	r6, sl
 8015f46:	2700      	movs	r7, #0
 8015f48:	9902      	ldr	r1, [sp, #8]
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	4648      	mov	r0, r9
 8015f50:	f000 fb9a 	bl	8016688 <__lshift>
 8015f54:	4621      	mov	r1, r4
 8015f56:	9002      	str	r0, [sp, #8]
 8015f58:	f000 fc02 	bl	8016760 <__mcmp>
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	dcb4      	bgt.n	8015eca <_dtoa_r+0xa82>
 8015f60:	d102      	bne.n	8015f68 <_dtoa_r+0xb20>
 8015f62:	9b00      	ldr	r3, [sp, #0]
 8015f64:	07db      	lsls	r3, r3, #31
 8015f66:	d4b0      	bmi.n	8015eca <_dtoa_r+0xa82>
 8015f68:	4633      	mov	r3, r6
 8015f6a:	461e      	mov	r6, r3
 8015f6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f70:	2a30      	cmp	r2, #48	@ 0x30
 8015f72:	d0fa      	beq.n	8015f6a <_dtoa_r+0xb22>
 8015f74:	e4b5      	b.n	80158e2 <_dtoa_r+0x49a>
 8015f76:	459a      	cmp	sl, r3
 8015f78:	d1a8      	bne.n	8015ecc <_dtoa_r+0xa84>
 8015f7a:	2331      	movs	r3, #49	@ 0x31
 8015f7c:	f108 0801 	add.w	r8, r8, #1
 8015f80:	f88a 3000 	strb.w	r3, [sl]
 8015f84:	e4ad      	b.n	80158e2 <_dtoa_r+0x49a>
 8015f86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015f88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015fe4 <_dtoa_r+0xb9c>
 8015f8c:	b11b      	cbz	r3, 8015f96 <_dtoa_r+0xb4e>
 8015f8e:	f10a 0308 	add.w	r3, sl, #8
 8015f92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015f94:	6013      	str	r3, [r2, #0]
 8015f96:	4650      	mov	r0, sl
 8015f98:	b017      	add	sp, #92	@ 0x5c
 8015f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f9e:	9b07      	ldr	r3, [sp, #28]
 8015fa0:	2b01      	cmp	r3, #1
 8015fa2:	f77f ae2e 	ble.w	8015c02 <_dtoa_r+0x7ba>
 8015fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fa8:	9308      	str	r3, [sp, #32]
 8015faa:	2001      	movs	r0, #1
 8015fac:	e64d      	b.n	8015c4a <_dtoa_r+0x802>
 8015fae:	f1bb 0f00 	cmp.w	fp, #0
 8015fb2:	f77f aed9 	ble.w	8015d68 <_dtoa_r+0x920>
 8015fb6:	4656      	mov	r6, sl
 8015fb8:	9802      	ldr	r0, [sp, #8]
 8015fba:	4621      	mov	r1, r4
 8015fbc:	f7ff f9ba 	bl	8015334 <quorem>
 8015fc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8015fc8:	eba6 020a 	sub.w	r2, r6, sl
 8015fcc:	4593      	cmp	fp, r2
 8015fce:	ddb4      	ble.n	8015f3a <_dtoa_r+0xaf2>
 8015fd0:	9902      	ldr	r1, [sp, #8]
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	220a      	movs	r2, #10
 8015fd6:	4648      	mov	r0, r9
 8015fd8:	f000 f968 	bl	80162ac <__multadd>
 8015fdc:	9002      	str	r0, [sp, #8]
 8015fde:	e7eb      	b.n	8015fb8 <_dtoa_r+0xb70>
 8015fe0:	0801b495 	.word	0x0801b495
 8015fe4:	0801b419 	.word	0x0801b419

08015fe8 <_free_r>:
 8015fe8:	b538      	push	{r3, r4, r5, lr}
 8015fea:	4605      	mov	r5, r0
 8015fec:	2900      	cmp	r1, #0
 8015fee:	d041      	beq.n	8016074 <_free_r+0x8c>
 8015ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ff4:	1f0c      	subs	r4, r1, #4
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	bfb8      	it	lt
 8015ffa:	18e4      	addlt	r4, r4, r3
 8015ffc:	f000 f8e8 	bl	80161d0 <__malloc_lock>
 8016000:	4a1d      	ldr	r2, [pc, #116]	@ (8016078 <_free_r+0x90>)
 8016002:	6813      	ldr	r3, [r2, #0]
 8016004:	b933      	cbnz	r3, 8016014 <_free_r+0x2c>
 8016006:	6063      	str	r3, [r4, #4]
 8016008:	6014      	str	r4, [r2, #0]
 801600a:	4628      	mov	r0, r5
 801600c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016010:	f000 b8e4 	b.w	80161dc <__malloc_unlock>
 8016014:	42a3      	cmp	r3, r4
 8016016:	d908      	bls.n	801602a <_free_r+0x42>
 8016018:	6820      	ldr	r0, [r4, #0]
 801601a:	1821      	adds	r1, r4, r0
 801601c:	428b      	cmp	r3, r1
 801601e:	bf01      	itttt	eq
 8016020:	6819      	ldreq	r1, [r3, #0]
 8016022:	685b      	ldreq	r3, [r3, #4]
 8016024:	1809      	addeq	r1, r1, r0
 8016026:	6021      	streq	r1, [r4, #0]
 8016028:	e7ed      	b.n	8016006 <_free_r+0x1e>
 801602a:	461a      	mov	r2, r3
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	b10b      	cbz	r3, 8016034 <_free_r+0x4c>
 8016030:	42a3      	cmp	r3, r4
 8016032:	d9fa      	bls.n	801602a <_free_r+0x42>
 8016034:	6811      	ldr	r1, [r2, #0]
 8016036:	1850      	adds	r0, r2, r1
 8016038:	42a0      	cmp	r0, r4
 801603a:	d10b      	bne.n	8016054 <_free_r+0x6c>
 801603c:	6820      	ldr	r0, [r4, #0]
 801603e:	4401      	add	r1, r0
 8016040:	1850      	adds	r0, r2, r1
 8016042:	4283      	cmp	r3, r0
 8016044:	6011      	str	r1, [r2, #0]
 8016046:	d1e0      	bne.n	801600a <_free_r+0x22>
 8016048:	6818      	ldr	r0, [r3, #0]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	6053      	str	r3, [r2, #4]
 801604e:	4408      	add	r0, r1
 8016050:	6010      	str	r0, [r2, #0]
 8016052:	e7da      	b.n	801600a <_free_r+0x22>
 8016054:	d902      	bls.n	801605c <_free_r+0x74>
 8016056:	230c      	movs	r3, #12
 8016058:	602b      	str	r3, [r5, #0]
 801605a:	e7d6      	b.n	801600a <_free_r+0x22>
 801605c:	6820      	ldr	r0, [r4, #0]
 801605e:	1821      	adds	r1, r4, r0
 8016060:	428b      	cmp	r3, r1
 8016062:	bf04      	itt	eq
 8016064:	6819      	ldreq	r1, [r3, #0]
 8016066:	685b      	ldreq	r3, [r3, #4]
 8016068:	6063      	str	r3, [r4, #4]
 801606a:	bf04      	itt	eq
 801606c:	1809      	addeq	r1, r1, r0
 801606e:	6021      	streq	r1, [r4, #0]
 8016070:	6054      	str	r4, [r2, #4]
 8016072:	e7ca      	b.n	801600a <_free_r+0x22>
 8016074:	bd38      	pop	{r3, r4, r5, pc}
 8016076:	bf00      	nop
 8016078:	200049c4 	.word	0x200049c4

0801607c <malloc>:
 801607c:	4b02      	ldr	r3, [pc, #8]	@ (8016088 <malloc+0xc>)
 801607e:	4601      	mov	r1, r0
 8016080:	6818      	ldr	r0, [r3, #0]
 8016082:	f000 b825 	b.w	80160d0 <_malloc_r>
 8016086:	bf00      	nop
 8016088:	20000054 	.word	0x20000054

0801608c <sbrk_aligned>:
 801608c:	b570      	push	{r4, r5, r6, lr}
 801608e:	4e0f      	ldr	r6, [pc, #60]	@ (80160cc <sbrk_aligned+0x40>)
 8016090:	460c      	mov	r4, r1
 8016092:	6831      	ldr	r1, [r6, #0]
 8016094:	4605      	mov	r5, r0
 8016096:	b911      	cbnz	r1, 801609e <sbrk_aligned+0x12>
 8016098:	f001 fe88 	bl	8017dac <_sbrk_r>
 801609c:	6030      	str	r0, [r6, #0]
 801609e:	4621      	mov	r1, r4
 80160a0:	4628      	mov	r0, r5
 80160a2:	f001 fe83 	bl	8017dac <_sbrk_r>
 80160a6:	1c43      	adds	r3, r0, #1
 80160a8:	d103      	bne.n	80160b2 <sbrk_aligned+0x26>
 80160aa:	f04f 34ff 	mov.w	r4, #4294967295
 80160ae:	4620      	mov	r0, r4
 80160b0:	bd70      	pop	{r4, r5, r6, pc}
 80160b2:	1cc4      	adds	r4, r0, #3
 80160b4:	f024 0403 	bic.w	r4, r4, #3
 80160b8:	42a0      	cmp	r0, r4
 80160ba:	d0f8      	beq.n	80160ae <sbrk_aligned+0x22>
 80160bc:	1a21      	subs	r1, r4, r0
 80160be:	4628      	mov	r0, r5
 80160c0:	f001 fe74 	bl	8017dac <_sbrk_r>
 80160c4:	3001      	adds	r0, #1
 80160c6:	d1f2      	bne.n	80160ae <sbrk_aligned+0x22>
 80160c8:	e7ef      	b.n	80160aa <sbrk_aligned+0x1e>
 80160ca:	bf00      	nop
 80160cc:	200049c0 	.word	0x200049c0

080160d0 <_malloc_r>:
 80160d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160d4:	1ccd      	adds	r5, r1, #3
 80160d6:	f025 0503 	bic.w	r5, r5, #3
 80160da:	3508      	adds	r5, #8
 80160dc:	2d0c      	cmp	r5, #12
 80160de:	bf38      	it	cc
 80160e0:	250c      	movcc	r5, #12
 80160e2:	2d00      	cmp	r5, #0
 80160e4:	4606      	mov	r6, r0
 80160e6:	db01      	blt.n	80160ec <_malloc_r+0x1c>
 80160e8:	42a9      	cmp	r1, r5
 80160ea:	d904      	bls.n	80160f6 <_malloc_r+0x26>
 80160ec:	230c      	movs	r3, #12
 80160ee:	6033      	str	r3, [r6, #0]
 80160f0:	2000      	movs	r0, #0
 80160f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80161cc <_malloc_r+0xfc>
 80160fa:	f000 f869 	bl	80161d0 <__malloc_lock>
 80160fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016102:	461c      	mov	r4, r3
 8016104:	bb44      	cbnz	r4, 8016158 <_malloc_r+0x88>
 8016106:	4629      	mov	r1, r5
 8016108:	4630      	mov	r0, r6
 801610a:	f7ff ffbf 	bl	801608c <sbrk_aligned>
 801610e:	1c43      	adds	r3, r0, #1
 8016110:	4604      	mov	r4, r0
 8016112:	d158      	bne.n	80161c6 <_malloc_r+0xf6>
 8016114:	f8d8 4000 	ldr.w	r4, [r8]
 8016118:	4627      	mov	r7, r4
 801611a:	2f00      	cmp	r7, #0
 801611c:	d143      	bne.n	80161a6 <_malloc_r+0xd6>
 801611e:	2c00      	cmp	r4, #0
 8016120:	d04b      	beq.n	80161ba <_malloc_r+0xea>
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	4639      	mov	r1, r7
 8016126:	4630      	mov	r0, r6
 8016128:	eb04 0903 	add.w	r9, r4, r3
 801612c:	f001 fe3e 	bl	8017dac <_sbrk_r>
 8016130:	4581      	cmp	r9, r0
 8016132:	d142      	bne.n	80161ba <_malloc_r+0xea>
 8016134:	6821      	ldr	r1, [r4, #0]
 8016136:	1a6d      	subs	r5, r5, r1
 8016138:	4629      	mov	r1, r5
 801613a:	4630      	mov	r0, r6
 801613c:	f7ff ffa6 	bl	801608c <sbrk_aligned>
 8016140:	3001      	adds	r0, #1
 8016142:	d03a      	beq.n	80161ba <_malloc_r+0xea>
 8016144:	6823      	ldr	r3, [r4, #0]
 8016146:	442b      	add	r3, r5
 8016148:	6023      	str	r3, [r4, #0]
 801614a:	f8d8 3000 	ldr.w	r3, [r8]
 801614e:	685a      	ldr	r2, [r3, #4]
 8016150:	bb62      	cbnz	r2, 80161ac <_malloc_r+0xdc>
 8016152:	f8c8 7000 	str.w	r7, [r8]
 8016156:	e00f      	b.n	8016178 <_malloc_r+0xa8>
 8016158:	6822      	ldr	r2, [r4, #0]
 801615a:	1b52      	subs	r2, r2, r5
 801615c:	d420      	bmi.n	80161a0 <_malloc_r+0xd0>
 801615e:	2a0b      	cmp	r2, #11
 8016160:	d917      	bls.n	8016192 <_malloc_r+0xc2>
 8016162:	1961      	adds	r1, r4, r5
 8016164:	42a3      	cmp	r3, r4
 8016166:	6025      	str	r5, [r4, #0]
 8016168:	bf18      	it	ne
 801616a:	6059      	strne	r1, [r3, #4]
 801616c:	6863      	ldr	r3, [r4, #4]
 801616e:	bf08      	it	eq
 8016170:	f8c8 1000 	streq.w	r1, [r8]
 8016174:	5162      	str	r2, [r4, r5]
 8016176:	604b      	str	r3, [r1, #4]
 8016178:	4630      	mov	r0, r6
 801617a:	f000 f82f 	bl	80161dc <__malloc_unlock>
 801617e:	f104 000b 	add.w	r0, r4, #11
 8016182:	1d23      	adds	r3, r4, #4
 8016184:	f020 0007 	bic.w	r0, r0, #7
 8016188:	1ac2      	subs	r2, r0, r3
 801618a:	bf1c      	itt	ne
 801618c:	1a1b      	subne	r3, r3, r0
 801618e:	50a3      	strne	r3, [r4, r2]
 8016190:	e7af      	b.n	80160f2 <_malloc_r+0x22>
 8016192:	6862      	ldr	r2, [r4, #4]
 8016194:	42a3      	cmp	r3, r4
 8016196:	bf0c      	ite	eq
 8016198:	f8c8 2000 	streq.w	r2, [r8]
 801619c:	605a      	strne	r2, [r3, #4]
 801619e:	e7eb      	b.n	8016178 <_malloc_r+0xa8>
 80161a0:	4623      	mov	r3, r4
 80161a2:	6864      	ldr	r4, [r4, #4]
 80161a4:	e7ae      	b.n	8016104 <_malloc_r+0x34>
 80161a6:	463c      	mov	r4, r7
 80161a8:	687f      	ldr	r7, [r7, #4]
 80161aa:	e7b6      	b.n	801611a <_malloc_r+0x4a>
 80161ac:	461a      	mov	r2, r3
 80161ae:	685b      	ldr	r3, [r3, #4]
 80161b0:	42a3      	cmp	r3, r4
 80161b2:	d1fb      	bne.n	80161ac <_malloc_r+0xdc>
 80161b4:	2300      	movs	r3, #0
 80161b6:	6053      	str	r3, [r2, #4]
 80161b8:	e7de      	b.n	8016178 <_malloc_r+0xa8>
 80161ba:	230c      	movs	r3, #12
 80161bc:	6033      	str	r3, [r6, #0]
 80161be:	4630      	mov	r0, r6
 80161c0:	f000 f80c 	bl	80161dc <__malloc_unlock>
 80161c4:	e794      	b.n	80160f0 <_malloc_r+0x20>
 80161c6:	6005      	str	r5, [r0, #0]
 80161c8:	e7d6      	b.n	8016178 <_malloc_r+0xa8>
 80161ca:	bf00      	nop
 80161cc:	200049c4 	.word	0x200049c4

080161d0 <__malloc_lock>:
 80161d0:	4801      	ldr	r0, [pc, #4]	@ (80161d8 <__malloc_lock+0x8>)
 80161d2:	f7ff b898 	b.w	8015306 <__retarget_lock_acquire_recursive>
 80161d6:	bf00      	nop
 80161d8:	200049bc 	.word	0x200049bc

080161dc <__malloc_unlock>:
 80161dc:	4801      	ldr	r0, [pc, #4]	@ (80161e4 <__malloc_unlock+0x8>)
 80161de:	f7ff b893 	b.w	8015308 <__retarget_lock_release_recursive>
 80161e2:	bf00      	nop
 80161e4:	200049bc 	.word	0x200049bc

080161e8 <_Balloc>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	69c6      	ldr	r6, [r0, #28]
 80161ec:	4604      	mov	r4, r0
 80161ee:	460d      	mov	r5, r1
 80161f0:	b976      	cbnz	r6, 8016210 <_Balloc+0x28>
 80161f2:	2010      	movs	r0, #16
 80161f4:	f7ff ff42 	bl	801607c <malloc>
 80161f8:	4602      	mov	r2, r0
 80161fa:	61e0      	str	r0, [r4, #28]
 80161fc:	b920      	cbnz	r0, 8016208 <_Balloc+0x20>
 80161fe:	4b18      	ldr	r3, [pc, #96]	@ (8016260 <_Balloc+0x78>)
 8016200:	4818      	ldr	r0, [pc, #96]	@ (8016264 <_Balloc+0x7c>)
 8016202:	216b      	movs	r1, #107	@ 0x6b
 8016204:	f001 fdec 	bl	8017de0 <__assert_func>
 8016208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801620c:	6006      	str	r6, [r0, #0]
 801620e:	60c6      	str	r6, [r0, #12]
 8016210:	69e6      	ldr	r6, [r4, #28]
 8016212:	68f3      	ldr	r3, [r6, #12]
 8016214:	b183      	cbz	r3, 8016238 <_Balloc+0x50>
 8016216:	69e3      	ldr	r3, [r4, #28]
 8016218:	68db      	ldr	r3, [r3, #12]
 801621a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801621e:	b9b8      	cbnz	r0, 8016250 <_Balloc+0x68>
 8016220:	2101      	movs	r1, #1
 8016222:	fa01 f605 	lsl.w	r6, r1, r5
 8016226:	1d72      	adds	r2, r6, #5
 8016228:	0092      	lsls	r2, r2, #2
 801622a:	4620      	mov	r0, r4
 801622c:	f001 fdf6 	bl	8017e1c <_calloc_r>
 8016230:	b160      	cbz	r0, 801624c <_Balloc+0x64>
 8016232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016236:	e00e      	b.n	8016256 <_Balloc+0x6e>
 8016238:	2221      	movs	r2, #33	@ 0x21
 801623a:	2104      	movs	r1, #4
 801623c:	4620      	mov	r0, r4
 801623e:	f001 fded 	bl	8017e1c <_calloc_r>
 8016242:	69e3      	ldr	r3, [r4, #28]
 8016244:	60f0      	str	r0, [r6, #12]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d1e4      	bne.n	8016216 <_Balloc+0x2e>
 801624c:	2000      	movs	r0, #0
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	6802      	ldr	r2, [r0, #0]
 8016252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016256:	2300      	movs	r3, #0
 8016258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801625c:	e7f7      	b.n	801624e <_Balloc+0x66>
 801625e:	bf00      	nop
 8016260:	0801b426 	.word	0x0801b426
 8016264:	0801b4a6 	.word	0x0801b4a6

08016268 <_Bfree>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	69c6      	ldr	r6, [r0, #28]
 801626c:	4605      	mov	r5, r0
 801626e:	460c      	mov	r4, r1
 8016270:	b976      	cbnz	r6, 8016290 <_Bfree+0x28>
 8016272:	2010      	movs	r0, #16
 8016274:	f7ff ff02 	bl	801607c <malloc>
 8016278:	4602      	mov	r2, r0
 801627a:	61e8      	str	r0, [r5, #28]
 801627c:	b920      	cbnz	r0, 8016288 <_Bfree+0x20>
 801627e:	4b09      	ldr	r3, [pc, #36]	@ (80162a4 <_Bfree+0x3c>)
 8016280:	4809      	ldr	r0, [pc, #36]	@ (80162a8 <_Bfree+0x40>)
 8016282:	218f      	movs	r1, #143	@ 0x8f
 8016284:	f001 fdac 	bl	8017de0 <__assert_func>
 8016288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801628c:	6006      	str	r6, [r0, #0]
 801628e:	60c6      	str	r6, [r0, #12]
 8016290:	b13c      	cbz	r4, 80162a2 <_Bfree+0x3a>
 8016292:	69eb      	ldr	r3, [r5, #28]
 8016294:	6862      	ldr	r2, [r4, #4]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801629c:	6021      	str	r1, [r4, #0]
 801629e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162a2:	bd70      	pop	{r4, r5, r6, pc}
 80162a4:	0801b426 	.word	0x0801b426
 80162a8:	0801b4a6 	.word	0x0801b4a6

080162ac <__multadd>:
 80162ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b0:	690d      	ldr	r5, [r1, #16]
 80162b2:	4607      	mov	r7, r0
 80162b4:	460c      	mov	r4, r1
 80162b6:	461e      	mov	r6, r3
 80162b8:	f101 0c14 	add.w	ip, r1, #20
 80162bc:	2000      	movs	r0, #0
 80162be:	f8dc 3000 	ldr.w	r3, [ip]
 80162c2:	b299      	uxth	r1, r3
 80162c4:	fb02 6101 	mla	r1, r2, r1, r6
 80162c8:	0c1e      	lsrs	r6, r3, #16
 80162ca:	0c0b      	lsrs	r3, r1, #16
 80162cc:	fb02 3306 	mla	r3, r2, r6, r3
 80162d0:	b289      	uxth	r1, r1
 80162d2:	3001      	adds	r0, #1
 80162d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80162d8:	4285      	cmp	r5, r0
 80162da:	f84c 1b04 	str.w	r1, [ip], #4
 80162de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80162e2:	dcec      	bgt.n	80162be <__multadd+0x12>
 80162e4:	b30e      	cbz	r6, 801632a <__multadd+0x7e>
 80162e6:	68a3      	ldr	r3, [r4, #8]
 80162e8:	42ab      	cmp	r3, r5
 80162ea:	dc19      	bgt.n	8016320 <__multadd+0x74>
 80162ec:	6861      	ldr	r1, [r4, #4]
 80162ee:	4638      	mov	r0, r7
 80162f0:	3101      	adds	r1, #1
 80162f2:	f7ff ff79 	bl	80161e8 <_Balloc>
 80162f6:	4680      	mov	r8, r0
 80162f8:	b928      	cbnz	r0, 8016306 <__multadd+0x5a>
 80162fa:	4602      	mov	r2, r0
 80162fc:	4b0c      	ldr	r3, [pc, #48]	@ (8016330 <__multadd+0x84>)
 80162fe:	480d      	ldr	r0, [pc, #52]	@ (8016334 <__multadd+0x88>)
 8016300:	21ba      	movs	r1, #186	@ 0xba
 8016302:	f001 fd6d 	bl	8017de0 <__assert_func>
 8016306:	6922      	ldr	r2, [r4, #16]
 8016308:	3202      	adds	r2, #2
 801630a:	f104 010c 	add.w	r1, r4, #12
 801630e:	0092      	lsls	r2, r2, #2
 8016310:	300c      	adds	r0, #12
 8016312:	f7fe fffa 	bl	801530a <memcpy>
 8016316:	4621      	mov	r1, r4
 8016318:	4638      	mov	r0, r7
 801631a:	f7ff ffa5 	bl	8016268 <_Bfree>
 801631e:	4644      	mov	r4, r8
 8016320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016324:	3501      	adds	r5, #1
 8016326:	615e      	str	r6, [r3, #20]
 8016328:	6125      	str	r5, [r4, #16]
 801632a:	4620      	mov	r0, r4
 801632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016330:	0801b495 	.word	0x0801b495
 8016334:	0801b4a6 	.word	0x0801b4a6

08016338 <__s2b>:
 8016338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801633c:	460c      	mov	r4, r1
 801633e:	4615      	mov	r5, r2
 8016340:	461f      	mov	r7, r3
 8016342:	2209      	movs	r2, #9
 8016344:	3308      	adds	r3, #8
 8016346:	4606      	mov	r6, r0
 8016348:	fb93 f3f2 	sdiv	r3, r3, r2
 801634c:	2100      	movs	r1, #0
 801634e:	2201      	movs	r2, #1
 8016350:	429a      	cmp	r2, r3
 8016352:	db09      	blt.n	8016368 <__s2b+0x30>
 8016354:	4630      	mov	r0, r6
 8016356:	f7ff ff47 	bl	80161e8 <_Balloc>
 801635a:	b940      	cbnz	r0, 801636e <__s2b+0x36>
 801635c:	4602      	mov	r2, r0
 801635e:	4b19      	ldr	r3, [pc, #100]	@ (80163c4 <__s2b+0x8c>)
 8016360:	4819      	ldr	r0, [pc, #100]	@ (80163c8 <__s2b+0x90>)
 8016362:	21d3      	movs	r1, #211	@ 0xd3
 8016364:	f001 fd3c 	bl	8017de0 <__assert_func>
 8016368:	0052      	lsls	r2, r2, #1
 801636a:	3101      	adds	r1, #1
 801636c:	e7f0      	b.n	8016350 <__s2b+0x18>
 801636e:	9b08      	ldr	r3, [sp, #32]
 8016370:	6143      	str	r3, [r0, #20]
 8016372:	2d09      	cmp	r5, #9
 8016374:	f04f 0301 	mov.w	r3, #1
 8016378:	6103      	str	r3, [r0, #16]
 801637a:	dd16      	ble.n	80163aa <__s2b+0x72>
 801637c:	f104 0909 	add.w	r9, r4, #9
 8016380:	46c8      	mov	r8, r9
 8016382:	442c      	add	r4, r5
 8016384:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016388:	4601      	mov	r1, r0
 801638a:	3b30      	subs	r3, #48	@ 0x30
 801638c:	220a      	movs	r2, #10
 801638e:	4630      	mov	r0, r6
 8016390:	f7ff ff8c 	bl	80162ac <__multadd>
 8016394:	45a0      	cmp	r8, r4
 8016396:	d1f5      	bne.n	8016384 <__s2b+0x4c>
 8016398:	f1a5 0408 	sub.w	r4, r5, #8
 801639c:	444c      	add	r4, r9
 801639e:	1b2d      	subs	r5, r5, r4
 80163a0:	1963      	adds	r3, r4, r5
 80163a2:	42bb      	cmp	r3, r7
 80163a4:	db04      	blt.n	80163b0 <__s2b+0x78>
 80163a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163aa:	340a      	adds	r4, #10
 80163ac:	2509      	movs	r5, #9
 80163ae:	e7f6      	b.n	801639e <__s2b+0x66>
 80163b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163b4:	4601      	mov	r1, r0
 80163b6:	3b30      	subs	r3, #48	@ 0x30
 80163b8:	220a      	movs	r2, #10
 80163ba:	4630      	mov	r0, r6
 80163bc:	f7ff ff76 	bl	80162ac <__multadd>
 80163c0:	e7ee      	b.n	80163a0 <__s2b+0x68>
 80163c2:	bf00      	nop
 80163c4:	0801b495 	.word	0x0801b495
 80163c8:	0801b4a6 	.word	0x0801b4a6

080163cc <__hi0bits>:
 80163cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80163d0:	4603      	mov	r3, r0
 80163d2:	bf36      	itet	cc
 80163d4:	0403      	lslcc	r3, r0, #16
 80163d6:	2000      	movcs	r0, #0
 80163d8:	2010      	movcc	r0, #16
 80163da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80163de:	bf3c      	itt	cc
 80163e0:	021b      	lslcc	r3, r3, #8
 80163e2:	3008      	addcc	r0, #8
 80163e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80163e8:	bf3c      	itt	cc
 80163ea:	011b      	lslcc	r3, r3, #4
 80163ec:	3004      	addcc	r0, #4
 80163ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80163f2:	bf3c      	itt	cc
 80163f4:	009b      	lslcc	r3, r3, #2
 80163f6:	3002      	addcc	r0, #2
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	db05      	blt.n	8016408 <__hi0bits+0x3c>
 80163fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016400:	f100 0001 	add.w	r0, r0, #1
 8016404:	bf08      	it	eq
 8016406:	2020      	moveq	r0, #32
 8016408:	4770      	bx	lr

0801640a <__lo0bits>:
 801640a:	6803      	ldr	r3, [r0, #0]
 801640c:	4602      	mov	r2, r0
 801640e:	f013 0007 	ands.w	r0, r3, #7
 8016412:	d00b      	beq.n	801642c <__lo0bits+0x22>
 8016414:	07d9      	lsls	r1, r3, #31
 8016416:	d421      	bmi.n	801645c <__lo0bits+0x52>
 8016418:	0798      	lsls	r0, r3, #30
 801641a:	bf49      	itett	mi
 801641c:	085b      	lsrmi	r3, r3, #1
 801641e:	089b      	lsrpl	r3, r3, #2
 8016420:	2001      	movmi	r0, #1
 8016422:	6013      	strmi	r3, [r2, #0]
 8016424:	bf5c      	itt	pl
 8016426:	6013      	strpl	r3, [r2, #0]
 8016428:	2002      	movpl	r0, #2
 801642a:	4770      	bx	lr
 801642c:	b299      	uxth	r1, r3
 801642e:	b909      	cbnz	r1, 8016434 <__lo0bits+0x2a>
 8016430:	0c1b      	lsrs	r3, r3, #16
 8016432:	2010      	movs	r0, #16
 8016434:	b2d9      	uxtb	r1, r3
 8016436:	b909      	cbnz	r1, 801643c <__lo0bits+0x32>
 8016438:	3008      	adds	r0, #8
 801643a:	0a1b      	lsrs	r3, r3, #8
 801643c:	0719      	lsls	r1, r3, #28
 801643e:	bf04      	itt	eq
 8016440:	091b      	lsreq	r3, r3, #4
 8016442:	3004      	addeq	r0, #4
 8016444:	0799      	lsls	r1, r3, #30
 8016446:	bf04      	itt	eq
 8016448:	089b      	lsreq	r3, r3, #2
 801644a:	3002      	addeq	r0, #2
 801644c:	07d9      	lsls	r1, r3, #31
 801644e:	d403      	bmi.n	8016458 <__lo0bits+0x4e>
 8016450:	085b      	lsrs	r3, r3, #1
 8016452:	f100 0001 	add.w	r0, r0, #1
 8016456:	d003      	beq.n	8016460 <__lo0bits+0x56>
 8016458:	6013      	str	r3, [r2, #0]
 801645a:	4770      	bx	lr
 801645c:	2000      	movs	r0, #0
 801645e:	4770      	bx	lr
 8016460:	2020      	movs	r0, #32
 8016462:	4770      	bx	lr

08016464 <__i2b>:
 8016464:	b510      	push	{r4, lr}
 8016466:	460c      	mov	r4, r1
 8016468:	2101      	movs	r1, #1
 801646a:	f7ff febd 	bl	80161e8 <_Balloc>
 801646e:	4602      	mov	r2, r0
 8016470:	b928      	cbnz	r0, 801647e <__i2b+0x1a>
 8016472:	4b05      	ldr	r3, [pc, #20]	@ (8016488 <__i2b+0x24>)
 8016474:	4805      	ldr	r0, [pc, #20]	@ (801648c <__i2b+0x28>)
 8016476:	f240 1145 	movw	r1, #325	@ 0x145
 801647a:	f001 fcb1 	bl	8017de0 <__assert_func>
 801647e:	2301      	movs	r3, #1
 8016480:	6144      	str	r4, [r0, #20]
 8016482:	6103      	str	r3, [r0, #16]
 8016484:	bd10      	pop	{r4, pc}
 8016486:	bf00      	nop
 8016488:	0801b495 	.word	0x0801b495
 801648c:	0801b4a6 	.word	0x0801b4a6

08016490 <__multiply>:
 8016490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016494:	4617      	mov	r7, r2
 8016496:	690a      	ldr	r2, [r1, #16]
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	429a      	cmp	r2, r3
 801649c:	bfa8      	it	ge
 801649e:	463b      	movge	r3, r7
 80164a0:	4689      	mov	r9, r1
 80164a2:	bfa4      	itt	ge
 80164a4:	460f      	movge	r7, r1
 80164a6:	4699      	movge	r9, r3
 80164a8:	693d      	ldr	r5, [r7, #16]
 80164aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	6879      	ldr	r1, [r7, #4]
 80164b2:	eb05 060a 	add.w	r6, r5, sl
 80164b6:	42b3      	cmp	r3, r6
 80164b8:	b085      	sub	sp, #20
 80164ba:	bfb8      	it	lt
 80164bc:	3101      	addlt	r1, #1
 80164be:	f7ff fe93 	bl	80161e8 <_Balloc>
 80164c2:	b930      	cbnz	r0, 80164d2 <__multiply+0x42>
 80164c4:	4602      	mov	r2, r0
 80164c6:	4b41      	ldr	r3, [pc, #260]	@ (80165cc <__multiply+0x13c>)
 80164c8:	4841      	ldr	r0, [pc, #260]	@ (80165d0 <__multiply+0x140>)
 80164ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80164ce:	f001 fc87 	bl	8017de0 <__assert_func>
 80164d2:	f100 0414 	add.w	r4, r0, #20
 80164d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80164da:	4623      	mov	r3, r4
 80164dc:	2200      	movs	r2, #0
 80164de:	4573      	cmp	r3, lr
 80164e0:	d320      	bcc.n	8016524 <__multiply+0x94>
 80164e2:	f107 0814 	add.w	r8, r7, #20
 80164e6:	f109 0114 	add.w	r1, r9, #20
 80164ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80164ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80164f2:	9302      	str	r3, [sp, #8]
 80164f4:	1beb      	subs	r3, r5, r7
 80164f6:	3b15      	subs	r3, #21
 80164f8:	f023 0303 	bic.w	r3, r3, #3
 80164fc:	3304      	adds	r3, #4
 80164fe:	3715      	adds	r7, #21
 8016500:	42bd      	cmp	r5, r7
 8016502:	bf38      	it	cc
 8016504:	2304      	movcc	r3, #4
 8016506:	9301      	str	r3, [sp, #4]
 8016508:	9b02      	ldr	r3, [sp, #8]
 801650a:	9103      	str	r1, [sp, #12]
 801650c:	428b      	cmp	r3, r1
 801650e:	d80c      	bhi.n	801652a <__multiply+0x9a>
 8016510:	2e00      	cmp	r6, #0
 8016512:	dd03      	ble.n	801651c <__multiply+0x8c>
 8016514:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016518:	2b00      	cmp	r3, #0
 801651a:	d055      	beq.n	80165c8 <__multiply+0x138>
 801651c:	6106      	str	r6, [r0, #16]
 801651e:	b005      	add	sp, #20
 8016520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016524:	f843 2b04 	str.w	r2, [r3], #4
 8016528:	e7d9      	b.n	80164de <__multiply+0x4e>
 801652a:	f8b1 a000 	ldrh.w	sl, [r1]
 801652e:	f1ba 0f00 	cmp.w	sl, #0
 8016532:	d01f      	beq.n	8016574 <__multiply+0xe4>
 8016534:	46c4      	mov	ip, r8
 8016536:	46a1      	mov	r9, r4
 8016538:	2700      	movs	r7, #0
 801653a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801653e:	f8d9 3000 	ldr.w	r3, [r9]
 8016542:	fa1f fb82 	uxth.w	fp, r2
 8016546:	b29b      	uxth	r3, r3
 8016548:	fb0a 330b 	mla	r3, sl, fp, r3
 801654c:	443b      	add	r3, r7
 801654e:	f8d9 7000 	ldr.w	r7, [r9]
 8016552:	0c12      	lsrs	r2, r2, #16
 8016554:	0c3f      	lsrs	r7, r7, #16
 8016556:	fb0a 7202 	mla	r2, sl, r2, r7
 801655a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801655e:	b29b      	uxth	r3, r3
 8016560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016564:	4565      	cmp	r5, ip
 8016566:	f849 3b04 	str.w	r3, [r9], #4
 801656a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801656e:	d8e4      	bhi.n	801653a <__multiply+0xaa>
 8016570:	9b01      	ldr	r3, [sp, #4]
 8016572:	50e7      	str	r7, [r4, r3]
 8016574:	9b03      	ldr	r3, [sp, #12]
 8016576:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801657a:	3104      	adds	r1, #4
 801657c:	f1b9 0f00 	cmp.w	r9, #0
 8016580:	d020      	beq.n	80165c4 <__multiply+0x134>
 8016582:	6823      	ldr	r3, [r4, #0]
 8016584:	4647      	mov	r7, r8
 8016586:	46a4      	mov	ip, r4
 8016588:	f04f 0a00 	mov.w	sl, #0
 801658c:	f8b7 b000 	ldrh.w	fp, [r7]
 8016590:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016594:	fb09 220b 	mla	r2, r9, fp, r2
 8016598:	4452      	add	r2, sl
 801659a:	b29b      	uxth	r3, r3
 801659c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165a0:	f84c 3b04 	str.w	r3, [ip], #4
 80165a4:	f857 3b04 	ldr.w	r3, [r7], #4
 80165a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80165ac:	f8bc 3000 	ldrh.w	r3, [ip]
 80165b0:	fb09 330a 	mla	r3, r9, sl, r3
 80165b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80165b8:	42bd      	cmp	r5, r7
 80165ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80165be:	d8e5      	bhi.n	801658c <__multiply+0xfc>
 80165c0:	9a01      	ldr	r2, [sp, #4]
 80165c2:	50a3      	str	r3, [r4, r2]
 80165c4:	3404      	adds	r4, #4
 80165c6:	e79f      	b.n	8016508 <__multiply+0x78>
 80165c8:	3e01      	subs	r6, #1
 80165ca:	e7a1      	b.n	8016510 <__multiply+0x80>
 80165cc:	0801b495 	.word	0x0801b495
 80165d0:	0801b4a6 	.word	0x0801b4a6

080165d4 <__pow5mult>:
 80165d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165d8:	4615      	mov	r5, r2
 80165da:	f012 0203 	ands.w	r2, r2, #3
 80165de:	4607      	mov	r7, r0
 80165e0:	460e      	mov	r6, r1
 80165e2:	d007      	beq.n	80165f4 <__pow5mult+0x20>
 80165e4:	4c25      	ldr	r4, [pc, #148]	@ (801667c <__pow5mult+0xa8>)
 80165e6:	3a01      	subs	r2, #1
 80165e8:	2300      	movs	r3, #0
 80165ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80165ee:	f7ff fe5d 	bl	80162ac <__multadd>
 80165f2:	4606      	mov	r6, r0
 80165f4:	10ad      	asrs	r5, r5, #2
 80165f6:	d03d      	beq.n	8016674 <__pow5mult+0xa0>
 80165f8:	69fc      	ldr	r4, [r7, #28]
 80165fa:	b97c      	cbnz	r4, 801661c <__pow5mult+0x48>
 80165fc:	2010      	movs	r0, #16
 80165fe:	f7ff fd3d 	bl	801607c <malloc>
 8016602:	4602      	mov	r2, r0
 8016604:	61f8      	str	r0, [r7, #28]
 8016606:	b928      	cbnz	r0, 8016614 <__pow5mult+0x40>
 8016608:	4b1d      	ldr	r3, [pc, #116]	@ (8016680 <__pow5mult+0xac>)
 801660a:	481e      	ldr	r0, [pc, #120]	@ (8016684 <__pow5mult+0xb0>)
 801660c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016610:	f001 fbe6 	bl	8017de0 <__assert_func>
 8016614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016618:	6004      	str	r4, [r0, #0]
 801661a:	60c4      	str	r4, [r0, #12]
 801661c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016624:	b94c      	cbnz	r4, 801663a <__pow5mult+0x66>
 8016626:	f240 2171 	movw	r1, #625	@ 0x271
 801662a:	4638      	mov	r0, r7
 801662c:	f7ff ff1a 	bl	8016464 <__i2b>
 8016630:	2300      	movs	r3, #0
 8016632:	f8c8 0008 	str.w	r0, [r8, #8]
 8016636:	4604      	mov	r4, r0
 8016638:	6003      	str	r3, [r0, #0]
 801663a:	f04f 0900 	mov.w	r9, #0
 801663e:	07eb      	lsls	r3, r5, #31
 8016640:	d50a      	bpl.n	8016658 <__pow5mult+0x84>
 8016642:	4631      	mov	r1, r6
 8016644:	4622      	mov	r2, r4
 8016646:	4638      	mov	r0, r7
 8016648:	f7ff ff22 	bl	8016490 <__multiply>
 801664c:	4631      	mov	r1, r6
 801664e:	4680      	mov	r8, r0
 8016650:	4638      	mov	r0, r7
 8016652:	f7ff fe09 	bl	8016268 <_Bfree>
 8016656:	4646      	mov	r6, r8
 8016658:	106d      	asrs	r5, r5, #1
 801665a:	d00b      	beq.n	8016674 <__pow5mult+0xa0>
 801665c:	6820      	ldr	r0, [r4, #0]
 801665e:	b938      	cbnz	r0, 8016670 <__pow5mult+0x9c>
 8016660:	4622      	mov	r2, r4
 8016662:	4621      	mov	r1, r4
 8016664:	4638      	mov	r0, r7
 8016666:	f7ff ff13 	bl	8016490 <__multiply>
 801666a:	6020      	str	r0, [r4, #0]
 801666c:	f8c0 9000 	str.w	r9, [r0]
 8016670:	4604      	mov	r4, r0
 8016672:	e7e4      	b.n	801663e <__pow5mult+0x6a>
 8016674:	4630      	mov	r0, r6
 8016676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801667a:	bf00      	nop
 801667c:	0801b5b8 	.word	0x0801b5b8
 8016680:	0801b426 	.word	0x0801b426
 8016684:	0801b4a6 	.word	0x0801b4a6

08016688 <__lshift>:
 8016688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668c:	460c      	mov	r4, r1
 801668e:	6849      	ldr	r1, [r1, #4]
 8016690:	6923      	ldr	r3, [r4, #16]
 8016692:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016696:	68a3      	ldr	r3, [r4, #8]
 8016698:	4607      	mov	r7, r0
 801669a:	4691      	mov	r9, r2
 801669c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80166a0:	f108 0601 	add.w	r6, r8, #1
 80166a4:	42b3      	cmp	r3, r6
 80166a6:	db0b      	blt.n	80166c0 <__lshift+0x38>
 80166a8:	4638      	mov	r0, r7
 80166aa:	f7ff fd9d 	bl	80161e8 <_Balloc>
 80166ae:	4605      	mov	r5, r0
 80166b0:	b948      	cbnz	r0, 80166c6 <__lshift+0x3e>
 80166b2:	4602      	mov	r2, r0
 80166b4:	4b28      	ldr	r3, [pc, #160]	@ (8016758 <__lshift+0xd0>)
 80166b6:	4829      	ldr	r0, [pc, #164]	@ (801675c <__lshift+0xd4>)
 80166b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80166bc:	f001 fb90 	bl	8017de0 <__assert_func>
 80166c0:	3101      	adds	r1, #1
 80166c2:	005b      	lsls	r3, r3, #1
 80166c4:	e7ee      	b.n	80166a4 <__lshift+0x1c>
 80166c6:	2300      	movs	r3, #0
 80166c8:	f100 0114 	add.w	r1, r0, #20
 80166cc:	f100 0210 	add.w	r2, r0, #16
 80166d0:	4618      	mov	r0, r3
 80166d2:	4553      	cmp	r3, sl
 80166d4:	db33      	blt.n	801673e <__lshift+0xb6>
 80166d6:	6920      	ldr	r0, [r4, #16]
 80166d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80166dc:	f104 0314 	add.w	r3, r4, #20
 80166e0:	f019 091f 	ands.w	r9, r9, #31
 80166e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80166ec:	d02b      	beq.n	8016746 <__lshift+0xbe>
 80166ee:	f1c9 0e20 	rsb	lr, r9, #32
 80166f2:	468a      	mov	sl, r1
 80166f4:	2200      	movs	r2, #0
 80166f6:	6818      	ldr	r0, [r3, #0]
 80166f8:	fa00 f009 	lsl.w	r0, r0, r9
 80166fc:	4310      	orrs	r0, r2
 80166fe:	f84a 0b04 	str.w	r0, [sl], #4
 8016702:	f853 2b04 	ldr.w	r2, [r3], #4
 8016706:	459c      	cmp	ip, r3
 8016708:	fa22 f20e 	lsr.w	r2, r2, lr
 801670c:	d8f3      	bhi.n	80166f6 <__lshift+0x6e>
 801670e:	ebac 0304 	sub.w	r3, ip, r4
 8016712:	3b15      	subs	r3, #21
 8016714:	f023 0303 	bic.w	r3, r3, #3
 8016718:	3304      	adds	r3, #4
 801671a:	f104 0015 	add.w	r0, r4, #21
 801671e:	4560      	cmp	r0, ip
 8016720:	bf88      	it	hi
 8016722:	2304      	movhi	r3, #4
 8016724:	50ca      	str	r2, [r1, r3]
 8016726:	b10a      	cbz	r2, 801672c <__lshift+0xa4>
 8016728:	f108 0602 	add.w	r6, r8, #2
 801672c:	3e01      	subs	r6, #1
 801672e:	4638      	mov	r0, r7
 8016730:	612e      	str	r6, [r5, #16]
 8016732:	4621      	mov	r1, r4
 8016734:	f7ff fd98 	bl	8016268 <_Bfree>
 8016738:	4628      	mov	r0, r5
 801673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801673e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016742:	3301      	adds	r3, #1
 8016744:	e7c5      	b.n	80166d2 <__lshift+0x4a>
 8016746:	3904      	subs	r1, #4
 8016748:	f853 2b04 	ldr.w	r2, [r3], #4
 801674c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016750:	459c      	cmp	ip, r3
 8016752:	d8f9      	bhi.n	8016748 <__lshift+0xc0>
 8016754:	e7ea      	b.n	801672c <__lshift+0xa4>
 8016756:	bf00      	nop
 8016758:	0801b495 	.word	0x0801b495
 801675c:	0801b4a6 	.word	0x0801b4a6

08016760 <__mcmp>:
 8016760:	690a      	ldr	r2, [r1, #16]
 8016762:	4603      	mov	r3, r0
 8016764:	6900      	ldr	r0, [r0, #16]
 8016766:	1a80      	subs	r0, r0, r2
 8016768:	b530      	push	{r4, r5, lr}
 801676a:	d10e      	bne.n	801678a <__mcmp+0x2a>
 801676c:	3314      	adds	r3, #20
 801676e:	3114      	adds	r1, #20
 8016770:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016774:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801677c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016780:	4295      	cmp	r5, r2
 8016782:	d003      	beq.n	801678c <__mcmp+0x2c>
 8016784:	d205      	bcs.n	8016792 <__mcmp+0x32>
 8016786:	f04f 30ff 	mov.w	r0, #4294967295
 801678a:	bd30      	pop	{r4, r5, pc}
 801678c:	42a3      	cmp	r3, r4
 801678e:	d3f3      	bcc.n	8016778 <__mcmp+0x18>
 8016790:	e7fb      	b.n	801678a <__mcmp+0x2a>
 8016792:	2001      	movs	r0, #1
 8016794:	e7f9      	b.n	801678a <__mcmp+0x2a>
	...

08016798 <__mdiff>:
 8016798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679c:	4689      	mov	r9, r1
 801679e:	4606      	mov	r6, r0
 80167a0:	4611      	mov	r1, r2
 80167a2:	4648      	mov	r0, r9
 80167a4:	4614      	mov	r4, r2
 80167a6:	f7ff ffdb 	bl	8016760 <__mcmp>
 80167aa:	1e05      	subs	r5, r0, #0
 80167ac:	d112      	bne.n	80167d4 <__mdiff+0x3c>
 80167ae:	4629      	mov	r1, r5
 80167b0:	4630      	mov	r0, r6
 80167b2:	f7ff fd19 	bl	80161e8 <_Balloc>
 80167b6:	4602      	mov	r2, r0
 80167b8:	b928      	cbnz	r0, 80167c6 <__mdiff+0x2e>
 80167ba:	4b3f      	ldr	r3, [pc, #252]	@ (80168b8 <__mdiff+0x120>)
 80167bc:	f240 2137 	movw	r1, #567	@ 0x237
 80167c0:	483e      	ldr	r0, [pc, #248]	@ (80168bc <__mdiff+0x124>)
 80167c2:	f001 fb0d 	bl	8017de0 <__assert_func>
 80167c6:	2301      	movs	r3, #1
 80167c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80167cc:	4610      	mov	r0, r2
 80167ce:	b003      	add	sp, #12
 80167d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d4:	bfbc      	itt	lt
 80167d6:	464b      	movlt	r3, r9
 80167d8:	46a1      	movlt	r9, r4
 80167da:	4630      	mov	r0, r6
 80167dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80167e0:	bfba      	itte	lt
 80167e2:	461c      	movlt	r4, r3
 80167e4:	2501      	movlt	r5, #1
 80167e6:	2500      	movge	r5, #0
 80167e8:	f7ff fcfe 	bl	80161e8 <_Balloc>
 80167ec:	4602      	mov	r2, r0
 80167ee:	b918      	cbnz	r0, 80167f8 <__mdiff+0x60>
 80167f0:	4b31      	ldr	r3, [pc, #196]	@ (80168b8 <__mdiff+0x120>)
 80167f2:	f240 2145 	movw	r1, #581	@ 0x245
 80167f6:	e7e3      	b.n	80167c0 <__mdiff+0x28>
 80167f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80167fc:	6926      	ldr	r6, [r4, #16]
 80167fe:	60c5      	str	r5, [r0, #12]
 8016800:	f109 0310 	add.w	r3, r9, #16
 8016804:	f109 0514 	add.w	r5, r9, #20
 8016808:	f104 0e14 	add.w	lr, r4, #20
 801680c:	f100 0b14 	add.w	fp, r0, #20
 8016810:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016814:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016818:	9301      	str	r3, [sp, #4]
 801681a:	46d9      	mov	r9, fp
 801681c:	f04f 0c00 	mov.w	ip, #0
 8016820:	9b01      	ldr	r3, [sp, #4]
 8016822:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016826:	f853 af04 	ldr.w	sl, [r3, #4]!
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	fa1f f38a 	uxth.w	r3, sl
 8016830:	4619      	mov	r1, r3
 8016832:	b283      	uxth	r3, r0
 8016834:	1acb      	subs	r3, r1, r3
 8016836:	0c00      	lsrs	r0, r0, #16
 8016838:	4463      	add	r3, ip
 801683a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801683e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016842:	b29b      	uxth	r3, r3
 8016844:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016848:	4576      	cmp	r6, lr
 801684a:	f849 3b04 	str.w	r3, [r9], #4
 801684e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016852:	d8e5      	bhi.n	8016820 <__mdiff+0x88>
 8016854:	1b33      	subs	r3, r6, r4
 8016856:	3b15      	subs	r3, #21
 8016858:	f023 0303 	bic.w	r3, r3, #3
 801685c:	3415      	adds	r4, #21
 801685e:	3304      	adds	r3, #4
 8016860:	42a6      	cmp	r6, r4
 8016862:	bf38      	it	cc
 8016864:	2304      	movcc	r3, #4
 8016866:	441d      	add	r5, r3
 8016868:	445b      	add	r3, fp
 801686a:	461e      	mov	r6, r3
 801686c:	462c      	mov	r4, r5
 801686e:	4544      	cmp	r4, r8
 8016870:	d30e      	bcc.n	8016890 <__mdiff+0xf8>
 8016872:	f108 0103 	add.w	r1, r8, #3
 8016876:	1b49      	subs	r1, r1, r5
 8016878:	f021 0103 	bic.w	r1, r1, #3
 801687c:	3d03      	subs	r5, #3
 801687e:	45a8      	cmp	r8, r5
 8016880:	bf38      	it	cc
 8016882:	2100      	movcc	r1, #0
 8016884:	440b      	add	r3, r1
 8016886:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801688a:	b191      	cbz	r1, 80168b2 <__mdiff+0x11a>
 801688c:	6117      	str	r7, [r2, #16]
 801688e:	e79d      	b.n	80167cc <__mdiff+0x34>
 8016890:	f854 1b04 	ldr.w	r1, [r4], #4
 8016894:	46e6      	mov	lr, ip
 8016896:	0c08      	lsrs	r0, r1, #16
 8016898:	fa1c fc81 	uxtah	ip, ip, r1
 801689c:	4471      	add	r1, lr
 801689e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80168a2:	b289      	uxth	r1, r1
 80168a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80168a8:	f846 1b04 	str.w	r1, [r6], #4
 80168ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80168b0:	e7dd      	b.n	801686e <__mdiff+0xd6>
 80168b2:	3f01      	subs	r7, #1
 80168b4:	e7e7      	b.n	8016886 <__mdiff+0xee>
 80168b6:	bf00      	nop
 80168b8:	0801b495 	.word	0x0801b495
 80168bc:	0801b4a6 	.word	0x0801b4a6

080168c0 <__ulp>:
 80168c0:	b082      	sub	sp, #8
 80168c2:	ed8d 0b00 	vstr	d0, [sp]
 80168c6:	9a01      	ldr	r2, [sp, #4]
 80168c8:	4b0f      	ldr	r3, [pc, #60]	@ (8016908 <__ulp+0x48>)
 80168ca:	4013      	ands	r3, r2
 80168cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	dc08      	bgt.n	80168e6 <__ulp+0x26>
 80168d4:	425b      	negs	r3, r3
 80168d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80168da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80168de:	da04      	bge.n	80168ea <__ulp+0x2a>
 80168e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80168e4:	4113      	asrs	r3, r2
 80168e6:	2200      	movs	r2, #0
 80168e8:	e008      	b.n	80168fc <__ulp+0x3c>
 80168ea:	f1a2 0314 	sub.w	r3, r2, #20
 80168ee:	2b1e      	cmp	r3, #30
 80168f0:	bfda      	itte	le
 80168f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80168f6:	40da      	lsrle	r2, r3
 80168f8:	2201      	movgt	r2, #1
 80168fa:	2300      	movs	r3, #0
 80168fc:	4619      	mov	r1, r3
 80168fe:	4610      	mov	r0, r2
 8016900:	ec41 0b10 	vmov	d0, r0, r1
 8016904:	b002      	add	sp, #8
 8016906:	4770      	bx	lr
 8016908:	7ff00000 	.word	0x7ff00000

0801690c <__b2d>:
 801690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016910:	6906      	ldr	r6, [r0, #16]
 8016912:	f100 0814 	add.w	r8, r0, #20
 8016916:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801691a:	1f37      	subs	r7, r6, #4
 801691c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016920:	4610      	mov	r0, r2
 8016922:	f7ff fd53 	bl	80163cc <__hi0bits>
 8016926:	f1c0 0320 	rsb	r3, r0, #32
 801692a:	280a      	cmp	r0, #10
 801692c:	600b      	str	r3, [r1, #0]
 801692e:	491b      	ldr	r1, [pc, #108]	@ (801699c <__b2d+0x90>)
 8016930:	dc15      	bgt.n	801695e <__b2d+0x52>
 8016932:	f1c0 0c0b 	rsb	ip, r0, #11
 8016936:	fa22 f30c 	lsr.w	r3, r2, ip
 801693a:	45b8      	cmp	r8, r7
 801693c:	ea43 0501 	orr.w	r5, r3, r1
 8016940:	bf34      	ite	cc
 8016942:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016946:	2300      	movcs	r3, #0
 8016948:	3015      	adds	r0, #21
 801694a:	fa02 f000 	lsl.w	r0, r2, r0
 801694e:	fa23 f30c 	lsr.w	r3, r3, ip
 8016952:	4303      	orrs	r3, r0
 8016954:	461c      	mov	r4, r3
 8016956:	ec45 4b10 	vmov	d0, r4, r5
 801695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695e:	45b8      	cmp	r8, r7
 8016960:	bf3a      	itte	cc
 8016962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016966:	f1a6 0708 	subcc.w	r7, r6, #8
 801696a:	2300      	movcs	r3, #0
 801696c:	380b      	subs	r0, #11
 801696e:	d012      	beq.n	8016996 <__b2d+0x8a>
 8016970:	f1c0 0120 	rsb	r1, r0, #32
 8016974:	fa23 f401 	lsr.w	r4, r3, r1
 8016978:	4082      	lsls	r2, r0
 801697a:	4322      	orrs	r2, r4
 801697c:	4547      	cmp	r7, r8
 801697e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016982:	bf8c      	ite	hi
 8016984:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016988:	2200      	movls	r2, #0
 801698a:	4083      	lsls	r3, r0
 801698c:	40ca      	lsrs	r2, r1
 801698e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016992:	4313      	orrs	r3, r2
 8016994:	e7de      	b.n	8016954 <__b2d+0x48>
 8016996:	ea42 0501 	orr.w	r5, r2, r1
 801699a:	e7db      	b.n	8016954 <__b2d+0x48>
 801699c:	3ff00000 	.word	0x3ff00000

080169a0 <__d2b>:
 80169a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80169a4:	460f      	mov	r7, r1
 80169a6:	2101      	movs	r1, #1
 80169a8:	ec59 8b10 	vmov	r8, r9, d0
 80169ac:	4616      	mov	r6, r2
 80169ae:	f7ff fc1b 	bl	80161e8 <_Balloc>
 80169b2:	4604      	mov	r4, r0
 80169b4:	b930      	cbnz	r0, 80169c4 <__d2b+0x24>
 80169b6:	4602      	mov	r2, r0
 80169b8:	4b23      	ldr	r3, [pc, #140]	@ (8016a48 <__d2b+0xa8>)
 80169ba:	4824      	ldr	r0, [pc, #144]	@ (8016a4c <__d2b+0xac>)
 80169bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80169c0:	f001 fa0e 	bl	8017de0 <__assert_func>
 80169c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80169c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80169cc:	b10d      	cbz	r5, 80169d2 <__d2b+0x32>
 80169ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80169d2:	9301      	str	r3, [sp, #4]
 80169d4:	f1b8 0300 	subs.w	r3, r8, #0
 80169d8:	d023      	beq.n	8016a22 <__d2b+0x82>
 80169da:	4668      	mov	r0, sp
 80169dc:	9300      	str	r3, [sp, #0]
 80169de:	f7ff fd14 	bl	801640a <__lo0bits>
 80169e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80169e6:	b1d0      	cbz	r0, 8016a1e <__d2b+0x7e>
 80169e8:	f1c0 0320 	rsb	r3, r0, #32
 80169ec:	fa02 f303 	lsl.w	r3, r2, r3
 80169f0:	430b      	orrs	r3, r1
 80169f2:	40c2      	lsrs	r2, r0
 80169f4:	6163      	str	r3, [r4, #20]
 80169f6:	9201      	str	r2, [sp, #4]
 80169f8:	9b01      	ldr	r3, [sp, #4]
 80169fa:	61a3      	str	r3, [r4, #24]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	bf0c      	ite	eq
 8016a00:	2201      	moveq	r2, #1
 8016a02:	2202      	movne	r2, #2
 8016a04:	6122      	str	r2, [r4, #16]
 8016a06:	b1a5      	cbz	r5, 8016a32 <__d2b+0x92>
 8016a08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016a0c:	4405      	add	r5, r0
 8016a0e:	603d      	str	r5, [r7, #0]
 8016a10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016a14:	6030      	str	r0, [r6, #0]
 8016a16:	4620      	mov	r0, r4
 8016a18:	b003      	add	sp, #12
 8016a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a1e:	6161      	str	r1, [r4, #20]
 8016a20:	e7ea      	b.n	80169f8 <__d2b+0x58>
 8016a22:	a801      	add	r0, sp, #4
 8016a24:	f7ff fcf1 	bl	801640a <__lo0bits>
 8016a28:	9b01      	ldr	r3, [sp, #4]
 8016a2a:	6163      	str	r3, [r4, #20]
 8016a2c:	3020      	adds	r0, #32
 8016a2e:	2201      	movs	r2, #1
 8016a30:	e7e8      	b.n	8016a04 <__d2b+0x64>
 8016a32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016a36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016a3a:	6038      	str	r0, [r7, #0]
 8016a3c:	6918      	ldr	r0, [r3, #16]
 8016a3e:	f7ff fcc5 	bl	80163cc <__hi0bits>
 8016a42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016a46:	e7e5      	b.n	8016a14 <__d2b+0x74>
 8016a48:	0801b495 	.word	0x0801b495
 8016a4c:	0801b4a6 	.word	0x0801b4a6

08016a50 <__ratio>:
 8016a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a54:	b085      	sub	sp, #20
 8016a56:	e9cd 1000 	strd	r1, r0, [sp]
 8016a5a:	a902      	add	r1, sp, #8
 8016a5c:	f7ff ff56 	bl	801690c <__b2d>
 8016a60:	9800      	ldr	r0, [sp, #0]
 8016a62:	a903      	add	r1, sp, #12
 8016a64:	ec55 4b10 	vmov	r4, r5, d0
 8016a68:	f7ff ff50 	bl	801690c <__b2d>
 8016a6c:	9b01      	ldr	r3, [sp, #4]
 8016a6e:	6919      	ldr	r1, [r3, #16]
 8016a70:	9b00      	ldr	r3, [sp, #0]
 8016a72:	691b      	ldr	r3, [r3, #16]
 8016a74:	1ac9      	subs	r1, r1, r3
 8016a76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016a7a:	1a9b      	subs	r3, r3, r2
 8016a7c:	ec5b ab10 	vmov	sl, fp, d0
 8016a80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	bfce      	itee	gt
 8016a88:	462a      	movgt	r2, r5
 8016a8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016a8e:	465a      	movle	r2, fp
 8016a90:	462f      	mov	r7, r5
 8016a92:	46d9      	mov	r9, fp
 8016a94:	bfcc      	ite	gt
 8016a96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016a9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016a9e:	464b      	mov	r3, r9
 8016aa0:	4652      	mov	r2, sl
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	4639      	mov	r1, r7
 8016aa6:	f7e9 fef9 	bl	800089c <__aeabi_ddiv>
 8016aaa:	ec41 0b10 	vmov	d0, r0, r1
 8016aae:	b005      	add	sp, #20
 8016ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ab4 <__copybits>:
 8016ab4:	3901      	subs	r1, #1
 8016ab6:	b570      	push	{r4, r5, r6, lr}
 8016ab8:	1149      	asrs	r1, r1, #5
 8016aba:	6914      	ldr	r4, [r2, #16]
 8016abc:	3101      	adds	r1, #1
 8016abe:	f102 0314 	add.w	r3, r2, #20
 8016ac2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016ac6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016aca:	1f05      	subs	r5, r0, #4
 8016acc:	42a3      	cmp	r3, r4
 8016ace:	d30c      	bcc.n	8016aea <__copybits+0x36>
 8016ad0:	1aa3      	subs	r3, r4, r2
 8016ad2:	3b11      	subs	r3, #17
 8016ad4:	f023 0303 	bic.w	r3, r3, #3
 8016ad8:	3211      	adds	r2, #17
 8016ada:	42a2      	cmp	r2, r4
 8016adc:	bf88      	it	hi
 8016ade:	2300      	movhi	r3, #0
 8016ae0:	4418      	add	r0, r3
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	4288      	cmp	r0, r1
 8016ae6:	d305      	bcc.n	8016af4 <__copybits+0x40>
 8016ae8:	bd70      	pop	{r4, r5, r6, pc}
 8016aea:	f853 6b04 	ldr.w	r6, [r3], #4
 8016aee:	f845 6f04 	str.w	r6, [r5, #4]!
 8016af2:	e7eb      	b.n	8016acc <__copybits+0x18>
 8016af4:	f840 3b04 	str.w	r3, [r0], #4
 8016af8:	e7f4      	b.n	8016ae4 <__copybits+0x30>

08016afa <__any_on>:
 8016afa:	f100 0214 	add.w	r2, r0, #20
 8016afe:	6900      	ldr	r0, [r0, #16]
 8016b00:	114b      	asrs	r3, r1, #5
 8016b02:	4298      	cmp	r0, r3
 8016b04:	b510      	push	{r4, lr}
 8016b06:	db11      	blt.n	8016b2c <__any_on+0x32>
 8016b08:	dd0a      	ble.n	8016b20 <__any_on+0x26>
 8016b0a:	f011 011f 	ands.w	r1, r1, #31
 8016b0e:	d007      	beq.n	8016b20 <__any_on+0x26>
 8016b10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b14:	fa24 f001 	lsr.w	r0, r4, r1
 8016b18:	fa00 f101 	lsl.w	r1, r0, r1
 8016b1c:	428c      	cmp	r4, r1
 8016b1e:	d10b      	bne.n	8016b38 <__any_on+0x3e>
 8016b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b24:	4293      	cmp	r3, r2
 8016b26:	d803      	bhi.n	8016b30 <__any_on+0x36>
 8016b28:	2000      	movs	r0, #0
 8016b2a:	bd10      	pop	{r4, pc}
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	e7f7      	b.n	8016b20 <__any_on+0x26>
 8016b30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b34:	2900      	cmp	r1, #0
 8016b36:	d0f5      	beq.n	8016b24 <__any_on+0x2a>
 8016b38:	2001      	movs	r0, #1
 8016b3a:	e7f6      	b.n	8016b2a <__any_on+0x30>

08016b3c <sulp>:
 8016b3c:	b570      	push	{r4, r5, r6, lr}
 8016b3e:	4604      	mov	r4, r0
 8016b40:	460d      	mov	r5, r1
 8016b42:	ec45 4b10 	vmov	d0, r4, r5
 8016b46:	4616      	mov	r6, r2
 8016b48:	f7ff feba 	bl	80168c0 <__ulp>
 8016b4c:	ec51 0b10 	vmov	r0, r1, d0
 8016b50:	b17e      	cbz	r6, 8016b72 <sulp+0x36>
 8016b52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016b56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	dd09      	ble.n	8016b72 <sulp+0x36>
 8016b5e:	051b      	lsls	r3, r3, #20
 8016b60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016b64:	2400      	movs	r4, #0
 8016b66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016b6a:	4622      	mov	r2, r4
 8016b6c:	462b      	mov	r3, r5
 8016b6e:	f7e9 fd6b 	bl	8000648 <__aeabi_dmul>
 8016b72:	ec41 0b10 	vmov	d0, r0, r1
 8016b76:	bd70      	pop	{r4, r5, r6, pc}

08016b78 <_strtod_l>:
 8016b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7c:	b09f      	sub	sp, #124	@ 0x7c
 8016b7e:	460c      	mov	r4, r1
 8016b80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016b82:	2200      	movs	r2, #0
 8016b84:	921a      	str	r2, [sp, #104]	@ 0x68
 8016b86:	9005      	str	r0, [sp, #20]
 8016b88:	f04f 0a00 	mov.w	sl, #0
 8016b8c:	f04f 0b00 	mov.w	fp, #0
 8016b90:	460a      	mov	r2, r1
 8016b92:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b94:	7811      	ldrb	r1, [r2, #0]
 8016b96:	292b      	cmp	r1, #43	@ 0x2b
 8016b98:	d04a      	beq.n	8016c30 <_strtod_l+0xb8>
 8016b9a:	d838      	bhi.n	8016c0e <_strtod_l+0x96>
 8016b9c:	290d      	cmp	r1, #13
 8016b9e:	d832      	bhi.n	8016c06 <_strtod_l+0x8e>
 8016ba0:	2908      	cmp	r1, #8
 8016ba2:	d832      	bhi.n	8016c0a <_strtod_l+0x92>
 8016ba4:	2900      	cmp	r1, #0
 8016ba6:	d03b      	beq.n	8016c20 <_strtod_l+0xa8>
 8016ba8:	2200      	movs	r2, #0
 8016baa:	920e      	str	r2, [sp, #56]	@ 0x38
 8016bac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016bae:	782a      	ldrb	r2, [r5, #0]
 8016bb0:	2a30      	cmp	r2, #48	@ 0x30
 8016bb2:	f040 80b2 	bne.w	8016d1a <_strtod_l+0x1a2>
 8016bb6:	786a      	ldrb	r2, [r5, #1]
 8016bb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016bbc:	2a58      	cmp	r2, #88	@ 0x58
 8016bbe:	d16e      	bne.n	8016c9e <_strtod_l+0x126>
 8016bc0:	9302      	str	r3, [sp, #8]
 8016bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016bc4:	9301      	str	r3, [sp, #4]
 8016bc6:	ab1a      	add	r3, sp, #104	@ 0x68
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	4a8f      	ldr	r2, [pc, #572]	@ (8016e08 <_strtod_l+0x290>)
 8016bcc:	9805      	ldr	r0, [sp, #20]
 8016bce:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016bd0:	a919      	add	r1, sp, #100	@ 0x64
 8016bd2:	f001 f99f 	bl	8017f14 <__gethex>
 8016bd6:	f010 060f 	ands.w	r6, r0, #15
 8016bda:	4604      	mov	r4, r0
 8016bdc:	d005      	beq.n	8016bea <_strtod_l+0x72>
 8016bde:	2e06      	cmp	r6, #6
 8016be0:	d128      	bne.n	8016c34 <_strtod_l+0xbc>
 8016be2:	3501      	adds	r5, #1
 8016be4:	2300      	movs	r3, #0
 8016be6:	9519      	str	r5, [sp, #100]	@ 0x64
 8016be8:	930e      	str	r3, [sp, #56]	@ 0x38
 8016bea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	f040 858e 	bne.w	801770e <_strtod_l+0xb96>
 8016bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016bf4:	b1cb      	cbz	r3, 8016c2a <_strtod_l+0xb2>
 8016bf6:	4652      	mov	r2, sl
 8016bf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016bfc:	ec43 2b10 	vmov	d0, r2, r3
 8016c00:	b01f      	add	sp, #124	@ 0x7c
 8016c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c06:	2920      	cmp	r1, #32
 8016c08:	d1ce      	bne.n	8016ba8 <_strtod_l+0x30>
 8016c0a:	3201      	adds	r2, #1
 8016c0c:	e7c1      	b.n	8016b92 <_strtod_l+0x1a>
 8016c0e:	292d      	cmp	r1, #45	@ 0x2d
 8016c10:	d1ca      	bne.n	8016ba8 <_strtod_l+0x30>
 8016c12:	2101      	movs	r1, #1
 8016c14:	910e      	str	r1, [sp, #56]	@ 0x38
 8016c16:	1c51      	adds	r1, r2, #1
 8016c18:	9119      	str	r1, [sp, #100]	@ 0x64
 8016c1a:	7852      	ldrb	r2, [r2, #1]
 8016c1c:	2a00      	cmp	r2, #0
 8016c1e:	d1c5      	bne.n	8016bac <_strtod_l+0x34>
 8016c20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c22:	9419      	str	r4, [sp, #100]	@ 0x64
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	f040 8570 	bne.w	801770a <_strtod_l+0xb92>
 8016c2a:	4652      	mov	r2, sl
 8016c2c:	465b      	mov	r3, fp
 8016c2e:	e7e5      	b.n	8016bfc <_strtod_l+0x84>
 8016c30:	2100      	movs	r1, #0
 8016c32:	e7ef      	b.n	8016c14 <_strtod_l+0x9c>
 8016c34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016c36:	b13a      	cbz	r2, 8016c48 <_strtod_l+0xd0>
 8016c38:	2135      	movs	r1, #53	@ 0x35
 8016c3a:	a81c      	add	r0, sp, #112	@ 0x70
 8016c3c:	f7ff ff3a 	bl	8016ab4 <__copybits>
 8016c40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c42:	9805      	ldr	r0, [sp, #20]
 8016c44:	f7ff fb10 	bl	8016268 <_Bfree>
 8016c48:	3e01      	subs	r6, #1
 8016c4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016c4c:	2e04      	cmp	r6, #4
 8016c4e:	d806      	bhi.n	8016c5e <_strtod_l+0xe6>
 8016c50:	e8df f006 	tbb	[pc, r6]
 8016c54:	201d0314 	.word	0x201d0314
 8016c58:	14          	.byte	0x14
 8016c59:	00          	.byte	0x00
 8016c5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016c5e:	05e1      	lsls	r1, r4, #23
 8016c60:	bf48      	it	mi
 8016c62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016c6a:	0d1b      	lsrs	r3, r3, #20
 8016c6c:	051b      	lsls	r3, r3, #20
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1bb      	bne.n	8016bea <_strtod_l+0x72>
 8016c72:	f7fe fb1d 	bl	80152b0 <__errno>
 8016c76:	2322      	movs	r3, #34	@ 0x22
 8016c78:	6003      	str	r3, [r0, #0]
 8016c7a:	e7b6      	b.n	8016bea <_strtod_l+0x72>
 8016c7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016c80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016c84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016c88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016c8c:	e7e7      	b.n	8016c5e <_strtod_l+0xe6>
 8016c8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016e10 <_strtod_l+0x298>
 8016c92:	e7e4      	b.n	8016c5e <_strtod_l+0xe6>
 8016c94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016c98:	f04f 3aff 	mov.w	sl, #4294967295
 8016c9c:	e7df      	b.n	8016c5e <_strtod_l+0xe6>
 8016c9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ca0:	1c5a      	adds	r2, r3, #1
 8016ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016ca4:	785b      	ldrb	r3, [r3, #1]
 8016ca6:	2b30      	cmp	r3, #48	@ 0x30
 8016ca8:	d0f9      	beq.n	8016c9e <_strtod_l+0x126>
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d09d      	beq.n	8016bea <_strtod_l+0x72>
 8016cae:	2301      	movs	r3, #1
 8016cb0:	2700      	movs	r7, #0
 8016cb2:	9308      	str	r3, [sp, #32]
 8016cb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8016cb8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016cba:	46b9      	mov	r9, r7
 8016cbc:	220a      	movs	r2, #10
 8016cbe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016cc0:	7805      	ldrb	r5, [r0, #0]
 8016cc2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016cc6:	b2d9      	uxtb	r1, r3
 8016cc8:	2909      	cmp	r1, #9
 8016cca:	d928      	bls.n	8016d1e <_strtod_l+0x1a6>
 8016ccc:	494f      	ldr	r1, [pc, #316]	@ (8016e0c <_strtod_l+0x294>)
 8016cce:	2201      	movs	r2, #1
 8016cd0:	f001 f838 	bl	8017d44 <strncmp>
 8016cd4:	2800      	cmp	r0, #0
 8016cd6:	d032      	beq.n	8016d3e <_strtod_l+0x1c6>
 8016cd8:	2000      	movs	r0, #0
 8016cda:	462a      	mov	r2, r5
 8016cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8016cde:	464d      	mov	r5, r9
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	2a65      	cmp	r2, #101	@ 0x65
 8016ce4:	d001      	beq.n	8016cea <_strtod_l+0x172>
 8016ce6:	2a45      	cmp	r2, #69	@ 0x45
 8016ce8:	d114      	bne.n	8016d14 <_strtod_l+0x19c>
 8016cea:	b91d      	cbnz	r5, 8016cf4 <_strtod_l+0x17c>
 8016cec:	9a08      	ldr	r2, [sp, #32]
 8016cee:	4302      	orrs	r2, r0
 8016cf0:	d096      	beq.n	8016c20 <_strtod_l+0xa8>
 8016cf2:	2500      	movs	r5, #0
 8016cf4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016cf6:	1c62      	adds	r2, r4, #1
 8016cf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8016cfa:	7862      	ldrb	r2, [r4, #1]
 8016cfc:	2a2b      	cmp	r2, #43	@ 0x2b
 8016cfe:	d07a      	beq.n	8016df6 <_strtod_l+0x27e>
 8016d00:	2a2d      	cmp	r2, #45	@ 0x2d
 8016d02:	d07e      	beq.n	8016e02 <_strtod_l+0x28a>
 8016d04:	f04f 0c00 	mov.w	ip, #0
 8016d08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016d0c:	2909      	cmp	r1, #9
 8016d0e:	f240 8085 	bls.w	8016e1c <_strtod_l+0x2a4>
 8016d12:	9419      	str	r4, [sp, #100]	@ 0x64
 8016d14:	f04f 0800 	mov.w	r8, #0
 8016d18:	e0a5      	b.n	8016e66 <_strtod_l+0x2ee>
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	e7c8      	b.n	8016cb0 <_strtod_l+0x138>
 8016d1e:	f1b9 0f08 	cmp.w	r9, #8
 8016d22:	bfd8      	it	le
 8016d24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016d26:	f100 0001 	add.w	r0, r0, #1
 8016d2a:	bfda      	itte	le
 8016d2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016d30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016d32:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016d36:	f109 0901 	add.w	r9, r9, #1
 8016d3a:	9019      	str	r0, [sp, #100]	@ 0x64
 8016d3c:	e7bf      	b.n	8016cbe <_strtod_l+0x146>
 8016d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d40:	1c5a      	adds	r2, r3, #1
 8016d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d44:	785a      	ldrb	r2, [r3, #1]
 8016d46:	f1b9 0f00 	cmp.w	r9, #0
 8016d4a:	d03b      	beq.n	8016dc4 <_strtod_l+0x24c>
 8016d4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d4e:	464d      	mov	r5, r9
 8016d50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016d54:	2b09      	cmp	r3, #9
 8016d56:	d912      	bls.n	8016d7e <_strtod_l+0x206>
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e7c2      	b.n	8016ce2 <_strtod_l+0x16a>
 8016d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d5e:	1c5a      	adds	r2, r3, #1
 8016d60:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d62:	785a      	ldrb	r2, [r3, #1]
 8016d64:	3001      	adds	r0, #1
 8016d66:	2a30      	cmp	r2, #48	@ 0x30
 8016d68:	d0f8      	beq.n	8016d5c <_strtod_l+0x1e4>
 8016d6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016d6e:	2b08      	cmp	r3, #8
 8016d70:	f200 84d2 	bhi.w	8017718 <_strtod_l+0xba0>
 8016d74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d76:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d78:	2000      	movs	r0, #0
 8016d7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8016d7c:	4605      	mov	r5, r0
 8016d7e:	3a30      	subs	r2, #48	@ 0x30
 8016d80:	f100 0301 	add.w	r3, r0, #1
 8016d84:	d018      	beq.n	8016db8 <_strtod_l+0x240>
 8016d86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016d88:	4419      	add	r1, r3
 8016d8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8016d8c:	462e      	mov	r6, r5
 8016d8e:	f04f 0e0a 	mov.w	lr, #10
 8016d92:	1c71      	adds	r1, r6, #1
 8016d94:	eba1 0c05 	sub.w	ip, r1, r5
 8016d98:	4563      	cmp	r3, ip
 8016d9a:	dc15      	bgt.n	8016dc8 <_strtod_l+0x250>
 8016d9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016da0:	182b      	adds	r3, r5, r0
 8016da2:	2b08      	cmp	r3, #8
 8016da4:	f105 0501 	add.w	r5, r5, #1
 8016da8:	4405      	add	r5, r0
 8016daa:	dc1a      	bgt.n	8016de2 <_strtod_l+0x26a>
 8016dac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016dae:	230a      	movs	r3, #10
 8016db0:	fb03 2301 	mla	r3, r3, r1, r2
 8016db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016db6:	2300      	movs	r3, #0
 8016db8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016dba:	1c51      	adds	r1, r2, #1
 8016dbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8016dbe:	7852      	ldrb	r2, [r2, #1]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	e7c5      	b.n	8016d50 <_strtod_l+0x1d8>
 8016dc4:	4648      	mov	r0, r9
 8016dc6:	e7ce      	b.n	8016d66 <_strtod_l+0x1ee>
 8016dc8:	2e08      	cmp	r6, #8
 8016dca:	dc05      	bgt.n	8016dd8 <_strtod_l+0x260>
 8016dcc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016dce:	fb0e f606 	mul.w	r6, lr, r6
 8016dd2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016dd4:	460e      	mov	r6, r1
 8016dd6:	e7dc      	b.n	8016d92 <_strtod_l+0x21a>
 8016dd8:	2910      	cmp	r1, #16
 8016dda:	bfd8      	it	le
 8016ddc:	fb0e f707 	mulle.w	r7, lr, r7
 8016de0:	e7f8      	b.n	8016dd4 <_strtod_l+0x25c>
 8016de2:	2b0f      	cmp	r3, #15
 8016de4:	bfdc      	itt	le
 8016de6:	230a      	movle	r3, #10
 8016de8:	fb03 2707 	mlale	r7, r3, r7, r2
 8016dec:	e7e3      	b.n	8016db6 <_strtod_l+0x23e>
 8016dee:	2300      	movs	r3, #0
 8016df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8016df2:	2301      	movs	r3, #1
 8016df4:	e77a      	b.n	8016cec <_strtod_l+0x174>
 8016df6:	f04f 0c00 	mov.w	ip, #0
 8016dfa:	1ca2      	adds	r2, r4, #2
 8016dfc:	9219      	str	r2, [sp, #100]	@ 0x64
 8016dfe:	78a2      	ldrb	r2, [r4, #2]
 8016e00:	e782      	b.n	8016d08 <_strtod_l+0x190>
 8016e02:	f04f 0c01 	mov.w	ip, #1
 8016e06:	e7f8      	b.n	8016dfa <_strtod_l+0x282>
 8016e08:	0801b6cc 	.word	0x0801b6cc
 8016e0c:	0801b4ff 	.word	0x0801b4ff
 8016e10:	7ff00000 	.word	0x7ff00000
 8016e14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e16:	1c51      	adds	r1, r2, #1
 8016e18:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e1a:	7852      	ldrb	r2, [r2, #1]
 8016e1c:	2a30      	cmp	r2, #48	@ 0x30
 8016e1e:	d0f9      	beq.n	8016e14 <_strtod_l+0x29c>
 8016e20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016e24:	2908      	cmp	r1, #8
 8016e26:	f63f af75 	bhi.w	8016d14 <_strtod_l+0x19c>
 8016e2a:	3a30      	subs	r2, #48	@ 0x30
 8016e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e30:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016e32:	f04f 080a 	mov.w	r8, #10
 8016e36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e38:	1c56      	adds	r6, r2, #1
 8016e3a:	9619      	str	r6, [sp, #100]	@ 0x64
 8016e3c:	7852      	ldrb	r2, [r2, #1]
 8016e3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016e42:	f1be 0f09 	cmp.w	lr, #9
 8016e46:	d939      	bls.n	8016ebc <_strtod_l+0x344>
 8016e48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016e4a:	1a76      	subs	r6, r6, r1
 8016e4c:	2e08      	cmp	r6, #8
 8016e4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016e52:	dc03      	bgt.n	8016e5c <_strtod_l+0x2e4>
 8016e54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016e56:	4588      	cmp	r8, r1
 8016e58:	bfa8      	it	ge
 8016e5a:	4688      	movge	r8, r1
 8016e5c:	f1bc 0f00 	cmp.w	ip, #0
 8016e60:	d001      	beq.n	8016e66 <_strtod_l+0x2ee>
 8016e62:	f1c8 0800 	rsb	r8, r8, #0
 8016e66:	2d00      	cmp	r5, #0
 8016e68:	d14e      	bne.n	8016f08 <_strtod_l+0x390>
 8016e6a:	9908      	ldr	r1, [sp, #32]
 8016e6c:	4308      	orrs	r0, r1
 8016e6e:	f47f aebc 	bne.w	8016bea <_strtod_l+0x72>
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f47f aed4 	bne.w	8016c20 <_strtod_l+0xa8>
 8016e78:	2a69      	cmp	r2, #105	@ 0x69
 8016e7a:	d028      	beq.n	8016ece <_strtod_l+0x356>
 8016e7c:	dc25      	bgt.n	8016eca <_strtod_l+0x352>
 8016e7e:	2a49      	cmp	r2, #73	@ 0x49
 8016e80:	d025      	beq.n	8016ece <_strtod_l+0x356>
 8016e82:	2a4e      	cmp	r2, #78	@ 0x4e
 8016e84:	f47f aecc 	bne.w	8016c20 <_strtod_l+0xa8>
 8016e88:	499a      	ldr	r1, [pc, #616]	@ (80170f4 <_strtod_l+0x57c>)
 8016e8a:	a819      	add	r0, sp, #100	@ 0x64
 8016e8c:	f001 fa64 	bl	8018358 <__match>
 8016e90:	2800      	cmp	r0, #0
 8016e92:	f43f aec5 	beq.w	8016c20 <_strtod_l+0xa8>
 8016e96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	2b28      	cmp	r3, #40	@ 0x28
 8016e9c:	d12e      	bne.n	8016efc <_strtod_l+0x384>
 8016e9e:	4996      	ldr	r1, [pc, #600]	@ (80170f8 <_strtod_l+0x580>)
 8016ea0:	aa1c      	add	r2, sp, #112	@ 0x70
 8016ea2:	a819      	add	r0, sp, #100	@ 0x64
 8016ea4:	f001 fa6c 	bl	8018380 <__hexnan>
 8016ea8:	2805      	cmp	r0, #5
 8016eaa:	d127      	bne.n	8016efc <_strtod_l+0x384>
 8016eac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016eae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016eb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016eb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016eba:	e696      	b.n	8016bea <_strtod_l+0x72>
 8016ebc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ebe:	fb08 2101 	mla	r1, r8, r1, r2
 8016ec2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ec8:	e7b5      	b.n	8016e36 <_strtod_l+0x2be>
 8016eca:	2a6e      	cmp	r2, #110	@ 0x6e
 8016ecc:	e7da      	b.n	8016e84 <_strtod_l+0x30c>
 8016ece:	498b      	ldr	r1, [pc, #556]	@ (80170fc <_strtod_l+0x584>)
 8016ed0:	a819      	add	r0, sp, #100	@ 0x64
 8016ed2:	f001 fa41 	bl	8018358 <__match>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	f43f aea2 	beq.w	8016c20 <_strtod_l+0xa8>
 8016edc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ede:	4988      	ldr	r1, [pc, #544]	@ (8017100 <_strtod_l+0x588>)
 8016ee0:	3b01      	subs	r3, #1
 8016ee2:	a819      	add	r0, sp, #100	@ 0x64
 8016ee4:	9319      	str	r3, [sp, #100]	@ 0x64
 8016ee6:	f001 fa37 	bl	8018358 <__match>
 8016eea:	b910      	cbnz	r0, 8016ef2 <_strtod_l+0x37a>
 8016eec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016eee:	3301      	adds	r3, #1
 8016ef0:	9319      	str	r3, [sp, #100]	@ 0x64
 8016ef2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8017110 <_strtod_l+0x598>
 8016ef6:	f04f 0a00 	mov.w	sl, #0
 8016efa:	e676      	b.n	8016bea <_strtod_l+0x72>
 8016efc:	4881      	ldr	r0, [pc, #516]	@ (8017104 <_strtod_l+0x58c>)
 8016efe:	f000 ff67 	bl	8017dd0 <nan>
 8016f02:	ec5b ab10 	vmov	sl, fp, d0
 8016f06:	e670      	b.n	8016bea <_strtod_l+0x72>
 8016f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016f0c:	eba8 0303 	sub.w	r3, r8, r3
 8016f10:	f1b9 0f00 	cmp.w	r9, #0
 8016f14:	bf08      	it	eq
 8016f16:	46a9      	moveq	r9, r5
 8016f18:	2d10      	cmp	r5, #16
 8016f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f1c:	462c      	mov	r4, r5
 8016f1e:	bfa8      	it	ge
 8016f20:	2410      	movge	r4, #16
 8016f22:	f7e9 fb17 	bl	8000554 <__aeabi_ui2d>
 8016f26:	2d09      	cmp	r5, #9
 8016f28:	4682      	mov	sl, r0
 8016f2a:	468b      	mov	fp, r1
 8016f2c:	dc13      	bgt.n	8016f56 <_strtod_l+0x3de>
 8016f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	f43f ae5a 	beq.w	8016bea <_strtod_l+0x72>
 8016f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f38:	dd78      	ble.n	801702c <_strtod_l+0x4b4>
 8016f3a:	2b16      	cmp	r3, #22
 8016f3c:	dc5f      	bgt.n	8016ffe <_strtod_l+0x486>
 8016f3e:	4972      	ldr	r1, [pc, #456]	@ (8017108 <_strtod_l+0x590>)
 8016f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f48:	4652      	mov	r2, sl
 8016f4a:	465b      	mov	r3, fp
 8016f4c:	f7e9 fb7c 	bl	8000648 <__aeabi_dmul>
 8016f50:	4682      	mov	sl, r0
 8016f52:	468b      	mov	fp, r1
 8016f54:	e649      	b.n	8016bea <_strtod_l+0x72>
 8016f56:	4b6c      	ldr	r3, [pc, #432]	@ (8017108 <_strtod_l+0x590>)
 8016f58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016f5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016f60:	f7e9 fb72 	bl	8000648 <__aeabi_dmul>
 8016f64:	4682      	mov	sl, r0
 8016f66:	4638      	mov	r0, r7
 8016f68:	468b      	mov	fp, r1
 8016f6a:	f7e9 faf3 	bl	8000554 <__aeabi_ui2d>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	460b      	mov	r3, r1
 8016f72:	4650      	mov	r0, sl
 8016f74:	4659      	mov	r1, fp
 8016f76:	f7e9 f9b1 	bl	80002dc <__adddf3>
 8016f7a:	2d0f      	cmp	r5, #15
 8016f7c:	4682      	mov	sl, r0
 8016f7e:	468b      	mov	fp, r1
 8016f80:	ddd5      	ble.n	8016f2e <_strtod_l+0x3b6>
 8016f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f84:	1b2c      	subs	r4, r5, r4
 8016f86:	441c      	add	r4, r3
 8016f88:	2c00      	cmp	r4, #0
 8016f8a:	f340 8093 	ble.w	80170b4 <_strtod_l+0x53c>
 8016f8e:	f014 030f 	ands.w	r3, r4, #15
 8016f92:	d00a      	beq.n	8016faa <_strtod_l+0x432>
 8016f94:	495c      	ldr	r1, [pc, #368]	@ (8017108 <_strtod_l+0x590>)
 8016f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f9a:	4652      	mov	r2, sl
 8016f9c:	465b      	mov	r3, fp
 8016f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fa2:	f7e9 fb51 	bl	8000648 <__aeabi_dmul>
 8016fa6:	4682      	mov	sl, r0
 8016fa8:	468b      	mov	fp, r1
 8016faa:	f034 040f 	bics.w	r4, r4, #15
 8016fae:	d073      	beq.n	8017098 <_strtod_l+0x520>
 8016fb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016fb4:	dd49      	ble.n	801704a <_strtod_l+0x4d2>
 8016fb6:	2400      	movs	r4, #0
 8016fb8:	46a0      	mov	r8, r4
 8016fba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016fbc:	46a1      	mov	r9, r4
 8016fbe:	9a05      	ldr	r2, [sp, #20]
 8016fc0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8017110 <_strtod_l+0x598>
 8016fc4:	2322      	movs	r3, #34	@ 0x22
 8016fc6:	6013      	str	r3, [r2, #0]
 8016fc8:	f04f 0a00 	mov.w	sl, #0
 8016fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f43f ae0b 	beq.w	8016bea <_strtod_l+0x72>
 8016fd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fd6:	9805      	ldr	r0, [sp, #20]
 8016fd8:	f7ff f946 	bl	8016268 <_Bfree>
 8016fdc:	9805      	ldr	r0, [sp, #20]
 8016fde:	4649      	mov	r1, r9
 8016fe0:	f7ff f942 	bl	8016268 <_Bfree>
 8016fe4:	9805      	ldr	r0, [sp, #20]
 8016fe6:	4641      	mov	r1, r8
 8016fe8:	f7ff f93e 	bl	8016268 <_Bfree>
 8016fec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016fee:	9805      	ldr	r0, [sp, #20]
 8016ff0:	f7ff f93a 	bl	8016268 <_Bfree>
 8016ff4:	9805      	ldr	r0, [sp, #20]
 8016ff6:	4621      	mov	r1, r4
 8016ff8:	f7ff f936 	bl	8016268 <_Bfree>
 8016ffc:	e5f5      	b.n	8016bea <_strtod_l+0x72>
 8016ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017000:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017004:	4293      	cmp	r3, r2
 8017006:	dbbc      	blt.n	8016f82 <_strtod_l+0x40a>
 8017008:	4c3f      	ldr	r4, [pc, #252]	@ (8017108 <_strtod_l+0x590>)
 801700a:	f1c5 050f 	rsb	r5, r5, #15
 801700e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017012:	4652      	mov	r2, sl
 8017014:	465b      	mov	r3, fp
 8017016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801701a:	f7e9 fb15 	bl	8000648 <__aeabi_dmul>
 801701e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017020:	1b5d      	subs	r5, r3, r5
 8017022:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017026:	e9d4 2300 	ldrd	r2, r3, [r4]
 801702a:	e78f      	b.n	8016f4c <_strtod_l+0x3d4>
 801702c:	3316      	adds	r3, #22
 801702e:	dba8      	blt.n	8016f82 <_strtod_l+0x40a>
 8017030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017032:	eba3 0808 	sub.w	r8, r3, r8
 8017036:	4b34      	ldr	r3, [pc, #208]	@ (8017108 <_strtod_l+0x590>)
 8017038:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801703c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017040:	4650      	mov	r0, sl
 8017042:	4659      	mov	r1, fp
 8017044:	f7e9 fc2a 	bl	800089c <__aeabi_ddiv>
 8017048:	e782      	b.n	8016f50 <_strtod_l+0x3d8>
 801704a:	2300      	movs	r3, #0
 801704c:	4f2f      	ldr	r7, [pc, #188]	@ (801710c <_strtod_l+0x594>)
 801704e:	1124      	asrs	r4, r4, #4
 8017050:	4650      	mov	r0, sl
 8017052:	4659      	mov	r1, fp
 8017054:	461e      	mov	r6, r3
 8017056:	2c01      	cmp	r4, #1
 8017058:	dc21      	bgt.n	801709e <_strtod_l+0x526>
 801705a:	b10b      	cbz	r3, 8017060 <_strtod_l+0x4e8>
 801705c:	4682      	mov	sl, r0
 801705e:	468b      	mov	fp, r1
 8017060:	492a      	ldr	r1, [pc, #168]	@ (801710c <_strtod_l+0x594>)
 8017062:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8017066:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801706a:	4652      	mov	r2, sl
 801706c:	465b      	mov	r3, fp
 801706e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017072:	f7e9 fae9 	bl	8000648 <__aeabi_dmul>
 8017076:	4b26      	ldr	r3, [pc, #152]	@ (8017110 <_strtod_l+0x598>)
 8017078:	460a      	mov	r2, r1
 801707a:	400b      	ands	r3, r1
 801707c:	4925      	ldr	r1, [pc, #148]	@ (8017114 <_strtod_l+0x59c>)
 801707e:	428b      	cmp	r3, r1
 8017080:	4682      	mov	sl, r0
 8017082:	d898      	bhi.n	8016fb6 <_strtod_l+0x43e>
 8017084:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017088:	428b      	cmp	r3, r1
 801708a:	bf86      	itte	hi
 801708c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8017118 <_strtod_l+0x5a0>
 8017090:	f04f 3aff 	movhi.w	sl, #4294967295
 8017094:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017098:	2300      	movs	r3, #0
 801709a:	9308      	str	r3, [sp, #32]
 801709c:	e076      	b.n	801718c <_strtod_l+0x614>
 801709e:	07e2      	lsls	r2, r4, #31
 80170a0:	d504      	bpl.n	80170ac <_strtod_l+0x534>
 80170a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80170a6:	f7e9 facf 	bl	8000648 <__aeabi_dmul>
 80170aa:	2301      	movs	r3, #1
 80170ac:	3601      	adds	r6, #1
 80170ae:	1064      	asrs	r4, r4, #1
 80170b0:	3708      	adds	r7, #8
 80170b2:	e7d0      	b.n	8017056 <_strtod_l+0x4de>
 80170b4:	d0f0      	beq.n	8017098 <_strtod_l+0x520>
 80170b6:	4264      	negs	r4, r4
 80170b8:	f014 020f 	ands.w	r2, r4, #15
 80170bc:	d00a      	beq.n	80170d4 <_strtod_l+0x55c>
 80170be:	4b12      	ldr	r3, [pc, #72]	@ (8017108 <_strtod_l+0x590>)
 80170c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170c4:	4650      	mov	r0, sl
 80170c6:	4659      	mov	r1, fp
 80170c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170cc:	f7e9 fbe6 	bl	800089c <__aeabi_ddiv>
 80170d0:	4682      	mov	sl, r0
 80170d2:	468b      	mov	fp, r1
 80170d4:	1124      	asrs	r4, r4, #4
 80170d6:	d0df      	beq.n	8017098 <_strtod_l+0x520>
 80170d8:	2c1f      	cmp	r4, #31
 80170da:	dd1f      	ble.n	801711c <_strtod_l+0x5a4>
 80170dc:	2400      	movs	r4, #0
 80170de:	46a0      	mov	r8, r4
 80170e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80170e2:	46a1      	mov	r9, r4
 80170e4:	9a05      	ldr	r2, [sp, #20]
 80170e6:	2322      	movs	r3, #34	@ 0x22
 80170e8:	f04f 0a00 	mov.w	sl, #0
 80170ec:	f04f 0b00 	mov.w	fp, #0
 80170f0:	6013      	str	r3, [r2, #0]
 80170f2:	e76b      	b.n	8016fcc <_strtod_l+0x454>
 80170f4:	0801b3ed 	.word	0x0801b3ed
 80170f8:	0801b6b8 	.word	0x0801b6b8
 80170fc:	0801b3e5 	.word	0x0801b3e5
 8017100:	0801b41c 	.word	0x0801b41c
 8017104:	0801b555 	.word	0x0801b555
 8017108:	0801b5f0 	.word	0x0801b5f0
 801710c:	0801b5c8 	.word	0x0801b5c8
 8017110:	7ff00000 	.word	0x7ff00000
 8017114:	7ca00000 	.word	0x7ca00000
 8017118:	7fefffff 	.word	0x7fefffff
 801711c:	f014 0310 	ands.w	r3, r4, #16
 8017120:	bf18      	it	ne
 8017122:	236a      	movne	r3, #106	@ 0x6a
 8017124:	4ea9      	ldr	r6, [pc, #676]	@ (80173cc <_strtod_l+0x854>)
 8017126:	9308      	str	r3, [sp, #32]
 8017128:	4650      	mov	r0, sl
 801712a:	4659      	mov	r1, fp
 801712c:	2300      	movs	r3, #0
 801712e:	07e7      	lsls	r7, r4, #31
 8017130:	d504      	bpl.n	801713c <_strtod_l+0x5c4>
 8017132:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017136:	f7e9 fa87 	bl	8000648 <__aeabi_dmul>
 801713a:	2301      	movs	r3, #1
 801713c:	1064      	asrs	r4, r4, #1
 801713e:	f106 0608 	add.w	r6, r6, #8
 8017142:	d1f4      	bne.n	801712e <_strtod_l+0x5b6>
 8017144:	b10b      	cbz	r3, 801714a <_strtod_l+0x5d2>
 8017146:	4682      	mov	sl, r0
 8017148:	468b      	mov	fp, r1
 801714a:	9b08      	ldr	r3, [sp, #32]
 801714c:	b1b3      	cbz	r3, 801717c <_strtod_l+0x604>
 801714e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017152:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017156:	2b00      	cmp	r3, #0
 8017158:	4659      	mov	r1, fp
 801715a:	dd0f      	ble.n	801717c <_strtod_l+0x604>
 801715c:	2b1f      	cmp	r3, #31
 801715e:	dd56      	ble.n	801720e <_strtod_l+0x696>
 8017160:	2b34      	cmp	r3, #52	@ 0x34
 8017162:	bfde      	ittt	le
 8017164:	f04f 33ff 	movle.w	r3, #4294967295
 8017168:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801716c:	4093      	lslle	r3, r2
 801716e:	f04f 0a00 	mov.w	sl, #0
 8017172:	bfcc      	ite	gt
 8017174:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017178:	ea03 0b01 	andle.w	fp, r3, r1
 801717c:	2200      	movs	r2, #0
 801717e:	2300      	movs	r3, #0
 8017180:	4650      	mov	r0, sl
 8017182:	4659      	mov	r1, fp
 8017184:	f7e9 fcc8 	bl	8000b18 <__aeabi_dcmpeq>
 8017188:	2800      	cmp	r0, #0
 801718a:	d1a7      	bne.n	80170dc <_strtod_l+0x564>
 801718c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801718e:	9300      	str	r3, [sp, #0]
 8017190:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017192:	9805      	ldr	r0, [sp, #20]
 8017194:	462b      	mov	r3, r5
 8017196:	464a      	mov	r2, r9
 8017198:	f7ff f8ce 	bl	8016338 <__s2b>
 801719c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801719e:	2800      	cmp	r0, #0
 80171a0:	f43f af09 	beq.w	8016fb6 <_strtod_l+0x43e>
 80171a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	eba3 0308 	sub.w	r3, r3, r8
 80171ae:	bfa8      	it	ge
 80171b0:	2300      	movge	r3, #0
 80171b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80171b4:	2400      	movs	r4, #0
 80171b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80171ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80171bc:	46a0      	mov	r8, r4
 80171be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80171c0:	9805      	ldr	r0, [sp, #20]
 80171c2:	6859      	ldr	r1, [r3, #4]
 80171c4:	f7ff f810 	bl	80161e8 <_Balloc>
 80171c8:	4681      	mov	r9, r0
 80171ca:	2800      	cmp	r0, #0
 80171cc:	f43f aef7 	beq.w	8016fbe <_strtod_l+0x446>
 80171d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80171d2:	691a      	ldr	r2, [r3, #16]
 80171d4:	3202      	adds	r2, #2
 80171d6:	f103 010c 	add.w	r1, r3, #12
 80171da:	0092      	lsls	r2, r2, #2
 80171dc:	300c      	adds	r0, #12
 80171de:	f7fe f894 	bl	801530a <memcpy>
 80171e2:	ec4b ab10 	vmov	d0, sl, fp
 80171e6:	9805      	ldr	r0, [sp, #20]
 80171e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80171ea:	a91b      	add	r1, sp, #108	@ 0x6c
 80171ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80171f0:	f7ff fbd6 	bl	80169a0 <__d2b>
 80171f4:	901a      	str	r0, [sp, #104]	@ 0x68
 80171f6:	2800      	cmp	r0, #0
 80171f8:	f43f aee1 	beq.w	8016fbe <_strtod_l+0x446>
 80171fc:	9805      	ldr	r0, [sp, #20]
 80171fe:	2101      	movs	r1, #1
 8017200:	f7ff f930 	bl	8016464 <__i2b>
 8017204:	4680      	mov	r8, r0
 8017206:	b948      	cbnz	r0, 801721c <_strtod_l+0x6a4>
 8017208:	f04f 0800 	mov.w	r8, #0
 801720c:	e6d7      	b.n	8016fbe <_strtod_l+0x446>
 801720e:	f04f 32ff 	mov.w	r2, #4294967295
 8017212:	fa02 f303 	lsl.w	r3, r2, r3
 8017216:	ea03 0a0a 	and.w	sl, r3, sl
 801721a:	e7af      	b.n	801717c <_strtod_l+0x604>
 801721c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801721e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017220:	2d00      	cmp	r5, #0
 8017222:	bfab      	itete	ge
 8017224:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017226:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017228:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801722a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801722c:	bfac      	ite	ge
 801722e:	18ef      	addge	r7, r5, r3
 8017230:	1b5e      	sublt	r6, r3, r5
 8017232:	9b08      	ldr	r3, [sp, #32]
 8017234:	1aed      	subs	r5, r5, r3
 8017236:	4415      	add	r5, r2
 8017238:	4b65      	ldr	r3, [pc, #404]	@ (80173d0 <_strtod_l+0x858>)
 801723a:	3d01      	subs	r5, #1
 801723c:	429d      	cmp	r5, r3
 801723e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017242:	da50      	bge.n	80172e6 <_strtod_l+0x76e>
 8017244:	1b5b      	subs	r3, r3, r5
 8017246:	2b1f      	cmp	r3, #31
 8017248:	eba2 0203 	sub.w	r2, r2, r3
 801724c:	f04f 0101 	mov.w	r1, #1
 8017250:	dc3d      	bgt.n	80172ce <_strtod_l+0x756>
 8017252:	fa01 f303 	lsl.w	r3, r1, r3
 8017256:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017258:	2300      	movs	r3, #0
 801725a:	9310      	str	r3, [sp, #64]	@ 0x40
 801725c:	18bd      	adds	r5, r7, r2
 801725e:	9b08      	ldr	r3, [sp, #32]
 8017260:	42af      	cmp	r7, r5
 8017262:	4416      	add	r6, r2
 8017264:	441e      	add	r6, r3
 8017266:	463b      	mov	r3, r7
 8017268:	bfa8      	it	ge
 801726a:	462b      	movge	r3, r5
 801726c:	42b3      	cmp	r3, r6
 801726e:	bfa8      	it	ge
 8017270:	4633      	movge	r3, r6
 8017272:	2b00      	cmp	r3, #0
 8017274:	bfc2      	ittt	gt
 8017276:	1aed      	subgt	r5, r5, r3
 8017278:	1af6      	subgt	r6, r6, r3
 801727a:	1aff      	subgt	r7, r7, r3
 801727c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801727e:	2b00      	cmp	r3, #0
 8017280:	dd16      	ble.n	80172b0 <_strtod_l+0x738>
 8017282:	4641      	mov	r1, r8
 8017284:	9805      	ldr	r0, [sp, #20]
 8017286:	461a      	mov	r2, r3
 8017288:	f7ff f9a4 	bl	80165d4 <__pow5mult>
 801728c:	4680      	mov	r8, r0
 801728e:	2800      	cmp	r0, #0
 8017290:	d0ba      	beq.n	8017208 <_strtod_l+0x690>
 8017292:	4601      	mov	r1, r0
 8017294:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017296:	9805      	ldr	r0, [sp, #20]
 8017298:	f7ff f8fa 	bl	8016490 <__multiply>
 801729c:	900a      	str	r0, [sp, #40]	@ 0x28
 801729e:	2800      	cmp	r0, #0
 80172a0:	f43f ae8d 	beq.w	8016fbe <_strtod_l+0x446>
 80172a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172a6:	9805      	ldr	r0, [sp, #20]
 80172a8:	f7fe ffde 	bl	8016268 <_Bfree>
 80172ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80172b0:	2d00      	cmp	r5, #0
 80172b2:	dc1d      	bgt.n	80172f0 <_strtod_l+0x778>
 80172b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	dd23      	ble.n	8017302 <_strtod_l+0x78a>
 80172ba:	4649      	mov	r1, r9
 80172bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80172be:	9805      	ldr	r0, [sp, #20]
 80172c0:	f7ff f988 	bl	80165d4 <__pow5mult>
 80172c4:	4681      	mov	r9, r0
 80172c6:	b9e0      	cbnz	r0, 8017302 <_strtod_l+0x78a>
 80172c8:	f04f 0900 	mov.w	r9, #0
 80172cc:	e677      	b.n	8016fbe <_strtod_l+0x446>
 80172ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80172d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80172d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80172da:	35e2      	adds	r5, #226	@ 0xe2
 80172dc:	fa01 f305 	lsl.w	r3, r1, r5
 80172e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80172e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80172e4:	e7ba      	b.n	801725c <_strtod_l+0x6e4>
 80172e6:	2300      	movs	r3, #0
 80172e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80172ea:	2301      	movs	r3, #1
 80172ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172ee:	e7b5      	b.n	801725c <_strtod_l+0x6e4>
 80172f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172f2:	9805      	ldr	r0, [sp, #20]
 80172f4:	462a      	mov	r2, r5
 80172f6:	f7ff f9c7 	bl	8016688 <__lshift>
 80172fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d1d9      	bne.n	80172b4 <_strtod_l+0x73c>
 8017300:	e65d      	b.n	8016fbe <_strtod_l+0x446>
 8017302:	2e00      	cmp	r6, #0
 8017304:	dd07      	ble.n	8017316 <_strtod_l+0x79e>
 8017306:	4649      	mov	r1, r9
 8017308:	9805      	ldr	r0, [sp, #20]
 801730a:	4632      	mov	r2, r6
 801730c:	f7ff f9bc 	bl	8016688 <__lshift>
 8017310:	4681      	mov	r9, r0
 8017312:	2800      	cmp	r0, #0
 8017314:	d0d8      	beq.n	80172c8 <_strtod_l+0x750>
 8017316:	2f00      	cmp	r7, #0
 8017318:	dd08      	ble.n	801732c <_strtod_l+0x7b4>
 801731a:	4641      	mov	r1, r8
 801731c:	9805      	ldr	r0, [sp, #20]
 801731e:	463a      	mov	r2, r7
 8017320:	f7ff f9b2 	bl	8016688 <__lshift>
 8017324:	4680      	mov	r8, r0
 8017326:	2800      	cmp	r0, #0
 8017328:	f43f ae49 	beq.w	8016fbe <_strtod_l+0x446>
 801732c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801732e:	9805      	ldr	r0, [sp, #20]
 8017330:	464a      	mov	r2, r9
 8017332:	f7ff fa31 	bl	8016798 <__mdiff>
 8017336:	4604      	mov	r4, r0
 8017338:	2800      	cmp	r0, #0
 801733a:	f43f ae40 	beq.w	8016fbe <_strtod_l+0x446>
 801733e:	68c3      	ldr	r3, [r0, #12]
 8017340:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017342:	2300      	movs	r3, #0
 8017344:	60c3      	str	r3, [r0, #12]
 8017346:	4641      	mov	r1, r8
 8017348:	f7ff fa0a 	bl	8016760 <__mcmp>
 801734c:	2800      	cmp	r0, #0
 801734e:	da45      	bge.n	80173dc <_strtod_l+0x864>
 8017350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017352:	ea53 030a 	orrs.w	r3, r3, sl
 8017356:	d16b      	bne.n	8017430 <_strtod_l+0x8b8>
 8017358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801735c:	2b00      	cmp	r3, #0
 801735e:	d167      	bne.n	8017430 <_strtod_l+0x8b8>
 8017360:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017364:	0d1b      	lsrs	r3, r3, #20
 8017366:	051b      	lsls	r3, r3, #20
 8017368:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801736c:	d960      	bls.n	8017430 <_strtod_l+0x8b8>
 801736e:	6963      	ldr	r3, [r4, #20]
 8017370:	b913      	cbnz	r3, 8017378 <_strtod_l+0x800>
 8017372:	6923      	ldr	r3, [r4, #16]
 8017374:	2b01      	cmp	r3, #1
 8017376:	dd5b      	ble.n	8017430 <_strtod_l+0x8b8>
 8017378:	4621      	mov	r1, r4
 801737a:	2201      	movs	r2, #1
 801737c:	9805      	ldr	r0, [sp, #20]
 801737e:	f7ff f983 	bl	8016688 <__lshift>
 8017382:	4641      	mov	r1, r8
 8017384:	4604      	mov	r4, r0
 8017386:	f7ff f9eb 	bl	8016760 <__mcmp>
 801738a:	2800      	cmp	r0, #0
 801738c:	dd50      	ble.n	8017430 <_strtod_l+0x8b8>
 801738e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017392:	9a08      	ldr	r2, [sp, #32]
 8017394:	0d1b      	lsrs	r3, r3, #20
 8017396:	051b      	lsls	r3, r3, #20
 8017398:	2a00      	cmp	r2, #0
 801739a:	d06a      	beq.n	8017472 <_strtod_l+0x8fa>
 801739c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173a0:	d867      	bhi.n	8017472 <_strtod_l+0x8fa>
 80173a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80173a6:	f67f ae9d 	bls.w	80170e4 <_strtod_l+0x56c>
 80173aa:	4b0a      	ldr	r3, [pc, #40]	@ (80173d4 <_strtod_l+0x85c>)
 80173ac:	4650      	mov	r0, sl
 80173ae:	4659      	mov	r1, fp
 80173b0:	2200      	movs	r2, #0
 80173b2:	f7e9 f949 	bl	8000648 <__aeabi_dmul>
 80173b6:	4b08      	ldr	r3, [pc, #32]	@ (80173d8 <_strtod_l+0x860>)
 80173b8:	400b      	ands	r3, r1
 80173ba:	4682      	mov	sl, r0
 80173bc:	468b      	mov	fp, r1
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f47f ae08 	bne.w	8016fd4 <_strtod_l+0x45c>
 80173c4:	9a05      	ldr	r2, [sp, #20]
 80173c6:	2322      	movs	r3, #34	@ 0x22
 80173c8:	6013      	str	r3, [r2, #0]
 80173ca:	e603      	b.n	8016fd4 <_strtod_l+0x45c>
 80173cc:	0801b6e0 	.word	0x0801b6e0
 80173d0:	fffffc02 	.word	0xfffffc02
 80173d4:	39500000 	.word	0x39500000
 80173d8:	7ff00000 	.word	0x7ff00000
 80173dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80173e0:	d165      	bne.n	80174ae <_strtod_l+0x936>
 80173e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80173e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173e8:	b35a      	cbz	r2, 8017442 <_strtod_l+0x8ca>
 80173ea:	4a9f      	ldr	r2, [pc, #636]	@ (8017668 <_strtod_l+0xaf0>)
 80173ec:	4293      	cmp	r3, r2
 80173ee:	d12b      	bne.n	8017448 <_strtod_l+0x8d0>
 80173f0:	9b08      	ldr	r3, [sp, #32]
 80173f2:	4651      	mov	r1, sl
 80173f4:	b303      	cbz	r3, 8017438 <_strtod_l+0x8c0>
 80173f6:	4b9d      	ldr	r3, [pc, #628]	@ (801766c <_strtod_l+0xaf4>)
 80173f8:	465a      	mov	r2, fp
 80173fa:	4013      	ands	r3, r2
 80173fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017400:	f04f 32ff 	mov.w	r2, #4294967295
 8017404:	d81b      	bhi.n	801743e <_strtod_l+0x8c6>
 8017406:	0d1b      	lsrs	r3, r3, #20
 8017408:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801740c:	fa02 f303 	lsl.w	r3, r2, r3
 8017410:	4299      	cmp	r1, r3
 8017412:	d119      	bne.n	8017448 <_strtod_l+0x8d0>
 8017414:	4b96      	ldr	r3, [pc, #600]	@ (8017670 <_strtod_l+0xaf8>)
 8017416:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017418:	429a      	cmp	r2, r3
 801741a:	d102      	bne.n	8017422 <_strtod_l+0x8aa>
 801741c:	3101      	adds	r1, #1
 801741e:	f43f adce 	beq.w	8016fbe <_strtod_l+0x446>
 8017422:	4b92      	ldr	r3, [pc, #584]	@ (801766c <_strtod_l+0xaf4>)
 8017424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017426:	401a      	ands	r2, r3
 8017428:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801742c:	f04f 0a00 	mov.w	sl, #0
 8017430:	9b08      	ldr	r3, [sp, #32]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d1b9      	bne.n	80173aa <_strtod_l+0x832>
 8017436:	e5cd      	b.n	8016fd4 <_strtod_l+0x45c>
 8017438:	f04f 33ff 	mov.w	r3, #4294967295
 801743c:	e7e8      	b.n	8017410 <_strtod_l+0x898>
 801743e:	4613      	mov	r3, r2
 8017440:	e7e6      	b.n	8017410 <_strtod_l+0x898>
 8017442:	ea53 030a 	orrs.w	r3, r3, sl
 8017446:	d0a2      	beq.n	801738e <_strtod_l+0x816>
 8017448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801744a:	b1db      	cbz	r3, 8017484 <_strtod_l+0x90c>
 801744c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801744e:	4213      	tst	r3, r2
 8017450:	d0ee      	beq.n	8017430 <_strtod_l+0x8b8>
 8017452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017454:	9a08      	ldr	r2, [sp, #32]
 8017456:	4650      	mov	r0, sl
 8017458:	4659      	mov	r1, fp
 801745a:	b1bb      	cbz	r3, 801748c <_strtod_l+0x914>
 801745c:	f7ff fb6e 	bl	8016b3c <sulp>
 8017460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017464:	ec53 2b10 	vmov	r2, r3, d0
 8017468:	f7e8 ff38 	bl	80002dc <__adddf3>
 801746c:	4682      	mov	sl, r0
 801746e:	468b      	mov	fp, r1
 8017470:	e7de      	b.n	8017430 <_strtod_l+0x8b8>
 8017472:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017476:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801747a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801747e:	f04f 3aff 	mov.w	sl, #4294967295
 8017482:	e7d5      	b.n	8017430 <_strtod_l+0x8b8>
 8017484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017486:	ea13 0f0a 	tst.w	r3, sl
 801748a:	e7e1      	b.n	8017450 <_strtod_l+0x8d8>
 801748c:	f7ff fb56 	bl	8016b3c <sulp>
 8017490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017494:	ec53 2b10 	vmov	r2, r3, d0
 8017498:	f7e8 ff1e 	bl	80002d8 <__aeabi_dsub>
 801749c:	2200      	movs	r2, #0
 801749e:	2300      	movs	r3, #0
 80174a0:	4682      	mov	sl, r0
 80174a2:	468b      	mov	fp, r1
 80174a4:	f7e9 fb38 	bl	8000b18 <__aeabi_dcmpeq>
 80174a8:	2800      	cmp	r0, #0
 80174aa:	d0c1      	beq.n	8017430 <_strtod_l+0x8b8>
 80174ac:	e61a      	b.n	80170e4 <_strtod_l+0x56c>
 80174ae:	4641      	mov	r1, r8
 80174b0:	4620      	mov	r0, r4
 80174b2:	f7ff facd 	bl	8016a50 <__ratio>
 80174b6:	ec57 6b10 	vmov	r6, r7, d0
 80174ba:	2200      	movs	r2, #0
 80174bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80174c0:	4630      	mov	r0, r6
 80174c2:	4639      	mov	r1, r7
 80174c4:	f7e9 fb3c 	bl	8000b40 <__aeabi_dcmple>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d06f      	beq.n	80175ac <_strtod_l+0xa34>
 80174cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d17a      	bne.n	80175c8 <_strtod_l+0xa50>
 80174d2:	f1ba 0f00 	cmp.w	sl, #0
 80174d6:	d158      	bne.n	801758a <_strtod_l+0xa12>
 80174d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d15a      	bne.n	8017598 <_strtod_l+0xa20>
 80174e2:	4b64      	ldr	r3, [pc, #400]	@ (8017674 <_strtod_l+0xafc>)
 80174e4:	2200      	movs	r2, #0
 80174e6:	4630      	mov	r0, r6
 80174e8:	4639      	mov	r1, r7
 80174ea:	f7e9 fb1f 	bl	8000b2c <__aeabi_dcmplt>
 80174ee:	2800      	cmp	r0, #0
 80174f0:	d159      	bne.n	80175a6 <_strtod_l+0xa2e>
 80174f2:	4630      	mov	r0, r6
 80174f4:	4639      	mov	r1, r7
 80174f6:	4b60      	ldr	r3, [pc, #384]	@ (8017678 <_strtod_l+0xb00>)
 80174f8:	2200      	movs	r2, #0
 80174fa:	f7e9 f8a5 	bl	8000648 <__aeabi_dmul>
 80174fe:	4606      	mov	r6, r0
 8017500:	460f      	mov	r7, r1
 8017502:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017506:	9606      	str	r6, [sp, #24]
 8017508:	9307      	str	r3, [sp, #28]
 801750a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801750e:	4d57      	ldr	r5, [pc, #348]	@ (801766c <_strtod_l+0xaf4>)
 8017510:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017516:	401d      	ands	r5, r3
 8017518:	4b58      	ldr	r3, [pc, #352]	@ (801767c <_strtod_l+0xb04>)
 801751a:	429d      	cmp	r5, r3
 801751c:	f040 80b2 	bne.w	8017684 <_strtod_l+0xb0c>
 8017520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017522:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017526:	ec4b ab10 	vmov	d0, sl, fp
 801752a:	f7ff f9c9 	bl	80168c0 <__ulp>
 801752e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017532:	ec51 0b10 	vmov	r0, r1, d0
 8017536:	f7e9 f887 	bl	8000648 <__aeabi_dmul>
 801753a:	4652      	mov	r2, sl
 801753c:	465b      	mov	r3, fp
 801753e:	f7e8 fecd 	bl	80002dc <__adddf3>
 8017542:	460b      	mov	r3, r1
 8017544:	4949      	ldr	r1, [pc, #292]	@ (801766c <_strtod_l+0xaf4>)
 8017546:	4a4e      	ldr	r2, [pc, #312]	@ (8017680 <_strtod_l+0xb08>)
 8017548:	4019      	ands	r1, r3
 801754a:	4291      	cmp	r1, r2
 801754c:	4682      	mov	sl, r0
 801754e:	d942      	bls.n	80175d6 <_strtod_l+0xa5e>
 8017550:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017552:	4b47      	ldr	r3, [pc, #284]	@ (8017670 <_strtod_l+0xaf8>)
 8017554:	429a      	cmp	r2, r3
 8017556:	d103      	bne.n	8017560 <_strtod_l+0x9e8>
 8017558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801755a:	3301      	adds	r3, #1
 801755c:	f43f ad2f 	beq.w	8016fbe <_strtod_l+0x446>
 8017560:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017670 <_strtod_l+0xaf8>
 8017564:	f04f 3aff 	mov.w	sl, #4294967295
 8017568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801756a:	9805      	ldr	r0, [sp, #20]
 801756c:	f7fe fe7c 	bl	8016268 <_Bfree>
 8017570:	9805      	ldr	r0, [sp, #20]
 8017572:	4649      	mov	r1, r9
 8017574:	f7fe fe78 	bl	8016268 <_Bfree>
 8017578:	9805      	ldr	r0, [sp, #20]
 801757a:	4641      	mov	r1, r8
 801757c:	f7fe fe74 	bl	8016268 <_Bfree>
 8017580:	9805      	ldr	r0, [sp, #20]
 8017582:	4621      	mov	r1, r4
 8017584:	f7fe fe70 	bl	8016268 <_Bfree>
 8017588:	e619      	b.n	80171be <_strtod_l+0x646>
 801758a:	f1ba 0f01 	cmp.w	sl, #1
 801758e:	d103      	bne.n	8017598 <_strtod_l+0xa20>
 8017590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017592:	2b00      	cmp	r3, #0
 8017594:	f43f ada6 	beq.w	80170e4 <_strtod_l+0x56c>
 8017598:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017648 <_strtod_l+0xad0>
 801759c:	4f35      	ldr	r7, [pc, #212]	@ (8017674 <_strtod_l+0xafc>)
 801759e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80175a2:	2600      	movs	r6, #0
 80175a4:	e7b1      	b.n	801750a <_strtod_l+0x992>
 80175a6:	4f34      	ldr	r7, [pc, #208]	@ (8017678 <_strtod_l+0xb00>)
 80175a8:	2600      	movs	r6, #0
 80175aa:	e7aa      	b.n	8017502 <_strtod_l+0x98a>
 80175ac:	4b32      	ldr	r3, [pc, #200]	@ (8017678 <_strtod_l+0xb00>)
 80175ae:	4630      	mov	r0, r6
 80175b0:	4639      	mov	r1, r7
 80175b2:	2200      	movs	r2, #0
 80175b4:	f7e9 f848 	bl	8000648 <__aeabi_dmul>
 80175b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175ba:	4606      	mov	r6, r0
 80175bc:	460f      	mov	r7, r1
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d09f      	beq.n	8017502 <_strtod_l+0x98a>
 80175c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80175c6:	e7a0      	b.n	801750a <_strtod_l+0x992>
 80175c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017650 <_strtod_l+0xad8>
 80175cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80175d0:	ec57 6b17 	vmov	r6, r7, d7
 80175d4:	e799      	b.n	801750a <_strtod_l+0x992>
 80175d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80175da:	9b08      	ldr	r3, [sp, #32]
 80175dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1c1      	bne.n	8017568 <_strtod_l+0x9f0>
 80175e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80175e8:	0d1b      	lsrs	r3, r3, #20
 80175ea:	051b      	lsls	r3, r3, #20
 80175ec:	429d      	cmp	r5, r3
 80175ee:	d1bb      	bne.n	8017568 <_strtod_l+0x9f0>
 80175f0:	4630      	mov	r0, r6
 80175f2:	4639      	mov	r1, r7
 80175f4:	f7e9 fb88 	bl	8000d08 <__aeabi_d2lz>
 80175f8:	f7e8 fff8 	bl	80005ec <__aeabi_l2d>
 80175fc:	4602      	mov	r2, r0
 80175fe:	460b      	mov	r3, r1
 8017600:	4630      	mov	r0, r6
 8017602:	4639      	mov	r1, r7
 8017604:	f7e8 fe68 	bl	80002d8 <__aeabi_dsub>
 8017608:	460b      	mov	r3, r1
 801760a:	4602      	mov	r2, r0
 801760c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017610:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017616:	ea46 060a 	orr.w	r6, r6, sl
 801761a:	431e      	orrs	r6, r3
 801761c:	d06f      	beq.n	80176fe <_strtod_l+0xb86>
 801761e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017658 <_strtod_l+0xae0>)
 8017620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017624:	f7e9 fa82 	bl	8000b2c <__aeabi_dcmplt>
 8017628:	2800      	cmp	r0, #0
 801762a:	f47f acd3 	bne.w	8016fd4 <_strtod_l+0x45c>
 801762e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017660 <_strtod_l+0xae8>)
 8017630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017638:	f7e9 fa96 	bl	8000b68 <__aeabi_dcmpgt>
 801763c:	2800      	cmp	r0, #0
 801763e:	d093      	beq.n	8017568 <_strtod_l+0x9f0>
 8017640:	e4c8      	b.n	8016fd4 <_strtod_l+0x45c>
 8017642:	bf00      	nop
 8017644:	f3af 8000 	nop.w
 8017648:	00000000 	.word	0x00000000
 801764c:	bff00000 	.word	0xbff00000
 8017650:	00000000 	.word	0x00000000
 8017654:	3ff00000 	.word	0x3ff00000
 8017658:	94a03595 	.word	0x94a03595
 801765c:	3fdfffff 	.word	0x3fdfffff
 8017660:	35afe535 	.word	0x35afe535
 8017664:	3fe00000 	.word	0x3fe00000
 8017668:	000fffff 	.word	0x000fffff
 801766c:	7ff00000 	.word	0x7ff00000
 8017670:	7fefffff 	.word	0x7fefffff
 8017674:	3ff00000 	.word	0x3ff00000
 8017678:	3fe00000 	.word	0x3fe00000
 801767c:	7fe00000 	.word	0x7fe00000
 8017680:	7c9fffff 	.word	0x7c9fffff
 8017684:	9b08      	ldr	r3, [sp, #32]
 8017686:	b323      	cbz	r3, 80176d2 <_strtod_l+0xb5a>
 8017688:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801768c:	d821      	bhi.n	80176d2 <_strtod_l+0xb5a>
 801768e:	a328      	add	r3, pc, #160	@ (adr r3, 8017730 <_strtod_l+0xbb8>)
 8017690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017694:	4630      	mov	r0, r6
 8017696:	4639      	mov	r1, r7
 8017698:	f7e9 fa52 	bl	8000b40 <__aeabi_dcmple>
 801769c:	b1a0      	cbz	r0, 80176c8 <_strtod_l+0xb50>
 801769e:	4639      	mov	r1, r7
 80176a0:	4630      	mov	r0, r6
 80176a2:	f7e9 faa9 	bl	8000bf8 <__aeabi_d2uiz>
 80176a6:	2801      	cmp	r0, #1
 80176a8:	bf38      	it	cc
 80176aa:	2001      	movcc	r0, #1
 80176ac:	f7e8 ff52 	bl	8000554 <__aeabi_ui2d>
 80176b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176b2:	4606      	mov	r6, r0
 80176b4:	460f      	mov	r7, r1
 80176b6:	b9fb      	cbnz	r3, 80176f8 <_strtod_l+0xb80>
 80176b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80176bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80176be:	9315      	str	r3, [sp, #84]	@ 0x54
 80176c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80176c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80176c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80176ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80176ce:	1b5b      	subs	r3, r3, r5
 80176d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80176d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80176d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80176da:	f7ff f8f1 	bl	80168c0 <__ulp>
 80176de:	4650      	mov	r0, sl
 80176e0:	ec53 2b10 	vmov	r2, r3, d0
 80176e4:	4659      	mov	r1, fp
 80176e6:	f7e8 ffaf 	bl	8000648 <__aeabi_dmul>
 80176ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80176ee:	f7e8 fdf5 	bl	80002dc <__adddf3>
 80176f2:	4682      	mov	sl, r0
 80176f4:	468b      	mov	fp, r1
 80176f6:	e770      	b.n	80175da <_strtod_l+0xa62>
 80176f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80176fc:	e7e0      	b.n	80176c0 <_strtod_l+0xb48>
 80176fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8017738 <_strtod_l+0xbc0>)
 8017700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017704:	f7e9 fa12 	bl	8000b2c <__aeabi_dcmplt>
 8017708:	e798      	b.n	801763c <_strtod_l+0xac4>
 801770a:	2300      	movs	r3, #0
 801770c:	930e      	str	r3, [sp, #56]	@ 0x38
 801770e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017712:	6013      	str	r3, [r2, #0]
 8017714:	f7ff ba6d 	b.w	8016bf2 <_strtod_l+0x7a>
 8017718:	2a65      	cmp	r2, #101	@ 0x65
 801771a:	f43f ab68 	beq.w	8016dee <_strtod_l+0x276>
 801771e:	2a45      	cmp	r2, #69	@ 0x45
 8017720:	f43f ab65 	beq.w	8016dee <_strtod_l+0x276>
 8017724:	2301      	movs	r3, #1
 8017726:	f7ff bba0 	b.w	8016e6a <_strtod_l+0x2f2>
 801772a:	bf00      	nop
 801772c:	f3af 8000 	nop.w
 8017730:	ffc00000 	.word	0xffc00000
 8017734:	41dfffff 	.word	0x41dfffff
 8017738:	94a03595 	.word	0x94a03595
 801773c:	3fcfffff 	.word	0x3fcfffff

08017740 <_strtod_r>:
 8017740:	4b01      	ldr	r3, [pc, #4]	@ (8017748 <_strtod_r+0x8>)
 8017742:	f7ff ba19 	b.w	8016b78 <_strtod_l>
 8017746:	bf00      	nop
 8017748:	200000a4 	.word	0x200000a4

0801774c <_strtol_l.isra.0>:
 801774c:	2b24      	cmp	r3, #36	@ 0x24
 801774e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017752:	4686      	mov	lr, r0
 8017754:	4690      	mov	r8, r2
 8017756:	d801      	bhi.n	801775c <_strtol_l.isra.0+0x10>
 8017758:	2b01      	cmp	r3, #1
 801775a:	d106      	bne.n	801776a <_strtol_l.isra.0+0x1e>
 801775c:	f7fd fda8 	bl	80152b0 <__errno>
 8017760:	2316      	movs	r3, #22
 8017762:	6003      	str	r3, [r0, #0]
 8017764:	2000      	movs	r0, #0
 8017766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801776a:	4834      	ldr	r0, [pc, #208]	@ (801783c <_strtol_l.isra.0+0xf0>)
 801776c:	460d      	mov	r5, r1
 801776e:	462a      	mov	r2, r5
 8017770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017774:	5d06      	ldrb	r6, [r0, r4]
 8017776:	f016 0608 	ands.w	r6, r6, #8
 801777a:	d1f8      	bne.n	801776e <_strtol_l.isra.0+0x22>
 801777c:	2c2d      	cmp	r4, #45	@ 0x2d
 801777e:	d110      	bne.n	80177a2 <_strtol_l.isra.0+0x56>
 8017780:	782c      	ldrb	r4, [r5, #0]
 8017782:	2601      	movs	r6, #1
 8017784:	1c95      	adds	r5, r2, #2
 8017786:	f033 0210 	bics.w	r2, r3, #16
 801778a:	d115      	bne.n	80177b8 <_strtol_l.isra.0+0x6c>
 801778c:	2c30      	cmp	r4, #48	@ 0x30
 801778e:	d10d      	bne.n	80177ac <_strtol_l.isra.0+0x60>
 8017790:	782a      	ldrb	r2, [r5, #0]
 8017792:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017796:	2a58      	cmp	r2, #88	@ 0x58
 8017798:	d108      	bne.n	80177ac <_strtol_l.isra.0+0x60>
 801779a:	786c      	ldrb	r4, [r5, #1]
 801779c:	3502      	adds	r5, #2
 801779e:	2310      	movs	r3, #16
 80177a0:	e00a      	b.n	80177b8 <_strtol_l.isra.0+0x6c>
 80177a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80177a4:	bf04      	itt	eq
 80177a6:	782c      	ldrbeq	r4, [r5, #0]
 80177a8:	1c95      	addeq	r5, r2, #2
 80177aa:	e7ec      	b.n	8017786 <_strtol_l.isra.0+0x3a>
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d1f6      	bne.n	801779e <_strtol_l.isra.0+0x52>
 80177b0:	2c30      	cmp	r4, #48	@ 0x30
 80177b2:	bf14      	ite	ne
 80177b4:	230a      	movne	r3, #10
 80177b6:	2308      	moveq	r3, #8
 80177b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80177bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177c0:	2200      	movs	r2, #0
 80177c2:	fbbc f9f3 	udiv	r9, ip, r3
 80177c6:	4610      	mov	r0, r2
 80177c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80177cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80177d0:	2f09      	cmp	r7, #9
 80177d2:	d80f      	bhi.n	80177f4 <_strtol_l.isra.0+0xa8>
 80177d4:	463c      	mov	r4, r7
 80177d6:	42a3      	cmp	r3, r4
 80177d8:	dd1b      	ble.n	8017812 <_strtol_l.isra.0+0xc6>
 80177da:	1c57      	adds	r7, r2, #1
 80177dc:	d007      	beq.n	80177ee <_strtol_l.isra.0+0xa2>
 80177de:	4581      	cmp	r9, r0
 80177e0:	d314      	bcc.n	801780c <_strtol_l.isra.0+0xc0>
 80177e2:	d101      	bne.n	80177e8 <_strtol_l.isra.0+0x9c>
 80177e4:	45a2      	cmp	sl, r4
 80177e6:	db11      	blt.n	801780c <_strtol_l.isra.0+0xc0>
 80177e8:	fb00 4003 	mla	r0, r0, r3, r4
 80177ec:	2201      	movs	r2, #1
 80177ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177f2:	e7eb      	b.n	80177cc <_strtol_l.isra.0+0x80>
 80177f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80177f8:	2f19      	cmp	r7, #25
 80177fa:	d801      	bhi.n	8017800 <_strtol_l.isra.0+0xb4>
 80177fc:	3c37      	subs	r4, #55	@ 0x37
 80177fe:	e7ea      	b.n	80177d6 <_strtol_l.isra.0+0x8a>
 8017800:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017804:	2f19      	cmp	r7, #25
 8017806:	d804      	bhi.n	8017812 <_strtol_l.isra.0+0xc6>
 8017808:	3c57      	subs	r4, #87	@ 0x57
 801780a:	e7e4      	b.n	80177d6 <_strtol_l.isra.0+0x8a>
 801780c:	f04f 32ff 	mov.w	r2, #4294967295
 8017810:	e7ed      	b.n	80177ee <_strtol_l.isra.0+0xa2>
 8017812:	1c53      	adds	r3, r2, #1
 8017814:	d108      	bne.n	8017828 <_strtol_l.isra.0+0xdc>
 8017816:	2322      	movs	r3, #34	@ 0x22
 8017818:	f8ce 3000 	str.w	r3, [lr]
 801781c:	4660      	mov	r0, ip
 801781e:	f1b8 0f00 	cmp.w	r8, #0
 8017822:	d0a0      	beq.n	8017766 <_strtol_l.isra.0+0x1a>
 8017824:	1e69      	subs	r1, r5, #1
 8017826:	e006      	b.n	8017836 <_strtol_l.isra.0+0xea>
 8017828:	b106      	cbz	r6, 801782c <_strtol_l.isra.0+0xe0>
 801782a:	4240      	negs	r0, r0
 801782c:	f1b8 0f00 	cmp.w	r8, #0
 8017830:	d099      	beq.n	8017766 <_strtol_l.isra.0+0x1a>
 8017832:	2a00      	cmp	r2, #0
 8017834:	d1f6      	bne.n	8017824 <_strtol_l.isra.0+0xd8>
 8017836:	f8c8 1000 	str.w	r1, [r8]
 801783a:	e794      	b.n	8017766 <_strtol_l.isra.0+0x1a>
 801783c:	0801b709 	.word	0x0801b709

08017840 <_strtol_r>:
 8017840:	f7ff bf84 	b.w	801774c <_strtol_l.isra.0>

08017844 <__ssputs_r>:
 8017844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017848:	688e      	ldr	r6, [r1, #8]
 801784a:	461f      	mov	r7, r3
 801784c:	42be      	cmp	r6, r7
 801784e:	680b      	ldr	r3, [r1, #0]
 8017850:	4682      	mov	sl, r0
 8017852:	460c      	mov	r4, r1
 8017854:	4690      	mov	r8, r2
 8017856:	d82d      	bhi.n	80178b4 <__ssputs_r+0x70>
 8017858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801785c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017860:	d026      	beq.n	80178b0 <__ssputs_r+0x6c>
 8017862:	6965      	ldr	r5, [r4, #20]
 8017864:	6909      	ldr	r1, [r1, #16]
 8017866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801786a:	eba3 0901 	sub.w	r9, r3, r1
 801786e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017872:	1c7b      	adds	r3, r7, #1
 8017874:	444b      	add	r3, r9
 8017876:	106d      	asrs	r5, r5, #1
 8017878:	429d      	cmp	r5, r3
 801787a:	bf38      	it	cc
 801787c:	461d      	movcc	r5, r3
 801787e:	0553      	lsls	r3, r2, #21
 8017880:	d527      	bpl.n	80178d2 <__ssputs_r+0x8e>
 8017882:	4629      	mov	r1, r5
 8017884:	f7fe fc24 	bl	80160d0 <_malloc_r>
 8017888:	4606      	mov	r6, r0
 801788a:	b360      	cbz	r0, 80178e6 <__ssputs_r+0xa2>
 801788c:	6921      	ldr	r1, [r4, #16]
 801788e:	464a      	mov	r2, r9
 8017890:	f7fd fd3b 	bl	801530a <memcpy>
 8017894:	89a3      	ldrh	r3, [r4, #12]
 8017896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801789a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801789e:	81a3      	strh	r3, [r4, #12]
 80178a0:	6126      	str	r6, [r4, #16]
 80178a2:	6165      	str	r5, [r4, #20]
 80178a4:	444e      	add	r6, r9
 80178a6:	eba5 0509 	sub.w	r5, r5, r9
 80178aa:	6026      	str	r6, [r4, #0]
 80178ac:	60a5      	str	r5, [r4, #8]
 80178ae:	463e      	mov	r6, r7
 80178b0:	42be      	cmp	r6, r7
 80178b2:	d900      	bls.n	80178b6 <__ssputs_r+0x72>
 80178b4:	463e      	mov	r6, r7
 80178b6:	6820      	ldr	r0, [r4, #0]
 80178b8:	4632      	mov	r2, r6
 80178ba:	4641      	mov	r1, r8
 80178bc:	f000 fa28 	bl	8017d10 <memmove>
 80178c0:	68a3      	ldr	r3, [r4, #8]
 80178c2:	1b9b      	subs	r3, r3, r6
 80178c4:	60a3      	str	r3, [r4, #8]
 80178c6:	6823      	ldr	r3, [r4, #0]
 80178c8:	4433      	add	r3, r6
 80178ca:	6023      	str	r3, [r4, #0]
 80178cc:	2000      	movs	r0, #0
 80178ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178d2:	462a      	mov	r2, r5
 80178d4:	f000 fe01 	bl	80184da <_realloc_r>
 80178d8:	4606      	mov	r6, r0
 80178da:	2800      	cmp	r0, #0
 80178dc:	d1e0      	bne.n	80178a0 <__ssputs_r+0x5c>
 80178de:	6921      	ldr	r1, [r4, #16]
 80178e0:	4650      	mov	r0, sl
 80178e2:	f7fe fb81 	bl	8015fe8 <_free_r>
 80178e6:	230c      	movs	r3, #12
 80178e8:	f8ca 3000 	str.w	r3, [sl]
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178f2:	81a3      	strh	r3, [r4, #12]
 80178f4:	f04f 30ff 	mov.w	r0, #4294967295
 80178f8:	e7e9      	b.n	80178ce <__ssputs_r+0x8a>
	...

080178fc <_svfiprintf_r>:
 80178fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017900:	4698      	mov	r8, r3
 8017902:	898b      	ldrh	r3, [r1, #12]
 8017904:	061b      	lsls	r3, r3, #24
 8017906:	b09d      	sub	sp, #116	@ 0x74
 8017908:	4607      	mov	r7, r0
 801790a:	460d      	mov	r5, r1
 801790c:	4614      	mov	r4, r2
 801790e:	d510      	bpl.n	8017932 <_svfiprintf_r+0x36>
 8017910:	690b      	ldr	r3, [r1, #16]
 8017912:	b973      	cbnz	r3, 8017932 <_svfiprintf_r+0x36>
 8017914:	2140      	movs	r1, #64	@ 0x40
 8017916:	f7fe fbdb 	bl	80160d0 <_malloc_r>
 801791a:	6028      	str	r0, [r5, #0]
 801791c:	6128      	str	r0, [r5, #16]
 801791e:	b930      	cbnz	r0, 801792e <_svfiprintf_r+0x32>
 8017920:	230c      	movs	r3, #12
 8017922:	603b      	str	r3, [r7, #0]
 8017924:	f04f 30ff 	mov.w	r0, #4294967295
 8017928:	b01d      	add	sp, #116	@ 0x74
 801792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792e:	2340      	movs	r3, #64	@ 0x40
 8017930:	616b      	str	r3, [r5, #20]
 8017932:	2300      	movs	r3, #0
 8017934:	9309      	str	r3, [sp, #36]	@ 0x24
 8017936:	2320      	movs	r3, #32
 8017938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801793c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017940:	2330      	movs	r3, #48	@ 0x30
 8017942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017ae0 <_svfiprintf_r+0x1e4>
 8017946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801794a:	f04f 0901 	mov.w	r9, #1
 801794e:	4623      	mov	r3, r4
 8017950:	469a      	mov	sl, r3
 8017952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017956:	b10a      	cbz	r2, 801795c <_svfiprintf_r+0x60>
 8017958:	2a25      	cmp	r2, #37	@ 0x25
 801795a:	d1f9      	bne.n	8017950 <_svfiprintf_r+0x54>
 801795c:	ebba 0b04 	subs.w	fp, sl, r4
 8017960:	d00b      	beq.n	801797a <_svfiprintf_r+0x7e>
 8017962:	465b      	mov	r3, fp
 8017964:	4622      	mov	r2, r4
 8017966:	4629      	mov	r1, r5
 8017968:	4638      	mov	r0, r7
 801796a:	f7ff ff6b 	bl	8017844 <__ssputs_r>
 801796e:	3001      	adds	r0, #1
 8017970:	f000 80a7 	beq.w	8017ac2 <_svfiprintf_r+0x1c6>
 8017974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017976:	445a      	add	r2, fp
 8017978:	9209      	str	r2, [sp, #36]	@ 0x24
 801797a:	f89a 3000 	ldrb.w	r3, [sl]
 801797e:	2b00      	cmp	r3, #0
 8017980:	f000 809f 	beq.w	8017ac2 <_svfiprintf_r+0x1c6>
 8017984:	2300      	movs	r3, #0
 8017986:	f04f 32ff 	mov.w	r2, #4294967295
 801798a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801798e:	f10a 0a01 	add.w	sl, sl, #1
 8017992:	9304      	str	r3, [sp, #16]
 8017994:	9307      	str	r3, [sp, #28]
 8017996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801799a:	931a      	str	r3, [sp, #104]	@ 0x68
 801799c:	4654      	mov	r4, sl
 801799e:	2205      	movs	r2, #5
 80179a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179a4:	484e      	ldr	r0, [pc, #312]	@ (8017ae0 <_svfiprintf_r+0x1e4>)
 80179a6:	f7e8 fc3b 	bl	8000220 <memchr>
 80179aa:	9a04      	ldr	r2, [sp, #16]
 80179ac:	b9d8      	cbnz	r0, 80179e6 <_svfiprintf_r+0xea>
 80179ae:	06d0      	lsls	r0, r2, #27
 80179b0:	bf44      	itt	mi
 80179b2:	2320      	movmi	r3, #32
 80179b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179b8:	0711      	lsls	r1, r2, #28
 80179ba:	bf44      	itt	mi
 80179bc:	232b      	movmi	r3, #43	@ 0x2b
 80179be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179c2:	f89a 3000 	ldrb.w	r3, [sl]
 80179c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80179c8:	d015      	beq.n	80179f6 <_svfiprintf_r+0xfa>
 80179ca:	9a07      	ldr	r2, [sp, #28]
 80179cc:	4654      	mov	r4, sl
 80179ce:	2000      	movs	r0, #0
 80179d0:	f04f 0c0a 	mov.w	ip, #10
 80179d4:	4621      	mov	r1, r4
 80179d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179da:	3b30      	subs	r3, #48	@ 0x30
 80179dc:	2b09      	cmp	r3, #9
 80179de:	d94b      	bls.n	8017a78 <_svfiprintf_r+0x17c>
 80179e0:	b1b0      	cbz	r0, 8017a10 <_svfiprintf_r+0x114>
 80179e2:	9207      	str	r2, [sp, #28]
 80179e4:	e014      	b.n	8017a10 <_svfiprintf_r+0x114>
 80179e6:	eba0 0308 	sub.w	r3, r0, r8
 80179ea:	fa09 f303 	lsl.w	r3, r9, r3
 80179ee:	4313      	orrs	r3, r2
 80179f0:	9304      	str	r3, [sp, #16]
 80179f2:	46a2      	mov	sl, r4
 80179f4:	e7d2      	b.n	801799c <_svfiprintf_r+0xa0>
 80179f6:	9b03      	ldr	r3, [sp, #12]
 80179f8:	1d19      	adds	r1, r3, #4
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	9103      	str	r1, [sp, #12]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	bfbb      	ittet	lt
 8017a02:	425b      	neglt	r3, r3
 8017a04:	f042 0202 	orrlt.w	r2, r2, #2
 8017a08:	9307      	strge	r3, [sp, #28]
 8017a0a:	9307      	strlt	r3, [sp, #28]
 8017a0c:	bfb8      	it	lt
 8017a0e:	9204      	strlt	r2, [sp, #16]
 8017a10:	7823      	ldrb	r3, [r4, #0]
 8017a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a14:	d10a      	bne.n	8017a2c <_svfiprintf_r+0x130>
 8017a16:	7863      	ldrb	r3, [r4, #1]
 8017a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a1a:	d132      	bne.n	8017a82 <_svfiprintf_r+0x186>
 8017a1c:	9b03      	ldr	r3, [sp, #12]
 8017a1e:	1d1a      	adds	r2, r3, #4
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	9203      	str	r2, [sp, #12]
 8017a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a28:	3402      	adds	r4, #2
 8017a2a:	9305      	str	r3, [sp, #20]
 8017a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017af0 <_svfiprintf_r+0x1f4>
 8017a30:	7821      	ldrb	r1, [r4, #0]
 8017a32:	2203      	movs	r2, #3
 8017a34:	4650      	mov	r0, sl
 8017a36:	f7e8 fbf3 	bl	8000220 <memchr>
 8017a3a:	b138      	cbz	r0, 8017a4c <_svfiprintf_r+0x150>
 8017a3c:	9b04      	ldr	r3, [sp, #16]
 8017a3e:	eba0 000a 	sub.w	r0, r0, sl
 8017a42:	2240      	movs	r2, #64	@ 0x40
 8017a44:	4082      	lsls	r2, r0
 8017a46:	4313      	orrs	r3, r2
 8017a48:	3401      	adds	r4, #1
 8017a4a:	9304      	str	r3, [sp, #16]
 8017a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a50:	4824      	ldr	r0, [pc, #144]	@ (8017ae4 <_svfiprintf_r+0x1e8>)
 8017a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a56:	2206      	movs	r2, #6
 8017a58:	f7e8 fbe2 	bl	8000220 <memchr>
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	d036      	beq.n	8017ace <_svfiprintf_r+0x1d2>
 8017a60:	4b21      	ldr	r3, [pc, #132]	@ (8017ae8 <_svfiprintf_r+0x1ec>)
 8017a62:	bb1b      	cbnz	r3, 8017aac <_svfiprintf_r+0x1b0>
 8017a64:	9b03      	ldr	r3, [sp, #12]
 8017a66:	3307      	adds	r3, #7
 8017a68:	f023 0307 	bic.w	r3, r3, #7
 8017a6c:	3308      	adds	r3, #8
 8017a6e:	9303      	str	r3, [sp, #12]
 8017a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a72:	4433      	add	r3, r6
 8017a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a76:	e76a      	b.n	801794e <_svfiprintf_r+0x52>
 8017a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a7c:	460c      	mov	r4, r1
 8017a7e:	2001      	movs	r0, #1
 8017a80:	e7a8      	b.n	80179d4 <_svfiprintf_r+0xd8>
 8017a82:	2300      	movs	r3, #0
 8017a84:	3401      	adds	r4, #1
 8017a86:	9305      	str	r3, [sp, #20]
 8017a88:	4619      	mov	r1, r3
 8017a8a:	f04f 0c0a 	mov.w	ip, #10
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a94:	3a30      	subs	r2, #48	@ 0x30
 8017a96:	2a09      	cmp	r2, #9
 8017a98:	d903      	bls.n	8017aa2 <_svfiprintf_r+0x1a6>
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d0c6      	beq.n	8017a2c <_svfiprintf_r+0x130>
 8017a9e:	9105      	str	r1, [sp, #20]
 8017aa0:	e7c4      	b.n	8017a2c <_svfiprintf_r+0x130>
 8017aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	e7f0      	b.n	8017a8e <_svfiprintf_r+0x192>
 8017aac:	ab03      	add	r3, sp, #12
 8017aae:	9300      	str	r3, [sp, #0]
 8017ab0:	462a      	mov	r2, r5
 8017ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8017aec <_svfiprintf_r+0x1f0>)
 8017ab4:	a904      	add	r1, sp, #16
 8017ab6:	4638      	mov	r0, r7
 8017ab8:	f7fc fb36 	bl	8014128 <_printf_float>
 8017abc:	1c42      	adds	r2, r0, #1
 8017abe:	4606      	mov	r6, r0
 8017ac0:	d1d6      	bne.n	8017a70 <_svfiprintf_r+0x174>
 8017ac2:	89ab      	ldrh	r3, [r5, #12]
 8017ac4:	065b      	lsls	r3, r3, #25
 8017ac6:	f53f af2d 	bmi.w	8017924 <_svfiprintf_r+0x28>
 8017aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017acc:	e72c      	b.n	8017928 <_svfiprintf_r+0x2c>
 8017ace:	ab03      	add	r3, sp, #12
 8017ad0:	9300      	str	r3, [sp, #0]
 8017ad2:	462a      	mov	r2, r5
 8017ad4:	4b05      	ldr	r3, [pc, #20]	@ (8017aec <_svfiprintf_r+0x1f0>)
 8017ad6:	a904      	add	r1, sp, #16
 8017ad8:	4638      	mov	r0, r7
 8017ada:	f7fc fdbd 	bl	8014658 <_printf_i>
 8017ade:	e7ed      	b.n	8017abc <_svfiprintf_r+0x1c0>
 8017ae0:	0801b501 	.word	0x0801b501
 8017ae4:	0801b50b 	.word	0x0801b50b
 8017ae8:	08014129 	.word	0x08014129
 8017aec:	08017845 	.word	0x08017845
 8017af0:	0801b507 	.word	0x0801b507

08017af4 <__sflush_r>:
 8017af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017afc:	0716      	lsls	r6, r2, #28
 8017afe:	4605      	mov	r5, r0
 8017b00:	460c      	mov	r4, r1
 8017b02:	d454      	bmi.n	8017bae <__sflush_r+0xba>
 8017b04:	684b      	ldr	r3, [r1, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	dc02      	bgt.n	8017b10 <__sflush_r+0x1c>
 8017b0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	dd48      	ble.n	8017ba2 <__sflush_r+0xae>
 8017b10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b12:	2e00      	cmp	r6, #0
 8017b14:	d045      	beq.n	8017ba2 <__sflush_r+0xae>
 8017b16:	2300      	movs	r3, #0
 8017b18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b1c:	682f      	ldr	r7, [r5, #0]
 8017b1e:	6a21      	ldr	r1, [r4, #32]
 8017b20:	602b      	str	r3, [r5, #0]
 8017b22:	d030      	beq.n	8017b86 <__sflush_r+0x92>
 8017b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b26:	89a3      	ldrh	r3, [r4, #12]
 8017b28:	0759      	lsls	r1, r3, #29
 8017b2a:	d505      	bpl.n	8017b38 <__sflush_r+0x44>
 8017b2c:	6863      	ldr	r3, [r4, #4]
 8017b2e:	1ad2      	subs	r2, r2, r3
 8017b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b32:	b10b      	cbz	r3, 8017b38 <__sflush_r+0x44>
 8017b34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b36:	1ad2      	subs	r2, r2, r3
 8017b38:	2300      	movs	r3, #0
 8017b3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b3c:	6a21      	ldr	r1, [r4, #32]
 8017b3e:	4628      	mov	r0, r5
 8017b40:	47b0      	blx	r6
 8017b42:	1c43      	adds	r3, r0, #1
 8017b44:	89a3      	ldrh	r3, [r4, #12]
 8017b46:	d106      	bne.n	8017b56 <__sflush_r+0x62>
 8017b48:	6829      	ldr	r1, [r5, #0]
 8017b4a:	291d      	cmp	r1, #29
 8017b4c:	d82b      	bhi.n	8017ba6 <__sflush_r+0xb2>
 8017b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8017bf8 <__sflush_r+0x104>)
 8017b50:	40ca      	lsrs	r2, r1
 8017b52:	07d6      	lsls	r6, r2, #31
 8017b54:	d527      	bpl.n	8017ba6 <__sflush_r+0xb2>
 8017b56:	2200      	movs	r2, #0
 8017b58:	6062      	str	r2, [r4, #4]
 8017b5a:	04d9      	lsls	r1, r3, #19
 8017b5c:	6922      	ldr	r2, [r4, #16]
 8017b5e:	6022      	str	r2, [r4, #0]
 8017b60:	d504      	bpl.n	8017b6c <__sflush_r+0x78>
 8017b62:	1c42      	adds	r2, r0, #1
 8017b64:	d101      	bne.n	8017b6a <__sflush_r+0x76>
 8017b66:	682b      	ldr	r3, [r5, #0]
 8017b68:	b903      	cbnz	r3, 8017b6c <__sflush_r+0x78>
 8017b6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b6e:	602f      	str	r7, [r5, #0]
 8017b70:	b1b9      	cbz	r1, 8017ba2 <__sflush_r+0xae>
 8017b72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b76:	4299      	cmp	r1, r3
 8017b78:	d002      	beq.n	8017b80 <__sflush_r+0x8c>
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	f7fe fa34 	bl	8015fe8 <_free_r>
 8017b80:	2300      	movs	r3, #0
 8017b82:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b84:	e00d      	b.n	8017ba2 <__sflush_r+0xae>
 8017b86:	2301      	movs	r3, #1
 8017b88:	4628      	mov	r0, r5
 8017b8a:	47b0      	blx	r6
 8017b8c:	4602      	mov	r2, r0
 8017b8e:	1c50      	adds	r0, r2, #1
 8017b90:	d1c9      	bne.n	8017b26 <__sflush_r+0x32>
 8017b92:	682b      	ldr	r3, [r5, #0]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d0c6      	beq.n	8017b26 <__sflush_r+0x32>
 8017b98:	2b1d      	cmp	r3, #29
 8017b9a:	d001      	beq.n	8017ba0 <__sflush_r+0xac>
 8017b9c:	2b16      	cmp	r3, #22
 8017b9e:	d11e      	bne.n	8017bde <__sflush_r+0xea>
 8017ba0:	602f      	str	r7, [r5, #0]
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	e022      	b.n	8017bec <__sflush_r+0xf8>
 8017ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017baa:	b21b      	sxth	r3, r3
 8017bac:	e01b      	b.n	8017be6 <__sflush_r+0xf2>
 8017bae:	690f      	ldr	r7, [r1, #16]
 8017bb0:	2f00      	cmp	r7, #0
 8017bb2:	d0f6      	beq.n	8017ba2 <__sflush_r+0xae>
 8017bb4:	0793      	lsls	r3, r2, #30
 8017bb6:	680e      	ldr	r6, [r1, #0]
 8017bb8:	bf08      	it	eq
 8017bba:	694b      	ldreq	r3, [r1, #20]
 8017bbc:	600f      	str	r7, [r1, #0]
 8017bbe:	bf18      	it	ne
 8017bc0:	2300      	movne	r3, #0
 8017bc2:	eba6 0807 	sub.w	r8, r6, r7
 8017bc6:	608b      	str	r3, [r1, #8]
 8017bc8:	f1b8 0f00 	cmp.w	r8, #0
 8017bcc:	dde9      	ble.n	8017ba2 <__sflush_r+0xae>
 8017bce:	6a21      	ldr	r1, [r4, #32]
 8017bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017bd2:	4643      	mov	r3, r8
 8017bd4:	463a      	mov	r2, r7
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	47b0      	blx	r6
 8017bda:	2800      	cmp	r0, #0
 8017bdc:	dc08      	bgt.n	8017bf0 <__sflush_r+0xfc>
 8017bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017be6:	81a3      	strh	r3, [r4, #12]
 8017be8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bf0:	4407      	add	r7, r0
 8017bf2:	eba8 0800 	sub.w	r8, r8, r0
 8017bf6:	e7e7      	b.n	8017bc8 <__sflush_r+0xd4>
 8017bf8:	20400001 	.word	0x20400001

08017bfc <_fflush_r>:
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	690b      	ldr	r3, [r1, #16]
 8017c00:	4605      	mov	r5, r0
 8017c02:	460c      	mov	r4, r1
 8017c04:	b913      	cbnz	r3, 8017c0c <_fflush_r+0x10>
 8017c06:	2500      	movs	r5, #0
 8017c08:	4628      	mov	r0, r5
 8017c0a:	bd38      	pop	{r3, r4, r5, pc}
 8017c0c:	b118      	cbz	r0, 8017c16 <_fflush_r+0x1a>
 8017c0e:	6a03      	ldr	r3, [r0, #32]
 8017c10:	b90b      	cbnz	r3, 8017c16 <_fflush_r+0x1a>
 8017c12:	f7fd f8d9 	bl	8014dc8 <__sinit>
 8017c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d0f3      	beq.n	8017c06 <_fflush_r+0xa>
 8017c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c20:	07d0      	lsls	r0, r2, #31
 8017c22:	d404      	bmi.n	8017c2e <_fflush_r+0x32>
 8017c24:	0599      	lsls	r1, r3, #22
 8017c26:	d402      	bmi.n	8017c2e <_fflush_r+0x32>
 8017c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c2a:	f7fd fb6c 	bl	8015306 <__retarget_lock_acquire_recursive>
 8017c2e:	4628      	mov	r0, r5
 8017c30:	4621      	mov	r1, r4
 8017c32:	f7ff ff5f 	bl	8017af4 <__sflush_r>
 8017c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c38:	07da      	lsls	r2, r3, #31
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	d4e4      	bmi.n	8017c08 <_fflush_r+0xc>
 8017c3e:	89a3      	ldrh	r3, [r4, #12]
 8017c40:	059b      	lsls	r3, r3, #22
 8017c42:	d4e1      	bmi.n	8017c08 <_fflush_r+0xc>
 8017c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c46:	f7fd fb5f 	bl	8015308 <__retarget_lock_release_recursive>
 8017c4a:	e7dd      	b.n	8017c08 <_fflush_r+0xc>

08017c4c <__swhatbuf_r>:
 8017c4c:	b570      	push	{r4, r5, r6, lr}
 8017c4e:	460c      	mov	r4, r1
 8017c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c54:	2900      	cmp	r1, #0
 8017c56:	b096      	sub	sp, #88	@ 0x58
 8017c58:	4615      	mov	r5, r2
 8017c5a:	461e      	mov	r6, r3
 8017c5c:	da0d      	bge.n	8017c7a <__swhatbuf_r+0x2e>
 8017c5e:	89a3      	ldrh	r3, [r4, #12]
 8017c60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017c64:	f04f 0100 	mov.w	r1, #0
 8017c68:	bf14      	ite	ne
 8017c6a:	2340      	movne	r3, #64	@ 0x40
 8017c6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017c70:	2000      	movs	r0, #0
 8017c72:	6031      	str	r1, [r6, #0]
 8017c74:	602b      	str	r3, [r5, #0]
 8017c76:	b016      	add	sp, #88	@ 0x58
 8017c78:	bd70      	pop	{r4, r5, r6, pc}
 8017c7a:	466a      	mov	r2, sp
 8017c7c:	f000 f874 	bl	8017d68 <_fstat_r>
 8017c80:	2800      	cmp	r0, #0
 8017c82:	dbec      	blt.n	8017c5e <__swhatbuf_r+0x12>
 8017c84:	9901      	ldr	r1, [sp, #4]
 8017c86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017c8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017c8e:	4259      	negs	r1, r3
 8017c90:	4159      	adcs	r1, r3
 8017c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017c96:	e7eb      	b.n	8017c70 <__swhatbuf_r+0x24>

08017c98 <__smakebuf_r>:
 8017c98:	898b      	ldrh	r3, [r1, #12]
 8017c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c9c:	079d      	lsls	r5, r3, #30
 8017c9e:	4606      	mov	r6, r0
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	d507      	bpl.n	8017cb4 <__smakebuf_r+0x1c>
 8017ca4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017ca8:	6023      	str	r3, [r4, #0]
 8017caa:	6123      	str	r3, [r4, #16]
 8017cac:	2301      	movs	r3, #1
 8017cae:	6163      	str	r3, [r4, #20]
 8017cb0:	b003      	add	sp, #12
 8017cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cb4:	ab01      	add	r3, sp, #4
 8017cb6:	466a      	mov	r2, sp
 8017cb8:	f7ff ffc8 	bl	8017c4c <__swhatbuf_r>
 8017cbc:	9f00      	ldr	r7, [sp, #0]
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	4639      	mov	r1, r7
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f7fe fa04 	bl	80160d0 <_malloc_r>
 8017cc8:	b948      	cbnz	r0, 8017cde <__smakebuf_r+0x46>
 8017cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cce:	059a      	lsls	r2, r3, #22
 8017cd0:	d4ee      	bmi.n	8017cb0 <__smakebuf_r+0x18>
 8017cd2:	f023 0303 	bic.w	r3, r3, #3
 8017cd6:	f043 0302 	orr.w	r3, r3, #2
 8017cda:	81a3      	strh	r3, [r4, #12]
 8017cdc:	e7e2      	b.n	8017ca4 <__smakebuf_r+0xc>
 8017cde:	89a3      	ldrh	r3, [r4, #12]
 8017ce0:	6020      	str	r0, [r4, #0]
 8017ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ce6:	81a3      	strh	r3, [r4, #12]
 8017ce8:	9b01      	ldr	r3, [sp, #4]
 8017cea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017cee:	b15b      	cbz	r3, 8017d08 <__smakebuf_r+0x70>
 8017cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cf4:	4630      	mov	r0, r6
 8017cf6:	f000 f849 	bl	8017d8c <_isatty_r>
 8017cfa:	b128      	cbz	r0, 8017d08 <__smakebuf_r+0x70>
 8017cfc:	89a3      	ldrh	r3, [r4, #12]
 8017cfe:	f023 0303 	bic.w	r3, r3, #3
 8017d02:	f043 0301 	orr.w	r3, r3, #1
 8017d06:	81a3      	strh	r3, [r4, #12]
 8017d08:	89a3      	ldrh	r3, [r4, #12]
 8017d0a:	431d      	orrs	r5, r3
 8017d0c:	81a5      	strh	r5, [r4, #12]
 8017d0e:	e7cf      	b.n	8017cb0 <__smakebuf_r+0x18>

08017d10 <memmove>:
 8017d10:	4288      	cmp	r0, r1
 8017d12:	b510      	push	{r4, lr}
 8017d14:	eb01 0402 	add.w	r4, r1, r2
 8017d18:	d902      	bls.n	8017d20 <memmove+0x10>
 8017d1a:	4284      	cmp	r4, r0
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	d807      	bhi.n	8017d30 <memmove+0x20>
 8017d20:	1e43      	subs	r3, r0, #1
 8017d22:	42a1      	cmp	r1, r4
 8017d24:	d008      	beq.n	8017d38 <memmove+0x28>
 8017d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d2e:	e7f8      	b.n	8017d22 <memmove+0x12>
 8017d30:	4402      	add	r2, r0
 8017d32:	4601      	mov	r1, r0
 8017d34:	428a      	cmp	r2, r1
 8017d36:	d100      	bne.n	8017d3a <memmove+0x2a>
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d42:	e7f7      	b.n	8017d34 <memmove+0x24>

08017d44 <strncmp>:
 8017d44:	b510      	push	{r4, lr}
 8017d46:	b16a      	cbz	r2, 8017d64 <strncmp+0x20>
 8017d48:	3901      	subs	r1, #1
 8017d4a:	1884      	adds	r4, r0, r2
 8017d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d103      	bne.n	8017d60 <strncmp+0x1c>
 8017d58:	42a0      	cmp	r0, r4
 8017d5a:	d001      	beq.n	8017d60 <strncmp+0x1c>
 8017d5c:	2a00      	cmp	r2, #0
 8017d5e:	d1f5      	bne.n	8017d4c <strncmp+0x8>
 8017d60:	1ad0      	subs	r0, r2, r3
 8017d62:	bd10      	pop	{r4, pc}
 8017d64:	4610      	mov	r0, r2
 8017d66:	e7fc      	b.n	8017d62 <strncmp+0x1e>

08017d68 <_fstat_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4d07      	ldr	r5, [pc, #28]	@ (8017d88 <_fstat_r+0x20>)
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	4604      	mov	r4, r0
 8017d70:	4608      	mov	r0, r1
 8017d72:	4611      	mov	r1, r2
 8017d74:	602b      	str	r3, [r5, #0]
 8017d76:	f7ec f89b 	bl	8003eb0 <_fstat>
 8017d7a:	1c43      	adds	r3, r0, #1
 8017d7c:	d102      	bne.n	8017d84 <_fstat_r+0x1c>
 8017d7e:	682b      	ldr	r3, [r5, #0]
 8017d80:	b103      	cbz	r3, 8017d84 <_fstat_r+0x1c>
 8017d82:	6023      	str	r3, [r4, #0]
 8017d84:	bd38      	pop	{r3, r4, r5, pc}
 8017d86:	bf00      	nop
 8017d88:	200049b8 	.word	0x200049b8

08017d8c <_isatty_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4d06      	ldr	r5, [pc, #24]	@ (8017da8 <_isatty_r+0x1c>)
 8017d90:	2300      	movs	r3, #0
 8017d92:	4604      	mov	r4, r0
 8017d94:	4608      	mov	r0, r1
 8017d96:	602b      	str	r3, [r5, #0]
 8017d98:	f7ec f89a 	bl	8003ed0 <_isatty>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d102      	bne.n	8017da6 <_isatty_r+0x1a>
 8017da0:	682b      	ldr	r3, [r5, #0]
 8017da2:	b103      	cbz	r3, 8017da6 <_isatty_r+0x1a>
 8017da4:	6023      	str	r3, [r4, #0]
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	200049b8 	.word	0x200049b8

08017dac <_sbrk_r>:
 8017dac:	b538      	push	{r3, r4, r5, lr}
 8017dae:	4d06      	ldr	r5, [pc, #24]	@ (8017dc8 <_sbrk_r+0x1c>)
 8017db0:	2300      	movs	r3, #0
 8017db2:	4604      	mov	r4, r0
 8017db4:	4608      	mov	r0, r1
 8017db6:	602b      	str	r3, [r5, #0]
 8017db8:	f7ec f8a2 	bl	8003f00 <_sbrk>
 8017dbc:	1c43      	adds	r3, r0, #1
 8017dbe:	d102      	bne.n	8017dc6 <_sbrk_r+0x1a>
 8017dc0:	682b      	ldr	r3, [r5, #0]
 8017dc2:	b103      	cbz	r3, 8017dc6 <_sbrk_r+0x1a>
 8017dc4:	6023      	str	r3, [r4, #0]
 8017dc6:	bd38      	pop	{r3, r4, r5, pc}
 8017dc8:	200049b8 	.word	0x200049b8
 8017dcc:	00000000 	.word	0x00000000

08017dd0 <nan>:
 8017dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017dd8 <nan+0x8>
 8017dd4:	4770      	bx	lr
 8017dd6:	bf00      	nop
 8017dd8:	00000000 	.word	0x00000000
 8017ddc:	7ff80000 	.word	0x7ff80000

08017de0 <__assert_func>:
 8017de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017de2:	4614      	mov	r4, r2
 8017de4:	461a      	mov	r2, r3
 8017de6:	4b09      	ldr	r3, [pc, #36]	@ (8017e0c <__assert_func+0x2c>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	4605      	mov	r5, r0
 8017dec:	68d8      	ldr	r0, [r3, #12]
 8017dee:	b14c      	cbz	r4, 8017e04 <__assert_func+0x24>
 8017df0:	4b07      	ldr	r3, [pc, #28]	@ (8017e10 <__assert_func+0x30>)
 8017df2:	9100      	str	r1, [sp, #0]
 8017df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017df8:	4906      	ldr	r1, [pc, #24]	@ (8017e14 <__assert_func+0x34>)
 8017dfa:	462b      	mov	r3, r5
 8017dfc:	f000 fba8 	bl	8018550 <fiprintf>
 8017e00:	f000 fbb8 	bl	8018574 <abort>
 8017e04:	4b04      	ldr	r3, [pc, #16]	@ (8017e18 <__assert_func+0x38>)
 8017e06:	461c      	mov	r4, r3
 8017e08:	e7f3      	b.n	8017df2 <__assert_func+0x12>
 8017e0a:	bf00      	nop
 8017e0c:	20000054 	.word	0x20000054
 8017e10:	0801b51a 	.word	0x0801b51a
 8017e14:	0801b527 	.word	0x0801b527
 8017e18:	0801b555 	.word	0x0801b555

08017e1c <_calloc_r>:
 8017e1c:	b570      	push	{r4, r5, r6, lr}
 8017e1e:	fba1 5402 	umull	r5, r4, r1, r2
 8017e22:	b934      	cbnz	r4, 8017e32 <_calloc_r+0x16>
 8017e24:	4629      	mov	r1, r5
 8017e26:	f7fe f953 	bl	80160d0 <_malloc_r>
 8017e2a:	4606      	mov	r6, r0
 8017e2c:	b928      	cbnz	r0, 8017e3a <_calloc_r+0x1e>
 8017e2e:	4630      	mov	r0, r6
 8017e30:	bd70      	pop	{r4, r5, r6, pc}
 8017e32:	220c      	movs	r2, #12
 8017e34:	6002      	str	r2, [r0, #0]
 8017e36:	2600      	movs	r6, #0
 8017e38:	e7f9      	b.n	8017e2e <_calloc_r+0x12>
 8017e3a:	462a      	mov	r2, r5
 8017e3c:	4621      	mov	r1, r4
 8017e3e:	f7fd f987 	bl	8015150 <memset>
 8017e42:	e7f4      	b.n	8017e2e <_calloc_r+0x12>

08017e44 <rshift>:
 8017e44:	6903      	ldr	r3, [r0, #16]
 8017e46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017e4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017e52:	f100 0414 	add.w	r4, r0, #20
 8017e56:	dd45      	ble.n	8017ee4 <rshift+0xa0>
 8017e58:	f011 011f 	ands.w	r1, r1, #31
 8017e5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017e60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017e64:	d10c      	bne.n	8017e80 <rshift+0x3c>
 8017e66:	f100 0710 	add.w	r7, r0, #16
 8017e6a:	4629      	mov	r1, r5
 8017e6c:	42b1      	cmp	r1, r6
 8017e6e:	d334      	bcc.n	8017eda <rshift+0x96>
 8017e70:	1a9b      	subs	r3, r3, r2
 8017e72:	009b      	lsls	r3, r3, #2
 8017e74:	1eea      	subs	r2, r5, #3
 8017e76:	4296      	cmp	r6, r2
 8017e78:	bf38      	it	cc
 8017e7a:	2300      	movcc	r3, #0
 8017e7c:	4423      	add	r3, r4
 8017e7e:	e015      	b.n	8017eac <rshift+0x68>
 8017e80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017e84:	f1c1 0820 	rsb	r8, r1, #32
 8017e88:	40cf      	lsrs	r7, r1
 8017e8a:	f105 0e04 	add.w	lr, r5, #4
 8017e8e:	46a1      	mov	r9, r4
 8017e90:	4576      	cmp	r6, lr
 8017e92:	46f4      	mov	ip, lr
 8017e94:	d815      	bhi.n	8017ec2 <rshift+0x7e>
 8017e96:	1a9a      	subs	r2, r3, r2
 8017e98:	0092      	lsls	r2, r2, #2
 8017e9a:	3a04      	subs	r2, #4
 8017e9c:	3501      	adds	r5, #1
 8017e9e:	42ae      	cmp	r6, r5
 8017ea0:	bf38      	it	cc
 8017ea2:	2200      	movcc	r2, #0
 8017ea4:	18a3      	adds	r3, r4, r2
 8017ea6:	50a7      	str	r7, [r4, r2]
 8017ea8:	b107      	cbz	r7, 8017eac <rshift+0x68>
 8017eaa:	3304      	adds	r3, #4
 8017eac:	1b1a      	subs	r2, r3, r4
 8017eae:	42a3      	cmp	r3, r4
 8017eb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017eb4:	bf08      	it	eq
 8017eb6:	2300      	moveq	r3, #0
 8017eb8:	6102      	str	r2, [r0, #16]
 8017eba:	bf08      	it	eq
 8017ebc:	6143      	streq	r3, [r0, #20]
 8017ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ec2:	f8dc c000 	ldr.w	ip, [ip]
 8017ec6:	fa0c fc08 	lsl.w	ip, ip, r8
 8017eca:	ea4c 0707 	orr.w	r7, ip, r7
 8017ece:	f849 7b04 	str.w	r7, [r9], #4
 8017ed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ed6:	40cf      	lsrs	r7, r1
 8017ed8:	e7da      	b.n	8017e90 <rshift+0x4c>
 8017eda:	f851 cb04 	ldr.w	ip, [r1], #4
 8017ede:	f847 cf04 	str.w	ip, [r7, #4]!
 8017ee2:	e7c3      	b.n	8017e6c <rshift+0x28>
 8017ee4:	4623      	mov	r3, r4
 8017ee6:	e7e1      	b.n	8017eac <rshift+0x68>

08017ee8 <__hexdig_fun>:
 8017ee8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017eec:	2b09      	cmp	r3, #9
 8017eee:	d802      	bhi.n	8017ef6 <__hexdig_fun+0xe>
 8017ef0:	3820      	subs	r0, #32
 8017ef2:	b2c0      	uxtb	r0, r0
 8017ef4:	4770      	bx	lr
 8017ef6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017efa:	2b05      	cmp	r3, #5
 8017efc:	d801      	bhi.n	8017f02 <__hexdig_fun+0x1a>
 8017efe:	3847      	subs	r0, #71	@ 0x47
 8017f00:	e7f7      	b.n	8017ef2 <__hexdig_fun+0xa>
 8017f02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017f06:	2b05      	cmp	r3, #5
 8017f08:	d801      	bhi.n	8017f0e <__hexdig_fun+0x26>
 8017f0a:	3827      	subs	r0, #39	@ 0x27
 8017f0c:	e7f1      	b.n	8017ef2 <__hexdig_fun+0xa>
 8017f0e:	2000      	movs	r0, #0
 8017f10:	4770      	bx	lr
	...

08017f14 <__gethex>:
 8017f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f18:	b085      	sub	sp, #20
 8017f1a:	468a      	mov	sl, r1
 8017f1c:	9302      	str	r3, [sp, #8]
 8017f1e:	680b      	ldr	r3, [r1, #0]
 8017f20:	9001      	str	r0, [sp, #4]
 8017f22:	4690      	mov	r8, r2
 8017f24:	1c9c      	adds	r4, r3, #2
 8017f26:	46a1      	mov	r9, r4
 8017f28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017f2c:	2830      	cmp	r0, #48	@ 0x30
 8017f2e:	d0fa      	beq.n	8017f26 <__gethex+0x12>
 8017f30:	eba9 0303 	sub.w	r3, r9, r3
 8017f34:	f1a3 0b02 	sub.w	fp, r3, #2
 8017f38:	f7ff ffd6 	bl	8017ee8 <__hexdig_fun>
 8017f3c:	4605      	mov	r5, r0
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	d168      	bne.n	8018014 <__gethex+0x100>
 8017f42:	49a0      	ldr	r1, [pc, #640]	@ (80181c4 <__gethex+0x2b0>)
 8017f44:	2201      	movs	r2, #1
 8017f46:	4648      	mov	r0, r9
 8017f48:	f7ff fefc 	bl	8017d44 <strncmp>
 8017f4c:	4607      	mov	r7, r0
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	d167      	bne.n	8018022 <__gethex+0x10e>
 8017f52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017f56:	4626      	mov	r6, r4
 8017f58:	f7ff ffc6 	bl	8017ee8 <__hexdig_fun>
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	d062      	beq.n	8018026 <__gethex+0x112>
 8017f60:	4623      	mov	r3, r4
 8017f62:	7818      	ldrb	r0, [r3, #0]
 8017f64:	2830      	cmp	r0, #48	@ 0x30
 8017f66:	4699      	mov	r9, r3
 8017f68:	f103 0301 	add.w	r3, r3, #1
 8017f6c:	d0f9      	beq.n	8017f62 <__gethex+0x4e>
 8017f6e:	f7ff ffbb 	bl	8017ee8 <__hexdig_fun>
 8017f72:	fab0 f580 	clz	r5, r0
 8017f76:	096d      	lsrs	r5, r5, #5
 8017f78:	f04f 0b01 	mov.w	fp, #1
 8017f7c:	464a      	mov	r2, r9
 8017f7e:	4616      	mov	r6, r2
 8017f80:	3201      	adds	r2, #1
 8017f82:	7830      	ldrb	r0, [r6, #0]
 8017f84:	f7ff ffb0 	bl	8017ee8 <__hexdig_fun>
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d1f8      	bne.n	8017f7e <__gethex+0x6a>
 8017f8c:	498d      	ldr	r1, [pc, #564]	@ (80181c4 <__gethex+0x2b0>)
 8017f8e:	2201      	movs	r2, #1
 8017f90:	4630      	mov	r0, r6
 8017f92:	f7ff fed7 	bl	8017d44 <strncmp>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	d13f      	bne.n	801801a <__gethex+0x106>
 8017f9a:	b944      	cbnz	r4, 8017fae <__gethex+0x9a>
 8017f9c:	1c74      	adds	r4, r6, #1
 8017f9e:	4622      	mov	r2, r4
 8017fa0:	4616      	mov	r6, r2
 8017fa2:	3201      	adds	r2, #1
 8017fa4:	7830      	ldrb	r0, [r6, #0]
 8017fa6:	f7ff ff9f 	bl	8017ee8 <__hexdig_fun>
 8017faa:	2800      	cmp	r0, #0
 8017fac:	d1f8      	bne.n	8017fa0 <__gethex+0x8c>
 8017fae:	1ba4      	subs	r4, r4, r6
 8017fb0:	00a7      	lsls	r7, r4, #2
 8017fb2:	7833      	ldrb	r3, [r6, #0]
 8017fb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017fb8:	2b50      	cmp	r3, #80	@ 0x50
 8017fba:	d13e      	bne.n	801803a <__gethex+0x126>
 8017fbc:	7873      	ldrb	r3, [r6, #1]
 8017fbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8017fc0:	d033      	beq.n	801802a <__gethex+0x116>
 8017fc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8017fc4:	d034      	beq.n	8018030 <__gethex+0x11c>
 8017fc6:	1c71      	adds	r1, r6, #1
 8017fc8:	2400      	movs	r4, #0
 8017fca:	7808      	ldrb	r0, [r1, #0]
 8017fcc:	f7ff ff8c 	bl	8017ee8 <__hexdig_fun>
 8017fd0:	1e43      	subs	r3, r0, #1
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	2b18      	cmp	r3, #24
 8017fd6:	d830      	bhi.n	801803a <__gethex+0x126>
 8017fd8:	f1a0 0210 	sub.w	r2, r0, #16
 8017fdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017fe0:	f7ff ff82 	bl	8017ee8 <__hexdig_fun>
 8017fe4:	f100 3cff 	add.w	ip, r0, #4294967295
 8017fe8:	fa5f fc8c 	uxtb.w	ip, ip
 8017fec:	f1bc 0f18 	cmp.w	ip, #24
 8017ff0:	f04f 030a 	mov.w	r3, #10
 8017ff4:	d91e      	bls.n	8018034 <__gethex+0x120>
 8017ff6:	b104      	cbz	r4, 8017ffa <__gethex+0xe6>
 8017ff8:	4252      	negs	r2, r2
 8017ffa:	4417      	add	r7, r2
 8017ffc:	f8ca 1000 	str.w	r1, [sl]
 8018000:	b1ed      	cbz	r5, 801803e <__gethex+0x12a>
 8018002:	f1bb 0f00 	cmp.w	fp, #0
 8018006:	bf0c      	ite	eq
 8018008:	2506      	moveq	r5, #6
 801800a:	2500      	movne	r5, #0
 801800c:	4628      	mov	r0, r5
 801800e:	b005      	add	sp, #20
 8018010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018014:	2500      	movs	r5, #0
 8018016:	462c      	mov	r4, r5
 8018018:	e7b0      	b.n	8017f7c <__gethex+0x68>
 801801a:	2c00      	cmp	r4, #0
 801801c:	d1c7      	bne.n	8017fae <__gethex+0x9a>
 801801e:	4627      	mov	r7, r4
 8018020:	e7c7      	b.n	8017fb2 <__gethex+0x9e>
 8018022:	464e      	mov	r6, r9
 8018024:	462f      	mov	r7, r5
 8018026:	2501      	movs	r5, #1
 8018028:	e7c3      	b.n	8017fb2 <__gethex+0x9e>
 801802a:	2400      	movs	r4, #0
 801802c:	1cb1      	adds	r1, r6, #2
 801802e:	e7cc      	b.n	8017fca <__gethex+0xb6>
 8018030:	2401      	movs	r4, #1
 8018032:	e7fb      	b.n	801802c <__gethex+0x118>
 8018034:	fb03 0002 	mla	r0, r3, r2, r0
 8018038:	e7ce      	b.n	8017fd8 <__gethex+0xc4>
 801803a:	4631      	mov	r1, r6
 801803c:	e7de      	b.n	8017ffc <__gethex+0xe8>
 801803e:	eba6 0309 	sub.w	r3, r6, r9
 8018042:	3b01      	subs	r3, #1
 8018044:	4629      	mov	r1, r5
 8018046:	2b07      	cmp	r3, #7
 8018048:	dc0a      	bgt.n	8018060 <__gethex+0x14c>
 801804a:	9801      	ldr	r0, [sp, #4]
 801804c:	f7fe f8cc 	bl	80161e8 <_Balloc>
 8018050:	4604      	mov	r4, r0
 8018052:	b940      	cbnz	r0, 8018066 <__gethex+0x152>
 8018054:	4b5c      	ldr	r3, [pc, #368]	@ (80181c8 <__gethex+0x2b4>)
 8018056:	4602      	mov	r2, r0
 8018058:	21e4      	movs	r1, #228	@ 0xe4
 801805a:	485c      	ldr	r0, [pc, #368]	@ (80181cc <__gethex+0x2b8>)
 801805c:	f7ff fec0 	bl	8017de0 <__assert_func>
 8018060:	3101      	adds	r1, #1
 8018062:	105b      	asrs	r3, r3, #1
 8018064:	e7ef      	b.n	8018046 <__gethex+0x132>
 8018066:	f100 0a14 	add.w	sl, r0, #20
 801806a:	2300      	movs	r3, #0
 801806c:	4655      	mov	r5, sl
 801806e:	469b      	mov	fp, r3
 8018070:	45b1      	cmp	r9, r6
 8018072:	d337      	bcc.n	80180e4 <__gethex+0x1d0>
 8018074:	f845 bb04 	str.w	fp, [r5], #4
 8018078:	eba5 050a 	sub.w	r5, r5, sl
 801807c:	10ad      	asrs	r5, r5, #2
 801807e:	6125      	str	r5, [r4, #16]
 8018080:	4658      	mov	r0, fp
 8018082:	f7fe f9a3 	bl	80163cc <__hi0bits>
 8018086:	016d      	lsls	r5, r5, #5
 8018088:	f8d8 6000 	ldr.w	r6, [r8]
 801808c:	1a2d      	subs	r5, r5, r0
 801808e:	42b5      	cmp	r5, r6
 8018090:	dd54      	ble.n	801813c <__gethex+0x228>
 8018092:	1bad      	subs	r5, r5, r6
 8018094:	4629      	mov	r1, r5
 8018096:	4620      	mov	r0, r4
 8018098:	f7fe fd2f 	bl	8016afa <__any_on>
 801809c:	4681      	mov	r9, r0
 801809e:	b178      	cbz	r0, 80180c0 <__gethex+0x1ac>
 80180a0:	1e6b      	subs	r3, r5, #1
 80180a2:	1159      	asrs	r1, r3, #5
 80180a4:	f003 021f 	and.w	r2, r3, #31
 80180a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80180ac:	f04f 0901 	mov.w	r9, #1
 80180b0:	fa09 f202 	lsl.w	r2, r9, r2
 80180b4:	420a      	tst	r2, r1
 80180b6:	d003      	beq.n	80180c0 <__gethex+0x1ac>
 80180b8:	454b      	cmp	r3, r9
 80180ba:	dc36      	bgt.n	801812a <__gethex+0x216>
 80180bc:	f04f 0902 	mov.w	r9, #2
 80180c0:	4629      	mov	r1, r5
 80180c2:	4620      	mov	r0, r4
 80180c4:	f7ff febe 	bl	8017e44 <rshift>
 80180c8:	442f      	add	r7, r5
 80180ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180ce:	42bb      	cmp	r3, r7
 80180d0:	da42      	bge.n	8018158 <__gethex+0x244>
 80180d2:	9801      	ldr	r0, [sp, #4]
 80180d4:	4621      	mov	r1, r4
 80180d6:	f7fe f8c7 	bl	8016268 <_Bfree>
 80180da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80180dc:	2300      	movs	r3, #0
 80180de:	6013      	str	r3, [r2, #0]
 80180e0:	25a3      	movs	r5, #163	@ 0xa3
 80180e2:	e793      	b.n	801800c <__gethex+0xf8>
 80180e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80180e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80180ea:	d012      	beq.n	8018112 <__gethex+0x1fe>
 80180ec:	2b20      	cmp	r3, #32
 80180ee:	d104      	bne.n	80180fa <__gethex+0x1e6>
 80180f0:	f845 bb04 	str.w	fp, [r5], #4
 80180f4:	f04f 0b00 	mov.w	fp, #0
 80180f8:	465b      	mov	r3, fp
 80180fa:	7830      	ldrb	r0, [r6, #0]
 80180fc:	9303      	str	r3, [sp, #12]
 80180fe:	f7ff fef3 	bl	8017ee8 <__hexdig_fun>
 8018102:	9b03      	ldr	r3, [sp, #12]
 8018104:	f000 000f 	and.w	r0, r0, #15
 8018108:	4098      	lsls	r0, r3
 801810a:	ea4b 0b00 	orr.w	fp, fp, r0
 801810e:	3304      	adds	r3, #4
 8018110:	e7ae      	b.n	8018070 <__gethex+0x15c>
 8018112:	45b1      	cmp	r9, r6
 8018114:	d8ea      	bhi.n	80180ec <__gethex+0x1d8>
 8018116:	492b      	ldr	r1, [pc, #172]	@ (80181c4 <__gethex+0x2b0>)
 8018118:	9303      	str	r3, [sp, #12]
 801811a:	2201      	movs	r2, #1
 801811c:	4630      	mov	r0, r6
 801811e:	f7ff fe11 	bl	8017d44 <strncmp>
 8018122:	9b03      	ldr	r3, [sp, #12]
 8018124:	2800      	cmp	r0, #0
 8018126:	d1e1      	bne.n	80180ec <__gethex+0x1d8>
 8018128:	e7a2      	b.n	8018070 <__gethex+0x15c>
 801812a:	1ea9      	subs	r1, r5, #2
 801812c:	4620      	mov	r0, r4
 801812e:	f7fe fce4 	bl	8016afa <__any_on>
 8018132:	2800      	cmp	r0, #0
 8018134:	d0c2      	beq.n	80180bc <__gethex+0x1a8>
 8018136:	f04f 0903 	mov.w	r9, #3
 801813a:	e7c1      	b.n	80180c0 <__gethex+0x1ac>
 801813c:	da09      	bge.n	8018152 <__gethex+0x23e>
 801813e:	1b75      	subs	r5, r6, r5
 8018140:	4621      	mov	r1, r4
 8018142:	9801      	ldr	r0, [sp, #4]
 8018144:	462a      	mov	r2, r5
 8018146:	f7fe fa9f 	bl	8016688 <__lshift>
 801814a:	1b7f      	subs	r7, r7, r5
 801814c:	4604      	mov	r4, r0
 801814e:	f100 0a14 	add.w	sl, r0, #20
 8018152:	f04f 0900 	mov.w	r9, #0
 8018156:	e7b8      	b.n	80180ca <__gethex+0x1b6>
 8018158:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801815c:	42bd      	cmp	r5, r7
 801815e:	dd6f      	ble.n	8018240 <__gethex+0x32c>
 8018160:	1bed      	subs	r5, r5, r7
 8018162:	42ae      	cmp	r6, r5
 8018164:	dc34      	bgt.n	80181d0 <__gethex+0x2bc>
 8018166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801816a:	2b02      	cmp	r3, #2
 801816c:	d022      	beq.n	80181b4 <__gethex+0x2a0>
 801816e:	2b03      	cmp	r3, #3
 8018170:	d024      	beq.n	80181bc <__gethex+0x2a8>
 8018172:	2b01      	cmp	r3, #1
 8018174:	d115      	bne.n	80181a2 <__gethex+0x28e>
 8018176:	42ae      	cmp	r6, r5
 8018178:	d113      	bne.n	80181a2 <__gethex+0x28e>
 801817a:	2e01      	cmp	r6, #1
 801817c:	d10b      	bne.n	8018196 <__gethex+0x282>
 801817e:	9a02      	ldr	r2, [sp, #8]
 8018180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018184:	6013      	str	r3, [r2, #0]
 8018186:	2301      	movs	r3, #1
 8018188:	6123      	str	r3, [r4, #16]
 801818a:	f8ca 3000 	str.w	r3, [sl]
 801818e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018190:	2562      	movs	r5, #98	@ 0x62
 8018192:	601c      	str	r4, [r3, #0]
 8018194:	e73a      	b.n	801800c <__gethex+0xf8>
 8018196:	1e71      	subs	r1, r6, #1
 8018198:	4620      	mov	r0, r4
 801819a:	f7fe fcae 	bl	8016afa <__any_on>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d1ed      	bne.n	801817e <__gethex+0x26a>
 80181a2:	9801      	ldr	r0, [sp, #4]
 80181a4:	4621      	mov	r1, r4
 80181a6:	f7fe f85f 	bl	8016268 <_Bfree>
 80181aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181ac:	2300      	movs	r3, #0
 80181ae:	6013      	str	r3, [r2, #0]
 80181b0:	2550      	movs	r5, #80	@ 0x50
 80181b2:	e72b      	b.n	801800c <__gethex+0xf8>
 80181b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1f3      	bne.n	80181a2 <__gethex+0x28e>
 80181ba:	e7e0      	b.n	801817e <__gethex+0x26a>
 80181bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d1dd      	bne.n	801817e <__gethex+0x26a>
 80181c2:	e7ee      	b.n	80181a2 <__gethex+0x28e>
 80181c4:	0801b4ff 	.word	0x0801b4ff
 80181c8:	0801b495 	.word	0x0801b495
 80181cc:	0801b556 	.word	0x0801b556
 80181d0:	1e6f      	subs	r7, r5, #1
 80181d2:	f1b9 0f00 	cmp.w	r9, #0
 80181d6:	d130      	bne.n	801823a <__gethex+0x326>
 80181d8:	b127      	cbz	r7, 80181e4 <__gethex+0x2d0>
 80181da:	4639      	mov	r1, r7
 80181dc:	4620      	mov	r0, r4
 80181de:	f7fe fc8c 	bl	8016afa <__any_on>
 80181e2:	4681      	mov	r9, r0
 80181e4:	117a      	asrs	r2, r7, #5
 80181e6:	2301      	movs	r3, #1
 80181e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80181ec:	f007 071f 	and.w	r7, r7, #31
 80181f0:	40bb      	lsls	r3, r7
 80181f2:	4213      	tst	r3, r2
 80181f4:	4629      	mov	r1, r5
 80181f6:	4620      	mov	r0, r4
 80181f8:	bf18      	it	ne
 80181fa:	f049 0902 	orrne.w	r9, r9, #2
 80181fe:	f7ff fe21 	bl	8017e44 <rshift>
 8018202:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018206:	1b76      	subs	r6, r6, r5
 8018208:	2502      	movs	r5, #2
 801820a:	f1b9 0f00 	cmp.w	r9, #0
 801820e:	d047      	beq.n	80182a0 <__gethex+0x38c>
 8018210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018214:	2b02      	cmp	r3, #2
 8018216:	d015      	beq.n	8018244 <__gethex+0x330>
 8018218:	2b03      	cmp	r3, #3
 801821a:	d017      	beq.n	801824c <__gethex+0x338>
 801821c:	2b01      	cmp	r3, #1
 801821e:	d109      	bne.n	8018234 <__gethex+0x320>
 8018220:	f019 0f02 	tst.w	r9, #2
 8018224:	d006      	beq.n	8018234 <__gethex+0x320>
 8018226:	f8da 3000 	ldr.w	r3, [sl]
 801822a:	ea49 0903 	orr.w	r9, r9, r3
 801822e:	f019 0f01 	tst.w	r9, #1
 8018232:	d10e      	bne.n	8018252 <__gethex+0x33e>
 8018234:	f045 0510 	orr.w	r5, r5, #16
 8018238:	e032      	b.n	80182a0 <__gethex+0x38c>
 801823a:	f04f 0901 	mov.w	r9, #1
 801823e:	e7d1      	b.n	80181e4 <__gethex+0x2d0>
 8018240:	2501      	movs	r5, #1
 8018242:	e7e2      	b.n	801820a <__gethex+0x2f6>
 8018244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018246:	f1c3 0301 	rsb	r3, r3, #1
 801824a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801824c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801824e:	2b00      	cmp	r3, #0
 8018250:	d0f0      	beq.n	8018234 <__gethex+0x320>
 8018252:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018256:	f104 0314 	add.w	r3, r4, #20
 801825a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801825e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018262:	f04f 0c00 	mov.w	ip, #0
 8018266:	4618      	mov	r0, r3
 8018268:	f853 2b04 	ldr.w	r2, [r3], #4
 801826c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018270:	d01b      	beq.n	80182aa <__gethex+0x396>
 8018272:	3201      	adds	r2, #1
 8018274:	6002      	str	r2, [r0, #0]
 8018276:	2d02      	cmp	r5, #2
 8018278:	f104 0314 	add.w	r3, r4, #20
 801827c:	d13c      	bne.n	80182f8 <__gethex+0x3e4>
 801827e:	f8d8 2000 	ldr.w	r2, [r8]
 8018282:	3a01      	subs	r2, #1
 8018284:	42b2      	cmp	r2, r6
 8018286:	d109      	bne.n	801829c <__gethex+0x388>
 8018288:	1171      	asrs	r1, r6, #5
 801828a:	2201      	movs	r2, #1
 801828c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018290:	f006 061f 	and.w	r6, r6, #31
 8018294:	fa02 f606 	lsl.w	r6, r2, r6
 8018298:	421e      	tst	r6, r3
 801829a:	d13a      	bne.n	8018312 <__gethex+0x3fe>
 801829c:	f045 0520 	orr.w	r5, r5, #32
 80182a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182a2:	601c      	str	r4, [r3, #0]
 80182a4:	9b02      	ldr	r3, [sp, #8]
 80182a6:	601f      	str	r7, [r3, #0]
 80182a8:	e6b0      	b.n	801800c <__gethex+0xf8>
 80182aa:	4299      	cmp	r1, r3
 80182ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80182b0:	d8d9      	bhi.n	8018266 <__gethex+0x352>
 80182b2:	68a3      	ldr	r3, [r4, #8]
 80182b4:	459b      	cmp	fp, r3
 80182b6:	db17      	blt.n	80182e8 <__gethex+0x3d4>
 80182b8:	6861      	ldr	r1, [r4, #4]
 80182ba:	9801      	ldr	r0, [sp, #4]
 80182bc:	3101      	adds	r1, #1
 80182be:	f7fd ff93 	bl	80161e8 <_Balloc>
 80182c2:	4681      	mov	r9, r0
 80182c4:	b918      	cbnz	r0, 80182ce <__gethex+0x3ba>
 80182c6:	4b1a      	ldr	r3, [pc, #104]	@ (8018330 <__gethex+0x41c>)
 80182c8:	4602      	mov	r2, r0
 80182ca:	2184      	movs	r1, #132	@ 0x84
 80182cc:	e6c5      	b.n	801805a <__gethex+0x146>
 80182ce:	6922      	ldr	r2, [r4, #16]
 80182d0:	3202      	adds	r2, #2
 80182d2:	f104 010c 	add.w	r1, r4, #12
 80182d6:	0092      	lsls	r2, r2, #2
 80182d8:	300c      	adds	r0, #12
 80182da:	f7fd f816 	bl	801530a <memcpy>
 80182de:	4621      	mov	r1, r4
 80182e0:	9801      	ldr	r0, [sp, #4]
 80182e2:	f7fd ffc1 	bl	8016268 <_Bfree>
 80182e6:	464c      	mov	r4, r9
 80182e8:	6923      	ldr	r3, [r4, #16]
 80182ea:	1c5a      	adds	r2, r3, #1
 80182ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182f0:	6122      	str	r2, [r4, #16]
 80182f2:	2201      	movs	r2, #1
 80182f4:	615a      	str	r2, [r3, #20]
 80182f6:	e7be      	b.n	8018276 <__gethex+0x362>
 80182f8:	6922      	ldr	r2, [r4, #16]
 80182fa:	455a      	cmp	r2, fp
 80182fc:	dd0b      	ble.n	8018316 <__gethex+0x402>
 80182fe:	2101      	movs	r1, #1
 8018300:	4620      	mov	r0, r4
 8018302:	f7ff fd9f 	bl	8017e44 <rshift>
 8018306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801830a:	3701      	adds	r7, #1
 801830c:	42bb      	cmp	r3, r7
 801830e:	f6ff aee0 	blt.w	80180d2 <__gethex+0x1be>
 8018312:	2501      	movs	r5, #1
 8018314:	e7c2      	b.n	801829c <__gethex+0x388>
 8018316:	f016 061f 	ands.w	r6, r6, #31
 801831a:	d0fa      	beq.n	8018312 <__gethex+0x3fe>
 801831c:	4453      	add	r3, sl
 801831e:	f1c6 0620 	rsb	r6, r6, #32
 8018322:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018326:	f7fe f851 	bl	80163cc <__hi0bits>
 801832a:	42b0      	cmp	r0, r6
 801832c:	dbe7      	blt.n	80182fe <__gethex+0x3ea>
 801832e:	e7f0      	b.n	8018312 <__gethex+0x3fe>
 8018330:	0801b495 	.word	0x0801b495

08018334 <L_shift>:
 8018334:	f1c2 0208 	rsb	r2, r2, #8
 8018338:	0092      	lsls	r2, r2, #2
 801833a:	b570      	push	{r4, r5, r6, lr}
 801833c:	f1c2 0620 	rsb	r6, r2, #32
 8018340:	6843      	ldr	r3, [r0, #4]
 8018342:	6804      	ldr	r4, [r0, #0]
 8018344:	fa03 f506 	lsl.w	r5, r3, r6
 8018348:	432c      	orrs	r4, r5
 801834a:	40d3      	lsrs	r3, r2
 801834c:	6004      	str	r4, [r0, #0]
 801834e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018352:	4288      	cmp	r0, r1
 8018354:	d3f4      	bcc.n	8018340 <L_shift+0xc>
 8018356:	bd70      	pop	{r4, r5, r6, pc}

08018358 <__match>:
 8018358:	b530      	push	{r4, r5, lr}
 801835a:	6803      	ldr	r3, [r0, #0]
 801835c:	3301      	adds	r3, #1
 801835e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018362:	b914      	cbnz	r4, 801836a <__match+0x12>
 8018364:	6003      	str	r3, [r0, #0]
 8018366:	2001      	movs	r0, #1
 8018368:	bd30      	pop	{r4, r5, pc}
 801836a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801836e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018372:	2d19      	cmp	r5, #25
 8018374:	bf98      	it	ls
 8018376:	3220      	addls	r2, #32
 8018378:	42a2      	cmp	r2, r4
 801837a:	d0f0      	beq.n	801835e <__match+0x6>
 801837c:	2000      	movs	r0, #0
 801837e:	e7f3      	b.n	8018368 <__match+0x10>

08018380 <__hexnan>:
 8018380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018384:	680b      	ldr	r3, [r1, #0]
 8018386:	6801      	ldr	r1, [r0, #0]
 8018388:	115e      	asrs	r6, r3, #5
 801838a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801838e:	f013 031f 	ands.w	r3, r3, #31
 8018392:	b087      	sub	sp, #28
 8018394:	bf18      	it	ne
 8018396:	3604      	addne	r6, #4
 8018398:	2500      	movs	r5, #0
 801839a:	1f37      	subs	r7, r6, #4
 801839c:	4682      	mov	sl, r0
 801839e:	4690      	mov	r8, r2
 80183a0:	9301      	str	r3, [sp, #4]
 80183a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80183a6:	46b9      	mov	r9, r7
 80183a8:	463c      	mov	r4, r7
 80183aa:	9502      	str	r5, [sp, #8]
 80183ac:	46ab      	mov	fp, r5
 80183ae:	784a      	ldrb	r2, [r1, #1]
 80183b0:	1c4b      	adds	r3, r1, #1
 80183b2:	9303      	str	r3, [sp, #12]
 80183b4:	b342      	cbz	r2, 8018408 <__hexnan+0x88>
 80183b6:	4610      	mov	r0, r2
 80183b8:	9105      	str	r1, [sp, #20]
 80183ba:	9204      	str	r2, [sp, #16]
 80183bc:	f7ff fd94 	bl	8017ee8 <__hexdig_fun>
 80183c0:	2800      	cmp	r0, #0
 80183c2:	d151      	bne.n	8018468 <__hexnan+0xe8>
 80183c4:	9a04      	ldr	r2, [sp, #16]
 80183c6:	9905      	ldr	r1, [sp, #20]
 80183c8:	2a20      	cmp	r2, #32
 80183ca:	d818      	bhi.n	80183fe <__hexnan+0x7e>
 80183cc:	9b02      	ldr	r3, [sp, #8]
 80183ce:	459b      	cmp	fp, r3
 80183d0:	dd13      	ble.n	80183fa <__hexnan+0x7a>
 80183d2:	454c      	cmp	r4, r9
 80183d4:	d206      	bcs.n	80183e4 <__hexnan+0x64>
 80183d6:	2d07      	cmp	r5, #7
 80183d8:	dc04      	bgt.n	80183e4 <__hexnan+0x64>
 80183da:	462a      	mov	r2, r5
 80183dc:	4649      	mov	r1, r9
 80183de:	4620      	mov	r0, r4
 80183e0:	f7ff ffa8 	bl	8018334 <L_shift>
 80183e4:	4544      	cmp	r4, r8
 80183e6:	d952      	bls.n	801848e <__hexnan+0x10e>
 80183e8:	2300      	movs	r3, #0
 80183ea:	f1a4 0904 	sub.w	r9, r4, #4
 80183ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80183f2:	f8cd b008 	str.w	fp, [sp, #8]
 80183f6:	464c      	mov	r4, r9
 80183f8:	461d      	mov	r5, r3
 80183fa:	9903      	ldr	r1, [sp, #12]
 80183fc:	e7d7      	b.n	80183ae <__hexnan+0x2e>
 80183fe:	2a29      	cmp	r2, #41	@ 0x29
 8018400:	d157      	bne.n	80184b2 <__hexnan+0x132>
 8018402:	3102      	adds	r1, #2
 8018404:	f8ca 1000 	str.w	r1, [sl]
 8018408:	f1bb 0f00 	cmp.w	fp, #0
 801840c:	d051      	beq.n	80184b2 <__hexnan+0x132>
 801840e:	454c      	cmp	r4, r9
 8018410:	d206      	bcs.n	8018420 <__hexnan+0xa0>
 8018412:	2d07      	cmp	r5, #7
 8018414:	dc04      	bgt.n	8018420 <__hexnan+0xa0>
 8018416:	462a      	mov	r2, r5
 8018418:	4649      	mov	r1, r9
 801841a:	4620      	mov	r0, r4
 801841c:	f7ff ff8a 	bl	8018334 <L_shift>
 8018420:	4544      	cmp	r4, r8
 8018422:	d936      	bls.n	8018492 <__hexnan+0x112>
 8018424:	f1a8 0204 	sub.w	r2, r8, #4
 8018428:	4623      	mov	r3, r4
 801842a:	f853 1b04 	ldr.w	r1, [r3], #4
 801842e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018432:	429f      	cmp	r7, r3
 8018434:	d2f9      	bcs.n	801842a <__hexnan+0xaa>
 8018436:	1b3b      	subs	r3, r7, r4
 8018438:	f023 0303 	bic.w	r3, r3, #3
 801843c:	3304      	adds	r3, #4
 801843e:	3401      	adds	r4, #1
 8018440:	3e03      	subs	r6, #3
 8018442:	42b4      	cmp	r4, r6
 8018444:	bf88      	it	hi
 8018446:	2304      	movhi	r3, #4
 8018448:	4443      	add	r3, r8
 801844a:	2200      	movs	r2, #0
 801844c:	f843 2b04 	str.w	r2, [r3], #4
 8018450:	429f      	cmp	r7, r3
 8018452:	d2fb      	bcs.n	801844c <__hexnan+0xcc>
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	b91b      	cbnz	r3, 8018460 <__hexnan+0xe0>
 8018458:	4547      	cmp	r7, r8
 801845a:	d128      	bne.n	80184ae <__hexnan+0x12e>
 801845c:	2301      	movs	r3, #1
 801845e:	603b      	str	r3, [r7, #0]
 8018460:	2005      	movs	r0, #5
 8018462:	b007      	add	sp, #28
 8018464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018468:	3501      	adds	r5, #1
 801846a:	2d08      	cmp	r5, #8
 801846c:	f10b 0b01 	add.w	fp, fp, #1
 8018470:	dd06      	ble.n	8018480 <__hexnan+0x100>
 8018472:	4544      	cmp	r4, r8
 8018474:	d9c1      	bls.n	80183fa <__hexnan+0x7a>
 8018476:	2300      	movs	r3, #0
 8018478:	f844 3c04 	str.w	r3, [r4, #-4]
 801847c:	2501      	movs	r5, #1
 801847e:	3c04      	subs	r4, #4
 8018480:	6822      	ldr	r2, [r4, #0]
 8018482:	f000 000f 	and.w	r0, r0, #15
 8018486:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801848a:	6020      	str	r0, [r4, #0]
 801848c:	e7b5      	b.n	80183fa <__hexnan+0x7a>
 801848e:	2508      	movs	r5, #8
 8018490:	e7b3      	b.n	80183fa <__hexnan+0x7a>
 8018492:	9b01      	ldr	r3, [sp, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d0dd      	beq.n	8018454 <__hexnan+0xd4>
 8018498:	f1c3 0320 	rsb	r3, r3, #32
 801849c:	f04f 32ff 	mov.w	r2, #4294967295
 80184a0:	40da      	lsrs	r2, r3
 80184a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80184a6:	4013      	ands	r3, r2
 80184a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80184ac:	e7d2      	b.n	8018454 <__hexnan+0xd4>
 80184ae:	3f04      	subs	r7, #4
 80184b0:	e7d0      	b.n	8018454 <__hexnan+0xd4>
 80184b2:	2004      	movs	r0, #4
 80184b4:	e7d5      	b.n	8018462 <__hexnan+0xe2>

080184b6 <__ascii_mbtowc>:
 80184b6:	b082      	sub	sp, #8
 80184b8:	b901      	cbnz	r1, 80184bc <__ascii_mbtowc+0x6>
 80184ba:	a901      	add	r1, sp, #4
 80184bc:	b142      	cbz	r2, 80184d0 <__ascii_mbtowc+0x1a>
 80184be:	b14b      	cbz	r3, 80184d4 <__ascii_mbtowc+0x1e>
 80184c0:	7813      	ldrb	r3, [r2, #0]
 80184c2:	600b      	str	r3, [r1, #0]
 80184c4:	7812      	ldrb	r2, [r2, #0]
 80184c6:	1e10      	subs	r0, r2, #0
 80184c8:	bf18      	it	ne
 80184ca:	2001      	movne	r0, #1
 80184cc:	b002      	add	sp, #8
 80184ce:	4770      	bx	lr
 80184d0:	4610      	mov	r0, r2
 80184d2:	e7fb      	b.n	80184cc <__ascii_mbtowc+0x16>
 80184d4:	f06f 0001 	mvn.w	r0, #1
 80184d8:	e7f8      	b.n	80184cc <__ascii_mbtowc+0x16>

080184da <_realloc_r>:
 80184da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184de:	4607      	mov	r7, r0
 80184e0:	4614      	mov	r4, r2
 80184e2:	460d      	mov	r5, r1
 80184e4:	b921      	cbnz	r1, 80184f0 <_realloc_r+0x16>
 80184e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184ea:	4611      	mov	r1, r2
 80184ec:	f7fd bdf0 	b.w	80160d0 <_malloc_r>
 80184f0:	b92a      	cbnz	r2, 80184fe <_realloc_r+0x24>
 80184f2:	f7fd fd79 	bl	8015fe8 <_free_r>
 80184f6:	4625      	mov	r5, r4
 80184f8:	4628      	mov	r0, r5
 80184fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184fe:	f000 f840 	bl	8018582 <_malloc_usable_size_r>
 8018502:	4284      	cmp	r4, r0
 8018504:	4606      	mov	r6, r0
 8018506:	d802      	bhi.n	801850e <_realloc_r+0x34>
 8018508:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801850c:	d8f4      	bhi.n	80184f8 <_realloc_r+0x1e>
 801850e:	4621      	mov	r1, r4
 8018510:	4638      	mov	r0, r7
 8018512:	f7fd fddd 	bl	80160d0 <_malloc_r>
 8018516:	4680      	mov	r8, r0
 8018518:	b908      	cbnz	r0, 801851e <_realloc_r+0x44>
 801851a:	4645      	mov	r5, r8
 801851c:	e7ec      	b.n	80184f8 <_realloc_r+0x1e>
 801851e:	42b4      	cmp	r4, r6
 8018520:	4622      	mov	r2, r4
 8018522:	4629      	mov	r1, r5
 8018524:	bf28      	it	cs
 8018526:	4632      	movcs	r2, r6
 8018528:	f7fc feef 	bl	801530a <memcpy>
 801852c:	4629      	mov	r1, r5
 801852e:	4638      	mov	r0, r7
 8018530:	f7fd fd5a 	bl	8015fe8 <_free_r>
 8018534:	e7f1      	b.n	801851a <_realloc_r+0x40>

08018536 <__ascii_wctomb>:
 8018536:	4603      	mov	r3, r0
 8018538:	4608      	mov	r0, r1
 801853a:	b141      	cbz	r1, 801854e <__ascii_wctomb+0x18>
 801853c:	2aff      	cmp	r2, #255	@ 0xff
 801853e:	d904      	bls.n	801854a <__ascii_wctomb+0x14>
 8018540:	228a      	movs	r2, #138	@ 0x8a
 8018542:	601a      	str	r2, [r3, #0]
 8018544:	f04f 30ff 	mov.w	r0, #4294967295
 8018548:	4770      	bx	lr
 801854a:	700a      	strb	r2, [r1, #0]
 801854c:	2001      	movs	r0, #1
 801854e:	4770      	bx	lr

08018550 <fiprintf>:
 8018550:	b40e      	push	{r1, r2, r3}
 8018552:	b503      	push	{r0, r1, lr}
 8018554:	4601      	mov	r1, r0
 8018556:	ab03      	add	r3, sp, #12
 8018558:	4805      	ldr	r0, [pc, #20]	@ (8018570 <fiprintf+0x20>)
 801855a:	f853 2b04 	ldr.w	r2, [r3], #4
 801855e:	6800      	ldr	r0, [r0, #0]
 8018560:	9301      	str	r3, [sp, #4]
 8018562:	f000 f83f 	bl	80185e4 <_vfiprintf_r>
 8018566:	b002      	add	sp, #8
 8018568:	f85d eb04 	ldr.w	lr, [sp], #4
 801856c:	b003      	add	sp, #12
 801856e:	4770      	bx	lr
 8018570:	20000054 	.word	0x20000054

08018574 <abort>:
 8018574:	b508      	push	{r3, lr}
 8018576:	2006      	movs	r0, #6
 8018578:	f000 f974 	bl	8018864 <raise>
 801857c:	2001      	movs	r0, #1
 801857e:	f7eb fc47 	bl	8003e10 <_exit>

08018582 <_malloc_usable_size_r>:
 8018582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018586:	1f18      	subs	r0, r3, #4
 8018588:	2b00      	cmp	r3, #0
 801858a:	bfbc      	itt	lt
 801858c:	580b      	ldrlt	r3, [r1, r0]
 801858e:	18c0      	addlt	r0, r0, r3
 8018590:	4770      	bx	lr

08018592 <__sfputc_r>:
 8018592:	6893      	ldr	r3, [r2, #8]
 8018594:	3b01      	subs	r3, #1
 8018596:	2b00      	cmp	r3, #0
 8018598:	b410      	push	{r4}
 801859a:	6093      	str	r3, [r2, #8]
 801859c:	da08      	bge.n	80185b0 <__sfputc_r+0x1e>
 801859e:	6994      	ldr	r4, [r2, #24]
 80185a0:	42a3      	cmp	r3, r4
 80185a2:	db01      	blt.n	80185a8 <__sfputc_r+0x16>
 80185a4:	290a      	cmp	r1, #10
 80185a6:	d103      	bne.n	80185b0 <__sfputc_r+0x1e>
 80185a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185ac:	f7fc bd3b 	b.w	8015026 <__swbuf_r>
 80185b0:	6813      	ldr	r3, [r2, #0]
 80185b2:	1c58      	adds	r0, r3, #1
 80185b4:	6010      	str	r0, [r2, #0]
 80185b6:	7019      	strb	r1, [r3, #0]
 80185b8:	4608      	mov	r0, r1
 80185ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <__sfputs_r>:
 80185c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c2:	4606      	mov	r6, r0
 80185c4:	460f      	mov	r7, r1
 80185c6:	4614      	mov	r4, r2
 80185c8:	18d5      	adds	r5, r2, r3
 80185ca:	42ac      	cmp	r4, r5
 80185cc:	d101      	bne.n	80185d2 <__sfputs_r+0x12>
 80185ce:	2000      	movs	r0, #0
 80185d0:	e007      	b.n	80185e2 <__sfputs_r+0x22>
 80185d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185d6:	463a      	mov	r2, r7
 80185d8:	4630      	mov	r0, r6
 80185da:	f7ff ffda 	bl	8018592 <__sfputc_r>
 80185de:	1c43      	adds	r3, r0, #1
 80185e0:	d1f3      	bne.n	80185ca <__sfputs_r+0xa>
 80185e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080185e4 <_vfiprintf_r>:
 80185e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e8:	460d      	mov	r5, r1
 80185ea:	b09d      	sub	sp, #116	@ 0x74
 80185ec:	4614      	mov	r4, r2
 80185ee:	4698      	mov	r8, r3
 80185f0:	4606      	mov	r6, r0
 80185f2:	b118      	cbz	r0, 80185fc <_vfiprintf_r+0x18>
 80185f4:	6a03      	ldr	r3, [r0, #32]
 80185f6:	b90b      	cbnz	r3, 80185fc <_vfiprintf_r+0x18>
 80185f8:	f7fc fbe6 	bl	8014dc8 <__sinit>
 80185fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185fe:	07d9      	lsls	r1, r3, #31
 8018600:	d405      	bmi.n	801860e <_vfiprintf_r+0x2a>
 8018602:	89ab      	ldrh	r3, [r5, #12]
 8018604:	059a      	lsls	r2, r3, #22
 8018606:	d402      	bmi.n	801860e <_vfiprintf_r+0x2a>
 8018608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801860a:	f7fc fe7c 	bl	8015306 <__retarget_lock_acquire_recursive>
 801860e:	89ab      	ldrh	r3, [r5, #12]
 8018610:	071b      	lsls	r3, r3, #28
 8018612:	d501      	bpl.n	8018618 <_vfiprintf_r+0x34>
 8018614:	692b      	ldr	r3, [r5, #16]
 8018616:	b99b      	cbnz	r3, 8018640 <_vfiprintf_r+0x5c>
 8018618:	4629      	mov	r1, r5
 801861a:	4630      	mov	r0, r6
 801861c:	f7fc fd42 	bl	80150a4 <__swsetup_r>
 8018620:	b170      	cbz	r0, 8018640 <_vfiprintf_r+0x5c>
 8018622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018624:	07dc      	lsls	r4, r3, #31
 8018626:	d504      	bpl.n	8018632 <_vfiprintf_r+0x4e>
 8018628:	f04f 30ff 	mov.w	r0, #4294967295
 801862c:	b01d      	add	sp, #116	@ 0x74
 801862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018632:	89ab      	ldrh	r3, [r5, #12]
 8018634:	0598      	lsls	r0, r3, #22
 8018636:	d4f7      	bmi.n	8018628 <_vfiprintf_r+0x44>
 8018638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801863a:	f7fc fe65 	bl	8015308 <__retarget_lock_release_recursive>
 801863e:	e7f3      	b.n	8018628 <_vfiprintf_r+0x44>
 8018640:	2300      	movs	r3, #0
 8018642:	9309      	str	r3, [sp, #36]	@ 0x24
 8018644:	2320      	movs	r3, #32
 8018646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801864a:	f8cd 800c 	str.w	r8, [sp, #12]
 801864e:	2330      	movs	r3, #48	@ 0x30
 8018650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018800 <_vfiprintf_r+0x21c>
 8018654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018658:	f04f 0901 	mov.w	r9, #1
 801865c:	4623      	mov	r3, r4
 801865e:	469a      	mov	sl, r3
 8018660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018664:	b10a      	cbz	r2, 801866a <_vfiprintf_r+0x86>
 8018666:	2a25      	cmp	r2, #37	@ 0x25
 8018668:	d1f9      	bne.n	801865e <_vfiprintf_r+0x7a>
 801866a:	ebba 0b04 	subs.w	fp, sl, r4
 801866e:	d00b      	beq.n	8018688 <_vfiprintf_r+0xa4>
 8018670:	465b      	mov	r3, fp
 8018672:	4622      	mov	r2, r4
 8018674:	4629      	mov	r1, r5
 8018676:	4630      	mov	r0, r6
 8018678:	f7ff ffa2 	bl	80185c0 <__sfputs_r>
 801867c:	3001      	adds	r0, #1
 801867e:	f000 80a7 	beq.w	80187d0 <_vfiprintf_r+0x1ec>
 8018682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018684:	445a      	add	r2, fp
 8018686:	9209      	str	r2, [sp, #36]	@ 0x24
 8018688:	f89a 3000 	ldrb.w	r3, [sl]
 801868c:	2b00      	cmp	r3, #0
 801868e:	f000 809f 	beq.w	80187d0 <_vfiprintf_r+0x1ec>
 8018692:	2300      	movs	r3, #0
 8018694:	f04f 32ff 	mov.w	r2, #4294967295
 8018698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801869c:	f10a 0a01 	add.w	sl, sl, #1
 80186a0:	9304      	str	r3, [sp, #16]
 80186a2:	9307      	str	r3, [sp, #28]
 80186a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80186a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80186aa:	4654      	mov	r4, sl
 80186ac:	2205      	movs	r2, #5
 80186ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186b2:	4853      	ldr	r0, [pc, #332]	@ (8018800 <_vfiprintf_r+0x21c>)
 80186b4:	f7e7 fdb4 	bl	8000220 <memchr>
 80186b8:	9a04      	ldr	r2, [sp, #16]
 80186ba:	b9d8      	cbnz	r0, 80186f4 <_vfiprintf_r+0x110>
 80186bc:	06d1      	lsls	r1, r2, #27
 80186be:	bf44      	itt	mi
 80186c0:	2320      	movmi	r3, #32
 80186c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186c6:	0713      	lsls	r3, r2, #28
 80186c8:	bf44      	itt	mi
 80186ca:	232b      	movmi	r3, #43	@ 0x2b
 80186cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186d0:	f89a 3000 	ldrb.w	r3, [sl]
 80186d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80186d6:	d015      	beq.n	8018704 <_vfiprintf_r+0x120>
 80186d8:	9a07      	ldr	r2, [sp, #28]
 80186da:	4654      	mov	r4, sl
 80186dc:	2000      	movs	r0, #0
 80186de:	f04f 0c0a 	mov.w	ip, #10
 80186e2:	4621      	mov	r1, r4
 80186e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186e8:	3b30      	subs	r3, #48	@ 0x30
 80186ea:	2b09      	cmp	r3, #9
 80186ec:	d94b      	bls.n	8018786 <_vfiprintf_r+0x1a2>
 80186ee:	b1b0      	cbz	r0, 801871e <_vfiprintf_r+0x13a>
 80186f0:	9207      	str	r2, [sp, #28]
 80186f2:	e014      	b.n	801871e <_vfiprintf_r+0x13a>
 80186f4:	eba0 0308 	sub.w	r3, r0, r8
 80186f8:	fa09 f303 	lsl.w	r3, r9, r3
 80186fc:	4313      	orrs	r3, r2
 80186fe:	9304      	str	r3, [sp, #16]
 8018700:	46a2      	mov	sl, r4
 8018702:	e7d2      	b.n	80186aa <_vfiprintf_r+0xc6>
 8018704:	9b03      	ldr	r3, [sp, #12]
 8018706:	1d19      	adds	r1, r3, #4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	9103      	str	r1, [sp, #12]
 801870c:	2b00      	cmp	r3, #0
 801870e:	bfbb      	ittet	lt
 8018710:	425b      	neglt	r3, r3
 8018712:	f042 0202 	orrlt.w	r2, r2, #2
 8018716:	9307      	strge	r3, [sp, #28]
 8018718:	9307      	strlt	r3, [sp, #28]
 801871a:	bfb8      	it	lt
 801871c:	9204      	strlt	r2, [sp, #16]
 801871e:	7823      	ldrb	r3, [r4, #0]
 8018720:	2b2e      	cmp	r3, #46	@ 0x2e
 8018722:	d10a      	bne.n	801873a <_vfiprintf_r+0x156>
 8018724:	7863      	ldrb	r3, [r4, #1]
 8018726:	2b2a      	cmp	r3, #42	@ 0x2a
 8018728:	d132      	bne.n	8018790 <_vfiprintf_r+0x1ac>
 801872a:	9b03      	ldr	r3, [sp, #12]
 801872c:	1d1a      	adds	r2, r3, #4
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	9203      	str	r2, [sp, #12]
 8018732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018736:	3402      	adds	r4, #2
 8018738:	9305      	str	r3, [sp, #20]
 801873a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018810 <_vfiprintf_r+0x22c>
 801873e:	7821      	ldrb	r1, [r4, #0]
 8018740:	2203      	movs	r2, #3
 8018742:	4650      	mov	r0, sl
 8018744:	f7e7 fd6c 	bl	8000220 <memchr>
 8018748:	b138      	cbz	r0, 801875a <_vfiprintf_r+0x176>
 801874a:	9b04      	ldr	r3, [sp, #16]
 801874c:	eba0 000a 	sub.w	r0, r0, sl
 8018750:	2240      	movs	r2, #64	@ 0x40
 8018752:	4082      	lsls	r2, r0
 8018754:	4313      	orrs	r3, r2
 8018756:	3401      	adds	r4, #1
 8018758:	9304      	str	r3, [sp, #16]
 801875a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801875e:	4829      	ldr	r0, [pc, #164]	@ (8018804 <_vfiprintf_r+0x220>)
 8018760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018764:	2206      	movs	r2, #6
 8018766:	f7e7 fd5b 	bl	8000220 <memchr>
 801876a:	2800      	cmp	r0, #0
 801876c:	d03f      	beq.n	80187ee <_vfiprintf_r+0x20a>
 801876e:	4b26      	ldr	r3, [pc, #152]	@ (8018808 <_vfiprintf_r+0x224>)
 8018770:	bb1b      	cbnz	r3, 80187ba <_vfiprintf_r+0x1d6>
 8018772:	9b03      	ldr	r3, [sp, #12]
 8018774:	3307      	adds	r3, #7
 8018776:	f023 0307 	bic.w	r3, r3, #7
 801877a:	3308      	adds	r3, #8
 801877c:	9303      	str	r3, [sp, #12]
 801877e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018780:	443b      	add	r3, r7
 8018782:	9309      	str	r3, [sp, #36]	@ 0x24
 8018784:	e76a      	b.n	801865c <_vfiprintf_r+0x78>
 8018786:	fb0c 3202 	mla	r2, ip, r2, r3
 801878a:	460c      	mov	r4, r1
 801878c:	2001      	movs	r0, #1
 801878e:	e7a8      	b.n	80186e2 <_vfiprintf_r+0xfe>
 8018790:	2300      	movs	r3, #0
 8018792:	3401      	adds	r4, #1
 8018794:	9305      	str	r3, [sp, #20]
 8018796:	4619      	mov	r1, r3
 8018798:	f04f 0c0a 	mov.w	ip, #10
 801879c:	4620      	mov	r0, r4
 801879e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187a2:	3a30      	subs	r2, #48	@ 0x30
 80187a4:	2a09      	cmp	r2, #9
 80187a6:	d903      	bls.n	80187b0 <_vfiprintf_r+0x1cc>
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d0c6      	beq.n	801873a <_vfiprintf_r+0x156>
 80187ac:	9105      	str	r1, [sp, #20]
 80187ae:	e7c4      	b.n	801873a <_vfiprintf_r+0x156>
 80187b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80187b4:	4604      	mov	r4, r0
 80187b6:	2301      	movs	r3, #1
 80187b8:	e7f0      	b.n	801879c <_vfiprintf_r+0x1b8>
 80187ba:	ab03      	add	r3, sp, #12
 80187bc:	9300      	str	r3, [sp, #0]
 80187be:	462a      	mov	r2, r5
 80187c0:	4b12      	ldr	r3, [pc, #72]	@ (801880c <_vfiprintf_r+0x228>)
 80187c2:	a904      	add	r1, sp, #16
 80187c4:	4630      	mov	r0, r6
 80187c6:	f7fb fcaf 	bl	8014128 <_printf_float>
 80187ca:	4607      	mov	r7, r0
 80187cc:	1c78      	adds	r0, r7, #1
 80187ce:	d1d6      	bne.n	801877e <_vfiprintf_r+0x19a>
 80187d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187d2:	07d9      	lsls	r1, r3, #31
 80187d4:	d405      	bmi.n	80187e2 <_vfiprintf_r+0x1fe>
 80187d6:	89ab      	ldrh	r3, [r5, #12]
 80187d8:	059a      	lsls	r2, r3, #22
 80187da:	d402      	bmi.n	80187e2 <_vfiprintf_r+0x1fe>
 80187dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187de:	f7fc fd93 	bl	8015308 <__retarget_lock_release_recursive>
 80187e2:	89ab      	ldrh	r3, [r5, #12]
 80187e4:	065b      	lsls	r3, r3, #25
 80187e6:	f53f af1f 	bmi.w	8018628 <_vfiprintf_r+0x44>
 80187ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80187ec:	e71e      	b.n	801862c <_vfiprintf_r+0x48>
 80187ee:	ab03      	add	r3, sp, #12
 80187f0:	9300      	str	r3, [sp, #0]
 80187f2:	462a      	mov	r2, r5
 80187f4:	4b05      	ldr	r3, [pc, #20]	@ (801880c <_vfiprintf_r+0x228>)
 80187f6:	a904      	add	r1, sp, #16
 80187f8:	4630      	mov	r0, r6
 80187fa:	f7fb ff2d 	bl	8014658 <_printf_i>
 80187fe:	e7e4      	b.n	80187ca <_vfiprintf_r+0x1e6>
 8018800:	0801b501 	.word	0x0801b501
 8018804:	0801b50b 	.word	0x0801b50b
 8018808:	08014129 	.word	0x08014129
 801880c:	080185c1 	.word	0x080185c1
 8018810:	0801b507 	.word	0x0801b507

08018814 <_raise_r>:
 8018814:	291f      	cmp	r1, #31
 8018816:	b538      	push	{r3, r4, r5, lr}
 8018818:	4605      	mov	r5, r0
 801881a:	460c      	mov	r4, r1
 801881c:	d904      	bls.n	8018828 <_raise_r+0x14>
 801881e:	2316      	movs	r3, #22
 8018820:	6003      	str	r3, [r0, #0]
 8018822:	f04f 30ff 	mov.w	r0, #4294967295
 8018826:	bd38      	pop	{r3, r4, r5, pc}
 8018828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801882a:	b112      	cbz	r2, 8018832 <_raise_r+0x1e>
 801882c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018830:	b94b      	cbnz	r3, 8018846 <_raise_r+0x32>
 8018832:	4628      	mov	r0, r5
 8018834:	f000 f830 	bl	8018898 <_getpid_r>
 8018838:	4622      	mov	r2, r4
 801883a:	4601      	mov	r1, r0
 801883c:	4628      	mov	r0, r5
 801883e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018842:	f000 b817 	b.w	8018874 <_kill_r>
 8018846:	2b01      	cmp	r3, #1
 8018848:	d00a      	beq.n	8018860 <_raise_r+0x4c>
 801884a:	1c59      	adds	r1, r3, #1
 801884c:	d103      	bne.n	8018856 <_raise_r+0x42>
 801884e:	2316      	movs	r3, #22
 8018850:	6003      	str	r3, [r0, #0]
 8018852:	2001      	movs	r0, #1
 8018854:	e7e7      	b.n	8018826 <_raise_r+0x12>
 8018856:	2100      	movs	r1, #0
 8018858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801885c:	4620      	mov	r0, r4
 801885e:	4798      	blx	r3
 8018860:	2000      	movs	r0, #0
 8018862:	e7e0      	b.n	8018826 <_raise_r+0x12>

08018864 <raise>:
 8018864:	4b02      	ldr	r3, [pc, #8]	@ (8018870 <raise+0xc>)
 8018866:	4601      	mov	r1, r0
 8018868:	6818      	ldr	r0, [r3, #0]
 801886a:	f7ff bfd3 	b.w	8018814 <_raise_r>
 801886e:	bf00      	nop
 8018870:	20000054 	.word	0x20000054

08018874 <_kill_r>:
 8018874:	b538      	push	{r3, r4, r5, lr}
 8018876:	4d07      	ldr	r5, [pc, #28]	@ (8018894 <_kill_r+0x20>)
 8018878:	2300      	movs	r3, #0
 801887a:	4604      	mov	r4, r0
 801887c:	4608      	mov	r0, r1
 801887e:	4611      	mov	r1, r2
 8018880:	602b      	str	r3, [r5, #0]
 8018882:	f7eb fab5 	bl	8003df0 <_kill>
 8018886:	1c43      	adds	r3, r0, #1
 8018888:	d102      	bne.n	8018890 <_kill_r+0x1c>
 801888a:	682b      	ldr	r3, [r5, #0]
 801888c:	b103      	cbz	r3, 8018890 <_kill_r+0x1c>
 801888e:	6023      	str	r3, [r4, #0]
 8018890:	bd38      	pop	{r3, r4, r5, pc}
 8018892:	bf00      	nop
 8018894:	200049b8 	.word	0x200049b8

08018898 <_getpid_r>:
 8018898:	f7eb baa2 	b.w	8003de0 <_getpid>

0801889c <powf>:
 801889c:	b508      	push	{r3, lr}
 801889e:	ed2d 8b04 	vpush	{d8-d9}
 80188a2:	eeb0 8a60 	vmov.f32	s16, s1
 80188a6:	eeb0 9a40 	vmov.f32	s18, s0
 80188aa:	f000 f85b 	bl	8018964 <__ieee754_powf>
 80188ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80188b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b6:	eef0 8a40 	vmov.f32	s17, s0
 80188ba:	d63e      	bvs.n	801893a <powf+0x9e>
 80188bc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80188c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c4:	d112      	bne.n	80188ec <powf+0x50>
 80188c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80188ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ce:	d039      	beq.n	8018944 <powf+0xa8>
 80188d0:	eeb0 0a48 	vmov.f32	s0, s16
 80188d4:	f000 f839 	bl	801894a <finitef>
 80188d8:	b378      	cbz	r0, 801893a <powf+0x9e>
 80188da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80188de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e2:	d52a      	bpl.n	801893a <powf+0x9e>
 80188e4:	f7fc fce4 	bl	80152b0 <__errno>
 80188e8:	2322      	movs	r3, #34	@ 0x22
 80188ea:	e014      	b.n	8018916 <powf+0x7a>
 80188ec:	f000 f82d 	bl	801894a <finitef>
 80188f0:	b998      	cbnz	r0, 801891a <powf+0x7e>
 80188f2:	eeb0 0a49 	vmov.f32	s0, s18
 80188f6:	f000 f828 	bl	801894a <finitef>
 80188fa:	b170      	cbz	r0, 801891a <powf+0x7e>
 80188fc:	eeb0 0a48 	vmov.f32	s0, s16
 8018900:	f000 f823 	bl	801894a <finitef>
 8018904:	b148      	cbz	r0, 801891a <powf+0x7e>
 8018906:	eef4 8a68 	vcmp.f32	s17, s17
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	d7e9      	bvc.n	80188e4 <powf+0x48>
 8018910:	f7fc fcce 	bl	80152b0 <__errno>
 8018914:	2321      	movs	r3, #33	@ 0x21
 8018916:	6003      	str	r3, [r0, #0]
 8018918:	e00f      	b.n	801893a <powf+0x9e>
 801891a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801891e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018922:	d10a      	bne.n	801893a <powf+0x9e>
 8018924:	eeb0 0a49 	vmov.f32	s0, s18
 8018928:	f000 f80f 	bl	801894a <finitef>
 801892c:	b128      	cbz	r0, 801893a <powf+0x9e>
 801892e:	eeb0 0a48 	vmov.f32	s0, s16
 8018932:	f000 f80a 	bl	801894a <finitef>
 8018936:	2800      	cmp	r0, #0
 8018938:	d1d4      	bne.n	80188e4 <powf+0x48>
 801893a:	eeb0 0a68 	vmov.f32	s0, s17
 801893e:	ecbd 8b04 	vpop	{d8-d9}
 8018942:	bd08      	pop	{r3, pc}
 8018944:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018948:	e7f7      	b.n	801893a <powf+0x9e>

0801894a <finitef>:
 801894a:	ee10 3a10 	vmov	r3, s0
 801894e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8018952:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8018956:	bfac      	ite	ge
 8018958:	2000      	movge	r0, #0
 801895a:	2001      	movlt	r0, #1
 801895c:	4770      	bx	lr

0801895e <__ieee754_sqrtf>:
 801895e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018962:	4770      	bx	lr

08018964 <__ieee754_powf>:
 8018964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018968:	ee10 4a90 	vmov	r4, s1
 801896c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018970:	ed2d 8b02 	vpush	{d8}
 8018974:	ee10 6a10 	vmov	r6, s0
 8018978:	eeb0 8a40 	vmov.f32	s16, s0
 801897c:	eef0 8a60 	vmov.f32	s17, s1
 8018980:	d10c      	bne.n	801899c <__ieee754_powf+0x38>
 8018982:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018986:	0076      	lsls	r6, r6, #1
 8018988:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801898c:	f240 8274 	bls.w	8018e78 <__ieee754_powf+0x514>
 8018990:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018994:	ecbd 8b02 	vpop	{d8}
 8018998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801899c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80189a0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80189a4:	d802      	bhi.n	80189ac <__ieee754_powf+0x48>
 80189a6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80189aa:	d908      	bls.n	80189be <__ieee754_powf+0x5a>
 80189ac:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80189b0:	d1ee      	bne.n	8018990 <__ieee754_powf+0x2c>
 80189b2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80189b6:	0064      	lsls	r4, r4, #1
 80189b8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80189bc:	e7e6      	b.n	801898c <__ieee754_powf+0x28>
 80189be:	2e00      	cmp	r6, #0
 80189c0:	da1f      	bge.n	8018a02 <__ieee754_powf+0x9e>
 80189c2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80189c6:	f080 8260 	bcs.w	8018e8a <__ieee754_powf+0x526>
 80189ca:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80189ce:	d32f      	bcc.n	8018a30 <__ieee754_powf+0xcc>
 80189d0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80189d4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80189d8:	fa49 f503 	asr.w	r5, r9, r3
 80189dc:	fa05 f303 	lsl.w	r3, r5, r3
 80189e0:	454b      	cmp	r3, r9
 80189e2:	d123      	bne.n	8018a2c <__ieee754_powf+0xc8>
 80189e4:	f005 0501 	and.w	r5, r5, #1
 80189e8:	f1c5 0502 	rsb	r5, r5, #2
 80189ec:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80189f0:	d11f      	bne.n	8018a32 <__ieee754_powf+0xce>
 80189f2:	2c00      	cmp	r4, #0
 80189f4:	f280 8246 	bge.w	8018e84 <__ieee754_powf+0x520>
 80189f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80189fc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018a00:	e7c8      	b.n	8018994 <__ieee754_powf+0x30>
 8018a02:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018a06:	d111      	bne.n	8018a2c <__ieee754_powf+0xc8>
 8018a08:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018a0c:	f000 8234 	beq.w	8018e78 <__ieee754_powf+0x514>
 8018a10:	d906      	bls.n	8018a20 <__ieee754_powf+0xbc>
 8018a12:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018d28 <__ieee754_powf+0x3c4>
 8018a16:	2c00      	cmp	r4, #0
 8018a18:	bfa8      	it	ge
 8018a1a:	eeb0 0a68 	vmovge.f32	s0, s17
 8018a1e:	e7b9      	b.n	8018994 <__ieee754_powf+0x30>
 8018a20:	2c00      	cmp	r4, #0
 8018a22:	f280 822c 	bge.w	8018e7e <__ieee754_powf+0x51a>
 8018a26:	eeb1 0a68 	vneg.f32	s0, s17
 8018a2a:	e7b3      	b.n	8018994 <__ieee754_powf+0x30>
 8018a2c:	2500      	movs	r5, #0
 8018a2e:	e7dd      	b.n	80189ec <__ieee754_powf+0x88>
 8018a30:	2500      	movs	r5, #0
 8018a32:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018a36:	d102      	bne.n	8018a3e <__ieee754_powf+0xda>
 8018a38:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018a3c:	e7aa      	b.n	8018994 <__ieee754_powf+0x30>
 8018a3e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018a42:	f040 8227 	bne.w	8018e94 <__ieee754_powf+0x530>
 8018a46:	2e00      	cmp	r6, #0
 8018a48:	f2c0 8224 	blt.w	8018e94 <__ieee754_powf+0x530>
 8018a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8018a50:	ecbd 8b02 	vpop	{d8}
 8018a54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a58:	f7ff bf81 	b.w	801895e <__ieee754_sqrtf>
 8018a5c:	2d01      	cmp	r5, #1
 8018a5e:	d199      	bne.n	8018994 <__ieee754_powf+0x30>
 8018a60:	eeb1 0a40 	vneg.f32	s0, s0
 8018a64:	e796      	b.n	8018994 <__ieee754_powf+0x30>
 8018a66:	0ff0      	lsrs	r0, r6, #31
 8018a68:	3801      	subs	r0, #1
 8018a6a:	ea55 0300 	orrs.w	r3, r5, r0
 8018a6e:	d104      	bne.n	8018a7a <__ieee754_powf+0x116>
 8018a70:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018a74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018a78:	e78c      	b.n	8018994 <__ieee754_powf+0x30>
 8018a7a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8018a7e:	d96d      	bls.n	8018b5c <__ieee754_powf+0x1f8>
 8018a80:	4baa      	ldr	r3, [pc, #680]	@ (8018d2c <__ieee754_powf+0x3c8>)
 8018a82:	4598      	cmp	r8, r3
 8018a84:	d808      	bhi.n	8018a98 <__ieee754_powf+0x134>
 8018a86:	2c00      	cmp	r4, #0
 8018a88:	da0b      	bge.n	8018aa2 <__ieee754_powf+0x13e>
 8018a8a:	2000      	movs	r0, #0
 8018a8c:	ecbd 8b02 	vpop	{d8}
 8018a90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a94:	f000 bac2 	b.w	801901c <__math_oflowf>
 8018a98:	4ba5      	ldr	r3, [pc, #660]	@ (8018d30 <__ieee754_powf+0x3cc>)
 8018a9a:	4598      	cmp	r8, r3
 8018a9c:	d908      	bls.n	8018ab0 <__ieee754_powf+0x14c>
 8018a9e:	2c00      	cmp	r4, #0
 8018aa0:	dcf3      	bgt.n	8018a8a <__ieee754_powf+0x126>
 8018aa2:	2000      	movs	r0, #0
 8018aa4:	ecbd 8b02 	vpop	{d8}
 8018aa8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018aac:	f000 bab0 	b.w	8019010 <__math_uflowf>
 8018ab0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018ab4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018ab8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018d34 <__ieee754_powf+0x3d0>
 8018abc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8018ac0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018ac4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018ac8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018acc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018ad0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018d38 <__ieee754_powf+0x3d4>
 8018ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ad8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018d3c <__ieee754_powf+0x3d8>
 8018adc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8018ae0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8018d40 <__ieee754_powf+0x3dc>
 8018ae4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018ae8:	eeb0 7a67 	vmov.f32	s14, s15
 8018aec:	eea0 7a26 	vfma.f32	s14, s0, s13
 8018af0:	ee17 3a10 	vmov	r3, s14
 8018af4:	f36f 030b 	bfc	r3, #0, #12
 8018af8:	ee07 3a10 	vmov	s14, r3
 8018afc:	eeb0 6a47 	vmov.f32	s12, s14
 8018b00:	eea0 6a66 	vfms.f32	s12, s0, s13
 8018b04:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018b08:	3d01      	subs	r5, #1
 8018b0a:	4305      	orrs	r5, r0
 8018b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018b10:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018b14:	f36f 040b 	bfc	r4, #0, #12
 8018b18:	bf18      	it	ne
 8018b1a:	eeb0 8a66 	vmovne.f32	s16, s13
 8018b1e:	ee06 4a90 	vmov	s13, r4
 8018b22:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018b26:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018b2a:	ee67 7a26 	vmul.f32	s15, s14, s13
 8018b2e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018b32:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018b36:	ee17 1a10 	vmov	r1, s14
 8018b3a:	2900      	cmp	r1, #0
 8018b3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018b40:	f340 80dd 	ble.w	8018cfe <__ieee754_powf+0x39a>
 8018b44:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018b48:	f240 80ca 	bls.w	8018ce0 <__ieee754_powf+0x37c>
 8018b4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b54:	bf4c      	ite	mi
 8018b56:	2001      	movmi	r0, #1
 8018b58:	2000      	movpl	r0, #0
 8018b5a:	e797      	b.n	8018a8c <__ieee754_powf+0x128>
 8018b5c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018b60:	bf01      	itttt	eq
 8018b62:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018d44 <__ieee754_powf+0x3e0>
 8018b66:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018b6a:	f06f 0317 	mvneq.w	r3, #23
 8018b6e:	ee17 7a90 	vmoveq	r7, s15
 8018b72:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018b76:	bf18      	it	ne
 8018b78:	2300      	movne	r3, #0
 8018b7a:	3a7f      	subs	r2, #127	@ 0x7f
 8018b7c:	441a      	add	r2, r3
 8018b7e:	4b72      	ldr	r3, [pc, #456]	@ (8018d48 <__ieee754_powf+0x3e4>)
 8018b80:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018b84:	429f      	cmp	r7, r3
 8018b86:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018b8a:	dd06      	ble.n	8018b9a <__ieee754_powf+0x236>
 8018b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8018d4c <__ieee754_powf+0x3e8>)
 8018b8e:	429f      	cmp	r7, r3
 8018b90:	f340 80a4 	ble.w	8018cdc <__ieee754_powf+0x378>
 8018b94:	3201      	adds	r2, #1
 8018b96:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018b9a:	2600      	movs	r6, #0
 8018b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8018d50 <__ieee754_powf+0x3ec>)
 8018b9e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018ba2:	ee07 1a10 	vmov	s14, r1
 8018ba6:	edd3 5a00 	vldr	s11, [r3]
 8018baa:	4b6a      	ldr	r3, [pc, #424]	@ (8018d54 <__ieee754_powf+0x3f0>)
 8018bac:	ee75 7a87 	vadd.f32	s15, s11, s14
 8018bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018bb4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018bb8:	1049      	asrs	r1, r1, #1
 8018bba:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8018bbe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8018bc2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8018bc6:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018bca:	ee07 1a90 	vmov	s15, r1
 8018bce:	ee26 5a24 	vmul.f32	s10, s12, s9
 8018bd2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018bd6:	ee15 7a10 	vmov	r7, s10
 8018bda:	401f      	ands	r7, r3
 8018bdc:	ee06 7a90 	vmov	s13, r7
 8018be0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018be4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018be8:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018bec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018bf0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018d58 <__ieee754_powf+0x3f4>
 8018bf4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018d5c <__ieee754_powf+0x3f8>
 8018bf8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018bfc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018d60 <__ieee754_powf+0x3fc>
 8018c00:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018c04:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018d34 <__ieee754_powf+0x3d0>
 8018c08:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018c0c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018d64 <__ieee754_powf+0x400>
 8018c10:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018c14:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018d68 <__ieee754_powf+0x404>
 8018c18:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018c1c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018c20:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018c24:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018c28:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018c2c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018c30:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018c34:	eef0 5a67 	vmov.f32	s11, s15
 8018c38:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018c3c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018c40:	ee15 1a90 	vmov	r1, s11
 8018c44:	4019      	ands	r1, r3
 8018c46:	ee05 1a90 	vmov	s11, r1
 8018c4a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018c4e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c56:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018c5a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018c5e:	eeb0 6a67 	vmov.f32	s12, s15
 8018c62:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018c66:	ee16 1a10 	vmov	r1, s12
 8018c6a:	4019      	ands	r1, r3
 8018c6c:	ee06 1a10 	vmov	s12, r1
 8018c70:	eeb0 7a46 	vmov.f32	s14, s12
 8018c74:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018c78:	493c      	ldr	r1, [pc, #240]	@ (8018d6c <__ieee754_powf+0x408>)
 8018c7a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8018c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c82:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018d70 <__ieee754_powf+0x40c>
 8018c86:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018d74 <__ieee754_powf+0x410>
 8018c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c8e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018d78 <__ieee754_powf+0x414>
 8018c92:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018c96:	ed91 7a00 	vldr	s14, [r1]
 8018c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018c9e:	ee07 2a10 	vmov	s14, r2
 8018ca2:	4a36      	ldr	r2, [pc, #216]	@ (8018d7c <__ieee754_powf+0x418>)
 8018ca4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018ca8:	eeb0 7a67 	vmov.f32	s14, s15
 8018cac:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018cb0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018cb4:	ed92 5a00 	vldr	s10, [r2]
 8018cb8:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018cbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018cc0:	ee17 2a10 	vmov	r2, s14
 8018cc4:	401a      	ands	r2, r3
 8018cc6:	ee07 2a10 	vmov	s14, r2
 8018cca:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018cce:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8018cd2:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018cd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018cda:	e715      	b.n	8018b08 <__ieee754_powf+0x1a4>
 8018cdc:	2601      	movs	r6, #1
 8018cde:	e75d      	b.n	8018b9c <__ieee754_powf+0x238>
 8018ce0:	d152      	bne.n	8018d88 <__ieee754_powf+0x424>
 8018ce2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018d80 <__ieee754_powf+0x41c>
 8018ce6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018cea:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018cee:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf6:	f73f af29 	bgt.w	8018b4c <__ieee754_powf+0x1e8>
 8018cfa:	2386      	movs	r3, #134	@ 0x86
 8018cfc:	e048      	b.n	8018d90 <__ieee754_powf+0x42c>
 8018cfe:	4a21      	ldr	r2, [pc, #132]	@ (8018d84 <__ieee754_powf+0x420>)
 8018d00:	4293      	cmp	r3, r2
 8018d02:	d907      	bls.n	8018d14 <__ieee754_powf+0x3b0>
 8018d04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d0c:	bf4c      	ite	mi
 8018d0e:	2001      	movmi	r0, #1
 8018d10:	2000      	movpl	r0, #0
 8018d12:	e6c7      	b.n	8018aa4 <__ieee754_powf+0x140>
 8018d14:	d138      	bne.n	8018d88 <__ieee754_powf+0x424>
 8018d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d1a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d22:	dbea      	blt.n	8018cfa <__ieee754_powf+0x396>
 8018d24:	e7ee      	b.n	8018d04 <__ieee754_powf+0x3a0>
 8018d26:	bf00      	nop
 8018d28:	00000000 	.word	0x00000000
 8018d2c:	3f7ffff3 	.word	0x3f7ffff3
 8018d30:	3f800007 	.word	0x3f800007
 8018d34:	3eaaaaab 	.word	0x3eaaaaab
 8018d38:	3fb8aa00 	.word	0x3fb8aa00
 8018d3c:	3fb8aa3b 	.word	0x3fb8aa3b
 8018d40:	36eca570 	.word	0x36eca570
 8018d44:	4b800000 	.word	0x4b800000
 8018d48:	001cc471 	.word	0x001cc471
 8018d4c:	005db3d6 	.word	0x005db3d6
 8018d50:	0801b81c 	.word	0x0801b81c
 8018d54:	fffff000 	.word	0xfffff000
 8018d58:	3e6c3255 	.word	0x3e6c3255
 8018d5c:	3e53f142 	.word	0x3e53f142
 8018d60:	3e8ba305 	.word	0x3e8ba305
 8018d64:	3edb6db7 	.word	0x3edb6db7
 8018d68:	3f19999a 	.word	0x3f19999a
 8018d6c:	0801b80c 	.word	0x0801b80c
 8018d70:	3f76384f 	.word	0x3f76384f
 8018d74:	3f763800 	.word	0x3f763800
 8018d78:	369dc3a0 	.word	0x369dc3a0
 8018d7c:	0801b814 	.word	0x0801b814
 8018d80:	3338aa3c 	.word	0x3338aa3c
 8018d84:	43160000 	.word	0x43160000
 8018d88:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018d8c:	d96f      	bls.n	8018e6e <__ieee754_powf+0x50a>
 8018d8e:	15db      	asrs	r3, r3, #23
 8018d90:	3b7e      	subs	r3, #126	@ 0x7e
 8018d92:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018d96:	4118      	asrs	r0, r3
 8018d98:	4408      	add	r0, r1
 8018d9a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8018ed8 <__ieee754_powf+0x574>)
 8018da0:	3b7f      	subs	r3, #127	@ 0x7f
 8018da2:	411a      	asrs	r2, r3
 8018da4:	4002      	ands	r2, r0
 8018da6:	ee07 2a10 	vmov	s14, r2
 8018daa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8018dae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8018db2:	f1c3 0317 	rsb	r3, r3, #23
 8018db6:	4118      	asrs	r0, r3
 8018db8:	2900      	cmp	r1, #0
 8018dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018dbe:	bfb8      	it	lt
 8018dc0:	4240      	neglt	r0, r0
 8018dc2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018dc6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018edc <__ieee754_powf+0x578>
 8018dca:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8018ee0 <__ieee754_powf+0x57c>
 8018dce:	ee16 3a90 	vmov	r3, s13
 8018dd2:	f36f 030b 	bfc	r3, #0, #12
 8018dd6:	ee06 3a90 	vmov	s13, r3
 8018dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018dde:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018de2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018de6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8018ee4 <__ieee754_powf+0x580>
 8018dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018dee:	eee0 7a87 	vfma.f32	s15, s1, s14
 8018df2:	eeb0 7a67 	vmov.f32	s14, s15
 8018df6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018dfa:	eef0 5a47 	vmov.f32	s11, s14
 8018dfe:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8018e02:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018e06:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018e0a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8018ee8 <__ieee754_powf+0x584>
 8018e0e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8018eec <__ieee754_powf+0x588>
 8018e12:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018e16:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8018ef0 <__ieee754_powf+0x58c>
 8018e1a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018e1e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018ef4 <__ieee754_powf+0x590>
 8018e22:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018e26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018ef8 <__ieee754_powf+0x594>
 8018e2a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018e2e:	eeb0 6a47 	vmov.f32	s12, s14
 8018e32:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018e36:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018e3a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8018e3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018e42:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018e46:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018e4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018e56:	ee10 3a10 	vmov	r3, s0
 8018e5a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018e5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018e62:	da06      	bge.n	8018e72 <__ieee754_powf+0x50e>
 8018e64:	f000 f854 	bl	8018f10 <scalbnf>
 8018e68:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018e6c:	e592      	b.n	8018994 <__ieee754_powf+0x30>
 8018e6e:	2000      	movs	r0, #0
 8018e70:	e7a7      	b.n	8018dc2 <__ieee754_powf+0x45e>
 8018e72:	ee00 3a10 	vmov	s0, r3
 8018e76:	e7f7      	b.n	8018e68 <__ieee754_powf+0x504>
 8018e78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018e7c:	e58a      	b.n	8018994 <__ieee754_powf+0x30>
 8018e7e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018efc <__ieee754_powf+0x598>
 8018e82:	e587      	b.n	8018994 <__ieee754_powf+0x30>
 8018e84:	eeb0 0a48 	vmov.f32	s0, s16
 8018e88:	e584      	b.n	8018994 <__ieee754_powf+0x30>
 8018e8a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018e8e:	f43f adbb 	beq.w	8018a08 <__ieee754_powf+0xa4>
 8018e92:	2502      	movs	r5, #2
 8018e94:	eeb0 0a48 	vmov.f32	s0, s16
 8018e98:	f000 f832 	bl	8018f00 <fabsf>
 8018e9c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018ea0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018ea4:	4647      	mov	r7, r8
 8018ea6:	d003      	beq.n	8018eb0 <__ieee754_powf+0x54c>
 8018ea8:	f1b8 0f00 	cmp.w	r8, #0
 8018eac:	f47f addb 	bne.w	8018a66 <__ieee754_powf+0x102>
 8018eb0:	2c00      	cmp	r4, #0
 8018eb2:	bfbc      	itt	lt
 8018eb4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018eb8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018ebc:	2e00      	cmp	r6, #0
 8018ebe:	f6bf ad69 	bge.w	8018994 <__ieee754_powf+0x30>
 8018ec2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018ec6:	ea58 0805 	orrs.w	r8, r8, r5
 8018eca:	f47f adc7 	bne.w	8018a5c <__ieee754_powf+0xf8>
 8018ece:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ed2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018ed6:	e55d      	b.n	8018994 <__ieee754_powf+0x30>
 8018ed8:	ff800000 	.word	0xff800000
 8018edc:	3f317218 	.word	0x3f317218
 8018ee0:	3f317200 	.word	0x3f317200
 8018ee4:	35bfbe8c 	.word	0x35bfbe8c
 8018ee8:	b5ddea0e 	.word	0xb5ddea0e
 8018eec:	3331bb4c 	.word	0x3331bb4c
 8018ef0:	388ab355 	.word	0x388ab355
 8018ef4:	bb360b61 	.word	0xbb360b61
 8018ef8:	3e2aaaab 	.word	0x3e2aaaab
 8018efc:	00000000 	.word	0x00000000

08018f00 <fabsf>:
 8018f00:	ee10 3a10 	vmov	r3, s0
 8018f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f08:	ee00 3a10 	vmov	s0, r3
 8018f0c:	4770      	bx	lr
	...

08018f10 <scalbnf>:
 8018f10:	ee10 3a10 	vmov	r3, s0
 8018f14:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018f18:	d02b      	beq.n	8018f72 <scalbnf+0x62>
 8018f1a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018f1e:	d302      	bcc.n	8018f26 <scalbnf+0x16>
 8018f20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018f24:	4770      	bx	lr
 8018f26:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018f2a:	d123      	bne.n	8018f74 <scalbnf+0x64>
 8018f2c:	4b24      	ldr	r3, [pc, #144]	@ (8018fc0 <scalbnf+0xb0>)
 8018f2e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018fc4 <scalbnf+0xb4>
 8018f32:	4298      	cmp	r0, r3
 8018f34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018f38:	db17      	blt.n	8018f6a <scalbnf+0x5a>
 8018f3a:	ee10 3a10 	vmov	r3, s0
 8018f3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018f42:	3a19      	subs	r2, #25
 8018f44:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018f48:	4288      	cmp	r0, r1
 8018f4a:	dd15      	ble.n	8018f78 <scalbnf+0x68>
 8018f4c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018fc8 <scalbnf+0xb8>
 8018f50:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018fcc <scalbnf+0xbc>
 8018f54:	ee10 3a10 	vmov	r3, s0
 8018f58:	eeb0 7a67 	vmov.f32	s14, s15
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	bfb8      	it	lt
 8018f60:	eef0 7a66 	vmovlt.f32	s15, s13
 8018f64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018f68:	4770      	bx	lr
 8018f6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018fd0 <scalbnf+0xc0>
 8018f6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018f72:	4770      	bx	lr
 8018f74:	0dd2      	lsrs	r2, r2, #23
 8018f76:	e7e5      	b.n	8018f44 <scalbnf+0x34>
 8018f78:	4410      	add	r0, r2
 8018f7a:	28fe      	cmp	r0, #254	@ 0xfe
 8018f7c:	dce6      	bgt.n	8018f4c <scalbnf+0x3c>
 8018f7e:	2800      	cmp	r0, #0
 8018f80:	dd06      	ble.n	8018f90 <scalbnf+0x80>
 8018f82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018f86:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018f8a:	ee00 3a10 	vmov	s0, r3
 8018f8e:	4770      	bx	lr
 8018f90:	f110 0f16 	cmn.w	r0, #22
 8018f94:	da09      	bge.n	8018faa <scalbnf+0x9a>
 8018f96:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018fd0 <scalbnf+0xc0>
 8018f9a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018fd4 <scalbnf+0xc4>
 8018f9e:	ee10 3a10 	vmov	r3, s0
 8018fa2:	eeb0 7a67 	vmov.f32	s14, s15
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	e7d9      	b.n	8018f5e <scalbnf+0x4e>
 8018faa:	3019      	adds	r0, #25
 8018fac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018fb0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018fb4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018fd8 <scalbnf+0xc8>
 8018fb8:	ee07 3a90 	vmov	s15, r3
 8018fbc:	e7d7      	b.n	8018f6e <scalbnf+0x5e>
 8018fbe:	bf00      	nop
 8018fc0:	ffff3cb0 	.word	0xffff3cb0
 8018fc4:	4c000000 	.word	0x4c000000
 8018fc8:	7149f2ca 	.word	0x7149f2ca
 8018fcc:	f149f2ca 	.word	0xf149f2ca
 8018fd0:	0da24260 	.word	0x0da24260
 8018fd4:	8da24260 	.word	0x8da24260
 8018fd8:	33000000 	.word	0x33000000

08018fdc <with_errnof>:
 8018fdc:	b510      	push	{r4, lr}
 8018fde:	ed2d 8b02 	vpush	{d8}
 8018fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	f7fc f962 	bl	80152b0 <__errno>
 8018fec:	eeb0 0a48 	vmov.f32	s0, s16
 8018ff0:	ecbd 8b02 	vpop	{d8}
 8018ff4:	6004      	str	r4, [r0, #0]
 8018ff6:	bd10      	pop	{r4, pc}

08018ff8 <xflowf>:
 8018ff8:	b130      	cbz	r0, 8019008 <xflowf+0x10>
 8018ffa:	eef1 7a40 	vneg.f32	s15, s0
 8018ffe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019002:	2022      	movs	r0, #34	@ 0x22
 8019004:	f7ff bfea 	b.w	8018fdc <with_errnof>
 8019008:	eef0 7a40 	vmov.f32	s15, s0
 801900c:	e7f7      	b.n	8018ffe <xflowf+0x6>
	...

08019010 <__math_uflowf>:
 8019010:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019018 <__math_uflowf+0x8>
 8019014:	f7ff bff0 	b.w	8018ff8 <xflowf>
 8019018:	10000000 	.word	0x10000000

0801901c <__math_oflowf>:
 801901c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019024 <__math_oflowf+0x8>
 8019020:	f7ff bfea 	b.w	8018ff8 <xflowf>
 8019024:	70000000 	.word	0x70000000

08019028 <_init>:
 8019028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902a:	bf00      	nop
 801902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801902e:	bc08      	pop	{r3}
 8019030:	469e      	mov	lr, r3
 8019032:	4770      	bx	lr

08019034 <_fini>:
 8019034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019036:	bf00      	nop
 8019038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801903a:	bc08      	pop	{r3}
 801903c:	469e      	mov	lr, r3
 801903e:	4770      	bx	lr
