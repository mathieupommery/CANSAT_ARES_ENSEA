
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196c8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b4c  080198a8  080198a8  0001a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3f4  0801c3f4  0001e210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c3f4  0801c3f4  0001d3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3fc  0801c3fc  0001e210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c3fc  0801c3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c400  0801c400  0001d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0801c404  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004870  20000210  0801c614  0001e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004a80  0801c614  0001ea80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000374c3  00000000  00000000  0001e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007826  00000000  00000000  00055703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  0005cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f1e  00000000  00000000  0005f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1fd  00000000  00000000  000616be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038e65  00000000  00000000  0008b8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef71f  00000000  00000000  000c4720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3e3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c12c  00000000  00000000  001b3e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001bffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019890 	.word	0x08019890

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08019890 	.word	0x08019890

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4830      	ldr	r0, [pc, #192]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 8001094:	f007 fb36 	bl	8008704 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4828      	ldr	r0, [pc, #160]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010b2:	f007 fb27 	bl	8008704 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4821      	ldr	r0, [pc, #132]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010d0:	f007 fb18 	bl	8008704 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4819      	ldr	r0, [pc, #100]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010ee:	f007 fb09 	bl	8008704 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	4812      	ldr	r0, [pc, #72]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 800110c:	f007 fafa 	bl	8008704 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	480a      	ldr	r0, [pc, #40]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 800112a:	f007 faeb 	bl	8008704 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 8001148:	f007 fbf0 	bl	800892c <HAL_I2C_Mem_Read>
        }
        if (status & 0x02) {
            //printf("Les données du gyroscope sont prêtes.\r\n");
        }

}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200003b4 	.word	0x200003b4

08001158 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af04      	add	r7, sp, #16
 800115e:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	f107 030b 	add.w	r3, r7, #11
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	221e      	movs	r2, #30
 8001174:	21d6      	movs	r1, #214	@ 0xd6
 8001176:	4874      	ldr	r0, [pc, #464]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001178:	f007 fbd8 	bl	800892c <HAL_I2C_Mem_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <Read_sensor_data+0x32>
 8001186:	7ffb      	ldrb	r3, [r7, #31]
 8001188:	e0da      	b.n	8001340 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <Read_sensor_data+0x46>
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0ce      	b.n	8001340 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a6:	e044      	b.n	8001232 <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	3311      	adds	r3, #17
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011b2:	7f3b      	ldrb	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011b8:	7f3b      	ldrb	r3, [r7, #28]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 030a 	add.w	r3, r7, #10
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	21d6      	movs	r1, #214	@ 0xd6
 80011d0:	485d      	ldr	r0, [pc, #372]	@ (8001348 <Read_sensor_data+0x1f0>)
 80011d2:	f007 fbab 	bl	800892c <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <Read_sensor_data+0x8c>
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	e0ad      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011e4:	7efb      	ldrb	r3, [r7, #27]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 0309 	add.w	r3, r7, #9
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d6      	movs	r1, #214	@ 0xd6
 80011fc:	4852      	ldr	r0, [pc, #328]	@ (8001348 <Read_sensor_data+0x1f0>)
 80011fe:	f007 fb95 	bl	800892c <HAL_I2C_Mem_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <Read_sensor_data+0xb8>
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	e097      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001210:	7a7b      	ldrb	r3, [r7, #9]
 8001212:	b21b      	sxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	3328      	adds	r3, #40	@ 0x28
 8001226:	443b      	add	r3, r7
 8001228:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	3301      	adds	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	2b02      	cmp	r3, #2
 8001236:	ddb7      	ble.n	80011a8 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	e044      	b.n	80012c8 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3314      	adds	r3, #20
 8001242:	b2db      	uxtb	r3, r3
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	3301      	adds	r3, #1
 800124c:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 030a 	add.w	r3, r7, #10
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	21d6      	movs	r1, #214	@ 0xd6
 8001266:	4838      	ldr	r0, [pc, #224]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001268:	f007 fb60 	bl	800892c <HAL_I2C_Mem_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <Read_sensor_data+0x122>
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	e062      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800127a:	7f7b      	ldrb	r3, [r7, #29]
 800127c:	b29a      	uxth	r2, r3
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f107 0309 	add.w	r3, r7, #9
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	21d6      	movs	r1, #214	@ 0xd6
 8001292:	482d      	ldr	r0, [pc, #180]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001294:	f007 fb4a 	bl	800892c <HAL_I2C_Mem_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <Read_sensor_data+0x14e>
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	e04c      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012a6:	7a7b      	ldrb	r3, [r7, #9]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	7abb      	ldrb	r3, [r7, #10]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3328      	adds	r3, #40	@ 0x28
 80012bc:	443b      	add	r3, r7
 80012be:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	ddb7      	ble.n	800123e <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 80012f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 8001304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 8001322:	f000 f815 	bl	8001350 <Read_temp>
 8001326:	ec51 0b10 	vmov	r0, r1, d0
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <Read_sensor_data+0x1f4>)
 8001330:	f7fe ffd2 	bl	80002d8 <__aeabi_dsub>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3728      	adds	r7, #40	@ 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200003b4 	.word	0x200003b4
 800134c:	40210000 	.word	0x40210000

08001350 <Read_temp>:

double Read_temp() {
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2220      	movs	r2, #32
 8001368:	21d6      	movs	r1, #214	@ 0xd6
 800136a:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <Read_temp+0x98>)
 800136c:	f007 fade 	bl	800892c <HAL_I2C_Mem_Read>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2221      	movs	r2, #33	@ 0x21
 8001386:	21d6      	movs	r1, #214	@ 0xd6
 8001388:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <Read_temp+0x98>)
 800138a:	f007 facf 	bl	800892c <HAL_I2C_Mem_Read>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <Read_temp+0x9c>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <Read_temp+0xa0>)
 80013c4:	f7fe ff8a 	bl	80002dc <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d8:	eeb0 0a47 	vmov.f32	s0, s14
 80013dc:	eef0 0a67 	vmov.f32	s1, s15
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003b4 	.word	0x200003b4
 80013ec:	40700000 	.word	0x40700000
 80013f0:	40390000 	.word	0x40390000
 80013f4:	00000000 	.word	0x00000000

080013f8 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	@ 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	2bb5      	cmp	r3, #181	@ 0xb5
 8001406:	f040 81d7 	bne.w	80017b8 <GNSS_ParsePVTData+0x3c0>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7a5b      	ldrb	r3, [r3, #9]
 800140e:	2b62      	cmp	r3, #98	@ 0x62
 8001410:	f040 81d2 	bne.w	80017b8 <GNSS_ParsePVTData+0x3c0>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7c9a      	ldrb	r2, [r3, #18]
 8001418:	4b9f      	ldr	r3, [pc, #636]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800141a:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7c9a      	ldrb	r2, [r3, #18]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7cda      	ldrb	r2, [r3, #19]
 800142a:	4b9b      	ldr	r3, [pc, #620]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800142c:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7cda      	ldrb	r2, [r3, #19]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001438:	4b97      	ldr	r3, [pc, #604]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7d1a      	ldrb	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7d5a      	ldrb	r2, [r3, #21]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7d9a      	ldrb	r2, [r3, #22]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7dda      	ldrb	r2, [r3, #23]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1a      	ldrb	r2, [r3, #24]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001490:	e017      	b.n	80014c2 <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	331e      	adds	r3, #30
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	7a19      	ldrb	r1, [r3, #8]
 800149c:	4a7f      	ldr	r2, [pc, #508]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 800149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a0:	4413      	add	r3, r2
 80014a2:	460a      	mov	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a8:	331e      	adds	r3, #30
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	7a19      	ldrb	r1, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	4413      	add	r3, r2
 80014b6:	3380      	adds	r3, #128	@ 0x80
 80014b8:	460a      	mov	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	dde4      	ble.n	8001492 <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014c8:	4b74      	ldr	r3, [pc, #464]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014d0:	4b72      	ldr	r3, [pc, #456]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016a0 <GNSS_ParsePVTData+0x2a8>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ee:	e017      	b.n	8001520 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	3322      	adds	r3, #34	@ 0x22
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	7a19      	ldrb	r1, [r3, #8]
 80014fa:	4a68      	ldr	r2, [pc, #416]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	3322      	adds	r3, #34	@ 0x22
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	7a19      	ldrb	r1, [r3, #8]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001512:	4413      	add	r3, r2
 8001514:	3388      	adds	r3, #136	@ 0x88
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	3301      	adds	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	2b03      	cmp	r3, #3
 8001524:	dde4      	ble.n	80014f0 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 8001526:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001530:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016a0 <GNSS_ParsePVTData+0x2a8>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
 800154e:	e00c      	b.n	800156a <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	3326      	adds	r3, #38	@ 0x26
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	7a19      	ldrb	r1, [r3, #8]
 800155a:	4a50      	ldr	r2, [pc, #320]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	4413      	add	r3, r2
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	2b03      	cmp	r3, #3
 800156e:	ddef      	ble.n	8001550 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001570:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 800158c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	e017      	b.n	80015cc <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	332a      	adds	r3, #42	@ 0x2a
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	7a19      	ldrb	r1, [r3, #8]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	460a      	mov	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	332a      	adds	r3, #42	@ 0x2a
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	7a19      	ldrb	r1, [r3, #8]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	4413      	add	r3, r2
 80015c0:	33a0      	adds	r3, #160	@ 0xa0
 80015c2:	460a      	mov	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	3301      	adds	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	dde4      	ble.n	800159c <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015d2:	4b32      	ldr	r3, [pc, #200]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ea:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 80015ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e00c      	b.n	8001618 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	332e      	adds	r3, #46	@ 0x2e
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	7a19      	ldrb	r1, [r3, #8]
 8001608:	4a27      	ldr	r2, [pc, #156]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b03      	cmp	r3, #3
 800161c:	ddef      	ble.n	80015fe <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001636:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	e00c      	b.n	8001664 <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	3332      	adds	r3, #50	@ 0x32
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	7a19      	ldrb	r1, [r3, #8]
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	460a      	mov	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	3301      	adds	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b03      	cmp	r3, #3
 8001668:	ddef      	ble.n	800164a <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001682:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 8001686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e022      	b.n	80016dc <GNSS_ParsePVTData+0x2e4>
 8001696:	bf00      	nop
 8001698:	2000022c 	.word	0x2000022c
 800169c:	20000234 	.word	0x20000234
 80016a0:	4b189680 	.word	0x4b189680
 80016a4:	447a0000 	.word	0x447a0000
 80016a8:	20000230 	.word	0x20000230
			iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	333e      	adds	r3, #62	@ 0x3e
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	7a19      	ldrb	r1, [r3, #8]
 80016b6:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
			GNSS->vspeedBytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	333e      	adds	r3, #62	@ 0x3e
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	7a19      	ldrb	r1, [r3, #8]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	33c8      	adds	r3, #200	@ 0xc8
 80016d2:	460a      	mov	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	dde4      	ble.n	80016ac <GNSS_ParsePVTData+0x2b4>
		}
	GNSS->vspeed = iLong.iLong;
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	GNSS->fvspeed=(float)GNSS->vspeed/1000.0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017cc <GNSS_ParsePVTData+0x3d4>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	for (int var = 0; var < 4; ++var) {
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e017      	b.n	800173e <GNSS_ParsePVTData+0x346>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3342      	adds	r3, #66	@ 0x42
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	7a19      	ldrb	r1, [r3, #8]
 8001718:	4a2b      	ldr	r2, [pc, #172]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4413      	add	r3, r2
 800171e:	460a      	mov	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	3342      	adds	r3, #66	@ 0x42
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	7a19      	ldrb	r1, [r3, #8]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	33bc      	adds	r3, #188	@ 0xbc
 8001734:	460a      	mov	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3301      	adds	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b03      	cmp	r3, #3
 8001742:	dde4      	ble.n	800170e <GNSS_ParsePVTData+0x316>
	}
	GNSS->gSpeed = iLong.iLong;
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017cc <GNSS_ParsePVTData+0x3d4>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e00c      	b.n	800178a <GNSS_ParsePVTData+0x392>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3346      	adds	r3, #70	@ 0x46
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	7a19      	ldrb	r1, [r3, #8]
 800177a:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b03      	cmp	r3, #3
 800178e:	ddef      	ble.n	8001770 <GNSS_ParsePVTData+0x378>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feed 	bl	8000574 <__aeabi_i2d>
 800179a:	a309      	add	r3, pc, #36	@ (adr r3, 80017c0 <GNSS_ParsePVTData+0x3c8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ff52 	bl	8000648 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9fc 	bl	8000ba8 <__aeabi_d2iz>
 80017b0:	4602      	mov	r2, r0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	88e368f1 	.word	0x88e368f1
 80017c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80017c8:	20000234 	.word	0x20000234
 80017cc:	447a0000 	.word	0x447a0000

080017d0 <distancecalc>:
//		manual.
	return 0;
}


float distancecalc(float lat1, float lat2, float long1, float long2,float alt1, float alt2){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	ed2d 8b02 	vpush	{d8}
 80017d6:	b08c      	sub	sp, #48	@ 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	ed87 0a05 	vstr	s0, [r7, #20]
 80017de:	edc7 0a04 	vstr	s1, [r7, #16]
 80017e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80017e6:	edc7 1a02 	vstr	s3, [r7, #8]
 80017ea:	ed87 2a01 	vstr	s4, [r7, #4]
 80017ee:	edc7 2a00 	vstr	s5, [r7]

    // Convertir en radians
    lat1 *= DEG_TO_RAD;
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7fe fed0 	bl	8000598 <__aeabi_f2d>
 80017f8:	a375      	add	r3, pc, #468	@ (adr r3, 80019d0 <distancecalc+0x200>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ff23 	bl	8000648 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff fa15 	bl	8000c38 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
    lat2 *= DEG_TO_RAD;
 8001812:	6938      	ldr	r0, [r7, #16]
 8001814:	f7fe fec0 	bl	8000598 <__aeabi_f2d>
 8001818:	a36d      	add	r3, pc, #436	@ (adr r3, 80019d0 <distancecalc+0x200>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe ff13 	bl	8000648 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff fa05 	bl	8000c38 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	613b      	str	r3, [r7, #16]
    long1 *= DEG_TO_RAD;
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7fe feb0 	bl	8000598 <__aeabi_f2d>
 8001838:	a365      	add	r3, pc, #404	@ (adr r3, 80019d0 <distancecalc+0x200>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ff03 	bl	8000648 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9f5 	bl	8000c38 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	60fb      	str	r3, [r7, #12]
    long2 *= DEG_TO_RAD;
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f7fe fea0 	bl	8000598 <__aeabi_f2d>
 8001858:	a35d      	add	r3, pc, #372	@ (adr r3, 80019d0 <distancecalc+0x200>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fef3 	bl	8000648 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9e5 	bl	8000c38 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
 8001870:	60bb      	str	r3, [r7, #8]

    float dlat = lat2 - lat1;
 8001872:	ed97 7a04 	vldr	s14, [r7, #16]
 8001876:	edd7 7a05 	vldr	s15, [r7, #20]
 800187a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float dlon = long2 - long1;
 8001882:	ed97 7a02 	vldr	s14, [r7, #8]
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float a = sinf(dlat / 2) * sinf(dlat / 2) + cosf(lat1) * cosf(lat2) * sinf(dlon / 2) * sinf(dlon / 2);
 8001892:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001896:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800189a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800189e:	eeb0 0a47 	vmov.f32	s0, s14
 80018a2:	f016 fe4f 	bl	8018544 <sinf>
 80018a6:	eeb0 8a40 	vmov.f32	s16, s0
 80018aa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018b6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ba:	f016 fe43 	bl	8018544 <sinf>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80018c6:	ed97 0a05 	vldr	s0, [r7, #20]
 80018ca:	f016 fdf7 	bl	80184bc <cosf>
 80018ce:	eef0 8a40 	vmov.f32	s17, s0
 80018d2:	ed97 0a04 	vldr	s0, [r7, #16]
 80018d6:	f016 fdf1 	bl	80184bc <cosf>
 80018da:	eef0 7a40 	vmov.f32	s15, s0
 80018de:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80018e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018ee:	eeb0 0a47 	vmov.f32	s0, s14
 80018f2:	f016 fe27 	bl	8018544 <sinf>
 80018f6:	eef0 7a40 	vmov.f32	s15, s0
 80018fa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80018fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001902:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001906:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	f016 fe19 	bl	8018544 <sinf>
 8001912:	eef0 7a40 	vmov.f32	s15, s0
 8001916:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800191a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800191e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(a<1.0){
 8001922:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d53e      	bpl.n	80019b2 <distancecalc+0x1e2>

    float c = 2.0f * atan2f(sqrtf(a), sqrtf(1.0f - a));
 8001934:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001938:	f016 fda2 	bl	8018480 <sqrtf>
 800193c:	eeb0 8a40 	vmov.f32	s16, s0
 8001940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001944:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	f016 fd96 	bl	8018480 <sqrtf>
 8001954:	eef0 7a40 	vmov.f32	s15, s0
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	eeb0 0a48 	vmov.f32	s0, s16
 8001960:	f016 fd34 	bl	80183cc <atan2f>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196c:	edc7 7a08 	vstr	s15, [r7, #32]

    float distanceplat = EARTH_RADIUS * c;
 8001970:	edd7 7a08 	vldr	s15, [r7, #32]
 8001974:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019c8 <distancecalc+0x1f8>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	edc7 7a07 	vstr	s15, [r7, #28]

    float dalt = alt2 - alt1;
 8001980:	ed97 7a00 	vldr	s14, [r7]
 8001984:	edd7 7a01 	vldr	s15, [r7, #4]
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	edc7 7a06 	vstr	s15, [r7, #24]
    return sqrtf(distanceplat * distanceplat + dalt * dalt); // distance 3D
 8001990:	edd7 7a07 	vldr	s15, [r7, #28]
 8001994:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001998:	edd7 7a06 	vldr	s15, [r7, #24]
 800199c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	eeb0 0a67 	vmov.f32	s0, s15
 80019a8:	f016 fd6a 	bl	8018480 <sqrtf>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	e001      	b.n	80019b6 <distancecalc+0x1e6>
    }
    else{

    	return 0.0;
 80019b2:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80019cc <distancecalc+0x1fc>
    }
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	3730      	adds	r7, #48	@ 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	ecbd 8b02 	vpop	{d8}
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	4ac26d70 	.word	0x4ac26d70
 80019cc:	00000000 	.word	0x00000000
 80019d0:	a2529d39 	.word	0xa2529d39
 80019d4:	3f91df46 	.word	0x3f91df46

080019d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f013 f8b2 	bl	8014b5a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <MX_ADC1_Init+0x120>)
 80019f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a06:	4b3c      	ldr	r3, [pc, #240]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001a12:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a18:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a60:	4825      	ldr	r0, [pc, #148]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a62:	f004 fd3b 	bl	80064dc <HAL_ADC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a6c:	f001 fbda 	bl	8003224 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481f      	ldr	r0, [pc, #124]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001a7c:	f005 ff00 	bl	8007880 <HAL_ADCEx_MultiModeConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a86:	f001 fbcd 	bl	8003224 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <MX_ADC1_Init+0x124>)
 8001a8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a8e:	2306      	movs	r3, #6
 8001a90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a92:	2307      	movs	r3, #7
 8001a94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a96:	237f      	movs	r3, #127	@ 0x7f
 8001a98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4814      	ldr	r0, [pc, #80]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001aa8:	f005 f988 	bl	8006dbc <HAL_ADC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ab2:	f001 fbb7 	bl	8003224 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <MX_ADC1_Init+0x128>)
 8001ab8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001aba:	230c      	movs	r3, #12
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001ac4:	f005 f97a 	bl	8006dbc <HAL_ADC_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001ace:	f001 fba9 	bl	8003224 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_ADC1_Init+0x12c>)
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ad6:	2312      	movs	r3, #18
 8001ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4806      	ldr	r0, [pc, #24]	@ (8001af8 <MX_ADC1_Init+0x120>)
 8001ae0:	f005 f96c 	bl	8006dbc <HAL_ADC_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001aea:	f001 fb9b 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	3730      	adds	r7, #48	@ 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000238 	.word	0x20000238
 8001afc:	cb840000 	.word	0xcb840000
 8001b00:	c3210000 	.word	0xc3210000
 8001b04:	0c900008 	.word	0x0c900008

08001b08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09a      	sub	sp, #104	@ 0x68
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2244      	movs	r2, #68	@ 0x44
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f013 f816 	bl	8014b5a <memset>
  if(adcHandle->Instance==ADC1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b36:	d167      	bne.n	8001c08 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f008 f973 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b54:	f001 fb66 	bl	8003224 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b58:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b64:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <HAL_ADC_MspInit+0x108>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9e:	f006 fb31 	bl	8008204 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <HAL_ADC_MspInit+0x110>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bdc:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bde:	f005 ffd3 	bl	8007b88 <HAL_DMA_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001be8:	f001 fb1c 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_ADC_MspInit+0x10c>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2105      	movs	r1, #5
 8001bfc:	2012      	movs	r0, #18
 8001bfe:	f005 ff9b 	bl	8007b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c02:	2012      	movs	r0, #18
 8001c04:	f005 ffb2 	bl	8007b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3768      	adds	r7, #104	@ 0x68
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	200002a4 	.word	0x200002a4
 8001c18:	4002001c 	.word	0x4002001c
 8001c1c:	00000000 	.word	0x00000000

08001c20 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c32:	f040 8097 	bne.w	8001d64 <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001c36:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <HAL_ADC_ConvCpltCallback+0x160>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc9a 	bl	8000574 <__aeabi_i2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	a14a      	add	r1, pc, #296	@ (adr r1, 8001d70 <HAL_ADC_ConvCpltCallback+0x150>)
 8001c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c4a:	f7fe fe27 	bl	800089c <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffef 	bl	8000c38 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a49      	ldr	r2, [pc, #292]	@ (8001d84 <HAL_ADC_ConvCpltCallback+0x164>)
 8001c5e:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001c60:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <HAL_ADC_ConvCpltCallback+0x168>)
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	4b49      	ldr	r3, [pc, #292]	@ (8001d8c <HAL_ADC_ConvCpltCallback+0x16c>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	ee17 0a90 	vmov	r0, s15
 8001c74:	f7fe fc90 	bl	8000598 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	4943      	ldr	r1, [pc, #268]	@ (8001d90 <HAL_ADC_ConvCpltCallback+0x170>)
 8001c82:	f7fe fe0b 	bl	800089c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <HAL_ADC_ConvCpltCallback+0x160>)
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc6e 	bl	8000574 <__aeabi_i2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_ADC_ConvCpltCallback+0x164>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc79 	bl	8000598 <__aeabi_f2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_ADC_ConvCpltCallback+0x174>)
 8001cac:	f7fe fdf6 	bl	800089c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fcc6 	bl	8000648 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_ADC_ConvCpltCallback+0x16c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc65 	bl	8000598 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe faff 	bl	80002d8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4640      	mov	r0, r8
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	f7fe fcb1 	bl	8000648 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe ffa3 	bl	8000c38 <__aeabi_d2f>
 8001cf2:	ee07 0a10 	vmov	s14, r0
 8001cf6:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0x178>)
 8001d00:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_ADC_ConvCpltCallback+0x160>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc33 	bl	8000574 <__aeabi_i2d>
 8001d0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d78 <HAL_ADC_ConvCpltCallback+0x158>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fdc2 	bl	800089c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_ADC_ConvCpltCallback+0x174>)
 8001d26:	f7fe fc8f 	bl	8000648 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_ADC_ConvCpltCallback+0x164>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc2e 	bl	8000598 <__aeabi_f2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fc80 	bl	8000648 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe ff72 	bl	8000c38 <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001d58:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4908      	ldr	r1, [pc, #32]	@ (8001d80 <HAL_ADC_ConvCpltCallback+0x160>)
 8001d5e:	4810      	ldr	r0, [pc, #64]	@ (8001da0 <HAL_ADC_ConvCpltCallback+0x180>)
 8001d60:	f004 fd40 	bl	80067e4 <HAL_ADC_Start_DMA>

	}

}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d6e:	bf00      	nop
 8001d70:	d70a3d70 	.word	0xd70a3d70
 8001d74:	40b36323 	.word	0x40b36323
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	40affe00 	.word	0x40affe00
 8001d80:	20000c1c 	.word	0x20000c1c
 8001d84:	20000c28 	.word	0x20000c28
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	40590000 	.word	0x40590000
 8001d94:	40080000 	.word	0x40080000
 8001d98:	20000c24 	.word	0x20000c24
 8001d9c:	20000c2c 	.word	0x20000c2c
 8001da0:	20000238 	.word	0x20000238

08001da4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	b0a2      	sub	sp, #136	@ 0x88
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001db0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00f fa48 	bl	801124a <osMutexCreate>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <MX_FREERTOS_Init+0x140>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 8001dc6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00f fa3d 	bl	801124a <osMutexCreate>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a45      	ldr	r2, [pc, #276]	@ (8001ee8 <MX_FREERTOS_Init+0x144>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 8001dda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00f fa33 	bl	801124a <osMutexCreate>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a41      	ldr	r2, [pc, #260]	@ (8001eec <MX_FREERTOS_Init+0x148>)
 8001de8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 8001dea:	4b41      	ldr	r3, [pc, #260]	@ (8001ef0 <MX_FREERTOS_Init+0x14c>)
 8001dec:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001df0:	461d      	mov	r5, r3
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001dfa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00f f9fb 	bl	80111fc <osThreadCreate>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef4 <MX_FREERTOS_Init+0x150>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityNormal, 0, 256);
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <MX_FREERTOS_Init+0x154>)
 8001e0e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001e12:	461d      	mov	r5, r3
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001e1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f00f f9ea 	bl	80111fc <osThreadCreate>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a34      	ldr	r2, [pc, #208]	@ (8001efc <MX_FREERTOS_Init+0x158>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 8001e2e:	4b34      	ldr	r3, [pc, #208]	@ (8001f00 <MX_FREERTOS_Init+0x15c>)
 8001e30:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e34:	461d      	mov	r5, r3
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001e3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00f f9d9 	bl	80111fc <osThreadCreate>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <MX_FREERTOS_Init+0x160>)
 8001e4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityAboveNormal, 0, 256);
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <MX_FREERTOS_Init+0x164>)
 8001e52:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001e56:	461d      	mov	r5, r3
 8001e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00f f9c8 	bl	80111fc <osThreadCreate>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a27      	ldr	r2, [pc, #156]	@ (8001f0c <MX_FREERTOS_Init+0x168>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityBelowNormal, 0, 256);
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <MX_FREERTOS_Init+0x16c>)
 8001e74:	f107 0418 	add.w	r4, r7, #24
 8001e78:	461d      	mov	r5, r3
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00f f9b7 	bl	80111fc <osThreadCreate>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a20      	ldr	r2, [pc, #128]	@ (8001f14 <MX_FREERTOS_Init+0x170>)
 8001e92:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <MX_FREERTOS_Init+0x174>)
 8001e96:	1d3c      	adds	r4, r7, #4
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00f f9a8 	bl	80111fc <osThreadCreate>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <MX_FREERTOS_Init+0x178>)
 8001eb0:	6013      	str	r3, [r2, #0]


#endif
#ifdef PARTIE_BAS

  osThreadSuspend(servoHandle);
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_FREERTOS_Init+0x168>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00f fb0d 	bl	80114d6 <osThreadSuspend>

#endif


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MX_FREERTOS_Init+0x17c>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <MX_FREERTOS_Init+0x17c>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_FREERTOS_Init+0x180>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <MX_FREERTOS_Init+0x180>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <MX_FREERTOS_Init+0x180>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001eda:	bf00      	nop
 8001edc:	3788      	adds	r7, #136	@ 0x88
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000354 	.word	0x20000354
 8001ee8:	20000358 	.word	0x20000358
 8001eec:	2000035c 	.word	0x2000035c
 8001ef0:	080198b8 	.word	0x080198b8
 8001ef4:	2000033c 	.word	0x2000033c
 8001ef8:	080198d8 	.word	0x080198d8
 8001efc:	20000340 	.word	0x20000340
 8001f00:	080198f8 	.word	0x080198f8
 8001f04:	20000344 	.word	0x20000344
 8001f08:	08019914 	.word	0x08019914
 8001f0c:	20000348 	.word	0x20000348
 8001f10:	08019938 	.word	0x08019938
 8001f14:	2000034c 	.word	0x2000034c
 8001f18:	0801995c 	.word	0x0801995c
 8001f1c:	20000350 	.word	0x20000350
 8001f20:	e000edf0 	.word	0xe000edf0
 8001f24:	e0001000 	.word	0xe0001000

08001f28 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001f30:	f010 fcb6 	bl	80128a0 <xTaskGetTickCount>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {

	  uint32_t start1= DWT->CYCCNT;
 8001f38:	4b44      	ldr	r3, [pc, #272]	@ (800204c <Startstatemachine+0x124>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	617b      	str	r3, [r7, #20]
      if (osMutexWait(I2CmutexHandle, 20) == osOK)
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <Startstatemachine+0x128>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2114      	movs	r1, #20
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00f f98d 	bl	8011264 <osMutexWait>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <Startstatemachine+0x9e>
      {


	  if(pbmseeker_flag==0){
 8001f50:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <Startstatemachine+0x12c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d12d      	bne.n	8001fb4 <Startstatemachine+0x8c>
		  if(pbmseeker==0){
 8001f58:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <Startstatemachine+0x130>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10e      	bne.n	8001f7e <Startstatemachine+0x56>
			  ssd1306_SetCursor(32, 40);
 8001f60:	2128      	movs	r1, #40	@ 0x28
 8001f62:	2020      	movs	r0, #32
 8001f64:	f001 fd02 	bl	800396c <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f001 fbbd 	bl	80036e8 <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <Startstatemachine+0x134>)
 8001f70:	2301      	movs	r3, #1
 8001f72:	ca06      	ldmia	r2, {r1, r2}
 8001f74:	483a      	ldr	r0, [pc, #232]	@ (8002060 <Startstatemachine+0x138>)
 8001f76:	f001 fcd3 	bl	8003920 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001f7a:	f001 fbcd 	bl	8003718 <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001f7e:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <Startstatemachine+0x130>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10e      	bne.n	8001fa4 <Startstatemachine+0x7c>
			  ssd1306_SetCursor(32, 40);
 8001f86:	2128      	movs	r1, #40	@ 0x28
 8001f88:	2020      	movs	r0, #32
 8001f8a:	f001 fcef 	bl	800396c <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f001 fbaa 	bl	80036e8 <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001f94:	4a31      	ldr	r2, [pc, #196]	@ (800205c <Startstatemachine+0x134>)
 8001f96:	2301      	movs	r3, #1
 8001f98:	ca06      	ldmia	r2, {r1, r2}
 8001f9a:	4832      	ldr	r0, [pc, #200]	@ (8002064 <Startstatemachine+0x13c>)
 8001f9c:	f001 fcc0 	bl	8003920 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001fa0:	f001 fbba 	bl	8003718 <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001fa4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fa8:	f010 fab2 	bl	8012510 <vTaskDelay>
		  pbmseeker_flag=1;
 8001fac:	4b29      	ldr	r3, [pc, #164]	@ (8002054 <Startstatemachine+0x12c>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e003      	b.n	8001fbc <Startstatemachine+0x94>
	  }
	  else{
	  statemachine();
 8001fb4:	f001 fd24 	bl	8003a00 <statemachine>
	  ssd1306_UpdateScreen();
 8001fb8:	f001 fbae 	bl	8003718 <ssd1306_UpdateScreen>
	  }

      osMutexRelease(I2CmutexHandle);
 8001fbc:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <Startstatemachine+0x128>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00f f99d 	bl	8011300 <osMutexRelease>
  }




	  sizestatemachine=uxTaskGetStackHighWaterMark(statemachineHandle);
 8001fc6:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <Startstatemachine+0x140>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f010 ff48 	bl	8012e60 <uxTaskGetStackHighWaterMark>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a26      	ldr	r2, [pc, #152]	@ (800206c <Startstatemachine+0x144>)
 8001fd4:	6013      	str	r3, [r2, #0]
	  sizeGNSS=uxTaskGetStackHighWaterMark(GNSSParseHandle);
 8001fd6:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <Startstatemachine+0x148>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f010 ff40 	bl	8012e60 <uxTaskGetStackHighWaterMark>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <Startstatemachine+0x14c>)
 8001fe4:	6013      	str	r3, [r2, #0]
	  sizesdcard=uxTaskGetStackHighWaterMark(SdcardwriteHandle);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <Startstatemachine+0x150>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f010 ff38 	bl	8012e60 <uxTaskGetStackHighWaterMark>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a22      	ldr	r2, [pc, #136]	@ (800207c <Startstatemachine+0x154>)
 8001ff4:	6013      	str	r3, [r2, #0]
	  sizetarvos=uxTaskGetStackHighWaterMark(tarvosDecodeHandle);
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <Startstatemachine+0x158>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f010 ff30 	bl	8012e60 <uxTaskGetStackHighWaterMark>
 8002000:	4603      	mov	r3, r0
 8002002:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <Startstatemachine+0x15c>)
 8002004:	6013      	str	r3, [r2, #0]


	  uint32_t end1= DWT->CYCCNT;
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <Startstatemachine+0x124>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	613b      	str	r3, [r7, #16]
	  uint32_t cycles= end1-start1;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]

	  timestatemachine=(float) cycles/(SystemCoreClock/1000000.0f);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <Startstatemachine+0x160>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800208c <Startstatemachine+0x164>
 800202e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <Startstatemachine+0x168>)
 8002038:	edc3 7a00 	vstr	s15, [r3]





	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	21c8      	movs	r1, #200	@ 0xc8
 8002042:	4618      	mov	r0, r3
 8002044:	f010 f9e4 	bl	8012410 <vTaskDelayUntil>
  {
 8002048:	e776      	b.n	8001f38 <Startstatemachine+0x10>
 800204a:	bf00      	nop
 800204c:	e0001000 	.word	0xe0001000
 8002050:	20000358 	.word	0x20000358
 8002054:	2000030c 	.word	0x2000030c
 8002058:	20000f64 	.word	0x20000f64
 800205c:	20000018 	.word	0x20000018
 8002060:	08019970 	.word	0x08019970
 8002064:	08019974 	.word	0x08019974
 8002068:	2000033c 	.word	0x2000033c
 800206c:	20000314 	.word	0x20000314
 8002070:	20000340 	.word	0x20000340
 8002074:	20000318 	.word	0x20000318
 8002078:	20000344 	.word	0x20000344
 800207c:	2000031c 	.word	0x2000031c
 8002080:	20000350 	.word	0x20000350
 8002084:	20000320 	.word	0x20000320
 8002088:	20000020 	.word	0x20000020
 800208c:	49742400 	.word	0x49742400
 8002090:	20000324 	.word	0x20000324

08002094 <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800209c:	f010 fc00 	bl	80128a0 <xTaskGetTickCount>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <StartGNSSParse+0xcc>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61fb      	str	r3, [r7, #28]
	  GNSS_ParsePVTData(&GNSSData);
 80020aa:	482e      	ldr	r0, [pc, #184]	@ (8002164 <StartGNSSParse+0xd0>)
 80020ac:	f7ff f9a4 	bl	80013f8 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <StartGNSSParse+0xd4>)
 80020b2:	f000 faf5 	bl	80026a0 <bmp581_read_precise_normal>
      if (osMutexWait(I2CmutexHandle, 20) == osOK)
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <StartGNSSParse+0xd8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2114      	movs	r1, #20
 80020bc:	4618      	mov	r0, r3
 80020be:	f00f f8d1 	bl	8011264 <osMutexWait>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <StartGNSSParse+0x44>
      {
    	  Read_sensor_data(&myData6AXIS);
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <StartGNSSParse+0xdc>)
 80020ca:	f7ff f845 	bl	8001158 <Read_sensor_data>
          osMutexRelease(I2CmutexHandle);
 80020ce:	4b27      	ldr	r3, [pc, #156]	@ (800216c <StartGNSSParse+0xd8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00f f914 	bl	8011300 <osMutexRelease>
      }


	  if(flag_calib){
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <StartGNSSParse+0xe0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <StartGNSSParse+0x62>
		  hauteur_relative=(float)(myDatabmp581.altitude-hauteur_Initiale);
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <StartGNSSParse+0xd4>)
 80020e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <StartGNSSParse+0xe4>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f0:	4b22      	ldr	r3, [pc, #136]	@ (800217c <StartGNSSParse+0xe8>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
	  }

		if(flag_fin==1){
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <StartGNSSParse+0xec>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <StartGNSSParse+0x70>

			osThreadSuspend(NULL);
 80020fe:	2000      	movs	r0, #0
 8002100:	f00f f9e9 	bl	80114d6 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8002104:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <StartGNSSParse+0xcc>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
		  uint32_t cycles= end1-start1;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]

		  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <StartGNSSParse+0xf0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002128:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8002188 <StartGNSSParse+0xf4>
 800212c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002134:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timeGNSS){
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <StartGNSSParse+0xf8>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	dd02      	ble.n	8002152 <StartGNSSParse+0xbe>
	timeGNSS=times;
 800214c:	4a0f      	ldr	r2, [pc, #60]	@ (800218c <StartGNSSParse+0xf8>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6013      	str	r3, [r2, #0]
}

vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	2164      	movs	r1, #100	@ 0x64
 8002158:	4618      	mov	r0, r3
 800215a:	f010 f959 	bl	8012410 <vTaskDelayUntil>
  {
 800215e:	e7a1      	b.n	80020a4 <StartGNSSParse+0x10>
 8002160:	e0001000 	.word	0xe0001000
 8002164:	20000d28 	.word	0x20000d28
 8002168:	20000798 	.word	0x20000798
 800216c:	20000358 	.word	0x20000358
 8002170:	20000778 	.word	0x20000778
 8002174:	20000f48 	.word	0x20000f48
 8002178:	20000f5c 	.word	0x20000f5c
 800217c:	20000f60 	.word	0x20000f60
 8002180:	20000f58 	.word	0x20000f58
 8002184:	20000020 	.word	0x20000020
 8002188:	49742400 	.word	0x49742400
 800218c:	20000338 	.word	0x20000338

08002190 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 800219c:	2201      	movs	r2, #1
 800219e:	4941      	ldr	r1, [pc, #260]	@ (80022a4 <StartSdcard+0x114>)
 80021a0:	4841      	ldr	r0, [pc, #260]	@ (80022a8 <StartSdcard+0x118>)
 80021a2:	f00d ff73 	bl	801008c <f_mount>
 80021a6:	4603      	mov	r3, r0
 80021a8:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80021aa:	f010 fb79 	bl	80128a0 <xTaskGetTickCount>
 80021ae:	4603      	mov	r3, r0
 80021b0:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80021b2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <StartSdcard+0x11c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 80021b8:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <StartSdcard+0x120>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00f f84f 	bl	8011264 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <StartSdcard+0x124>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1c3 0301 	rsb	r3, r3, #1
 80021ce:	4a39      	ldr	r2, [pc, #228]	@ (80022b4 <StartSdcard+0x124>)
 80021d0:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <StartSdcard+0x124>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10a      	bne.n	80021f0 <StartSdcard+0x60>
			  LED_Setcolour(0,0,0,255,255,255);
 80021da:	23ff      	movs	r3, #255	@ 0xff
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	23ff      	movs	r3, #255	@ 0xff
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	23ff      	movs	r3, #255	@ 0xff
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 fd2f 	bl	8002c4c <LED_Setcolour>
 80021ee:	e009      	b.n	8002204 <StartSdcard+0x74>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 fd24 	bl	8002c4c <LED_Setcolour>
		  }

		  if(flag_drop==0){
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <StartSdcard+0x128>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d112      	bne.n	8002232 <StartSdcard+0xa2>

			  if(sd_counter==5){
 800220c:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <StartSdcard+0x12c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d108      	bne.n	8002226 <StartSdcard+0x96>
				  fres=store_in_sd(fres);
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f80a 	bl	8003230 <store_in_sd>
 800221c:	4603      	mov	r3, r0
 800221e:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 8002220:	4b26      	ldr	r3, [pc, #152]	@ (80022bc <StartSdcard+0x12c>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 8002226:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <StartSdcard+0x12c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	4a23      	ldr	r2, [pc, #140]	@ (80022bc <StartSdcard+0x12c>)
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e005      	b.n	800223e <StartSdcard+0xae>

		  }
		  else{
			  fres=store_in_sd(fres);
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fffb 	bl	8003230 <store_in_sd>
 800223a:	4603      	mov	r3, r0
 800223c:	77fb      	strb	r3, [r7, #31]

		  }



		  osMutexRelease(SDCard_mutexeHandle);
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <StartSdcard+0x120>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f00f f85c 	bl	8011300 <osMutexRelease>

			if(flag_fin==1){
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <StartSdcard+0x130>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <StartSdcard+0xd0>

				f_mount(NULL, "", 0);
 8002250:	2200      	movs	r2, #0
 8002252:	4914      	ldr	r1, [pc, #80]	@ (80022a4 <StartSdcard+0x114>)
 8002254:	2000      	movs	r0, #0
 8002256:	f00d ff19 	bl	801008c <f_mount>
				osThreadSuspend(NULL);
 800225a:	2000      	movs	r0, #0
 800225c:	f00f f93b 	bl	80114d6 <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <StartSdcard+0x11c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <StartSdcard+0x134>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002284:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80022c8 <StartSdcard+0x138>
 8002288:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <StartSdcard+0x13c>)
 8002292:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	21c8      	movs	r1, #200	@ 0xc8
 800229c:	4618      	mov	r0, r3
 800229e:	f010 f8b7 	bl	8012410 <vTaskDelayUntil>
  {
 80022a2:	e786      	b.n	80021b2 <StartSdcard+0x22>
 80022a4:	08019978 	.word	0x08019978
 80022a8:	200007b0 	.word	0x200007b0
 80022ac:	e0001000 	.word	0xe0001000
 80022b0:	20000354 	.word	0x20000354
 80022b4:	20000310 	.word	0x20000310
 80022b8:	20000f40 	.word	0x20000f40
 80022bc:	20000304 	.word	0x20000304
 80022c0:	20000f58 	.word	0x20000f58
 80022c4:	20000020 	.word	0x20000020
 80022c8:	49742400 	.word	0x49742400
 80022cc:	20000328 	.word	0x20000328

080022d0 <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80022d8:	f010 fae2 	bl	80128a0 <xTaskGetTickCount>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80022e0:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <Startservo+0x114>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61fb      	str	r3, [r7, #28]

	  if((flag_drop==1) && (flag_calib==1)){
 80022e6:	4b40      	ldr	r3, [pc, #256]	@ (80023e8 <Startservo+0x118>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11c      	bne.n	8002328 <Startservo+0x58>
 80022ee:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <Startservo+0x11c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d118      	bne.n	8002328 <Startservo+0x58>

		  if((hauteur_relative<=HAUTEUR_SEPARATION)){
 80022f6:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <Startservo+0x120>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d80e      	bhi.n	8002328 <Startservo+0x58>
			  release_mecanism();
 800230a:	f001 f89f 	bl	800344c <release_mecanism>
			  flag_separation=1;
 800230e:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <Startservo+0x124>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002314:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <Startservo+0x128>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]
			  vTaskDelay(pdMS_TO_TICKS(500));
 800231a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800231e:	f010 f8f7 	bl	8012510 <vTaskDelay>
			  osThreadSuspend(NULL);
 8002322:	2000      	movs	r0, #0
 8002324:	f00f f8d7 	bl	80114d6 <osThreadSuspend>



		  }
	  }
	  if(flag_drop==0){
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <Startservo+0x118>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d117      	bne.n	8002360 <Startservo+0x90>
		  if(flag_bouton_servo==1){
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <Startservo+0x12c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <Startservo+0x78>
			  release_mecanism();
 8002338:	f001 f888 	bl	800344c <release_mecanism>
			  flag_bouton_servo=2;
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <Startservo+0x12c>)
 800233e:	2202      	movs	r2, #2
 8002340:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <Startservo+0x128>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]
		  }
		  if(flag_bouton_servo==0){
 8002348:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <Startservo+0x12c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <Startservo+0x90>
			  lock_mecanism();
 8002350:	f001 f88c 	bl	800346c <lock_mecanism>
			  flag_bouton_servo=2;
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <Startservo+0x12c>)
 8002356:	2202      	movs	r2, #2
 8002358:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 800235a:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <Startservo+0x128>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
		  }

	  }

	  	  if(flag_servo_started==1){
 8002360:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <Startservo+0x128>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <Startservo+0xaa>
	  		 vTaskDelay(pdMS_TO_TICKS(500));
 8002368:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800236c:	f010 f8d0 	bl	8012510 <vTaskDelay>

	  		  stop_servo();
 8002370:	f001 f88c 	bl	800348c <stop_servo>
	  		  flag_servo_started=0;
 8002374:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <Startservo+0x128>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
	  	  }



		if(flag_fin==1){
 800237a:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <Startservo+0x130>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <Startservo+0xb8>

			osThreadSuspend(NULL);
 8002382:	2000      	movs	r0, #0
 8002384:	f00f f8a7 	bl	80114d6 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <Startservo+0x114>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]
		  uint32_t cycles= end1-start1;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
		  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <Startservo+0x134>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ac:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8002408 <Startservo+0x138>
 80023b0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80023b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b8:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timeservo){
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <Startservo+0x13c>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80023c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	dd02      	ble.n	80023d6 <Startservo+0x106>
	timeservo=times;
 80023d0:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <Startservo+0x13c>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6013      	str	r3, [r2, #0]
}
vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	21c8      	movs	r1, #200	@ 0xc8
 80023dc:	4618      	mov	r0, r3
 80023de:	f010 f817 	bl	8012410 <vTaskDelayUntil>
  {
 80023e2:	e77d      	b.n	80022e0 <Startservo+0x10>
 80023e4:	e0001000 	.word	0xe0001000
 80023e8:	20000f40 	.word	0x20000f40
 80023ec:	20000f48 	.word	0x20000f48
 80023f0:	20000f60 	.word	0x20000f60
 80023f4:	20000f44 	.word	0x20000f44
 80023f8:	20000f50 	.word	0x20000f50
 80023fc:	20000f4c 	.word	0x20000f4c
 8002400:	20000f58 	.word	0x20000f58
 8002404:	20000020 	.word	0x20000020
 8002408:	49742400 	.word	0x49742400
 800240c:	20000330 	.word	0x20000330

08002410 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002418:	f010 fa42 	bl	80128a0 <xTaskGetTickCount>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8002420:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <Startdistancecalc+0xdc>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61fb      	str	r3, [r7, #28]

	  if(flag_calib==1){
 8002426:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <Startdistancecalc+0xe0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d129      	bne.n	8002482 <Startdistancecalc+0x72>

		  if(GNSSData.fixType>=3){
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <Startdistancecalc+0xe4>)
 8002430:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002434:	2b02      	cmp	r3, #2
 8002436:	d924      	bls.n	8002482 <Startdistancecalc+0x72>
#ifdef PARTIE_BAS
			  distance_entre_module=distancecalc(GNSSData.fLat,TOPData.latitude, GNSSData.fLon,TOPData.longitude,hauteur_relative,TOPData.altitude_baro);
 8002438:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <Startdistancecalc+0xe4>)
 800243a:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800243e:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <Startdistancecalc+0xe8>)
 8002440:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <Startdistancecalc+0xe4>)
 8002446:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 800244a:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <Startdistancecalc+0xe8>)
 800244c:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <Startdistancecalc+0xec>)
 8002452:	edd3 5a00 	vldr	s11, [r3]
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <Startdistancecalc+0xe8>)
 8002458:	ed93 5a15 	vldr	s10, [r3, #84]	@ 0x54
 800245c:	eef0 2a45 	vmov.f32	s5, s10
 8002460:	eeb0 2a65 	vmov.f32	s4, s11
 8002464:	eef0 1a46 	vmov.f32	s3, s12
 8002468:	eeb0 1a66 	vmov.f32	s2, s13
 800246c:	eef0 0a47 	vmov.f32	s1, s14
 8002470:	eeb0 0a67 	vmov.f32	s0, s15
 8002474:	f7ff f9ac 	bl	80017d0 <distancecalc>
 8002478:	eef0 7a40 	vmov.f32	s15, s0
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <Startdistancecalc+0xf0>)
 800247e:	edc3 7a00 	vstr	s15, [r3]

#endif
	  }
}

		if(flag_fin==1){
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <Startdistancecalc+0xf4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <Startdistancecalc+0x80>

			osThreadSuspend(NULL);
 800248a:	2000      	movs	r0, #0
 800248c:	f00f f823 	bl	80114d6 <osThreadSuspend>
		}



	  uint32_t end1= DWT->CYCCNT;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <Startdistancecalc+0xdc>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	61bb      	str	r3, [r7, #24]
	  uint32_t cycles= end1-start1;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]

	  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <Startdistancecalc+0xf8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800250c <Startdistancecalc+0xfc>
 80024b8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80024bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c0:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timedist){
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <Startdistancecalc+0x100>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80024ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	dd02      	ble.n	80024de <Startdistancecalc+0xce>
timedist=times;
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <Startdistancecalc+0x100>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6013      	str	r3, [r2, #0]
}
vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	21c8      	movs	r1, #200	@ 0xc8
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00f ff93 	bl	8012410 <vTaskDelayUntil>
  {
 80024ea:	e799      	b.n	8002420 <Startdistancecalc+0x10>
 80024ec:	e0001000 	.word	0xe0001000
 80024f0:	20000f48 	.word	0x20000f48
 80024f4:	20000d28 	.word	0x20000d28
 80024f8:	20000c30 	.word	0x20000c30
 80024fc:	20000f60 	.word	0x20000f60
 8002500:	20000308 	.word	0x20000308
 8002504:	20000f58 	.word	0x20000f58
 8002508:	20000020 	.word	0x20000020
 800250c:	49742400 	.word	0x49742400
 8002510:	20000334 	.word	0x20000334

08002514 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800251c:	f010 f9c0 	bl	80128a0 <xTaskGetTickCount>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <startTarvosDecode+0xac>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61fb      	str	r3, [r7, #28]


	  if(trameready==1){
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <startTarvosDecode+0xb0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d110      	bne.n	8002554 <startTarvosDecode+0x40>

		  switch(tarvos_DATA[3]){
 8002532:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <startTarvosDecode+0xb4>)
 8002534:	78db      	ldrb	r3, [r3, #3]
 8002536:	2b15      	cmp	r3, #21
 8002538:	d104      	bne.n	8002544 <startTarvosDecode+0x30>
#ifdef PARTIE_BAS
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
 800253a:	4923      	ldr	r1, [pc, #140]	@ (80025c8 <startTarvosDecode+0xb4>)
 800253c:	4823      	ldr	r0, [pc, #140]	@ (80025cc <startTarvosDecode+0xb8>)
 800253e:	f002 fab7 	bl	8004ab0 <decode_payload>
			  break;
 8002542:	e004      	b.n	800254e <startTarvosDecode+0x3a>
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8002544:	4920      	ldr	r1, [pc, #128]	@ (80025c8 <startTarvosDecode+0xb4>)
 8002546:	4822      	ldr	r0, [pc, #136]	@ (80025d0 <startTarvosDecode+0xbc>)
 8002548:	f002 fab2 	bl	8004ab0 <decode_payload>

			  break;
 800254c:	bf00      	nop
		  }
		  trameready=0;
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <startTarvosDecode+0xb0>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
	  }

		if(flag_fin==1){
 8002554:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <startTarvosDecode+0xc0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <startTarvosDecode+0x4e>

			osThreadSuspend(NULL);
 800255c:	2000      	movs	r0, #0
 800255e:	f00e ffba 	bl	80114d6 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <startTarvosDecode+0xac>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
		  uint32_t cycles= end1-start1;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]

		  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <startTarvosDecode+0xc4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80025dc <startTarvosDecode+0xc8>
 800258a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timedecode){
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <startTarvosDecode+0xcc>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ed97 7a04 	vldr	s14, [r7, #16]
 80025a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd02      	ble.n	80025b0 <startTarvosDecode+0x9c>
	timedecode=times;
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <startTarvosDecode+0xcc>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	6013      	str	r3, [r2, #0]
}

vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2164      	movs	r1, #100	@ 0x64
 80025b6:	4618      	mov	r0, r3
 80025b8:	f00f ff2a 	bl	8012410 <vTaskDelayUntil>
  {
 80025bc:	e7b2      	b.n	8002524 <startTarvosDecode+0x10>
 80025be:	bf00      	nop
 80025c0:	e0001000 	.word	0xe0001000
 80025c4:	20000f6c 	.word	0x20000f6c
 80025c8:	20000488 	.word	0x20000488
 80025cc:	20000c30 	.word	0x20000c30
 80025d0:	20000cac 	.word	0x20000cac
 80025d4:	20000f58 	.word	0x20000f58
 80025d8:	20000020 	.word	0x20000020
 80025dc:	49742400 	.word	0x49742400
 80025e0:	2000032c 	.word	0x2000032c

080025e4 <bmp581_init_precise_normal>:
extern I2C_HandleTypeDef hi2c1;


//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 80025ec:	237b      	movs	r3, #123	@ 0x7b
 80025ee:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 80025f0:	2369      	movs	r3, #105	@ 0x69
 80025f2:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 80025f4:	232b      	movs	r3, #43	@ 0x2b
 80025f6:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 80025f8:	2312      	movs	r3, #18
 80025fa:	723b      	strb	r3, [r7, #8]
	int check=0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8002600:	2364      	movs	r3, #100	@ 0x64
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	2301      	movs	r3, #1
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	f107 030b 	add.w	r3, r7, #11
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2301      	movs	r3, #1
 8002610:	2236      	movs	r2, #54	@ 0x36
 8002612:	218e      	movs	r1, #142	@ 0x8e
 8002614:	4821      	ldr	r0, [pc, #132]	@ (800269c <bmp581_init_precise_normal+0xb8>)
 8002616:	f006 f875 	bl	8008704 <HAL_I2C_Mem_Write>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <bmp581_init_precise_normal+0x40>
			check=1;
 8002620:	2301      	movs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8002624:	2364      	movs	r3, #100	@ 0x64
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2301      	movs	r3, #1
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f107 030a 	add.w	r3, r7, #10
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	2237      	movs	r2, #55	@ 0x37
 8002636:	218e      	movs	r1, #142	@ 0x8e
 8002638:	4818      	ldr	r0, [pc, #96]	@ (800269c <bmp581_init_precise_normal+0xb8>)
 800263a:	f006 f863 	bl	8008704 <HAL_I2C_Mem_Write>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <bmp581_init_precise_normal+0x64>
					check=1;
 8002644:	2301      	movs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8002648:	2364      	movs	r3, #100	@ 0x64
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	2301      	movs	r3, #1
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	f107 0309 	add.w	r3, r7, #9
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2301      	movs	r3, #1
 8002658:	2230      	movs	r2, #48	@ 0x30
 800265a:	218e      	movs	r1, #142	@ 0x8e
 800265c:	480f      	ldr	r0, [pc, #60]	@ (800269c <bmp581_init_precise_normal+0xb8>)
 800265e:	f006 f851 	bl	8008704 <HAL_I2C_Mem_Write>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <bmp581_init_precise_normal+0x88>
				check=1;
 8002668:	2301      	movs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 800266c:	2364      	movs	r3, #100	@ 0x64
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	2301      	movs	r3, #1
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2301      	movs	r3, #1
 800267c:	2230      	movs	r2, #48	@ 0x30
 800267e:	218e      	movs	r1, #142	@ 0x8e
 8002680:	4806      	ldr	r0, [pc, #24]	@ (800269c <bmp581_init_precise_normal+0xb8>)
 8002682:	f006 f83f 	bl	8008704 <HAL_I2C_Mem_Write>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <bmp581_init_precise_normal+0xac>
					check=1;
 800268c:	2301      	movs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
//	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
//					check=1;
//				}


	return check;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	b2db      	uxtb	r3, r3

}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000360 	.word	0x20000360

080026a0 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	6078      	str	r0, [r7, #4]
		int check=0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 80026b4:	2364      	movs	r3, #100	@ 0x64
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	2306      	movs	r3, #6
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	221d      	movs	r2, #29
 80026c6:	218f      	movs	r1, #143	@ 0x8f
 80026c8:	4829      	ldr	r0, [pc, #164]	@ (8002770 <bmp581_read_precise_normal+0xd0>)
 80026ca:	f006 f92f 	bl	800892c <HAL_I2C_Mem_Read>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <bmp581_read_precise_normal+0x38>
					check=1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d141      	bne.n	8002762 <bmp581_read_precise_normal+0xc2>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80026de:	7bbb      	ldrb	r3, [r7, #14]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	7b7b      	ldrb	r3, [r7, #13]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4313      	orrs	r3, r2
 80026e8:	7b3a      	ldrb	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80026ee:	7c7b      	ldrb	r3, [r7, #17]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	7c3b      	ldrb	r3, [r7, #16]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4313      	orrs	r3, r2
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
		bmp581->press=(float) intbufferpres/64.0;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002708:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002774 <bmp581_read_precise_normal+0xd4>
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edc3 7a03 	vstr	s15, [r3, #12]
		bmp581->temps=(float) intbuffertemp/65536.0;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002720:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002778 <bmp581_read_precise_normal+0xd8>
 8002724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edc3 7a04 	vstr	s15, [r3, #16]

		bmp581->altitude= (1.0f - powf(bmp581->press / 101325.0f, 0.190295f)) * 44330.0f;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	edd3 7a03 	vldr	s15, [r3, #12]
 8002734:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800277c <bmp581_read_precise_normal+0xdc>
 8002738:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800273c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002780 <bmp581_read_precise_normal+0xe0>
 8002740:	eeb0 0a47 	vmov.f32	s0, s14
 8002744:	f015 fe44 	bl	80183d0 <powf>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002754:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002784 <bmp581_read_precise_normal+0xe4>
 8002758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edc3 7a05 	vstr	s15, [r3, #20]
		}

		return check;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	b2db      	uxtb	r3, r3
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000360 	.word	0x20000360
 8002774:	42800000 	.word	0x42800000
 8002778:	47800000 	.word	0x47800000
 800277c:	47c5e680 	.word	0x47c5e680
 8002780:	3e42dcb1 	.word	0x3e42dcb1
 8002784:	472d2a00 	.word	0x472d2a00

08002788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_DMA_Init+0x80>)
 8002790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002792:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <MX_DMA_Init+0x80>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6493      	str	r3, [r2, #72]	@ 0x48
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_DMA_Init+0x80>)
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_DMA_Init+0x80>)
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <MX_DMA_Init+0x80>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <MX_DMA_Init+0x80>)
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2105      	movs	r1, #5
 80027c2:	200b      	movs	r0, #11
 80027c4:	f005 f9b8 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027c8:	200b      	movs	r0, #11
 80027ca:	f005 f9cf 	bl	8007b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	200c      	movs	r0, #12
 80027d4:	f005 f9b0 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027d8:	200c      	movs	r0, #12
 80027da:	f005 f9c7 	bl	8007b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	200d      	movs	r0, #13
 80027e4:	f005 f9a8 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80027e8:	200d      	movs	r0, #13
 80027ea:	f005 f9bf 	bl	8007b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	200f      	movs	r0, #15
 80027f4:	f005 f9a0 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027f8:	200f      	movs	r0, #15
 80027fa:	f005 f9b7 	bl	8007b6c <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002822:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	4a48      	ldr	r2, [pc, #288]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282e:	4b46      	ldr	r3, [pc, #280]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b43      	ldr	r3, [pc, #268]	@ (8002948 <MX_GPIO_Init+0x13c>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	4a42      	ldr	r2, [pc, #264]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002846:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	4b3d      	ldr	r3, [pc, #244]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a3c      	ldr	r2, [pc, #240]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b37      	ldr	r3, [pc, #220]	@ (8002948 <MX_GPIO_Init+0x13c>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a36      	ldr	r2, [pc, #216]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <MX_GPIO_Init+0x13c>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	2110      	movs	r1, #16
 8002886:	4831      	ldr	r0, [pc, #196]	@ (800294c <MX_GPIO_Init+0x140>)
 8002888:	f005 fe56 	bl	8008538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002892:	482f      	ldr	r0, [pc, #188]	@ (8002950 <MX_GPIO_Init+0x144>)
 8002894:	f005 fe50 	bl	8008538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002898:	2310      	movs	r3, #16
 800289a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800289c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b0:	f005 fca8 	bl	8008204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028b4:	2310      	movs	r3, #16
 80028b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b8:	2301      	movs	r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	4820      	ldr	r0, [pc, #128]	@ (800294c <MX_GPIO_Init+0x140>)
 80028cc:	f005 fc9a 	bl	8008204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028d0:	2302      	movs	r3, #2
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028d4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80028d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <MX_GPIO_Init+0x144>)
 80028e6:	f005 fc8d 	bl	8008204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028ea:	2304      	movs	r3, #4
 80028ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4814      	ldr	r0, [pc, #80]	@ (8002950 <MX_GPIO_Init+0x144>)
 80028fe:	f005 fc81 	bl	8008204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8002902:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	@ (8002950 <MX_GPIO_Init+0x144>)
 800291c:	f005 fc72 	bl	8008204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2105      	movs	r1, #5
 8002924:	2007      	movs	r0, #7
 8002926:	f005 f907 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800292a:	2007      	movs	r0, #7
 800292c:	f005 f91e 	bl	8007b6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2105      	movs	r1, #5
 8002934:	200a      	movs	r0, #10
 8002936:	f005 f8ff 	bl	8007b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800293a:	200a      	movs	r0, #10
 800293c:	f005 f916 	bl	8007b6c <HAL_NVIC_EnableIRQ>

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	@ 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	48000800 	.word	0x48000800
 8002950:	48000400 	.word	0x48000400

08002954 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MX_I2C1_Init+0x74>)
 800295a:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <MX_I2C1_Init+0x78>)
 800295c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <MX_I2C1_Init+0x7c>)
 8002962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <MX_I2C1_Init+0x74>)
 800296c:	2201      	movs	r2, #1
 800296e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <MX_I2C1_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <MX_I2C1_Init+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298e:	480e      	ldr	r0, [pc, #56]	@ (80029c8 <MX_I2C1_Init+0x74>)
 8002990:	f005 fe1c 	bl	80085cc <HAL_I2C_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800299a:	f000 fc43 	bl	8003224 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800299e:	2100      	movs	r1, #0
 80029a0:	4809      	ldr	r0, [pc, #36]	@ (80029c8 <MX_I2C1_Init+0x74>)
 80029a2:	f006 fb9f 	bl	80090e4 <HAL_I2CEx_ConfigAnalogFilter>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029ac:	f000 fc3a 	bl	8003224 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b0:	2100      	movs	r1, #0
 80029b2:	4805      	ldr	r0, [pc, #20]	@ (80029c8 <MX_I2C1_Init+0x74>)
 80029b4:	f006 fbe1 	bl	800917a <HAL_I2CEx_ConfigDigitalFilter>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029be:	f000 fc31 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000360 	.word	0x20000360
 80029cc:	40005400 	.word	0x40005400
 80029d0:	40b285c2 	.word	0x40b285c2

080029d4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029da:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <MX_I2C3_Init+0x78>)
 80029dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40621236;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a50 <MX_I2C3_Init+0x7c>)
 80029e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ea:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80029f6:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <MX_I2C3_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <MX_I2C3_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <MX_I2C3_Init+0x74>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a0e:	480e      	ldr	r0, [pc, #56]	@ (8002a48 <MX_I2C3_Init+0x74>)
 8002a10:	f005 fddc 	bl	80085cc <HAL_I2C_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a1a:	f000 fc03 	bl	8003224 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4809      	ldr	r0, [pc, #36]	@ (8002a48 <MX_I2C3_Init+0x74>)
 8002a22:	f006 fb5f 	bl	80090e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a2c:	f000 fbfa 	bl	8003224 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a30:	2100      	movs	r1, #0
 8002a32:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_I2C3_Init+0x74>)
 8002a34:	f006 fba1 	bl	800917a <HAL_I2CEx_ConfigDigitalFilter>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a3e:	f000 fbf1 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200003b4 	.word	0x200003b4
 8002a4c:	40007800 	.word	0x40007800
 8002a50:	40621236 	.word	0x40621236

08002a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b09e      	sub	sp, #120	@ 0x78
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a6c:	f107 0320 	add.w	r3, r7, #32
 8002a70:	2244      	movs	r2, #68	@ 0x44
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f012 f870 	bl	8014b5a <memset>
  if(i2cHandle->Instance==I2C1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf0 <HAL_I2C_MspInit+0x19c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d155      	bne.n	8002b30 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a84:	2340      	movs	r3, #64	@ 0x40
 8002a86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	4618      	mov	r0, r3
 8002a92:	f007 f9cf 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a9c:	f000 fbc2 	bl	8003224 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa4:	4a53      	ldr	r2, [pc, #332]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aac:	4b51      	ldr	r3, [pc, #324]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad6:	2312      	movs	r3, #18
 8002ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af0:	f005 fb88 	bl	8008204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afa:	2312      	movs	r3, #18
 8002afc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b06:	2304      	movs	r3, #4
 8002b08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4839      	ldr	r0, [pc, #228]	@ (8002bf8 <HAL_I2C_MspInit+0x1a4>)
 8002b12:	f005 fb77 	bl	8008204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b16:	4b37      	ldr	r3, [pc, #220]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	4a36      	ldr	r2, [pc, #216]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b2e:	e05a      	b.n	8002be6 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <HAL_I2C_MspInit+0x1a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d155      	bne.n	8002be6 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f007 f973 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002b54:	f000 fb66 	bl	8003224 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b70:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8e:	2312      	movs	r3, #18
 8002b90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba8:	f005 fb2c 	bl	8008204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb2:	2312      	movs	r3, #18
 8002bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	480d      	ldr	r0, [pc, #52]	@ (8002c00 <HAL_I2C_MspInit+0x1ac>)
 8002bca:	f005 fb1b 	bl	8008204 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002bd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_I2C_MspInit+0x1a0>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
}
 8002be6:	bf00      	nop
 8002be8:	3778      	adds	r7, #120	@ 0x78
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40005400 	.word	0x40005400
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	40007800 	.word	0x40007800
 8002c00:	48000800 	.word	0x48000800

08002c04 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8002c0a:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <LED_Init+0x3c>)
 8002c0c:	f007 fff2 	bl	800abf4 <HAL_TIM_PWM_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002c14:	2300      	movs	r3, #0
 8002c16:	80fb      	strh	r3, [r7, #6]
 8002c18:	e006      	b.n	8002c28 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <LED_Init+0x40>)
 8002c1e:	2100      	movs	r1, #0
 8002c20:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	3301      	adds	r3, #1
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002c2e:	d9f4      	bls.n	8002c1a <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <LED_Init+0x44>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002c36:	797b      	ldrb	r3, [r7, #5]




}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20001540 	.word	0x20001540
 8002c44:	20000dfc 	.word	0x20000dfc
 8002c48:	20000f35 	.word	0x20000f35

08002c4c <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b08b      	sub	sp, #44	@ 0x2c
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4604      	mov	r4, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	71fb      	strb	r3, [r7, #7]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71bb      	strb	r3, [r7, #6]
 8002c62:	460b      	mov	r3, r1
 8002c64:	717b      	strb	r3, [r7, #5]
 8002c66:	4613      	mov	r3, r2
 8002c68:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8002c76:	797b      	ldrb	r3, [r7, #5]
 8002c78:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8002c7a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002c7e:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8002c80:	793b      	ldrb	r3, [r7, #4]
 8002c82:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002c84:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002c88:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	e007      	b.n	8002ca0 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8002c90:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <LED_Setcolour+0x11c>)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	4413      	add	r3, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002ca6:	ddf3      	ble.n	8002c90 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e032      	b.n	8002d14 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8002cae:	2300      	movs	r3, #0
 8002cb0:	77bb      	strb	r3, [r7, #30]
 8002cb2:	e029      	b.n	8002d08 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e020      	b.n	8002cfc <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8002cba:	7ffa      	ldrb	r2, [r7, #31]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	441a      	add	r2, r3
 8002cc2:	7fbb      	ldrb	r3, [r7, #30]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3328      	adds	r3, #40	@ 0x28
 8002cc8:	443b      	add	r3, r7
 8002cca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa42 f303 	asr.w	r3, r2, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8002cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ce0:	4a21      	ldr	r2, [pc, #132]	@ (8002d68 <LED_Setcolour+0x11c>)
 8002ce2:	2199      	movs	r1, #153	@ 0x99
 8002ce4:	54d1      	strb	r1, [r2, r3]
 8002ce6:	e003      	b.n	8002cf0 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8002ce8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cea:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <LED_Setcolour+0x11c>)
 8002cec:	2133      	movs	r1, #51	@ 0x33
 8002cee:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8002cf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	dddb      	ble.n	8002cba <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8002d02:	7fbb      	ldrb	r3, [r7, #30]
 8002d04:	3301      	adds	r3, #1
 8002d06:	77bb      	strb	r3, [r7, #30]
 8002d08:	7fbb      	ldrb	r3, [r7, #30]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d9d2      	bls.n	8002cb4 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	3301      	adds	r3, #1
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d9c9      	bls.n	8002cae <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e009      	b.n	8002d34 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002d20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d22:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <LED_Setcolour+0x11c>)
 8002d24:	2100      	movs	r1, #0
 8002d26:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002d28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d3a:	dbf1      	blt.n	8002d20 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e009      	b.n	8002d56 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002d42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d44:	4a08      	ldr	r2, [pc, #32]	@ (8002d68 <LED_Setcolour+0x11c>)
 8002d46:	2100      	movs	r1, #0
 8002d48:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002d4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	3301      	adds	r3, #1
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	ddf2      	ble.n	8002d42 <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002d5c:	f000 f806 	bl	8002d6c <LED_Update>

}
 8002d60:	bf00      	nop
 8002d62:	372c      	adds	r7, #44	@ 0x2c
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	20000dfc 	.word	0x20000dfc

08002d6c <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002d72:	f240 1339 	movw	r3, #313	@ 0x139
 8002d76:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <LED_Update+0x30>)
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4809      	ldr	r0, [pc, #36]	@ (8002da0 <LED_Update+0x34>)
 8002d7c:	f008 f932 	bl	800afe4 <HAL_TIM_PWM_Start_DMA>
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <LED_Update+0x38>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 8002d90:	79fb      	ldrb	r3, [r7, #7]

}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000dfc 	.word	0x20000dfc
 8002da0:	20001540 	.word	0x20001540
 8002da4:	20000f35 	.word	0x20000f35

08002da8 <LED_Callback>:



void LED_Callback(){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002dac:	2104      	movs	r1, #4
 8002dae:	4804      	ldr	r0, [pc, #16]	@ (8002dc0 <LED_Callback+0x18>)
 8002db0:	f008 fb30 	bl	800b414 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <LED_Callback+0x1c>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]


}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20001540 	.word	0x20001540
 8002dc4:	20000f35 	.word	0x20000f35

08002dc8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d141      	bne.n	8002e5c <HAL_GPIO_EXTI_Callback+0x94>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8002dd8:	2110      	movs	r1, #16
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dde:	f005 fb93 	bl	8008508 <HAL_GPIO_ReadPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d109      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8002dee:	f003 f907 	bl	8006000 <HAL_GetTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002df8:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 8002dfa:	e02f      	b.n	8002e5c <HAL_GPIO_EXTI_Callback+0x94>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 8002dfc:	f003 f900 	bl	8006000 <HAL_GetTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e0c:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=1500){
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
					if(gros_btn_time>=1500 && gros_btn_time<=3500){
 8002e16:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	dd0c      	ble.n	8002e3c <HAL_GPIO_EXTI_Callback+0x74>
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	dc06      	bgt.n	8002e3c <HAL_GPIO_EXTI_Callback+0x74>
						hauteur_Initiale=myDatabmp581.altitude;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4a0f      	ldr	r2, [pc, #60]	@ (8002e70 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002e34:	6013      	str	r3, [r2, #0]
						flag_calib=1;
 8002e36:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <HAL_GPIO_EXTI_Callback+0xac>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=4000){
 8002e3c:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002e44:	db07      	blt.n	8002e56 <HAL_GPIO_EXTI_Callback+0x8e>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e4a:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002e4c:	f005 fb8c 	bl	8008568 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
					gros_btn_time=0;
 8002e56:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
	}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000f38 	.word	0x20000f38
 8002e68:	20000c18 	.word	0x20000c18
 8002e6c:	20000798 	.word	0x20000798
 8002e70:	20000f5c 	.word	0x20000f5c
 8002e74:	20000f48 	.word	0x20000f48
 8002e78:	48000400 	.word	0x48000400

08002e7c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002e84:	f7ff ff90 	bl	8002da8 <LED_Callback>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e96:	f003 f888 	bl	8005faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e9a:	f000 f967 	bl	800316c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e9e:	f7ff fcb5 	bl	800280c <MX_GPIO_Init>
  MX_DMA_Init();
 8002ea2:	f7ff fc71 	bl	8002788 <MX_DMA_Init>
  MX_ADC1_Init();
 8002ea6:	f7fe fd97 	bl	80019d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002eaa:	f7ff fd53 	bl	8002954 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002eae:	f7ff fd91 	bl	80029d4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002eb2:	f002 f8f1 	bl	8005098 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002eb6:	f002 f939 	bl	800512c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002eba:	f001 ff49 	bl	8004d50 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002ebe:	f001 fed1 	bl	8004c64 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002ec2:	f000 faed 	bl	80034a0 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002ec6:	f00b fae5 	bl	800e494 <MX_FATFS_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <main+0x44>
    Error_Handler();
 8002ed0:	f000 f9a8 	bl	8003224 <Error_Handler>
  }
  MX_TIM4_Init();
 8002ed4:	f001 ffb4 	bl	8004e40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002ed8:	f000 fb9c 	bl	8003614 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f000 fc03 	bl	80036e8 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002ee2:	2128      	movs	r1, #40	@ 0x28
 8002ee4:	2020      	movs	r0, #32
 8002ee6:	f000 fd41 	bl	800396c <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002eea:	4a87      	ldr	r2, [pc, #540]	@ (8003108 <main+0x278>)
 8002eec:	2301      	movs	r3, #1
 8002eee:	ca06      	ldmia	r2, {r1, r2}
 8002ef0:	4886      	ldr	r0, [pc, #536]	@ (800310c <main+0x27c>)
 8002ef2:	f000 fd15 	bl	8003920 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002ef6:	f000 fc0f 	bl	8003718 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002efa:	2201      	movs	r2, #1
 8002efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f00:	4883      	ldr	r0, [pc, #524]	@ (8003110 <main+0x280>)
 8002f02:	f005 fb19 	bl	8008538 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002f06:	2201      	movs	r2, #1
 8002f08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f0c:	4880      	ldr	r0, [pc, #512]	@ (8003110 <main+0x280>)
 8002f0e:	f005 fb13 	bl	8008538 <HAL_GPIO_WritePin>

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002f12:	2203      	movs	r2, #3
 8002f14:	497f      	ldr	r1, [pc, #508]	@ (8003114 <main+0x284>)
 8002f16:	4880      	ldr	r0, [pc, #512]	@ (8003118 <main+0x288>)
 8002f18:	f003 fc64 	bl	80067e4 <HAL_ADC_Start_DMA>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <main+0xbe>
	  ssd1306_SetCursor(32, 40);
 8002f22:	2128      	movs	r1, #40	@ 0x28
 8002f24:	2020      	movs	r0, #32
 8002f26:	f000 fd21 	bl	800396c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f000 fbdc 	bl	80036e8 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002f30:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <main+0x278>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	ca06      	ldmia	r2, {r1, r2}
 8002f36:	4879      	ldr	r0, [pc, #484]	@ (800311c <main+0x28c>)
 8002f38:	f000 fcf2 	bl	8003920 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002f3c:	f000 fbec 	bl	8003718 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002f40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f44:	f003 f868 	bl	8006018 <HAL_Delay>
 	 pbmseeker=1;
 8002f48:	4b75      	ldr	r3, [pc, #468]	@ (8003120 <main+0x290>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 8002f4e:	2064      	movs	r0, #100	@ 0x64
 8002f50:	f003 f862 	bl	8006018 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002f54:	4873      	ldr	r0, [pc, #460]	@ (8003124 <main+0x294>)
 8002f56:	f009 fdfd 	bl	800cb54 <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002f5a:	2264      	movs	r2, #100	@ 0x64
 8002f5c:	4972      	ldr	r1, [pc, #456]	@ (8003128 <main+0x298>)
 8002f5e:	4871      	ldr	r0, [pc, #452]	@ (8003124 <main+0x294>)
 8002f60:	f009 fdac 	bl	800cabc <HAL_UART_Receive_DMA>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <main+0x106>
	   ssd1306_SetCursor(32, 40);
 8002f6a:	2128      	movs	r1, #40	@ 0x28
 8002f6c:	2020      	movs	r0, #32
 8002f6e:	f000 fcfd 	bl	800396c <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 fbb8 	bl	80036e8 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002f78:	4a63      	ldr	r2, [pc, #396]	@ (8003108 <main+0x278>)
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	ca06      	ldmia	r2, {r1, r2}
 8002f7e:	486b      	ldr	r0, [pc, #428]	@ (800312c <main+0x29c>)
 8002f80:	f000 fcce 	bl	8003920 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002f84:	f000 fbc8 	bl	8003718 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002f88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f8c:	f003 f844 	bl	8006018 <HAL_Delay>
  	pbmseeker=1;
 8002f90:	4b63      	ldr	r3, [pc, #396]	@ (8003120 <main+0x290>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002f96:	f7ff fe35 	bl	8002c04 <LED_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <main+0x13c>
	  ssd1306_SetCursor(32, 40);
 8002fa0:	2128      	movs	r1, #40	@ 0x28
 8002fa2:	2020      	movs	r0, #32
 8002fa4:	f000 fce2 	bl	800396c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f000 fb9d 	bl	80036e8 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002fae:	4a56      	ldr	r2, [pc, #344]	@ (8003108 <main+0x278>)
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	ca06      	ldmia	r2, {r1, r2}
 8002fb4:	485e      	ldr	r0, [pc, #376]	@ (8003130 <main+0x2a0>)
 8002fb6:	f000 fcb3 	bl	8003920 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002fba:	f000 fbad 	bl	8003718 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002fbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fc2:	f003 f829 	bl	8006018 <HAL_Delay>
 	 pbmseeker=1;
 8002fc6:	4b56      	ldr	r3, [pc, #344]	@ (8003120 <main+0x290>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002fcc:	f7fe f850 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002fd0:	4858      	ldr	r0, [pc, #352]	@ (8003134 <main+0x2a4>)
 8002fd2:	f7ff fb07 	bl	80025e4 <bmp581_init_precise_normal>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002fdc:	2128      	movs	r1, #40	@ 0x28
 8002fde:	2020      	movs	r0, #32
 8002fe0:	f000 fcc4 	bl	800396c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f000 fb7f 	bl	80036e8 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002fea:	4a47      	ldr	r2, [pc, #284]	@ (8003108 <main+0x278>)
 8002fec:	2301      	movs	r3, #1
 8002fee:	ca06      	ldmia	r2, {r1, r2}
 8002ff0:	4851      	ldr	r0, [pc, #324]	@ (8003138 <main+0x2a8>)
 8002ff2:	f000 fc95 	bl	8003920 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002ff6:	f000 fb8f 	bl	8003718 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002ffa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ffe:	f003 f80b 	bl	8006018 <HAL_Delay>
 	 pbmseeker=1;
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <main+0x290>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

   }

  //mon adresse est 1° et on envoit à 2°
#ifdef PARTIE_BAS
  if( INIT_PERM_TARVOS(BOTTOM_ADDR, GROUND_ADDR)!=HAL_OK){
 8003008:	2101      	movs	r1, #1
 800300a:	2016      	movs	r0, #22
 800300c:	f001 fb46 	bl	800469c <INIT_PERM_TARVOS>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <main+0x1b2>
	  ssd1306_SetCursor(32, 40);
 8003016:	2128      	movs	r1, #40	@ 0x28
 8003018:	2020      	movs	r0, #32
 800301a:	f000 fca7 	bl	800396c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 800301e:	2000      	movs	r0, #0
 8003020:	f000 fb62 	bl	80036e8 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8003024:	4a38      	ldr	r2, [pc, #224]	@ (8003108 <main+0x278>)
 8003026:	2301      	movs	r3, #1
 8003028:	ca06      	ldmia	r2, {r1, r2}
 800302a:	4844      	ldr	r0, [pc, #272]	@ (800313c <main+0x2ac>)
 800302c:	f000 fc78 	bl	8003920 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8003030:	f000 fb72 	bl	8003718 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8003034:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003038:	f002 ffee 	bl	8006018 <HAL_Delay>
 	 pbmseeker=1;
 800303c:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <main+0x290>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 8003042:	2064      	movs	r0, #100	@ 0x64
 8003044:	f002 ffe8 	bl	8006018 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8003048:	483d      	ldr	r0, [pc, #244]	@ (8003140 <main+0x2b0>)
 800304a:	f009 fd83 	bl	800cb54 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 800304e:	2205      	movs	r2, #5
 8003050:	493c      	ldr	r1, [pc, #240]	@ (8003144 <main+0x2b4>)
 8003052:	483b      	ldr	r0, [pc, #236]	@ (8003140 <main+0x2b0>)
 8003054:	f009 fd32 	bl	800cabc <HAL_UART_Receive_DMA>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <main+0x1fa>
	   ssd1306_SetCursor(32, 40);
 800305e:	2128      	movs	r1, #40	@ 0x28
 8003060:	2020      	movs	r0, #32
 8003062:	f000 fc83 	bl	800396c <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8003066:	2000      	movs	r0, #0
 8003068:	f000 fb3e 	bl	80036e8 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 800306c:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <main+0x278>)
 800306e:	2301      	movs	r3, #1
 8003070:	ca06      	ldmia	r2, {r1, r2}
 8003072:	4835      	ldr	r0, [pc, #212]	@ (8003148 <main+0x2b8>)
 8003074:	f000 fc54 	bl	8003920 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8003078:	f000 fb4e 	bl	8003718 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 800307c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003080:	f002 ffca 	bl	8006018 <HAL_Delay>
 	pbmseeker=1;
 8003084:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <main+0x290>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 800308a:	4830      	ldr	r0, [pc, #192]	@ (800314c <main+0x2bc>)
 800308c:	f007 fd48 	bl	800ab20 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8003090:	200a      	movs	r0, #10
 8003092:	f002 ffc1 	bl	8006018 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8003096:	2201      	movs	r2, #1
 8003098:	492d      	ldr	r1, [pc, #180]	@ (8003150 <main+0x2c0>)
 800309a:	482e      	ldr	r0, [pc, #184]	@ (8003154 <main+0x2c4>)
 800309c:	f00c fff6 	bl	801008c <f_mount>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <main+0x2c8>)
 80030a6:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <main+0x2c8>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d125      	bne.n	80030fc <main+0x26c>
  			  fres = f_mkdir("DEMO");
 80030b0:	482a      	ldr	r0, [pc, #168]	@ (800315c <main+0x2cc>)
 80030b2:	f00d febf 	bl	8010e34 <f_mkdir>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <main+0x2c8>)
 80030bc:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 80030be:	2212      	movs	r2, #18
 80030c0:	4927      	ldr	r1, [pc, #156]	@ (8003160 <main+0x2d0>)
 80030c2:	4828      	ldr	r0, [pc, #160]	@ (8003164 <main+0x2d4>)
 80030c4:	f00d f846 	bl	8010154 <f_open>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <main+0x2c8>)
 80030ce:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 80030d0:	4b21      	ldr	r3, [pc, #132]	@ (8003158 <main+0x2c8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10c      	bne.n	80030f2 <main+0x262>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	220b      	movs	r2, #11
 80030dc:	4922      	ldr	r1, [pc, #136]	@ (8003168 <main+0x2d8>)
 80030de:	4821      	ldr	r0, [pc, #132]	@ (8003164 <main+0x2d4>)
 80030e0:	f00d f9f9 	bl	80104d6 <f_write>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <main+0x2c8>)
 80030ea:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 80030ec:	481d      	ldr	r0, [pc, #116]	@ (8003164 <main+0x2d4>)
 80030ee:	f00d fc1f 	bl	8010930 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	4916      	ldr	r1, [pc, #88]	@ (8003150 <main+0x2c0>)
 80030f6:	2000      	movs	r0, #0
 80030f8:	f00c ffc8 	bl	801008c <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80030fc:	f7fe fe52 	bl	8001da4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003100:	f00e f875 	bl	80111ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <main+0x274>
 8003108:	20000010 	.word	0x20000010
 800310c:	0801997c 	.word	0x0801997c
 8003110:	48000400 	.word	0x48000400
 8003114:	20000c1c 	.word	0x20000c1c
 8003118:	20000238 	.word	0x20000238
 800311c:	08019984 	.word	0x08019984
 8003120:	20000f64 	.word	0x20000f64
 8003124:	20001720 	.word	0x20001720
 8003128:	20000508 	.word	0x20000508
 800312c:	0801998c 	.word	0x0801998c
 8003130:	08019994 	.word	0x08019994
 8003134:	20000798 	.word	0x20000798
 8003138:	0801999c 	.word	0x0801999c
 800313c:	080199a4 	.word	0x080199a4
 8003140:	2000168c 	.word	0x2000168c
 8003144:	200004c8 	.word	0x200004c8
 8003148:	080199b0 	.word	0x080199b0
 800314c:	200015d8 	.word	0x200015d8
 8003150:	080199bc 	.word	0x080199bc
 8003154:	200007b0 	.word	0x200007b0
 8003158:	200009e4 	.word	0x200009e4
 800315c:	080199c0 	.word	0x080199c0
 8003160:	080199c8 	.word	0x080199c8
 8003164:	200009e8 	.word	0x200009e8
 8003168:	080199d8 	.word	0x080199d8

0800316c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b094      	sub	sp, #80	@ 0x50
 8003170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003172:	f107 0318 	add.w	r3, r7, #24
 8003176:	2238      	movs	r2, #56	@ 0x38
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f011 fced 	bl	8014b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800318e:	2000      	movs	r0, #0
 8003190:	f006 f840 	bl	8009214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800319c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800319e:	2302      	movs	r3, #2
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031a2:	2303      	movs	r3, #3
 80031a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031a6:	2304      	movs	r3, #4
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031aa:	2355      	movs	r3, #85	@ 0x55
 80031ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ae:	2302      	movs	r3, #2
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031b6:	2302      	movs	r3, #2
 80031b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ba:	f107 0318 	add.w	r3, r7, #24
 80031be:	4618      	mov	r0, r3
 80031c0:	f006 f8dc 	bl	800937c <HAL_RCC_OscConfig>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80031ca:	f000 f82b 	bl	8003224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ce:	230f      	movs	r3, #15
 80031d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d2:	2303      	movs	r3, #3
 80031d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	2104      	movs	r1, #4
 80031e6:	4618      	mov	r0, r3
 80031e8:	f006 fbda 	bl	80099a0 <HAL_RCC_ClockConfig>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80031f2:	f000 f817 	bl	8003224 <Error_Handler>
  }
}
 80031f6:	bf00      	nop
 80031f8:	3750      	adds	r7, #80	@ 0x50
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003212:	f002 fee3 	bl	8005fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40012c00 	.word	0x40012c00

08003224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003228:	b672      	cpsid	i
}
 800322a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <Error_Handler+0x8>

08003230 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 8003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	b0b9      	sub	sp, #228	@ 0xe4
 8003236:	af20      	add	r7, sp, #128	@ 0x80
 8003238:	4603      	mov	r3, r0
 800323a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	uint16_t sizeligne=0;
 800323e:	2300      	movs	r3, #0
 8003240:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);

#endif
#ifdef PARTIE_BAS

	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003244:	4b71      	ldr	r3, [pc, #452]	@ (800340c <store_in_sd+0x1dc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	653b      	str	r3, [r7, #80]	@ 0x50
 800324a:	4b71      	ldr	r3, [pc, #452]	@ (8003410 <store_in_sd+0x1e0>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003250:	4b70      	ldr	r3, [pc, #448]	@ (8003414 <store_in_sd+0x1e4>)
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	64b9      	str	r1, [r7, #72]	@ 0x48
				"%d,%d,%d,%0.7f,%0.7f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.0f,%0.0f,%0.0f,%0.2f,%d,%0.2f,%0.2f,%lu\n\r",
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8003256:	4b70      	ldr	r3, [pc, #448]	@ (8003418 <store_in_sd+0x1e8>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	sizeligne=snprintf((char *)sdcardbuffer,512,
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f99b 	bl	8000598 <__aeabi_f2d>
 8003262:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8003266:	4b6c      	ldr	r3, [pc, #432]	@ (8003418 <store_in_sd+0x1e8>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	sizeligne=snprintf((char *)sdcardbuffer,512,
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f993 	bl	8000598 <__aeabi_f2d>
 8003272:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8003276:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <store_in_sd+0x1e8>)
 8003278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	sizeligne=snprintf((char *)sdcardbuffer,512,
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f98b 	bl	8000598 <__aeabi_f2d>
 8003282:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8003286:	4b65      	ldr	r3, [pc, #404]	@ (800341c <store_in_sd+0x1ec>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f984 	bl	8000598 <__aeabi_f2d>
 8003290:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8003294:	4b60      	ldr	r3, [pc, #384]	@ (8003418 <store_in_sd+0x1e8>)
 8003296:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
	sizeligne=snprintf((char *)sdcardbuffer,512,
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f97c 	bl	8000598 <__aeabi_f2d>
 80032a0:	e9c7 0108 	strd	r0, r1, [r7, #32]
				hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 80032a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <store_in_sd+0x1e8>)
 80032a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f974 	bl	8000598 <__aeabi_f2d>
 80032b0:	e9c7 0106 	strd	r0, r1, [r7, #24]
				hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 80032b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003420 <store_in_sd+0x1f0>)
 80032b6:	68db      	ldr	r3, [r3, #12]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f96d 	bl	8000598 <__aeabi_f2d>
 80032be:	e9c7 0104 	strd	r0, r1, [r7, #16]
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
 80032c2:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <store_in_sd+0x1f4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f966 	bl	8000598 <__aeabi_f2d>
 80032cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
 80032d0:	4b54      	ldr	r3, [pc, #336]	@ (8003424 <store_in_sd+0x1f4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f95f 	bl	8000598 <__aeabi_f2d>
 80032da:	e9c7 0100 	strd	r0, r1, [r7]
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
 80032de:	4b51      	ldr	r3, [pc, #324]	@ (8003424 <store_in_sd+0x1f4>)
 80032e0:	689b      	ldr	r3, [r3, #8]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f958 	bl	8000598 <__aeabi_f2d>
 80032e8:	4682      	mov	sl, r0
 80032ea:	468b      	mov	fp, r1
 80032ec:	4b4e      	ldr	r3, [pc, #312]	@ (8003428 <store_in_sd+0x1f8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f951 	bl	8000598 <__aeabi_f2d>
 80032f6:	4680      	mov	r8, r0
 80032f8:	4689      	mov	r9, r1
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
 80032fa:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <store_in_sd+0x1e8>)
 80032fc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003300:	461e      	mov	r6, r3
 8003302:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <store_in_sd+0x1fc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f946 	bl	8000598 <__aeabi_f2d>
 800330c:	4604      	mov	r4, r0
 800330e:	460d      	mov	r5, r1
 8003310:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <store_in_sd+0x200>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f93f 	bl	8000598 <__aeabi_f2d>
 800331a:	4b46      	ldr	r3, [pc, #280]	@ (8003434 <store_in_sd+0x204>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	931e      	str	r3, [sp, #120]	@ 0x78
 8003320:	e9cd 011c 	strd	r0, r1, [sp, #112]	@ 0x70
 8003324:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 8003328:	9618      	str	r6, [sp, #96]	@ 0x60
 800332a:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 800332e:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8003332:	ed97 7b00 	vldr	d7, [r7]
 8003336:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800333a:	ed97 7b02 	vldr	d7, [r7, #8]
 800333e:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8003342:	ed97 7b04 	vldr	d7, [r7, #16]
 8003346:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800334a:	ed97 7b06 	vldr	d7, [r7, #24]
 800334e:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003352:	ed97 7b08 	vldr	d7, [r7, #32]
 8003356:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800335a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800335e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003362:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800336a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800336e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003372:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8003376:	ed8d 7b02 	vstr	d7, [sp, #8]
 800337a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800337c:	9101      	str	r1, [sp, #4]
 800337e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003380:	9200      	str	r2, [sp, #0]
 8003382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003384:	4a2c      	ldr	r2, [pc, #176]	@ (8003438 <store_in_sd+0x208>)
 8003386:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800338a:	482c      	ldr	r0, [pc, #176]	@ (800343c <store_in_sd+0x20c>)
 800338c:	f011 fb4a 	bl	8014a24 <sniprintf>
 8003390:	4603      	mov	r3, r0
 8003392:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
#endif



			  if (fres == FR_OK) {
 8003396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800339a:	2b00      	cmp	r3, #0
 800339c:	d12f      	bne.n	80033fe <store_in_sd+0x1ce>
				  if(flag_drop==0){
 800339e:	4b1c      	ldr	r3, [pc, #112]	@ (8003410 <store_in_sd+0x1e0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <store_in_sd+0x188>
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80033a6:	2212      	movs	r2, #18
 80033a8:	4925      	ldr	r1, [pc, #148]	@ (8003440 <store_in_sd+0x210>)
 80033aa:	4826      	ldr	r0, [pc, #152]	@ (8003444 <store_in_sd+0x214>)
 80033ac:	f00c fed2 	bl	8010154 <f_open>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80033b6:	e007      	b.n	80033c8 <store_in_sd+0x198>
				  else{
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80033b8:	2212      	movs	r2, #18
 80033ba:	4923      	ldr	r1, [pc, #140]	@ (8003448 <store_in_sd+0x218>)
 80033bc:	4821      	ldr	r0, [pc, #132]	@ (8003444 <store_in_sd+0x214>)
 80033be:	f00c fec9 	bl	8010154 <f_open>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		#endif

				  }
				  if (fres == FR_OK) {
 80033c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <store_in_sd+0x1ce>
					  fres=f_lseek(&fil, f_size(&fil));
 80033d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <store_in_sd+0x214>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4619      	mov	r1, r3
 80033d6:	481b      	ldr	r0, [pc, #108]	@ (8003444 <store_in_sd+0x214>)
 80033d8:	f00d fad9 	bl	801098e <f_lseek>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 80033e2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80033e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033ea:	4914      	ldr	r1, [pc, #80]	@ (800343c <store_in_sd+0x20c>)
 80033ec:	4815      	ldr	r0, [pc, #84]	@ (8003444 <store_in_sd+0x214>)
 80033ee:	f00d f872 	bl	80104d6 <f_write>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					  f_close(&fil);
 80033f8:	4812      	ldr	r0, [pc, #72]	@ (8003444 <store_in_sd+0x214>)
 80033fa:	f00d fa99 	bl	8010930 <f_close>
				  }

			  }


	return fres;
 80033fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57

}
 8003402:	4618      	mov	r0, r3
 8003404:	3764      	adds	r7, #100	@ 0x64
 8003406:	46bd      	mov	sp, r7
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	20000f48 	.word	0x20000f48
 8003410:	20000f40 	.word	0x20000f40
 8003414:	20000f44 	.word	0x20000f44
 8003418:	20000d28 	.word	0x20000d28
 800341c:	20000f60 	.word	0x20000f60
 8003420:	20000798 	.word	0x20000798
 8003424:	20000778 	.word	0x20000778
 8003428:	20000308 	.word	0x20000308
 800342c:	20000c24 	.word	0x20000c24
 8003430:	20000c2c 	.word	0x20000c2c
 8003434:	20000f70 	.word	0x20000f70
 8003438:	080199e4 	.word	0x080199e4
 800343c:	20000578 	.word	0x20000578
 8003440:	08019a44 	.word	0x08019a44
 8003444:	200009e8 	.word	0x200009e8
 8003448:	08019a50 	.word	0x08019a50

0800344c <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <release_mecanism+0x1c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8003458:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800345a:	2100      	movs	r1, #0
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <release_mecanism+0x1c>)
 800345e:	f007 fc2b 	bl	800acb8 <HAL_TIM_PWM_Start>
 8003462:	4603      	mov	r3, r0


}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000158c 	.word	0x2000158c

0800346c <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <lock_mecanism+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8003478:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800347a:	2100      	movs	r1, #0
 800347c:	4802      	ldr	r0, [pc, #8]	@ (8003488 <lock_mecanism+0x1c>)
 800347e:	f007 fc1b 	bl	800acb8 <HAL_TIM_PWM_Start>
 8003482:	4603      	mov	r3, r0


}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000158c 	.word	0x2000158c

0800348c <stop_servo>:
void stop_servo(void){
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003490:	2100      	movs	r1, #0
 8003492:	4802      	ldr	r0, [pc, #8]	@ (800349c <stop_servo+0x10>)
 8003494:	f007 fd10 	bl	800aeb8 <HAL_TIM_PWM_Stop>

}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2000158c 	.word	0x2000158c

080034a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <MX_SPI1_Init+0x78>)
 80034a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034b2:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034b8:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034d6:	2220      	movs	r2, #32
 80034d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034da:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034ee:	2207      	movs	r2, #7
 80034f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034f2:	4b08      	ldr	r3, [pc, #32]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <MX_SPI1_Init+0x74>)
 80034fa:	2208      	movs	r2, #8
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	@ (8003514 <MX_SPI1_Init+0x74>)
 8003500:	f006 fe88 	bl	800a214 <HAL_SPI_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800350a:	f7ff fe8b 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000f74 	.word	0x20000f74
 8003518:	40013000 	.word	0x40013000

0800351c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_SPI_MspInit+0x7c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d128      	bne.n	8003590 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800353e:	4b17      	ldr	r3, [pc, #92]	@ (800359c <HAL_SPI_MspInit+0x80>)
 8003540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003542:	4a16      	ldr	r2, [pc, #88]	@ (800359c <HAL_SPI_MspInit+0x80>)
 8003544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003548:	6613      	str	r3, [r2, #96]	@ 0x60
 800354a:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_SPI_MspInit+0x80>)
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b11      	ldr	r3, [pc, #68]	@ (800359c <HAL_SPI_MspInit+0x80>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a10      	ldr	r2, [pc, #64]	@ (800359c <HAL_SPI_MspInit+0x80>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003562:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_SPI_MspInit+0x80>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800356e:	23e0      	movs	r3, #224	@ 0xe0
 8003570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800357e:	2305      	movs	r3, #5
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358c:	f004 fe3a 	bl	8008204 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003590:	bf00      	nop
 8003592:	3728      	adds	r7, #40	@ 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013000 	.word	0x40013000
 800359c:	40021000 	.word	0x40021000

080035a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af04      	add	r7, sp, #16
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	9302      	str	r3, [sp, #8]
 80035c0:	2301      	movs	r3, #1
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	2200      	movs	r2, #0
 80035cc:	2178      	movs	r1, #120	@ 0x78
 80035ce:	4803      	ldr	r0, [pc, #12]	@ (80035dc <ssd1306_WriteCommand+0x2c>)
 80035d0:	f005 f898 	bl	8008704 <HAL_I2C_Mem_Write>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	200003b4 	.word	0x200003b4

080035e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2301      	movs	r3, #1
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	2178      	movs	r1, #120	@ 0x78
 8003600:	4803      	ldr	r0, [pc, #12]	@ (8003610 <ssd1306_WriteData+0x30>)
 8003602:	f005 f87f 	bl	8008704 <HAL_I2C_Mem_Write>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200003b4 	.word	0x200003b4

08003614 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003618:	f7ff ffc2 	bl	80035a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800361c:	2064      	movs	r0, #100	@ 0x64
 800361e:	f002 fcfb 	bl	8006018 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003622:	2000      	movs	r0, #0
 8003624:	f000 f9ce 	bl	80039c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003628:	2020      	movs	r0, #32
 800362a:	f7ff ffc1 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800362e:	2000      	movs	r0, #0
 8003630:	f7ff ffbe 	bl	80035b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003634:	20b0      	movs	r0, #176	@ 0xb0
 8003636:	f7ff ffbb 	bl	80035b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800363a:	20c8      	movs	r0, #200	@ 0xc8
 800363c:	f7ff ffb8 	bl	80035b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003640:	2000      	movs	r0, #0
 8003642:	f7ff ffb5 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003646:	2010      	movs	r0, #16
 8003648:	f7ff ffb2 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800364c:	2040      	movs	r0, #64	@ 0x40
 800364e:	f7ff ffaf 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003652:	20ff      	movs	r0, #255	@ 0xff
 8003654:	f000 f9a2 	bl	800399c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003658:	20a1      	movs	r0, #161	@ 0xa1
 800365a:	f7ff ffa9 	bl	80035b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800365e:	20a6      	movs	r0, #166	@ 0xa6
 8003660:	f7ff ffa6 	bl	80035b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003664:	20a8      	movs	r0, #168	@ 0xa8
 8003666:	f7ff ffa3 	bl	80035b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800366a:	203f      	movs	r0, #63	@ 0x3f
 800366c:	f7ff ffa0 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003670:	20a4      	movs	r0, #164	@ 0xa4
 8003672:	f7ff ff9d 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003676:	20d3      	movs	r0, #211	@ 0xd3
 8003678:	f7ff ff9a 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff ff97 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003682:	20d5      	movs	r0, #213	@ 0xd5
 8003684:	f7ff ff94 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003688:	20f0      	movs	r0, #240	@ 0xf0
 800368a:	f7ff ff91 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800368e:	20d9      	movs	r0, #217	@ 0xd9
 8003690:	f7ff ff8e 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003694:	2022      	movs	r0, #34	@ 0x22
 8003696:	f7ff ff8b 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800369a:	20da      	movs	r0, #218	@ 0xda
 800369c:	f7ff ff88 	bl	80035b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80036a0:	2012      	movs	r0, #18
 80036a2:	f7ff ff85 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80036a6:	20db      	movs	r0, #219	@ 0xdb
 80036a8:	f7ff ff82 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80036ac:	2020      	movs	r0, #32
 80036ae:	f7ff ff7f 	bl	80035b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80036b2:	208d      	movs	r0, #141	@ 0x8d
 80036b4:	f7ff ff7c 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80036b8:	2014      	movs	r0, #20
 80036ba:	f7ff ff79 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80036be:	2001      	movs	r0, #1
 80036c0:	f000 f980 	bl	80039c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f000 f80f 	bl	80036e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80036ca:	f000 f825 	bl	8003718 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <ssd1306_Init+0xd0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <ssd1306_Init+0xd0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80036da:	4b02      	ldr	r3, [pc, #8]	@ (80036e4 <ssd1306_Init+0xd0>)
 80036dc:	2201      	movs	r2, #1
 80036de:	711a      	strb	r2, [r3, #4]
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	200013d8 	.word	0x200013d8

080036e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <ssd1306_Fill+0x14>
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <ssd1306_Fill+0x16>
 80036fc:	23ff      	movs	r3, #255	@ 0xff
 80036fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003702:	4619      	mov	r1, r3
 8003704:	4803      	ldr	r0, [pc, #12]	@ (8003714 <ssd1306_Fill+0x2c>)
 8003706:	f011 fa28 	bl	8014b5a <memset>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000fd8 	.word	0x20000fd8

08003718 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800371e:	2300      	movs	r3, #0
 8003720:	71fb      	strb	r3, [r7, #7]
 8003722:	e016      	b.n	8003752 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	3b50      	subs	r3, #80	@ 0x50
 8003728:	b2db      	uxtb	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff40 	bl	80035b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003730:	2000      	movs	r0, #0
 8003732:	f7ff ff3d 	bl	80035b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003736:	2010      	movs	r0, #16
 8003738:	f7ff ff3a 	bl	80035b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	4a08      	ldr	r2, [pc, #32]	@ (8003764 <ssd1306_UpdateScreen+0x4c>)
 8003742:	4413      	add	r3, r2
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff4a 	bl	80035e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	3301      	adds	r3, #1
 8003750:	71fb      	strb	r3, [r7, #7]
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	2b07      	cmp	r3, #7
 8003756:	d9e5      	bls.n	8003724 <ssd1306_UpdateScreen+0xc>
    }
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000fd8 	.word	0x20000fd8

08003768 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
 8003772:	460b      	mov	r3, r1
 8003774:	71bb      	strb	r3, [r7, #6]
 8003776:	4613      	mov	r3, r2
 8003778:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db3d      	blt.n	80037fe <ssd1306_DrawPixel+0x96>
 8003782:	79bb      	ldrb	r3, [r7, #6]
 8003784:	2b3f      	cmp	r3, #63	@ 0x3f
 8003786:	d83a      	bhi.n	80037fe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003788:	797b      	ldrb	r3, [r7, #5]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11a      	bne.n	80037c4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	79bb      	ldrb	r3, [r7, #6]
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	b2d8      	uxtb	r0, r3
 8003796:	4603      	mov	r3, r0
 8003798:	01db      	lsls	r3, r3, #7
 800379a:	4413      	add	r3, r2
 800379c:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <ssd1306_DrawPixel+0xa4>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	b25a      	sxtb	r2, r3
 80037a2:	79bb      	ldrb	r3, [r7, #6]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	4313      	orrs	r3, r2
 80037b2:	b259      	sxtb	r1, r3
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	4603      	mov	r3, r0
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	4413      	add	r3, r2
 80037bc:	b2c9      	uxtb	r1, r1
 80037be:	4a13      	ldr	r2, [pc, #76]	@ (800380c <ssd1306_DrawPixel+0xa4>)
 80037c0:	54d1      	strb	r1, [r2, r3]
 80037c2:	e01d      	b.n	8003800 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80037c4:	79fa      	ldrb	r2, [r7, #7]
 80037c6:	79bb      	ldrb	r3, [r7, #6]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	b2d8      	uxtb	r0, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	4413      	add	r3, r2
 80037d2:	4a0e      	ldr	r2, [pc, #56]	@ (800380c <ssd1306_DrawPixel+0xa4>)
 80037d4:	5cd3      	ldrb	r3, [r2, r3]
 80037d6:	b25a      	sxtb	r2, r3
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	4013      	ands	r3, r2
 80037ec:	b259      	sxtb	r1, r3
 80037ee:	79fa      	ldrb	r2, [r7, #7]
 80037f0:	4603      	mov	r3, r0
 80037f2:	01db      	lsls	r3, r3, #7
 80037f4:	4413      	add	r3, r2
 80037f6:	b2c9      	uxtb	r1, r1
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <ssd1306_DrawPixel+0xa4>)
 80037fa:	54d1      	strb	r1, [r2, r3]
 80037fc:	e000      	b.n	8003800 <ssd1306_DrawPixel+0x98>
        return;
 80037fe:	bf00      	nop
    }
}
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000fd8 	.word	0x20000fd8

08003810 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	4604      	mov	r4, r0
 8003818:	1d38      	adds	r0, r7, #4
 800381a:	e880 0006 	stmia.w	r0, {r1, r2}
 800381e:	461a      	mov	r2, r3
 8003820:	4623      	mov	r3, r4
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	4613      	mov	r3, r2
 8003826:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b1f      	cmp	r3, #31
 800382c:	d902      	bls.n	8003834 <ssd1306_WriteChar+0x24>
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b7e      	cmp	r3, #126	@ 0x7e
 8003832:	d901      	bls.n	8003838 <ssd1306_WriteChar+0x28>
        return 0;
 8003834:	2300      	movs	r3, #0
 8003836:	e06c      	b.n	8003912 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003838:	4b38      	ldr	r3, [pc, #224]	@ (800391c <ssd1306_WriteChar+0x10c>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	793b      	ldrb	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	dc06      	bgt.n	8003854 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003846:	4b35      	ldr	r3, [pc, #212]	@ (800391c <ssd1306_WriteChar+0x10c>)
 8003848:	885b      	ldrh	r3, [r3, #2]
 800384a:	461a      	mov	r2, r3
 800384c:	797b      	ldrb	r3, [r7, #5]
 800384e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	dd01      	ble.n	8003858 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003854:	2300      	movs	r3, #0
 8003856:	e05c      	b.n	8003912 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e04c      	b.n	80038f8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	3b20      	subs	r3, #32
 8003864:	7979      	ldrb	r1, [r7, #5]
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4619      	mov	r1, r3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	440b      	add	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	e034      	b.n	80038e8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <ssd1306_WriteChar+0x10c>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4413      	add	r3, r2
 800389a:	b2d8      	uxtb	r0, r3
 800389c:	4b1f      	ldr	r3, [pc, #124]	@ (800391c <ssd1306_WriteChar+0x10c>)
 800389e:	885b      	ldrh	r3, [r3, #2]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	7bba      	ldrb	r2, [r7, #14]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7ff ff5b 	bl	8003768 <ssd1306_DrawPixel>
 80038b2:	e016      	b.n	80038e2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80038b4:	4b19      	ldr	r3, [pc, #100]	@ (800391c <ssd1306_WriteChar+0x10c>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4413      	add	r3, r2
 80038c0:	b2d8      	uxtb	r0, r3
 80038c2:	4b16      	ldr	r3, [pc, #88]	@ (800391c <ssd1306_WriteChar+0x10c>)
 80038c4:	885b      	ldrh	r3, [r3, #2]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	b2d9      	uxtb	r1, r3
 80038d0:	7bbb      	ldrb	r3, [r7, #14]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	f7ff ff43 	bl	8003768 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	793b      	ldrb	r3, [r7, #4]
 80038ea:	461a      	mov	r2, r3
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d3c5      	bcc.n	800387e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	797b      	ldrb	r3, [r7, #5]
 80038fa:	461a      	mov	r2, r3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4293      	cmp	r3, r2
 8003900:	d3ad      	bcc.n	800385e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <ssd1306_WriteChar+0x10c>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	793a      	ldrb	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	4b03      	ldr	r3, [pc, #12]	@ (800391c <ssd1306_WriteChar+0x10c>)
 800390e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	@ 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
 800391a:	bf00      	nop
 800391c:	200013d8 	.word	0x200013d8

08003920 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	1d38      	adds	r0, r7, #4
 800392a:	e880 0006 	stmia.w	r0, {r1, r2}
 800392e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003930:	e012      	b.n	8003958 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	7818      	ldrb	r0, [r3, #0]
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	1d3a      	adds	r2, r7, #4
 800393a:	ca06      	ldmia	r2, {r1, r2}
 800393c:	f7ff ff68 	bl	8003810 <ssd1306_WriteChar>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d002      	beq.n	8003952 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	e008      	b.n	8003964 <ssd1306_WriteString+0x44>
        }
        str++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e8      	bne.n	8003932 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	781b      	ldrb	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	460a      	mov	r2, r1
 8003976:	71fb      	strb	r3, [r7, #7]
 8003978:	4613      	mov	r3, r2
 800397a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <ssd1306_SetCursor+0x2c>)
 8003982:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003984:	79bb      	ldrb	r3, [r7, #6]
 8003986:	b29a      	uxth	r2, r3
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <ssd1306_SetCursor+0x2c>)
 800398a:	805a      	strh	r2, [r3, #2]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	200013d8 	.word	0x200013d8

0800399c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80039a6:	2381      	movs	r3, #129	@ 0x81
 80039a8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fdff 	bl	80035b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fdfb 	bl	80035b0 <ssd1306_WriteCommand>
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80039d4:	23af      	movs	r3, #175	@ 0xaf
 80039d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <ssd1306_SetDisplayOn+0x38>)
 80039da:	2201      	movs	r2, #1
 80039dc:	715a      	strb	r2, [r3, #5]
 80039de:	e004      	b.n	80039ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80039e0:	23ae      	movs	r3, #174	@ 0xae
 80039e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <ssd1306_SetDisplayOn+0x38>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fddf 	bl	80035b0 <ssd1306_WriteCommand>
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200013d8 	.word	0x200013d8

08003a00 <statemachine>:
extern osMutexId uartmutexHandle;




void statemachine(void){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af02      	add	r7, sp, #8

	switch(state){
 8003a06:	4b5d      	ldr	r3, [pc, #372]	@ (8003b7c <statemachine+0x17c>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 83e6 	bhi.w	80041dc <statemachine+0x7dc>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <statemachine+0x18>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003dd1 	.word	0x08003dd1
 8003a20:	08003f45 	.word	0x08003f45
 8003a24:	080041a3 	.word	0x080041a3

	case IDLE:
		ssd1306_Fill(Black);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff fe5d 	bl	80036e8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003a2e:	2120      	movs	r1, #32
 8003a30:	2020      	movs	r0, #32
 8003a32:	f7ff ff9b 	bl	800396c <ssd1306_SetCursor>
switch(screenindex){
 8003a36:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <statemachine+0x180>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d86f      	bhi.n	8003b1e <statemachine+0x11e>
 8003a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <statemachine+0x44>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a8d 	.word	0x08003a8d
 8003a4c:	08003ab7 	.word	0x08003ab7
 8003a50:	08003ae3 	.word	0x08003ae3
case 0:
	if (vbat <= 7){
 8003a54:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <statemachine+0x184>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
 8003a5a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8003a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	d900      	bls.n	8003a6a <statemachine+0x6a>
					ssd1306_WriteString("bat_low", Font_6x8, White);
					LED_Setcolour(255,0,0,0,0,0);
				}
	break;
 8003a68:	e059      	b.n	8003b1e <statemachine+0x11e>
					ssd1306_WriteString("bat_low", Font_6x8, White);
 8003a6a:	4a47      	ldr	r2, [pc, #284]	@ (8003b88 <statemachine+0x188>)
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	ca06      	ldmia	r2, {r1, r2}
 8003a70:	4846      	ldr	r0, [pc, #280]	@ (8003b8c <statemachine+0x18c>)
 8003a72:	f7ff ff55 	bl	8003920 <ssd1306_WriteString>
					LED_Setcolour(255,0,0,0,0,0);
 8003a76:	2300      	movs	r3, #0
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	20ff      	movs	r0, #255	@ 0xff
 8003a86:	f7ff f8e1 	bl	8002c4c <LED_Setcolour>
	break;
 8003a8a:	e048      	b.n	8003b1e <statemachine+0x11e>
case 1:
	if(flag_calib==0){
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <statemachine+0x190>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13f      	bne.n	8003b14 <statemachine+0x114>
		ssd1306_WriteString("alt_cal", Font_6x8, White);
 8003a94:	4a3c      	ldr	r2, [pc, #240]	@ (8003b88 <statemachine+0x188>)
 8003a96:	2301      	movs	r3, #1
 8003a98:	ca06      	ldmia	r2, {r1, r2}
 8003a9a:	483e      	ldr	r0, [pc, #248]	@ (8003b94 <statemachine+0x194>)
 8003a9c:	f7ff ff40 	bl	8003920 <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,0,0);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	21ff      	movs	r1, #255	@ 0xff
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7ff f8cc 	bl	8002c4c <LED_Setcolour>
				}
	break;
 8003ab4:	e02e      	b.n	8003b14 <statemachine+0x114>
case 2:
	if (GNSSData.fixType <= 2){
 8003ab6:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <statemachine+0x198>)
 8003ab8:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d82b      	bhi.n	8003b18 <statemachine+0x118>
		ssd1306_WriteString("gps_fix", Font_6x8, White);
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <statemachine+0x188>)
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	ca06      	ldmia	r2, {r1, r2}
 8003ac6:	4835      	ldr	r0, [pc, #212]	@ (8003b9c <statemachine+0x19c>)
 8003ac8:	f7ff ff2a 	bl	8003920 <ssd1306_WriteString>
		LED_Setcolour(255,255,0,0,0,0);
 8003acc:	2300      	movs	r3, #0
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	21ff      	movs	r1, #255	@ 0xff
 8003ada:	20ff      	movs	r0, #255	@ 0xff
 8003adc:	f7ff f8b6 	bl	8002c4c <LED_Setcolour>
				}

	break;
 8003ae0:	e01a      	b.n	8003b18 <statemachine+0x118>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 8003ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae6:	482e      	ldr	r0, [pc, #184]	@ (8003ba0 <statemachine+0x1a0>)
 8003ae8:	f004 fd0e 	bl	8008508 <HAL_GPIO_ReadPin>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d114      	bne.n	8003b1c <statemachine+0x11c>
		ssd1306_WriteString("TELEPWR", Font_6x8, White);
 8003af2:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <statemachine+0x188>)
 8003af4:	2301      	movs	r3, #1
 8003af6:	ca06      	ldmia	r2, {r1, r2}
 8003af8:	482a      	ldr	r0, [pc, #168]	@ (8003ba4 <statemachine+0x1a4>)
 8003afa:	f7ff ff11 	bl	8003920 <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,0,0);
 8003afe:	2300      	movs	r3, #0
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	22ff      	movs	r2, #255	@ 0xff
 8003b0a:	21ff      	movs	r1, #255	@ 0xff
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7ff f89d 	bl	8002c4c <LED_Setcolour>
	}
	break;
 8003b12:	e003      	b.n	8003b1c <statemachine+0x11c>
	break;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <statemachine+0x11e>
	break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <statemachine+0x11e>
	break;
 8003b1c:	bf00      	nop
}


			ssd1306_SetCursor(32, 40);
 8003b1e:	2128      	movs	r1, #40	@ 0x28
 8003b20:	2020      	movs	r0, #32
 8003b22:	f7ff ff23 	bl	800396c <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"sat:%d",GNSSData.numSV);
 8003b26:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <statemachine+0x198>)
 8003b28:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <statemachine+0x1a8>)
 8003b2e:	2132      	movs	r1, #50	@ 0x32
 8003b30:	481e      	ldr	r0, [pc, #120]	@ (8003bac <statemachine+0x1ac>)
 8003b32:	f010 ff77 	bl	8014a24 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003b36:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <statemachine+0x188>)
 8003b38:	2301      	movs	r3, #1
 8003b3a:	ca06      	ldmia	r2, {r1, r2}
 8003b3c:	481b      	ldr	r0, [pc, #108]	@ (8003bac <statemachine+0x1ac>)
 8003b3e:	f7ff feef 	bl	8003920 <ssd1306_WriteString>
			ssd1306_SetCursor(32, 48);
 8003b42:	2130      	movs	r1, #48	@ 0x30
 8003b44:	2020      	movs	r0, #32
 8003b46:	f7ff ff11 	bl	800396c <ssd1306_SetCursor>
		if(flag_calib==0){
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <statemachine+0x190>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d132      	bne.n	8003bb8 <statemachine+0x1b8>
			snprintf((char *)screenbuffer,50,"Hba:%0.2f",myDatabmp581.altitude);
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <statemachine+0x1b0>)
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fd1e 	bl	8000598 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	e9cd 2300 	strd	r2, r3, [sp]
 8003b64:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <statemachine+0x1b4>)
 8003b66:	2132      	movs	r1, #50	@ 0x32
 8003b68:	4810      	ldr	r0, [pc, #64]	@ (8003bac <statemachine+0x1ac>)
 8003b6a:	f010 ff5b 	bl	8014a24 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003b6e:	4a06      	ldr	r2, [pc, #24]	@ (8003b88 <statemachine+0x188>)
 8003b70:	2301      	movs	r3, #1
 8003b72:	ca06      	ldmia	r2, {r1, r2}
 8003b74:	480d      	ldr	r0, [pc, #52]	@ (8003bac <statemachine+0x1ac>)
 8003b76:	f7ff fed3 	bl	8003920 <ssd1306_WriteString>
 8003b7a:	e031      	b.n	8003be0 <statemachine+0x1e0>
 8003b7c:	20000f3c 	.word	0x20000f3c
 8003b80:	20001414 	.word	0x20001414
 8003b84:	20000c2c 	.word	0x20000c2c
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	08019a5c 	.word	0x08019a5c
 8003b90:	20000f48 	.word	0x20000f48
 8003b94:	08019a64 	.word	0x08019a64
 8003b98:	20000d28 	.word	0x20000d28
 8003b9c:	08019a6c 	.word	0x08019a6c
 8003ba0:	48000400 	.word	0x48000400
 8003ba4:	08019a74 	.word	0x08019a74
 8003ba8:	08019a7c 	.word	0x08019a7c
 8003bac:	200013e0 	.word	0x200013e0
 8003bb0:	20000798 	.word	0x20000798
 8003bb4:	08019a84 	.word	0x08019a84
			}
		else{
			snprintf((char *)screenbuffer,50,"Hre:%0.2f",hauteur_relative);
 8003bb8:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <statemachine+0x388>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fceb 	bl	8000598 <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	e9cd 2300 	strd	r2, r3, [sp]
 8003bca:	4a70      	ldr	r2, [pc, #448]	@ (8003d8c <statemachine+0x38c>)
 8003bcc:	2132      	movs	r1, #50	@ 0x32
 8003bce:	4870      	ldr	r0, [pc, #448]	@ (8003d90 <statemachine+0x390>)
 8003bd0:	f010 ff28 	bl	8014a24 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003bd4:	4a6f      	ldr	r2, [pc, #444]	@ (8003d94 <statemachine+0x394>)
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	ca06      	ldmia	r2, {r1, r2}
 8003bda:	486d      	ldr	r0, [pc, #436]	@ (8003d90 <statemachine+0x390>)
 8003bdc:	f7ff fea0 	bl	8003920 <ssd1306_WriteString>
		}

#ifdef PARTIE_BAS
			ssd1306_SetCursor(32, 56);
 8003be0:	2138      	movs	r1, #56	@ 0x38
 8003be2:	2020      	movs	r0, #32
 8003be4:	f7ff fec2 	bl	800396c <ssd1306_SetCursor>
			if(GNSSData.fixType>=3){
 8003be8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d98 <statemachine+0x398>)
 8003bea:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d913      	bls.n	8003c1a <statemachine+0x21a>
			snprintf((char *)screenbuffer,50,"d:%0.2f",distance_entre_module);
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <statemachine+0x39c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fcce 	bl	8000598 <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	e9cd 2300 	strd	r2, r3, [sp]
 8003c04:	4a66      	ldr	r2, [pc, #408]	@ (8003da0 <statemachine+0x3a0>)
 8003c06:	2132      	movs	r1, #50	@ 0x32
 8003c08:	4861      	ldr	r0, [pc, #388]	@ (8003d90 <statemachine+0x390>)
 8003c0a:	f010 ff0b 	bl	8014a24 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003c0e:	4a61      	ldr	r2, [pc, #388]	@ (8003d94 <statemachine+0x394>)
 8003c10:	2301      	movs	r3, #1
 8003c12:	ca06      	ldmia	r2, {r1, r2}
 8003c14:	485e      	ldr	r0, [pc, #376]	@ (8003d90 <statemachine+0x390>)
 8003c16:	f7ff fe83 	bl	8003920 <ssd1306_WriteString>
#endif




delaycounterforscreenindex++;
 8003c1a:	4b62      	ldr	r3, [pc, #392]	@ (8003da4 <statemachine+0x3a4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	4a60      	ldr	r2, [pc, #384]	@ (8003da4 <statemachine+0x3a4>)
 8003c22:	6013      	str	r3, [r2, #0]
if(delaycounterforscreenindex>=5){
 8003c24:	4b5f      	ldr	r3, [pc, #380]	@ (8003da4 <statemachine+0x3a4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	dd07      	ble.n	8003c3c <statemachine+0x23c>
	delaycounterforscreenindex=0;
 8003c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8003da4 <statemachine+0x3a4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
	screenindex++;
 8003c32:	4b5d      	ldr	r3, [pc, #372]	@ (8003da8 <statemachine+0x3a8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a5b      	ldr	r2, [pc, #364]	@ (8003da8 <statemachine+0x3a8>)
 8003c3a:	6013      	str	r3, [r2, #0]
}

if(screenindex>3){
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8003da8 <statemachine+0x3a8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	dd02      	ble.n	8003c4a <statemachine+0x24a>
	screenindex=0;
 8003c44:	4b58      	ldr	r3, [pc, #352]	@ (8003da8 <statemachine+0x3a8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
		  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
}
#endif
#ifdef PARTIE_BAS
if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003c4a:	4b58      	ldr	r3, [pc, #352]	@ (8003dac <statemachine+0x3ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00d fb06 	bl	8011264 <osMutexWait>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d138      	bne.n	8003cd0 <statemachine+0x2d0>
{
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d98 <statemachine+0x398>)
 8003c60:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003c64:	4b4c      	ldr	r3, [pc, #304]	@ (8003d98 <statemachine+0x398>)
 8003c66:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d98 <statemachine+0x398>)
 8003c6c:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003c70:	4b45      	ldr	r3, [pc, #276]	@ (8003d88 <statemachine+0x388>)
 8003c72:	ed93 6a00 	vldr	s12, [r3]
 8003c76:	4b48      	ldr	r3, [pc, #288]	@ (8003d98 <statemachine+0x398>)
 8003c78:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003c7c:	4b46      	ldr	r3, [pc, #280]	@ (8003d98 <statemachine+0x398>)
 8003c7e:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003c82:	4b46      	ldr	r3, [pc, #280]	@ (8003d9c <statemachine+0x39c>)
 8003c84:	ed93 3a00 	vldr	s6, [r3]
 8003c88:	4b49      	ldr	r3, [pc, #292]	@ (8003db0 <statemachine+0x3b0>)
 8003c8a:	edd3 3a03 	vldr	s7, [r3, #12]
 8003c8e:	4b49      	ldr	r3, [pc, #292]	@ (8003db4 <statemachine+0x3b4>)
 8003c90:	ed93 4a00 	vldr	s8, [r3]
 8003c94:	4b47      	ldr	r3, [pc, #284]	@ (8003db4 <statemachine+0x3b4>)
 8003c96:	edd3 4a01 	vldr	s9, [r3, #4]
 8003c9a:	4b46      	ldr	r3, [pc, #280]	@ (8003db4 <statemachine+0x3b4>)
 8003c9c:	ed93 5a02 	vldr	s10, [r3, #8]
 8003ca0:	4b45      	ldr	r3, [pc, #276]	@ (8003db8 <statemachine+0x3b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	eeb0 2a65 	vmov.f32	s4, s11
 8003caa:	eef0 1a46 	vmov.f32	s3, s12
 8003cae:	eeb0 1a66 	vmov.f32	s2, s13
 8003cb2:	eef0 0a47 	vmov.f32	s1, s14
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	2310      	movs	r3, #16
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	2182      	movs	r1, #130	@ 0x82
 8003cc0:	483e      	ldr	r0, [pc, #248]	@ (8003dbc <statemachine+0x3bc>)
 8003cc2:	f000 fe79 	bl	80049b8 <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
						  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 8003cc6:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <statemachine+0x3ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00d fb18 	bl	8011300 <osMutexRelease>
}
vTaskDelay(pdMS_TO_TICKS(25));
 8003cd0:	2019      	movs	r0, #25
 8003cd2:	f00e fc1d 	bl	8012510 <vTaskDelay>

if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003cd6:	4b35      	ldr	r3, [pc, #212]	@ (8003dac <statemachine+0x3ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f04f 31ff 	mov.w	r1, #4294967295
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f00d fac0 	bl	8011264 <osMutexWait>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d138      	bne.n	8003d5c <statemachine+0x35c>
{
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003cea:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <statemachine+0x398>)
 8003cec:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003cf0:	4b29      	ldr	r3, [pc, #164]	@ (8003d98 <statemachine+0x398>)
 8003cf2:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003cf6:	4b28      	ldr	r3, [pc, #160]	@ (8003d98 <statemachine+0x398>)
 8003cf8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003cfc:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <statemachine+0x388>)
 8003cfe:	ed93 6a00 	vldr	s12, [r3]
 8003d02:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <statemachine+0x398>)
 8003d04:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003d08:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <statemachine+0x398>)
 8003d0a:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003d0e:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <statemachine+0x39c>)
 8003d10:	ed93 3a00 	vldr	s6, [r3]
 8003d14:	4b26      	ldr	r3, [pc, #152]	@ (8003db0 <statemachine+0x3b0>)
 8003d16:	edd3 3a03 	vldr	s7, [r3, #12]
 8003d1a:	4b26      	ldr	r3, [pc, #152]	@ (8003db4 <statemachine+0x3b4>)
 8003d1c:	ed93 4a00 	vldr	s8, [r3]
 8003d20:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <statemachine+0x3b4>)
 8003d22:	edd3 4a01 	vldr	s9, [r3, #4]
 8003d26:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <statemachine+0x3b4>)
 8003d28:	ed93 5a02 	vldr	s10, [r3, #8]
 8003d2c:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <statemachine+0x3b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	eeb0 2a65 	vmov.f32	s4, s11
 8003d36:	eef0 1a46 	vmov.f32	s3, s12
 8003d3a:	eeb0 1a66 	vmov.f32	s2, s13
 8003d3e:	eef0 0a47 	vmov.f32	s1, s14
 8003d42:	eeb0 0a67 	vmov.f32	s0, s15
 8003d46:	2310      	movs	r3, #16
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2182      	movs	r1, #130	@ 0x82
 8003d4c:	481b      	ldr	r0, [pc, #108]	@ (8003dbc <statemachine+0x3bc>)
 8003d4e:	f000 fe33 	bl	80049b8 <create_and_send_payload>
		  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
		  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 8003d52:	4b16      	ldr	r3, [pc, #88]	@ (8003dac <statemachine+0x3ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f00d fad2 	bl	8011300 <osMutexRelease>
}
#endif


if((flag_drop==1) && (flag_calib==1)){
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <statemachine+0x3c0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 8236 	bne.w	80041d2 <statemachine+0x7d2>
 8003d66:	4b17      	ldr	r3, [pc, #92]	@ (8003dc4 <statemachine+0x3c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	f040 8231 	bne.w	80041d2 <statemachine+0x7d2>

				state++;
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <statemachine+0x3c8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <statemachine+0x3c8>)
 8003d7a:	701a      	strb	r2, [r3, #0]
				cpt_tps_chute=timeindex;
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003db8 <statemachine+0x3b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <statemachine+0x3cc>)
 8003d82:	6013      	str	r3, [r2, #0]
			}

		break;
 8003d84:	e225      	b.n	80041d2 <statemachine+0x7d2>
 8003d86:	bf00      	nop
 8003d88:	20000f60 	.word	0x20000f60
 8003d8c:	08019a90 	.word	0x08019a90
 8003d90:	200013e0 	.word	0x200013e0
 8003d94:	20000008 	.word	0x20000008
 8003d98:	20000d28 	.word	0x20000d28
 8003d9c:	20000308 	.word	0x20000308
 8003da0:	08019a9c 	.word	0x08019a9c
 8003da4:	20001418 	.word	0x20001418
 8003da8:	20001414 	.word	0x20001414
 8003dac:	2000035c 	.word	0x2000035c
 8003db0:	20000798 	.word	0x20000798
 8003db4:	20000778 	.word	0x20000778
 8003db8:	20000f70 	.word	0x20000f70
 8003dbc:	20000408 	.word	0x20000408
 8003dc0:	20000f40 	.word	0x20000f40
 8003dc4:	20000f48 	.word	0x20000f48
 8003dc8:	20000f3c 	.word	0x20000f3c
 8003dcc:	20000f54 	.word	0x20000f54

	case PRESEPARATION:
		ssd1306_Fill(Black);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7ff fc89 	bl	80036e8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003dd6:	2120      	movs	r1, #32
 8003dd8:	2020      	movs	r0, #32
 8003dda:	f7ff fdc7 	bl	800396c <ssd1306_SetCursor>
		ssd1306_WriteString("PRE", Font_16x24, White);
 8003dde:	4ab8      	ldr	r2, [pc, #736]	@ (80040c0 <statemachine+0x6c0>)
 8003de0:	2301      	movs	r3, #1
 8003de2:	ca06      	ldmia	r2, {r1, r2}
 8003de4:	48b7      	ldr	r0, [pc, #732]	@ (80040c4 <statemachine+0x6c4>)
 8003de6:	f7ff fd9b 	bl	8003920 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003dea:	2138      	movs	r1, #56	@ 0x38
 8003dec:	2020      	movs	r0, #32
 8003dee:	f7ff fdbd 	bl	800396c <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"h=%f",hauteur_relative);
 8003df2:	4bb5      	ldr	r3, [pc, #724]	@ (80040c8 <statemachine+0x6c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fbce 	bl	8000598 <__aeabi_f2d>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	e9cd 2300 	strd	r2, r3, [sp]
 8003e04:	4ab1      	ldr	r2, [pc, #708]	@ (80040cc <statemachine+0x6cc>)
 8003e06:	2132      	movs	r1, #50	@ 0x32
 8003e08:	48b1      	ldr	r0, [pc, #708]	@ (80040d0 <statemachine+0x6d0>)
 8003e0a:	f010 fe0b 	bl	8014a24 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003e0e:	4ab1      	ldr	r2, [pc, #708]	@ (80040d4 <statemachine+0x6d4>)
 8003e10:	2301      	movs	r3, #1
 8003e12:	ca06      	ldmia	r2, {r1, r2}
 8003e14:	48ae      	ldr	r0, [pc, #696]	@ (80040d0 <statemachine+0x6d0>)
 8003e16:	f7ff fd83 	bl	8003920 <ssd1306_WriteString>
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
		}
#endif
#ifdef PARTIE_BAS
		if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003e1a:	4baf      	ldr	r3, [pc, #700]	@ (80040d8 <statemachine+0x6d8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00d fa1e 	bl	8011264 <osMutexWait>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d138      	bne.n	8003ea0 <statemachine+0x4a0>
		{
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003e2e:	4bab      	ldr	r3, [pc, #684]	@ (80040dc <statemachine+0x6dc>)
 8003e30:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003e34:	4ba9      	ldr	r3, [pc, #676]	@ (80040dc <statemachine+0x6dc>)
 8003e36:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003e3a:	4ba8      	ldr	r3, [pc, #672]	@ (80040dc <statemachine+0x6dc>)
 8003e3c:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003e40:	4ba1      	ldr	r3, [pc, #644]	@ (80040c8 <statemachine+0x6c8>)
 8003e42:	ed93 6a00 	vldr	s12, [r3]
 8003e46:	4ba5      	ldr	r3, [pc, #660]	@ (80040dc <statemachine+0x6dc>)
 8003e48:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003e4c:	4ba3      	ldr	r3, [pc, #652]	@ (80040dc <statemachine+0x6dc>)
 8003e4e:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003e52:	4ba3      	ldr	r3, [pc, #652]	@ (80040e0 <statemachine+0x6e0>)
 8003e54:	ed93 3a00 	vldr	s6, [r3]
 8003e58:	4ba2      	ldr	r3, [pc, #648]	@ (80040e4 <statemachine+0x6e4>)
 8003e5a:	edd3 3a03 	vldr	s7, [r3, #12]
 8003e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80040e8 <statemachine+0x6e8>)
 8003e60:	ed93 4a00 	vldr	s8, [r3]
 8003e64:	4ba0      	ldr	r3, [pc, #640]	@ (80040e8 <statemachine+0x6e8>)
 8003e66:	edd3 4a01 	vldr	s9, [r3, #4]
 8003e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80040e8 <statemachine+0x6e8>)
 8003e6c:	ed93 5a02 	vldr	s10, [r3, #8]
 8003e70:	4b9e      	ldr	r3, [pc, #632]	@ (80040ec <statemachine+0x6ec>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	eeb0 2a65 	vmov.f32	s4, s11
 8003e7a:	eef0 1a46 	vmov.f32	s3, s12
 8003e7e:	eeb0 1a66 	vmov.f32	s2, s13
 8003e82:	eef0 0a47 	vmov.f32	s1, s14
 8003e86:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	2182      	movs	r1, #130	@ 0x82
 8003e90:	4897      	ldr	r0, [pc, #604]	@ (80040f0 <statemachine+0x6f0>)
 8003e92:	f000 fd91 	bl	80049b8 <create_and_send_payload>
								  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
								  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 8003e96:	4b90      	ldr	r3, [pc, #576]	@ (80040d8 <statemachine+0x6d8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f00d fa30 	bl	8011300 <osMutexRelease>
		}
		vTaskDelay(pdMS_TO_TICKS(25));
 8003ea0:	2019      	movs	r0, #25
 8003ea2:	f00e fb35 	bl	8012510 <vTaskDelay>
		if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003ea6:	4b8c      	ldr	r3, [pc, #560]	@ (80040d8 <statemachine+0x6d8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f00d f9d8 	bl	8011264 <osMutexWait>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d138      	bne.n	8003f2c <statemachine+0x52c>
		{
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003eba:	4b88      	ldr	r3, [pc, #544]	@ (80040dc <statemachine+0x6dc>)
 8003ebc:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003ec0:	4b86      	ldr	r3, [pc, #536]	@ (80040dc <statemachine+0x6dc>)
 8003ec2:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003ec6:	4b85      	ldr	r3, [pc, #532]	@ (80040dc <statemachine+0x6dc>)
 8003ec8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80040c8 <statemachine+0x6c8>)
 8003ece:	ed93 6a00 	vldr	s12, [r3]
 8003ed2:	4b82      	ldr	r3, [pc, #520]	@ (80040dc <statemachine+0x6dc>)
 8003ed4:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003ed8:	4b80      	ldr	r3, [pc, #512]	@ (80040dc <statemachine+0x6dc>)
 8003eda:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003ede:	4b80      	ldr	r3, [pc, #512]	@ (80040e0 <statemachine+0x6e0>)
 8003ee0:	ed93 3a00 	vldr	s6, [r3]
 8003ee4:	4b7f      	ldr	r3, [pc, #508]	@ (80040e4 <statemachine+0x6e4>)
 8003ee6:	edd3 3a03 	vldr	s7, [r3, #12]
 8003eea:	4b7f      	ldr	r3, [pc, #508]	@ (80040e8 <statemachine+0x6e8>)
 8003eec:	ed93 4a00 	vldr	s8, [r3]
 8003ef0:	4b7d      	ldr	r3, [pc, #500]	@ (80040e8 <statemachine+0x6e8>)
 8003ef2:	edd3 4a01 	vldr	s9, [r3, #4]
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80040e8 <statemachine+0x6e8>)
 8003ef8:	ed93 5a02 	vldr	s10, [r3, #8]
 8003efc:	4b7b      	ldr	r3, [pc, #492]	@ (80040ec <statemachine+0x6ec>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	eeb0 2a65 	vmov.f32	s4, s11
 8003f06:	eef0 1a46 	vmov.f32	s3, s12
 8003f0a:	eeb0 1a66 	vmov.f32	s2, s13
 8003f0e:	eef0 0a47 	vmov.f32	s1, s14
 8003f12:	eeb0 0a67 	vmov.f32	s0, s15
 8003f16:	2310      	movs	r3, #16
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2182      	movs	r1, #130	@ 0x82
 8003f1c:	4874      	ldr	r0, [pc, #464]	@ (80040f0 <statemachine+0x6f0>)
 8003f1e:	f000 fd4b 	bl	80049b8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 8003f22:	4b6d      	ldr	r3, [pc, #436]	@ (80040d8 <statemachine+0x6d8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f00d f9ea 	bl	8011300 <osMutexRelease>
		}
#endif

		if(flag_separation==1){
 8003f2c:	4b71      	ldr	r3, [pc, #452]	@ (80040f4 <statemachine+0x6f4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f040 8150 	bne.w	80041d6 <statemachine+0x7d6>
			state++;
 8003f36:	4b70      	ldr	r3, [pc, #448]	@ (80040f8 <statemachine+0x6f8>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80040f8 <statemachine+0x6f8>)
 8003f40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003f42:	e148      	b.n	80041d6 <statemachine+0x7d6>

	case POSTSEPARATION:
		ssd1306_Fill(Black);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7ff fbcf 	bl	80036e8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003f4a:	2120      	movs	r1, #32
 8003f4c:	2020      	movs	r0, #32
 8003f4e:	f7ff fd0d 	bl	800396c <ssd1306_SetCursor>
		ssd1306_WriteString("POST", Font_16x24, White);
 8003f52:	4a5b      	ldr	r2, [pc, #364]	@ (80040c0 <statemachine+0x6c0>)
 8003f54:	2301      	movs	r3, #1
 8003f56:	ca06      	ldmia	r2, {r1, r2}
 8003f58:	4868      	ldr	r0, [pc, #416]	@ (80040fc <statemachine+0x6fc>)
 8003f5a:	f7ff fce1 	bl	8003920 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003f5e:	2138      	movs	r1, #56	@ 0x38
 8003f60:	2020      	movs	r0, #32
 8003f62:	f7ff fd03 	bl	800396c <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"tps=%lu",(timeindex-cpt_tps_chute));
 8003f66:	4b61      	ldr	r3, [pc, #388]	@ (80040ec <statemachine+0x6ec>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b65      	ldr	r3, [pc, #404]	@ (8004100 <statemachine+0x700>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	4a64      	ldr	r2, [pc, #400]	@ (8004104 <statemachine+0x704>)
 8003f72:	2132      	movs	r1, #50	@ 0x32
 8003f74:	4856      	ldr	r0, [pc, #344]	@ (80040d0 <statemachine+0x6d0>)
 8003f76:	f010 fd55 	bl	8014a24 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003f7a:	4a56      	ldr	r2, [pc, #344]	@ (80040d4 <statemachine+0x6d4>)
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	ca06      	ldmia	r2, {r1, r2}
 8003f80:	4853      	ldr	r0, [pc, #332]	@ (80040d0 <statemachine+0x6d0>)
 8003f82:	f7ff fccd 	bl	8003920 <ssd1306_WriteString>
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
		}
		#endif
#ifdef PARTIE_BAS
		if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8003f86:	4b54      	ldr	r3, [pc, #336]	@ (80040d8 <statemachine+0x6d8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f00d f968 	bl	8011264 <osMutexWait>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d138      	bne.n	800400c <statemachine+0x60c>
		{
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003f9a:	4b50      	ldr	r3, [pc, #320]	@ (80040dc <statemachine+0x6dc>)
 8003f9c:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80040dc <statemachine+0x6dc>)
 8003fa2:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80040dc <statemachine+0x6dc>)
 8003fa8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003fac:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <statemachine+0x6c8>)
 8003fae:	ed93 6a00 	vldr	s12, [r3]
 8003fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80040dc <statemachine+0x6dc>)
 8003fb4:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003fb8:	4b48      	ldr	r3, [pc, #288]	@ (80040dc <statemachine+0x6dc>)
 8003fba:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003fbe:	4b48      	ldr	r3, [pc, #288]	@ (80040e0 <statemachine+0x6e0>)
 8003fc0:	ed93 3a00 	vldr	s6, [r3]
 8003fc4:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <statemachine+0x6e4>)
 8003fc6:	edd3 3a03 	vldr	s7, [r3, #12]
 8003fca:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <statemachine+0x6e8>)
 8003fcc:	ed93 4a00 	vldr	s8, [r3]
 8003fd0:	4b45      	ldr	r3, [pc, #276]	@ (80040e8 <statemachine+0x6e8>)
 8003fd2:	edd3 4a01 	vldr	s9, [r3, #4]
 8003fd6:	4b44      	ldr	r3, [pc, #272]	@ (80040e8 <statemachine+0x6e8>)
 8003fd8:	ed93 5a02 	vldr	s10, [r3, #8]
 8003fdc:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <statemachine+0x6ec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	eeb0 2a65 	vmov.f32	s4, s11
 8003fe6:	eef0 1a46 	vmov.f32	s3, s12
 8003fea:	eeb0 1a66 	vmov.f32	s2, s13
 8003fee:	eef0 0a47 	vmov.f32	s1, s14
 8003ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	2182      	movs	r1, #130	@ 0x82
 8003ffc:	483c      	ldr	r0, [pc, #240]	@ (80040f0 <statemachine+0x6f0>)
 8003ffe:	f000 fcdb 	bl	80049b8 <create_and_send_payload>
								  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
								  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 8004002:	4b35      	ldr	r3, [pc, #212]	@ (80040d8 <statemachine+0x6d8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f00d f97a 	bl	8011300 <osMutexRelease>
		}
		vTaskDelay(pdMS_TO_TICKS(25));
 800400c:	2019      	movs	r0, #25
 800400e:	f00e fa7f 	bl	8012510 <vTaskDelay>

		if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 8004012:	4b31      	ldr	r3, [pc, #196]	@ (80040d8 <statemachine+0x6d8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f04f 31ff 	mov.w	r1, #4294967295
 800401a:	4618      	mov	r0, r3
 800401c:	f00d f922 	bl	8011264 <osMutexWait>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d138      	bne.n	8004098 <statemachine+0x698>
		{
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8004026:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <statemachine+0x6dc>)
 8004028:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800402c:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <statemachine+0x6dc>)
 800402e:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8004032:	4b2a      	ldr	r3, [pc, #168]	@ (80040dc <statemachine+0x6dc>)
 8004034:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8004038:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <statemachine+0x6c8>)
 800403a:	ed93 6a00 	vldr	s12, [r3]
 800403e:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <statemachine+0x6dc>)
 8004040:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8004044:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <statemachine+0x6dc>)
 8004046:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 800404a:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <statemachine+0x6e0>)
 800404c:	ed93 3a00 	vldr	s6, [r3]
 8004050:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <statemachine+0x6e4>)
 8004052:	edd3 3a03 	vldr	s7, [r3, #12]
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <statemachine+0x6e8>)
 8004058:	ed93 4a00 	vldr	s8, [r3]
 800405c:	4b22      	ldr	r3, [pc, #136]	@ (80040e8 <statemachine+0x6e8>)
 800405e:	edd3 4a01 	vldr	s9, [r3, #4]
 8004062:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <statemachine+0x6e8>)
 8004064:	ed93 5a02 	vldr	s10, [r3, #8]
 8004068:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <statemachine+0x6ec>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	eeb0 2a65 	vmov.f32	s4, s11
 8004072:	eef0 1a46 	vmov.f32	s3, s12
 8004076:	eeb0 1a66 	vmov.f32	s2, s13
 800407a:	eef0 0a47 	vmov.f32	s1, s14
 800407e:	eeb0 0a67 	vmov.f32	s0, s15
 8004082:	2310      	movs	r3, #16
 8004084:	2201      	movs	r2, #1
 8004086:	2182      	movs	r1, #130	@ 0x82
 8004088:	4819      	ldr	r0, [pc, #100]	@ (80040f0 <statemachine+0x6f0>)
 800408a:	f000 fc95 	bl	80049b8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
		osMutexRelease(uartmutexHandle);  // Relâche immédiatement après envoi
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <statemachine+0x6d8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f00d f934 	bl	8011300 <osMutexRelease>
		}
#endif

		if((timeindex-cpt_tps_chute)>=120){
 8004098:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <statemachine+0x6ec>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <statemachine+0x700>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b77      	cmp	r3, #119	@ 0x77
 80040a4:	f240 8099 	bls.w	80041da <statemachine+0x7da>
			state++;
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <statemachine+0x6f8>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <statemachine+0x6f8>)
 80040b2:	701a      	strb	r2, [r3, #0]
			flag_fin=1;
 80040b4:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <statemachine+0x708>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
#ifdef PARTIE_BAS
for(int i=0;i<4;i++){
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e06c      	b.n	800419a <statemachine+0x79a>
 80040c0:	20000018 	.word	0x20000018
 80040c4:	08019aa4 	.word	0x08019aa4
 80040c8:	20000f60 	.word	0x20000f60
 80040cc:	08019aa8 	.word	0x08019aa8
 80040d0:	200013e0 	.word	0x200013e0
 80040d4:	20000008 	.word	0x20000008
 80040d8:	2000035c 	.word	0x2000035c
 80040dc:	20000d28 	.word	0x20000d28
 80040e0:	20000308 	.word	0x20000308
 80040e4:	20000798 	.word	0x20000798
 80040e8:	20000778 	.word	0x20000778
 80040ec:	20000f70 	.word	0x20000f70
 80040f0:	20000408 	.word	0x20000408
 80040f4:	20000f44 	.word	0x20000f44
 80040f8:	20000f3c 	.word	0x20000f3c
 80040fc:	08019ab0 	.word	0x08019ab0
 8004100:	20000f54 	.word	0x20000f54
 8004104:	08019ab8 	.word	0x08019ab8
 8004108:	20000f58 	.word	0x20000f58
 800410c:	00000000 	.word	0x00000000
			create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	ed1f 5a03 	vldr	s10, [pc, #-12]	@ 800410c <statemachine+0x70c>
 8004118:	ed5f 4a04 	vldr	s9, [pc, #-16]	@ 800410c <statemachine+0x70c>
 800411c:	ed1f 4a05 	vldr	s8, [pc, #-20]	@ 800410c <statemachine+0x70c>
 8004120:	ed5f 3a06 	vldr	s7, [pc, #-24]	@ 800410c <statemachine+0x70c>
 8004124:	ed1f 3a07 	vldr	s6, [pc, #-28]	@ 800410c <statemachine+0x70c>
 8004128:	ed5f 2a08 	vldr	s5, [pc, #-32]	@ 800410c <statemachine+0x70c>
 800412c:	ed1f 2a09 	vldr	s4, [pc, #-36]	@ 800410c <statemachine+0x70c>
 8004130:	ed5f 1a0a 	vldr	s3, [pc, #-40]	@ 800410c <statemachine+0x70c>
 8004134:	ed1f 1a0b 	vldr	s2, [pc, #-44]	@ 800410c <statemachine+0x70c>
 8004138:	ed5f 0a0c 	vldr	s1, [pc, #-48]	@ 800410c <statemachine+0x70c>
 800413c:	ed1f 0a0d 	vldr	s0, [pc, #-52]	@ 800410c <statemachine+0x70c>
 8004140:	2320      	movs	r3, #32
 8004142:	2210      	movs	r2, #16
 8004144:	2182      	movs	r1, #130	@ 0x82
 8004146:	4827      	ldr	r0, [pc, #156]	@ (80041e4 <statemachine+0x7e4>)
 8004148:	f000 fc36 	bl	80049b8 <create_and_send_payload>
			vTaskDelay(pdMS_TO_TICKS(5));
 800414c:	2005      	movs	r0, #5
 800414e:	f00e f9df 	bl	8012510 <vTaskDelay>
			create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8004152:	2300      	movs	r3, #0
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	ed9f 5a24 	vldr	s10, [pc, #144]	@ 80041e8 <statemachine+0x7e8>
 800415a:	eddf 4a23 	vldr	s9, [pc, #140]	@ 80041e8 <statemachine+0x7e8>
 800415e:	ed9f 4a22 	vldr	s8, [pc, #136]	@ 80041e8 <statemachine+0x7e8>
 8004162:	eddf 3a21 	vldr	s7, [pc, #132]	@ 80041e8 <statemachine+0x7e8>
 8004166:	ed9f 3a20 	vldr	s6, [pc, #128]	@ 80041e8 <statemachine+0x7e8>
 800416a:	eddf 2a1f 	vldr	s5, [pc, #124]	@ 80041e8 <statemachine+0x7e8>
 800416e:	ed9f 2a1e 	vldr	s4, [pc, #120]	@ 80041e8 <statemachine+0x7e8>
 8004172:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 80041e8 <statemachine+0x7e8>
 8004176:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 80041e8 <statemachine+0x7e8>
 800417a:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80041e8 <statemachine+0x7e8>
 800417e:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80041e8 <statemachine+0x7e8>
 8004182:	2320      	movs	r3, #32
 8004184:	2201      	movs	r2, #1
 8004186:	2182      	movs	r1, #130	@ 0x82
 8004188:	4816      	ldr	r0, [pc, #88]	@ (80041e4 <statemachine+0x7e4>)
 800418a:	f000 fc15 	bl	80049b8 <create_and_send_payload>
			vTaskDelay(pdMS_TO_TICKS(5));
 800418e:	2005      	movs	r0, #5
 8004190:	f00e f9be 	bl	8012510 <vTaskDelay>
for(int i=0;i<4;i++){
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b03      	cmp	r3, #3
 800419e:	ddb7      	ble.n	8004110 <statemachine+0x710>





		break;
 80041a0:	e01b      	b.n	80041da <statemachine+0x7da>
	case FIN:

		ssd1306_Fill(Black);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7ff faa0 	bl	80036e8 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 80041a8:	2120      	movs	r1, #32
 80041aa:	2020      	movs	r0, #32
 80041ac:	f7ff fbde 	bl	800396c <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 80041b0:	4a0e      	ldr	r2, [pc, #56]	@ (80041ec <statemachine+0x7ec>)
 80041b2:	2301      	movs	r3, #1
 80041b4:	ca06      	ldmia	r2, {r1, r2}
 80041b6:	480e      	ldr	r0, [pc, #56]	@ (80041f0 <statemachine+0x7f0>)
 80041b8:	f7ff fbb2 	bl	8003920 <ssd1306_WriteString>

		LED_Setcolour(0,255,0,0,255,0);
 80041bc:	2300      	movs	r3, #0
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	23ff      	movs	r3, #255	@ 0xff
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	2200      	movs	r2, #0
 80041c8:	21ff      	movs	r1, #255	@ 0xff
 80041ca:	2000      	movs	r0, #0
 80041cc:	f7fe fd3e 	bl	8002c4c <LED_Setcolour>

		break;
 80041d0:	e004      	b.n	80041dc <statemachine+0x7dc>
		break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <statemachine+0x7dc>
		break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <statemachine+0x7dc>
		break;
 80041da:	bf00      	nop
	}

}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000408 	.word	0x20000408
 80041e8:	00000000 	.word	0x00000000
 80041ec:	20000018 	.word	0x20000018
 80041f0:	08019ac0 	.word	0x08019ac0

080041f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_MspInit+0x50>)
 80041fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fe:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_MspInit+0x50>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6613      	str	r3, [r2, #96]	@ 0x60
 8004206:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_MspInit+0x50>)
 8004208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <HAL_MspInit+0x50>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	4a0b      	ldr	r2, [pc, #44]	@ (8004244 <HAL_MspInit+0x50>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	@ 0x58
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_MspInit+0x50>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	210f      	movs	r1, #15
 800422e:	f06f 0001 	mvn.w	r0, #1
 8004232:	f003 fc81 	bl	8007b38 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004236:	f005 f891 	bl	800935c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	@ 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004258:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <HAL_InitTick+0xc4>)
 800425a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425c:	4a2b      	ldr	r2, [pc, #172]	@ (800430c <HAL_InitTick+0xc4>)
 800425e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004262:	6613      	str	r3, [r2, #96]	@ 0x60
 8004264:	4b29      	ldr	r3, [pc, #164]	@ (800430c <HAL_InitTick+0xc4>)
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004270:	f107 020c 	add.w	r2, r7, #12
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f005 fd64 	bl	8009d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004280:	f005 fd4c 	bl	8009d1c <HAL_RCC_GetPCLK2Freq>
 8004284:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <HAL_InitTick+0xc8>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	3b01      	subs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004294:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <HAL_InitTick+0xcc>)
 8004296:	4a20      	ldr	r2, [pc, #128]	@ (8004318 <HAL_InitTick+0xd0>)
 8004298:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800429a:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <HAL_InitTick+0xcc>)
 800429c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80042a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80042a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <HAL_InitTick+0xcc>)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_InitTick+0xcc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ae:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_InitTick+0xcc>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80042b4:	4817      	ldr	r0, [pc, #92]	@ (8004314 <HAL_InitTick+0xcc>)
 80042b6:	f006 fbdb 	bl	800aa70 <HAL_TIM_Base_Init>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80042c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11b      	bne.n	8004300 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80042c8:	4812      	ldr	r0, [pc, #72]	@ (8004314 <HAL_InitTick+0xcc>)
 80042ca:	f006 fc29 	bl	800ab20 <HAL_TIM_Base_Start_IT>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80042d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d111      	bne.n	8004300 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80042dc:	2019      	movs	r0, #25
 80042de:	f003 fc45 	bl	8007b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d808      	bhi.n	80042fa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80042e8:	2200      	movs	r2, #0
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	2019      	movs	r0, #25
 80042ee:	f003 fc23 	bl	8007b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_InitTick+0xd4>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e002      	b.n	8004300 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004304:	4618      	mov	r0, r3
 8004306:	3730      	adds	r7, #48	@ 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	431bde83 	.word	0x431bde83
 8004314:	2000141c 	.word	0x2000141c
 8004318:	40012c00 	.word	0x40012c00
 800431c:	20000028 	.word	0x20000028

08004320 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b092      	sub	sp, #72	@ 0x48
 8004324:	af08      	add	r7, sp, #32
 8004326:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	9306      	str	r3, [sp, #24]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	9305      	str	r3, [sp, #20]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	9303      	str	r3, [sp, #12]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	4a03      	ldr	r2, [pc, #12]	@ (8004384 <hard_fault_handler_c+0x64>)
 8004378:	21c8      	movs	r1, #200	@ 0xc8
 800437a:	4803      	ldr	r0, [pc, #12]	@ (8004388 <hard_fault_handler_c+0x68>)
 800437c:	f010 fb52 	bl	8014a24 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <hard_fault_handler_c+0x60>
 8004384:	08019ac4 	.word	0x08019ac4
 8004388:	20001468 	.word	0x20001468

0800438c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <NMI_Handler+0x4>

08004394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8004398:	f01e 0f04 	tst.w	lr, #4
 800439c:	bf0c      	ite	eq
 800439e:	f3ef 8008 	mrseq	r0, MSP
 80043a2:	f3ef 8009 	mrsne	r0, PSP
 80043a6:	f7ff bfbb 	b.w	8004320 <hard_fault_handler_c>
        "ITE EQ\n"
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
	  ssd1306_SetCursor(32, 32);
 80043aa:	2120      	movs	r1, #32
 80043ac:	2020      	movs	r0, #32
 80043ae:	f7ff fadd 	bl	800396c <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7ff f998 	bl	80036e8 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80043b8:	4a04      	ldr	r2, [pc, #16]	@ (80043cc <HardFault_Handler+0x38>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	ca06      	ldmia	r2, {r1, r2}
 80043be:	4804      	ldr	r0, [pc, #16]	@ (80043d0 <HardFault_Handler+0x3c>)
 80043c0:	f7ff faae 	bl	8003920 <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 80043c4:	f7ff f9a8 	bl	8003718 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <HardFault_Handler+0x34>
 80043cc:	20000010 	.word	0x20000010
 80043d0:	08019b2c 	.word	0x08019b2c

080043d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <MemManage_Handler+0x4>

080043dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <BusFault_Handler+0x4>

080043e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <UsageFault_Handler+0x4>

080043ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80043fe:	2002      	movs	r0, #2
 8004400:	f004 f8cc 	bl	800859c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}

08004408 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800440c:	2010      	movs	r0, #16
 800440e:	f004 f8c5 	bl	800859c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 800441c:	4802      	ldr	r0, [pc, #8]	@ (8004428 <DMA1_Channel1_IRQHandler+0x10>)
 800441e:	f003 fd96 	bl	8007f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20001624 	.word	0x20001624

0800442c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004430:	4802      	ldr	r0, [pc, #8]	@ (800443c <DMA1_Channel2_IRQHandler+0x10>)
 8004432:	f003 fd8c 	bl	8007f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200002a4 	.word	0x200002a4

08004440 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004444:	4802      	ldr	r0, [pc, #8]	@ (8004450 <DMA1_Channel3_IRQHandler+0x10>)
 8004446:	f003 fd82 	bl	8007f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200017b4 	.word	0x200017b4

08004454 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004458:	4802      	ldr	r0, [pc, #8]	@ (8004464 <DMA1_Channel5_IRQHandler+0x10>)
 800445a:	f003 fd78 	bl	8007f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20001814 	.word	0x20001814

08004468 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800446c:	4802      	ldr	r0, [pc, #8]	@ (8004478 <ADC1_2_IRQHandler+0x10>)
 800446e:	f002 fa6d 	bl	800694c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000238 	.word	0x20000238

0800447c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004480:	4802      	ldr	r0, [pc, #8]	@ (800448c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004482:	f007 f8bf 	bl	800b604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000141c 	.word	0x2000141c

08004490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004494:	4802      	ldr	r0, [pc, #8]	@ (80044a0 <TIM2_IRQHandler+0x10>)
 8004496:	f007 f8b5 	bl	800b604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20001540 	.word	0x20001540

080044a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <TIM4_IRQHandler+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a03      	ldr	r2, [pc, #12]	@ (80044bc <TIM4_IRQHandler+0x18>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80044b2:	4803      	ldr	r0, [pc, #12]	@ (80044c0 <TIM4_IRQHandler+0x1c>)
 80044b4:	f007 f8a6 	bl	800b604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000f70 	.word	0x20000f70
 80044c0:	200015d8 	.word	0x200015d8

080044c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044c8:	4802      	ldr	r0, [pc, #8]	@ (80044d4 <USART1_IRQHandler+0x10>)
 80044ca:	f008 fc51 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20001720 	.word	0x20001720

080044d8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80044dc:	4802      	ldr	r0, [pc, #8]	@ (80044e8 <LPUART1_IRQHandler+0x10>)
 80044de:	f008 fc47 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000168c 	.word	0x2000168c

080044ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return 1;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_kill>:

int _kill(int pid, int sig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004506:	f010 fbd9 	bl	8014cbc <__errno>
 800450a:	4603      	mov	r3, r0
 800450c:	2216      	movs	r2, #22
 800450e:	601a      	str	r2, [r3, #0]
  return -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_exit>:

void _exit (int status)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004524:	f04f 31ff 	mov.w	r1, #4294967295
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffe7 	bl	80044fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <_exit+0x12>

08004532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e00a      	b.n	800455a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004544:	f3af 8000 	nop.w
 8004548:	4601      	mov	r1, r0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	60ba      	str	r2, [r7, #8]
 8004550:	b2ca      	uxtb	r2, r1
 8004552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3301      	adds	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	dbf0      	blt.n	8004544 <_read+0x12>
  }

  return len;
 8004562:	687b      	ldr	r3, [r7, #4]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e009      	b.n	8004592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	60ba      	str	r2, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	dbf1      	blt.n	800457e <_write+0x12>
  }
  return len;
 800459a:	687b      	ldr	r3, [r7, #4]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_close>:

int _close(int file)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045cc:	605a      	str	r2, [r3, #4]
  return 0;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_isatty>:

int _isatty(int file)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045e4:	2301      	movs	r3, #1
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004614:	4a14      	ldr	r2, [pc, #80]	@ (8004668 <_sbrk+0x5c>)
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <_sbrk+0x60>)
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <_sbrk+0x64>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004628:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <_sbrk+0x64>)
 800462a:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <_sbrk+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <_sbrk+0x64>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d207      	bcs.n	800464c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800463c:	f010 fb3e 	bl	8014cbc <__errno>
 8004640:	4603      	mov	r3, r0
 8004642:	220c      	movs	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e009      	b.n	8004660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800464c:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004652:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <_sbrk+0x64>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	4a05      	ldr	r2, [pc, #20]	@ (8004670 <_sbrk+0x64>)
 800465c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20008000 	.word	0x20008000
 800466c:	00000400 	.word	0x00000400
 8004670:	20001530 	.word	0x20001530
 8004674:	20004a80 	.word	0x20004a80

08004678 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <SystemInit+0x20>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	4a05      	ldr	r2, [pc, #20]	@ (8004698 <SystemInit+0x20>)
 8004684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	@ 0x38
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	460a      	mov	r2, r1
 80046a6:	71fb      	strb	r3, [r7, #7]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 80046ac:	2306      	movs	r3, #6
 80046ae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 80046b2:	2304      	movs	r3, #4
 80046b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80046be:	4a6f      	ldr	r2, [pc, #444]	@ (800487c <INIT_PERM_TARVOS+0x1e0>)
 80046c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046c8:	6018      	str	r0, [r3, #0]
 80046ca:	3304      	adds	r3, #4
 80046cc:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 80046ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004880 <INIT_PERM_TARVOS+0x1e4>)
 80046d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	3304      	adds	r3, #4
 80046dc:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 80046de:	4a69      	ldr	r2, [pc, #420]	@ (8004884 <INIT_PERM_TARVOS+0x1e8>)
 80046e0:	f107 031c 	add.w	r3, r7, #28
 80046e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 80046ee:	2302      	movs	r3, #2
 80046f0:	753b      	strb	r3, [r7, #20]
 80046f2:	2309      	movs	r3, #9
 80046f4:	757b      	strb	r3, [r7, #21]
 80046f6:	2302      	movs	r3, #2
 80046f8:	75bb      	strb	r3, [r7, #22]
 80046fa:	230b      	movs	r3, #11
 80046fc:	75fb      	strb	r3, [r7, #23]
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	763b      	strb	r3, [r7, #24]
 8004702:	2300      	movs	r3, #0
 8004704:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8004706:	2302      	movs	r3, #2
 8004708:	733b      	strb	r3, [r7, #12]
 800470a:	2309      	movs	r3, #9
 800470c:	737b      	strb	r3, [r7, #13]
 800470e:	2302      	movs	r3, #2
 8004710:	73bb      	strb	r3, [r7, #14]
 8004712:	2308      	movs	r3, #8
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	79bb      	ldrb	r3, [r7, #6]
 8004718:	743b      	strb	r3, [r7, #16]
 800471a:	2300      	movs	r3, #0
 800471c:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800471e:	4b5a      	ldr	r3, [pc, #360]	@ (8004888 <INIT_PERM_TARVOS+0x1ec>)
 8004720:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8004722:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f8ac 	bl	8004890 <Get_CRC8>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 800473e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004742:	b29a      	uxth	r2, r3
 8004744:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004748:	2364      	movs	r3, #100	@ 0x64
 800474a:	4850      	ldr	r0, [pc, #320]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 800474c:	f008 f928 	bl	800c9a0 <HAL_UART_Transmit>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 800475c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f88f 	bl	8004890 <Get_CRC8>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8004778:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800477c:	b29a      	uxth	r2, r3
 800477e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004782:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004786:	4841      	ldr	r0, [pc, #260]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 8004788:	f008 f90a 	bl	800c9a0 <HAL_UART_Transmit>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8004798:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	f107 031c 	add.w	r3, r7, #28
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f871 	bl	8004890 <Get_CRC8>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 80047b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	f107 011c 	add.w	r1, r7, #28
 80047be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80047c2:	4832      	ldr	r0, [pc, #200]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 80047c4:	f008 f8ec 	bl	800c9a0 <HAL_UART_Transmit>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 80047d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f853 	bl	8004890 <Get_CRC8>
 80047ea:	4603      	mov	r3, r0
 80047ec:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 80047ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f107 0114 	add.w	r1, r7, #20
 80047f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80047fc:	4823      	ldr	r0, [pc, #140]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 80047fe:	f008 f8cf 	bl	800c9a0 <HAL_UART_Transmit>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800480e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f836 	bl	8004890 <Get_CRC8>
 8004824:	4603      	mov	r3, r0
 8004826:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8004828:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800482c:	b29a      	uxth	r2, r3
 800482e:	f107 010c 	add.w	r1, r7, #12
 8004832:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004836:	4815      	ldr	r0, [pc, #84]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 8004838:	f008 f8b2 	bl	800c9a0 <HAL_UART_Transmit>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8004848:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800484c:	b29a      	uxth	r2, r3
 800484e:	f107 0108 	add.w	r1, r7, #8
 8004852:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004856:	480d      	ldr	r0, [pc, #52]	@ (800488c <INIT_PERM_TARVOS+0x1f0>)
 8004858:	f008 f8a2 	bl	800c9a0 <HAL_UART_Transmit>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8004868:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800486c:	f001 fbd4 	bl	8006018 <HAL_Delay>
    return status;
 8004870:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8004874:	4618      	mov	r0, r3
 8004876:	3738      	adds	r7, #56	@ 0x38
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	08019b5c 	.word	0x08019b5c
 8004880:	08019b64 	.word	0x08019b64
 8004884:	08019b6c 	.word	0x08019b6c
 8004888:	07000502 	.word	0x07000502
 800488c:	2000168c 	.word	0x2000168c

08004890 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80048a0:	2300      	movs	r3, #0
 80048a2:	81bb      	strh	r3, [r7, #12]
 80048a4:	e009      	b.n	80048ba <Get_CRC8+0x2a>
		crc ^= bufP[i];
 80048a6:	89bb      	ldrh	r3, [r7, #12]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	4053      	eors	r3, r2
 80048b2:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80048b4:	89bb      	ldrh	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	81bb      	strh	r3, [r7, #12]
 80048ba:	89ba      	ldrh	r2, [r7, #12]
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3f1      	bcc.n	80048a6 <Get_CRC8+0x16>
	}
	return crc;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <SEND_DATA_NETW1>:


void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	b088      	sub	sp, #32
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	72fb      	strb	r3, [r7, #11]
 80048e0:	4613      	mov	r3, r2
 80048e2:	72bb      	strb	r3, [r7, #10]
 80048e4:	466b      	mov	r3, sp
 80048e6:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1d9e      	adds	r6, r3, #6
 80048ec:	1e73      	subs	r3, r6, #1
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	4632      	mov	r2, r6
 80048f2:	2300      	movs	r3, #0
 80048f4:	4690      	mov	r8, r2
 80048f6:	4699      	mov	r9, r3
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800490c:	4632      	mov	r2, r6
 800490e:	2300      	movs	r3, #0
 8004910:	4614      	mov	r4, r2
 8004912:	461d      	mov	r5, r3
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	00eb      	lsls	r3, r5, #3
 800491e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004922:	00e2      	lsls	r2, r4, #3
 8004924:	4633      	mov	r3, r6
 8004926:	3307      	adds	r3, #7
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	ebad 0d03 	sub.w	sp, sp, r3
 8004930:	466b      	mov	r3, sp
 8004932:	3300      	adds	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2202      	movs	r2, #2
 800493a:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2201      	movs	r2, #1
 8004940:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	3302      	adds	r3, #2
 8004948:	b2da      	uxtb	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	7afa      	ldrb	r2, [r7, #11]
 8004952:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	7aba      	ldrb	r2, [r7, #10]
 8004958:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 800495a:	2300      	movs	r3, #0
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e00a      	b.n	8004976 <SEND_DATA_NETW1+0xa6>
        trame[5 + i] = data[i];
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	441a      	add	r2, r3
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	3305      	adds	r3, #5
 800496a:	7811      	ldrb	r1, [r2, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	3301      	adds	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	dcf0      	bgt.n	8004960 <SEND_DATA_NETW1+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	b29b      	uxth	r3, r3
 8004982:	3305      	adds	r3, #5
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	1d5c      	adds	r4, r3, #5
 800498a:	4611      	mov	r1, r2
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7ff ff7f 	bl	8004890 <Get_CRC8>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	551a      	strb	r2, [r3, r4]


    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 800499a:	b2b2      	uxth	r2, r6
 800499c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80049a0:	6979      	ldr	r1, [r7, #20]
 80049a2:	4804      	ldr	r0, [pc, #16]	@ (80049b4 <SEND_DATA_NETW1+0xe4>)
 80049a4:	f007 fffc 	bl	800c9a0 <HAL_UART_Transmit>
 80049a8:	46d5      	mov	sp, sl


    //uint8_t bufferreceivetest[10];
    //HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);

}
 80049aa:	bf00      	nop
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	2000168c 	.word	0x2000168c

080049b8 <create_and_send_payload>:


//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,
		float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,
		float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b09c      	sub	sp, #112	@ 0x70
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6378      	str	r0, [r7, #52]	@ 0x34
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80049ca:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 80049ce:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 80049d2:	edc7 1a08 	vstr	s3, [r7, #32]
 80049d6:	ed87 2a07 	vstr	s4, [r7, #28]
 80049da:	edc7 2a06 	vstr	s5, [r7, #24]
 80049de:	ed87 3a05 	vstr	s6, [r7, #20]
 80049e2:	edc7 3a04 	vstr	s7, [r7, #16]
 80049e6:	ed87 4a03 	vstr	s8, [r7, #12]
 80049ea:	edc7 4a02 	vstr	s9, [r7, #8]
 80049ee:	ed87 5a01 	vstr	s10, [r7, #4]
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80049f8:	460b      	mov	r3, r1
 80049fa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80049fe:	4613      	mov	r3, r2
 8004a00:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004a02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 8004a0e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 8004a16:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <create_and_send_payload+0xe8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004a20:	4b20      	ldr	r3, [pc, #128]	@ (8004aa4 <create_and_send_payload+0xec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 8004a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa8 <create_and_send_payload+0xf0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_fin;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	@ (8004aac <create_and_send_payload+0xf4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 8004a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a82:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 8004a86:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004a8a:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8004a8e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8004a92:	2336      	movs	r3, #54	@ 0x36
 8004a94:	f7ff ff1c 	bl	80048d0 <SEND_DATA_NETW1>

}
 8004a98:	bf00      	nop
 8004a9a:	3770      	adds	r7, #112	@ 0x70
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000f48 	.word	0x20000f48
 8004aa4:	20000f40 	.word	0x20000f40
 8004aa8:	20000f44 	.word	0x20000f44
 8004aac:	20000f58 	.word	0x20000f58

08004ab0 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	f040 80ba 	bne.w	8004c38 <decode_payload+0x188>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b81      	cmp	r3, #129	@ 0x81
 8004acc:	f040 80b4 	bne.w	8004c38 <decode_payload+0x188>
		return;
	}
	if(receivingbuffer[2]!=56){
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b38      	cmp	r3, #56	@ 0x38
 8004ad8:	f040 80b0 	bne.w	8004c3c <decode_payload+0x18c>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	78da      	ldrb	r2, [r3, #3]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	b21a      	sxth	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	3305      	adds	r3, #5
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b21b      	sxth	r3, r3
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	799a      	ldrb	r2, [r3, #6]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	79da      	ldrb	r2, [r3, #7]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	7a1a      	ldrb	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	7a5a      	ldrb	r2, [r3, #9]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
#ifdef PARTIE_BAS


    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3348      	adds	r3, #72	@ 0x48
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	320a      	adds	r2, #10
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	334c      	adds	r3, #76	@ 0x4c
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	320e      	adds	r2, #14
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3350      	adds	r3, #80	@ 0x50
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	3212      	adds	r2, #18
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3354      	adds	r3, #84	@ 0x54
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	3216      	adds	r2, #22
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3358      	adds	r3, #88	@ 0x58
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	321a      	adds	r2, #26
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	335c      	adds	r3, #92	@ 0x5c
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	321e      	adds	r2, #30
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3360      	adds	r3, #96	@ 0x60
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	3222      	adds	r2, #34	@ 0x22
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3370      	adds	r3, #112	@ 0x70
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	3226      	adds	r2, #38	@ 0x26
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3364      	adds	r3, #100	@ 0x64
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	322a      	adds	r2, #42	@ 0x2a
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3368      	adds	r3, #104	@ 0x68
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	322e      	adds	r2, #46	@ 0x2e
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	336c      	adds	r3, #108	@ 0x6c
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	3232      	adds	r2, #50	@ 0x32
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3374      	adds	r3, #116	@ 0x74
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	3236      	adds	r2, #54	@ 0x36
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3378      	adds	r3, #120	@ 0x78
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	323a      	adds	r2, #58	@ 0x3a
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 8004bca:	4b1e      	ldr	r3, [pc, #120]	@ (8004c44 <decode_payload+0x194>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <decode_payload+0x140>
    if(receivingbuffer[6]==1){
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	3306      	adds	r3, #6
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d109      	bne.n	8004bf0 <decode_payload+0x140>
    	hauteur_Initiale=myDatabmp581.altitude;
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c48 <decode_payload+0x198>)
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c4c <decode_payload+0x19c>)
 8004be2:	6013      	str	r3, [r2, #0]
    	flag_calib=1;
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <decode_payload+0x1a0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 8004bea:	4b16      	ldr	r3, [pc, #88]	@ (8004c44 <decode_payload+0x194>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 8004bf0:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <decode_payload+0x1a4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <decode_payload+0x15e>
    if(receivingbuffer[7]==1){
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <decode_payload+0x15e>
    	flag_drop=1;
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <decode_payload+0x1a8>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 8004c08:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <decode_payload+0x1a4>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <decode_payload+0x1ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <decode_payload+0x17c>
    if(receivingbuffer[8]==1){
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <decode_payload+0x17c>
    	flag_separation=1;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <decode_payload+0x1b0>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <decode_payload+0x1ac>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
#endif




    memset((uint8_t *)receivingbuffer,0,64);
 8004c2c:	2240      	movs	r2, #64	@ 0x40
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f00f ff92 	bl	8014b5a <memset>
 8004c36:	e002      	b.n	8004c3e <decode_payload+0x18e>
		return;
 8004c38:	bf00      	nop
 8004c3a:	e000      	b.n	8004c3e <decode_payload+0x18e>
		return;
 8004c3c:	bf00      	nop
}
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000153c 	.word	0x2000153c
 8004c48:	20000798 	.word	0x20000798
 8004c4c:	20000f5c 	.word	0x20000f5c
 8004c50:	20000f48 	.word	0x20000f48
 8004c54:	20001534 	.word	0x20001534
 8004c58:	20000f40 	.word	0x20000f40
 8004c5c:	20001538 	.word	0x20001538
 8004c60:	20000f44 	.word	0x20000f44

08004c64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	@ 0x38
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c78:	f107 031c 	add.w	r3, r7, #28
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c84:	463b      	mov	r3, r7
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	615a      	str	r2, [r3, #20]
 8004c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c96:	4b2d      	ldr	r3, [pc, #180]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca4:	4b29      	ldr	r3, [pc, #164]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 8004caa:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cac:	22cb      	movs	r2, #203	@ 0xcb
 8004cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cb0:	4b26      	ldr	r3, [pc, #152]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb6:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cbc:	4823      	ldr	r0, [pc, #140]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cbe:	f005 fed7 	bl	800aa70 <HAL_TIM_Base_Init>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004cc8:	f7fe faac 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	481c      	ldr	r0, [pc, #112]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cda:	f006 fef7 	bl	800bacc <HAL_TIM_ConfigClockSource>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004ce4:	f7fe fa9e 	bl	8003224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ce8:	4818      	ldr	r0, [pc, #96]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004cea:	f005 ff83 	bl	800abf4 <HAL_TIM_PWM_Init>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004cf4:	f7fe fa96 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d00:	f107 031c 	add.w	r3, r7, #28
 8004d04:	4619      	mov	r1, r3
 8004d06:	4811      	ldr	r0, [pc, #68]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004d08:	f007 fd32 	bl	800c770 <HAL_TIMEx_MasterConfigSynchronization>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004d12:	f7fe fa87 	bl	8003224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d16:	2360      	movs	r3, #96	@ 0x60
 8004d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004d22:	2304      	movs	r3, #4
 8004d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d26:	463b      	mov	r3, r7
 8004d28:	2204      	movs	r2, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4807      	ldr	r0, [pc, #28]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004d2e:	f006 fdb9 	bl	800b8a4 <HAL_TIM_PWM_ConfigChannel>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004d38:	f7fe fa74 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004d3c:	4803      	ldr	r0, [pc, #12]	@ (8004d4c <MX_TIM2_Init+0xe8>)
 8004d3e:	f000 f951 	bl	8004fe4 <HAL_TIM_MspPostInit>

}
 8004d42:	bf00      	nop
 8004d44:	3738      	adds	r7, #56	@ 0x38
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20001540 	.word	0x20001540

08004d50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	@ 0x38
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d64:	f107 031c 	add.w	r3, r7, #28
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d70:	463b      	mov	r3, r7
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	609a      	str	r2, [r3, #8]
 8004d7a:	60da      	str	r2, [r3, #12]
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	615a      	str	r2, [r3, #20]
 8004d80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d82:	4b2d      	ldr	r3, [pc, #180]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004d84:	4a2d      	ldr	r2, [pc, #180]	@ (8004e3c <MX_TIM3_Init+0xec>)
 8004d86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8004d88:	4b2b      	ldr	r3, [pc, #172]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004d8a:	22a9      	movs	r2, #169	@ 0xa9
 8004d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004d94:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004d96:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d9c:	4b26      	ldr	r3, [pc, #152]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004da2:	4b25      	ldr	r3, [pc, #148]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004da4:	2280      	movs	r2, #128	@ 0x80
 8004da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004da8:	4823      	ldr	r0, [pc, #140]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004daa:	f005 fe61 	bl	800aa70 <HAL_TIM_Base_Init>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004db4:	f7fe fa36 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	481c      	ldr	r0, [pc, #112]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004dc6:	f006 fe81 	bl	800bacc <HAL_TIM_ConfigClockSource>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004dd0:	f7fe fa28 	bl	8003224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004dd4:	4818      	ldr	r0, [pc, #96]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004dd6:	f005 ff0d 	bl	800abf4 <HAL_TIM_PWM_Init>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004de0:	f7fe fa20 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	4619      	mov	r1, r3
 8004df2:	4811      	ldr	r0, [pc, #68]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004df4:	f007 fcbc 	bl	800c770 <HAL_TIMEx_MasterConfigSynchronization>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004dfe:	f7fe fa11 	bl	8003224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e02:	2360      	movs	r3, #96	@ 0x60
 8004e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e12:	463b      	mov	r3, r7
 8004e14:	2200      	movs	r2, #0
 8004e16:	4619      	mov	r1, r3
 8004e18:	4807      	ldr	r0, [pc, #28]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004e1a:	f006 fd43 	bl	800b8a4 <HAL_TIM_PWM_ConfigChannel>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004e24:	f7fe f9fe 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004e28:	4803      	ldr	r0, [pc, #12]	@ (8004e38 <MX_TIM3_Init+0xe8>)
 8004e2a:	f000 f8db 	bl	8004fe4 <HAL_TIM_MspPostInit>

}
 8004e2e:	bf00      	nop
 8004e30:	3738      	adds	r7, #56	@ 0x38
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000158c 	.word	0x2000158c
 8004e3c:	40000400 	.word	0x40000400

08004e40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e60:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <MX_TIM4_Init+0x9c>)
 8004e62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8004e64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e66:	f244 2267 	movw	r2, #16999	@ 0x4267
 8004e6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8004e72:	4b19      	ldr	r3, [pc, #100]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e74:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004e78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004e86:	4814      	ldr	r0, [pc, #80]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004e88:	f005 fdf2 	bl	800aa70 <HAL_TIM_Base_Init>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8004e92:	f7fe f9c7 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004ea4:	f006 fe12 	bl	800bacc <HAL_TIM_ConfigClockSource>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8004eae:	f7fe f9b9 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4806      	ldr	r0, [pc, #24]	@ (8004ed8 <MX_TIM4_Init+0x98>)
 8004ec0:	f007 fc56 	bl	800c770 <HAL_TIMEx_MasterConfigSynchronization>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004eca:	f7fe f9ab 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200015d8 	.word	0x200015d8
 8004edc:	40000800 	.word	0x40000800

08004ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d13e      	bne.n	8004f70 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ef2:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004efe:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004f0a:	4b32      	ldr	r3, [pc, #200]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f0c:	4a32      	ldr	r2, [pc, #200]	@ (8004fd8 <HAL_TIM_Base_MspInit+0xf8>)
 8004f0e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004f10:	4b30      	ldr	r3, [pc, #192]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f12:	2239      	movs	r2, #57	@ 0x39
 8004f14:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f16:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f18:	2210      	movs	r2, #16
 8004f1a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004f22:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f2e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8004f36:	4b27      	ldr	r3, [pc, #156]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004f3c:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8004f42:	4824      	ldr	r0, [pc, #144]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f44:	f002 fe20 	bl	8007b88 <HAL_DMA_Init>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8004f4e:	f7fe f969 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f58:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <HAL_TIM_Base_MspInit+0xf4>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2105      	movs	r1, #5
 8004f62:	201c      	movs	r0, #28
 8004f64:	f002 fde8 	bl	8007b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f68:	201c      	movs	r0, #28
 8004f6a:	f002 fdff 	bl	8007b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004f6e:	e02a      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <HAL_TIM_Base_MspInit+0xfc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10c      	bne.n	8004f94 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	4a14      	ldr	r2, [pc, #80]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f86:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
}
 8004f92:	e018      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a11      	ldr	r2, [pc, #68]	@ (8004fe0 <HAL_TIM_Base_MspInit+0x100>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d113      	bne.n	8004fc6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2106      	movs	r1, #6
 8004fba:	201e      	movs	r0, #30
 8004fbc:	f002 fdbc 	bl	8007b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004fc0:	201e      	movs	r0, #30
 8004fc2:	f002 fdd3 	bl	8007b6c <HAL_NVIC_EnableIRQ>
}
 8004fc6:	bf00      	nop
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	20001624 	.word	0x20001624
 8004fd8:	40020008 	.word	0x40020008
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800

08004fe4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005004:	d11d      	bne.n	8005042 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005006:	4b21      	ldr	r3, [pc, #132]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500a:	4a20      	ldr	r2, [pc, #128]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005012:	4b1e      	ldr	r3, [pc, #120]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800501e:	2302      	movs	r3, #2
 8005020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800502a:	2301      	movs	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800502e:	2301      	movs	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005032:	f107 0314 	add.w	r3, r7, #20
 8005036:	4619      	mov	r1, r3
 8005038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800503c:	f003 f8e2 	bl	8008204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005040:	e020      	b.n	8005084 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a12      	ldr	r2, [pc, #72]	@ (8005090 <HAL_TIM_MspPostInit+0xac>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800504c:	4b0f      	ldr	r3, [pc, #60]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	4a0e      	ldr	r2, [pc, #56]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_TIM_MspPostInit+0xa8>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005064:	2340      	movs	r3, #64	@ 0x40
 8005066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	2300      	movs	r3, #0
 8005072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005074:	2302      	movs	r3, #2
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	4619      	mov	r1, r3
 800507e:	4805      	ldr	r0, [pc, #20]	@ (8005094 <HAL_TIM_MspPostInit+0xb0>)
 8005080:	f003 f8c0 	bl	8008204 <HAL_GPIO_Init>
}
 8005084:	bf00      	nop
 8005086:	3728      	adds	r7, #40	@ 0x28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40021000 	.word	0x40021000
 8005090:	40000400 	.word	0x40000400
 8005094:	48000800 	.word	0x48000800

08005098 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800509c:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 800509e:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <MX_LPUART1_UART_Init+0x90>)
 80050a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80050a2:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80050a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80050b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050be:	220c      	movs	r2, #12
 80050c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050c2:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050c8:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80050da:	4812      	ldr	r0, [pc, #72]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050dc:	f007 fc10 	bl	800c900 <HAL_UART_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80050e6:	f7fe f89d 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050ea:	2100      	movs	r1, #0
 80050ec:	480d      	ldr	r0, [pc, #52]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 80050ee:	f009 f907 	bl	800e300 <HAL_UARTEx_SetTxFifoThreshold>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80050f8:	f7fe f894 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050fc:	2100      	movs	r1, #0
 80050fe:	4809      	ldr	r0, [pc, #36]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 8005100:	f009 f93c 	bl	800e37c <HAL_UARTEx_SetRxFifoThreshold>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800510a:	f7fe f88b 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800510e:	4805      	ldr	r0, [pc, #20]	@ (8005124 <MX_LPUART1_UART_Init+0x8c>)
 8005110:	f009 f8bd 	bl	800e28e <HAL_UARTEx_DisableFifoMode>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800511a:	f7fe f883 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000168c 	.word	0x2000168c
 8005128:	40008000 	.word	0x40008000

0800512c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005130:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <MX_USART1_UART_Init+0x94>)
 8005134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005136:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800513c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800513e:	4b1f      	ldr	r3, [pc, #124]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005140:	2200      	movs	r2, #0
 8005142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005146:	2200      	movs	r2, #0
 8005148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800514a:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 800514c:	2200      	movs	r2, #0
 800514e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005150:	4b1a      	ldr	r3, [pc, #104]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005152:	220c      	movs	r2, #12
 8005154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005156:	4b19      	ldr	r3, [pc, #100]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005158:	2200      	movs	r2, #0
 800515a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800515c:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005162:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005164:	2200      	movs	r2, #0
 8005166:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005168:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 800516a:	2200      	movs	r2, #0
 800516c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800516e:	4b13      	ldr	r3, [pc, #76]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005170:	2200      	movs	r2, #0
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005174:	4811      	ldr	r0, [pc, #68]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005176:	f007 fbc3 	bl	800c900 <HAL_UART_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005180:	f7fe f850 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005184:	2100      	movs	r1, #0
 8005186:	480d      	ldr	r0, [pc, #52]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 8005188:	f009 f8ba 	bl	800e300 <HAL_UARTEx_SetTxFifoThreshold>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005192:	f7fe f847 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005196:	2100      	movs	r1, #0
 8005198:	4808      	ldr	r0, [pc, #32]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 800519a:	f009 f8ef 	bl	800e37c <HAL_UARTEx_SetRxFifoThreshold>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80051a4:	f7fe f83e 	bl	8003224 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80051a8:	4804      	ldr	r0, [pc, #16]	@ (80051bc <MX_USART1_UART_Init+0x90>)
 80051aa:	f009 f870 	bl	800e28e <HAL_UARTEx_DisableFifoMode>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80051b4:	f7fe f836 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20001720 	.word	0x20001720
 80051c0:	40013800 	.word	0x40013800

080051c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b09e      	sub	sp, #120	@ 0x78
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051dc:	f107 0320 	add.w	r3, r7, #32
 80051e0:	2244      	movs	r2, #68	@ 0x44
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f00f fcb8 	bl	8014b5a <memset>
  if(uartHandle->Instance==LPUART1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7e      	ldr	r2, [pc, #504]	@ (80053e8 <HAL_UART_MspInit+0x224>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	f040 8087 	bne.w	8005304 <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80051f6:	2320      	movs	r3, #32
 80051f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051fe:	f107 0320 	add.w	r3, r7, #32
 8005202:	4618      	mov	r0, r3
 8005204:	f004 fe16 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800520e:	f7fe f809 	bl	8003224 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005212:	4b76      	ldr	r3, [pc, #472]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	4a75      	ldr	r2, [pc, #468]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800521e:	4b73      	ldr	r3, [pc, #460]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800522a:	4b70      	ldr	r3, [pc, #448]	@ (80053ec <HAL_UART_MspInit+0x228>)
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	4a6f      	ldr	r2, [pc, #444]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005236:	4b6d      	ldr	r3, [pc, #436]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005242:	4b6a      	ldr	r3, [pc, #424]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	4a69      	ldr	r2, [pc, #420]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800524e:	4b67      	ldr	r3, [pc, #412]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800525a:	2308      	movs	r3, #8
 800525c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525e:	2302      	movs	r3, #2
 8005260:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005262:	2300      	movs	r3, #0
 8005264:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005266:	2300      	movs	r3, #0
 8005268:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800526a:	230c      	movs	r3, #12
 800526c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005272:	4619      	mov	r1, r3
 8005274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005278:	f002 ffc4 	bl	8008204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800527c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005280:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005282:	2302      	movs	r3, #2
 8005284:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	2300      	movs	r3, #0
 8005288:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528a:	2300      	movs	r3, #0
 800528c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800528e:	2308      	movs	r3, #8
 8005290:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005292:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005296:	4619      	mov	r1, r3
 8005298:	4855      	ldr	r0, [pc, #340]	@ (80053f0 <HAL_UART_MspInit+0x22c>)
 800529a:	f002 ffb3 	bl	8008204 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800529e:	4b55      	ldr	r3, [pc, #340]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052a0:	4a55      	ldr	r2, [pc, #340]	@ (80053f8 <HAL_UART_MspInit+0x234>)
 80052a2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80052a4:	4b53      	ldr	r3, [pc, #332]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052a6:	2222      	movs	r2, #34	@ 0x22
 80052a8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052aa:	4b52      	ldr	r3, [pc, #328]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052b0:	4b50      	ldr	r3, [pc, #320]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052b6:	4b4f      	ldr	r3, [pc, #316]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052b8:	2280      	movs	r2, #128	@ 0x80
 80052ba:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052bc:	4b4d      	ldr	r3, [pc, #308]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052be:	2200      	movs	r2, #0
 80052c0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052c2:	4b4c      	ldr	r3, [pc, #304]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80052c8:	4b4a      	ldr	r3, [pc, #296]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052ca:	2220      	movs	r2, #32
 80052cc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052ce:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80052d4:	4847      	ldr	r0, [pc, #284]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052d6:	f002 fc57 	bl	8007b88 <HAL_DMA_Init>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 80052e0:	f7fd ffa0 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a43      	ldr	r2, [pc, #268]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80052ec:	4a41      	ldr	r2, [pc, #260]	@ (80053f4 <HAL_UART_MspInit+0x230>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	2105      	movs	r1, #5
 80052f6:	205b      	movs	r0, #91	@ 0x5b
 80052f8:	f002 fc1e 	bl	8007b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80052fc:	205b      	movs	r0, #91	@ 0x5b
 80052fe:	f002 fc35 	bl	8007b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005302:	e06c      	b.n	80053de <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <HAL_UART_MspInit+0x238>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d167      	bne.n	80053de <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800530e:	2301      	movs	r3, #1
 8005310:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005312:	2300      	movs	r3, #0
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005316:	f107 0320 	add.w	r3, r7, #32
 800531a:	4618      	mov	r0, r3
 800531c:	f004 fd8a 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8005326:	f7fd ff7d 	bl	8003224 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800532a:	4b30      	ldr	r3, [pc, #192]	@ (80053ec <HAL_UART_MspInit+0x228>)
 800532c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532e:	4a2f      	ldr	r2, [pc, #188]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005334:	6613      	str	r3, [r2, #96]	@ 0x60
 8005336:	4b2d      	ldr	r3, [pc, #180]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005342:	4b2a      	ldr	r3, [pc, #168]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005346:	4a29      	ldr	r2, [pc, #164]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800534e:	4b27      	ldr	r3, [pc, #156]	@ (80053ec <HAL_UART_MspInit+0x228>)
 8005350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800535a:	23c0      	movs	r3, #192	@ 0xc0
 800535c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535e:	2302      	movs	r3, #2
 8005360:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	2300      	movs	r3, #0
 8005364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005366:	2300      	movs	r3, #0
 8005368:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800536a:	2307      	movs	r3, #7
 800536c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800536e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005372:	4619      	mov	r1, r3
 8005374:	481e      	ldr	r0, [pc, #120]	@ (80053f0 <HAL_UART_MspInit+0x22c>)
 8005376:	f002 ff45 	bl	8008204 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800537a:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 800537c:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <HAL_UART_MspInit+0x240>)
 800537e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005380:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 8005382:	2218      	movs	r2, #24
 8005384:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005386:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800538c:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005392:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 8005394:	2280      	movs	r2, #128	@ 0x80
 8005396:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005398:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 800539a:	2200      	movs	r2, #0
 800539c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800539e:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053a6:	2220      	movs	r2, #32
 80053a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053aa:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053b0:	4813      	ldr	r0, [pc, #76]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053b2:	f002 fbe9 	bl	8007b88 <HAL_DMA_Init>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80053bc:	f7fd ff32 	bl	8003224 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80053c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <HAL_UART_MspInit+0x23c>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2105      	movs	r1, #5
 80053d2:	2025      	movs	r0, #37	@ 0x25
 80053d4:	f002 fbb0 	bl	8007b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053d8:	2025      	movs	r0, #37	@ 0x25
 80053da:	f002 fbc7 	bl	8007b6c <HAL_NVIC_EnableIRQ>
}
 80053de:	bf00      	nop
 80053e0:	3778      	adds	r7, #120	@ 0x78
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40008000 	.word	0x40008000
 80053ec:	40021000 	.word	0x40021000
 80053f0:	48000400 	.word	0x48000400
 80053f4:	200017b4 	.word	0x200017b4
 80053f8:	40020030 	.word	0x40020030
 80053fc:	40013800 	.word	0x40013800
 8005400:	20001814 	.word	0x20001814
 8005404:	40020058 	.word	0x40020058

08005408 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a52      	ldr	r2, [pc, #328]	@ (8005560 <HAL_UART_RxCpltCallback+0x158>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d114      	bne.n	8005444 <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 800541a:	4b52      	ldr	r3, [pc, #328]	@ (8005564 <HAL_UART_RxCpltCallback+0x15c>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8005420:	2264      	movs	r2, #100	@ 0x64
 8005422:	4951      	ldr	r1, [pc, #324]	@ (8005568 <HAL_UART_RxCpltCallback+0x160>)
 8005424:	4851      	ldr	r0, [pc, #324]	@ (800556c <HAL_UART_RxCpltCallback+0x164>)
 8005426:	f00f fc76 	bl	8014d16 <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 800542a:	2264      	movs	r2, #100	@ 0x64
 800542c:	494e      	ldr	r1, [pc, #312]	@ (8005568 <HAL_UART_RxCpltCallback+0x160>)
 800542e:	4850      	ldr	r0, [pc, #320]	@ (8005570 <HAL_UART_RxCpltCallback+0x168>)
 8005430:	f007 fb44 	bl	800cabc <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005434:	4b4f      	ldr	r3, [pc, #316]	@ (8005574 <HAL_UART_RxCpltCallback+0x16c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b4e      	ldr	r3, [pc, #312]	@ (8005574 <HAL_UART_RxCpltCallback+0x16c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a4b      	ldr	r2, [pc, #300]	@ (8005578 <HAL_UART_RxCpltCallback+0x170>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f040 8084 	bne.w	8005558 <HAL_UART_RxCpltCallback+0x150>



		if(receivingflag==0){
 8005450:	4b4a      	ldr	r3, [pc, #296]	@ (800557c <HAL_UART_RxCpltCallback+0x174>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d12b      	bne.n	80054b0 <HAL_UART_RxCpltCallback+0xa8>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 8005458:	4b49      	ldr	r3, [pc, #292]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b81      	cmp	r3, #129	@ 0x81
 800545e:	d119      	bne.n	8005494 <HAL_UART_RxCpltCallback+0x8c>
 8005460:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d115      	bne.n	8005494 <HAL_UART_RxCpltCallback+0x8c>



			if (osMutexWait(uartmutexHandle, 0) == osOK)  // Prend le mutex immédiatement
 8005468:	4b46      	ldr	r3, [pc, #280]	@ (8005584 <HAL_UART_RxCpltCallback+0x17c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f00b fef8 	bl	8011264 <osMutexWait>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10c      	bne.n	8005494 <HAL_UART_RxCpltCallback+0x8c>
			            {

				memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 800547a:	2205      	movs	r2, #5
 800547c:	4940      	ldr	r1, [pc, #256]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 800547e:	4842      	ldr	r0, [pc, #264]	@ (8005588 <HAL_UART_RxCpltCallback+0x180>)
 8005480:	f00f fc49 	bl	8014d16 <memcpy>
			receivingflag=1;
 8005484:	4b3d      	ldr	r3, [pc, #244]	@ (800557c <HAL_UART_RxCpltCallback+0x174>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
			receivingindex++;
 800548a:	4b40      	ldr	r3, [pc, #256]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	4a3e      	ldr	r2, [pc, #248]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 8005492:	6013      	str	r3, [r2, #0]
			            }
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 8005494:	4b3a      	ldr	r3, [pc, #232]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d13e      	bne.n	800551a <HAL_UART_RxCpltCallback+0x112>
 800549c:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d13a      	bne.n	800551a <HAL_UART_RxCpltCallback+0x112>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 80054a4:	2205      	movs	r2, #5
 80054a6:	2100      	movs	r1, #0
 80054a8:	4835      	ldr	r0, [pc, #212]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 80054aa:	f00f fb56 	bl	8014b5a <memset>
 80054ae:	e034      	b.n	800551a <HAL_UART_RxCpltCallback+0x112>
				}


		}
		else{
			if(tarvos_RX_Buffer[0]==0x02 && tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[2]==0x01 ){
 80054b0:	4b33      	ldr	r3, [pc, #204]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d11a      	bne.n	80054ee <HAL_UART_RxCpltCallback+0xe6>
 80054b8:	4b31      	ldr	r3, [pc, #196]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d116      	bne.n	80054ee <HAL_UART_RxCpltCallback+0xe6>
 80054c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 80054c2:	789b      	ldrb	r3, [r3, #2]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d112      	bne.n	80054ee <HAL_UART_RxCpltCallback+0xe6>
				memset((uint8_t *)tarvos_RX_Buffer,0,5);
 80054c8:	2205      	movs	r2, #5
 80054ca:	2100      	movs	r1, #0
 80054cc:	482c      	ldr	r0, [pc, #176]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 80054ce:	f00f fb44 	bl	8014b5a <memset>
				receivingindex=0;
 80054d2:	4b2e      	ldr	r3, [pc, #184]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
				receivingflag=0;
 80054d8:	4b28      	ldr	r3, [pc, #160]	@ (800557c <HAL_UART_RxCpltCallback+0x174>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
				trameready=0;
 80054de:	4b2c      	ldr	r3, [pc, #176]	@ (8005590 <HAL_UART_RxCpltCallback+0x188>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
				osMutexRelease(uartmutexHandle);
 80054e4:	4b27      	ldr	r3, [pc, #156]	@ (8005584 <HAL_UART_RxCpltCallback+0x17c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f00b ff09 	bl	8011300 <osMutexRelease>


			}
			if(receivingindex!=0){
 80054ee:	4b27      	ldr	r3, [pc, #156]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d011      	beq.n	800551a <HAL_UART_RxCpltCallback+0x112>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 80054f6:	4b25      	ldr	r3, [pc, #148]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4b21      	ldr	r3, [pc, #132]	@ (8005588 <HAL_UART_RxCpltCallback+0x180>)
 8005504:	4413      	add	r3, r2
 8005506:	2205      	movs	r2, #5
 8005508:	491d      	ldr	r1, [pc, #116]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 800550a:	4618      	mov	r0, r3
 800550c:	f00f fc03 	bl	8014d16 <memcpy>
				receivingindex++;
 8005510:	4b1e      	ldr	r3, [pc, #120]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	4a1d      	ldr	r2, [pc, #116]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 8005518:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==12){
 800551a:	4b1c      	ldr	r3, [pc, #112]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d10d      	bne.n	800553e <HAL_UART_RxCpltCallback+0x136>
			receivingindex=0;
 8005522:	4b1a      	ldr	r3, [pc, #104]	@ (800558c <HAL_UART_RxCpltCallback+0x184>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8005528:	4b14      	ldr	r3, [pc, #80]	@ (800557c <HAL_UART_RxCpltCallback+0x174>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
			trameready=1;
 800552e:	4b18      	ldr	r3, [pc, #96]	@ (8005590 <HAL_UART_RxCpltCallback+0x188>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
			osMutexRelease(uartmutexHandle);
 8005534:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <HAL_UART_RxCpltCallback+0x17c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f00b fee1 	bl	8011300 <osMutexRelease>
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 800553e:	2205      	movs	r2, #5
 8005540:	490f      	ldr	r1, [pc, #60]	@ (8005580 <HAL_UART_RxCpltCallback+0x178>)
 8005542:	480b      	ldr	r0, [pc, #44]	@ (8005570 <HAL_UART_RxCpltCallback+0x168>)
 8005544:	f007 faba 	bl	800cabc <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8005548:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <HAL_UART_RxCpltCallback+0x18c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b11      	ldr	r3, [pc, #68]	@ (8005594 <HAL_UART_RxCpltCallback+0x18c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	601a      	str	r2, [r3, #0]

		}


}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40013800 	.word	0x40013800
 8005564:	20000f68 	.word	0x20000f68
 8005568:	20000508 	.word	0x20000508
 800556c:	20000d30 	.word	0x20000d30
 8005570:	2000168c 	.word	0x2000168c
 8005574:	20001814 	.word	0x20001814
 8005578:	40008000 	.word	0x40008000
 800557c:	20001684 	.word	0x20001684
 8005580:	200004c8 	.word	0x200004c8
 8005584:	2000035c 	.word	0x2000035c
 8005588:	20000488 	.word	0x20000488
 800558c:	20001688 	.word	0x20001688
 8005590:	20000f6c 	.word	0x20000f6c
 8005594:	200017b4 	.word	0x200017b4

08005598 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80055a0:	f000 fd2e 	bl	8006000 <HAL_GetTick>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <SPI_Timer_On+0x20>)
 80055a8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80055aa:	4a04      	ldr	r2, [pc, #16]	@ (80055bc <SPI_Timer_On+0x24>)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20001878 	.word	0x20001878
 80055bc:	2000187c 	.word	0x2000187c

080055c0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80055c4:	f000 fd1c 	bl	8006000 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <SPI_Timer_Status+0x24>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <SPI_Timer_Status+0x28>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bf34      	ite	cc
 80055d8:	2301      	movcc	r3, #1
 80055da:	2300      	movcs	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20001878 	.word	0x20001878
 80055e8:	2000187c 	.word	0x2000187c

080055ec <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	4603      	mov	r3, r0
 80055f4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80055f6:	f107 020f 	add.w	r2, r7, #15
 80055fa:	1df9      	adds	r1, r7, #7
 80055fc:	2332      	movs	r3, #50	@ 0x32
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2301      	movs	r3, #1
 8005602:	4804      	ldr	r0, [pc, #16]	@ (8005614 <xchg_spi+0x28>)
 8005604:	f004 feb1 	bl	800a36a <HAL_SPI_TransmitReceive>
    return rxDat;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000f74 	.word	0x20000f74

08005618 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e00a      	b.n	800563e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	18d4      	adds	r4, r2, r3
 800562e:	20ff      	movs	r0, #255	@ 0xff
 8005630:	f7ff ffdc 	bl	80055ec <xchg_spi>
 8005634:	4603      	mov	r3, r0
 8005636:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3f0      	bcc.n	8005628 <rcvr_spi_multi+0x10>
	}
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}

08005650 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e009      	b.n	8005674 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ffbf 	bl	80055ec <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3f1      	bcc.n	8005660 <xmit_spi_multi+0x10>
	}
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800568e:	f000 fcb7 	bl	8006000 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005698:	20ff      	movs	r0, #255	@ 0xff
 800569a:	f7ff ffa7 	bl	80055ec <xchg_spi>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2bff      	cmp	r3, #255	@ 0xff
 80056a6:	d007      	beq.n	80056b8 <wait_ready+0x32>
 80056a8:	f000 fcaa 	bl	8006000 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d8ef      	bhi.n	8005698 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2bff      	cmp	r3, #255	@ 0xff
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80056d0:	2201      	movs	r2, #1
 80056d2:	2110      	movs	r1, #16
 80056d4:	4803      	ldr	r0, [pc, #12]	@ (80056e4 <despiselect+0x18>)
 80056d6:	f002 ff2f 	bl	8008538 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80056da:	20ff      	movs	r0, #255	@ 0xff
 80056dc:	f7ff ff86 	bl	80055ec <xchg_spi>

}
 80056e0:	bf00      	nop
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	48000800 	.word	0x48000800

080056e8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80056ec:	2200      	movs	r2, #0
 80056ee:	2110      	movs	r1, #16
 80056f0:	4809      	ldr	r0, [pc, #36]	@ (8005718 <spiselect+0x30>)
 80056f2:	f002 ff21 	bl	8008538 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80056f6:	20ff      	movs	r0, #255	@ 0xff
 80056f8:	f7ff ff78 	bl	80055ec <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80056fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005700:	f7ff ffc1 	bl	8005686 <wait_ready>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <spiselect+0x26>
 800570a:	2301      	movs	r3, #1
 800570c:	e002      	b.n	8005714 <spiselect+0x2c>

	despiselect();
 800570e:	f7ff ffdd 	bl	80056cc <despiselect>
	return 0;	/* Timeout */
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	48000800 	.word	0x48000800

0800571c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005726:	20c8      	movs	r0, #200	@ 0xc8
 8005728:	f7ff ff36 	bl	8005598 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800572c:	20ff      	movs	r0, #255	@ 0xff
 800572e:	f7ff ff5d 	bl	80055ec <xchg_spi>
 8005732:	4603      	mov	r3, r0
 8005734:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2bff      	cmp	r3, #255	@ 0xff
 800573a:	d104      	bne.n	8005746 <rcvr_datablock+0x2a>
 800573c:	f7ff ff40 	bl	80055c0 <SPI_Timer_Status>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f2      	bne.n	800572c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	2bfe      	cmp	r3, #254	@ 0xfe
 800574a:	d001      	beq.n	8005750 <rcvr_datablock+0x34>
 800574c:	2300      	movs	r3, #0
 800574e:	e00a      	b.n	8005766 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff60 	bl	8005618 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005758:	20ff      	movs	r0, #255	@ 0xff
 800575a:	f7ff ff47 	bl	80055ec <xchg_spi>
 800575e:	20ff      	movs	r0, #255	@ 0xff
 8005760:	f7ff ff44 	bl	80055ec <xchg_spi>

	return 1;						/* Function succeeded */
 8005764:	2301      	movs	r3, #1
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800577a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800577e:	f7ff ff82 	bl	8005686 <wait_ready>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xmit_datablock+0x1e>
 8005788:	2300      	movs	r3, #0
 800578a:	e01e      	b.n	80057ca <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff2c 	bl	80055ec <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2bfd      	cmp	r3, #253	@ 0xfd
 8005798:	d016      	beq.n	80057c8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800579a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ff56 	bl	8005650 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80057a4:	20ff      	movs	r0, #255	@ 0xff
 80057a6:	f7ff ff21 	bl	80055ec <xchg_spi>
 80057aa:	20ff      	movs	r0, #255	@ 0xff
 80057ac:	f7ff ff1e 	bl	80055ec <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80057b0:	20ff      	movs	r0, #255	@ 0xff
 80057b2:	f7ff ff1b 	bl	80055ec <xchg_spi>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d001      	beq.n	80057c8 <xmit_datablock+0x5a>
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <xmit_datablock+0x5c>
	}
	return 1;
 80057c8:	2301      	movs	r3, #1
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	4603      	mov	r3, r0
 80057da:	6039      	str	r1, [r7, #0]
 80057dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da0e      	bge.n	8005804 <send_cmd+0x32>
		cmd &= 0x7F;
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ec:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80057ee:	2100      	movs	r1, #0
 80057f0:	2037      	movs	r0, #55	@ 0x37
 80057f2:	f7ff ffee 	bl	80057d2 <send_cmd>
 80057f6:	4603      	mov	r3, r0
 80057f8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d901      	bls.n	8005804 <send_cmd+0x32>
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	e051      	b.n	80058a8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d008      	beq.n	800581c <send_cmd+0x4a>
		despiselect();
 800580a:	f7ff ff5f 	bl	80056cc <despiselect>
		if (!spiselect()) return 0xFF;
 800580e:	f7ff ff6b 	bl	80056e8 <spiselect>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <send_cmd+0x4a>
 8005818:	23ff      	movs	r3, #255	@ 0xff
 800581a:	e045      	b.n	80058a8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fee1 	bl	80055ec <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	0e1b      	lsrs	r3, r3, #24
 800582e:	b2db      	uxtb	r3, r3
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fedb 	bl	80055ec <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fed5 	bl	80055ec <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fecf 	bl	80055ec <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff feca 	bl	80055ec <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <send_cmd+0x94>
 8005862:	2395      	movs	r3, #149	@ 0x95
 8005864:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d101      	bne.n	8005870 <send_cmd+0x9e>
 800586c:	2387      	movs	r3, #135	@ 0x87
 800586e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff feba 	bl	80055ec <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d102      	bne.n	8005884 <send_cmd+0xb2>
 800587e:	20ff      	movs	r0, #255	@ 0xff
 8005880:	f7ff feb4 	bl	80055ec <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005884:	230a      	movs	r3, #10
 8005886:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005888:	20ff      	movs	r0, #255	@ 0xff
 800588a:	f7ff feaf 	bl	80055ec <xchg_spi>
 800588e:	4603      	mov	r3, r0
 8005890:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005896:	2b00      	cmp	r3, #0
 8005898:	da05      	bge.n	80058a6 <send_cmd+0xd4>
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3b01      	subs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <send_cmd+0xb6>

	return res;							/* Return received response */
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <USER_SPI_initialize+0x14>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0d6      	b.n	8005a72 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80058c4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <USER_SPI_initialize+0x2a>
 80058d2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e0cb      	b.n	8005a72 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80058da:	4b69      	ldr	r3, [pc, #420]	@ (8005a80 <USER_SPI_initialize+0x1d0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80058e4:	4b66      	ldr	r3, [pc, #408]	@ (8005a80 <USER_SPI_initialize+0x1d0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80058ec:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80058ee:	230a      	movs	r3, #10
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e005      	b.n	8005900 <USER_SPI_initialize+0x50>
 80058f4:	20ff      	movs	r0, #255	@ 0xff
 80058f6:	f7ff fe79 	bl	80055ec <xchg_spi>
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f6      	bne.n	80058f4 <USER_SPI_initialize+0x44>

	ty = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800590a:	2100      	movs	r1, #0
 800590c:	2000      	movs	r0, #0
 800590e:	f7ff ff60 	bl	80057d2 <send_cmd>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 808b 	bne.w	8005a30 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800591a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800591e:	f7ff fe3b 	bl	8005598 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005922:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005926:	2008      	movs	r0, #8
 8005928:	f7ff ff53 	bl	80057d2 <send_cmd>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d151      	bne.n	80059d6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
 8005936:	e00d      	b.n	8005954 <USER_SPI_initialize+0xa4>
 8005938:	7bfc      	ldrb	r4, [r7, #15]
 800593a:	20ff      	movs	r0, #255	@ 0xff
 800593c:	f7ff fe56 	bl	80055ec <xchg_spi>
 8005940:	4603      	mov	r3, r0
 8005942:	461a      	mov	r2, r3
 8005944:	f104 0310 	add.w	r3, r4, #16
 8005948:	443b      	add	r3, r7
 800594a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3301      	adds	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d9ee      	bls.n	8005938 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800595a:	7abb      	ldrb	r3, [r7, #10]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d167      	bne.n	8005a30 <USER_SPI_initialize+0x180>
 8005960:	7afb      	ldrb	r3, [r7, #11]
 8005962:	2baa      	cmp	r3, #170	@ 0xaa
 8005964:	d164      	bne.n	8005a30 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005966:	bf00      	nop
 8005968:	f7ff fe2a 	bl	80055c0 <SPI_Timer_Status>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <USER_SPI_initialize+0xd2>
 8005972:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005976:	20a9      	movs	r0, #169	@ 0xa9
 8005978:	f7ff ff2b 	bl	80057d2 <send_cmd>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f2      	bne.n	8005968 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005982:	f7ff fe1d 	bl	80055c0 <SPI_Timer_Status>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d051      	beq.n	8005a30 <USER_SPI_initialize+0x180>
 800598c:	2100      	movs	r1, #0
 800598e:	203a      	movs	r0, #58	@ 0x3a
 8005990:	f7ff ff1f 	bl	80057d2 <send_cmd>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d14a      	bne.n	8005a30 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	e00d      	b.n	80059bc <USER_SPI_initialize+0x10c>
 80059a0:	7bfc      	ldrb	r4, [r7, #15]
 80059a2:	20ff      	movs	r0, #255	@ 0xff
 80059a4:	f7ff fe22 	bl	80055ec <xchg_spi>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	f104 0310 	add.w	r3, r4, #16
 80059b0:	443b      	add	r3, r7
 80059b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	3301      	adds	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d9ee      	bls.n	80059a0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80059c2:	7a3b      	ldrb	r3, [r7, #8]
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <USER_SPI_initialize+0x120>
 80059cc:	230c      	movs	r3, #12
 80059ce:	e000      	b.n	80059d2 <USER_SPI_initialize+0x122>
 80059d0:	2304      	movs	r3, #4
 80059d2:	737b      	strb	r3, [r7, #13]
 80059d4:	e02c      	b.n	8005a30 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80059d6:	2100      	movs	r1, #0
 80059d8:	20a9      	movs	r0, #169	@ 0xa9
 80059da:	f7ff fefa 	bl	80057d2 <send_cmd>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d804      	bhi.n	80059ee <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80059e4:	2302      	movs	r3, #2
 80059e6:	737b      	strb	r3, [r7, #13]
 80059e8:	23a9      	movs	r3, #169	@ 0xa9
 80059ea:	73bb      	strb	r3, [r7, #14]
 80059ec:	e003      	b.n	80059f6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80059ee:	2301      	movs	r3, #1
 80059f0:	737b      	strb	r3, [r7, #13]
 80059f2:	2301      	movs	r3, #1
 80059f4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80059f6:	bf00      	nop
 80059f8:	f7ff fde2 	bl	80055c0 <SPI_Timer_Status>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <USER_SPI_initialize+0x162>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fee3 	bl	80057d2 <send_cmd>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f2      	bne.n	80059f8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005a12:	f7ff fdd5 	bl	80055c0 <SPI_Timer_Status>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <USER_SPI_initialize+0x17c>
 8005a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a20:	2010      	movs	r0, #16
 8005a22:	f7ff fed6 	bl	80057d2 <send_cmd>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <USER_SPI_initialize+0x180>
				ty = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005a30:	4a14      	ldr	r2, [pc, #80]	@ (8005a84 <USER_SPI_initialize+0x1d4>)
 8005a32:	7b7b      	ldrb	r3, [r7, #13]
 8005a34:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005a36:	f7ff fe49 	bl	80056cc <despiselect>

	if (ty) {			/* OK */
 8005a3a:	7b7b      	ldrb	r3, [r7, #13]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005a40:	4b0f      	ldr	r3, [pc, #60]	@ (8005a80 <USER_SPI_initialize+0x1d0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <USER_SPI_initialize+0x1d0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0210 	orr.w	r2, r2, #16
 8005a52:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005a54:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f023 0301 	bic.w	r3, r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e002      	b.n	8005a6c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	@ (8005a7c <USER_SPI_initialize+0x1cc>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd90      	pop	{r4, r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000024 	.word	0x20000024
 8005a80:	20000f74 	.word	0x20000f74
 8005a84:	20001874 	.word	0x20001874

08005a88 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <USER_SPI_status+0x14>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e002      	b.n	8005aa2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <USER_SPI_status+0x28>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000024 	.word	0x20000024

08005ab4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <USER_SPI_read+0x1c>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USER_SPI_read+0x20>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	e04d      	b.n	8005b70 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005ad4:	4b28      	ldr	r3, [pc, #160]	@ (8005b78 <USER_SPI_read+0xc4>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <USER_SPI_read+0x32>
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e044      	b.n	8005b70 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005ae6:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <USER_SPI_read+0xc8>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <USER_SPI_read+0x44>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	025b      	lsls	r3, r3, #9
 8005af6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d111      	bne.n	8005b22 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	2011      	movs	r0, #17
 8005b02:	f7ff fe66 	bl	80057d2 <send_cmd>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d129      	bne.n	8005b60 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b10:	68b8      	ldr	r0, [r7, #8]
 8005b12:	f7ff fe03 	bl	800571c <rcvr_datablock>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d021      	beq.n	8005b60 <USER_SPI_read+0xac>
			count = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	e01e      	b.n	8005b60 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	2012      	movs	r0, #18
 8005b26:	f7ff fe54 	bl	80057d2 <send_cmd>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d117      	bne.n	8005b60 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005b30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b34:	68b8      	ldr	r0, [r7, #8]
 8005b36:	f7ff fdf1 	bl	800571c <rcvr_datablock>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <USER_SPI_read+0xa2>
				buff += 512;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005b46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ed      	bne.n	8005b30 <USER_SPI_read+0x7c>
 8005b54:	e000      	b.n	8005b58 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005b56:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005b58:	2100      	movs	r1, #0
 8005b5a:	200c      	movs	r0, #12
 8005b5c:	f7ff fe39 	bl	80057d2 <send_cmd>
		}
	}
	despiselect();
 8005b60:	f7ff fdb4 	bl	80056cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000024 	.word	0x20000024
 8005b7c:	20001874 	.word	0x20001874

08005b80 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <USER_SPI_write+0x1c>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USER_SPI_write+0x20>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	e063      	b.n	8005c68 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005ba0:	4b33      	ldr	r3, [pc, #204]	@ (8005c70 <USER_SPI_write+0xf0>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <USER_SPI_write+0x32>
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e05a      	b.n	8005c68 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c70 <USER_SPI_write+0xf0>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <USER_SPI_write+0x44>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e051      	b.n	8005c68 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <USER_SPI_write+0xf4>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <USER_SPI_write+0x56>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	025b      	lsls	r3, r3, #9
 8005bd4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d110      	bne.n	8005bfe <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	2018      	movs	r0, #24
 8005be0:	f7ff fdf7 	bl	80057d2 <send_cmd>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d136      	bne.n	8005c58 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005bea:	21fe      	movs	r1, #254	@ 0xfe
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f7ff fdbe 	bl	800576e <xmit_datablock>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02f      	beq.n	8005c58 <USER_SPI_write+0xd8>
			count = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	e02c      	b.n	8005c58 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <USER_SPI_write+0xf4>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	f003 0306 	and.w	r3, r3, #6
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <USER_SPI_write+0x92>
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	2097      	movs	r0, #151	@ 0x97
 8005c0e:	f7ff fde0 	bl	80057d2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	2019      	movs	r0, #25
 8005c16:	f7ff fddc 	bl	80057d2 <send_cmd>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11b      	bne.n	8005c58 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005c20:	21fc      	movs	r1, #252	@ 0xfc
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f7ff fda3 	bl	800576e <xmit_datablock>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <USER_SPI_write+0xc4>
				buff += 512;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c34:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ee      	bne.n	8005c20 <USER_SPI_write+0xa0>
 8005c42:	e000      	b.n	8005c46 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005c44:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005c46:	21fd      	movs	r1, #253	@ 0xfd
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7ff fd90 	bl	800576e <xmit_datablock>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USER_SPI_write+0xd8>
 8005c54:	2301      	movs	r3, #1
 8005c56:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005c58:	f7ff fd38 	bl	80056cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000024 	.word	0x20000024
 8005c74:	20001874 	.word	0x20001874

08005c78 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	@ 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	603a      	str	r2, [r7, #0]
 8005c82:	71fb      	strb	r3, [r7, #7]
 8005c84:	460b      	mov	r3, r1
 8005c86:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <USER_SPI_ioctl+0x1a>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e15a      	b.n	8005f48 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005c92:	4baf      	ldr	r3, [pc, #700]	@ (8005f50 <USER_SPI_ioctl+0x2d8>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USER_SPI_ioctl+0x2c>
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e151      	b.n	8005f48 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005caa:	79bb      	ldrb	r3, [r7, #6]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	f200 8136 	bhi.w	8005f1e <USER_SPI_ioctl+0x2a6>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <USER_SPI_ioctl+0x40>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005ccd 	.word	0x08005ccd
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005f1f 	.word	0x08005f1f
 8005cc4:	08005d8d 	.word	0x08005d8d
 8005cc8:	08005e83 	.word	0x08005e83
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005ccc:	f7ff fd0c 	bl	80056e8 <spiselect>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8127 	beq.w	8005f26 <USER_SPI_ioctl+0x2ae>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005cde:	e122      	b.n	8005f26 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	2009      	movs	r0, #9
 8005ce4:	f7ff fd75 	bl	80057d2 <send_cmd>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 811d 	bne.w	8005f2a <USER_SPI_ioctl+0x2b2>
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	2110      	movs	r1, #16
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fd10 	bl	800571c <rcvr_datablock>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8113 	beq.w	8005f2a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005d04:	7b3b      	ldrb	r3, [r7, #12]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d111      	bne.n	8005d32 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005d0e:	7d7b      	ldrb	r3, [r7, #21]
 8005d10:	461a      	mov	r2, r3
 8005d12:	7d3b      	ldrb	r3, [r7, #20]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	4413      	add	r3, r2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005d22:	4413      	add	r3, r2
 8005d24:	3301      	adds	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	029a      	lsls	r2, r3, #10
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e028      	b.n	8005d84 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005d32:	7c7b      	ldrb	r3, [r7, #17]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	7dbb      	ldrb	r3, [r7, #22]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	7d7b      	ldrb	r3, [r7, #21]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0306 	and.w	r3, r3, #6
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3302      	adds	r3, #2
 8005d56:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005d5a:	7d3b      	ldrb	r3, [r7, #20]
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	7cbb      	ldrb	r3, [r7, #18]
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d70:	4413      	add	r3, r2
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005d76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d7a:	3b09      	subs	r3, #9
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005d8a:	e0ce      	b.n	8005f2a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005d8c:	4b71      	ldr	r3, [pc, #452]	@ (8005f54 <USER_SPI_ioctl+0x2dc>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d031      	beq.n	8005dfc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005d98:	2100      	movs	r1, #0
 8005d9a:	208d      	movs	r0, #141	@ 0x8d
 8005d9c:	f7ff fd19 	bl	80057d2 <send_cmd>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 80c3 	bne.w	8005f2e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005da8:	20ff      	movs	r0, #255	@ 0xff
 8005daa:	f7ff fc1f 	bl	80055ec <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005dae:	f107 030c 	add.w	r3, r7, #12
 8005db2:	2110      	movs	r1, #16
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fcb1 	bl	800571c <rcvr_datablock>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80b6 	beq.w	8005f2e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005dc2:	2330      	movs	r3, #48	@ 0x30
 8005dc4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005dc8:	e007      	b.n	8005dda <USER_SPI_ioctl+0x162>
 8005dca:	20ff      	movs	r0, #255	@ 0xff
 8005dcc:	f7ff fc0e 	bl	80055ec <xchg_spi>
 8005dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005dda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f3      	bne.n	8005dca <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005de2:	7dbb      	ldrb	r3, [r7, #22]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	2310      	movs	r3, #16
 8005dec:	fa03 f202 	lsl.w	r2, r3, r2
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005dfa:	e098      	b.n	8005f2e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2009      	movs	r0, #9
 8005e00:	f7ff fce7 	bl	80057d2 <send_cmd>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 8091 	bne.w	8005f2e <USER_SPI_ioctl+0x2b6>
 8005e0c:	f107 030c 	add.w	r3, r7, #12
 8005e10:	2110      	movs	r1, #16
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fc82 	bl	800571c <rcvr_datablock>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8087 	beq.w	8005f2e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005e20:	4b4c      	ldr	r3, [pc, #304]	@ (8005f54 <USER_SPI_ioctl+0x2dc>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d012      	beq.n	8005e52 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005e2c:	7dbb      	ldrb	r3, [r7, #22]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005e34:	7dfa      	ldrb	r2, [r7, #23]
 8005e36:	09d2      	lsrs	r2, r2, #7
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	7e7b      	ldrb	r3, [r7, #25]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e013      	b.n	8005e7a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005e52:	7dbb      	ldrb	r3, [r7, #22]
 8005e54:	109b      	asrs	r3, r3, #2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	7dfa      	ldrb	r2, [r7, #23]
 8005e60:	00d2      	lsls	r2, r2, #3
 8005e62:	f002 0218 	and.w	r2, r2, #24
 8005e66:	7df9      	ldrb	r1, [r7, #23]
 8005e68:	0949      	lsrs	r1, r1, #5
 8005e6a:	b2c9      	uxtb	r1, r1
 8005e6c:	440a      	add	r2, r1
 8005e6e:	3201      	adds	r2, #1
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005e80:	e055      	b.n	8005f2e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005e82:	4b34      	ldr	r3, [pc, #208]	@ (8005f54 <USER_SPI_ioctl+0x2dc>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d051      	beq.n	8005f32 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005e8e:	f107 020c 	add.w	r2, r7, #12
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	210b      	movs	r1, #11
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff feee 	bl	8005c78 <USER_SPI_ioctl>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d149      	bne.n	8005f36 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005ea2:	7b3b      	ldrb	r3, [r7, #12]
 8005ea4:	099b      	lsrs	r3, r3, #6
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <USER_SPI_ioctl+0x23e>
 8005eac:	7dbb      	ldrb	r3, [r7, #22]
 8005eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d041      	beq.n	8005f3a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005ec6:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <USER_SPI_ioctl+0x2dc>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	025b      	lsls	r3, r3, #9
 8005ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	025b      	lsls	r3, r3, #9
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ee0:	2020      	movs	r0, #32
 8005ee2:	f7ff fc76 	bl	80057d2 <send_cmd>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d128      	bne.n	8005f3e <USER_SPI_ioctl+0x2c6>
 8005eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eee:	2021      	movs	r0, #33	@ 0x21
 8005ef0:	f7ff fc6f 	bl	80057d2 <send_cmd>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d121      	bne.n	8005f3e <USER_SPI_ioctl+0x2c6>
 8005efa:	2100      	movs	r1, #0
 8005efc:	2026      	movs	r0, #38	@ 0x26
 8005efe:	f7ff fc68 	bl	80057d2 <send_cmd>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11a      	bne.n	8005f3e <USER_SPI_ioctl+0x2c6>
 8005f08:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005f0c:	f7ff fbbb 	bl	8005686 <wait_ready>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005f1c:	e00f      	b.n	8005f3e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005f24:	e00c      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		break;
 8005f26:	bf00      	nop
 8005f28:	e00a      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		break;
 8005f2a:	bf00      	nop
 8005f2c:	e008      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		break;
 8005f2e:	bf00      	nop
 8005f30:	e006      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005f32:	bf00      	nop
 8005f34:	e004      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <USER_SPI_ioctl+0x2c8>
		break;
 8005f3e:	bf00      	nop
	}

	despiselect();
 8005f40:	f7ff fbc4 	bl	80056cc <despiselect>

	return res;
 8005f44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3730      	adds	r7, #48	@ 0x30
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000024 	.word	0x20000024
 8005f54:	20001874 	.word	0x20001874

08005f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f58:	480d      	ldr	r0, [pc, #52]	@ (8005f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f5c:	f7fe fb8c 	bl	8004678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f60:	480c      	ldr	r0, [pc, #48]	@ (8005f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f62:	490d      	ldr	r1, [pc, #52]	@ (8005f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f64:	4a0d      	ldr	r2, [pc, #52]	@ (8005f9c <LoopForever+0xe>)
  movs r3, #0
 8005f66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f68:	e002      	b.n	8005f70 <LoopCopyDataInit>

08005f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f6e:	3304      	adds	r3, #4

08005f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f74:	d3f9      	bcc.n	8005f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f76:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f78:	4c0a      	ldr	r4, [pc, #40]	@ (8005fa4 <LoopForever+0x16>)
  movs r3, #0
 8005f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f7c:	e001      	b.n	8005f82 <LoopFillZerobss>

08005f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f80:	3204      	adds	r2, #4

08005f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f84:	d3fb      	bcc.n	8005f7e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005f86:	f00e fe9f 	bl	8014cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f8a:	f7fc ff81 	bl	8002e90 <main>

08005f8e <LoopForever>:

LoopForever:
    b LoopForever
 8005f8e:	e7fe      	b.n	8005f8e <LoopForever>
  ldr   r0, =_estack
 8005f90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f98:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8005f9c:	0801c404 	.word	0x0801c404
  ldr r2, =_sbss
 8005fa0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005fa4:	20004a80 	.word	0x20004a80

08005fa8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fa8:	e7fe      	b.n	8005fa8 <COMP1_2_3_IRQHandler>

08005faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fb4:	2003      	movs	r0, #3
 8005fb6:	f001 fdb4 	bl	8007b22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fba:	200f      	movs	r0, #15
 8005fbc:	f7fe f944 	bl	8004248 <HAL_InitTick>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	71fb      	strb	r3, [r7, #7]
 8005fca:	e001      	b.n	8005fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fcc:	f7fe f912 	bl	80041f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fd0:	79fb      	ldrb	r3, [r7, #7]

}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_IncTick+0x1c>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <HAL_IncTick+0x20>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4a03      	ldr	r2, [pc, #12]	@ (8005ff8 <HAL_IncTick+0x1c>)
 8005fec:	6013      	str	r3, [r2, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	20001880 	.word	0x20001880
 8005ffc:	2000002c 	.word	0x2000002c

08006000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return uwTick;
 8006004:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <HAL_GetTick+0x14>)
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20001880 	.word	0x20001880

08006018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006020:	f7ff ffee 	bl	8006000 <HAL_GetTick>
 8006024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d004      	beq.n	800603c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006032:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <HAL_Delay+0x40>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800603c:	bf00      	nop
 800603e:	f7ff ffdf 	bl	8006000 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d8f7      	bhi.n	800603e <HAL_Delay+0x26>
  {
  }
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	2000002c 	.word	0x2000002c

0800605c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3360      	adds	r3, #96	@ 0x60
 80060d6:	461a      	mov	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <LL_ADC_SetOffset+0x44>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	03fff000 	.word	0x03fff000

0800610c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3360      	adds	r3, #96	@ 0x60
 800611a:	461a      	mov	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3360      	adds	r3, #96	@ 0x60
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	431a      	orrs	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800616e:	b480      	push	{r7}
 8006170:	b087      	sub	sp, #28
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3360      	adds	r3, #96	@ 0x60
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	431a      	orrs	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3360      	adds	r3, #96	@ 0x60
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	615a      	str	r2, [r3, #20]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3330      	adds	r3, #48	@ 0x30
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	4413      	add	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	211f      	movs	r1, #31
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	401a      	ands	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	0e9b      	lsrs	r3, r3, #26
 800625e:	f003 011f 	and.w	r1, r3, #31
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	431a      	orrs	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3314      	adds	r3, #20
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	0e5b      	lsrs	r3, r3, #25
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2107      	movs	r1, #7
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	43db      	mvns	r3, r3
 80062d8:	401a      	ands	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	431a      	orrs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006314:	43db      	mvns	r3, r3
 8006316:	401a      	ands	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f003 0318 	and.w	r3, r3, #24
 800631e:	4908      	ldr	r1, [pc, #32]	@ (8006340 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006320:	40d9      	lsrs	r1, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	400b      	ands	r3, r1
 8006326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632a:	431a      	orrs	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	0007ffff 	.word	0x0007ffff

08006344 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 031f 	and.w	r3, r3, #31
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800638c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6093      	str	r3, [r2, #8]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b4:	d101      	bne.n	80063ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80063d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006404:	d101      	bne.n	800640a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006428:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <LL_ADC_IsEnabled+0x18>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <LL_ADC_IsEnabled+0x1a>
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006476:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800647a:	f043 0204 	orr.w	r2, r3, #4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d101      	bne.n	80064a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d101      	bne.n	80064cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b089      	sub	sp, #36	@ 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e167      	b.n	80067c6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fb faff 	bl	8001b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff ff3f 	bl	80063a0 <LL_ADC_IsDeepPowerDownEnabled>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ff25 	bl	800637c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ff5a 	bl	80063f0 <LL_ADC_IsInternalRegulatorEnabled>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d115      	bne.n	800656e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff3e 	bl	80063c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800654c:	4ba0      	ldr	r3, [pc, #640]	@ (80067d0 <HAL_ADC_Init+0x2f4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	099b      	lsrs	r3, r3, #6
 8006552:	4aa0      	ldr	r2, [pc, #640]	@ (80067d4 <HAL_ADC_Init+0x2f8>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	099b      	lsrs	r3, r3, #6
 800655a:	3301      	adds	r3, #1
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006560:	e002      	b.n	8006568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b01      	subs	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f9      	bne.n	8006562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff ff3c 	bl	80063f0 <LL_ADC_IsInternalRegulatorEnabled>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006582:	f043 0210 	orr.w	r2, r3, #16
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff75 	bl	800648e <LL_ADC_REG_IsConversionOngoing>
 80065a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8100 	bne.w	80067b4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 80fc 	bne.w	80067b4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ff35 	bl	8006440 <LL_ADC_IsEnabled>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d111      	bne.n	8006600 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80065e0:	f7ff ff2e 	bl	8006440 <LL_ADC_IsEnabled>
 80065e4:	4604      	mov	r4, r0
 80065e6:	487c      	ldr	r0, [pc, #496]	@ (80067d8 <HAL_ADC_Init+0x2fc>)
 80065e8:	f7ff ff2a 	bl	8006440 <LL_ADC_IsEnabled>
 80065ec:	4603      	mov	r3, r0
 80065ee:	4323      	orrs	r3, r4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4619      	mov	r1, r3
 80065fa:	4878      	ldr	r0, [pc, #480]	@ (80067dc <HAL_ADC_Init+0x300>)
 80065fc:	f7ff fd2e 	bl	800605c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7f5b      	ldrb	r3, [r3, #29]
 8006604:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800660a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006610:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006616:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800661e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006620:	4313      	orrs	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800662a:	2b01      	cmp	r3, #1
 800662c:	d106      	bne.n	800663c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	045b      	lsls	r3, r3, #17
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006650:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	4b60      	ldr	r3, [pc, #384]	@ (80067e0 <HAL_ADC_Init+0x304>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	430b      	orrs	r3, r1
 800666a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ff14 	bl	80064b4 <LL_ADC_INJ_IsConversionOngoing>
 800668c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d16d      	bne.n	8006770 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d16a      	bne.n	8006770 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800669e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066b6:	f023 0302 	bic.w	r3, r3, #2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80066da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80066e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6911      	ldr	r1, [r2, #16]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80066fa:	e013      	b.n	8006724 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800670a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800671c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006720:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800672a:	2b01      	cmp	r3, #1
 800672c:	d118      	bne.n	8006760 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006738:	f023 0304 	bic.w	r3, r3, #4
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006744:	4311      	orrs	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800674a:	4311      	orrs	r1, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006750:	430a      	orrs	r2, r1
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	611a      	str	r2, [r3, #16]
 800675e:	e007      	b.n	8006770 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10c      	bne.n	8006792 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	f023 010f 	bic.w	r1, r3, #15
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	1e5a      	subs	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006790:	e007      	b.n	80067a2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 020f 	bic.w	r2, r2, #15
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0201 	orr.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067b2:	e007      	b.n	80067c4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b8:	f043 0210 	orr.w	r2, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80067c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	@ 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd90      	pop	{r4, r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000020 	.word	0x20000020
 80067d4:	053e2d63 	.word	0x053e2d63
 80067d8:	50000100 	.word	0x50000100
 80067dc:	50000300 	.word	0x50000300
 80067e0:	fff04007 	.word	0xfff04007

080067e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067f0:	4851      	ldr	r0, [pc, #324]	@ (8006938 <HAL_ADC_Start_DMA+0x154>)
 80067f2:	f7ff fda7 	bl	8006344 <LL_ADC_GetMultimode>
 80067f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fe46 	bl	800648e <LL_ADC_REG_IsConversionOngoing>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 808f 	bne.w	8006928 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_ADC_Start_DMA+0x34>
 8006814:	2302      	movs	r3, #2
 8006816:	e08a      	b.n	800692e <HAL_ADC_Start_DMA+0x14a>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b05      	cmp	r3, #5
 800682a:	d002      	beq.n	8006832 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b09      	cmp	r3, #9
 8006830:	d173      	bne.n	800691a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 feb2 	bl	800759c <ADC_Enable>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d166      	bne.n	8006910 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006846:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a38      	ldr	r2, [pc, #224]	@ (800693c <HAL_ADC_Start_DMA+0x158>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d002      	beq.n	8006866 <HAL_ADC_Start_DMA+0x82>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	e001      	b.n	800686a <HAL_ADC_Start_DMA+0x86>
 8006866:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	4293      	cmp	r3, r2
 8006870:	d002      	beq.n	8006878 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006894:	f023 0206 	bic.w	r2, r3, #6
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	661a      	str	r2, [r3, #96]	@ 0x60
 800689c:	e002      	b.n	80068a4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a8:	4a25      	ldr	r2, [pc, #148]	@ (8006940 <HAL_ADC_Start_DMA+0x15c>)
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b0:	4a24      	ldr	r2, [pc, #144]	@ (8006944 <HAL_ADC_Start_DMA+0x160>)
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b8:	4a23      	ldr	r2, [pc, #140]	@ (8006948 <HAL_ADC_Start_DMA+0x164>)
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	221c      	movs	r2, #28
 80068c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0210 	orr.w	r2, r2, #16
 80068da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3340      	adds	r3, #64	@ 0x40
 80068f6:	4619      	mov	r1, r3
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f001 f9ec 	bl	8007cd8 <HAL_DMA_Start_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fdac 	bl	8006466 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800690e:	e00d      	b.n	800692c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006918:	e008      	b.n	800692c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006926:	e001      	b.n	800692c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006928:	2302      	movs	r3, #2
 800692a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	50000300 	.word	0x50000300
 800693c:	50000100 	.word	0x50000100
 8006940:	080076a9 	.word	0x080076a9
 8006944:	08007781 	.word	0x08007781
 8006948:	0800779d 	.word	0x0800779d

0800694c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	@ 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006954:	2300      	movs	r3, #0
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006968:	4883      	ldr	r0, [pc, #524]	@ (8006b78 <HAL_ADC_IRQHandler+0x22c>)
 800696a:	f7ff fceb 	bl	8006344 <LL_ADC_GetMultimode>
 800696e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_ADC_IRQHandler+0x5e>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006994:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 ff65 	bl	800786c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2202      	movs	r2, #2
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_ADC_IRQHandler+0x72>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8085 	beq.w	8006ad4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d07f      	beq.n	8006ad4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fc05 	bl	8006200 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d064      	beq.n	8006ac6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5e      	ldr	r2, [pc, #376]	@ (8006b7c <HAL_ADC_IRQHandler+0x230>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d002      	beq.n	8006a0c <HAL_ADC_IRQHandler+0xc0>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	e001      	b.n	8006a10 <HAL_ADC_IRQHandler+0xc4>
 8006a0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d008      	beq.n	8006a2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b05      	cmp	r3, #5
 8006a22:	d002      	beq.n	8006a2a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	d104      	bne.n	8006a34 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	e00d      	b.n	8006a50 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a50      	ldr	r2, [pc, #320]	@ (8006b7c <HAL_ADC_IRQHandler+0x230>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d002      	beq.n	8006a44 <HAL_ADC_IRQHandler+0xf8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	e001      	b.n	8006a48 <HAL_ADC_IRQHandler+0xfc>
 8006a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006a48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d135      	bne.n	8006ac6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d12e      	bne.n	8006ac6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fd0e 	bl	800648e <LL_ADC_REG_IsConversionOngoing>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 020c 	bic.w	r2, r2, #12
 8006a86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d112      	bne.n	8006ac6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006aac:	e00b      	b.n	8006ac6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab2:	f043 0210 	orr.w	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fb f8aa 	bl	8001c20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	220c      	movs	r2, #12
 8006ad2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_ADC_IRQHandler+0x19c>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 809e 	beq.w	8006c30 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8098 	beq.w	8006c30 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fbae 	bl	800627e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006b22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fb69 	bl	8006200 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a11      	ldr	r2, [pc, #68]	@ (8006b7c <HAL_ADC_IRQHandler+0x230>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d002      	beq.n	8006b40 <HAL_ADC_IRQHandler+0x1f4>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	e001      	b.n	8006b44 <HAL_ADC_IRQHandler+0x1f8>
 8006b40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d008      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b06      	cmp	r3, #6
 8006b56:	d002      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b07      	cmp	r3, #7
 8006b5c:	d104      	bne.n	8006b68 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	e011      	b.n	8006b8c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a03      	ldr	r2, [pc, #12]	@ (8006b7c <HAL_ADC_IRQHandler+0x230>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d006      	beq.n	8006b80 <HAL_ADC_IRQHandler+0x234>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	e005      	b.n	8006b84 <HAL_ADC_IRQHandler+0x238>
 8006b78:	50000300 	.word	0x50000300
 8006b7c:	50000100 	.word	0x50000100
 8006b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b84:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d047      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <HAL_ADC_IRQHandler+0x260>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d03f      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d13a      	bne.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb6:	2b40      	cmp	r3, #64	@ 0x40
 8006bb8:	d133      	bne.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d12e      	bne.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fc73 	bl	80064b4 <LL_ADC_INJ_IsConversionOngoing>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11a      	bne.n	8006c0a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006be2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d112      	bne.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c00:	f043 0201 	orr.w	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c08:	e00b      	b.n	8006c22 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0e:	f043 0210 	orr.w	r2, r3, #16
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1a:	f043 0201 	orr.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fdfa 	bl	800781c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2260      	movs	r2, #96	@ 0x60
 8006c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_ADC_IRQHandler+0x312>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f89f 	bl	8006d94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2280      	movs	r2, #128	@ 0x80
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <HAL_ADC_IRQHandler+0x342>
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fde0 	bl	8007844 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x372>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00d      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fdd2 	bl	8007858 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d036      	beq.n	8006d36 <HAL_ADC_IRQHandler+0x3ea>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d031      	beq.n	8006d36 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	e014      	b.n	8006d0a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006ce6:	4825      	ldr	r0, [pc, #148]	@ (8006d7c <HAL_ADC_IRQHandler+0x430>)
 8006ce8:	f7ff fb3a 	bl	8006360 <LL_ADC_GetMultiDMATransfer>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf6:	e008      	b.n	8006d0a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006d06:	2301      	movs	r3, #1
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d10e      	bne.n	8006d2e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d20:	f043 0202 	orr.w	r2, r3, #2
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f83d 	bl	8006da8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d018      	beq.n	8006d72 <HAL_ADC_IRQHandler+0x426>
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d013      	beq.n	8006d72 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5a:	f043 0208 	orr.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fd5f 	bl	8007830 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006d72:	bf00      	nop
 8006d74:	3728      	adds	r7, #40	@ 0x28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	50000300 	.word	0x50000300

08006d80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0b6      	sub	sp, #216	@ 0xd8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_ADC_ConfigChannel+0x22>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e3c8      	b.n	8007570 <HAL_ADC_ConfigChannel+0x7b4>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fb4f 	bl	800648e <LL_ADC_REG_IsConversionOngoing>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 83ad 	bne.w	8007552 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	f7ff fa0e 	bl	8006226 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fb3d 	bl	800648e <LL_ADC_REG_IsConversionOngoing>
 8006e14:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fb49 	bl	80064b4 <LL_ADC_INJ_IsConversionOngoing>
 8006e22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f040 81d9 	bne.w	80071e2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 81d4 	bne.w	80071e2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e42:	d10f      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f7ff fa28 	bl	80062a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff f9bc 	bl	80061da <LL_ADC_SetSamplingTimeCommonConfig>
 8006e62:	e00e      	b.n	8006e82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	6819      	ldr	r1, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f7ff fa17 	bl	80062a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff f9ac 	bl	80061da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	08db      	lsrs	r3, r3, #3
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d022      	beq.n	8006eea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6919      	ldr	r1, [r3, #16]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eb4:	f7ff f906 	bl	80060c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6919      	ldr	r1, [r3, #16]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f7ff f952 	bl	800616e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x124>
 8006eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ede:	e000      	b.n	8006ee2 <HAL_ADC_ConfigChannel+0x126>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f7ff f95e 	bl	80061a4 <LL_ADC_SetOffsetSaturation>
 8006ee8:	e17b      	b.n	80071e2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff f90b 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x15a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff f900 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	0e9b      	lsrs	r3, r3, #26
 8006f10:	f003 021f 	and.w	r2, r3, #31
 8006f14:	e01e      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x198>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff f8f5 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f2c:	fa93 f3a3 	rbit	r3, r3
 8006f30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006f44:	2320      	movs	r3, #32
 8006f46:	e004      	b.n	8006f52 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x1b0>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	0e9b      	lsrs	r3, r3, #26
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	e018      	b.n	8006f9e <HAL_ADC_ConfigChannel+0x1e2>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006f90:	2320      	movs	r3, #32
 8006f92:	e004      	b.n	8006f9e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f98:	fab3 f383 	clz	r3, r3
 8006f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d106      	bne.n	8006fb0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff f8c4 	bl	8006138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff f8a8 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_ADC_ConfigChannel+0x220>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff f89d 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	0e9b      	lsrs	r3, r3, #26
 8006fd6:	f003 021f 	and.w	r2, r3, #31
 8006fda:	e01e      	b.n	800701a <HAL_ADC_ConfigChannel+0x25e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff f892 	bl	800610c <LL_ADC_GetOffsetChannel>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ff2:	fa93 f3a3 	rbit	r3, r3
 8006ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800700a:	2320      	movs	r3, #32
 800700c:	e004      	b.n	8007018 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800700e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x276>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	0e9b      	lsrs	r3, r3, #26
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	e018      	b.n	8007064 <HAL_ADC_ConfigChannel+0x2a8>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800703e:	fa93 f3a3 	rbit	r3, r3
 8007042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007046:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800704a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800704e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007056:	2320      	movs	r3, #32
 8007058:	e004      	b.n	8007064 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800705a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007064:	429a      	cmp	r2, r3
 8007066:	d106      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2200      	movs	r2, #0
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff f861 	bl	8006138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff f845 	bl	800610c <LL_ADC_GetOffsetChannel>
 8007082:	4603      	mov	r3, r0
 8007084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <HAL_ADC_ConfigChannel+0x2e6>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2102      	movs	r1, #2
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff f83a 	bl	800610c <LL_ADC_GetOffsetChannel>
 8007098:	4603      	mov	r3, r0
 800709a:	0e9b      	lsrs	r3, r3, #26
 800709c:	f003 021f 	and.w	r2, r3, #31
 80070a0:	e01e      	b.n	80070e0 <HAL_ADC_ConfigChannel+0x324>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2102      	movs	r1, #2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff f82f 	bl	800610c <LL_ADC_GetOffsetChannel>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070b8:	fa93 f3a3 	rbit	r3, r3
 80070bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80070c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80070c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80070d0:	2320      	movs	r3, #32
 80070d2:	e004      	b.n	80070de <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80070d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070d8:	fab3 f383 	clz	r3, r3
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <HAL_ADC_ConfigChannel+0x33c>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0e9b      	lsrs	r3, r3, #26
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	e016      	b.n	8007126 <HAL_ADC_ConfigChannel+0x36a>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007104:	fa93 f3a3 	rbit	r3, r3
 8007108:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800710a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800710c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007118:	2320      	movs	r3, #32
 800711a:	e004      	b.n	8007126 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800711c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007120:	fab3 f383 	clz	r3, r3
 8007124:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007126:	429a      	cmp	r2, r3
 8007128:	d106      	bne.n	8007138 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2200      	movs	r2, #0
 8007130:	2102      	movs	r1, #2
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff f800 	bl	8006138 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2103      	movs	r1, #3
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe ffe4 	bl	800610c <LL_ADC_GetOffsetChannel>
 8007144:	4603      	mov	r3, r0
 8007146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_ADC_ConfigChannel+0x3a8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2103      	movs	r1, #3
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe ffd9 	bl	800610c <LL_ADC_GetOffsetChannel>
 800715a:	4603      	mov	r3, r0
 800715c:	0e9b      	lsrs	r3, r3, #26
 800715e:	f003 021f 	and.w	r2, r3, #31
 8007162:	e017      	b.n	8007194 <HAL_ADC_ConfigChannel+0x3d8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2103      	movs	r1, #3
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe ffce 	bl	800610c <LL_ADC_GetOffsetChannel>
 8007170:	4603      	mov	r3, r0
 8007172:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800717c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800717e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007186:	2320      	movs	r3, #32
 8007188:	e003      	b.n	8007192 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800718a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800718c:	fab3 f383 	clz	r3, r3
 8007190:	b2db      	uxtb	r3, r3
 8007192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x3f0>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	0e9b      	lsrs	r3, r3, #26
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	e011      	b.n	80071d0 <HAL_ADC_ConfigChannel+0x414>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071b4:	fa93 f3a3 	rbit	r3, r3
 80071b8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80071ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80071be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80071c4:	2320      	movs	r3, #32
 80071c6:	e003      	b.n	80071d0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80071c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ca:	fab3 f383 	clz	r3, r3
 80071ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d106      	bne.n	80071e2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	2103      	movs	r1, #3
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe ffab 	bl	8006138 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff f92a 	bl	8006440 <LL_ADC_IsEnabled>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f040 8140 	bne.w	8007474 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6819      	ldr	r1, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	461a      	mov	r2, r3
 8007202:	f7ff f87b 	bl	80062fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	4a8f      	ldr	r2, [pc, #572]	@ (8007448 <HAL_ADC_ConfigChannel+0x68c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	f040 8131 	bne.w	8007474 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <HAL_ADC_ConfigChannel+0x47e>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	0e9b      	lsrs	r3, r3, #26
 8007228:	3301      	adds	r3, #1
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	2b09      	cmp	r3, #9
 8007230:	bf94      	ite	ls
 8007232:	2301      	movls	r3, #1
 8007234:	2300      	movhi	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	e019      	b.n	800726e <HAL_ADC_ConfigChannel+0x4b2>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007242:	fa93 f3a3 	rbit	r3, r3
 8007246:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800724a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800724c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007252:	2320      	movs	r3, #32
 8007254:	e003      	b.n	800725e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8007256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007258:	fab3 f383 	clz	r3, r3
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3301      	adds	r3, #1
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2b09      	cmp	r3, #9
 8007266:	bf94      	ite	ls
 8007268:	2301      	movls	r3, #1
 800726a:	2300      	movhi	r3, #0
 800726c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800726e:	2b00      	cmp	r3, #0
 8007270:	d079      	beq.n	8007366 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <HAL_ADC_ConfigChannel+0x4d2>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	0e9b      	lsrs	r3, r3, #26
 8007284:	3301      	adds	r3, #1
 8007286:	069b      	lsls	r3, r3, #26
 8007288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800728c:	e015      	b.n	80072ba <HAL_ADC_ConfigChannel+0x4fe>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007296:	fa93 f3a3 	rbit	r3, r3
 800729a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800729c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800729e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80072a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80072a6:	2320      	movs	r3, #32
 80072a8:	e003      	b.n	80072b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80072aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ac:	fab3 f383 	clz	r3, r3
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	3301      	adds	r3, #1
 80072b4:	069b      	lsls	r3, r3, #26
 80072b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <HAL_ADC_ConfigChannel+0x51e>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	0e9b      	lsrs	r3, r3, #26
 80072cc:	3301      	adds	r3, #1
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2101      	movs	r1, #1
 80072d4:	fa01 f303 	lsl.w	r3, r1, r3
 80072d8:	e017      	b.n	800730a <HAL_ADC_ConfigChannel+0x54e>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e2:	fa93 f3a3 	rbit	r3, r3
 80072e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80072e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80072ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80072f2:	2320      	movs	r3, #32
 80072f4:	e003      	b.n	80072fe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80072f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f8:	fab3 f383 	clz	r3, r3
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	3301      	adds	r3, #1
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2101      	movs	r1, #1
 8007306:	fa01 f303 	lsl.w	r3, r1, r3
 800730a:	ea42 0103 	orr.w	r1, r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x574>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	0e9b      	lsrs	r3, r3, #26
 8007320:	3301      	adds	r3, #1
 8007322:	f003 021f 	and.w	r2, r3, #31
 8007326:	4613      	mov	r3, r2
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	e018      	b.n	8007362 <HAL_ADC_ConfigChannel+0x5a6>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	fa93 f3a3 	rbit	r3, r3
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007348:	2320      	movs	r3, #32
 800734a:	e003      	b.n	8007354 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	3301      	adds	r3, #1
 8007356:	f003 021f 	and.w	r2, r3, #31
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007362:	430b      	orrs	r3, r1
 8007364:	e081      	b.n	800746a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x5c6>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	0e9b      	lsrs	r3, r3, #26
 8007378:	3301      	adds	r3, #1
 800737a:	069b      	lsls	r3, r3, #26
 800737c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007380:	e015      	b.n	80073ae <HAL_ADC_ConfigChannel+0x5f2>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738a:	fa93 f3a3 	rbit	r3, r3
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800739a:	2320      	movs	r3, #32
 800739c:	e003      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3301      	adds	r3, #1
 80073a8:	069b      	lsls	r3, r3, #26
 80073aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <HAL_ADC_ConfigChannel+0x612>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	0e9b      	lsrs	r3, r3, #26
 80073c0:	3301      	adds	r3, #1
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2101      	movs	r1, #1
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	e017      	b.n	80073fe <HAL_ADC_ConfigChannel+0x642>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	fa93 f3a3 	rbit	r3, r3
 80073da:	61fb      	str	r3, [r7, #28]
  return result;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80073e6:	2320      	movs	r3, #32
 80073e8:	e003      	b.n	80073f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	fab3 f383 	clz	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	3301      	adds	r3, #1
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2101      	movs	r1, #1
 80073fa:	fa01 f303 	lsl.w	r3, r1, r3
 80073fe:	ea42 0103 	orr.w	r1, r2, r3
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <HAL_ADC_ConfigChannel+0x66e>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	0e9b      	lsrs	r3, r3, #26
 8007414:	3301      	adds	r3, #1
 8007416:	f003 021f 	and.w	r2, r3, #31
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	3b1e      	subs	r3, #30
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007428:	e01e      	b.n	8007468 <HAL_ADC_ConfigChannel+0x6ac>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	fa93 f3a3 	rbit	r3, r3
 8007436:	613b      	str	r3, [r7, #16]
  return result;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007442:	2320      	movs	r3, #32
 8007444:	e006      	b.n	8007454 <HAL_ADC_ConfigChannel+0x698>
 8007446:	bf00      	nop
 8007448:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	fab3 f383 	clz	r3, r3
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3301      	adds	r3, #1
 8007456:	f003 021f 	and.w	r2, r3, #31
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	3b1e      	subs	r3, #30
 8007462:	051b      	lsls	r3, r3, #20
 8007464:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007468:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800746e:	4619      	mov	r1, r3
 8007470:	f7fe ff18 	bl	80062a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	4b3f      	ldr	r3, [pc, #252]	@ (8007578 <HAL_ADC_ConfigChannel+0x7bc>)
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d071      	beq.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007480:	483e      	ldr	r0, [pc, #248]	@ (800757c <HAL_ADC_ConfigChannel+0x7c0>)
 8007482:	f7fe fe11 	bl	80060a8 <LL_ADC_GetCommonPathInternalCh>
 8007486:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a3c      	ldr	r2, [pc, #240]	@ (8007580 <HAL_ADC_ConfigChannel+0x7c4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_ADC_ConfigChannel+0x6e2>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3a      	ldr	r2, [pc, #232]	@ (8007584 <HAL_ADC_ConfigChannel+0x7c8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d127      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800749e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d121      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074b2:	d157      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074bc:	4619      	mov	r1, r3
 80074be:	482f      	ldr	r0, [pc, #188]	@ (800757c <HAL_ADC_ConfigChannel+0x7c0>)
 80074c0:	f7fe fddf 	bl	8006082 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074c4:	4b30      	ldr	r3, [pc, #192]	@ (8007588 <HAL_ADC_ConfigChannel+0x7cc>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	099b      	lsrs	r3, r3, #6
 80074ca:	4a30      	ldr	r2, [pc, #192]	@ (800758c <HAL_ADC_ConfigChannel+0x7d0>)
 80074cc:	fba2 2303 	umull	r2, r3, r2, r3
 80074d0:	099b      	lsrs	r3, r3, #6
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	4613      	mov	r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074de:	e002      	b.n	80074e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f9      	bne.n	80074e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074ec:	e03a      	b.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a27      	ldr	r2, [pc, #156]	@ (8007590 <HAL_ADC_ConfigChannel+0x7d4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d113      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a22      	ldr	r2, [pc, #136]	@ (8007594 <HAL_ADC_ConfigChannel+0x7d8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d02a      	beq.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800750e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007516:	4619      	mov	r1, r3
 8007518:	4818      	ldr	r0, [pc, #96]	@ (800757c <HAL_ADC_ConfigChannel+0x7c0>)
 800751a:	f7fe fdb2 	bl	8006082 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800751e:	e021      	b.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1c      	ldr	r2, [pc, #112]	@ (8007598 <HAL_ADC_ConfigChannel+0x7dc>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d11c      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800752a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800752e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d116      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a16      	ldr	r2, [pc, #88]	@ (8007594 <HAL_ADC_ConfigChannel+0x7d8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d011      	beq.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007544:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007548:	4619      	mov	r1, r3
 800754a:	480c      	ldr	r0, [pc, #48]	@ (800757c <HAL_ADC_ConfigChannel+0x7c0>)
 800754c:	f7fe fd99 	bl	8006082 <LL_ADC_SetCommonPathInternalCh>
 8007550:	e008      	b.n	8007564 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007556:	f043 0220 	orr.w	r2, r3, #32
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800756c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007570:	4618      	mov	r0, r3
 8007572:	37d8      	adds	r7, #216	@ 0xd8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	80080000 	.word	0x80080000
 800757c:	50000300 	.word	0x50000300
 8007580:	c3210000 	.word	0xc3210000
 8007584:	90c00010 	.word	0x90c00010
 8007588:	20000020 	.word	0x20000020
 800758c:	053e2d63 	.word	0x053e2d63
 8007590:	c7520000 	.word	0xc7520000
 8007594:	50000100 	.word	0x50000100
 8007598:	cb840000 	.word	0xcb840000

0800759c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe ff47 	bl	8006440 <LL_ADC_IsEnabled>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d169      	bne.n	800768c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	4b36      	ldr	r3, [pc, #216]	@ (8007698 <ADC_Enable+0xfc>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00d      	beq.n	80075e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ca:	f043 0210 	orr.w	r2, r3, #16
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075d6:	f043 0201 	orr.w	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e055      	b.n	800768e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe ff16 	bl	8006418 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80075ec:	482b      	ldr	r0, [pc, #172]	@ (800769c <ADC_Enable+0x100>)
 80075ee:	f7fe fd5b 	bl	80060a8 <LL_ADC_GetCommonPathInternalCh>
 80075f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80075f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075fc:	4b28      	ldr	r3, [pc, #160]	@ (80076a0 <ADC_Enable+0x104>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	099b      	lsrs	r3, r3, #6
 8007602:	4a28      	ldr	r2, [pc, #160]	@ (80076a4 <ADC_Enable+0x108>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	099b      	lsrs	r3, r3, #6
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007616:	e002      	b.n	800761e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3b01      	subs	r3, #1
 800761c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f9      	bne.n	8007618 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007624:	f7fe fcec 	bl	8006000 <HAL_GetTick>
 8007628:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800762a:	e028      	b.n	800767e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe ff05 	bl	8006440 <LL_ADC_IsEnabled>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fee9 	bl	8006418 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007646:	f7fe fcdb 	bl	8006000 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d914      	bls.n	800767e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b01      	cmp	r3, #1
 8007660:	d00d      	beq.n	800767e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007666:	f043 0210 	orr.w	r2, r3, #16
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007672:	f043 0201 	orr.w	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e007      	b.n	800768e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b01      	cmp	r3, #1
 800768a:	d1cf      	bne.n	800762c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	8000003f 	.word	0x8000003f
 800769c:	50000300 	.word	0x50000300
 80076a0:	20000020 	.word	0x20000020
 80076a4:	053e2d63 	.word	0x053e2d63

080076a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d14b      	bne.n	800775a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d021      	beq.n	8007720 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fd8d 	bl	8006200 <LL_ADC_REG_IsTriggerSourceSWStart>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d032      	beq.n	8007752 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d12b      	bne.n	8007752 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11f      	bne.n	8007752 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007716:	f043 0201 	orr.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800771e:	e018      	b.n	8007752 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d111      	bne.n	8007752 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007732:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7fa fa64 	bl	8001c20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007758:	e00e      	b.n	8007778 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fb1e 	bl	8006da8 <HAL_ADC_ErrorCallback>
}
 800776c:	e004      	b.n	8007778 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff faf6 	bl	8006d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff faf0 	bl	8006da8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <LL_ADC_IsEnabled>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <LL_ADC_IsEnabled+0x18>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <LL_ADC_IsEnabled+0x1a>
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d101      	bne.n	800780e <LL_ADC_REG_IsConversionOngoing+0x18>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b0a1      	sub	sp, #132	@ 0x84
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800789a:	2302      	movs	r3, #2
 800789c:	e08b      	b.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80078a6:	2300      	movs	r3, #0
 80078a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80078aa:	2300      	movs	r3, #0
 80078ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078b6:	d102      	bne.n	80078be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80078b8:	4b41      	ldr	r3, [pc, #260]	@ (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	e001      	b.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10b      	bne.n	80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078cc:	f043 0220 	orr.w	r2, r3, #32
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e06a      	b.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff ff87 	bl	80077f6 <LL_ADC_REG_IsConversionOngoing>
 80078e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff ff81 	bl	80077f6 <LL_ADC_REG_IsConversionOngoing>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d14c      	bne.n	8007994 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80078fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d149      	bne.n	8007994 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007900:	4b30      	ldr	r3, [pc, #192]	@ (80079c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007902:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d028      	beq.n	800795e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800790c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800791e:	035b      	lsls	r3, r3, #13
 8007920:	430b      	orrs	r3, r1
 8007922:	431a      	orrs	r2, r3
 8007924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007926:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007928:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800792c:	f7ff ff50 	bl	80077d0 <LL_ADC_IsEnabled>
 8007930:	4604      	mov	r4, r0
 8007932:	4823      	ldr	r0, [pc, #140]	@ (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007934:	f7ff ff4c 	bl	80077d0 <LL_ADC_IsEnabled>
 8007938:	4603      	mov	r3, r0
 800793a:	4323      	orrs	r3, r4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d133      	bne.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007948:	f023 030f 	bic.w	r3, r3, #15
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6811      	ldr	r1, [r2, #0]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	6892      	ldr	r2, [r2, #8]
 8007954:	430a      	orrs	r2, r1
 8007956:	431a      	orrs	r2, r3
 8007958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800795a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800795c:	e024      	b.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800795e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007968:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800796a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800796e:	f7ff ff2f 	bl	80077d0 <LL_ADC_IsEnabled>
 8007972:	4604      	mov	r4, r0
 8007974:	4812      	ldr	r0, [pc, #72]	@ (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007976:	f7ff ff2b 	bl	80077d0 <LL_ADC_IsEnabled>
 800797a:	4603      	mov	r3, r0
 800797c:	4323      	orrs	r3, r4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d112      	bne.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800798a:	f023 030f 	bic.w	r3, r3, #15
 800798e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007990:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007992:	e009      	b.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80079a6:	e000      	b.n	80079aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80079b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3784      	adds	r7, #132	@ 0x84
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd90      	pop	{r4, r7, pc}
 80079be:	bf00      	nop
 80079c0:	50000100 	.word	0x50000100
 80079c4:	50000300 	.word	0x50000300

080079c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079d8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a0c <__NVIC_SetPriorityGrouping+0x44>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80079e4:	4013      	ands	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80079f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079fa:	4a04      	ldr	r2, [pc, #16]	@ (8007a0c <__NVIC_SetPriorityGrouping+0x44>)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	60d3      	str	r3, [r2, #12]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	e000ed00 	.word	0xe000ed00

08007a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <__NVIC_GetPriorityGrouping+0x18>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	f003 0307 	and.w	r3, r3, #7
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	e000ed00 	.word	0xe000ed00

08007a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	db0b      	blt.n	8007a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	f003 021f 	and.w	r2, r3, #31
 8007a44:	4907      	ldr	r1, [pc, #28]	@ (8007a64 <__NVIC_EnableIRQ+0x38>)
 8007a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	e000e100 	.word	0xe000e100

08007a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db0a      	blt.n	8007a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	490c      	ldr	r1, [pc, #48]	@ (8007ab4 <__NVIC_SetPriority+0x4c>)
 8007a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a86:	0112      	lsls	r2, r2, #4
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a90:	e00a      	b.n	8007aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	4908      	ldr	r1, [pc, #32]	@ (8007ab8 <__NVIC_SetPriority+0x50>)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	3b04      	subs	r3, #4
 8007aa0:	0112      	lsls	r2, r2, #4
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	761a      	strb	r2, [r3, #24]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	e000e100 	.word	0xe000e100
 8007ab8:	e000ed00 	.word	0xe000ed00

08007abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b089      	sub	sp, #36	@ 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f1c3 0307 	rsb	r3, r3, #7
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	bf28      	it	cs
 8007ada:	2304      	movcs	r3, #4
 8007adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	2b06      	cmp	r3, #6
 8007ae4:	d902      	bls.n	8007aec <NVIC_EncodePriority+0x30>
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3b03      	subs	r3, #3
 8007aea:	e000      	b.n	8007aee <NVIC_EncodePriority+0x32>
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	43da      	mvns	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	401a      	ands	r2, r3
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b04:	f04f 31ff 	mov.w	r1, #4294967295
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b0e:	43d9      	mvns	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b14:	4313      	orrs	r3, r2
         );
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3724      	adds	r7, #36	@ 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ff4c 	bl	80079c8 <__NVIC_SetPriorityGrouping>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b46:	f7ff ff63 	bl	8007a10 <__NVIC_GetPriorityGrouping>
 8007b4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f7ff ffb3 	bl	8007abc <NVIC_EncodePriority>
 8007b56:	4602      	mov	r2, r0
 8007b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff ff82 	bl	8007a68 <__NVIC_SetPriority>
}
 8007b64:	bf00      	nop
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff ff56 	bl	8007a2c <__NVIC_EnableIRQ>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e08d      	b.n	8007cb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b47      	ldr	r3, [pc, #284]	@ (8007cc0 <HAL_DMA_Init+0x138>)
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d80f      	bhi.n	8007bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	4b45      	ldr	r3, [pc, #276]	@ (8007cc4 <HAL_DMA_Init+0x13c>)
 8007bae:	4413      	add	r3, r2
 8007bb0:	4a45      	ldr	r2, [pc, #276]	@ (8007cc8 <HAL_DMA_Init+0x140>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	091b      	lsrs	r3, r3, #4
 8007bb8:	009a      	lsls	r2, r3, #2
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a42      	ldr	r2, [pc, #264]	@ (8007ccc <HAL_DMA_Init+0x144>)
 8007bc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8007bc4:	e00e      	b.n	8007be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b40      	ldr	r3, [pc, #256]	@ (8007cd0 <HAL_DMA_Init+0x148>)
 8007bce:	4413      	add	r3, r2
 8007bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8007cc8 <HAL_DMA_Init+0x140>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	091b      	lsrs	r3, r3, #4
 8007bd8:	009a      	lsls	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd4 <HAL_DMA_Init+0x14c>)
 8007be2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa82 	bl	8008140 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c44:	d102      	bne.n	8007c4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d010      	beq.n	8007c8c <HAL_DMA_Init+0x104>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d80c      	bhi.n	8007c8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 faa2 	bl	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	e008      	b.n	8007c9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40020407 	.word	0x40020407
 8007cc4:	bffdfff8 	.word	0xbffdfff8
 8007cc8:	cccccccd 	.word	0xcccccccd
 8007ccc:	40020000 	.word	0x40020000
 8007cd0:	bffdfbf8 	.word	0xbffdfbf8
 8007cd4:	40020400 	.word	0x40020400

08007cd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_Start_IT+0x20>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e066      	b.n	8007dc6 <HAL_DMA_Start_IT+0xee>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d155      	bne.n	8007db8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f9c7 	bl	80080c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 020e 	orr.w	r2, r2, #14
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e00f      	b.n	8007d70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0204 	bic.w	r2, r2, #4
 8007d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 020a 	orr.w	r2, r2, #10
 8007d6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007da4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0201 	orr.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e005      	b.n	8007dc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d005      	beq.n	8007df2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2204      	movs	r2, #4
 8007dea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e037      	b.n	8007e62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 020e 	bic.w	r2, r2, #14
 8007e00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f003 021f 	and.w	r2, r3, #31
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2e:	2101      	movs	r1, #1
 8007e30:	fa01 f202 	lsl.w	r2, r1, r2
 8007e34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00c      	beq.n	8007e62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d00d      	beq.n	8007eb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
 8007eb2:	e047      	b.n	8007f44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 020e 	bic.w	r2, r2, #14
 8007ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ede:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee8:	f003 021f 	and.w	r2, r3, #31
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ef6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
    }
  }
  return status;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2204      	movs	r2, #4
 8007f70:	409a      	lsls	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d026      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x7a>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d021      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d107      	bne.n	8007fa2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0204 	bic.w	r2, r2, #4
 8007fa0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa6:	f003 021f 	and.w	r2, r3, #31
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fae:	2104      	movs	r1, #4
 8007fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fb4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d071      	beq.n	80080a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007fc6:	e06c      	b.n	80080a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02e      	beq.n	800803a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d029      	beq.n	800803a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 020a 	bic.w	r2, r2, #10
 8008002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008010:	f003 021f 	and.w	r2, r3, #31
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008018:	2102      	movs	r1, #2
 800801a:	fa01 f202 	lsl.w	r2, r1, r2
 800801e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d038      	beq.n	80080a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008038:	e033      	b.n	80080a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2208      	movs	r2, #8
 8008044:	409a      	lsls	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4013      	ands	r3, r2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02a      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d025      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 020e 	bic.w	r2, r2, #14
 8008066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f202 	lsl.w	r2, r1, r2
 800807a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
}
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80080da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80080ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f2:	f003 021f 	and.w	r2, r3, #31
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	2101      	movs	r1, #1
 80080fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008100:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b10      	cmp	r3, #16
 8008110:	d108      	bne.n	8008124 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008122:	e007      	b.n	8008134 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	4b16      	ldr	r3, [pc, #88]	@ (80081a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d802      	bhi.n	800815a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008154:	4b15      	ldr	r3, [pc, #84]	@ (80081ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e001      	b.n	800815e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800815a:	4b15      	ldr	r3, [pc, #84]	@ (80081b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800815c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	3b08      	subs	r3, #8
 800816a:	4a12      	ldr	r2, [pc, #72]	@ (80081b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800816c:	fba2 2303 	umull	r2, r3, r2, r3
 8008170:	091b      	lsrs	r3, r3, #4
 8008172:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008178:	089b      	lsrs	r3, r3, #2
 800817a:	009a      	lsls	r2, r3, #2
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	461a      	mov	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a0b      	ldr	r2, [pc, #44]	@ (80081b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800818a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2201      	movs	r2, #1
 8008194:	409a      	lsls	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40020407 	.word	0x40020407
 80081ac:	40020800 	.word	0x40020800
 80081b0:	40020820 	.word	0x40020820
 80081b4:	cccccccd 	.word	0xcccccccd
 80081b8:	40020880 	.word	0x40020880

080081bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	461a      	mov	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a08      	ldr	r2, [pc, #32]	@ (8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80081de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2201      	movs	r2, #1
 80081ea:	409a      	lsls	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	1000823f 	.word	0x1000823f
 8008200:	40020940 	.word	0x40020940

08008204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008212:	e15a      	b.n	80084ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	2101      	movs	r1, #1
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	fa01 f303 	lsl.w	r3, r1, r3
 8008220:	4013      	ands	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 814c 	beq.w	80084c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d005      	beq.n	8008244 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008240:	2b02      	cmp	r3, #2
 8008242:	d130      	bne.n	80082a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	2203      	movs	r2, #3
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	43db      	mvns	r3, r3
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4013      	ands	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800827a:	2201      	movs	r2, #1
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	43db      	mvns	r3, r3
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4013      	ands	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	091b      	lsrs	r3, r3, #4
 8008290:	f003 0201 	and.w	r2, r3, #1
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d017      	beq.n	80082e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	2203      	movs	r2, #3
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	43db      	mvns	r3, r3
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4013      	ands	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	4313      	orrs	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d123      	bne.n	8008336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	08da      	lsrs	r2, r3, #3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3208      	adds	r2, #8
 80082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	220f      	movs	r2, #15
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	43db      	mvns	r3, r3
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4013      	ands	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	08da      	lsrs	r2, r3, #3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3208      	adds	r2, #8
 8008330:	6939      	ldr	r1, [r7, #16]
 8008332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	2203      	movs	r2, #3
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	43db      	mvns	r3, r3
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4013      	ands	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 0203 	and.w	r2, r3, #3
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80a6 	beq.w	80084c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008378:	4b5b      	ldr	r3, [pc, #364]	@ (80084e8 <HAL_GPIO_Init+0x2e4>)
 800837a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800837c:	4a5a      	ldr	r2, [pc, #360]	@ (80084e8 <HAL_GPIO_Init+0x2e4>)
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	6613      	str	r3, [r2, #96]	@ 0x60
 8008384:	4b58      	ldr	r3, [pc, #352]	@ (80084e8 <HAL_GPIO_Init+0x2e4>)
 8008386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008390:	4a56      	ldr	r2, [pc, #344]	@ (80084ec <HAL_GPIO_Init+0x2e8>)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	089b      	lsrs	r3, r3, #2
 8008396:	3302      	adds	r3, #2
 8008398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	220f      	movs	r2, #15
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	43db      	mvns	r3, r3
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4013      	ands	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80083ba:	d01f      	beq.n	80083fc <HAL_GPIO_Init+0x1f8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a4c      	ldr	r2, [pc, #304]	@ (80084f0 <HAL_GPIO_Init+0x2ec>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d019      	beq.n	80083f8 <HAL_GPIO_Init+0x1f4>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a4b      	ldr	r2, [pc, #300]	@ (80084f4 <HAL_GPIO_Init+0x2f0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d013      	beq.n	80083f4 <HAL_GPIO_Init+0x1f0>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a4a      	ldr	r2, [pc, #296]	@ (80084f8 <HAL_GPIO_Init+0x2f4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00d      	beq.n	80083f0 <HAL_GPIO_Init+0x1ec>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a49      	ldr	r2, [pc, #292]	@ (80084fc <HAL_GPIO_Init+0x2f8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d007      	beq.n	80083ec <HAL_GPIO_Init+0x1e8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a48      	ldr	r2, [pc, #288]	@ (8008500 <HAL_GPIO_Init+0x2fc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d101      	bne.n	80083e8 <HAL_GPIO_Init+0x1e4>
 80083e4:	2305      	movs	r3, #5
 80083e6:	e00a      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083e8:	2306      	movs	r3, #6
 80083ea:	e008      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083ec:	2304      	movs	r3, #4
 80083ee:	e006      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083f0:	2303      	movs	r3, #3
 80083f2:	e004      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e002      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <HAL_GPIO_Init+0x1fa>
 80083fc:	2300      	movs	r3, #0
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	f002 0203 	and.w	r2, r2, #3
 8008404:	0092      	lsls	r2, r2, #2
 8008406:	4093      	lsls	r3, r2
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800840e:	4937      	ldr	r1, [pc, #220]	@ (80084ec <HAL_GPIO_Init+0x2e8>)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	3302      	adds	r3, #2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800841c:	4b39      	ldr	r3, [pc, #228]	@ (8008504 <HAL_GPIO_Init+0x300>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	43db      	mvns	r3, r3
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4013      	ands	r3, r2
 800842a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008440:	4a30      	ldr	r2, [pc, #192]	@ (8008504 <HAL_GPIO_Init+0x300>)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008446:	4b2f      	ldr	r3, [pc, #188]	@ (8008504 <HAL_GPIO_Init+0x300>)
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	43db      	mvns	r3, r3
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4013      	ands	r3, r2
 8008454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800846a:	4a26      	ldr	r2, [pc, #152]	@ (8008504 <HAL_GPIO_Init+0x300>)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008470:	4b24      	ldr	r3, [pc, #144]	@ (8008504 <HAL_GPIO_Init+0x300>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	43db      	mvns	r3, r3
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4013      	ands	r3, r2
 800847e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008494:	4a1b      	ldr	r2, [pc, #108]	@ (8008504 <HAL_GPIO_Init+0x300>)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800849a:	4b1a      	ldr	r3, [pc, #104]	@ (8008504 <HAL_GPIO_Init+0x300>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	43db      	mvns	r3, r3
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4013      	ands	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084be:	4a11      	ldr	r2, [pc, #68]	@ (8008504 <HAL_GPIO_Init+0x300>)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	3301      	adds	r3, #1
 80084c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f47f ae9d 	bne.w	8008214 <HAL_GPIO_Init+0x10>
  }
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	40021000 	.word	0x40021000
 80084ec:	40010000 	.word	0x40010000
 80084f0:	48000400 	.word	0x48000400
 80084f4:	48000800 	.word	0x48000800
 80084f8:	48000c00 	.word	0x48000c00
 80084fc:	48001000 	.word	0x48001000
 8008500:	48001400 	.word	0x48001400
 8008504:	40010400 	.word	0x40010400

08008508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
 8008524:	e001      	b.n	800852a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]
 8008544:	4613      	mov	r3, r2
 8008546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008548:	787b      	ldrb	r3, [r7, #1]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800854e:	887a      	ldrh	r2, [r7, #2]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008554:	e002      	b.n	800855c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008556:	887a      	ldrh	r2, [r7, #2]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800857a:	887a      	ldrh	r2, [r7, #2]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4013      	ands	r3, r2
 8008580:	041a      	lsls	r2, r3, #16
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	43d9      	mvns	r1, r3
 8008586:	887b      	ldrh	r3, [r7, #2]
 8008588:	400b      	ands	r3, r1
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	619a      	str	r2, [r3, #24]
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80085a6:	4b08      	ldr	r3, [pc, #32]	@ (80085c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	4013      	ands	r3, r2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80085b2:	4a05      	ldr	r2, [pc, #20]	@ (80085c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fa fc04 	bl	8002dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40010400 	.word	0x40010400

080085cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e08d      	b.n	80086fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fa fa2e 	bl	8002a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2224      	movs	r2, #36	@ 0x24
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0201 	bic.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800861c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800862c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d107      	bne.n	8008646 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	e006      	b.n	8008654 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008652:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d108      	bne.n	800866e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800866a:	605a      	str	r2, [r3, #4]
 800866c:	e007      	b.n	800867e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800867c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800868c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69d9      	ldr	r1, [r3, #28]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af02      	add	r7, sp, #8
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	4608      	mov	r0, r1
 800870e:	4611      	mov	r1, r2
 8008710:	461a      	mov	r2, r3
 8008712:	4603      	mov	r3, r0
 8008714:	817b      	strh	r3, [r7, #10]
 8008716:	460b      	mov	r3, r1
 8008718:	813b      	strh	r3, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b20      	cmp	r3, #32
 8008728:	f040 80f9 	bne.w	800891e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <HAL_I2C_Mem_Write+0x34>
 8008732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800873e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e0ed      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_I2C_Mem_Write+0x4e>
 800874e:	2302      	movs	r3, #2
 8008750:	e0e6      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800875a:	f7fd fc51 	bl	8006000 <HAL_GetTick>
 800875e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2319      	movs	r3, #25
 8008766:	2201      	movs	r2, #1
 8008768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 fac3 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0d1      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2221      	movs	r2, #33	@ 0x21
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2240      	movs	r2, #64	@ 0x40
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800879c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087a4:	88f8      	ldrh	r0, [r7, #6]
 80087a6:	893a      	ldrh	r2, [r7, #8]
 80087a8:	8979      	ldrh	r1, [r7, #10]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4603      	mov	r3, r0
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f9d3 	bl	8008b60 <I2C_RequestMemoryWrite>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0a9      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2bff      	cmp	r3, #255	@ 0xff
 80087d4:	d90e      	bls.n	80087f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	22ff      	movs	r2, #255	@ 0xff
 80087da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	8979      	ldrh	r1, [r7, #10]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fc47 	bl	8009080 <I2C_TransferConfig>
 80087f2:	e00f      	b.n	8008814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008802:	b2da      	uxtb	r2, r3
 8008804:	8979      	ldrh	r1, [r7, #10]
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fc36 	bl	8009080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fac6 	bl	8008daa <I2C_WaitOnTXISFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e07b      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d034      	beq.n	80088cc <HAL_I2C_Mem_Write+0x1c8>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d130      	bne.n	80088cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008870:	2200      	movs	r2, #0
 8008872:	2180      	movs	r1, #128	@ 0x80
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fa3f 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e04d      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008888:	b29b      	uxth	r3, r3
 800888a:	2bff      	cmp	r3, #255	@ 0xff
 800888c:	d90e      	bls.n	80088ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	22ff      	movs	r2, #255	@ 0xff
 8008892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	8979      	ldrh	r1, [r7, #10]
 800889c:	2300      	movs	r3, #0
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fbeb 	bl	8009080 <I2C_TransferConfig>
 80088aa:	e00f      	b.n	80088cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	8979      	ldrh	r1, [r7, #10]
 80088be:	2300      	movs	r3, #0
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fbda 	bl	8009080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d19e      	bne.n	8008814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 faac 	bl	8008e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e01a      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2220      	movs	r2, #32
 80088f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6859      	ldr	r1, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <HAL_I2C_Mem_Write+0x224>)
 80088fe:	400b      	ands	r3, r1
 8008900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e000      	b.n	8008920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800891e:	2302      	movs	r3, #2
  }
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	fe00e800 	.word	0xfe00e800

0800892c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	4608      	mov	r0, r1
 8008936:	4611      	mov	r1, r2
 8008938:	461a      	mov	r2, r3
 800893a:	4603      	mov	r3, r0
 800893c:	817b      	strh	r3, [r7, #10]
 800893e:	460b      	mov	r3, r1
 8008940:	813b      	strh	r3, [r7, #8]
 8008942:	4613      	mov	r3, r2
 8008944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b20      	cmp	r3, #32
 8008950:	f040 80fd 	bne.w	8008b4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_I2C_Mem_Read+0x34>
 800895a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008966:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e0f1      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_I2C_Mem_Read+0x4e>
 8008976:	2302      	movs	r3, #2
 8008978:	e0ea      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008982:	f7fd fb3d 	bl	8006000 <HAL_GetTick>
 8008986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	2319      	movs	r3, #25
 800898e:	2201      	movs	r2, #1
 8008990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 f9af 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0d5      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2222      	movs	r2, #34	@ 0x22
 80089a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2240      	movs	r2, #64	@ 0x40
 80089b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a3a      	ldr	r2, [r7, #32]
 80089be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089cc:	88f8      	ldrh	r0, [r7, #6]
 80089ce:	893a      	ldrh	r2, [r7, #8]
 80089d0:	8979      	ldrh	r1, [r7, #10]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	4603      	mov	r3, r0
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f913 	bl	8008c08 <I2C_RequestMemoryRead>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0ad      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2bff      	cmp	r3, #255	@ 0xff
 80089fc:	d90e      	bls.n	8008a1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	22ff      	movs	r2, #255	@ 0xff
 8008a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	8979      	ldrh	r1, [r7, #10]
 8008a0c:	4b52      	ldr	r3, [pc, #328]	@ (8008b58 <HAL_I2C_Mem_Read+0x22c>)
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fb33 	bl	8009080 <I2C_TransferConfig>
 8008a1a:	e00f      	b.n	8008a3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	8979      	ldrh	r1, [r7, #10]
 8008a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b58 <HAL_I2C_Mem_Read+0x22c>)
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fb22 	bl	8009080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	2200      	movs	r2, #0
 8008a44:	2104      	movs	r1, #4
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f956 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e07c      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d034      	beq.n	8008afc <HAL_I2C_Mem_Read+0x1d0>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d130      	bne.n	8008afc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2180      	movs	r1, #128	@ 0x80
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f927 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e04d      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2bff      	cmp	r3, #255	@ 0xff
 8008abc:	d90e      	bls.n	8008adc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	22ff      	movs	r2, #255	@ 0xff
 8008ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	8979      	ldrh	r1, [r7, #10]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fad3 	bl	8009080 <I2C_TransferConfig>
 8008ada:	e00f      	b.n	8008afc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	8979      	ldrh	r1, [r7, #10]
 8008aee:	2300      	movs	r3, #0
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fac2 	bl	8009080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d19a      	bne.n	8008a3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 f994 	bl	8008e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e01a      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6859      	ldr	r1, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <HAL_I2C_Mem_Read+0x230>)
 8008b2e:	400b      	ands	r3, r1
 8008b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008b4e:	2302      	movs	r3, #2
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	80002400 	.word	0x80002400
 8008b5c:	fe00e800 	.word	0xfe00e800

08008b60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	817b      	strh	r3, [r7, #10]
 8008b72:	460b      	mov	r3, r1
 8008b74:	813b      	strh	r3, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	8979      	ldrh	r1, [r7, #10]
 8008b80:	4b20      	ldr	r3, [pc, #128]	@ (8008c04 <I2C_RequestMemoryWrite+0xa4>)
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fa79 	bl	8009080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	69b9      	ldr	r1, [r7, #24]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f909 	bl	8008daa <I2C_WaitOnTXISFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e02c      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d105      	bne.n	8008bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008bb2:	e015      	b.n	8008be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bb4:	893b      	ldrh	r3, [r7, #8]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	69b9      	ldr	r1, [r7, #24]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f8ef 	bl	8008daa <I2C_WaitOnTXISFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e012      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2200      	movs	r2, #0
 8008be8:	2180      	movs	r1, #128	@ 0x80
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f884 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	80002000 	.word	0x80002000

08008c08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	817b      	strh	r3, [r7, #10]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	813b      	strh	r3, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	8979      	ldrh	r1, [r7, #10]
 8008c28:	4b20      	ldr	r3, [pc, #128]	@ (8008cac <I2C_RequestMemoryRead+0xa4>)
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fa26 	bl	8009080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	69b9      	ldr	r1, [r7, #24]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f8b6 	bl	8008daa <I2C_WaitOnTXISFlagUntilTimeout>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e02c      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d105      	bne.n	8008c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4e:	893b      	ldrh	r3, [r7, #8]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c58:	e015      	b.n	8008c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c5a:	893b      	ldrh	r3, [r7, #8]
 8008c5c:	0a1b      	lsrs	r3, r3, #8
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	69b9      	ldr	r1, [r7, #24]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f89c 	bl	8008daa <I2C_WaitOnTXISFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e012      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7c:	893b      	ldrh	r3, [r7, #8]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2140      	movs	r1, #64	@ 0x40
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f831 	bl	8008cf8 <I2C_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	80002000 	.word	0x80002000

08008cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d103      	bne.n	8008cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d007      	beq.n	8008cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	619a      	str	r2, [r3, #24]
  }
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	4613      	mov	r3, r2
 8008d06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d08:	e03b      	b.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f8d6 	bl	8008ec0 <I2C_IsErrorOccurred>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e041      	b.n	8008da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d24:	d02d      	beq.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fd f96b 	bl	8006000 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d122      	bne.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4013      	ands	r3, r2
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	bf0c      	ite	eq
 8008d4c:	2301      	moveq	r3, #1
 8008d4e:	2300      	movne	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d113      	bne.n	8008d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5e:	f043 0220 	orr.w	r2, r3, #32
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e00f      	b.n	8008da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699a      	ldr	r2, [r3, #24]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	bf0c      	ite	eq
 8008d92:	2301      	moveq	r3, #1
 8008d94:	2300      	movne	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d0b4      	beq.n	8008d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008db6:	e033      	b.n	8008e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f87f 	bl	8008ec0 <I2C_IsErrorOccurred>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e031      	b.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	d025      	beq.n	8008e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd4:	f7fd f914 	bl	8006000 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d302      	bcc.n	8008dea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11a      	bne.n	8008e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d013      	beq.n	8008e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfc:	f043 0220 	orr.w	r2, r3, #32
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e007      	b.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d1c4      	bne.n	8008db8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e44:	e02f      	b.n	8008ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f838 	bl	8008ec0 <I2C_IsErrorOccurred>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e02d      	b.n	8008eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5a:	f7fd f8d1 	bl	8006000 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11a      	bne.n	8008ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d013      	beq.n	8008ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e82:	f043 0220 	orr.w	r2, r3, #32
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e007      	b.n	8008eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d1c8      	bne.n	8008e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	@ 0x28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d068      	beq.n	8008fbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2210      	movs	r2, #16
 8008ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ef4:	e049      	b.n	8008f8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d045      	beq.n	8008f8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008efe:	f7fd f87f 	bl	8006000 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <I2C_IsErrorOccurred+0x54>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d13a      	bne.n	8008f8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f36:	d121      	bne.n	8008f7c <I2C_IsErrorOccurred+0xbc>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f3e:	d01d      	beq.n	8008f7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008f40:	7cfb      	ldrb	r3, [r7, #19]
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d01a      	beq.n	8008f7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f56:	f7fd f853 	bl	8006000 <HAL_GetTick>
 8008f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f5c:	e00e      	b.n	8008f7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f5e:	f7fd f84f 	bl	8006000 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b19      	cmp	r3, #25
 8008f6a:	d907      	bls.n	8008f7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	f043 0320 	orr.w	r3, r3, #32
 8008f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008f7a:	e006      	b.n	8008f8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d1e9      	bne.n	8008f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	d003      	beq.n	8008fa0 <I2C_IsErrorOccurred+0xe0>
 8008f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0aa      	beq.n	8008ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2220      	movs	r2, #32
 8008fae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	f043 0304 	orr.w	r3, r3, #4
 8008fb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	f043 0301 	orr.w	r3, r3, #1
 8008fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f043 0308 	orr.w	r3, r3, #8
 8008ff8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009002:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	f043 0302 	orr.w	r3, r3, #2
 800901a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800902c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01c      	beq.n	800906e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7ff fe3b 	bl	8008cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6859      	ldr	r1, [r3, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <I2C_IsErrorOccurred+0x1bc>)
 8009046:	400b      	ands	r3, r1
 8009048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	431a      	orrs	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800906e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009072:	4618      	mov	r0, r3
 8009074:	3728      	adds	r7, #40	@ 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	fe00e800 	.word	0xfe00e800

08009080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	817b      	strh	r3, [r7, #10]
 800908e:	4613      	mov	r3, r2
 8009090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009092:	897b      	ldrh	r3, [r7, #10]
 8009094:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009098:	7a7b      	ldrb	r3, [r7, #9]
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	0d5b      	lsrs	r3, r3, #21
 80090ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80090be:	4b08      	ldr	r3, [pc, #32]	@ (80090e0 <I2C_TransferConfig+0x60>)
 80090c0:	430b      	orrs	r3, r1
 80090c2:	43db      	mvns	r3, r3
 80090c4:	ea02 0103 	and.w	r1, r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	03ff63ff 	.word	0x03ff63ff

080090e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d138      	bne.n	800916c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009104:	2302      	movs	r3, #2
 8009106:	e032      	b.n	800916e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2224      	movs	r2, #36	@ 0x24
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b20      	cmp	r3, #32
 800918e:	d139      	bne.n	8009204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800919a:	2302      	movs	r3, #2
 800919c:	e033      	b.n	8009206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2224      	movs	r2, #36	@ 0x24
 80091aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0201 	bic.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	021b      	lsls	r3, r3, #8
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e000      	b.n	8009206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009204:	2302      	movs	r3, #2
  }
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
	...

08009214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d141      	bne.n	80092a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009222:	4b4b      	ldr	r3, [pc, #300]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800922a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800922e:	d131      	bne.n	8009294 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009230:	4b47      	ldr	r3, [pc, #284]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009236:	4a46      	ldr	r2, [pc, #280]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800923c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009240:	4b43      	ldr	r3, [pc, #268]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009248:	4a41      	ldr	r2, [pc, #260]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800924a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800924e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009250:	4b40      	ldr	r3, [pc, #256]	@ (8009354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2232      	movs	r2, #50	@ 0x32
 8009256:	fb02 f303 	mul.w	r3, r2, r3
 800925a:	4a3f      	ldr	r2, [pc, #252]	@ (8009358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800925c:	fba2 2303 	umull	r2, r3, r2, r3
 8009260:	0c9b      	lsrs	r3, r3, #18
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009266:	e002      	b.n	800926e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3b01      	subs	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800926e:	4b38      	ldr	r3, [pc, #224]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800927a:	d102      	bne.n	8009282 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f2      	bne.n	8009268 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009282:	4b33      	ldr	r3, [pc, #204]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800928a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800928e:	d158      	bne.n	8009342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e057      	b.n	8009344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009294:	4b2e      	ldr	r3, [pc, #184]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800929a:	4a2d      	ldr	r2, [pc, #180]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800929c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80092a4:	e04d      	b.n	8009342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ac:	d141      	bne.n	8009332 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092ae:	4b28      	ldr	r3, [pc, #160]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80092b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ba:	d131      	bne.n	8009320 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092bc:	4b24      	ldr	r3, [pc, #144]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c2:	4a23      	ldr	r2, [pc, #140]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092cc:	4b20      	ldr	r3, [pc, #128]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80092d4:	4a1e      	ldr	r2, [pc, #120]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80092da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2232      	movs	r2, #50	@ 0x32
 80092e2:	fb02 f303 	mul.w	r3, r2, r3
 80092e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80092e8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ec:	0c9b      	lsrs	r3, r3, #18
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092f2:	e002      	b.n	80092fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092fa:	4b15      	ldr	r3, [pc, #84]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009306:	d102      	bne.n	800930e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1f2      	bne.n	80092f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800930e:	4b10      	ldr	r3, [pc, #64]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800931a:	d112      	bne.n	8009342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e011      	b.n	8009344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009320:	4b0b      	ldr	r3, [pc, #44]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009326:	4a0a      	ldr	r2, [pc, #40]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800932c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009330:	e007      	b.n	8009342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009332:	4b07      	ldr	r3, [pc, #28]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800933a:	4a05      	ldr	r2, [pc, #20]	@ (8009350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800933c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009340:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	40007000 	.word	0x40007000
 8009354:	20000020 	.word	0x20000020
 8009358:	431bde83 	.word	0x431bde83

0800935c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009360:	4b05      	ldr	r3, [pc, #20]	@ (8009378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	4a04      	ldr	r2, [pc, #16]	@ (8009378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800936a:	6093      	str	r3, [r2, #8]
}
 800936c:	bf00      	nop
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40007000 	.word	0x40007000

0800937c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e2fe      	b.n	800998c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d075      	beq.n	8009486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800939a:	4b97      	ldr	r3, [pc, #604]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 030c 	and.w	r3, r3, #12
 80093a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093a4:	4b94      	ldr	r3, [pc, #592]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b0c      	cmp	r3, #12
 80093b2:	d102      	bne.n	80093ba <HAL_RCC_OscConfig+0x3e>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d002      	beq.n	80093c0 <HAL_RCC_OscConfig+0x44>
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d10b      	bne.n	80093d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093c0:	4b8d      	ldr	r3, [pc, #564]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05b      	beq.n	8009484 <HAL_RCC_OscConfig+0x108>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d157      	bne.n	8009484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e2d9      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e0:	d106      	bne.n	80093f0 <HAL_RCC_OscConfig+0x74>
 80093e2:	4b85      	ldr	r3, [pc, #532]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a84      	ldr	r2, [pc, #528]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80093e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	e01d      	b.n	800942c <HAL_RCC_OscConfig+0xb0>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093f8:	d10c      	bne.n	8009414 <HAL_RCC_OscConfig+0x98>
 80093fa:	4b7f      	ldr	r3, [pc, #508]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a7e      	ldr	r2, [pc, #504]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	4b7c      	ldr	r3, [pc, #496]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a7b      	ldr	r2, [pc, #492]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800940c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	e00b      	b.n	800942c <HAL_RCC_OscConfig+0xb0>
 8009414:	4b78      	ldr	r3, [pc, #480]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a77      	ldr	r2, [pc, #476]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800941a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	4b75      	ldr	r3, [pc, #468]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a74      	ldr	r2, [pc, #464]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800942a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d013      	beq.n	800945c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009434:	f7fc fde4 	bl	8006000 <HAL_GetTick>
 8009438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800943c:	f7fc fde0 	bl	8006000 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b64      	cmp	r3, #100	@ 0x64
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e29e      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800944e:	4b6a      	ldr	r3, [pc, #424]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0f0      	beq.n	800943c <HAL_RCC_OscConfig+0xc0>
 800945a:	e014      	b.n	8009486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800945c:	f7fc fdd0 	bl	8006000 <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009464:	f7fc fdcc 	bl	8006000 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b64      	cmp	r3, #100	@ 0x64
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e28a      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009476:	4b60      	ldr	r3, [pc, #384]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1f0      	bne.n	8009464 <HAL_RCC_OscConfig+0xe8>
 8009482:	e000      	b.n	8009486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d075      	beq.n	800957e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009492:	4b59      	ldr	r3, [pc, #356]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 030c 	and.w	r3, r3, #12
 800949a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800949c:	4b56      	ldr	r3, [pc, #344]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b0c      	cmp	r3, #12
 80094aa:	d102      	bne.n	80094b2 <HAL_RCC_OscConfig+0x136>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d002      	beq.n	80094b8 <HAL_RCC_OscConfig+0x13c>
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	d11f      	bne.n	80094f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094b8:	4b4f      	ldr	r3, [pc, #316]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_OscConfig+0x154>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e25d      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094d0:	4b49      	ldr	r3, [pc, #292]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	4946      	ldr	r1, [pc, #280]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094e4:	4b45      	ldr	r3, [pc, #276]	@ (80095fc <HAL_RCC_OscConfig+0x280>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fa fead 	bl	8004248 <HAL_InitTick>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d043      	beq.n	800957c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e249      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d023      	beq.n	8009548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009500:	4b3d      	ldr	r3, [pc, #244]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a3c      	ldr	r2, [pc, #240]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800950a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950c:	f7fc fd78 	bl	8006000 <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009512:	e008      	b.n	8009526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009514:	f7fc fd74 	bl	8006000 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d901      	bls.n	8009526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e232      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009526:	4b34      	ldr	r3, [pc, #208]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009532:	4b31      	ldr	r3, [pc, #196]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	061b      	lsls	r3, r3, #24
 8009540:	492d      	ldr	r1, [pc, #180]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009542:	4313      	orrs	r3, r2
 8009544:	604b      	str	r3, [r1, #4]
 8009546:	e01a      	b.n	800957e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009548:	4b2b      	ldr	r3, [pc, #172]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a2a      	ldr	r2, [pc, #168]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800954e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009554:	f7fc fd54 	bl	8006000 <HAL_GetTick>
 8009558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800955a:	e008      	b.n	800956e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800955c:	f7fc fd50 	bl	8006000 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e20e      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800956e:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f0      	bne.n	800955c <HAL_RCC_OscConfig+0x1e0>
 800957a:	e000      	b.n	800957e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800957c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d041      	beq.n	800960e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01c      	beq.n	80095cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009592:	4b19      	ldr	r3, [pc, #100]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 8009594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009598:	4a17      	ldr	r2, [pc, #92]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 800959a:	f043 0301 	orr.w	r3, r3, #1
 800959e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a2:	f7fc fd2d 	bl	8006000 <HAL_GetTick>
 80095a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095a8:	e008      	b.n	80095bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095aa:	f7fc fd29 	bl	8006000 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d901      	bls.n	80095bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e1e7      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095bc:	4b0e      	ldr	r3, [pc, #56]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80095be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0ef      	beq.n	80095aa <HAL_RCC_OscConfig+0x22e>
 80095ca:	e020      	b.n	800960e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095cc:	4b0a      	ldr	r3, [pc, #40]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80095ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095d2:	4a09      	ldr	r2, [pc, #36]	@ (80095f8 <HAL_RCC_OscConfig+0x27c>)
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095dc:	f7fc fd10 	bl	8006000 <HAL_GetTick>
 80095e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095e2:	e00d      	b.n	8009600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095e4:	f7fc fd0c 	bl	8006000 <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d906      	bls.n	8009600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e1ca      	b.n	800998c <HAL_RCC_OscConfig+0x610>
 80095f6:	bf00      	nop
 80095f8:	40021000 	.word	0x40021000
 80095fc:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009600:	4b8c      	ldr	r3, [pc, #560]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1ea      	bne.n	80095e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80a6 	beq.w	8009768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800961c:	2300      	movs	r3, #0
 800961e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009620:	4b84      	ldr	r3, [pc, #528]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_RCC_OscConfig+0x2b4>
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <HAL_RCC_OscConfig+0x2b6>
 8009630:	2300      	movs	r3, #0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00d      	beq.n	8009652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009636:	4b7f      	ldr	r3, [pc, #508]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800963a:	4a7e      	ldr	r2, [pc, #504]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800963c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009640:	6593      	str	r3, [r2, #88]	@ 0x58
 8009642:	4b7c      	ldr	r3, [pc, #496]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800964e:	2301      	movs	r3, #1
 8009650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009652:	4b79      	ldr	r3, [pc, #484]	@ (8009838 <HAL_RCC_OscConfig+0x4bc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d118      	bne.n	8009690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800965e:	4b76      	ldr	r3, [pc, #472]	@ (8009838 <HAL_RCC_OscConfig+0x4bc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a75      	ldr	r2, [pc, #468]	@ (8009838 <HAL_RCC_OscConfig+0x4bc>)
 8009664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800966a:	f7fc fcc9 	bl	8006000 <HAL_GetTick>
 800966e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009670:	e008      	b.n	8009684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009672:	f7fc fcc5 	bl	8006000 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d901      	bls.n	8009684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e183      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009684:	4b6c      	ldr	r3, [pc, #432]	@ (8009838 <HAL_RCC_OscConfig+0x4bc>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0f0      	beq.n	8009672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d108      	bne.n	80096aa <HAL_RCC_OscConfig+0x32e>
 8009698:	4b66      	ldr	r3, [pc, #408]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969e:	4a65      	ldr	r2, [pc, #404]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096a8:	e024      	b.n	80096f4 <HAL_RCC_OscConfig+0x378>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d110      	bne.n	80096d4 <HAL_RCC_OscConfig+0x358>
 80096b2:	4b60      	ldr	r3, [pc, #384]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b8:	4a5e      	ldr	r2, [pc, #376]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096ba:	f043 0304 	orr.w	r3, r3, #4
 80096be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096c2:	4b5c      	ldr	r3, [pc, #368]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c8:	4a5a      	ldr	r2, [pc, #360]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096d2:	e00f      	b.n	80096f4 <HAL_RCC_OscConfig+0x378>
 80096d4:	4b57      	ldr	r3, [pc, #348]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096da:	4a56      	ldr	r2, [pc, #344]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096dc:	f023 0301 	bic.w	r3, r3, #1
 80096e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80096e4:	4b53      	ldr	r3, [pc, #332]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ea:	4a52      	ldr	r2, [pc, #328]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80096ec:	f023 0304 	bic.w	r3, r3, #4
 80096f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d016      	beq.n	800972a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096fc:	f7fc fc80 	bl	8006000 <HAL_GetTick>
 8009700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009702:	e00a      	b.n	800971a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009704:	f7fc fc7c 	bl	8006000 <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009712:	4293      	cmp	r3, r2
 8009714:	d901      	bls.n	800971a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e138      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800971a:	4b46      	ldr	r3, [pc, #280]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800971c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0ed      	beq.n	8009704 <HAL_RCC_OscConfig+0x388>
 8009728:	e015      	b.n	8009756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800972a:	f7fc fc69 	bl	8006000 <HAL_GetTick>
 800972e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009730:	e00a      	b.n	8009748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009732:	f7fc fc65 	bl	8006000 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009740:	4293      	cmp	r3, r2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e121      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009748:	4b3a      	ldr	r3, [pc, #232]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1ed      	bne.n	8009732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009756:	7ffb      	ldrb	r3, [r7, #31]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d105      	bne.n	8009768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800975c:	4b35      	ldr	r3, [pc, #212]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800975e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009760:	4a34      	ldr	r2, [pc, #208]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d03c      	beq.n	80097ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01c      	beq.n	80097b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800977c:	4b2d      	ldr	r3, [pc, #180]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 800977e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009782:	4a2c      	ldr	r2, [pc, #176]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800978c:	f7fc fc38 	bl	8006000 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009794:	f7fc fc34 	bl	8006000 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e0f2      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097a6:	4b23      	ldr	r3, [pc, #140]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80097a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0ef      	beq.n	8009794 <HAL_RCC_OscConfig+0x418>
 80097b4:	e01b      	b.n	80097ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80097b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80097be:	f023 0301 	bic.w	r3, r3, #1
 80097c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c6:	f7fc fc1b 	bl	8006000 <HAL_GetTick>
 80097ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097cc:	e008      	b.n	80097e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097ce:	f7fc fc17 	bl	8006000 <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d901      	bls.n	80097e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e0d5      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097e0:	4b14      	ldr	r3, [pc, #80]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80097e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1ef      	bne.n	80097ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 80c9 	beq.w	800998a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f003 030c 	and.w	r3, r3, #12
 8009800:	2b0c      	cmp	r3, #12
 8009802:	f000 8083 	beq.w	800990c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d15e      	bne.n	80098cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800980e:	4b09      	ldr	r3, [pc, #36]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a08      	ldr	r2, [pc, #32]	@ (8009834 <HAL_RCC_OscConfig+0x4b8>)
 8009814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800981a:	f7fc fbf1 	bl	8006000 <HAL_GetTick>
 800981e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009820:	e00c      	b.n	800983c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009822:	f7fc fbed 	bl	8006000 <HAL_GetTick>
 8009826:	4602      	mov	r2, r0
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	d905      	bls.n	800983c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e0ab      	b.n	800998c <HAL_RCC_OscConfig+0x610>
 8009834:	40021000 	.word	0x40021000
 8009838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800983c:	4b55      	ldr	r3, [pc, #340]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1ec      	bne.n	8009822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009848:	4b52      	ldr	r3, [pc, #328]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	4b52      	ldr	r3, [pc, #328]	@ (8009998 <HAL_RCC_OscConfig+0x61c>)
 800984e:	4013      	ands	r3, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6a11      	ldr	r1, [r2, #32]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009858:	3a01      	subs	r2, #1
 800985a:	0112      	lsls	r2, r2, #4
 800985c:	4311      	orrs	r1, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009862:	0212      	lsls	r2, r2, #8
 8009864:	4311      	orrs	r1, r2
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800986a:	0852      	lsrs	r2, r2, #1
 800986c:	3a01      	subs	r2, #1
 800986e:	0552      	lsls	r2, r2, #21
 8009870:	4311      	orrs	r1, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009876:	0852      	lsrs	r2, r2, #1
 8009878:	3a01      	subs	r2, #1
 800987a:	0652      	lsls	r2, r2, #25
 800987c:	4311      	orrs	r1, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009882:	06d2      	lsls	r2, r2, #27
 8009884:	430a      	orrs	r2, r1
 8009886:	4943      	ldr	r1, [pc, #268]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 8009888:	4313      	orrs	r3, r2
 800988a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800988c:	4b41      	ldr	r3, [pc, #260]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a40      	ldr	r2, [pc, #256]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 8009892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009898:	4b3e      	ldr	r3, [pc, #248]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	4a3d      	ldr	r2, [pc, #244]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800989e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a4:	f7fc fbac 	bl	8006000 <HAL_GetTick>
 80098a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ac:	f7fc fba8 	bl	8006000 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e066      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098be:	4b35      	ldr	r3, [pc, #212]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f0      	beq.n	80098ac <HAL_RCC_OscConfig+0x530>
 80098ca:	e05e      	b.n	800998a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098cc:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a30      	ldr	r2, [pc, #192]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 80098d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fc fb92 	bl	8006000 <HAL_GetTick>
 80098dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098e0:	f7fc fb8e 	bl	8006000 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e04c      	b.n	800998c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098f2:	4b28      	ldr	r3, [pc, #160]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f0      	bne.n	80098e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80098fe:	4b25      	ldr	r3, [pc, #148]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	4924      	ldr	r1, [pc, #144]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 8009904:	4b25      	ldr	r3, [pc, #148]	@ (800999c <HAL_RCC_OscConfig+0x620>)
 8009906:	4013      	ands	r3, r2
 8009908:	60cb      	str	r3, [r1, #12]
 800990a:	e03e      	b.n	800998a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e039      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009918:	4b1e      	ldr	r3, [pc, #120]	@ (8009994 <HAL_RCC_OscConfig+0x618>)
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f003 0203 	and.w	r2, r3, #3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	429a      	cmp	r2, r3
 800992a:	d12c      	bne.n	8009986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009936:	3b01      	subs	r3, #1
 8009938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993a:	429a      	cmp	r2, r3
 800993c:	d123      	bne.n	8009986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800994a:	429a      	cmp	r2, r3
 800994c:	d11b      	bne.n	8009986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800995a:	429a      	cmp	r2, r3
 800995c:	d113      	bne.n	8009986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009968:	085b      	lsrs	r3, r3, #1
 800996a:	3b01      	subs	r3, #1
 800996c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800996e:	429a      	cmp	r2, r3
 8009970:	d109      	bne.n	8009986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997c:	085b      	lsrs	r3, r3, #1
 800997e:	3b01      	subs	r3, #1
 8009980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009982:	429a      	cmp	r2, r3
 8009984:	d001      	beq.n	800998a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40021000 	.word	0x40021000
 8009998:	019f800c 	.word	0x019f800c
 800999c:	feeefffc 	.word	0xfeeefffc

080099a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e11e      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099b8:	4b91      	ldr	r3, [pc, #580]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d910      	bls.n	80099e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099c6:	4b8e      	ldr	r3, [pc, #568]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f023 020f 	bic.w	r2, r3, #15
 80099ce:	498c      	ldr	r1, [pc, #560]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099d6:	4b8a      	ldr	r3, [pc, #552]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d001      	beq.n	80099e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e106      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d073      	beq.n	8009adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d129      	bne.n	8009a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099fc:	4b81      	ldr	r3, [pc, #516]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e0f4      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009a0c:	f000 f9ce 	bl	8009dac <RCC_GetSysClockFreqFromPLLSource>
 8009a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	4a7c      	ldr	r2, [pc, #496]	@ (8009c08 <HAL_RCC_ClockConfig+0x268>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d93f      	bls.n	8009a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d009      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d033      	beq.n	8009a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d12f      	bne.n	8009a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a3a:	4b72      	ldr	r3, [pc, #456]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a42:	4a70      	ldr	r2, [pc, #448]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009a4a:	2380      	movs	r3, #128	@ 0x80
 8009a4c:	617b      	str	r3, [r7, #20]
 8009a4e:	e024      	b.n	8009a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d107      	bne.n	8009a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a58:	4b6a      	ldr	r3, [pc, #424]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0c6      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a68:	4b66      	ldr	r3, [pc, #408]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e0be      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009a78:	f000 f8ce 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 8009a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4a61      	ldr	r2, [pc, #388]	@ (8009c08 <HAL_RCC_ClockConfig+0x268>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d909      	bls.n	8009a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a86:	4b5f      	ldr	r3, [pc, #380]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009a96:	2380      	movs	r3, #128	@ 0x80
 8009a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f023 0203 	bic.w	r2, r3, #3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4957      	ldr	r1, [pc, #348]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aac:	f7fc faa8 	bl	8006000 <HAL_GetTick>
 8009ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ab2:	e00a      	b.n	8009aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab4:	f7fc faa4 	bl	8006000 <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e095      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aca:	4b4e      	ldr	r3, [pc, #312]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f003 020c 	and.w	r2, r3, #12
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d1eb      	bne.n	8009ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d023      	beq.n	8009b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009af4:	4b43      	ldr	r3, [pc, #268]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	4a42      	ldr	r2, [pc, #264]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b14:	4a3b      	ldr	r2, [pc, #236]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b1c:	4b39      	ldr	r3, [pc, #228]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	4936      	ldr	r1, [pc, #216]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	608b      	str	r3, [r1, #8]
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b80      	cmp	r3, #128	@ 0x80
 8009b34:	d105      	bne.n	8009b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b36:	4b33      	ldr	r3, [pc, #204]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	4a32      	ldr	r2, [pc, #200]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b42:	4b2f      	ldr	r3, [pc, #188]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d21d      	bcs.n	8009b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b50:	4b2b      	ldr	r3, [pc, #172]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f023 020f 	bic.w	r2, r3, #15
 8009b58:	4929      	ldr	r1, [pc, #164]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009b60:	f7fc fa4e 	bl	8006000 <HAL_GetTick>
 8009b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b66:	e00a      	b.n	8009b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b68:	f7fc fa4a 	bl	8006000 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e03b      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b7e:	4b20      	ldr	r3, [pc, #128]	@ (8009c00 <HAL_RCC_ClockConfig+0x260>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 030f 	and.w	r3, r3, #15
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d1ed      	bne.n	8009b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d008      	beq.n	8009baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b98:	4b1a      	ldr	r3, [pc, #104]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	4917      	ldr	r1, [pc, #92]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0308 	and.w	r3, r3, #8
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bb6:	4b13      	ldr	r3, [pc, #76]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	490f      	ldr	r1, [pc, #60]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009bca:	f000 f825 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <HAL_RCC_ClockConfig+0x264>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	091b      	lsrs	r3, r3, #4
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	490c      	ldr	r1, [pc, #48]	@ (8009c0c <HAL_RCC_ClockConfig+0x26c>)
 8009bdc:	5ccb      	ldrb	r3, [r1, r3]
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	fa22 f303 	lsr.w	r3, r2, r3
 8009be6:	4a0a      	ldr	r2, [pc, #40]	@ (8009c10 <HAL_RCC_ClockConfig+0x270>)
 8009be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009bea:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <HAL_RCC_ClockConfig+0x274>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fa fb2a 	bl	8004248 <HAL_InitTick>
 8009bf4:	4603      	mov	r3, r0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40022000 	.word	0x40022000
 8009c04:	40021000 	.word	0x40021000
 8009c08:	04c4b400 	.word	0x04c4b400
 8009c0c:	0801baec 	.word	0x0801baec
 8009c10:	20000020 	.word	0x20000020
 8009c14:	20000028 	.word	0x20000028

08009c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f003 030c 	and.w	r3, r3, #12
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d102      	bne.n	8009c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	e047      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009c30:	4b27      	ldr	r3, [pc, #156]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f003 030c 	and.w	r3, r3, #12
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d102      	bne.n	8009c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c3c:	4b25      	ldr	r3, [pc, #148]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	e03e      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009c42:	4b23      	ldr	r3, [pc, #140]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f003 030c 	and.w	r3, r3, #12
 8009c4a:	2b0c      	cmp	r3, #12
 8009c4c:	d136      	bne.n	8009cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c4e:	4b20      	ldr	r3, [pc, #128]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	3301      	adds	r3, #1
 8009c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d10c      	bne.n	8009c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c6c:	4a19      	ldr	r2, [pc, #100]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c74:	4a16      	ldr	r2, [pc, #88]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c76:	68d2      	ldr	r2, [r2, #12]
 8009c78:	0a12      	lsrs	r2, r2, #8
 8009c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
 8009c82:	617b      	str	r3, [r7, #20]
      break;
 8009c84:	e00c      	b.n	8009ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c86:	4a13      	ldr	r2, [pc, #76]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8e:	4a10      	ldr	r2, [pc, #64]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c90:	68d2      	ldr	r2, [r2, #12]
 8009c92:	0a12      	lsrs	r2, r2, #8
 8009c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009c98:	fb02 f303 	mul.w	r3, r2, r3
 8009c9c:	617b      	str	r3, [r7, #20]
      break;
 8009c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	0e5b      	lsrs	r3, r3, #25
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	3301      	adds	r3, #1
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	e001      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009cc0:	693b      	ldr	r3, [r7, #16]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	40021000 	.word	0x40021000
 8009cd4:	00f42400 	.word	0x00f42400

08009cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <HAL_RCC_GetHCLKFreq+0x14>)
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000020 	.word	0x20000020

08009cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009cf4:	f7ff fff0 	bl	8009cd8 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4904      	ldr	r1, [pc, #16]	@ (8009d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40021000 	.word	0x40021000
 8009d18:	0801bafc 	.word	0x0801bafc

08009d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d20:	f7ff ffda 	bl	8009cd8 <HAL_RCC_GetHCLKFreq>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	0adb      	lsrs	r3, r3, #11
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	4904      	ldr	r1, [pc, #16]	@ (8009d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d32:	5ccb      	ldrb	r3, [r1, r3]
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40021000 	.word	0x40021000
 8009d44:	0801bafc 	.word	0x0801bafc

08009d48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	220f      	movs	r2, #15
 8009d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009d58:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <HAL_RCC_GetClockConfig+0x5c>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f003 0203 	and.w	r2, r3, #3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009d64:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <HAL_RCC_GetClockConfig+0x5c>)
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009d70:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <HAL_RCC_GetClockConfig+0x5c>)
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009d7c:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <HAL_RCC_GetClockConfig+0x5c>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	08db      	lsrs	r3, r3, #3
 8009d82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009d8a:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <HAL_RCC_GetClockConfig+0x60>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 020f 	and.w	r2, r3, #15
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	40021000 	.word	0x40021000
 8009da8:	40022000 	.word	0x40022000

08009dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009db2:	4b1e      	ldr	r3, [pc, #120]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	091b      	lsrs	r3, r3, #4
 8009dc2:	f003 030f 	and.w	r3, r3, #15
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d10c      	bne.n	8009dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009dd0:	4a17      	ldr	r2, [pc, #92]	@ (8009e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd8:	4a14      	ldr	r2, [pc, #80]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009dda:	68d2      	ldr	r2, [r2, #12]
 8009ddc:	0a12      	lsrs	r2, r2, #8
 8009dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	617b      	str	r3, [r7, #20]
    break;
 8009de8:	e00c      	b.n	8009e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009dea:	4a11      	ldr	r2, [pc, #68]	@ (8009e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	4a0e      	ldr	r2, [pc, #56]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009df4:	68d2      	ldr	r2, [r2, #12]
 8009df6:	0a12      	lsrs	r2, r2, #8
 8009df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009dfc:	fb02 f303 	mul.w	r3, r2, r3
 8009e00:	617b      	str	r3, [r7, #20]
    break;
 8009e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e04:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	0e5b      	lsrs	r3, r3, #25
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	3301      	adds	r3, #1
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009e1e:	687b      	ldr	r3, [r7, #4]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	40021000 	.word	0x40021000
 8009e30:	00f42400 	.word	0x00f42400

08009e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e40:	2300      	movs	r3, #0
 8009e42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8098 	beq.w	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e52:	2300      	movs	r3, #0
 8009e54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e56:	4b43      	ldr	r3, [pc, #268]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10d      	bne.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e62:	4b40      	ldr	r3, [pc, #256]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e66:	4a3f      	ldr	r2, [pc, #252]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e76:	60bb      	str	r3, [r7, #8]
 8009e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a39      	ldr	r2, [pc, #228]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e8a:	f7fc f8b9 	bl	8006000 <HAL_GetTick>
 8009e8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e90:	e009      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e92:	f7fc f8b5 	bl	8006000 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d902      	bls.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8009ea4:	e005      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ea6:	4b30      	ldr	r3, [pc, #192]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0ef      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009eb2:	7cfb      	ldrb	r3, [r7, #19]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d159      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ec2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01e      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d019      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ed4:	4b23      	ldr	r3, [pc, #140]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ee0:	4b20      	ldr	r3, [pc, #128]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f00:	4a18      	ldr	r2, [pc, #96]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d016      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f12:	f7fc f875 	bl	8006000 <HAL_GetTick>
 8009f16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f18:	e00b      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f1a:	f7fc f871 	bl	8006000 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d902      	bls.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	74fb      	strb	r3, [r7, #19]
            break;
 8009f30:	e006      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f32:	4b0c      	ldr	r3, [pc, #48]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0ec      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009f40:	7cfb      	ldrb	r3, [r7, #19]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10b      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f46:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f54:	4903      	ldr	r1, [pc, #12]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009f5c:	e008      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f5e:	7cfb      	ldrb	r3, [r7, #19]
 8009f60:	74bb      	strb	r3, [r7, #18]
 8009f62:	e005      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009f64:	40021000 	.word	0x40021000
 8009f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	7cfb      	ldrb	r3, [r7, #19]
 8009f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f70:	7c7b      	ldrb	r3, [r7, #17]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d105      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f76:	4ba6      	ldr	r3, [pc, #664]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7a:	4aa5      	ldr	r2, [pc, #660]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f8e:	4ba0      	ldr	r3, [pc, #640]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f94:	f023 0203 	bic.w	r2, r3, #3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	499c      	ldr	r1, [pc, #624]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009fb0:	4b97      	ldr	r3, [pc, #604]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fb6:	f023 020c 	bic.w	r2, r3, #12
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	4994      	ldr	r1, [pc, #592]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009fd2:	4b8f      	ldr	r3, [pc, #572]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	498b      	ldr	r1, [pc, #556]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ff4:	4b86      	ldr	r3, [pc, #536]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	4983      	ldr	r1, [pc, #524]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a004:	4313      	orrs	r3, r2
 800a006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a016:	4b7e      	ldr	r3, [pc, #504]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	497a      	ldr	r1, [pc, #488]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a026:	4313      	orrs	r3, r2
 800a028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a038:	4b75      	ldr	r3, [pc, #468]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a03e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	4972      	ldr	r1, [pc, #456]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a05a:	4b6d      	ldr	r3, [pc, #436]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a060:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	4969      	ldr	r1, [pc, #420]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a07c:	4b64      	ldr	r3, [pc, #400]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a082:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	4961      	ldr	r1, [pc, #388]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a09e:	4b5c      	ldr	r3, [pc, #368]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ac:	4958      	ldr	r1, [pc, #352]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d015      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0c0:	4b53      	ldr	r3, [pc, #332]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	4950      	ldr	r1, [pc, #320]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0de:	d105      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4a4a      	ldr	r2, [pc, #296]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d015      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a0f8:	4b45      	ldr	r3, [pc, #276]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a106:	4942      	ldr	r1, [pc, #264]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a116:	d105      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a118:	4b3d      	ldr	r3, [pc, #244]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a3c      	ldr	r2, [pc, #240]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a11e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a122:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d015      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a130:	4b37      	ldr	r3, [pc, #220]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a136:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13e:	4934      	ldr	r1, [pc, #208]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a14e:	d105      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a150:	4b2f      	ldr	r3, [pc, #188]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4a2e      	ldr	r2, [pc, #184]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a15a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d015      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a168:	4b29      	ldr	r3, [pc, #164]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a16e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a176:	4926      	ldr	r1, [pc, #152]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a186:	d105      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a188:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4a20      	ldr	r2, [pc, #128]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a18e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a192:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d015      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ae:	4918      	ldr	r1, [pc, #96]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1be:	d105      	bne.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1c0:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	4a12      	ldr	r2, [pc, #72]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d015      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e6:	490a      	ldr	r1, [pc, #40]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1f6:	d105      	bne.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a1f8:	4b05      	ldr	r3, [pc, #20]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4a04      	ldr	r2, [pc, #16]	@ (800a210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a202:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a204:	7cbb      	ldrb	r3, [r7, #18]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40021000 	.word	0x40021000

0800a214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e09d      	b.n	800a362 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d108      	bne.n	800a240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a236:	d009      	beq.n	800a24c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	61da      	str	r2, [r3, #28]
 800a23e:	e005      	b.n	800a24c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7f9 f958 	bl	800351c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a282:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a28c:	d902      	bls.n	800a294 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	e002      	b.n	800a29a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a298:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a2a2:	d007      	beq.n	800a2b4 <HAL_SPI_Init+0xa0>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2ac:	d002      	beq.n	800a2b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f6:	ea42 0103 	orr.w	r1, r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	0c1b      	lsrs	r3, r3, #16
 800a310:	f003 0204 	and.w	r2, r3, #4
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a330:	ea42 0103 	orr.w	r1, r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69da      	ldr	r2, [r3, #28]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b08a      	sub	sp, #40	@ 0x28
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a378:	2301      	movs	r3, #1
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a37c:	f7fb fe40 	bl	8006000 <HAL_GetTick>
 800a380:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a388:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a390:	887b      	ldrh	r3, [r7, #2]
 800a392:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a394:	887b      	ldrh	r3, [r7, #2]
 800a396:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a398:	7ffb      	ldrb	r3, [r7, #31]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d00c      	beq.n	800a3b8 <HAL_SPI_TransmitReceive+0x4e>
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3a4:	d106      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x4a>
 800a3ae:	7ffb      	ldrb	r3, [r7, #31]
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d001      	beq.n	800a3b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	e1f3      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <HAL_SPI_TransmitReceive+0x60>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <HAL_SPI_TransmitReceive+0x60>
 800a3c4:	887b      	ldrh	r3, [r7, #2]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e1e8      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x72>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e1e1      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d003      	beq.n	800a3f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	887a      	ldrh	r2, [r7, #2]
 800a408:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	887a      	ldrh	r2, [r7, #2]
 800a410:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	887a      	ldrh	r2, [r7, #2]
 800a41e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	887a      	ldrh	r2, [r7, #2]
 800a424:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a43a:	d802      	bhi.n	800a442 <HAL_SPI_TransmitReceive+0xd8>
 800a43c:	8abb      	ldrh	r3, [r7, #20]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d908      	bls.n	800a454 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	e007      	b.n	800a464 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a462:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	d007      	beq.n	800a482 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a48a:	f240 8083 	bls.w	800a594 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_SPI_TransmitReceive+0x132>
 800a496:	8afb      	ldrh	r3, [r7, #22]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d16f      	bne.n	800a57c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ac:	1c9a      	adds	r2, r3, #2
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4c0:	e05c      	b.n	800a57c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f003 0302 	and.w	r3, r3, #2
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d11b      	bne.n	800a508 <HAL_SPI_TransmitReceive+0x19e>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d016      	beq.n	800a508 <HAL_SPI_TransmitReceive+0x19e>
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d113      	bne.n	800a508 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e4:	881a      	ldrh	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f0:	1c9a      	adds	r2, r3, #2
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b01      	cmp	r3, #1
 800a514:	d11c      	bne.n	800a550 <HAL_SPI_TransmitReceive+0x1e6>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d016      	beq.n	800a550 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52c:	b292      	uxth	r2, r2
 800a52e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a534:	1c9a      	adds	r2, r3, #2
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a54c:	2301      	movs	r3, #1
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a550:	f7fb fd56 	bl	8006000 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d80d      	bhi.n	800a57c <HAL_SPI_TransmitReceive+0x212>
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d009      	beq.n	800a57c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e111      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a580:	b29b      	uxth	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d19d      	bne.n	800a4c2 <HAL_SPI_TransmitReceive+0x158>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d197      	bne.n	800a4c2 <HAL_SPI_TransmitReceive+0x158>
 800a592:	e0e5      	b.n	800a760 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <HAL_SPI_TransmitReceive+0x23a>
 800a59c:	8afb      	ldrh	r3, [r7, #22]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	f040 80d1 	bne.w	800a746 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d912      	bls.n	800a5d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b2:	881a      	ldrh	r2, [r3, #0]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	1c9a      	adds	r2, r3, #2
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	3b02      	subs	r3, #2
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5d2:	e0b8      	b.n	800a746 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	330c      	adds	r3, #12
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5fa:	e0a4      	b.n	800a746 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b02      	cmp	r3, #2
 800a608:	d134      	bne.n	800a674 <HAL_SPI_TransmitReceive+0x30a>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02f      	beq.n	800a674 <HAL_SPI_TransmitReceive+0x30a>
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	2b01      	cmp	r3, #1
 800a618:	d12c      	bne.n	800a674 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a61e:	b29b      	uxth	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	d912      	bls.n	800a64a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a628:	881a      	ldrh	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	1c9a      	adds	r2, r3, #2
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a63e:	b29b      	uxth	r3, r3
 800a640:	3b02      	subs	r3, #2
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a648:	e012      	b.n	800a670 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	330c      	adds	r3, #12
 800a654:	7812      	ldrb	r2, [r2, #0]
 800a656:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a666:	b29b      	uxth	r3, r3
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d148      	bne.n	800a714 <HAL_SPI_TransmitReceive+0x3aa>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a688:	b29b      	uxth	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d042      	beq.n	800a714 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a694:	b29b      	uxth	r3, r3
 800a696:	2b01      	cmp	r3, #1
 800a698:	d923      	bls.n	800a6e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ac:	1c9a      	adds	r2, r3, #2
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b02      	subs	r3, #2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d81f      	bhi.n	800a710 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a6de:	605a      	str	r2, [r3, #4]
 800a6e0:	e016      	b.n	800a710 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f103 020c 	add.w	r2, r3, #12
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ee:	7812      	ldrb	r2, [r2, #0]
 800a6f0:	b2d2      	uxtb	r2, r2
 800a6f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a704:	b29b      	uxth	r3, r3
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a710:	2301      	movs	r3, #1
 800a712:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a714:	f7fb fc74 	bl	8006000 <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a720:	429a      	cmp	r2, r3
 800a722:	d803      	bhi.n	800a72c <HAL_SPI_TransmitReceive+0x3c2>
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72a:	d102      	bne.n	800a732 <HAL_SPI_TransmitReceive+0x3c8>
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e02c      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f47f af55 	bne.w	800a5fc <HAL_SPI_TransmitReceive+0x292>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f47f af4e 	bne.w	800a5fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 f93d 	bl	800a9e4 <SPI_EndRxTxTransaction>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2220      	movs	r2, #32
 800a774:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e00e      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a79e:	2300      	movs	r3, #0
  }
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3728      	adds	r7, #40	@ 0x28
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a7b8:	f7fb fc22 	bl	8006000 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a7c8:	f7fb fc1a 	bl	8006000 <HAL_GetTick>
 800a7cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a7ce:	4b39      	ldr	r3, [pc, #228]	@ (800a8b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	015b      	lsls	r3, r3, #5
 800a7d4:	0d1b      	lsrs	r3, r3, #20
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	fb02 f303 	mul.w	r3, r2, r3
 800a7dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7de:	e054      	b.n	800a88a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e6:	d050      	beq.n	800a88a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7e8:	f7fb fc0a 	bl	8006000 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d902      	bls.n	800a7fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d13d      	bne.n	800a87a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a80c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a816:	d111      	bne.n	800a83c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a820:	d004      	beq.n	800a82c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a82a:	d107      	bne.n	800a83c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a83a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a844:	d10f      	bne.n	800a866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e017      	b.n	800a8aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	3b01      	subs	r3, #1
 800a888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4013      	ands	r3, r2
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	429a      	cmp	r2, r3
 800a898:	bf0c      	ite	eq
 800a89a:	2301      	moveq	r3, #1
 800a89c:	2300      	movne	r3, #0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d19b      	bne.n	800a7e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20000020 	.word	0x20000020

0800a8b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	@ 0x28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a8ca:	f7fb fb99 	bl	8006000 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	1a9b      	subs	r3, r3, r2
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a8da:	f7fb fb91 	bl	8006000 <HAL_GetTick>
 800a8de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	330c      	adds	r3, #12
 800a8e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a8e8:	4b3d      	ldr	r3, [pc, #244]	@ (800a9e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	00da      	lsls	r2, r3, #3
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	0d1b      	lsrs	r3, r3, #20
 800a8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
 800a8fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a900:	e060      	b.n	800a9c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a908:	d107      	bne.n	800a91a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a918:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d050      	beq.n	800a9c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a922:	f7fb fb6d 	bl	8006000 <HAL_GetTick>
 800a926:	4602      	mov	r2, r0
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a92e:	429a      	cmp	r2, r3
 800a930:	d902      	bls.n	800a938 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	d13d      	bne.n	800a9b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a946:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a950:	d111      	bne.n	800a976 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a95a:	d004      	beq.n	800a966 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a964:	d107      	bne.n	800a976 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a974:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a97e:	d10f      	bne.n	800a9a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a99e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e010      	b.n	800a9d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d196      	bne.n	800a902 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3728      	adds	r7, #40	@ 0x28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000020 	.word	0x20000020

0800a9e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af02      	add	r7, sp, #8
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff ff5b 	bl	800a8b8 <SPI_WaitFifoStateUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa0c:	f043 0220 	orr.w	r2, r3, #32
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e027      	b.n	800aa68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2180      	movs	r1, #128	@ 0x80
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff fec0 	bl	800a7a8 <SPI_WaitFlagStateUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d007      	beq.n	800aa3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa32:	f043 0220 	orr.w	r2, r3, #32
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e014      	b.n	800aa68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff ff34 	bl	800a8b8 <SPI_WaitFifoStateUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d007      	beq.n	800aa66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e000      	b.n	800aa68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e049      	b.n	800ab16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d106      	bne.n	800aa9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7fa fa22 	bl	8004ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f001 fa0a 	bl	800bec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d001      	beq.n	800ab38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e04a      	b.n	800abce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a21      	ldr	r2, [pc, #132]	@ (800abdc <HAL_TIM_Base_Start_IT+0xbc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d018      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0x6c>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab62:	d013      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0x6c>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a1d      	ldr	r2, [pc, #116]	@ (800abe0 <HAL_TIM_Base_Start_IT+0xc0>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00e      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0x6c>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a1c      	ldr	r2, [pc, #112]	@ (800abe4 <HAL_TIM_Base_Start_IT+0xc4>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d009      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0x6c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a1a      	ldr	r2, [pc, #104]	@ (800abe8 <HAL_TIM_Base_Start_IT+0xc8>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d004      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0x6c>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a19      	ldr	r2, [pc, #100]	@ (800abec <HAL_TIM_Base_Start_IT+0xcc>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d115      	bne.n	800abb8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	4b17      	ldr	r3, [pc, #92]	@ (800abf0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b06      	cmp	r3, #6
 800ab9c:	d015      	beq.n	800abca <HAL_TIM_Base_Start_IT+0xaa>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba4:	d011      	beq.n	800abca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0201 	orr.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb6:	e008      	b.n	800abca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0201 	orr.w	r2, r2, #1
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	e000      	b.n	800abcc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	40012c00 	.word	0x40012c00
 800abe0:	40000400 	.word	0x40000400
 800abe4:	40000800 	.word	0x40000800
 800abe8:	40013400 	.word	0x40013400
 800abec:	40014000 	.word	0x40014000
 800abf0:	00010007 	.word	0x00010007

0800abf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e049      	b.n	800ac9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f841 	bl	800aca2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f001 f948 	bl	800bec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
	...

0800acb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d109      	bne.n	800acdc <HAL_TIM_PWM_Start+0x24>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	bf14      	ite	ne
 800acd4:	2301      	movne	r3, #1
 800acd6:	2300      	moveq	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	e03c      	b.n	800ad56 <HAL_TIM_PWM_Start+0x9e>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d109      	bne.n	800acf6 <HAL_TIM_PWM_Start+0x3e>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b01      	cmp	r3, #1
 800acec:	bf14      	ite	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	2300      	moveq	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	e02f      	b.n	800ad56 <HAL_TIM_PWM_Start+0x9e>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d109      	bne.n	800ad10 <HAL_TIM_PWM_Start+0x58>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	bf14      	ite	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	2300      	moveq	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	e022      	b.n	800ad56 <HAL_TIM_PWM_Start+0x9e>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b0c      	cmp	r3, #12
 800ad14:	d109      	bne.n	800ad2a <HAL_TIM_PWM_Start+0x72>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	bf14      	ite	ne
 800ad22:	2301      	movne	r3, #1
 800ad24:	2300      	moveq	r3, #0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	e015      	b.n	800ad56 <HAL_TIM_PWM_Start+0x9e>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b10      	cmp	r3, #16
 800ad2e:	d109      	bne.n	800ad44 <HAL_TIM_PWM_Start+0x8c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	bf14      	ite	ne
 800ad3c:	2301      	movne	r3, #1
 800ad3e:	2300      	moveq	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	e008      	b.n	800ad56 <HAL_TIM_PWM_Start+0x9e>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e097      	b.n	800ae8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <HAL_TIM_PWM_Start+0xb6>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad6c:	e023      	b.n	800adb6 <HAL_TIM_PWM_Start+0xfe>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d104      	bne.n	800ad7e <HAL_TIM_PWM_Start+0xc6>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad7c:	e01b      	b.n	800adb6 <HAL_TIM_PWM_Start+0xfe>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b08      	cmp	r3, #8
 800ad82:	d104      	bne.n	800ad8e <HAL_TIM_PWM_Start+0xd6>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad8c:	e013      	b.n	800adb6 <HAL_TIM_PWM_Start+0xfe>
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b0c      	cmp	r3, #12
 800ad92:	d104      	bne.n	800ad9e <HAL_TIM_PWM_Start+0xe6>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad9c:	e00b      	b.n	800adb6 <HAL_TIM_PWM_Start+0xfe>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b10      	cmp	r3, #16
 800ada2:	d104      	bne.n	800adae <HAL_TIM_PWM_Start+0xf6>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adac:	e003      	b.n	800adb6 <HAL_TIM_PWM_Start+0xfe>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2202      	movs	r2, #2
 800adb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2201      	movs	r2, #1
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 fcb0 	bl	800c724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a33      	ldr	r2, [pc, #204]	@ (800ae98 <HAL_TIM_PWM_Start+0x1e0>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d013      	beq.n	800adf6 <HAL_TIM_PWM_Start+0x13e>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a32      	ldr	r2, [pc, #200]	@ (800ae9c <HAL_TIM_PWM_Start+0x1e4>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d00e      	beq.n	800adf6 <HAL_TIM_PWM_Start+0x13e>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a30      	ldr	r2, [pc, #192]	@ (800aea0 <HAL_TIM_PWM_Start+0x1e8>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d009      	beq.n	800adf6 <HAL_TIM_PWM_Start+0x13e>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a2f      	ldr	r2, [pc, #188]	@ (800aea4 <HAL_TIM_PWM_Start+0x1ec>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d004      	beq.n	800adf6 <HAL_TIM_PWM_Start+0x13e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a2d      	ldr	r2, [pc, #180]	@ (800aea8 <HAL_TIM_PWM_Start+0x1f0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d101      	bne.n	800adfa <HAL_TIM_PWM_Start+0x142>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <HAL_TIM_PWM_Start+0x144>
 800adfa:	2300      	movs	r3, #0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a20      	ldr	r2, [pc, #128]	@ (800ae98 <HAL_TIM_PWM_Start+0x1e0>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d018      	beq.n	800ae4c <HAL_TIM_PWM_Start+0x194>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae22:	d013      	beq.n	800ae4c <HAL_TIM_PWM_Start+0x194>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a20      	ldr	r2, [pc, #128]	@ (800aeac <HAL_TIM_PWM_Start+0x1f4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00e      	beq.n	800ae4c <HAL_TIM_PWM_Start+0x194>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <HAL_TIM_PWM_Start+0x1f8>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_TIM_PWM_Start+0x194>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a17      	ldr	r2, [pc, #92]	@ (800ae9c <HAL_TIM_PWM_Start+0x1e4>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d004      	beq.n	800ae4c <HAL_TIM_PWM_Start+0x194>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a16      	ldr	r2, [pc, #88]	@ (800aea0 <HAL_TIM_PWM_Start+0x1e8>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d115      	bne.n	800ae78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	4b18      	ldr	r3, [pc, #96]	@ (800aeb4 <HAL_TIM_PWM_Start+0x1fc>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b06      	cmp	r3, #6
 800ae5c:	d015      	beq.n	800ae8a <HAL_TIM_PWM_Start+0x1d2>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae64:	d011      	beq.n	800ae8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f042 0201 	orr.w	r2, r2, #1
 800ae74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae76:	e008      	b.n	800ae8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f042 0201 	orr.w	r2, r2, #1
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	e000      	b.n	800ae8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	40012c00 	.word	0x40012c00
 800ae9c:	40013400 	.word	0x40013400
 800aea0:	40014000 	.word	0x40014000
 800aea4:	40014400 	.word	0x40014400
 800aea8:	40014800 	.word	0x40014800
 800aeac:	40000400 	.word	0x40000400
 800aeb0:	40000800 	.word	0x40000800
 800aeb4:	00010007 	.word	0x00010007

0800aeb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2200      	movs	r2, #0
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f001 fc2a 	bl	800c724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a3e      	ldr	r2, [pc, #248]	@ (800afd0 <HAL_TIM_PWM_Stop+0x118>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d013      	beq.n	800af02 <HAL_TIM_PWM_Stop+0x4a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a3d      	ldr	r2, [pc, #244]	@ (800afd4 <HAL_TIM_PWM_Stop+0x11c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00e      	beq.n	800af02 <HAL_TIM_PWM_Stop+0x4a>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a3b      	ldr	r2, [pc, #236]	@ (800afd8 <HAL_TIM_PWM_Stop+0x120>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d009      	beq.n	800af02 <HAL_TIM_PWM_Stop+0x4a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a3a      	ldr	r2, [pc, #232]	@ (800afdc <HAL_TIM_PWM_Stop+0x124>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d004      	beq.n	800af02 <HAL_TIM_PWM_Stop+0x4a>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a38      	ldr	r2, [pc, #224]	@ (800afe0 <HAL_TIM_PWM_Stop+0x128>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d101      	bne.n	800af06 <HAL_TIM_PWM_Stop+0x4e>
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <HAL_TIM_PWM_Stop+0x50>
 800af06:	2300      	movs	r3, #0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d017      	beq.n	800af3c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6a1a      	ldr	r2, [r3, #32]
 800af12:	f241 1311 	movw	r3, #4369	@ 0x1111
 800af16:	4013      	ands	r3, r2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10f      	bne.n	800af3c <HAL_TIM_PWM_Stop+0x84>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6a1a      	ldr	r2, [r3, #32]
 800af22:	f244 4344 	movw	r3, #17476	@ 0x4444
 800af26:	4013      	ands	r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d107      	bne.n	800af3c <HAL_TIM_PWM_Stop+0x84>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6a1a      	ldr	r2, [r3, #32]
 800af42:	f241 1311 	movw	r3, #4369	@ 0x1111
 800af46:	4013      	ands	r3, r2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10f      	bne.n	800af6c <HAL_TIM_PWM_Stop+0xb4>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	f244 4344 	movw	r3, #17476	@ 0x4444
 800af56:	4013      	ands	r3, r2
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d107      	bne.n	800af6c <HAL_TIM_PWM_Stop+0xb4>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0201 	bic.w	r2, r2, #1
 800af6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d104      	bne.n	800af7c <HAL_TIM_PWM_Stop+0xc4>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af7a:	e023      	b.n	800afc4 <HAL_TIM_PWM_Stop+0x10c>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d104      	bne.n	800af8c <HAL_TIM_PWM_Stop+0xd4>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af8a:	e01b      	b.n	800afc4 <HAL_TIM_PWM_Stop+0x10c>
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d104      	bne.n	800af9c <HAL_TIM_PWM_Stop+0xe4>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af9a:	e013      	b.n	800afc4 <HAL_TIM_PWM_Stop+0x10c>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b0c      	cmp	r3, #12
 800afa0:	d104      	bne.n	800afac <HAL_TIM_PWM_Stop+0xf4>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afaa:	e00b      	b.n	800afc4 <HAL_TIM_PWM_Stop+0x10c>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b10      	cmp	r3, #16
 800afb0:	d104      	bne.n	800afbc <HAL_TIM_PWM_Stop+0x104>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afba:	e003      	b.n	800afc4 <HAL_TIM_PWM_Stop+0x10c>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	40012c00 	.word	0x40012c00
 800afd4:	40013400 	.word	0x40013400
 800afd8:	40014000 	.word	0x40014000
 800afdc:	40014400 	.word	0x40014400
 800afe0:	40014800 	.word	0x40014800

0800afe4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <HAL_TIM_PWM_Start_DMA+0x2c>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	bf0c      	ite	eq
 800b008:	2301      	moveq	r3, #1
 800b00a:	2300      	movne	r3, #0
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	e03c      	b.n	800b08a <HAL_TIM_PWM_Start_DMA+0xa6>
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b04      	cmp	r3, #4
 800b014:	d109      	bne.n	800b02a <HAL_TIM_PWM_Start_DMA+0x46>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b02      	cmp	r3, #2
 800b020:	bf0c      	ite	eq
 800b022:	2301      	moveq	r3, #1
 800b024:	2300      	movne	r3, #0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	e02f      	b.n	800b08a <HAL_TIM_PWM_Start_DMA+0xa6>
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d109      	bne.n	800b044 <HAL_TIM_PWM_Start_DMA+0x60>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b02      	cmp	r3, #2
 800b03a:	bf0c      	ite	eq
 800b03c:	2301      	moveq	r3, #1
 800b03e:	2300      	movne	r3, #0
 800b040:	b2db      	uxtb	r3, r3
 800b042:	e022      	b.n	800b08a <HAL_TIM_PWM_Start_DMA+0xa6>
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b0c      	cmp	r3, #12
 800b048:	d109      	bne.n	800b05e <HAL_TIM_PWM_Start_DMA+0x7a>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	bf0c      	ite	eq
 800b056:	2301      	moveq	r3, #1
 800b058:	2300      	movne	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	e015      	b.n	800b08a <HAL_TIM_PWM_Start_DMA+0xa6>
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b10      	cmp	r3, #16
 800b062:	d109      	bne.n	800b078 <HAL_TIM_PWM_Start_DMA+0x94>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	bf0c      	ite	eq
 800b070:	2301      	moveq	r3, #1
 800b072:	2300      	movne	r3, #0
 800b074:	b2db      	uxtb	r3, r3
 800b076:	e008      	b.n	800b08a <HAL_TIM_PWM_Start_DMA+0xa6>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b02      	cmp	r3, #2
 800b082:	bf0c      	ite	eq
 800b084:	2301      	moveq	r3, #1
 800b086:	2300      	movne	r3, #0
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b08e:	2302      	movs	r3, #2
 800b090:	e1a6      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <HAL_TIM_PWM_Start_DMA+0xc8>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	bf0c      	ite	eq
 800b0a4:	2301      	moveq	r3, #1
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	e03c      	b.n	800b126 <HAL_TIM_PWM_Start_DMA+0x142>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d109      	bne.n	800b0c6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	bf0c      	ite	eq
 800b0be:	2301      	moveq	r3, #1
 800b0c0:	2300      	movne	r3, #0
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	e02f      	b.n	800b126 <HAL_TIM_PWM_Start_DMA+0x142>
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2b08      	cmp	r3, #8
 800b0ca:	d109      	bne.n	800b0e0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2301      	moveq	r3, #1
 800b0da:	2300      	movne	r3, #0
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	e022      	b.n	800b126 <HAL_TIM_PWM_Start_DMA+0x142>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b0c      	cmp	r3, #12
 800b0e4:	d109      	bne.n	800b0fa <HAL_TIM_PWM_Start_DMA+0x116>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	bf0c      	ite	eq
 800b0f2:	2301      	moveq	r3, #1
 800b0f4:	2300      	movne	r3, #0
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	e015      	b.n	800b126 <HAL_TIM_PWM_Start_DMA+0x142>
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b10      	cmp	r3, #16
 800b0fe:	d109      	bne.n	800b114 <HAL_TIM_PWM_Start_DMA+0x130>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b01      	cmp	r3, #1
 800b10a:	bf0c      	ite	eq
 800b10c:	2301      	moveq	r3, #1
 800b10e:	2300      	movne	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	e008      	b.n	800b126 <HAL_TIM_PWM_Start_DMA+0x142>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	bf0c      	ite	eq
 800b120:	2301      	moveq	r3, #1
 800b122:	2300      	movne	r3, #0
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d034      	beq.n	800b194 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <HAL_TIM_PWM_Start_DMA+0x152>
 800b130:	887b      	ldrh	r3, [r7, #2]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e152      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d104      	bne.n	800b14a <HAL_TIM_PWM_Start_DMA+0x166>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2202      	movs	r2, #2
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b148:	e026      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d104      	bne.n	800b15a <HAL_TIM_PWM_Start_DMA+0x176>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b158:	e01e      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d104      	bne.n	800b16a <HAL_TIM_PWM_Start_DMA+0x186>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b168:	e016      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b0c      	cmp	r3, #12
 800b16e:	d104      	bne.n	800b17a <HAL_TIM_PWM_Start_DMA+0x196>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b178:	e00e      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b10      	cmp	r3, #16
 800b17e:	d104      	bne.n	800b18a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b188:	e006      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b192:	e001      	b.n	800b198 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e123      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b0c      	cmp	r3, #12
 800b19c:	f200 80ae 	bhi.w	800b2fc <HAL_TIM_PWM_Start_DMA+0x318>
 800b1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b1dd 	.word	0x0800b1dd
 800b1ac:	0800b2fd 	.word	0x0800b2fd
 800b1b0:	0800b2fd 	.word	0x0800b2fd
 800b1b4:	0800b2fd 	.word	0x0800b2fd
 800b1b8:	0800b225 	.word	0x0800b225
 800b1bc:	0800b2fd 	.word	0x0800b2fd
 800b1c0:	0800b2fd 	.word	0x0800b2fd
 800b1c4:	0800b2fd 	.word	0x0800b2fd
 800b1c8:	0800b26d 	.word	0x0800b26d
 800b1cc:	0800b2fd 	.word	0x0800b2fd
 800b1d0:	0800b2fd 	.word	0x0800b2fd
 800b1d4:	0800b2fd 	.word	0x0800b2fd
 800b1d8:	0800b2b5 	.word	0x0800b2b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e0:	4a81      	ldr	r2, [pc, #516]	@ (800b3e8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b1e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e8:	4a80      	ldr	r2, [pc, #512]	@ (800b3ec <HAL_TIM_PWM_Start_DMA+0x408>)
 800b1ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f0:	4a7f      	ldr	r2, [pc, #508]	@ (800b3f0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b1f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3334      	adds	r3, #52	@ 0x34
 800b200:	461a      	mov	r2, r3
 800b202:	887b      	ldrh	r3, [r7, #2]
 800b204:	f7fc fd68 	bl	8007cd8 <HAL_DMA_Start_IT>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e0e6      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b220:	60da      	str	r2, [r3, #12]
      break;
 800b222:	e06e      	b.n	800b302 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b228:	4a6f      	ldr	r2, [pc, #444]	@ (800b3e8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b22a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b230:	4a6e      	ldr	r2, [pc, #440]	@ (800b3ec <HAL_TIM_PWM_Start_DMA+0x408>)
 800b232:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b238:	4a6d      	ldr	r2, [pc, #436]	@ (800b3f0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b23a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3338      	adds	r3, #56	@ 0x38
 800b248:	461a      	mov	r2, r3
 800b24a:	887b      	ldrh	r3, [r7, #2]
 800b24c:	f7fc fd44 	bl	8007cd8 <HAL_DMA_Start_IT>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e0c2      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b268:	60da      	str	r2, [r3, #12]
      break;
 800b26a:	e04a      	b.n	800b302 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b270:	4a5d      	ldr	r2, [pc, #372]	@ (800b3e8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b272:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	4a5c      	ldr	r2, [pc, #368]	@ (800b3ec <HAL_TIM_PWM_Start_DMA+0x408>)
 800b27a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b280:	4a5b      	ldr	r2, [pc, #364]	@ (800b3f0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b282:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b288:	6879      	ldr	r1, [r7, #4]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	333c      	adds	r3, #60	@ 0x3c
 800b290:	461a      	mov	r2, r3
 800b292:	887b      	ldrh	r3, [r7, #2]
 800b294:	f7fc fd20 	bl	8007cd8 <HAL_DMA_Start_IT>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e09e      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68da      	ldr	r2, [r3, #12]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2b0:	60da      	str	r2, [r3, #12]
      break;
 800b2b2:	e026      	b.n	800b302 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b8:	4a4b      	ldr	r2, [pc, #300]	@ (800b3e8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b2ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c0:	4a4a      	ldr	r2, [pc, #296]	@ (800b3ec <HAL_TIM_PWM_Start_DMA+0x408>)
 800b2c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c8:	4a49      	ldr	r2, [pc, #292]	@ (800b3f0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b2ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3340      	adds	r3, #64	@ 0x40
 800b2d8:	461a      	mov	r2, r3
 800b2da:	887b      	ldrh	r3, [r7, #2]
 800b2dc:	f7fc fcfc 	bl	8007cd8 <HAL_DMA_Start_IT>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e07a      	b.n	800b3e0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b2f8:	60da      	str	r2, [r3, #12]
      break;
 800b2fa:	e002      	b.n	800b302 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b300:	bf00      	nop
  }

  if (status == HAL_OK)
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d16a      	bne.n	800b3de <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2201      	movs	r2, #1
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fa07 	bl	800c724 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a36      	ldr	r2, [pc, #216]	@ (800b3f4 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d013      	beq.n	800b348 <HAL_TIM_PWM_Start_DMA+0x364>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a34      	ldr	r2, [pc, #208]	@ (800b3f8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d00e      	beq.n	800b348 <HAL_TIM_PWM_Start_DMA+0x364>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a33      	ldr	r2, [pc, #204]	@ (800b3fc <HAL_TIM_PWM_Start_DMA+0x418>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d009      	beq.n	800b348 <HAL_TIM_PWM_Start_DMA+0x364>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a31      	ldr	r2, [pc, #196]	@ (800b400 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d004      	beq.n	800b348 <HAL_TIM_PWM_Start_DMA+0x364>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a30      	ldr	r2, [pc, #192]	@ (800b404 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d101      	bne.n	800b34c <HAL_TIM_PWM_Start_DMA+0x368>
 800b348:	2301      	movs	r3, #1
 800b34a:	e000      	b.n	800b34e <HAL_TIM_PWM_Start_DMA+0x36a>
 800b34c:	2300      	movs	r3, #0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a23      	ldr	r2, [pc, #140]	@ (800b3f4 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d018      	beq.n	800b39e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b374:	d013      	beq.n	800b39e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a23      	ldr	r2, [pc, #140]	@ (800b408 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00e      	beq.n	800b39e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a21      	ldr	r2, [pc, #132]	@ (800b40c <HAL_TIM_PWM_Start_DMA+0x428>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d009      	beq.n	800b39e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d004      	beq.n	800b39e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a18      	ldr	r2, [pc, #96]	@ (800b3fc <HAL_TIM_PWM_Start_DMA+0x418>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d115      	bne.n	800b3ca <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b410 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b06      	cmp	r3, #6
 800b3ae:	d015      	beq.n	800b3dc <HAL_TIM_PWM_Start_DMA+0x3f8>
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3b6:	d011      	beq.n	800b3dc <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0201 	orr.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c8:	e008      	b.n	800b3dc <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f042 0201 	orr.w	r2, r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e000      	b.n	800b3de <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3dc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	0800bdb7 	.word	0x0800bdb7
 800b3ec:	0800be5f 	.word	0x0800be5f
 800b3f0:	0800bd25 	.word	0x0800bd25
 800b3f4:	40012c00 	.word	0x40012c00
 800b3f8:	40013400 	.word	0x40013400
 800b3fc:	40014000 	.word	0x40014000
 800b400:	40014400 	.word	0x40014400
 800b404:	40014800 	.word	0x40014800
 800b408:	40000400 	.word	0x40000400
 800b40c:	40000800 	.word	0x40000800
 800b410:	00010007 	.word	0x00010007

0800b414 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b0c      	cmp	r3, #12
 800b426:	d855      	bhi.n	800b4d4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800b428:	a201      	add	r2, pc, #4	@ (adr r2, 800b430 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b465 	.word	0x0800b465
 800b434:	0800b4d5 	.word	0x0800b4d5
 800b438:	0800b4d5 	.word	0x0800b4d5
 800b43c:	0800b4d5 	.word	0x0800b4d5
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b4d5 	.word	0x0800b4d5
 800b448:	0800b4d5 	.word	0x0800b4d5
 800b44c:	0800b4d5 	.word	0x0800b4d5
 800b450:	0800b49d 	.word	0x0800b49d
 800b454:	0800b4d5 	.word	0x0800b4d5
 800b458:	0800b4d5 	.word	0x0800b4d5
 800b45c:	0800b4d5 	.word	0x0800b4d5
 800b460:	0800b4b9 	.word	0x0800b4b9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b472:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fc fd01 	bl	8007e80 <HAL_DMA_Abort_IT>
      break;
 800b47e:	e02c      	b.n	800b4da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b48e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b494:	4618      	mov	r0, r3
 800b496:	f7fc fcf3 	bl	8007e80 <HAL_DMA_Abort_IT>
      break;
 800b49a:	e01e      	b.n	800b4da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fc fce5 	bl	8007e80 <HAL_DMA_Abort_IT>
      break;
 800b4b6:	e010      	b.n	800b4da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b4c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fc fcd7 	bl	8007e80 <HAL_DMA_Abort_IT>
      break;
 800b4d2:	e002      	b.n	800b4da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d8:	bf00      	nop
  }

  if (status == HAL_OK)
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 8081 	bne.w	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 f91a 	bl	800c724 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b5f0 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d013      	beq.n	800b522 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a3d      	ldr	r2, [pc, #244]	@ (800b5f4 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00e      	beq.n	800b522 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a3b      	ldr	r2, [pc, #236]	@ (800b5f8 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d009      	beq.n	800b522 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a3a      	ldr	r2, [pc, #232]	@ (800b5fc <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d004      	beq.n	800b522 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a38      	ldr	r2, [pc, #224]	@ (800b600 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d101      	bne.n	800b526 <HAL_TIM_PWM_Stop_DMA+0x112>
 800b522:	2301      	movs	r3, #1
 800b524:	e000      	b.n	800b528 <HAL_TIM_PWM_Stop_DMA+0x114>
 800b526:	2300      	movs	r3, #0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d017      	beq.n	800b55c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6a1a      	ldr	r2, [r3, #32]
 800b532:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b536:	4013      	ands	r3, r2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10f      	bne.n	800b55c <HAL_TIM_PWM_Stop_DMA+0x148>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a1a      	ldr	r2, [r3, #32]
 800b542:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b546:	4013      	ands	r3, r2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d107      	bne.n	800b55c <HAL_TIM_PWM_Stop_DMA+0x148>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b55a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6a1a      	ldr	r2, [r3, #32]
 800b562:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b566:	4013      	ands	r3, r2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10f      	bne.n	800b58c <HAL_TIM_PWM_Stop_DMA+0x178>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6a1a      	ldr	r2, [r3, #32]
 800b572:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b576:	4013      	ands	r3, r2
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d107      	bne.n	800b58c <HAL_TIM_PWM_Stop_DMA+0x178>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 0201 	bic.w	r2, r2, #1
 800b58a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d104      	bne.n	800b59c <HAL_TIM_PWM_Stop_DMA+0x188>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b59a:	e023      	b.n	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d104      	bne.n	800b5ac <HAL_TIM_PWM_Stop_DMA+0x198>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5aa:	e01b      	b.n	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b08      	cmp	r3, #8
 800b5b0:	d104      	bne.n	800b5bc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5ba:	e013      	b.n	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2b0c      	cmp	r3, #12
 800b5c0:	d104      	bne.n	800b5cc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5ca:	e00b      	b.n	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b10      	cmp	r3, #16
 800b5d0:	d104      	bne.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5da:	e003      	b.n	800b5e4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	40012c00 	.word	0x40012c00
 800b5f4:	40013400 	.word	0x40013400
 800b5f8:	40014000 	.word	0x40014000
 800b5fc:	40014400 	.word	0x40014400
 800b600:	40014800 	.word	0x40014800

0800b604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d020      	beq.n	800b668 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f003 0302 	and.w	r3, r3, #2
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01b      	beq.n	800b668 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f06f 0202 	mvn.w	r2, #2
 800b638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fb40 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800b654:	e005      	b.n	800b662 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fb32 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7f7 fc0d 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d020      	beq.n	800b6b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0304 	and.w	r3, r3, #4
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01b      	beq.n	800b6b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0204 	mvn.w	r2, #4
 800b684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2202      	movs	r2, #2
 800b68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb1a 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800b6a0:	e005      	b.n	800b6ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fb0c 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7f7 fbe7 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f003 0308 	and.w	r3, r3, #8
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d020      	beq.n	800b700 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f003 0308 	and.w	r3, r3, #8
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01b      	beq.n	800b700 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0208 	mvn.w	r2, #8
 800b6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2204      	movs	r2, #4
 800b6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 faf4 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800b6ec:	e005      	b.n	800b6fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fae6 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7f7 fbc1 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0310 	and.w	r3, r3, #16
 800b706:	2b00      	cmp	r3, #0
 800b708:	d020      	beq.n	800b74c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01b      	beq.n	800b74c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0210 	mvn.w	r2, #16
 800b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2208      	movs	r2, #8
 800b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 face 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800b738:	e005      	b.n	800b746 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fac0 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7f7 fb9b 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00c      	beq.n	800b770 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0201 	mvn.w	r2, #1
 800b768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7f7 fd48 	bl	8003200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00c      	beq.n	800b79e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 f875 	bl	800c888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00c      	beq.n	800b7c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d007      	beq.n	800b7c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 f86d 	bl	800c89c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00c      	beq.n	800b7e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d007      	beq.n	800b7e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fa8b 	bl	800bcfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00c      	beq.n	800b80a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f06f 0220 	mvn.w	r2, #32
 800b802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f001 f835 	bl	800c874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00c      	beq.n	800b82e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 f841 	bl	800c8b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00c      	beq.n	800b852 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d007      	beq.n	800b852 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 f839 	bl	800c8c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00c      	beq.n	800b876 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d007      	beq.n	800b876 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f001 f831 	bl	800c8d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00c      	beq.n	800b89a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f829 	bl	800c8ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d101      	bne.n	800b8c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8be:	2302      	movs	r3, #2
 800b8c0:	e0ff      	b.n	800bac2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b14      	cmp	r3, #20
 800b8ce:	f200 80f0 	bhi.w	800bab2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b92d 	.word	0x0800b92d
 800b8dc:	0800bab3 	.word	0x0800bab3
 800b8e0:	0800bab3 	.word	0x0800bab3
 800b8e4:	0800bab3 	.word	0x0800bab3
 800b8e8:	0800b96d 	.word	0x0800b96d
 800b8ec:	0800bab3 	.word	0x0800bab3
 800b8f0:	0800bab3 	.word	0x0800bab3
 800b8f4:	0800bab3 	.word	0x0800bab3
 800b8f8:	0800b9af 	.word	0x0800b9af
 800b8fc:	0800bab3 	.word	0x0800bab3
 800b900:	0800bab3 	.word	0x0800bab3
 800b904:	0800bab3 	.word	0x0800bab3
 800b908:	0800b9ef 	.word	0x0800b9ef
 800b90c:	0800bab3 	.word	0x0800bab3
 800b910:	0800bab3 	.word	0x0800bab3
 800b914:	0800bab3 	.word	0x0800bab3
 800b918:	0800ba31 	.word	0x0800ba31
 800b91c:	0800bab3 	.word	0x0800bab3
 800b920:	0800bab3 	.word	0x0800bab3
 800b924:	0800bab3 	.word	0x0800bab3
 800b928:	0800ba71 	.word	0x0800ba71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68b9      	ldr	r1, [r7, #8]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 fb64 	bl	800c000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0208 	orr.w	r2, r2, #8
 800b946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 0204 	bic.w	r2, r2, #4
 800b956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6999      	ldr	r1, [r3, #24]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	691a      	ldr	r2, [r3, #16]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	619a      	str	r2, [r3, #24]
      break;
 800b96a:	e0a5      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68b9      	ldr	r1, [r7, #8]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fbd4 	bl	800c120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6999      	ldr	r1, [r3, #24]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	021a      	lsls	r2, r3, #8
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	619a      	str	r2, [r3, #24]
      break;
 800b9ac:	e084      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 fc3d 	bl	800c234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69da      	ldr	r2, [r3, #28]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0208 	orr.w	r2, r2, #8
 800b9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	69da      	ldr	r2, [r3, #28]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0204 	bic.w	r2, r2, #4
 800b9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	69d9      	ldr	r1, [r3, #28]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	691a      	ldr	r2, [r3, #16]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	61da      	str	r2, [r3, #28]
      break;
 800b9ec:	e064      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fca5 	bl	800c344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69da      	ldr	r2, [r3, #28]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	69d9      	ldr	r1, [r3, #28]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	021a      	lsls	r2, r3, #8
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	61da      	str	r2, [r3, #28]
      break;
 800ba2e:	e043      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68b9      	ldr	r1, [r7, #8]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fd0e 	bl	800c458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f042 0208 	orr.w	r2, r2, #8
 800ba4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0204 	bic.w	r2, r2, #4
 800ba5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	691a      	ldr	r2, [r3, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ba6e:	e023      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68b9      	ldr	r1, [r7, #8]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fd52 	bl	800c520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	021a      	lsls	r2, r3, #8
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bab0:	e002      	b.n	800bab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	75fb      	strb	r3, [r7, #23]
      break;
 800bab6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop

0800bacc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e0de      	b.n	800bca6 <HAL_TIM_ConfigClockSource+0x1da>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bb06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a63      	ldr	r2, [pc, #396]	@ (800bcb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	f000 80a9 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bb28:	4a61      	ldr	r2, [pc, #388]	@ (800bcb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	f200 80ae 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb30:	4a60      	ldr	r2, [pc, #384]	@ (800bcb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	f000 80a1 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bb38:	4a5e      	ldr	r2, [pc, #376]	@ (800bcb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	f200 80a6 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb40:	4a5d      	ldr	r2, [pc, #372]	@ (800bcb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	f000 8099 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bb48:	4a5b      	ldr	r2, [pc, #364]	@ (800bcb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	f200 809e 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb50:	4a5a      	ldr	r2, [pc, #360]	@ (800bcbc <HAL_TIM_ConfigClockSource+0x1f0>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	f000 8091 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bb58:	4a58      	ldr	r2, [pc, #352]	@ (800bcbc <HAL_TIM_ConfigClockSource+0x1f0>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	f200 8096 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb64:	f000 8089 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bb68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb6c:	f200 808e 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb74:	d03e      	beq.n	800bbf4 <HAL_TIM_ConfigClockSource+0x128>
 800bb76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb7a:	f200 8087 	bhi.w	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb82:	f000 8086 	beq.w	800bc92 <HAL_TIM_ConfigClockSource+0x1c6>
 800bb86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb8a:	d87f      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb8c:	2b70      	cmp	r3, #112	@ 0x70
 800bb8e:	d01a      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0xfa>
 800bb90:	2b70      	cmp	r3, #112	@ 0x70
 800bb92:	d87b      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb94:	2b60      	cmp	r3, #96	@ 0x60
 800bb96:	d050      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x16e>
 800bb98:	2b60      	cmp	r3, #96	@ 0x60
 800bb9a:	d877      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bb9c:	2b50      	cmp	r3, #80	@ 0x50
 800bb9e:	d03c      	beq.n	800bc1a <HAL_TIM_ConfigClockSource+0x14e>
 800bba0:	2b50      	cmp	r3, #80	@ 0x50
 800bba2:	d873      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bba4:	2b40      	cmp	r3, #64	@ 0x40
 800bba6:	d058      	beq.n	800bc5a <HAL_TIM_ConfigClockSource+0x18e>
 800bba8:	2b40      	cmp	r3, #64	@ 0x40
 800bbaa:	d86f      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bbac:	2b30      	cmp	r3, #48	@ 0x30
 800bbae:	d064      	beq.n	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bbb0:	2b30      	cmp	r3, #48	@ 0x30
 800bbb2:	d86b      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bbb4:	2b20      	cmp	r3, #32
 800bbb6:	d060      	beq.n	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d867      	bhi.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d05c      	beq.n	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d05a      	beq.n	800bc7a <HAL_TIM_ConfigClockSource+0x1ae>
 800bbc4:	e062      	b.n	800bc8c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbd6:	f000 fd85 	bl	800c6e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bbe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	609a      	str	r2, [r3, #8]
      break;
 800bbf2:	e04f      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc04:	f000 fd6e 	bl	800c6e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689a      	ldr	r2, [r3, #8]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc16:	609a      	str	r2, [r3, #8]
      break;
 800bc18:	e03c      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc26:	461a      	mov	r2, r3
 800bc28:	f000 fce0 	bl	800c5ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2150      	movs	r1, #80	@ 0x50
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fd39 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800bc38:	e02c      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc46:	461a      	mov	r2, r3
 800bc48:	f000 fcff 	bl	800c64a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2160      	movs	r1, #96	@ 0x60
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fd29 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800bc58:	e01c      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc66:	461a      	mov	r2, r3
 800bc68:	f000 fcc0 	bl	800c5ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2140      	movs	r1, #64	@ 0x40
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fd19 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800bc78:	e00c      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4619      	mov	r1, r3
 800bc84:	4610      	mov	r0, r2
 800bc86:	f000 fd10 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800bc8a:	e003      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc90:	e000      	b.n	800bc94 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800bc92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	00100070 	.word	0x00100070
 800bcb4:	00100040 	.word	0x00100040
 800bcb8:	00100030 	.word	0x00100030
 800bcbc:	00100020 	.word	0x00100020

0800bcc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d107      	bne.n	800bd4c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd4a:	e02a      	b.n	800bda2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d107      	bne.n	800bd66 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd64:	e01d      	b.n	800bda2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d107      	bne.n	800bd80 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2204      	movs	r2, #4
 800bd74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd7e:	e010      	b.n	800bda2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d107      	bne.n	800bd9a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2208      	movs	r2, #8
 800bd8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd98:	e003      	b.n	800bda2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff ffb4 	bl	800bd10 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	771a      	strb	r2, [r3, #28]
}
 800bdae:	bf00      	nop
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d10b      	bne.n	800bde6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d136      	bne.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bde4:	e031      	b.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d10b      	bne.n	800be08 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d125      	bne.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be06:	e020      	b.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10b      	bne.n	800be2a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2204      	movs	r2, #4
 800be16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d114      	bne.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be28:	e00f      	b.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d10a      	bne.n	800be4a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2208      	movs	r2, #8
 800be38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7f7 f816 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	771a      	strb	r2, [r3, #28]
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b084      	sub	sp, #16
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d103      	bne.n	800be7e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2201      	movs	r2, #1
 800be7a:	771a      	strb	r2, [r3, #28]
 800be7c:	e019      	b.n	800beb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	d103      	bne.n	800be90 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2202      	movs	r2, #2
 800be8c:	771a      	strb	r2, [r3, #28]
 800be8e:	e010      	b.n	800beb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d103      	bne.n	800bea2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2204      	movs	r2, #4
 800be9e:	771a      	strb	r2, [r3, #28]
 800bea0:	e007      	b.n	800beb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d102      	bne.n	800beb2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2208      	movs	r2, #8
 800beb0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff ff18 	bl	800bce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	771a      	strb	r2, [r3, #28]
}
 800bebe:	bf00      	nop
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a42      	ldr	r2, [pc, #264]	@ (800bfe4 <TIM_Base_SetConfig+0x11c>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00f      	beq.n	800bf00 <TIM_Base_SetConfig+0x38>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bee6:	d00b      	beq.n	800bf00 <TIM_Base_SetConfig+0x38>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a3f      	ldr	r2, [pc, #252]	@ (800bfe8 <TIM_Base_SetConfig+0x120>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d007      	beq.n	800bf00 <TIM_Base_SetConfig+0x38>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a3e      	ldr	r2, [pc, #248]	@ (800bfec <TIM_Base_SetConfig+0x124>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d003      	beq.n	800bf00 <TIM_Base_SetConfig+0x38>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a3d      	ldr	r2, [pc, #244]	@ (800bff0 <TIM_Base_SetConfig+0x128>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d108      	bne.n	800bf12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a33      	ldr	r2, [pc, #204]	@ (800bfe4 <TIM_Base_SetConfig+0x11c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d01b      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf20:	d017      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a30      	ldr	r2, [pc, #192]	@ (800bfe8 <TIM_Base_SetConfig+0x120>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d013      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a2f      	ldr	r2, [pc, #188]	@ (800bfec <TIM_Base_SetConfig+0x124>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d00f      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a2e      	ldr	r2, [pc, #184]	@ (800bff0 <TIM_Base_SetConfig+0x128>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d00b      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a2d      	ldr	r2, [pc, #180]	@ (800bff4 <TIM_Base_SetConfig+0x12c>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d007      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a2c      	ldr	r2, [pc, #176]	@ (800bff8 <TIM_Base_SetConfig+0x130>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d003      	beq.n	800bf52 <TIM_Base_SetConfig+0x8a>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a2b      	ldr	r2, [pc, #172]	@ (800bffc <TIM_Base_SetConfig+0x134>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d108      	bne.n	800bf64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	689a      	ldr	r2, [r3, #8]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a16      	ldr	r2, [pc, #88]	@ (800bfe4 <TIM_Base_SetConfig+0x11c>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d00f      	beq.n	800bfb0 <TIM_Base_SetConfig+0xe8>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a17      	ldr	r2, [pc, #92]	@ (800bff0 <TIM_Base_SetConfig+0x128>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d00b      	beq.n	800bfb0 <TIM_Base_SetConfig+0xe8>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a16      	ldr	r2, [pc, #88]	@ (800bff4 <TIM_Base_SetConfig+0x12c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d007      	beq.n	800bfb0 <TIM_Base_SetConfig+0xe8>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a15      	ldr	r2, [pc, #84]	@ (800bff8 <TIM_Base_SetConfig+0x130>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d003      	beq.n	800bfb0 <TIM_Base_SetConfig+0xe8>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a14      	ldr	r2, [pc, #80]	@ (800bffc <TIM_Base_SetConfig+0x134>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d103      	bne.n	800bfb8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	691a      	ldr	r2, [r3, #16]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d105      	bne.n	800bfd6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	f023 0201 	bic.w	r2, r3, #1
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	611a      	str	r2, [r3, #16]
  }
}
 800bfd6:	bf00      	nop
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	40012c00 	.word	0x40012c00
 800bfe8:	40000400 	.word	0x40000400
 800bfec:	40000800 	.word	0x40000800
 800bff0:	40013400 	.word	0x40013400
 800bff4:	40014000 	.word	0x40014000
 800bff8:	40014400 	.word	0x40014400
 800bffc:	40014800 	.word	0x40014800

0800c000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	f023 0201 	bic.w	r2, r3, #1
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f023 0303 	bic.w	r3, r3, #3
 800c03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4313      	orrs	r3, r2
 800c044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f023 0302 	bic.w	r3, r3, #2
 800c04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a2c      	ldr	r2, [pc, #176]	@ (800c10c <TIM_OC1_SetConfig+0x10c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d00f      	beq.n	800c080 <TIM_OC1_SetConfig+0x80>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a2b      	ldr	r2, [pc, #172]	@ (800c110 <TIM_OC1_SetConfig+0x110>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00b      	beq.n	800c080 <TIM_OC1_SetConfig+0x80>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a2a      	ldr	r2, [pc, #168]	@ (800c114 <TIM_OC1_SetConfig+0x114>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d007      	beq.n	800c080 <TIM_OC1_SetConfig+0x80>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a29      	ldr	r2, [pc, #164]	@ (800c118 <TIM_OC1_SetConfig+0x118>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d003      	beq.n	800c080 <TIM_OC1_SetConfig+0x80>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a28      	ldr	r2, [pc, #160]	@ (800c11c <TIM_OC1_SetConfig+0x11c>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d10c      	bne.n	800c09a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f023 0308 	bic.w	r3, r3, #8
 800c086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f023 0304 	bic.w	r3, r3, #4
 800c098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a1b      	ldr	r2, [pc, #108]	@ (800c10c <TIM_OC1_SetConfig+0x10c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d00f      	beq.n	800c0c2 <TIM_OC1_SetConfig+0xc2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a1a      	ldr	r2, [pc, #104]	@ (800c110 <TIM_OC1_SetConfig+0x110>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d00b      	beq.n	800c0c2 <TIM_OC1_SetConfig+0xc2>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a19      	ldr	r2, [pc, #100]	@ (800c114 <TIM_OC1_SetConfig+0x114>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d007      	beq.n	800c0c2 <TIM_OC1_SetConfig+0xc2>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a18      	ldr	r2, [pc, #96]	@ (800c118 <TIM_OC1_SetConfig+0x118>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d003      	beq.n	800c0c2 <TIM_OC1_SetConfig+0xc2>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a17      	ldr	r2, [pc, #92]	@ (800c11c <TIM_OC1_SetConfig+0x11c>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d111      	bne.n	800c0e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	621a      	str	r2, [r3, #32]
}
 800c100:	bf00      	nop
 800c102:	371c      	adds	r7, #28
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	40012c00 	.word	0x40012c00
 800c110:	40013400 	.word	0x40013400
 800c114:	40014000 	.word	0x40014000
 800c118:	40014400 	.word	0x40014400
 800c11c:	40014800 	.word	0x40014800

0800c120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	f023 0210 	bic.w	r2, r3, #16
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c14e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	021b      	lsls	r3, r3, #8
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4313      	orrs	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f023 0320 	bic.w	r3, r3, #32
 800c16e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	4313      	orrs	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a28      	ldr	r2, [pc, #160]	@ (800c220 <TIM_OC2_SetConfig+0x100>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d003      	beq.n	800c18c <TIM_OC2_SetConfig+0x6c>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a27      	ldr	r2, [pc, #156]	@ (800c224 <TIM_OC2_SetConfig+0x104>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d10d      	bne.n	800c1a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	011b      	lsls	r3, r3, #4
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a1d      	ldr	r2, [pc, #116]	@ (800c220 <TIM_OC2_SetConfig+0x100>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d00f      	beq.n	800c1d0 <TIM_OC2_SetConfig+0xb0>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c224 <TIM_OC2_SetConfig+0x104>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00b      	beq.n	800c1d0 <TIM_OC2_SetConfig+0xb0>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c228 <TIM_OC2_SetConfig+0x108>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <TIM_OC2_SetConfig+0xb0>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c22c <TIM_OC2_SetConfig+0x10c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_OC2_SetConfig+0xb0>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a19      	ldr	r2, [pc, #100]	@ (800c230 <TIM_OC2_SetConfig+0x110>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d113      	bne.n	800c1f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	695b      	ldr	r3, [r3, #20]
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	40012c00 	.word	0x40012c00
 800c224:	40013400 	.word	0x40013400
 800c228:	40014000 	.word	0x40014000
 800c22c:	40014400 	.word	0x40014400
 800c230:	40014800 	.word	0x40014800

0800c234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f023 0303 	bic.w	r3, r3, #3
 800c26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	4313      	orrs	r3, r2
 800c278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	021b      	lsls	r3, r3, #8
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a27      	ldr	r2, [pc, #156]	@ (800c330 <TIM_OC3_SetConfig+0xfc>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d003      	beq.n	800c29e <TIM_OC3_SetConfig+0x6a>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a26      	ldr	r2, [pc, #152]	@ (800c334 <TIM_OC3_SetConfig+0x100>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d10d      	bne.n	800c2ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	021b      	lsls	r3, r3, #8
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c330 <TIM_OC3_SetConfig+0xfc>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00f      	beq.n	800c2e2 <TIM_OC3_SetConfig+0xae>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c334 <TIM_OC3_SetConfig+0x100>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d00b      	beq.n	800c2e2 <TIM_OC3_SetConfig+0xae>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c338 <TIM_OC3_SetConfig+0x104>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d007      	beq.n	800c2e2 <TIM_OC3_SetConfig+0xae>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a19      	ldr	r2, [pc, #100]	@ (800c33c <TIM_OC3_SetConfig+0x108>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d003      	beq.n	800c2e2 <TIM_OC3_SetConfig+0xae>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a18      	ldr	r2, [pc, #96]	@ (800c340 <TIM_OC3_SetConfig+0x10c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d113      	bne.n	800c30a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	4313      	orrs	r3, r2
 800c308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	621a      	str	r2, [r3, #32]
}
 800c324:	bf00      	nop
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	40012c00 	.word	0x40012c00
 800c334:	40013400 	.word	0x40013400
 800c338:	40014000 	.word	0x40014000
 800c33c:	40014400 	.word	0x40014400
 800c340:	40014800 	.word	0x40014800

0800c344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a1b      	ldr	r3, [r3, #32]
 800c358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	4313      	orrs	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	031b      	lsls	r3, r3, #12
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a28      	ldr	r2, [pc, #160]	@ (800c444 <TIM_OC4_SetConfig+0x100>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_OC4_SetConfig+0x6c>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a27      	ldr	r2, [pc, #156]	@ (800c448 <TIM_OC4_SetConfig+0x104>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10d      	bne.n	800c3cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	031b      	lsls	r3, r3, #12
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a1d      	ldr	r2, [pc, #116]	@ (800c444 <TIM_OC4_SetConfig+0x100>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d00f      	beq.n	800c3f4 <TIM_OC4_SetConfig+0xb0>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c448 <TIM_OC4_SetConfig+0x104>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00b      	beq.n	800c3f4 <TIM_OC4_SetConfig+0xb0>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a1b      	ldr	r2, [pc, #108]	@ (800c44c <TIM_OC4_SetConfig+0x108>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d007      	beq.n	800c3f4 <TIM_OC4_SetConfig+0xb0>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a1a      	ldr	r2, [pc, #104]	@ (800c450 <TIM_OC4_SetConfig+0x10c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_OC4_SetConfig+0xb0>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a19      	ldr	r2, [pc, #100]	@ (800c454 <TIM_OC4_SetConfig+0x110>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d113      	bne.n	800c41c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c402:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	019b      	lsls	r3, r3, #6
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	019b      	lsls	r3, r3, #6
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	621a      	str	r2, [r3, #32]
}
 800c436:	bf00      	nop
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	40012c00 	.word	0x40012c00
 800c448:	40013400 	.word	0x40013400
 800c44c:	40014000 	.word	0x40014000
 800c450:	40014400 	.word	0x40014400
 800c454:	40014800 	.word	0x40014800

0800c458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c458:	b480      	push	{r7}
 800c45a:	b087      	sub	sp, #28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a1b      	ldr	r3, [r3, #32]
 800c46c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c49c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a17      	ldr	r2, [pc, #92]	@ (800c50c <TIM_OC5_SetConfig+0xb4>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00f      	beq.n	800c4d2 <TIM_OC5_SetConfig+0x7a>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a16      	ldr	r2, [pc, #88]	@ (800c510 <TIM_OC5_SetConfig+0xb8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d00b      	beq.n	800c4d2 <TIM_OC5_SetConfig+0x7a>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a15      	ldr	r2, [pc, #84]	@ (800c514 <TIM_OC5_SetConfig+0xbc>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d007      	beq.n	800c4d2 <TIM_OC5_SetConfig+0x7a>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a14      	ldr	r2, [pc, #80]	@ (800c518 <TIM_OC5_SetConfig+0xc0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d003      	beq.n	800c4d2 <TIM_OC5_SetConfig+0x7a>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a13      	ldr	r2, [pc, #76]	@ (800c51c <TIM_OC5_SetConfig+0xc4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d109      	bne.n	800c4e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	621a      	str	r2, [r3, #32]
}
 800c500:	bf00      	nop
 800c502:	371c      	adds	r7, #28
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	40012c00 	.word	0x40012c00
 800c510:	40013400 	.word	0x40013400
 800c514:	40014000 	.word	0x40014000
 800c518:	40014400 	.word	0x40014400
 800c51c:	40014800 	.word	0x40014800

0800c520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c520:	b480      	push	{r7}
 800c522:	b087      	sub	sp, #28
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	051b      	lsls	r3, r3, #20
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	4313      	orrs	r3, r2
 800c572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a18      	ldr	r2, [pc, #96]	@ (800c5d8 <TIM_OC6_SetConfig+0xb8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00f      	beq.n	800c59c <TIM_OC6_SetConfig+0x7c>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a17      	ldr	r2, [pc, #92]	@ (800c5dc <TIM_OC6_SetConfig+0xbc>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d00b      	beq.n	800c59c <TIM_OC6_SetConfig+0x7c>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a16      	ldr	r2, [pc, #88]	@ (800c5e0 <TIM_OC6_SetConfig+0xc0>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d007      	beq.n	800c59c <TIM_OC6_SetConfig+0x7c>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a15      	ldr	r2, [pc, #84]	@ (800c5e4 <TIM_OC6_SetConfig+0xc4>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d003      	beq.n	800c59c <TIM_OC6_SetConfig+0x7c>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a14      	ldr	r2, [pc, #80]	@ (800c5e8 <TIM_OC6_SetConfig+0xc8>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d109      	bne.n	800c5b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	029b      	lsls	r3, r3, #10
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	621a      	str	r2, [r3, #32]
}
 800c5ca:	bf00      	nop
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	40012c00 	.word	0x40012c00
 800c5dc:	40013400 	.word	0x40013400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	40014400 	.word	0x40014400
 800c5e8:	40014800 	.word	0x40014800

0800c5ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a1b      	ldr	r3, [r3, #32]
 800c5fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	f023 0201 	bic.w	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	011b      	lsls	r3, r3, #4
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	4313      	orrs	r3, r2
 800c620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f023 030a 	bic.w	r3, r3, #10
 800c628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	4313      	orrs	r3, r2
 800c630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	621a      	str	r2, [r3, #32]
}
 800c63e:	bf00      	nop
 800c640:	371c      	adds	r7, #28
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b087      	sub	sp, #28
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	f023 0210 	bic.w	r2, r3, #16
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	031b      	lsls	r3, r3, #12
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	4313      	orrs	r3, r2
 800c690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	621a      	str	r2, [r3, #32]
}
 800c69e:	bf00      	nop
 800c6a0:	371c      	adds	r7, #28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	f043 0307 	orr.w	r3, r3, #7
 800c6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	609a      	str	r2, [r3, #8]
}
 800c6d8:	bf00      	nop
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	021a      	lsls	r2, r3, #8
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	431a      	orrs	r2, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	609a      	str	r2, [r3, #8]
}
 800c718:	bf00      	nop
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f003 031f 	and.w	r3, r3, #31
 800c736:	2201      	movs	r2, #1
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6a1a      	ldr	r2, [r3, #32]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	43db      	mvns	r3, r3
 800c746:	401a      	ands	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f003 031f 	and.w	r3, r3, #31
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	fa01 f303 	lsl.w	r3, r1, r3
 800c75c:	431a      	orrs	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	621a      	str	r2, [r3, #32]
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
	...

0800c770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c784:	2302      	movs	r3, #2
 800c786:	e065      	b.n	800c854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2202      	movs	r2, #2
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a2c      	ldr	r2, [pc, #176]	@ (800c860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d004      	beq.n	800c7bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a2b      	ldr	r2, [pc, #172]	@ (800c864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d108      	bne.n	800c7ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c7c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c7d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d018      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7fe:	d013      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a18      	ldr	r2, [pc, #96]	@ (800c868 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a17      	ldr	r2, [pc, #92]	@ (800c86c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a12      	ldr	r2, [pc, #72]	@ (800c864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a13      	ldr	r2, [pc, #76]	@ (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d10c      	bne.n	800c842 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c82e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	4313      	orrs	r3, r2
 800c838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	40012c00 	.word	0x40012c00
 800c864:	40013400 	.word	0x40013400
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40014000 	.word	0x40014000

0800c874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e042      	b.n	800c998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d106      	bne.n	800c92a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7f8 fc4d 	bl	80051c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2224      	movs	r2, #36	@ 0x24
 800c92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f022 0201 	bic.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c946:	2b00      	cmp	r3, #0
 800c948:	d002      	beq.n	800c950 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f001 f848 	bl	800d9e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fd79 	bl	800d448 <UART_SetConfig>
 800c956:	4603      	mov	r3, r0
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d101      	bne.n	800c960 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e01b      	b.n	800c998 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c96e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c97e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f042 0201 	orr.w	r2, r2, #1
 800c98e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 f8c7 	bl	800db24 <UART_CheckIdleState>
 800c996:	4603      	mov	r3, r0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08a      	sub	sp, #40	@ 0x28
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	d17b      	bne.n	800cab2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <HAL_UART_Transmit+0x26>
 800c9c0:	88fb      	ldrh	r3, [r7, #6]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d101      	bne.n	800c9ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e074      	b.n	800cab4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2221      	movs	r2, #33	@ 0x21
 800c9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9da:	f7f9 fb11 	bl	8006000 <HAL_GetTick>
 800c9de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	88fa      	ldrh	r2, [r7, #6]
 800c9e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	88fa      	ldrh	r2, [r7, #6]
 800c9ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9f8:	d108      	bne.n	800ca0c <HAL_UART_Transmit+0x6c>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d104      	bne.n	800ca0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	e003      	b.n	800ca14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca10:	2300      	movs	r3, #0
 800ca12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ca14:	e030      	b.n	800ca78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2180      	movs	r1, #128	@ 0x80
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f001 f929 	bl	800dc78 <UART_WaitOnFlagUntilTimeout>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d005      	beq.n	800ca38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ca34:	2303      	movs	r3, #3
 800ca36:	e03d      	b.n	800cab4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10b      	bne.n	800ca56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	881b      	ldrh	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	3302      	adds	r3, #2
 800ca52:	61bb      	str	r3, [r7, #24]
 800ca54:	e007      	b.n	800ca66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	781a      	ldrb	r2, [r3, #0]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	3301      	adds	r3, #1
 800ca64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1c8      	bne.n	800ca16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2140      	movs	r1, #64	@ 0x40
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f001 f8f2 	bl	800dc78 <UART_WaitOnFlagUntilTimeout>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d005      	beq.n	800caa6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e006      	b.n	800cab4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2220      	movs	r2, #32
 800caaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	e000      	b.n	800cab4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cab2:	2302      	movs	r3, #2
  }
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3720      	adds	r7, #32
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	@ 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4613      	mov	r3, r2
 800cac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	d137      	bne.n	800cb44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <HAL_UART_Receive_DMA+0x24>
 800cada:	88fb      	ldrh	r3, [r7, #6]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e030      	b.n	800cb46 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a18      	ldr	r2, [pc, #96]	@ (800cb50 <HAL_UART_Receive_DMA+0x94>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d01f      	beq.n	800cb34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d018      	beq.n	800cb34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cb16:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	623b      	str	r3, [r7, #32]
 800cb22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	6a3a      	ldr	r2, [r7, #32]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e6      	bne.n	800cb02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb34:	88fb      	ldrh	r3, [r7, #6]
 800cb36:	461a      	mov	r2, r3
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f001 f90a 	bl	800dd54 <UART_Start_Receive_DMA>
 800cb40:	4603      	mov	r3, r0
 800cb42:	e000      	b.n	800cb46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cb44:	2302      	movs	r3, #2
  }
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3728      	adds	r7, #40	@ 0x28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	40008000 	.word	0x40008000

0800cb54 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b0a0      	sub	sp, #128	@ 0x80
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb64:	e853 3f00 	ldrex	r3, [r3]
 800cb68:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cb6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb6c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800cb70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	461a      	mov	r2, r3
 800cb78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cb7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb7c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cb80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb82:	e841 2300 	strex	r3, r2, [r1]
 800cb86:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cb88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e6      	bne.n	800cb5c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3308      	adds	r3, #8
 800cb94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cb9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba0:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800cba4:	f023 0301 	bic.w	r3, r3, #1
 800cba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cbb2:	657a      	str	r2, [r7, #84]	@ 0x54
 800cbb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e3      	bne.n	800cb8e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d118      	bne.n	800cc00 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd6:	e853 3f00 	ldrex	r3, [r3]
 800cbda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	f023 0310 	bic.w	r3, r3, #16
 800cbe2:	677b      	str	r3, [r7, #116]	@ 0x74
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbec:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbf4:	e841 2300 	strex	r3, r2, [r1]
 800cbf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e6      	bne.n	800cbce <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc0a:	2b80      	cmp	r3, #128	@ 0x80
 800cc0c:	d137      	bne.n	800cc7e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc24:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cc2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d019      	beq.n	800cc7e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc4e:	2200      	movs	r2, #0
 800cc50:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fb f8b9 	bl	8007dce <HAL_DMA_Abort>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00d      	beq.n	800cc7e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fb fa20 	bl	80080ac <HAL_DMA_GetError>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b20      	cmp	r3, #32
 800cc70:	d105      	bne.n	800cc7e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2210      	movs	r2, #16
 800cc76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e073      	b.n	800cd66 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc88:	2b40      	cmp	r3, #64	@ 0x40
 800cc8a:	d13b      	bne.n	800cd04 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccac:	61ba      	str	r2, [r7, #24]
 800ccae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb0:	6979      	ldr	r1, [r7, #20]
 800ccb2:	69ba      	ldr	r2, [r7, #24]
 800ccb4:	e841 2300 	strex	r3, r2, [r1]
 800ccb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e5      	bne.n	800cc8c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d01c      	beq.n	800cd04 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fb f877 	bl	8007dce <HAL_DMA_Abort>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00e      	beq.n	800cd04 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fb f9dd 	bl	80080ac <HAL_DMA_GetError>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b20      	cmp	r3, #32
 800ccf6:	d105      	bne.n	800cd04 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2210      	movs	r2, #16
 800ccfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e030      	b.n	800cd66 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	220f      	movs	r2, #15
 800cd1a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd24:	d107      	bne.n	800cd36 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	699a      	ldr	r2, [r3, #24]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f042 0210 	orr.w	r2, r2, #16
 800cd34:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	699a      	ldr	r2, [r3, #24]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f042 0208 	orr.w	r2, r2, #8
 800cd44:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2220      	movs	r2, #32
 800cd4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2220      	movs	r2, #32
 800cd52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3780      	adds	r7, #128	@ 0x80
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b0ba      	sub	sp, #232	@ 0xe8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cd9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cd9e:	4013      	ands	r3, r2
 800cda0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cda4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d11b      	bne.n	800cde4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdb0:	f003 0320 	and.w	r3, r3, #32
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d015      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 8300 	beq.w	800d3da <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	4798      	blx	r3
      }
      return;
 800cde2:	e2fa      	b.n	800d3da <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cde4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 8123 	beq.w	800d034 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdf2:	4b8d      	ldr	r3, [pc, #564]	@ (800d028 <HAL_UART_IRQHandler+0x2b8>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cdfe:	4b8b      	ldr	r3, [pc, #556]	@ (800d02c <HAL_UART_IRQHandler+0x2bc>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 8116 	beq.w	800d034 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d011      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
 800ce14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2201      	movs	r2, #1
 800ce26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce2e:	f043 0201 	orr.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce3c:	f003 0302 	and.w	r3, r3, #2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d011      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
 800ce44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2202      	movs	r2, #2
 800ce56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce5e:	f043 0204 	orr.w	r2, r3, #4
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d011      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
 800ce74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00b      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2204      	movs	r2, #4
 800ce86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce8e:	f043 0202 	orr.w	r2, r3, #2
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d017      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cea8:	f003 0320 	and.w	r3, r3, #32
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d105      	bne.n	800cebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ceb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ceb4:	4b5c      	ldr	r3, [pc, #368]	@ (800d028 <HAL_UART_IRQHandler+0x2b8>)
 800ceb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2208      	movs	r2, #8
 800cec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceca:	f043 0208 	orr.w	r2, r3, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d012      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00c      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cefc:	f043 0220 	orr.w	r2, r3, #32
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8266 	beq.w	800d3de <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf16:	f003 0320 	and.w	r3, r3, #32
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf22:	f003 0320 	and.w	r3, r3, #32
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf5a:	2b40      	cmp	r3, #64	@ 0x40
 800cf5c:	d005      	beq.n	800cf6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d054      	beq.n	800d014 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 ffd9 	bl	800df22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf7a:	2b40      	cmp	r3, #64	@ 0x40
 800cf7c:	d146      	bne.n	800d00c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3308      	adds	r3, #8
 800cf84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1d9      	bne.n	800cf7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d017      	beq.n	800d004 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfda:	4a15      	ldr	r2, [pc, #84]	@ (800d030 <HAL_UART_IRQHandler+0x2c0>)
 800cfdc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fa ff4b 	bl	8007e80 <HAL_DMA_Abort_IT>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d019      	beq.n	800d024 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cffe:	4610      	mov	r0, r2
 800d000:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d002:	e00f      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fa09 	bl	800d41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d00a:	e00b      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fa05 	bl	800d41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d012:	e007      	b.n	800d024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fa01 	bl	800d41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d022:	e1dc      	b.n	800d3de <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d024:	bf00      	nop
    return;
 800d026:	e1da      	b.n	800d3de <HAL_UART_IRQHandler+0x66e>
 800d028:	10000001 	.word	0x10000001
 800d02c:	04000120 	.word	0x04000120
 800d030:	0800e1d9 	.word	0x0800e1d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d038:	2b01      	cmp	r3, #1
 800d03a:	f040 8170 	bne.w	800d31e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d042:	f003 0310 	and.w	r3, r3, #16
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 8169 	beq.w	800d31e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d050:	f003 0310 	and.w	r3, r3, #16
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 8162 	beq.w	800d31e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2210      	movs	r2, #16
 800d060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d06c:	2b40      	cmp	r3, #64	@ 0x40
 800d06e:	f040 80d8 	bne.w	800d222 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80af 	beq.w	800d1e8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d094:	429a      	cmp	r2, r3
 800d096:	f080 80a7 	bcs.w	800d1e8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0320 	and.w	r3, r3, #32
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f040 8087 	bne.w	800d1c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0c4:	e853 3f00 	ldrex	r3, [r3]
 800d0c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d0cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d0e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d0e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1da      	bne.n	800d0b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3308      	adds	r3, #8
 800d108:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d114:	f023 0301 	bic.w	r3, r3, #1
 800d118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3308      	adds	r3, #8
 800d122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d126:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d12a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d12e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d132:	e841 2300 	strex	r3, r2, [r1]
 800d136:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1e1      	bne.n	800d102 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3308      	adds	r3, #8
 800d144:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d148:	e853 3f00 	ldrex	r3, [r3]
 800d14c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3308      	adds	r3, #8
 800d15e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d164:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d16a:	e841 2300 	strex	r3, r2, [r1]
 800d16e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e3      	bne.n	800d13e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2220      	movs	r2, #32
 800d17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18c:	e853 3f00 	ldrex	r3, [r3]
 800d190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d194:	f023 0310 	bic.w	r3, r3, #16
 800d198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e4      	bne.n	800d184 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fa fe04 	bl	8007dce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f925 	bl	800d430 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d1e6:	e0fc      	b.n	800d3e2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f040 80f5 	bne.w	800d3e2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 0320 	and.w	r3, r3, #32
 800d206:	2b20      	cmp	r3, #32
 800d208:	f040 80eb 	bne.w	800d3e2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d218:	4619      	mov	r1, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f908 	bl	800d430 <HAL_UARTEx_RxEventCallback>
      return;
 800d220:	e0df      	b.n	800d3e2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d22e:	b29b      	uxth	r3, r3
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f000 80d1 	beq.w	800d3e6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800d244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80cc 	beq.w	800d3e6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d270:	647b      	str	r3, [r7, #68]	@ 0x44
 800d272:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e4      	bne.n	800d24e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3308      	adds	r3, #8
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	623b      	str	r3, [r7, #32]
   return(result);
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d29a:	f023 0301 	bic.w	r3, r3, #1
 800d29e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d2ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e1      	bne.n	800d284 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2220      	movs	r2, #32
 800d2c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	e853 3f00 	ldrex	r3, [r3]
 800d2e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f023 0310 	bic.w	r3, r3, #16
 800d2e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d2f6:	61fb      	str	r3, [r7, #28]
 800d2f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	69b9      	ldr	r1, [r7, #24]
 800d2fc:	69fa      	ldr	r2, [r7, #28]
 800d2fe:	e841 2300 	strex	r3, r2, [r1]
 800d302:	617b      	str	r3, [r7, #20]
   return(result);
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1e4      	bne.n	800d2d4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2202      	movs	r2, #2
 800d30e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f88a 	bl	800d430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d31c:	e063      	b.n	800d3e6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00e      	beq.n	800d348 <HAL_UART_IRQHandler+0x5d8>
 800d32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d32e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d332:	2b00      	cmp	r3, #0
 800d334:	d008      	beq.n	800d348 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d33e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 ff86 	bl	800e252 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d346:	e051      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d34c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d350:	2b00      	cmp	r3, #0
 800d352:	d014      	beq.n	800d37e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d105      	bne.n	800d36c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d008      	beq.n	800d37e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d370:	2b00      	cmp	r3, #0
 800d372:	d03a      	beq.n	800d3ea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	4798      	blx	r3
    }
    return;
 800d37c:	e035      	b.n	800d3ea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d386:	2b00      	cmp	r3, #0
 800d388:	d009      	beq.n	800d39e <HAL_UART_IRQHandler+0x62e>
 800d38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 ff30 	bl	800e1fc <UART_EndTransmit_IT>
    return;
 800d39c:	e026      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d009      	beq.n	800d3be <HAL_UART_IRQHandler+0x64e>
 800d3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 ff5f 	bl	800e27a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3bc:	e016      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d010      	beq.n	800d3ec <HAL_UART_IRQHandler+0x67c>
 800d3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	da0c      	bge.n	800d3ec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 ff47 	bl	800e266 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3d8:	e008      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
      return;
 800d3da:	bf00      	nop
 800d3dc:	e006      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
    return;
 800d3de:	bf00      	nop
 800d3e0:	e004      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
      return;
 800d3e2:	bf00      	nop
 800d3e4:	e002      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
      return;
 800d3e6:	bf00      	nop
 800d3e8:	e000      	b.n	800d3ec <HAL_UART_IRQHandler+0x67c>
    return;
 800d3ea:	bf00      	nop
  }
}
 800d3ec:	37e8      	adds	r7, #232	@ 0xe8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop

0800d3f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d3fc:	bf00      	nop
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d44c:	b08c      	sub	sp, #48	@ 0x30
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	689a      	ldr	r2, [r3, #8]
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	431a      	orrs	r2, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	695b      	ldr	r3, [r3, #20]
 800d466:	431a      	orrs	r2, r3
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	4bab      	ldr	r3, [pc, #684]	@ (800d724 <UART_SetConfig+0x2dc>)
 800d478:	4013      	ands	r3, r2
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	6812      	ldr	r2, [r2, #0]
 800d47e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d480:	430b      	orrs	r3, r1
 800d482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	430a      	orrs	r2, r1
 800d498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	699b      	ldr	r3, [r3, #24]
 800d49e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4aa0      	ldr	r2, [pc, #640]	@ (800d728 <UART_SetConfig+0x2e0>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d004      	beq.n	800d4b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d4be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	6812      	ldr	r2, [r2, #0]
 800d4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d2:	f023 010f 	bic.w	r1, r3, #15
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a91      	ldr	r2, [pc, #580]	@ (800d72c <UART_SetConfig+0x2e4>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d125      	bne.n	800d538 <UART_SetConfig+0xf0>
 800d4ec:	4b90      	ldr	r3, [pc, #576]	@ (800d730 <UART_SetConfig+0x2e8>)
 800d4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	d81a      	bhi.n	800d530 <UART_SetConfig+0xe8>
 800d4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d500 <UART_SetConfig+0xb8>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d511 	.word	0x0800d511
 800d504:	0800d521 	.word	0x0800d521
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d529 	.word	0x0800d529
 800d510:	2301      	movs	r3, #1
 800d512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d516:	e0d6      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d518:	2302      	movs	r3, #2
 800d51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d51e:	e0d2      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d520:	2304      	movs	r3, #4
 800d522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d526:	e0ce      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d528:	2308      	movs	r3, #8
 800d52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d52e:	e0ca      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d530:	2310      	movs	r3, #16
 800d532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d536:	e0c6      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a7d      	ldr	r2, [pc, #500]	@ (800d734 <UART_SetConfig+0x2ec>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d138      	bne.n	800d5b4 <UART_SetConfig+0x16c>
 800d542:	4b7b      	ldr	r3, [pc, #492]	@ (800d730 <UART_SetConfig+0x2e8>)
 800d544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d548:	f003 030c 	and.w	r3, r3, #12
 800d54c:	2b0c      	cmp	r3, #12
 800d54e:	d82d      	bhi.n	800d5ac <UART_SetConfig+0x164>
 800d550:	a201      	add	r2, pc, #4	@ (adr r2, 800d558 <UART_SetConfig+0x110>)
 800d552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d556:	bf00      	nop
 800d558:	0800d58d 	.word	0x0800d58d
 800d55c:	0800d5ad 	.word	0x0800d5ad
 800d560:	0800d5ad 	.word	0x0800d5ad
 800d564:	0800d5ad 	.word	0x0800d5ad
 800d568:	0800d59d 	.word	0x0800d59d
 800d56c:	0800d5ad 	.word	0x0800d5ad
 800d570:	0800d5ad 	.word	0x0800d5ad
 800d574:	0800d5ad 	.word	0x0800d5ad
 800d578:	0800d595 	.word	0x0800d595
 800d57c:	0800d5ad 	.word	0x0800d5ad
 800d580:	0800d5ad 	.word	0x0800d5ad
 800d584:	0800d5ad 	.word	0x0800d5ad
 800d588:	0800d5a5 	.word	0x0800d5a5
 800d58c:	2300      	movs	r3, #0
 800d58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d592:	e098      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d594:	2302      	movs	r3, #2
 800d596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d59a:	e094      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d59c:	2304      	movs	r3, #4
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5a2:	e090      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5a4:	2308      	movs	r3, #8
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5aa:	e08c      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5ac:	2310      	movs	r3, #16
 800d5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5b2:	e088      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a5f      	ldr	r2, [pc, #380]	@ (800d738 <UART_SetConfig+0x2f0>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d125      	bne.n	800d60a <UART_SetConfig+0x1c2>
 800d5be:	4b5c      	ldr	r3, [pc, #368]	@ (800d730 <UART_SetConfig+0x2e8>)
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d5c8:	2b30      	cmp	r3, #48	@ 0x30
 800d5ca:	d016      	beq.n	800d5fa <UART_SetConfig+0x1b2>
 800d5cc:	2b30      	cmp	r3, #48	@ 0x30
 800d5ce:	d818      	bhi.n	800d602 <UART_SetConfig+0x1ba>
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	d00a      	beq.n	800d5ea <UART_SetConfig+0x1a2>
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	d814      	bhi.n	800d602 <UART_SetConfig+0x1ba>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <UART_SetConfig+0x19a>
 800d5dc:	2b10      	cmp	r3, #16
 800d5de:	d008      	beq.n	800d5f2 <UART_SetConfig+0x1aa>
 800d5e0:	e00f      	b.n	800d602 <UART_SetConfig+0x1ba>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5e8:	e06d      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5f0:	e069      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5f2:	2304      	movs	r3, #4
 800d5f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5f8:	e065      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d5fa:	2308      	movs	r3, #8
 800d5fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d600:	e061      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d602:	2310      	movs	r3, #16
 800d604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d608:	e05d      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a4b      	ldr	r2, [pc, #300]	@ (800d73c <UART_SetConfig+0x2f4>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d125      	bne.n	800d660 <UART_SetConfig+0x218>
 800d614:	4b46      	ldr	r3, [pc, #280]	@ (800d730 <UART_SetConfig+0x2e8>)
 800d616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d61a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d61e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d620:	d016      	beq.n	800d650 <UART_SetConfig+0x208>
 800d622:	2bc0      	cmp	r3, #192	@ 0xc0
 800d624:	d818      	bhi.n	800d658 <UART_SetConfig+0x210>
 800d626:	2b80      	cmp	r3, #128	@ 0x80
 800d628:	d00a      	beq.n	800d640 <UART_SetConfig+0x1f8>
 800d62a:	2b80      	cmp	r3, #128	@ 0x80
 800d62c:	d814      	bhi.n	800d658 <UART_SetConfig+0x210>
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <UART_SetConfig+0x1f0>
 800d632:	2b40      	cmp	r3, #64	@ 0x40
 800d634:	d008      	beq.n	800d648 <UART_SetConfig+0x200>
 800d636:	e00f      	b.n	800d658 <UART_SetConfig+0x210>
 800d638:	2300      	movs	r3, #0
 800d63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d63e:	e042      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d640:	2302      	movs	r3, #2
 800d642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d646:	e03e      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d648:	2304      	movs	r3, #4
 800d64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d64e:	e03a      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d650:	2308      	movs	r3, #8
 800d652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d656:	e036      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d658:	2310      	movs	r3, #16
 800d65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d65e:	e032      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a30      	ldr	r2, [pc, #192]	@ (800d728 <UART_SetConfig+0x2e0>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d12a      	bne.n	800d6c0 <UART_SetConfig+0x278>
 800d66a:	4b31      	ldr	r3, [pc, #196]	@ (800d730 <UART_SetConfig+0x2e8>)
 800d66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d670:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d678:	d01a      	beq.n	800d6b0 <UART_SetConfig+0x268>
 800d67a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d67e:	d81b      	bhi.n	800d6b8 <UART_SetConfig+0x270>
 800d680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d684:	d00c      	beq.n	800d6a0 <UART_SetConfig+0x258>
 800d686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d68a:	d815      	bhi.n	800d6b8 <UART_SetConfig+0x270>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <UART_SetConfig+0x250>
 800d690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d694:	d008      	beq.n	800d6a8 <UART_SetConfig+0x260>
 800d696:	e00f      	b.n	800d6b8 <UART_SetConfig+0x270>
 800d698:	2300      	movs	r3, #0
 800d69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d69e:	e012      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6a6:	e00e      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6ae:	e00a      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6b6:	e006      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6be:	e002      	b.n	800d6c6 <UART_SetConfig+0x27e>
 800d6c0:	2310      	movs	r3, #16
 800d6c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a17      	ldr	r2, [pc, #92]	@ (800d728 <UART_SetConfig+0x2e0>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	f040 80a8 	bne.w	800d822 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d834      	bhi.n	800d744 <UART_SetConfig+0x2fc>
 800d6da:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <UART_SetConfig+0x298>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d705 	.word	0x0800d705
 800d6e4:	0800d745 	.word	0x0800d745
 800d6e8:	0800d70d 	.word	0x0800d70d
 800d6ec:	0800d745 	.word	0x0800d745
 800d6f0:	0800d713 	.word	0x0800d713
 800d6f4:	0800d745 	.word	0x0800d745
 800d6f8:	0800d745 	.word	0x0800d745
 800d6fc:	0800d745 	.word	0x0800d745
 800d700:	0800d71b 	.word	0x0800d71b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d704:	f7fc faf4 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800d708:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d70a:	e021      	b.n	800d750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d70c:	4b0c      	ldr	r3, [pc, #48]	@ (800d740 <UART_SetConfig+0x2f8>)
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d710:	e01e      	b.n	800d750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d712:	f7fc fa81 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 800d716:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d718:	e01a      	b.n	800d750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d71a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d71e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d720:	e016      	b.n	800d750 <UART_SetConfig+0x308>
 800d722:	bf00      	nop
 800d724:	cfff69f3 	.word	0xcfff69f3
 800d728:	40008000 	.word	0x40008000
 800d72c:	40013800 	.word	0x40013800
 800d730:	40021000 	.word	0x40021000
 800d734:	40004400 	.word	0x40004400
 800d738:	40004800 	.word	0x40004800
 800d73c:	40004c00 	.word	0x40004c00
 800d740:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d744:	2300      	movs	r3, #0
 800d746:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d74e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 812a 	beq.w	800d9ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d75c:	4a9e      	ldr	r2, [pc, #632]	@ (800d9d8 <UART_SetConfig+0x590>)
 800d75e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d762:	461a      	mov	r2, r3
 800d764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d766:	fbb3 f3f2 	udiv	r3, r3, r2
 800d76a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	4613      	mov	r3, r2
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d305      	bcc.n	800d788 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	429a      	cmp	r2, r3
 800d786:	d903      	bls.n	800d790 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d78e:	e10d      	b.n	800d9ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	2200      	movs	r2, #0
 800d794:	60bb      	str	r3, [r7, #8]
 800d796:	60fa      	str	r2, [r7, #12]
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79c:	4a8e      	ldr	r2, [pc, #568]	@ (800d9d8 <UART_SetConfig+0x590>)
 800d79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	603b      	str	r3, [r7, #0]
 800d7a8:	607a      	str	r2, [r7, #4]
 800d7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7b2:	f7f3 fa91 	bl	8000cd8 <__aeabi_uldivmod>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f04f 0200 	mov.w	r2, #0
 800d7c2:	f04f 0300 	mov.w	r3, #0
 800d7c6:	020b      	lsls	r3, r1, #8
 800d7c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7cc:	0202      	lsls	r2, r0, #8
 800d7ce:	6979      	ldr	r1, [r7, #20]
 800d7d0:	6849      	ldr	r1, [r1, #4]
 800d7d2:	0849      	lsrs	r1, r1, #1
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	4605      	mov	r5, r0
 800d7da:	eb12 0804 	adds.w	r8, r2, r4
 800d7de:	eb43 0905 	adc.w	r9, r3, r5
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	469a      	mov	sl, r3
 800d7ea:	4693      	mov	fp, r2
 800d7ec:	4652      	mov	r2, sl
 800d7ee:	465b      	mov	r3, fp
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	f7f3 fa70 	bl	8000cd8 <__aeabi_uldivmod>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d806:	d308      	bcc.n	800d81a <UART_SetConfig+0x3d2>
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d80e:	d204      	bcs.n	800d81a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6a3a      	ldr	r2, [r7, #32]
 800d816:	60da      	str	r2, [r3, #12]
 800d818:	e0c8      	b.n	800d9ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d820:	e0c4      	b.n	800d9ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	69db      	ldr	r3, [r3, #28]
 800d826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d82a:	d167      	bne.n	800d8fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d82c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d830:	2b08      	cmp	r3, #8
 800d832:	d828      	bhi.n	800d886 <UART_SetConfig+0x43e>
 800d834:	a201      	add	r2, pc, #4	@ (adr r2, 800d83c <UART_SetConfig+0x3f4>)
 800d836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d83a:	bf00      	nop
 800d83c:	0800d861 	.word	0x0800d861
 800d840:	0800d869 	.word	0x0800d869
 800d844:	0800d871 	.word	0x0800d871
 800d848:	0800d887 	.word	0x0800d887
 800d84c:	0800d877 	.word	0x0800d877
 800d850:	0800d887 	.word	0x0800d887
 800d854:	0800d887 	.word	0x0800d887
 800d858:	0800d887 	.word	0x0800d887
 800d85c:	0800d87f 	.word	0x0800d87f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d860:	f7fc fa46 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800d864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d866:	e014      	b.n	800d892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d868:	f7fc fa58 	bl	8009d1c <HAL_RCC_GetPCLK2Freq>
 800d86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d86e:	e010      	b.n	800d892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d870:	4b5a      	ldr	r3, [pc, #360]	@ (800d9dc <UART_SetConfig+0x594>)
 800d872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d874:	e00d      	b.n	800d892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d876:	f7fc f9cf 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 800d87a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d87c:	e009      	b.n	800d892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d884:	e005      	b.n	800d892 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d886:	2300      	movs	r3, #0
 800d888:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 8089 	beq.w	800d9ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d89e:	4a4e      	ldr	r2, [pc, #312]	@ (800d9d8 <UART_SetConfig+0x590>)
 800d8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ac:	005a      	lsls	r2, r3, #1
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	441a      	add	r2, r3
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	2b0f      	cmp	r3, #15
 800d8c4:	d916      	bls.n	800d8f4 <UART_SetConfig+0x4ac>
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8cc:	d212      	bcs.n	800d8f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	f023 030f 	bic.w	r3, r3, #15
 800d8d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	085b      	lsrs	r3, r3, #1
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f003 0307 	and.w	r3, r3, #7
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	8bfb      	ldrh	r3, [r7, #30]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	8bfa      	ldrh	r2, [r7, #30]
 800d8f0:	60da      	str	r2, [r3, #12]
 800d8f2:	e05b      	b.n	800d9ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d8fa:	e057      	b.n	800d9ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d900:	2b08      	cmp	r3, #8
 800d902:	d828      	bhi.n	800d956 <UART_SetConfig+0x50e>
 800d904:	a201      	add	r2, pc, #4	@ (adr r2, 800d90c <UART_SetConfig+0x4c4>)
 800d906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90a:	bf00      	nop
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	0800d957 	.word	0x0800d957
 800d91c:	0800d947 	.word	0x0800d947
 800d920:	0800d957 	.word	0x0800d957
 800d924:	0800d957 	.word	0x0800d957
 800d928:	0800d957 	.word	0x0800d957
 800d92c:	0800d94f 	.word	0x0800d94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d930:	f7fc f9de 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800d934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d936:	e014      	b.n	800d962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d938:	f7fc f9f0 	bl	8009d1c <HAL_RCC_GetPCLK2Freq>
 800d93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d93e:	e010      	b.n	800d962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d940:	4b26      	ldr	r3, [pc, #152]	@ (800d9dc <UART_SetConfig+0x594>)
 800d942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d944:	e00d      	b.n	800d962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d946:	f7fc f967 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
 800d94a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d94c:	e009      	b.n	800d962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d954:	e005      	b.n	800d962 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d960:	bf00      	nop
    }

    if (pclk != 0U)
 800d962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	d021      	beq.n	800d9ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96c:	4a1a      	ldr	r2, [pc, #104]	@ (800d9d8 <UART_SetConfig+0x590>)
 800d96e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d972:	461a      	mov	r2, r3
 800d974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d976:	fbb3 f2f2 	udiv	r2, r3, r2
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	085b      	lsrs	r3, r3, #1
 800d980:	441a      	add	r2, r3
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	fbb2 f3f3 	udiv	r3, r2, r3
 800d98a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	2b0f      	cmp	r3, #15
 800d990:	d909      	bls.n	800d9a6 <UART_SetConfig+0x55e>
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d998:	d205      	bcs.n	800d9a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60da      	str	r2, [r3, #12]
 800d9a4:	e002      	b.n	800d9ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d9c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3730      	adds	r7, #48	@ 0x30
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9d6:	bf00      	nop
 800d9d8:	0801bb04 	.word	0x0801bb04
 800d9dc:	00f42400 	.word	0x00f42400

0800d9e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ec:	f003 0308 	and.w	r3, r3, #8
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00a      	beq.n	800da0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	430a      	orrs	r2, r1
 800da08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00a      	beq.n	800da2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da30:	f003 0302 	and.w	r3, r3, #2
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00a      	beq.n	800da4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	430a      	orrs	r2, r1
 800da4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da52:	f003 0304 	and.w	r3, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00a      	beq.n	800da70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	430a      	orrs	r2, r1
 800da6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da74:	f003 0310 	and.w	r3, r3, #16
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00a      	beq.n	800da92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	430a      	orrs	r2, r1
 800da90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da96:	f003 0320 	and.w	r3, r3, #32
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00a      	beq.n	800dab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	430a      	orrs	r2, r1
 800dab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d01a      	beq.n	800daf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	430a      	orrs	r2, r1
 800dad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dade:	d10a      	bne.n	800daf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	430a      	orrs	r2, r1
 800daf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	430a      	orrs	r2, r1
 800db16:	605a      	str	r2, [r3, #4]
  }
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b098      	sub	sp, #96	@ 0x60
 800db28:	af02      	add	r7, sp, #8
 800db2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db34:	f7f8 fa64 	bl	8006000 <HAL_GetTick>
 800db38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f003 0308 	and.w	r3, r3, #8
 800db44:	2b08      	cmp	r3, #8
 800db46:	d12f      	bne.n	800dba8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db50:	2200      	movs	r2, #0
 800db52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f88e 	bl	800dc78 <UART_WaitOnFlagUntilTimeout>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d022      	beq.n	800dba8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	e853 3f00 	ldrex	r3, [r3]
 800db6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db76:	653b      	str	r3, [r7, #80]	@ 0x50
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	461a      	mov	r2, r3
 800db7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db80:	647b      	str	r3, [r7, #68]	@ 0x44
 800db82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db88:	e841 2300 	strex	r3, r2, [r1]
 800db8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1e6      	bne.n	800db62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2220      	movs	r2, #32
 800db98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dba4:	2303      	movs	r3, #3
 800dba6:	e063      	b.n	800dc70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	2b04      	cmp	r3, #4
 800dbb4:	d149      	bne.n	800dc4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f857 	bl	800dc78 <UART_WaitOnFlagUntilTimeout>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d03c      	beq.n	800dc4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	623b      	str	r3, [r7, #32]
   return(result);
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbee:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbf6:	e841 2300 	strex	r3, r2, [r1]
 800dbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1e6      	bne.n	800dbd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3308      	adds	r3, #8
 800dc08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	e853 3f00 	ldrex	r3, [r3]
 800dc10:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f023 0301 	bic.w	r3, r3, #1
 800dc18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3308      	adds	r3, #8
 800dc20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc22:	61fa      	str	r2, [r7, #28]
 800dc24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc26:	69b9      	ldr	r1, [r7, #24]
 800dc28:	69fa      	ldr	r2, [r7, #28]
 800dc2a:	e841 2300 	strex	r3, r2, [r1]
 800dc2e:	617b      	str	r3, [r7, #20]
   return(result);
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1e5      	bne.n	800dc02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	e012      	b.n	800dc70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3758      	adds	r7, #88	@ 0x58
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	603b      	str	r3, [r7, #0]
 800dc84:	4613      	mov	r3, r2
 800dc86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc88:	e04f      	b.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc90:	d04b      	beq.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc92:	f7f8 f9b5 	bl	8006000 <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	69ba      	ldr	r2, [r7, #24]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d302      	bcc.n	800dca8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e04e      	b.n	800dd4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f003 0304 	and.w	r3, r3, #4
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d037      	beq.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b80      	cmp	r3, #128	@ 0x80
 800dcbe:	d034      	beq.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2b40      	cmp	r3, #64	@ 0x40
 800dcc4:	d031      	beq.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	69db      	ldr	r3, [r3, #28]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	d110      	bne.n	800dcf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2208      	movs	r2, #8
 800dcda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 f920 	bl	800df22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2208      	movs	r2, #8
 800dce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e029      	b.n	800dd4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd04:	d111      	bne.n	800dd2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 f906 	bl	800df22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2220      	movs	r2, #32
 800dd1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dd26:	2303      	movs	r3, #3
 800dd28:	e00f      	b.n	800dd4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	69da      	ldr	r2, [r3, #28]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	4013      	ands	r3, r2
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	bf0c      	ite	eq
 800dd3a:	2301      	moveq	r3, #1
 800dd3c:	2300      	movne	r3, #0
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	461a      	mov	r2, r3
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d0a0      	beq.n	800dc8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
	...

0800dd54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b096      	sub	sp, #88	@ 0x58
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	88fa      	ldrh	r2, [r7, #6]
 800dd6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2222      	movs	r2, #34	@ 0x22
 800dd7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d02d      	beq.n	800dde6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd90:	4a40      	ldr	r2, [pc, #256]	@ (800de94 <UART_Start_Receive_DMA+0x140>)
 800dd92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd9a:	4a3f      	ldr	r2, [pc, #252]	@ (800de98 <UART_Start_Receive_DMA+0x144>)
 800dd9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda4:	4a3d      	ldr	r2, [pc, #244]	@ (800de9c <UART_Start_Receive_DMA+0x148>)
 800dda6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddae:	2200      	movs	r2, #0
 800ddb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3324      	adds	r3, #36	@ 0x24
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	f7f9 ff86 	bl	8007cd8 <HAL_DMA_Start_IT>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2210      	movs	r2, #16
 800ddd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2220      	movs	r2, #32
 800ddde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e051      	b.n	800de8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d018      	beq.n	800de20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf6:	e853 3f00 	ldrex	r3, [r3]
 800ddfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de02:	657b      	str	r3, [r7, #84]	@ 0x54
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	461a      	mov	r2, r3
 800de0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800de12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de14:	e841 2300 	strex	r3, r2, [r1]
 800de18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800de1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1e6      	bne.n	800ddee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3308      	adds	r3, #8
 800de26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	e853 3f00 	ldrex	r3, [r3]
 800de2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de32:	f043 0301 	orr.w	r3, r3, #1
 800de36:	653b      	str	r3, [r7, #80]	@ 0x50
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3308      	adds	r3, #8
 800de3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de40:	637a      	str	r2, [r7, #52]	@ 0x34
 800de42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de48:	e841 2300 	strex	r3, r2, [r1]
 800de4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800de4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1e5      	bne.n	800de20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	613b      	str	r3, [r7, #16]
   return(result);
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3308      	adds	r3, #8
 800de72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de74:	623a      	str	r2, [r7, #32]
 800de76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	69f9      	ldr	r1, [r7, #28]
 800de7a:	6a3a      	ldr	r2, [r7, #32]
 800de7c:	e841 2300 	strex	r3, r2, [r1]
 800de80:	61bb      	str	r3, [r7, #24]
   return(result);
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e5      	bne.n	800de54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3758      	adds	r7, #88	@ 0x58
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	0800dfef 	.word	0x0800dfef
 800de98:	0800e11b 	.word	0x0800e11b
 800de9c:	0800e159 	.word	0x0800e159

0800dea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b08f      	sub	sp, #60	@ 0x3c
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	e853 3f00 	ldrex	r3, [r3]
 800deb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800debc:	637b      	str	r3, [r7, #52]	@ 0x34
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	461a      	mov	r2, r3
 800dec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dec8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800decc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dece:	e841 2300 	strex	r3, r2, [r1]
 800ded2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ded4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1e6      	bne.n	800dea8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3308      	adds	r3, #8
 800dee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	e853 3f00 	ldrex	r3, [r3]
 800dee8:	60bb      	str	r3, [r7, #8]
   return(result);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800def0:	633b      	str	r3, [r7, #48]	@ 0x30
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800defa:	61ba      	str	r2, [r7, #24]
 800defc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defe:	6979      	ldr	r1, [r7, #20]
 800df00:	69ba      	ldr	r2, [r7, #24]
 800df02:	e841 2300 	strex	r3, r2, [r1]
 800df06:	613b      	str	r3, [r7, #16]
   return(result);
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1e5      	bne.n	800deda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800df16:	bf00      	nop
 800df18:	373c      	adds	r7, #60	@ 0x3c
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df22:	b480      	push	{r7}
 800df24:	b095      	sub	sp, #84	@ 0x54
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df32:	e853 3f00 	ldrex	r3, [r3]
 800df36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df48:	643b      	str	r3, [r7, #64]	@ 0x40
 800df4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df50:	e841 2300 	strex	r3, r2, [r1]
 800df54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1e6      	bne.n	800df2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	3308      	adds	r3, #8
 800df62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df64:	6a3b      	ldr	r3, [r7, #32]
 800df66:	e853 3f00 	ldrex	r3, [r3]
 800df6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df72:	f023 0301 	bic.w	r3, r3, #1
 800df76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	3308      	adds	r3, #8
 800df7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df88:	e841 2300 	strex	r3, r2, [r1]
 800df8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e3      	bne.n	800df5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d118      	bne.n	800dfce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	e853 3f00 	ldrex	r3, [r3]
 800dfa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	f023 0310 	bic.w	r3, r3, #16
 800dfb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfba:	61bb      	str	r3, [r7, #24]
 800dfbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfbe:	6979      	ldr	r1, [r7, #20]
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	e841 2300 	strex	r3, r2, [r1]
 800dfc6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1e6      	bne.n	800df9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2220      	movs	r2, #32
 800dfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dfe2:	bf00      	nop
 800dfe4:	3754      	adds	r7, #84	@ 0x54
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b09c      	sub	sp, #112	@ 0x70
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f003 0320 	and.w	r3, r3, #32
 800e006:	2b00      	cmp	r3, #0
 800e008:	d171      	bne.n	800e0ee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e01a:	e853 3f00 	ldrex	r3, [r3]
 800e01e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e026:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	461a      	mov	r2, r3
 800e02e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e030:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e032:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e038:	e841 2300 	strex	r3, r2, [r1]
 800e03c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e03e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e6      	bne.n	800e012 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3308      	adds	r3, #8
 800e04a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04e:	e853 3f00 	ldrex	r3, [r3]
 800e052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e056:	f023 0301 	bic.w	r3, r3, #1
 800e05a:	667b      	str	r3, [r7, #100]	@ 0x64
 800e05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3308      	adds	r3, #8
 800e062:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e064:	647a      	str	r2, [r7, #68]	@ 0x44
 800e066:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e06a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e06c:	e841 2300 	strex	r3, r2, [r1]
 800e070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e5      	bne.n	800e044 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	3308      	adds	r3, #8
 800e07e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e082:	e853 3f00 	ldrex	r3, [r3]
 800e086:	623b      	str	r3, [r7, #32]
   return(result);
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e08e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3308      	adds	r3, #8
 800e096:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e098:	633a      	str	r2, [r7, #48]	@ 0x30
 800e09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e09e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0a0:	e841 2300 	strex	r3, r2, [r1]
 800e0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1e5      	bne.n	800e078 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e0ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d118      	bne.n	800e0ee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	e853 3f00 	ldrex	r3, [r3]
 800e0c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f023 0310 	bic.w	r3, r3, #16
 800e0d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	69b9      	ldr	r1, [r7, #24]
 800e0e0:	69fa      	ldr	r2, [r7, #28]
 800e0e2:	e841 2300 	strex	r3, r2, [r1]
 800e0e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e6      	bne.n	800e0bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d107      	bne.n	800e10c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e102:	4619      	mov	r1, r3
 800e104:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e106:	f7ff f993 	bl	800d430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e10a:	e002      	b.n	800e112 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e10c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e10e:	f7f7 f97b 	bl	8005408 <HAL_UART_RxCpltCallback>
}
 800e112:	bf00      	nop
 800e114:	3770      	adds	r7, #112	@ 0x70
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e126:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e132:	2b01      	cmp	r3, #1
 800e134:	d109      	bne.n	800e14a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e13c:	085b      	lsrs	r3, r3, #1
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4619      	mov	r1, r3
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f7ff f974 	bl	800d430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e148:	e002      	b.n	800e150 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7ff f95c 	bl	800d408 <HAL_UART_RxHalfCpltCallback>
}
 800e150:	bf00      	nop
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e164:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e16c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e174:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e180:	2b80      	cmp	r3, #128	@ 0x80
 800e182:	d109      	bne.n	800e198 <UART_DMAError+0x40>
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	2b21      	cmp	r3, #33	@ 0x21
 800e188:	d106      	bne.n	800e198 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e192:	6978      	ldr	r0, [r7, #20]
 800e194:	f7ff fe84 	bl	800dea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1a2:	2b40      	cmp	r3, #64	@ 0x40
 800e1a4:	d109      	bne.n	800e1ba <UART_DMAError+0x62>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2b22      	cmp	r3, #34	@ 0x22
 800e1aa:	d106      	bne.n	800e1ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e1b4:	6978      	ldr	r0, [r7, #20]
 800e1b6:	f7ff feb4 	bl	800df22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c0:	f043 0210 	orr.w	r2, r3, #16
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1ca:	6978      	ldr	r0, [r7, #20]
 800e1cc:	f7ff f926 	bl	800d41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1d0:	bf00      	nop
 800e1d2:	3718      	adds	r7, #24
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f7ff f914 	bl	800d41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	e853 3f00 	ldrex	r3, [r3]
 800e210:	60bb      	str	r3, [r7, #8]
   return(result);
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e218:	61fb      	str	r3, [r7, #28]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	461a      	mov	r2, r3
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e226:	6979      	ldr	r1, [r7, #20]
 800e228:	69ba      	ldr	r2, [r7, #24]
 800e22a:	e841 2300 	strex	r3, r2, [r1]
 800e22e:	613b      	str	r3, [r7, #16]
   return(result);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1e6      	bne.n	800e204 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2220      	movs	r2, #32
 800e23a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7ff f8d5 	bl	800d3f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e24a:	bf00      	nop
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e252:	b480      	push	{r7}
 800e254:	b083      	sub	sp, #12
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e25a:	bf00      	nop
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e26e:	bf00      	nop
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b083      	sub	sp, #12
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d101      	bne.n	800e2a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e027      	b.n	800e2f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2224      	movs	r2, #36	@ 0x24
 800e2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f022 0201 	bic.w	r2, r2, #1
 800e2ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e2d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e310:	2b01      	cmp	r3, #1
 800e312:	d101      	bne.n	800e318 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e314:	2302      	movs	r3, #2
 800e316:	e02d      	b.n	800e374 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2224      	movs	r2, #36	@ 0x24
 800e324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 0201 	bic.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	430a      	orrs	r2, r1
 800e352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f84f 	bl	800e3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2220      	movs	r2, #32
 800e366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d101      	bne.n	800e394 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e390:	2302      	movs	r3, #2
 800e392:	e02d      	b.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2224      	movs	r2, #36	@ 0x24
 800e3a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f022 0201 	bic.w	r2, r2, #1
 800e3ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	430a      	orrs	r2, r1
 800e3ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 f811 	bl	800e3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2220      	movs	r2, #32
 800e3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e404:	2b00      	cmp	r3, #0
 800e406:	d108      	bne.n	800e41a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e418:	e031      	b.n	800e47e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e41a:	2308      	movs	r3, #8
 800e41c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e41e:	2308      	movs	r3, #8
 800e420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	0e5b      	lsrs	r3, r3, #25
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f003 0307 	and.w	r3, r3, #7
 800e430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	0f5b      	lsrs	r3, r3, #29
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0307 	and.w	r3, r3, #7
 800e440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e442:	7bbb      	ldrb	r3, [r7, #14]
 800e444:	7b3a      	ldrb	r2, [r7, #12]
 800e446:	4911      	ldr	r1, [pc, #68]	@ (800e48c <UARTEx_SetNbDataToProcess+0x94>)
 800e448:	5c8a      	ldrb	r2, [r1, r2]
 800e44a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e44e:	7b3a      	ldrb	r2, [r7, #12]
 800e450:	490f      	ldr	r1, [pc, #60]	@ (800e490 <UARTEx_SetNbDataToProcess+0x98>)
 800e452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e454:	fb93 f3f2 	sdiv	r3, r3, r2
 800e458:	b29a      	uxth	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	7b7a      	ldrb	r2, [r7, #13]
 800e464:	4909      	ldr	r1, [pc, #36]	@ (800e48c <UARTEx_SetNbDataToProcess+0x94>)
 800e466:	5c8a      	ldrb	r2, [r1, r2]
 800e468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e46c:	7b7a      	ldrb	r2, [r7, #13]
 800e46e:	4908      	ldr	r1, [pc, #32]	@ (800e490 <UARTEx_SetNbDataToProcess+0x98>)
 800e470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e472:	fb93 f3f2 	sdiv	r3, r3, r2
 800e476:	b29a      	uxth	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e47e:	bf00      	nop
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	0801bb1c 	.word	0x0801bb1c
 800e490:	0801bb24 	.word	0x0801bb24

0800e494 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800e498:	4907      	ldr	r1, [pc, #28]	@ (800e4b8 <MX_FATFS_Init+0x24>)
 800e49a:	4808      	ldr	r0, [pc, #32]	@ (800e4bc <MX_FATFS_Init+0x28>)
 800e49c:	f002 fe24 	bl	80110e8 <FATFS_LinkDriver>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d002      	beq.n	800e4ac <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	e003      	b.n	800e4b4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800e4ac:	4b04      	ldr	r3, [pc, #16]	@ (800e4c0 <MX_FATFS_Init+0x2c>)
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800e4b2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20001884 	.word	0x20001884
 800e4bc:	20000030 	.word	0x20000030
 800e4c0:	20001888 	.word	0x20001888

0800e4c4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e4c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f7 f9e5 	bl	80058b0 <USER_SPI_initialize>
 800e4e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f7 fac3 	bl	8005a88 <USER_SPI_status>
 800e502:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e504:	4618      	mov	r0, r3
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60b9      	str	r1, [r7, #8]
 800e514:	607a      	str	r2, [r7, #4]
 800e516:	603b      	str	r3, [r7, #0]
 800e518:	4603      	mov	r3, r0
 800e51a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800e51c:	7bf8      	ldrb	r0, [r7, #15]
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	68b9      	ldr	r1, [r7, #8]
 800e524:	f7f7 fac6 	bl	8005ab4 <USER_SPI_read>
 800e528:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
 800e53e:	4603      	mov	r3, r0
 800e540:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800e542:	7bf8      	ldrb	r0, [r7, #15]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	68b9      	ldr	r1, [r7, #8]
 800e54a:	f7f7 fb19 	bl	8005b80 <USER_SPI_write>
 800e54e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	603a      	str	r2, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
 800e564:	460b      	mov	r3, r1
 800e566:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800e568:	79b9      	ldrb	r1, [r7, #6]
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7f7 fb82 	bl	8005c78 <USER_SPI_ioctl>
 800e574:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e576:	4618      	mov	r0, r3
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
	...

0800e580 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	4a08      	ldr	r2, [pc, #32]	@ (800e5b0 <disk_status+0x30>)
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	79fa      	ldrb	r2, [r7, #7]
 800e598:	4905      	ldr	r1, [pc, #20]	@ (800e5b0 <disk_status+0x30>)
 800e59a:	440a      	add	r2, r1
 800e59c:	7a12      	ldrb	r2, [r2, #8]
 800e59e:	4610      	mov	r0, r2
 800e5a0:	4798      	blx	r3
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	200018b4 	.word	0x200018b4

0800e5b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	4a0d      	ldr	r2, [pc, #52]	@ (800e5fc <disk_initialize+0x48>)
 800e5c6:	5cd3      	ldrb	r3, [r2, r3]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d111      	bne.n	800e5f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e5cc:	79fb      	ldrb	r3, [r7, #7]
 800e5ce:	4a0b      	ldr	r2, [pc, #44]	@ (800e5fc <disk_initialize+0x48>)
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e5d4:	79fb      	ldrb	r3, [r7, #7]
 800e5d6:	4a09      	ldr	r2, [pc, #36]	@ (800e5fc <disk_initialize+0x48>)
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	4906      	ldr	r1, [pc, #24]	@ (800e5fc <disk_initialize+0x48>)
 800e5e4:	440a      	add	r2, r1
 800e5e6:	7a12      	ldrb	r2, [r2, #8]
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4798      	blx	r3
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	200018b4 	.word	0x200018b4

0800e600 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e600:	b590      	push	{r4, r7, lr}
 800e602:	b087      	sub	sp, #28
 800e604:	af00      	add	r7, sp, #0
 800e606:	60b9      	str	r1, [r7, #8]
 800e608:	607a      	str	r2, [r7, #4]
 800e60a:	603b      	str	r3, [r7, #0]
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	4a0a      	ldr	r2, [pc, #40]	@ (800e63c <disk_read+0x3c>)
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	4413      	add	r3, r2
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	689c      	ldr	r4, [r3, #8]
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
 800e61e:	4a07      	ldr	r2, [pc, #28]	@ (800e63c <disk_read+0x3c>)
 800e620:	4413      	add	r3, r2
 800e622:	7a18      	ldrb	r0, [r3, #8]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	68b9      	ldr	r1, [r7, #8]
 800e62a:	47a0      	blx	r4
 800e62c:	4603      	mov	r3, r0
 800e62e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e630:	7dfb      	ldrb	r3, [r7, #23]
}
 800e632:	4618      	mov	r0, r3
 800e634:	371c      	adds	r7, #28
 800e636:	46bd      	mov	sp, r7
 800e638:	bd90      	pop	{r4, r7, pc}
 800e63a:	bf00      	nop
 800e63c:	200018b4 	.word	0x200018b4

0800e640 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e640:	b590      	push	{r4, r7, lr}
 800e642:	b087      	sub	sp, #28
 800e644:	af00      	add	r7, sp, #0
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	4603      	mov	r3, r0
 800e64e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	4a0a      	ldr	r2, [pc, #40]	@ (800e67c <disk_write+0x3c>)
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	68dc      	ldr	r4, [r3, #12]
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	4a07      	ldr	r2, [pc, #28]	@ (800e67c <disk_write+0x3c>)
 800e660:	4413      	add	r3, r2
 800e662:	7a18      	ldrb	r0, [r3, #8]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	68b9      	ldr	r1, [r7, #8]
 800e66a:	47a0      	blx	r4
 800e66c:	4603      	mov	r3, r0
 800e66e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e670:	7dfb      	ldrb	r3, [r7, #23]
}
 800e672:	4618      	mov	r0, r3
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd90      	pop	{r4, r7, pc}
 800e67a:	bf00      	nop
 800e67c:	200018b4 	.word	0x200018b4

0800e680 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	603a      	str	r2, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
 800e68c:	460b      	mov	r3, r1
 800e68e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	4a09      	ldr	r2, [pc, #36]	@ (800e6b8 <disk_ioctl+0x38>)
 800e694:	009b      	lsls	r3, r3, #2
 800e696:	4413      	add	r3, r2
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	79fa      	ldrb	r2, [r7, #7]
 800e69e:	4906      	ldr	r1, [pc, #24]	@ (800e6b8 <disk_ioctl+0x38>)
 800e6a0:	440a      	add	r2, r1
 800e6a2:	7a10      	ldrb	r0, [r2, #8]
 800e6a4:	79b9      	ldrb	r1, [r7, #6]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	4798      	blx	r3
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200018b4 	.word	0x200018b4

0800e6bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e6cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	b21a      	sxth	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	b21b      	sxth	r3, r3
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	b21b      	sxth	r3, r3
 800e6de:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e6e0:	89fb      	ldrh	r3, [r7, #14]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr

0800e6ee <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b085      	sub	sp, #20
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3303      	adds	r3, #3
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	021b      	lsls	r3, r3, #8
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	3202      	adds	r2, #2
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	4313      	orrs	r3, r2
 800e70a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	021b      	lsls	r3, r3, #8
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	3201      	adds	r2, #1
 800e714:	7812      	ldrb	r2, [r2, #0]
 800e716:	4313      	orrs	r3, r2
 800e718:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	021b      	lsls	r3, r3, #8
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	7812      	ldrb	r2, [r2, #0]
 800e722:	4313      	orrs	r3, r2
 800e724:	60fb      	str	r3, [r7, #12]
	return rv;
 800e726:	68fb      	ldr	r3, [r7, #12]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	607a      	str	r2, [r7, #4]
 800e746:	887a      	ldrh	r2, [r7, #2]
 800e748:	b2d2      	uxtb	r2, r2
 800e74a:	701a      	strb	r2, [r3, #0]
 800e74c:	887b      	ldrh	r3, [r7, #2]
 800e74e:	0a1b      	lsrs	r3, r3, #8
 800e750:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	887a      	ldrh	r2, [r7, #2]
 800e75a:	b2d2      	uxtb	r2, r2
 800e75c:	701a      	strb	r2, [r3, #0]
}
 800e75e:	bf00      	nop
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	607a      	str	r2, [r7, #4]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	b2d2      	uxtb	r2, r2
 800e77e:	701a      	strb	r2, [r3, #0]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	0a1b      	lsrs	r3, r3, #8
 800e784:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	683a      	ldr	r2, [r7, #0]
 800e78e:	b2d2      	uxtb	r2, r2
 800e790:	701a      	strb	r2, [r3, #0]
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	0a1b      	lsrs	r3, r3, #8
 800e796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	607a      	str	r2, [r7, #4]
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	b2d2      	uxtb	r2, r2
 800e7a2:	701a      	strb	r2, [r3, #0]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	0a1b      	lsrs	r3, r3, #8
 800e7a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	b2d2      	uxtb	r2, r2
 800e7b4:	701a      	strb	r2, [r3, #0]
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e7c2:	b480      	push	{r7}
 800e7c4:	b087      	sub	sp, #28
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	60f8      	str	r0, [r7, #12]
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00d      	beq.n	800e7f8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e7dc:	693a      	ldr	r2, [r7, #16]
 800e7de:	1c53      	adds	r3, r2, #1
 800e7e0:	613b      	str	r3, [r7, #16]
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	1c59      	adds	r1, r3, #1
 800e7e6:	6179      	str	r1, [r7, #20]
 800e7e8:	7812      	ldrb	r2, [r2, #0]
 800e7ea:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1f1      	bne.n	800e7dc <mem_cpy+0x1a>
	}
}
 800e7f8:	bf00      	nop
 800e7fa:	371c      	adds	r7, #28
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e804:	b480      	push	{r7}
 800e806:	b087      	sub	sp, #28
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	1c5a      	adds	r2, r3, #1
 800e818:	617a      	str	r2, [r7, #20]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	b2d2      	uxtb	r2, r2
 800e81e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3b01      	subs	r3, #1
 800e824:	607b      	str	r3, [r7, #4]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1f3      	bne.n	800e814 <mem_set+0x10>
}
 800e82c:	bf00      	nop
 800e82e:	bf00      	nop
 800e830:	371c      	adds	r7, #28
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e83a:	b480      	push	{r7}
 800e83c:	b089      	sub	sp, #36	@ 0x24
 800e83e:	af00      	add	r7, sp, #0
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	60b9      	str	r1, [r7, #8]
 800e844:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	61fb      	str	r3, [r7, #28]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	61fa      	str	r2, [r7, #28]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	4619      	mov	r1, r3
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	1c5a      	adds	r2, r3, #1
 800e860:	61ba      	str	r2, [r7, #24]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	1acb      	subs	r3, r1, r3
 800e866:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	607b      	str	r3, [r7, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <mem_cmp+0x40>
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d0eb      	beq.n	800e852 <mem_cmp+0x18>

	return r;
 800e87a:	697b      	ldr	r3, [r7, #20]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3724      	adds	r7, #36	@ 0x24
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e892:	e002      	b.n	800e89a <chk_chr+0x12>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3301      	adds	r3, #1
 800e898:	607b      	str	r3, [r7, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d005      	beq.n	800e8ae <chk_chr+0x26>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d1f2      	bne.n	800e894 <chk_chr+0xc>
	return *str;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr

0800e8be <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <lock_fs+0x22>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f002 fc42 	bl	801115a <ff_req_grant>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <lock_fs+0x22>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e000      	b.n	800e8e2 <lock_fs+0x24>
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b082      	sub	sp, #8
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00d      	beq.n	800e918 <unlock_fs+0x2e>
 800e8fc:	78fb      	ldrb	r3, [r7, #3]
 800e8fe:	2b0c      	cmp	r3, #12
 800e900:	d00a      	beq.n	800e918 <unlock_fs+0x2e>
 800e902:	78fb      	ldrb	r3, [r7, #3]
 800e904:	2b0b      	cmp	r3, #11
 800e906:	d007      	beq.n	800e918 <unlock_fs+0x2e>
 800e908:	78fb      	ldrb	r3, [r7, #3]
 800e90a:	2b0f      	cmp	r3, #15
 800e90c:	d004      	beq.n	800e918 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	4618      	mov	r0, r3
 800e914:	f002 fc36 	bl	8011184 <ff_rel_grant>
	}
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e92a:	2300      	movs	r3, #0
 800e92c:	60bb      	str	r3, [r7, #8]
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	e029      	b.n	800e988 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e934:	4a27      	ldr	r2, [pc, #156]	@ (800e9d4 <chk_lock+0xb4>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	011b      	lsls	r3, r3, #4
 800e93a:	4413      	add	r3, r2
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d01d      	beq.n	800e97e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e942:	4a24      	ldr	r2, [pc, #144]	@ (800e9d4 <chk_lock+0xb4>)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4413      	add	r3, r2
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	429a      	cmp	r2, r3
 800e952:	d116      	bne.n	800e982 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e954:	4a1f      	ldr	r2, [pc, #124]	@ (800e9d4 <chk_lock+0xb4>)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	4413      	add	r3, r2
 800e95c:	3304      	adds	r3, #4
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e964:	429a      	cmp	r2, r3
 800e966:	d10c      	bne.n	800e982 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e968:	4a1a      	ldr	r2, [pc, #104]	@ (800e9d4 <chk_lock+0xb4>)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	4413      	add	r3, r2
 800e970:	3308      	adds	r3, #8
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e978:	429a      	cmp	r2, r3
 800e97a:	d102      	bne.n	800e982 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e97c:	e007      	b.n	800e98e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e97e:	2301      	movs	r3, #1
 800e980:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3301      	adds	r3, #1
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d9d2      	bls.n	800e934 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b02      	cmp	r3, #2
 800e992:	d109      	bne.n	800e9a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <chk_lock+0x80>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d101      	bne.n	800e9a4 <chk_lock+0x84>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e010      	b.n	800e9c6 <chk_lock+0xa6>
 800e9a4:	2312      	movs	r3, #18
 800e9a6:	e00e      	b.n	800e9c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d108      	bne.n	800e9c0 <chk_lock+0xa0>
 800e9ae:	4a09      	ldr	r2, [pc, #36]	@ (800e9d4 <chk_lock+0xb4>)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	4413      	add	r3, r2
 800e9b6:	330c      	adds	r3, #12
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9be:	d101      	bne.n	800e9c4 <chk_lock+0xa4>
 800e9c0:	2310      	movs	r3, #16
 800e9c2:	e000      	b.n	800e9c6 <chk_lock+0xa6>
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	20001894 	.word	0x20001894

0800e9d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	607b      	str	r3, [r7, #4]
 800e9e2:	e002      	b.n	800e9ea <enq_lock+0x12>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d806      	bhi.n	800e9fe <enq_lock+0x26>
 800e9f0:	4a09      	ldr	r2, [pc, #36]	@ (800ea18 <enq_lock+0x40>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	011b      	lsls	r3, r3, #4
 800e9f6:	4413      	add	r3, r2
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1f2      	bne.n	800e9e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	bf14      	ite	ne
 800ea04:	2301      	movne	r3, #1
 800ea06:	2300      	moveq	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	20001894 	.word	0x20001894

0800ea1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	e01f      	b.n	800ea6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ea2c:	4a41      	ldr	r2, [pc, #260]	@ (800eb34 <inc_lock+0x118>)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	011b      	lsls	r3, r3, #4
 800ea32:	4413      	add	r3, r2
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d113      	bne.n	800ea66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ea3e:	4a3d      	ldr	r2, [pc, #244]	@ (800eb34 <inc_lock+0x118>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	4413      	add	r3, r2
 800ea46:	3304      	adds	r3, #4
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d109      	bne.n	800ea66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ea52:	4a38      	ldr	r2, [pc, #224]	@ (800eb34 <inc_lock+0x118>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	4413      	add	r3, r2
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d006      	beq.n	800ea74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d9dc      	bls.n	800ea2c <inc_lock+0x10>
 800ea72:	e000      	b.n	800ea76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ea74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d132      	bne.n	800eae2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	e002      	b.n	800ea88 <inc_lock+0x6c>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3301      	adds	r3, #1
 800ea86:	60fb      	str	r3, [r7, #12]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d806      	bhi.n	800ea9c <inc_lock+0x80>
 800ea8e:	4a29      	ldr	r2, [pc, #164]	@ (800eb34 <inc_lock+0x118>)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	011b      	lsls	r3, r3, #4
 800ea94:	4413      	add	r3, r2
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1f2      	bne.n	800ea82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d101      	bne.n	800eaa6 <inc_lock+0x8a>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e040      	b.n	800eb28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	4922      	ldr	r1, [pc, #136]	@ (800eb34 <inc_lock+0x118>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	440b      	add	r3, r1
 800eab2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689a      	ldr	r2, [r3, #8]
 800eab8:	491e      	ldr	r1, [pc, #120]	@ (800eb34 <inc_lock+0x118>)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	440b      	add	r3, r1
 800eac0:	3304      	adds	r3, #4
 800eac2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	695a      	ldr	r2, [r3, #20]
 800eac8:	491a      	ldr	r1, [pc, #104]	@ (800eb34 <inc_lock+0x118>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	011b      	lsls	r3, r3, #4
 800eace:	440b      	add	r3, r1
 800ead0:	3308      	adds	r3, #8
 800ead2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ead4:	4a17      	ldr	r2, [pc, #92]	@ (800eb34 <inc_lock+0x118>)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	4413      	add	r3, r2
 800eadc:	330c      	adds	r3, #12
 800eade:	2200      	movs	r2, #0
 800eae0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <inc_lock+0xe0>
 800eae8:	4a12      	ldr	r2, [pc, #72]	@ (800eb34 <inc_lock+0x118>)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	4413      	add	r3, r2
 800eaf0:	330c      	adds	r3, #12
 800eaf2:	881b      	ldrh	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <inc_lock+0xe0>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e015      	b.n	800eb28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d108      	bne.n	800eb14 <inc_lock+0xf8>
 800eb02:	4a0c      	ldr	r2, [pc, #48]	@ (800eb34 <inc_lock+0x118>)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	011b      	lsls	r3, r3, #4
 800eb08:	4413      	add	r3, r2
 800eb0a:	330c      	adds	r3, #12
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	e001      	b.n	800eb18 <inc_lock+0xfc>
 800eb14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eb18:	4906      	ldr	r1, [pc, #24]	@ (800eb34 <inc_lock+0x118>)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	011b      	lsls	r3, r3, #4
 800eb1e:	440b      	add	r3, r1
 800eb20:	330c      	adds	r3, #12
 800eb22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	3301      	adds	r3, #1
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	20001894 	.word	0x20001894

0800eb38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d825      	bhi.n	800eb98 <dec_lock+0x60>
		n = Files[i].ctr;
 800eb4c:	4a17      	ldr	r2, [pc, #92]	@ (800ebac <dec_lock+0x74>)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	011b      	lsls	r3, r3, #4
 800eb52:	4413      	add	r3, r2
 800eb54:	330c      	adds	r3, #12
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800eb5a:	89fb      	ldrh	r3, [r7, #14]
 800eb5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb60:	d101      	bne.n	800eb66 <dec_lock+0x2e>
 800eb62:	2300      	movs	r3, #0
 800eb64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800eb66:	89fb      	ldrh	r3, [r7, #14]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <dec_lock+0x3a>
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800eb72:	4a0e      	ldr	r2, [pc, #56]	@ (800ebac <dec_lock+0x74>)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	011b      	lsls	r3, r3, #4
 800eb78:	4413      	add	r3, r2
 800eb7a:	330c      	adds	r3, #12
 800eb7c:	89fa      	ldrh	r2, [r7, #14]
 800eb7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800eb80:	89fb      	ldrh	r3, [r7, #14]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <dec_lock+0x5a>
 800eb86:	4a09      	ldr	r2, [pc, #36]	@ (800ebac <dec_lock+0x74>)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	011b      	lsls	r3, r3, #4
 800eb8c:	4413      	add	r3, r2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	737b      	strb	r3, [r7, #13]
 800eb96:	e001      	b.n	800eb9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eb98:	2302      	movs	r3, #2
 800eb9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eb9c:	7b7b      	ldrb	r3, [r7, #13]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20001894 	.word	0x20001894

0800ebb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ebb8:	2300      	movs	r3, #0
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	e010      	b.n	800ebe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ebbe:	4a0d      	ldr	r2, [pc, #52]	@ (800ebf4 <clear_lock+0x44>)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	011b      	lsls	r3, r3, #4
 800ebc4:	4413      	add	r3, r2
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d105      	bne.n	800ebda <clear_lock+0x2a>
 800ebce:	4a09      	ldr	r2, [pc, #36]	@ (800ebf4 <clear_lock+0x44>)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	4413      	add	r3, r2
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	60fb      	str	r3, [r7, #12]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d9eb      	bls.n	800ebbe <clear_lock+0xe>
	}
}
 800ebe6:	bf00      	nop
 800ebe8:	bf00      	nop
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20001894 	.word	0x20001894

0800ebf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	78db      	ldrb	r3, [r3, #3]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d034      	beq.n	800ec76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	7858      	ldrb	r0, [r3, #1]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	f7ff fd0e 	bl	800e640 <disk_write>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	73fb      	strb	r3, [r7, #15]
 800ec2e:	e022      	b.n	800ec76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	1ad2      	subs	r2, r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	69db      	ldr	r3, [r3, #28]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d217      	bcs.n	800ec76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	789b      	ldrb	r3, [r3, #2]
 800ec4a:	613b      	str	r3, [r7, #16]
 800ec4c:	e010      	b.n	800ec70 <sync_window+0x78>
					wsect += fs->fsize;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	4413      	add	r3, r2
 800ec56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	7858      	ldrb	r0, [r3, #1]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ec62:	2301      	movs	r3, #1
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	f7ff fceb 	bl	800e640 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	613b      	str	r3, [r7, #16]
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d8eb      	bhi.n	800ec4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d01b      	beq.n	800ecd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff ffad 	bl	800ebf8 <sync_window>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d113      	bne.n	800ecd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7858      	ldrb	r0, [r3, #1]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	f7ff fca3 	bl	800e600 <disk_read>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ecc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ff87 	bl	800ebf8 <sync_window>
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d158      	bne.n	800eda6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d148      	bne.n	800ed8e <sync_fs+0xb2>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	791b      	ldrb	r3, [r3, #4]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d144      	bne.n	800ed8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3334      	adds	r3, #52	@ 0x34
 800ed08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff fd78 	bl	800e804 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	3334      	adds	r3, #52	@ 0x34
 800ed18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ed1c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fd07 	bl	800e734 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3334      	adds	r3, #52	@ 0x34
 800ed2a:	4921      	ldr	r1, [pc, #132]	@ (800edb0 <sync_fs+0xd4>)
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff fd1c 	bl	800e76a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3334      	adds	r3, #52	@ 0x34
 800ed36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ed3a:	491e      	ldr	r1, [pc, #120]	@ (800edb4 <sync_fs+0xd8>)
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff fd14 	bl	800e76a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3334      	adds	r3, #52	@ 0x34
 800ed46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4610      	mov	r0, r2
 800ed52:	f7ff fd0a 	bl	800e76a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	3334      	adds	r3, #52	@ 0x34
 800ed5a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7ff fd00 	bl	800e76a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	7858      	ldrb	r0, [r3, #1]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed82:	2301      	movs	r3, #1
 800ed84:	f7ff fc5c 	bl	800e640 <disk_write>
			fs->fsi_flag = 0;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	785b      	ldrb	r3, [r3, #1]
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff fc72 	bl	800e680 <disk_ioctl>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <sync_fs+0xca>
 800eda2:	2301      	movs	r3, #1
 800eda4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	41615252 	.word	0x41615252
 800edb4:	61417272 	.word	0x61417272

0800edb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	3b02      	subs	r3, #2
 800edc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	3b02      	subs	r3, #2
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d301      	bcc.n	800edd8 <clust2sect+0x20>
 800edd4:	2300      	movs	r3, #0
 800edd6:	e008      	b.n	800edea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	895b      	ldrh	r3, [r3, #10]
 800eddc:	461a      	mov	r2, r3
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	fb03 f202 	mul.w	r2, r3, r2
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede8:	4413      	add	r3, r2
}
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b086      	sub	sp, #24
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d904      	bls.n	800ee16 <get_fat+0x20>
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee16:	2301      	movs	r3, #1
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	e08e      	b.n	800ef3a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d061      	beq.n	800eeee <get_fat+0xf8>
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	dc7b      	bgt.n	800ef26 <get_fat+0x130>
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d002      	beq.n	800ee38 <get_fat+0x42>
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d041      	beq.n	800eeba <get_fat+0xc4>
 800ee36:	e076      	b.n	800ef26 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	085b      	lsrs	r3, r3, #1
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	0a5b      	lsrs	r3, r3, #9
 800ee4e:	4413      	add	r3, r2
 800ee50:	4619      	mov	r1, r3
 800ee52:	6938      	ldr	r0, [r7, #16]
 800ee54:	f7ff ff14 	bl	800ec80 <move_window>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d166      	bne.n	800ef2c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	60fa      	str	r2, [r7, #12]
 800ee64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	0a5b      	lsrs	r3, r3, #9
 800ee7a:	4413      	add	r3, r2
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6938      	ldr	r0, [r7, #16]
 800ee80:	f7ff fefe 	bl	800ec80 <move_window>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d152      	bne.n	800ef30 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee90:	693a      	ldr	r2, [r7, #16]
 800ee92:	4413      	add	r3, r2
 800ee94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <get_fat+0xba>
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	091b      	lsrs	r3, r3, #4
 800eeae:	e002      	b.n	800eeb6 <get_fat+0xc0>
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eeb6:	617b      	str	r3, [r7, #20]
			break;
 800eeb8:	e03f      	b.n	800ef3a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	0a1b      	lsrs	r3, r3, #8
 800eec2:	4413      	add	r3, r2
 800eec4:	4619      	mov	r1, r3
 800eec6:	6938      	ldr	r0, [r7, #16]
 800eec8:	f7ff feda 	bl	800ec80 <move_window>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d130      	bne.n	800ef34 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	005b      	lsls	r3, r3, #1
 800eedc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eee0:	4413      	add	r3, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7ff fbea 	bl	800e6bc <ld_word>
 800eee8:	4603      	mov	r3, r0
 800eeea:	617b      	str	r3, [r7, #20]
			break;
 800eeec:	e025      	b.n	800ef3a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	09db      	lsrs	r3, r3, #7
 800eef6:	4413      	add	r3, r2
 800eef8:	4619      	mov	r1, r3
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f7ff fec0 	bl	800ec80 <move_window>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d118      	bne.n	800ef38 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ef14:	4413      	add	r3, r2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff fbe9 	bl	800e6ee <ld_dword>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ef22:	617b      	str	r3, [r7, #20]
			break;
 800ef24:	e009      	b.n	800ef3a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ef26:	2301      	movs	r3, #1
 800ef28:	617b      	str	r3, [r7, #20]
 800ef2a:	e006      	b.n	800ef3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef2c:	bf00      	nop
 800ef2e:	e004      	b.n	800ef3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef30:	bf00      	nop
 800ef32:	e002      	b.n	800ef3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef34:	bf00      	nop
 800ef36:	e000      	b.n	800ef3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef38:	bf00      	nop
		}
	}

	return val;
 800ef3a:	697b      	ldr	r3, [r7, #20]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ef44:	b590      	push	{r4, r7, lr}
 800ef46:	b089      	sub	sp, #36	@ 0x24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ef50:	2302      	movs	r3, #2
 800ef52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	f240 80d9 	bls.w	800f10e <put_fat+0x1ca>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	68ba      	ldr	r2, [r7, #8]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	f080 80d3 	bcs.w	800f10e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	f000 8096 	beq.w	800f09e <put_fat+0x15a>
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	f300 80cb 	bgt.w	800f10e <put_fat+0x1ca>
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d002      	beq.n	800ef82 <put_fat+0x3e>
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d06e      	beq.n	800f05e <put_fat+0x11a>
 800ef80:	e0c5      	b.n	800f10e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	61bb      	str	r3, [r7, #24]
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	085b      	lsrs	r3, r3, #1
 800ef8a:	69ba      	ldr	r2, [r7, #24]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	0a5b      	lsrs	r3, r3, #9
 800ef98:	4413      	add	r3, r2
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f7ff fe6f 	bl	800ec80 <move_window>
 800efa2:	4603      	mov	r3, r0
 800efa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800efa6:	7ffb      	ldrb	r3, [r7, #31]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f040 80a9 	bne.w	800f100 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	1c59      	adds	r1, r3, #1
 800efb8:	61b9      	str	r1, [r7, #24]
 800efba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efbe:	4413      	add	r3, r2
 800efc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	f003 0301 	and.w	r3, r3, #1
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00d      	beq.n	800efe8 <put_fat+0xa4>
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	b25b      	sxtb	r3, r3
 800efd2:	f003 030f 	and.w	r3, r3, #15
 800efd6:	b25a      	sxtb	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	b25b      	sxtb	r3, r3
 800efdc:	011b      	lsls	r3, r3, #4
 800efde:	b25b      	sxtb	r3, r3
 800efe0:	4313      	orrs	r3, r2
 800efe2:	b25b      	sxtb	r3, r3
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	e001      	b.n	800efec <put_fat+0xa8>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	b2db      	uxtb	r3, r3
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2201      	movs	r2, #1
 800eff4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	0a5b      	lsrs	r3, r3, #9
 800effe:	4413      	add	r3, r2
 800f000:	4619      	mov	r1, r3
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7ff fe3c 	bl	800ec80 <move_window>
 800f008:	4603      	mov	r3, r0
 800f00a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f00c:	7ffb      	ldrb	r3, [r7, #31]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d178      	bne.n	800f104 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f01e:	4413      	add	r3, r2
 800f020:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d003      	beq.n	800f034 <put_fat+0xf0>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	091b      	lsrs	r3, r3, #4
 800f030:	b2db      	uxtb	r3, r3
 800f032:	e00e      	b.n	800f052 <put_fat+0x10e>
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	b25b      	sxtb	r3, r3
 800f03a:	f023 030f 	bic.w	r3, r3, #15
 800f03e:	b25a      	sxtb	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	0a1b      	lsrs	r3, r3, #8
 800f044:	b25b      	sxtb	r3, r3
 800f046:	f003 030f 	and.w	r3, r3, #15
 800f04a:	b25b      	sxtb	r3, r3
 800f04c:	4313      	orrs	r3, r2
 800f04e:	b25b      	sxtb	r3, r3
 800f050:	b2db      	uxtb	r3, r3
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2201      	movs	r2, #1
 800f05a:	70da      	strb	r2, [r3, #3]
			break;
 800f05c:	e057      	b.n	800f10e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	0a1b      	lsrs	r3, r3, #8
 800f066:	4413      	add	r3, r2
 800f068:	4619      	mov	r1, r3
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	f7ff fe08 	bl	800ec80 <move_window>
 800f070:	4603      	mov	r3, r0
 800f072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f074:	7ffb      	ldrb	r3, [r7, #31]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d146      	bne.n	800f108 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f088:	4413      	add	r3, r2
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	b292      	uxth	r2, r2
 800f08e:	4611      	mov	r1, r2
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fb4f 	bl	800e734 <st_word>
			fs->wflag = 1;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2201      	movs	r2, #1
 800f09a:	70da      	strb	r2, [r3, #3]
			break;
 800f09c:	e037      	b.n	800f10e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	09db      	lsrs	r3, r3, #7
 800f0a6:	4413      	add	r3, r2
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f7ff fde8 	bl	800ec80 <move_window>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0b4:	7ffb      	ldrb	r3, [r7, #31]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d128      	bne.n	800f10c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f0ce:	4413      	add	r3, r2
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff fb0c 	bl	800e6ee <ld_dword>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f0dc:	4323      	orrs	r3, r4
 800f0de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f0ee:	4413      	add	r3, r2
 800f0f0:	6879      	ldr	r1, [r7, #4]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff fb39 	bl	800e76a <st_dword>
			fs->wflag = 1;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	70da      	strb	r2, [r3, #3]
			break;
 800f0fe:	e006      	b.n	800f10e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f100:	bf00      	nop
 800f102:	e004      	b.n	800f10e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f104:	bf00      	nop
 800f106:	e002      	b.n	800f10e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f108:	bf00      	nop
 800f10a:	e000      	b.n	800f10e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f10c:	bf00      	nop
		}
	}
	return res;
 800f10e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f110:	4618      	mov	r0, r3
 800f112:	3724      	adds	r7, #36	@ 0x24
 800f114:	46bd      	mov	sp, r7
 800f116:	bd90      	pop	{r4, r7, pc}

0800f118 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b088      	sub	sp, #32
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d904      	bls.n	800f13e <remove_chain+0x26>
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	699b      	ldr	r3, [r3, #24]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d301      	bcc.n	800f142 <remove_chain+0x2a>
 800f13e:	2302      	movs	r3, #2
 800f140:	e04b      	b.n	800f1da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00c      	beq.n	800f162 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f148:	f04f 32ff 	mov.w	r2, #4294967295
 800f14c:	6879      	ldr	r1, [r7, #4]
 800f14e:	69b8      	ldr	r0, [r7, #24]
 800f150:	f7ff fef8 	bl	800ef44 <put_fat>
 800f154:	4603      	mov	r3, r0
 800f156:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f158:	7ffb      	ldrb	r3, [r7, #31]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d001      	beq.n	800f162 <remove_chain+0x4a>
 800f15e:	7ffb      	ldrb	r3, [r7, #31]
 800f160:	e03b      	b.n	800f1da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff fe46 	bl	800edf6 <get_fat>
 800f16a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d031      	beq.n	800f1d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2b01      	cmp	r3, #1
 800f176:	d101      	bne.n	800f17c <remove_chain+0x64>
 800f178:	2302      	movs	r3, #2
 800f17a:	e02e      	b.n	800f1da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f182:	d101      	bne.n	800f188 <remove_chain+0x70>
 800f184:	2301      	movs	r3, #1
 800f186:	e028      	b.n	800f1da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f188:	2200      	movs	r2, #0
 800f18a:	68b9      	ldr	r1, [r7, #8]
 800f18c:	69b8      	ldr	r0, [r7, #24]
 800f18e:	f7ff fed9 	bl	800ef44 <put_fat>
 800f192:	4603      	mov	r3, r0
 800f194:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f196:	7ffb      	ldrb	r3, [r7, #31]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d001      	beq.n	800f1a0 <remove_chain+0x88>
 800f19c:	7ffb      	ldrb	r3, [r7, #31]
 800f19e:	e01c      	b.n	800f1da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	695a      	ldr	r2, [r3, #20]
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	699b      	ldr	r3, [r3, #24]
 800f1a8:	3b02      	subs	r3, #2
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d20b      	bcs.n	800f1c6 <remove_chain+0xae>
			fs->free_clst++;
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	791b      	ldrb	r3, [r3, #4]
 800f1bc:	f043 0301 	orr.w	r3, r3, #1
 800f1c0:	b2da      	uxtb	r2, r3
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	699b      	ldr	r3, [r3, #24]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d3c6      	bcc.n	800f162 <remove_chain+0x4a>
 800f1d4:	e000      	b.n	800f1d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f1d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3720      	adds	r7, #32
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b088      	sub	sp, #32
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10d      	bne.n	800f214 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d004      	beq.n	800f20e <create_chain+0x2c>
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	69ba      	ldr	r2, [r7, #24]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d31b      	bcc.n	800f246 <create_chain+0x64>
 800f20e:	2301      	movs	r3, #1
 800f210:	61bb      	str	r3, [r7, #24]
 800f212:	e018      	b.n	800f246 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff fded 	bl	800edf6 <get_fat>
 800f21c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2b01      	cmp	r3, #1
 800f222:	d801      	bhi.n	800f228 <create_chain+0x46>
 800f224:	2301      	movs	r3, #1
 800f226:	e070      	b.n	800f30a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f22e:	d101      	bne.n	800f234 <create_chain+0x52>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	e06a      	b.n	800f30a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d201      	bcs.n	800f242 <create_chain+0x60>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	e063      	b.n	800f30a <create_chain+0x128>
		scl = clst;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	3301      	adds	r3, #1
 800f24e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	699b      	ldr	r3, [r3, #24]
 800f254:	69fa      	ldr	r2, [r7, #28]
 800f256:	429a      	cmp	r2, r3
 800f258:	d307      	bcc.n	800f26a <create_chain+0x88>
				ncl = 2;
 800f25a:	2302      	movs	r3, #2
 800f25c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f25e:	69fa      	ldr	r2, [r7, #28]
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	429a      	cmp	r2, r3
 800f264:	d901      	bls.n	800f26a <create_chain+0x88>
 800f266:	2300      	movs	r3, #0
 800f268:	e04f      	b.n	800f30a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f26a:	69f9      	ldr	r1, [r7, #28]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff fdc2 	bl	800edf6 <get_fat>
 800f272:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00e      	beq.n	800f298 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d003      	beq.n	800f288 <create_chain+0xa6>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f286:	d101      	bne.n	800f28c <create_chain+0xaa>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	e03e      	b.n	800f30a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f28c:	69fa      	ldr	r2, [r7, #28]
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	429a      	cmp	r2, r3
 800f292:	d1da      	bne.n	800f24a <create_chain+0x68>
 800f294:	2300      	movs	r3, #0
 800f296:	e038      	b.n	800f30a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f298:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f29a:	f04f 32ff 	mov.w	r2, #4294967295
 800f29e:	69f9      	ldr	r1, [r7, #28]
 800f2a0:	6938      	ldr	r0, [r7, #16]
 800f2a2:	f7ff fe4f 	bl	800ef44 <put_fat>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d109      	bne.n	800f2c4 <create_chain+0xe2>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d006      	beq.n	800f2c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f2b6:	69fa      	ldr	r2, [r7, #28]
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f7ff fe42 	bl	800ef44 <put_fat>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d116      	bne.n	800f2f8 <create_chain+0x116>
		fs->last_clst = ncl;
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	69fa      	ldr	r2, [r7, #28]
 800f2ce:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	695a      	ldr	r2, [r3, #20]
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	3b02      	subs	r3, #2
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d804      	bhi.n	800f2e8 <create_chain+0x106>
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	1e5a      	subs	r2, r3, #1
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	791b      	ldrb	r3, [r3, #4]
 800f2ec:	f043 0301 	orr.w	r3, r3, #1
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	711a      	strb	r2, [r3, #4]
 800f2f6:	e007      	b.n	800f308 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d102      	bne.n	800f304 <create_chain+0x122>
 800f2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f302:	e000      	b.n	800f306 <create_chain+0x124>
 800f304:	2301      	movs	r3, #1
 800f306:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f308:	69fb      	ldr	r3, [r7, #28]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3720      	adds	r7, #32
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f312:	b480      	push	{r7}
 800f314:	b087      	sub	sp, #28
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f326:	3304      	adds	r3, #4
 800f328:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	0a5b      	lsrs	r3, r3, #9
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	8952      	ldrh	r2, [r2, #10]
 800f332:	fbb3 f3f2 	udiv	r3, r3, r2
 800f336:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	1d1a      	adds	r2, r3, #4
 800f33c:	613a      	str	r2, [r7, #16]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <clmt_clust+0x3a>
 800f348:	2300      	movs	r3, #0
 800f34a:	e010      	b.n	800f36e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	429a      	cmp	r2, r3
 800f352:	d307      	bcc.n	800f364 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	3304      	adds	r3, #4
 800f360:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f362:	e7e9      	b.n	800f338 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f364:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	4413      	add	r3, r2
}
 800f36e:	4618      	mov	r0, r3
 800f370:	371c      	adds	r7, #28
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b086      	sub	sp, #24
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f390:	d204      	bcs.n	800f39c <dir_sdi+0x22>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	f003 031f 	and.w	r3, r3, #31
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f39c:	2302      	movs	r3, #2
 800f39e:	e063      	b.n	800f468 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <dir_sdi+0x46>
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d902      	bls.n	800f3c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10c      	bne.n	800f3e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	095b      	lsrs	r3, r3, #5
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	8912      	ldrh	r2, [r2, #8]
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d301      	bcc.n	800f3d6 <dir_sdi+0x5c>
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	e048      	b.n	800f468 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	61da      	str	r2, [r3, #28]
 800f3de:	e029      	b.n	800f434 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	895b      	ldrh	r3, [r3, #10]
 800f3e4:	025b      	lsls	r3, r3, #9
 800f3e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f3e8:	e019      	b.n	800f41e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6979      	ldr	r1, [r7, #20]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff fd01 	bl	800edf6 <get_fat>
 800f3f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fc:	d101      	bne.n	800f402 <dir_sdi+0x88>
 800f3fe:	2301      	movs	r3, #1
 800f400:	e032      	b.n	800f468 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d904      	bls.n	800f412 <dir_sdi+0x98>
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d301      	bcc.n	800f416 <dir_sdi+0x9c>
 800f412:	2302      	movs	r3, #2
 800f414:	e028      	b.n	800f468 <dir_sdi+0xee>
			ofs -= csz;
 800f416:	683a      	ldr	r2, [r7, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	429a      	cmp	r2, r3
 800f424:	d2e1      	bcs.n	800f3ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f426:	6979      	ldr	r1, [r7, #20]
 800f428:	6938      	ldr	r0, [r7, #16]
 800f42a:	f7ff fcc5 	bl	800edb8 <clust2sect>
 800f42e:	4602      	mov	r2, r0
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <dir_sdi+0xcc>
 800f442:	2302      	movs	r3, #2
 800f444:	e010      	b.n	800f468 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	69da      	ldr	r2, [r3, #28]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	0a5b      	lsrs	r3, r3, #9
 800f44e:	441a      	add	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f460:	441a      	add	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f466:	2300      	movs	r3, #0
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	3320      	adds	r3, #32
 800f486:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <dir_next+0x28>
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f496:	d301      	bcc.n	800f49c <dir_next+0x2c>
 800f498:	2304      	movs	r3, #4
 800f49a:	e0aa      	b.n	800f5f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f040 8098 	bne.w	800f5d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	69db      	ldr	r3, [r3, #28]
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10b      	bne.n	800f4d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	095b      	lsrs	r3, r3, #5
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	8912      	ldrh	r2, [r2, #8]
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	f0c0 8088 	bcc.w	800f5d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	61da      	str	r2, [r3, #28]
 800f4ce:	2304      	movs	r3, #4
 800f4d0:	e08f      	b.n	800f5f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	0a5b      	lsrs	r3, r3, #9
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	8952      	ldrh	r2, [r2, #10]
 800f4da:	3a01      	subs	r2, #1
 800f4dc:	4013      	ands	r3, r2
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d17a      	bne.n	800f5d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	f7ff fc83 	bl	800edf6 <get_fat>
 800f4f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d801      	bhi.n	800f4fc <dir_next+0x8c>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e07a      	b.n	800f5f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f502:	d101      	bne.n	800f508 <dir_next+0x98>
 800f504:	2301      	movs	r3, #1
 800f506:	e074      	b.n	800f5f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	699b      	ldr	r3, [r3, #24]
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d358      	bcc.n	800f5c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d104      	bne.n	800f522 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	61da      	str	r2, [r3, #28]
 800f51e:	2304      	movs	r3, #4
 800f520:	e067      	b.n	800f5f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	4619      	mov	r1, r3
 800f52a:	4610      	mov	r0, r2
 800f52c:	f7ff fe59 	bl	800f1e2 <create_chain>
 800f530:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d101      	bne.n	800f53c <dir_next+0xcc>
 800f538:	2307      	movs	r3, #7
 800f53a:	e05a      	b.n	800f5f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d101      	bne.n	800f546 <dir_next+0xd6>
 800f542:	2302      	movs	r3, #2
 800f544:	e055      	b.n	800f5f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54c:	d101      	bne.n	800f552 <dir_next+0xe2>
 800f54e:	2301      	movs	r3, #1
 800f550:	e04f      	b.n	800f5f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff fb50 	bl	800ebf8 <sync_window>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <dir_next+0xf2>
 800f55e:	2301      	movs	r3, #1
 800f560:	e047      	b.n	800f5f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3334      	adds	r3, #52	@ 0x34
 800f566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f56a:	2100      	movs	r1, #0
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff f949 	bl	800e804 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f572:	2300      	movs	r3, #0
 800f574:	613b      	str	r3, [r7, #16]
 800f576:	6979      	ldr	r1, [r7, #20]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f7ff fc1d 	bl	800edb8 <clust2sect>
 800f57e:	4602      	mov	r2, r0
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	631a      	str	r2, [r3, #48]	@ 0x30
 800f584:	e012      	b.n	800f5ac <dir_next+0x13c>
						fs->wflag = 1;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2201      	movs	r2, #1
 800f58a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f7ff fb33 	bl	800ebf8 <sync_window>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <dir_next+0x12c>
 800f598:	2301      	movs	r3, #1
 800f59a:	e02a      	b.n	800f5f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	613b      	str	r3, [r7, #16]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	895b      	ldrh	r3, [r3, #10]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d3e6      	bcc.n	800f586 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	1ad2      	subs	r2, r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f5ca:	6979      	ldr	r1, [r7, #20]
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7ff fbf3 	bl	800edb8 <clust2sect>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ea:	441a      	add	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b086      	sub	sp, #24
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f60a:	2100      	movs	r1, #0
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff feb4 	bl	800f37a <dir_sdi>
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d12b      	bne.n	800f674 <dir_alloc+0x7a>
		n = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	69db      	ldr	r3, [r3, #28]
 800f624:	4619      	mov	r1, r3
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f7ff fb2a 	bl	800ec80 <move_window>
 800f62c:	4603      	mov	r3, r0
 800f62e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d11d      	bne.n	800f672 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2be5      	cmp	r3, #229	@ 0xe5
 800f63e:	d004      	beq.n	800f64a <dir_alloc+0x50>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a1b      	ldr	r3, [r3, #32]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d107      	bne.n	800f65a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	3301      	adds	r3, #1
 800f64e:	613b      	str	r3, [r7, #16]
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	d102      	bne.n	800f65e <dir_alloc+0x64>
 800f658:	e00c      	b.n	800f674 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f65a:	2300      	movs	r3, #0
 800f65c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f65e:	2101      	movs	r1, #1
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff ff05 	bl	800f470 <dir_next>
 800f666:	4603      	mov	r3, r0
 800f668:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f66a:	7dfb      	ldrb	r3, [r7, #23]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d0d7      	beq.n	800f620 <dir_alloc+0x26>
 800f670:	e000      	b.n	800f674 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f672:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f674:	7dfb      	ldrb	r3, [r7, #23]
 800f676:	2b04      	cmp	r3, #4
 800f678:	d101      	bne.n	800f67e <dir_alloc+0x84>
 800f67a:	2307      	movs	r3, #7
 800f67c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	331a      	adds	r3, #26
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff f810 	bl	800e6bc <ld_word>
 800f69c:	4603      	mov	r3, r0
 800f69e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d109      	bne.n	800f6bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	3314      	adds	r3, #20
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7ff f805 	bl	800e6bc <ld_word>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	041b      	lsls	r3, r3, #16
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	60f8      	str	r0, [r7, #12]
 800f6ce:	60b9      	str	r1, [r7, #8]
 800f6d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	331a      	adds	r3, #26
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	b292      	uxth	r2, r2
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7ff f829 	bl	800e734 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d109      	bne.n	800f6fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	f103 0214 	add.w	r2, r3, #20
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	0c1b      	lsrs	r3, r3, #16
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f7ff f81b 	bl	800e734 <st_word>
	}
}
 800f6fe:	bf00      	nop
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b086      	sub	sp, #24
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f714:	2100      	movs	r1, #0
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fe2f 	bl	800f37a <dir_sdi>
 800f71c:	4603      	mov	r3, r0
 800f71e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f720:	7dfb      	ldrb	r3, [r7, #23]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <dir_find+0x24>
 800f726:	7dfb      	ldrb	r3, [r7, #23]
 800f728:	e03e      	b.n	800f7a8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	69db      	ldr	r3, [r3, #28]
 800f72e:	4619      	mov	r1, r3
 800f730:	6938      	ldr	r0, [r7, #16]
 800f732:	f7ff faa5 	bl	800ec80 <move_window>
 800f736:	4603      	mov	r3, r0
 800f738:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f73a:	7dfb      	ldrb	r3, [r7, #23]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d12f      	bne.n	800f7a0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a1b      	ldr	r3, [r3, #32]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d102      	bne.n	800f754 <dir_find+0x4e>
 800f74e:	2304      	movs	r3, #4
 800f750:	75fb      	strb	r3, [r7, #23]
 800f752:	e028      	b.n	800f7a6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a1b      	ldr	r3, [r3, #32]
 800f758:	330b      	adds	r3, #11
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f760:	b2da      	uxtb	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	330b      	adds	r3, #11
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 0308 	and.w	r3, r3, #8
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10a      	bne.n	800f78c <dir_find+0x86>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a18      	ldr	r0, [r3, #32]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3324      	adds	r3, #36	@ 0x24
 800f77e:	220b      	movs	r2, #11
 800f780:	4619      	mov	r1, r3
 800f782:	f7ff f85a 	bl	800e83a <mem_cmp>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00b      	beq.n	800f7a4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f78c:	2100      	movs	r1, #0
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7ff fe6e 	bl	800f470 <dir_next>
 800f794:	4603      	mov	r3, r0
 800f796:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f798:	7dfb      	ldrb	r3, [r7, #23]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0c5      	beq.n	800f72a <dir_find+0x24>
 800f79e:	e002      	b.n	800f7a6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f7a0:	bf00      	nop
 800f7a2:	e000      	b.n	800f7a6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f7a4:	bf00      	nop

	return res;
 800f7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f7be:	2101      	movs	r1, #1
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff ff1a 	bl	800f5fa <dir_alloc>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f7ca:	7bfb      	ldrb	r3, [r7, #15]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d11c      	bne.n	800f80a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	69db      	ldr	r3, [r3, #28]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	68b8      	ldr	r0, [r7, #8]
 800f7d8:	f7ff fa52 	bl	800ec80 <move_window>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d111      	bne.n	800f80a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a1b      	ldr	r3, [r3, #32]
 800f7ea:	2220      	movs	r2, #32
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7ff f808 	bl	800e804 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a18      	ldr	r0, [r3, #32]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3324      	adds	r3, #36	@ 0x24
 800f7fc:	220b      	movs	r2, #11
 800f7fe:	4619      	mov	r1, r3
 800f800:	f7fe ffdf 	bl	800e7c2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2201      	movs	r2, #1
 800f808:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b088      	sub	sp, #32
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	3324      	adds	r3, #36	@ 0x24
 800f828:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f82a:	220b      	movs	r2, #11
 800f82c:	2120      	movs	r1, #32
 800f82e:	68b8      	ldr	r0, [r7, #8]
 800f830:	f7fe ffe8 	bl	800e804 <mem_set>
	si = i = 0; ni = 8;
 800f834:	2300      	movs	r3, #0
 800f836:	613b      	str	r3, [r7, #16]
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	61fb      	str	r3, [r7, #28]
 800f83c:	2308      	movs	r3, #8
 800f83e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	61fa      	str	r2, [r7, #28]
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	4413      	add	r3, r2
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f84e:	7efb      	ldrb	r3, [r7, #27]
 800f850:	2b20      	cmp	r3, #32
 800f852:	d94e      	bls.n	800f8f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f854:	7efb      	ldrb	r3, [r7, #27]
 800f856:	2b2f      	cmp	r3, #47	@ 0x2f
 800f858:	d006      	beq.n	800f868 <create_name+0x54>
 800f85a:	7efb      	ldrb	r3, [r7, #27]
 800f85c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f85e:	d110      	bne.n	800f882 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f860:	e002      	b.n	800f868 <create_name+0x54>
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	3301      	adds	r3, #1
 800f866:	61fb      	str	r3, [r7, #28]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	4413      	add	r3, r2
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b2f      	cmp	r3, #47	@ 0x2f
 800f872:	d0f6      	beq.n	800f862 <create_name+0x4e>
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	4413      	add	r3, r2
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f87e:	d0f0      	beq.n	800f862 <create_name+0x4e>
			break;
 800f880:	e038      	b.n	800f8f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f882:	7efb      	ldrb	r3, [r7, #27]
 800f884:	2b2e      	cmp	r3, #46	@ 0x2e
 800f886:	d003      	beq.n	800f890 <create_name+0x7c>
 800f888:	693a      	ldr	r2, [r7, #16]
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d30c      	bcc.n	800f8aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	2b0b      	cmp	r3, #11
 800f894:	d002      	beq.n	800f89c <create_name+0x88>
 800f896:	7efb      	ldrb	r3, [r7, #27]
 800f898:	2b2e      	cmp	r3, #46	@ 0x2e
 800f89a:	d001      	beq.n	800f8a0 <create_name+0x8c>
 800f89c:	2306      	movs	r3, #6
 800f89e:	e044      	b.n	800f92a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f8a0:	2308      	movs	r3, #8
 800f8a2:	613b      	str	r3, [r7, #16]
 800f8a4:	230b      	movs	r3, #11
 800f8a6:	617b      	str	r3, [r7, #20]
			continue;
 800f8a8:	e022      	b.n	800f8f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f8aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	da04      	bge.n	800f8bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f8b2:	7efb      	ldrb	r3, [r7, #27]
 800f8b4:	3b80      	subs	r3, #128	@ 0x80
 800f8b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f934 <create_name+0x120>)
 800f8b8:	5cd3      	ldrb	r3, [r2, r3]
 800f8ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f8bc:	7efb      	ldrb	r3, [r7, #27]
 800f8be:	4619      	mov	r1, r3
 800f8c0:	481d      	ldr	r0, [pc, #116]	@ (800f938 <create_name+0x124>)
 800f8c2:	f7fe ffe1 	bl	800e888 <chk_chr>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <create_name+0xbc>
 800f8cc:	2306      	movs	r3, #6
 800f8ce:	e02c      	b.n	800f92a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f8d0:	7efb      	ldrb	r3, [r7, #27]
 800f8d2:	2b60      	cmp	r3, #96	@ 0x60
 800f8d4:	d905      	bls.n	800f8e2 <create_name+0xce>
 800f8d6:	7efb      	ldrb	r3, [r7, #27]
 800f8d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800f8da:	d802      	bhi.n	800f8e2 <create_name+0xce>
 800f8dc:	7efb      	ldrb	r3, [r7, #27]
 800f8de:	3b20      	subs	r3, #32
 800f8e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	1c5a      	adds	r2, r3, #1
 800f8e6:	613a      	str	r2, [r7, #16]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	7efa      	ldrb	r2, [r7, #27]
 800f8ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f8f0:	e7a6      	b.n	800f840 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f8f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	441a      	add	r2, r3
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <create_name+0xf4>
 800f904:	2306      	movs	r3, #6
 800f906:	e010      	b.n	800f92a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2be5      	cmp	r3, #229	@ 0xe5
 800f90e:	d102      	bne.n	800f916 <create_name+0x102>
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2205      	movs	r2, #5
 800f914:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f916:	7efb      	ldrb	r3, [r7, #27]
 800f918:	2b20      	cmp	r3, #32
 800f91a:	d801      	bhi.n	800f920 <create_name+0x10c>
 800f91c:	2204      	movs	r2, #4
 800f91e:	e000      	b.n	800f922 <create_name+0x10e>
 800f920:	2200      	movs	r2, #0
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	330b      	adds	r3, #11
 800f926:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f928:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3720      	adds	r7, #32
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	0801bb2c 	.word	0x0801bb2c
 800f938:	08019b74 	.word	0x08019b74

0800f93c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f950:	e002      	b.n	800f958 <follow_path+0x1c>
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	3301      	adds	r3, #1
 800f956:	603b      	str	r3, [r7, #0]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f95e:	d0f8      	beq.n	800f952 <follow_path+0x16>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b5c      	cmp	r3, #92	@ 0x5c
 800f966:	d0f4      	beq.n	800f952 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2200      	movs	r2, #0
 800f96c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b1f      	cmp	r3, #31
 800f974:	d80a      	bhi.n	800f98c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2280      	movs	r2, #128	@ 0x80
 800f97a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f97e:	2100      	movs	r1, #0
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7ff fcfa 	bl	800f37a <dir_sdi>
 800f986:	4603      	mov	r3, r0
 800f988:	75fb      	strb	r3, [r7, #23]
 800f98a:	e043      	b.n	800fa14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f98c:	463b      	mov	r3, r7
 800f98e:	4619      	mov	r1, r3
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff ff3f 	bl	800f814 <create_name>
 800f996:	4603      	mov	r3, r0
 800f998:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d134      	bne.n	800fa0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff feb0 	bl	800f706 <dir_find>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f9b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00a      	beq.n	800f9ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	d127      	bne.n	800fa0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f9be:	7afb      	ldrb	r3, [r7, #11]
 800f9c0:	f003 0304 	and.w	r3, r3, #4
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d122      	bne.n	800fa0e <follow_path+0xd2>
 800f9c8:	2305      	movs	r3, #5
 800f9ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f9cc:	e01f      	b.n	800fa0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9ce:	7afb      	ldrb	r3, [r7, #11]
 800f9d0:	f003 0304 	and.w	r3, r3, #4
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d11c      	bne.n	800fa12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	799b      	ldrb	r3, [r3, #6]
 800f9dc:	f003 0310 	and.w	r3, r3, #16
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f9e4:	2305      	movs	r3, #5
 800f9e6:	75fb      	strb	r3, [r7, #23]
 800f9e8:	e014      	b.n	800fa14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f8:	4413      	add	r3, r2
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f7ff fe43 	bl	800f688 <ld_clust>
 800fa02:	4602      	mov	r2, r0
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa08:	e7c0      	b.n	800f98c <follow_path+0x50>
			if (res != FR_OK) break;
 800fa0a:	bf00      	nop
 800fa0c:	e002      	b.n	800fa14 <follow_path+0xd8>
				break;
 800fa0e:	bf00      	nop
 800fa10:	e000      	b.n	800fa14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa12:	bf00      	nop
			}
		}
	}

	return res;
 800fa14:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b087      	sub	sp, #28
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa26:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d031      	beq.n	800fa98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	617b      	str	r3, [r7, #20]
 800fa3a:	e002      	b.n	800fa42 <get_ldnumber+0x24>
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	2b20      	cmp	r3, #32
 800fa48:	d903      	bls.n	800fa52 <get_ldnumber+0x34>
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800fa50:	d1f4      	bne.n	800fa3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	2b3a      	cmp	r3, #58	@ 0x3a
 800fa58:	d11c      	bne.n	800fa94 <get_ldnumber+0x76>
			tp = *path;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	60fa      	str	r2, [r7, #12]
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	3b30      	subs	r3, #48	@ 0x30
 800fa6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2b09      	cmp	r3, #9
 800fa70:	d80e      	bhi.n	800fa90 <get_ldnumber+0x72>
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d10a      	bne.n	800fa90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d107      	bne.n	800fa90 <get_ldnumber+0x72>
					vol = (int)i;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	3301      	adds	r3, #1
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	e002      	b.n	800fa9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa94:	2300      	movs	r3, #0
 800fa96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa98:	693b      	ldr	r3, [r7, #16]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	371c      	adds	r7, #28
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
	...

0800faa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	70da      	strb	r2, [r3, #3]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f04f 32ff 	mov.w	r2, #4294967295
 800fabe:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fac0:	6839      	ldr	r1, [r7, #0]
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff f8dc 	bl	800ec80 <move_window>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <check_fs+0x2a>
 800face:	2304      	movs	r3, #4
 800fad0:	e038      	b.n	800fb44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	3334      	adds	r3, #52	@ 0x34
 800fad6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fe fdee 	bl	800e6bc <ld_word>
 800fae0:	4603      	mov	r3, r0
 800fae2:	461a      	mov	r2, r3
 800fae4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fae8:	429a      	cmp	r2, r3
 800faea:	d001      	beq.n	800faf0 <check_fs+0x48>
 800faec:	2303      	movs	r3, #3
 800faee:	e029      	b.n	800fb44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800faf6:	2be9      	cmp	r3, #233	@ 0xe9
 800faf8:	d009      	beq.n	800fb0e <check_fs+0x66>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fb00:	2beb      	cmp	r3, #235	@ 0xeb
 800fb02:	d11e      	bne.n	800fb42 <check_fs+0x9a>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800fb0a:	2b90      	cmp	r3, #144	@ 0x90
 800fb0c:	d119      	bne.n	800fb42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3334      	adds	r3, #52	@ 0x34
 800fb12:	3336      	adds	r3, #54	@ 0x36
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fe fdea 	bl	800e6ee <ld_dword>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fb20:	4a0a      	ldr	r2, [pc, #40]	@ (800fb4c <check_fs+0xa4>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d101      	bne.n	800fb2a <check_fs+0x82>
 800fb26:	2300      	movs	r3, #0
 800fb28:	e00c      	b.n	800fb44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3334      	adds	r3, #52	@ 0x34
 800fb2e:	3352      	adds	r3, #82	@ 0x52
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fe fddc 	bl	800e6ee <ld_dword>
 800fb36:	4603      	mov	r3, r0
 800fb38:	4a05      	ldr	r2, [pc, #20]	@ (800fb50 <check_fs+0xa8>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d101      	bne.n	800fb42 <check_fs+0x9a>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e000      	b.n	800fb44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fb42:	2302      	movs	r3, #2
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	00544146 	.word	0x00544146
 800fb50:	33544146 	.word	0x33544146

0800fb54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b096      	sub	sp, #88	@ 0x58
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	4613      	mov	r3, r2
 800fb60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2200      	movs	r2, #0
 800fb66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f7ff ff58 	bl	800fa1e <get_ldnumber>
 800fb6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	da01      	bge.n	800fb7a <find_volume+0x26>
 800fb76:	230b      	movs	r3, #11
 800fb78:	e235      	b.n	800ffe6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb7a:	4aa5      	ldr	r2, [pc, #660]	@ (800fe10 <find_volume+0x2bc>)
 800fb7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d101      	bne.n	800fb8e <find_volume+0x3a>
 800fb8a:	230c      	movs	r3, #12
 800fb8c:	e22b      	b.n	800ffe6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800fb8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb90:	f7fe fe95 	bl	800e8be <lock_fs>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <find_volume+0x4a>
 800fb9a:	230f      	movs	r3, #15
 800fb9c:	e223      	b.n	800ffe6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fba2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fba4:	79fb      	ldrb	r3, [r7, #7]
 800fba6:	f023 0301 	bic.w	r3, r3, #1
 800fbaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d01a      	beq.n	800fbea <find_volume+0x96>
		stat = disk_status(fs->drv);
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb6:	785b      	ldrb	r3, [r3, #1]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fe fce1 	bl	800e580 <disk_status>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fbc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbc8:	f003 0301 	and.w	r3, r3, #1
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10c      	bne.n	800fbea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d007      	beq.n	800fbe6 <find_volume+0x92>
 800fbd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbda:	f003 0304 	and.w	r3, r3, #4
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800fbe2:	230a      	movs	r3, #10
 800fbe4:	e1ff      	b.n	800ffe6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e1fd      	b.n	800ffe6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbec:	2200      	movs	r2, #0
 800fbee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfa:	785b      	ldrb	r3, [r3, #1]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe fcd9 	bl	800e5b4 <disk_initialize>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc14:	2303      	movs	r3, #3
 800fc16:	e1e6      	b.n	800ffe6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc18:	79fb      	ldrb	r3, [r7, #7]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d007      	beq.n	800fc2e <find_volume+0xda>
 800fc1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc22:	f003 0304 	and.w	r3, r3, #4
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800fc2a:	230a      	movs	r3, #10
 800fc2c:	e1db      	b.n	800ffe6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fc36:	f7ff ff37 	bl	800faa8 <check_fs>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d149      	bne.n	800fcdc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc48:	2300      	movs	r3, #0
 800fc4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc4c:	e01e      	b.n	800fc8c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc56:	011b      	lsls	r3, r3, #4
 800fc58:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fc5c:	4413      	add	r3, r2
 800fc5e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc62:	3304      	adds	r3, #4
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d006      	beq.n	800fc78 <find_volume+0x124>
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fd3d 	bl	800e6ee <ld_dword>
 800fc74:	4602      	mov	r2, r0
 800fc76:	e000      	b.n	800fc7a <find_volume+0x126>
 800fc78:	2200      	movs	r2, #0
 800fc7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	3358      	adds	r3, #88	@ 0x58
 800fc80:	443b      	add	r3, r7
 800fc82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc88:	3301      	adds	r3, #1
 800fc8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d9dd      	bls.n	800fc4e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc92:	2300      	movs	r3, #0
 800fc94:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fc96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d002      	beq.n	800fca2 <find_volume+0x14e>
 800fc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	3358      	adds	r3, #88	@ 0x58
 800fca8:	443b      	add	r3, r7
 800fcaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fcae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fcb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d005      	beq.n	800fcc2 <find_volume+0x16e>
 800fcb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fcb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fcba:	f7ff fef5 	bl	800faa8 <check_fs>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	e000      	b.n	800fcc4 <find_volume+0x170>
 800fcc2:	2303      	movs	r3, #3
 800fcc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fcc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d905      	bls.n	800fcdc <find_volume+0x188>
 800fcd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fcd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcd8:	2b03      	cmp	r3, #3
 800fcda:	d9e2      	bls.n	800fca2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fcdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	d101      	bne.n	800fce8 <find_volume+0x194>
 800fce4:	2301      	movs	r3, #1
 800fce6:	e17e      	b.n	800ffe6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fce8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d901      	bls.n	800fcf4 <find_volume+0x1a0>
 800fcf0:	230d      	movs	r3, #13
 800fcf2:	e178      	b.n	800ffe6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	3334      	adds	r3, #52	@ 0x34
 800fcf8:	330b      	adds	r3, #11
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe fcde 	bl	800e6bc <ld_word>
 800fd00:	4603      	mov	r3, r0
 800fd02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd06:	d001      	beq.n	800fd0c <find_volume+0x1b8>
 800fd08:	230d      	movs	r3, #13
 800fd0a:	e16c      	b.n	800ffe6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd0e:	3334      	adds	r3, #52	@ 0x34
 800fd10:	3316      	adds	r3, #22
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe fcd2 	bl	800e6bc <ld_word>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <find_volume+0x1dc>
 800fd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd24:	3334      	adds	r3, #52	@ 0x34
 800fd26:	3324      	adds	r3, #36	@ 0x24
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fce0 	bl	800e6ee <ld_dword>
 800fd2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd34:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd38:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd42:	789b      	ldrb	r3, [r3, #2]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d005      	beq.n	800fd54 <find_volume+0x200>
 800fd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd4a:	789b      	ldrb	r3, [r3, #2]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d001      	beq.n	800fd54 <find_volume+0x200>
 800fd50:	230d      	movs	r3, #13
 800fd52:	e148      	b.n	800ffe6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd56:	789b      	ldrb	r3, [r3, #2]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd5c:	fb02 f303 	mul.w	r3, r2, r3
 800fd60:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd68:	461a      	mov	r2, r3
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd70:	895b      	ldrh	r3, [r3, #10]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d008      	beq.n	800fd88 <find_volume+0x234>
 800fd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd78:	895b      	ldrh	r3, [r3, #10]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	895b      	ldrh	r3, [r3, #10]
 800fd80:	3b01      	subs	r3, #1
 800fd82:	4013      	ands	r3, r2
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d001      	beq.n	800fd8c <find_volume+0x238>
 800fd88:	230d      	movs	r3, #13
 800fd8a:	e12c      	b.n	800ffe6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8e:	3334      	adds	r3, #52	@ 0x34
 800fd90:	3311      	adds	r3, #17
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe fc92 	bl	800e6bc <ld_word>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda2:	891b      	ldrh	r3, [r3, #8]
 800fda4:	f003 030f 	and.w	r3, r3, #15
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <find_volume+0x25e>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e119      	b.n	800ffe6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb4:	3334      	adds	r3, #52	@ 0x34
 800fdb6:	3313      	adds	r3, #19
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fe fc7f 	bl	800e6bc <ld_word>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fdc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d106      	bne.n	800fdd6 <find_volume+0x282>
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdca:	3334      	adds	r3, #52	@ 0x34
 800fdcc:	3320      	adds	r3, #32
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fe fc8d 	bl	800e6ee <ld_dword>
 800fdd4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd8:	3334      	adds	r3, #52	@ 0x34
 800fdda:	330e      	adds	r3, #14
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fc6d 	bl	800e6bc <ld_word>
 800fde2:	4603      	mov	r3, r0
 800fde4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fde6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <find_volume+0x29c>
 800fdec:	230d      	movs	r3, #13
 800fdee:	e0fa      	b.n	800ffe6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fdf0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fdf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdf4:	4413      	add	r3, r2
 800fdf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fdf8:	8912      	ldrh	r2, [r2, #8]
 800fdfa:	0912      	lsrs	r2, r2, #4
 800fdfc:	b292      	uxth	r2, r2
 800fdfe:	4413      	add	r3, r2
 800fe00:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d204      	bcs.n	800fe14 <find_volume+0x2c0>
 800fe0a:	230d      	movs	r3, #13
 800fe0c:	e0eb      	b.n	800ffe6 <find_volume+0x492>
 800fe0e:	bf00      	nop
 800fe10:	2000188c 	.word	0x2000188c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fe14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe1c:	8952      	ldrh	r2, [r2, #10]
 800fe1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe22:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fe24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d101      	bne.n	800fe2e <find_volume+0x2da>
 800fe2a:	230d      	movs	r3, #13
 800fe2c:	e0db      	b.n	800ffe6 <find_volume+0x492>
		fmt = FS_FAT32;
 800fe2e:	2303      	movs	r3, #3
 800fe30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe36:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d802      	bhi.n	800fe44 <find_volume+0x2f0>
 800fe3e:	2302      	movs	r3, #2
 800fe40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe46:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d802      	bhi.n	800fe54 <find_volume+0x300>
 800fe4e:	2301      	movs	r3, #1
 800fe50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe56:	1c9a      	adds	r2, r3, #2
 800fe58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe60:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fe64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe66:	441a      	add	r2, r3
 800fe68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fe6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe70:	441a      	add	r2, r3
 800fe72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe74:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800fe76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d11e      	bne.n	800febc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe80:	3334      	adds	r3, #52	@ 0x34
 800fe82:	332a      	adds	r3, #42	@ 0x2a
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe fc19 	bl	800e6bc <ld_word>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d001      	beq.n	800fe94 <find_volume+0x340>
 800fe90:	230d      	movs	r3, #13
 800fe92:	e0a8      	b.n	800ffe6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe96:	891b      	ldrh	r3, [r3, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d001      	beq.n	800fea0 <find_volume+0x34c>
 800fe9c:	230d      	movs	r3, #13
 800fe9e:	e0a2      	b.n	800ffe6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea2:	3334      	adds	r3, #52	@ 0x34
 800fea4:	332c      	adds	r3, #44	@ 0x2c
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fe fc21 	bl	800e6ee <ld_dword>
 800feac:	4602      	mov	r2, r0
 800feae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800feb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb4:	699b      	ldr	r3, [r3, #24]
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800feba:	e01f      	b.n	800fefc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800febc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d101      	bne.n	800fec8 <find_volume+0x374>
 800fec4:	230d      	movs	r3, #13
 800fec6:	e08e      	b.n	800ffe6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fece:	441a      	add	r2, r3
 800fed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fed4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d103      	bne.n	800fee4 <find_volume+0x390>
 800fedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	005b      	lsls	r3, r3, #1
 800fee2:	e00a      	b.n	800fefa <find_volume+0x3a6>
 800fee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fee6:	699a      	ldr	r2, [r3, #24]
 800fee8:	4613      	mov	r3, r2
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	4413      	add	r3, r2
 800feee:	085a      	lsrs	r2, r3, #1
 800fef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef2:	699b      	ldr	r3, [r3, #24]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fefa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefe:	69da      	ldr	r2, [r3, #28]
 800ff00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff02:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ff06:	0a5b      	lsrs	r3, r3, #9
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d201      	bcs.n	800ff10 <find_volume+0x3bc>
 800ff0c:	230d      	movs	r3, #13
 800ff0e:	e06a      	b.n	800ffe6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ff10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff12:	f04f 32ff 	mov.w	r2, #4294967295
 800ff16:	615a      	str	r2, [r3, #20]
 800ff18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1a:	695a      	ldr	r2, [r3, #20]
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ff20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff22:	2280      	movs	r2, #128	@ 0x80
 800ff24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d149      	bne.n	800ffc2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff30:	3334      	adds	r3, #52	@ 0x34
 800ff32:	3330      	adds	r3, #48	@ 0x30
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fbc1 	bl	800e6bc <ld_word>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d140      	bne.n	800ffc2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff42:	3301      	adds	r3, #1
 800ff44:	4619      	mov	r1, r3
 800ff46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ff48:	f7fe fe9a 	bl	800ec80 <move_window>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d137      	bne.n	800ffc2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800ff52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff54:	2200      	movs	r2, #0
 800ff56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5a:	3334      	adds	r3, #52	@ 0x34
 800ff5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fe fbab 	bl	800e6bc <ld_word>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d127      	bne.n	800ffc2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff74:	3334      	adds	r3, #52	@ 0x34
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fbb9 	bl	800e6ee <ld_dword>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	4a1c      	ldr	r2, [pc, #112]	@ (800fff0 <find_volume+0x49c>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d11e      	bne.n	800ffc2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff86:	3334      	adds	r3, #52	@ 0x34
 800ff88:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fe fbae 	bl	800e6ee <ld_dword>
 800ff92:	4603      	mov	r3, r0
 800ff94:	4a17      	ldr	r2, [pc, #92]	@ (800fff4 <find_volume+0x4a0>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d113      	bne.n	800ffc2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff9c:	3334      	adds	r3, #52	@ 0x34
 800ff9e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fba3 	bl	800e6ee <ld_dword>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ffae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb0:	3334      	adds	r3, #52	@ 0x34
 800ffb2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fb99 	bl	800e6ee <ld_dword>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ffc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ffca:	4b0b      	ldr	r3, [pc, #44]	@ (800fff8 <find_volume+0x4a4>)
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	4b09      	ldr	r3, [pc, #36]	@ (800fff8 <find_volume+0x4a4>)
 800ffd4:	801a      	strh	r2, [r3, #0]
 800ffd6:	4b08      	ldr	r3, [pc, #32]	@ (800fff8 <find_volume+0x4a4>)
 800ffd8:	881a      	ldrh	r2, [r3, #0]
 800ffda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffdc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ffde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ffe0:	f7fe fde6 	bl	800ebb0 <clear_lock>
#endif
	return FR_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3758      	adds	r7, #88	@ 0x58
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	41615252 	.word	0x41615252
 800fff4:	61417272 	.word	0x61417272
 800fff8:	20001890 	.word	0x20001890

0800fffc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010006:	2309      	movs	r3, #9
 8010008:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d02e      	beq.n	801006e <validate+0x72>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d02a      	beq.n	801006e <validate+0x72>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d025      	beq.n	801006e <validate+0x72>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	889a      	ldrh	r2, [r3, #4]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	88db      	ldrh	r3, [r3, #6]
 801002c:	429a      	cmp	r2, r3
 801002e:	d11e      	bne.n	801006e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4618      	mov	r0, r3
 8010036:	f7fe fc42 	bl	800e8be <lock_fs>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d014      	beq.n	801006a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	785b      	ldrb	r3, [r3, #1]
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe fa9a 	bl	800e580 <disk_status>
 801004c:	4603      	mov	r3, r0
 801004e:	f003 0301 	and.w	r3, r3, #1
 8010052:	2b00      	cmp	r3, #0
 8010054:	d102      	bne.n	801005c <validate+0x60>
				res = FR_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73fb      	strb	r3, [r7, #15]
 801005a:	e008      	b.n	801006e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2100      	movs	r1, #0
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fc41 	bl	800e8ea <unlock_fs>
 8010068:	e001      	b.n	801006e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801006a:	230f      	movs	r3, #15
 801006c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <validate+0x7e>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	e000      	b.n	801007c <validate+0x80>
 801007a:	2300      	movs	r3, #0
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	6013      	str	r3, [r2, #0]
	return res;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	4613      	mov	r3, r2
 8010098:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801009e:	f107 0310 	add.w	r3, r7, #16
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff fcbb 	bl	800fa1e <get_ldnumber>
 80100a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	da01      	bge.n	80100b4 <f_mount+0x28>
 80100b0:	230b      	movs	r3, #11
 80100b2:	e048      	b.n	8010146 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80100b4:	4a26      	ldr	r2, [pc, #152]	@ (8010150 <f_mount+0xc4>)
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00f      	beq.n	80100e4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80100c4:	69b8      	ldr	r0, [r7, #24]
 80100c6:	f7fe fd73 	bl	800ebb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f001 f837 	bl	8011142 <ff_del_syncobj>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <f_mount+0x52>
 80100da:	2302      	movs	r3, #2
 80100dc:	e033      	b.n	8010146 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	2200      	movs	r2, #0
 80100e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00f      	beq.n	801010a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	b2da      	uxtb	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	330c      	adds	r3, #12
 80100f8:	4619      	mov	r1, r3
 80100fa:	4610      	mov	r0, r2
 80100fc:	f001 f803 	bl	8011106 <ff_cre_syncobj>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d101      	bne.n	801010a <f_mount+0x7e>
 8010106:	2302      	movs	r3, #2
 8010108:	e01d      	b.n	8010146 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	4910      	ldr	r1, [pc, #64]	@ (8010150 <f_mount+0xc4>)
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <f_mount+0x94>
 801011a:	79fb      	ldrb	r3, [r7, #7]
 801011c:	2b01      	cmp	r3, #1
 801011e:	d001      	beq.n	8010124 <f_mount+0x98>
 8010120:	2300      	movs	r3, #0
 8010122:	e010      	b.n	8010146 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010124:	f107 010c 	add.w	r1, r7, #12
 8010128:	f107 0308 	add.w	r3, r7, #8
 801012c:	2200      	movs	r2, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff fd10 	bl	800fb54 <find_volume>
 8010134:	4603      	mov	r3, r0
 8010136:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	7dfa      	ldrb	r2, [r7, #23]
 801013c:	4611      	mov	r1, r2
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fbd3 	bl	800e8ea <unlock_fs>
 8010144:	7dfb      	ldrb	r3, [r7, #23]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3720      	adds	r7, #32
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	2000188c 	.word	0x2000188c

08010154 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b098      	sub	sp, #96	@ 0x60
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	4613      	mov	r3, r2
 8010160:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <f_open+0x18>
 8010168:	2309      	movs	r3, #9
 801016a:	e1b0      	b.n	80104ce <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801016c:	79fb      	ldrb	r3, [r7, #7]
 801016e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010172:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010174:	79fa      	ldrb	r2, [r7, #7]
 8010176:	f107 0110 	add.w	r1, r7, #16
 801017a:	f107 0308 	add.w	r3, r7, #8
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff fce8 	bl	800fb54 <find_volume>
 8010184:	4603      	mov	r3, r0
 8010186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801018a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801018e:	2b00      	cmp	r3, #0
 8010190:	f040 818d 	bne.w	80104ae <f_open+0x35a>
		dj.obj.fs = fs;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	f107 0314 	add.w	r3, r7, #20
 801019e:	4611      	mov	r1, r2
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff fbcb 	bl	800f93c <follow_path>
 80101a6:	4603      	mov	r3, r0
 80101a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80101ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d118      	bne.n	80101e6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80101b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80101b8:	b25b      	sxtb	r3, r3
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	da03      	bge.n	80101c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80101be:	2306      	movs	r3, #6
 80101c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80101c4:	e00f      	b.n	80101e6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	bf8c      	ite	hi
 80101cc:	2301      	movhi	r3, #1
 80101ce:	2300      	movls	r3, #0
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	461a      	mov	r2, r3
 80101d4:	f107 0314 	add.w	r3, r7, #20
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fba0 	bl	800e920 <chk_lock>
 80101e0:	4603      	mov	r3, r0
 80101e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80101e6:	79fb      	ldrb	r3, [r7, #7]
 80101e8:	f003 031c 	and.w	r3, r3, #28
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d07f      	beq.n	80102f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80101f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d017      	beq.n	8010228 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80101f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101fc:	2b04      	cmp	r3, #4
 80101fe:	d10e      	bne.n	801021e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010200:	f7fe fbea 	bl	800e9d8 <enq_lock>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d006      	beq.n	8010218 <f_open+0xc4>
 801020a:	f107 0314 	add.w	r3, r7, #20
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff face 	bl	800f7b0 <dir_register>
 8010214:	4603      	mov	r3, r0
 8010216:	e000      	b.n	801021a <f_open+0xc6>
 8010218:	2312      	movs	r3, #18
 801021a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801021e:	79fb      	ldrb	r3, [r7, #7]
 8010220:	f043 0308 	orr.w	r3, r3, #8
 8010224:	71fb      	strb	r3, [r7, #7]
 8010226:	e010      	b.n	801024a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010228:	7ebb      	ldrb	r3, [r7, #26]
 801022a:	f003 0311 	and.w	r3, r3, #17
 801022e:	2b00      	cmp	r3, #0
 8010230:	d003      	beq.n	801023a <f_open+0xe6>
					res = FR_DENIED;
 8010232:	2307      	movs	r3, #7
 8010234:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010238:	e007      	b.n	801024a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801023a:	79fb      	ldrb	r3, [r7, #7]
 801023c:	f003 0304 	and.w	r3, r3, #4
 8010240:	2b00      	cmp	r3, #0
 8010242:	d002      	beq.n	801024a <f_open+0xf6>
 8010244:	2308      	movs	r3, #8
 8010246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801024a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801024e:	2b00      	cmp	r3, #0
 8010250:	d168      	bne.n	8010324 <f_open+0x1d0>
 8010252:	79fb      	ldrb	r3, [r7, #7]
 8010254:	f003 0308 	and.w	r3, r3, #8
 8010258:	2b00      	cmp	r3, #0
 801025a:	d063      	beq.n	8010324 <f_open+0x1d0>
				dw = GET_FATTIME();
 801025c:	f7fe f932 	bl	800e4c4 <get_fattime>
 8010260:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010264:	330e      	adds	r3, #14
 8010266:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fa7e 	bl	800e76a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801026e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010270:	3316      	adds	r3, #22
 8010272:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010274:	4618      	mov	r0, r3
 8010276:	f7fe fa78 	bl	800e76a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801027a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801027c:	330b      	adds	r3, #11
 801027e:	2220      	movs	r2, #32
 8010280:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff f9fd 	bl	800f688 <ld_clust>
 801028e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010294:	2200      	movs	r2, #0
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fa15 	bl	800f6c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801029c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801029e:	331c      	adds	r3, #28
 80102a0:	2100      	movs	r1, #0
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fa61 	bl	800e76a <st_dword>
					fs->wflag = 1;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	2201      	movs	r2, #1
 80102ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80102ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d037      	beq.n	8010324 <f_open+0x1d0>
						dw = fs->winsect;
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80102ba:	f107 0314 	add.w	r3, r7, #20
 80102be:	2200      	movs	r2, #0
 80102c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe ff28 	bl	800f118 <remove_chain>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80102ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d126      	bne.n	8010324 <f_open+0x1d0>
							res = move_window(fs, dw);
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe fcd0 	bl	800ec80 <move_window>
 80102e0:	4603      	mov	r3, r0
 80102e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80102ea:	3a01      	subs	r2, #1
 80102ec:	611a      	str	r2, [r3, #16]
 80102ee:	e019      	b.n	8010324 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80102f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d115      	bne.n	8010324 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80102f8:	7ebb      	ldrb	r3, [r7, #26]
 80102fa:	f003 0310 	and.w	r3, r3, #16
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d003      	beq.n	801030a <f_open+0x1b6>
					res = FR_NO_FILE;
 8010302:	2304      	movs	r3, #4
 8010304:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010308:	e00c      	b.n	8010324 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	f003 0302 	and.w	r3, r3, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	d007      	beq.n	8010324 <f_open+0x1d0>
 8010314:	7ebb      	ldrb	r3, [r7, #26]
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	2b00      	cmp	r3, #0
 801031c:	d002      	beq.n	8010324 <f_open+0x1d0>
						res = FR_DENIED;
 801031e:	2307      	movs	r3, #7
 8010320:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010328:	2b00      	cmp	r3, #0
 801032a:	d126      	bne.n	801037a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801032c:	79fb      	ldrb	r3, [r7, #7]
 801032e:	f003 0308 	and.w	r3, r3, #8
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801033c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	2b01      	cmp	r3, #1
 8010350:	bf8c      	ite	hi
 8010352:	2301      	movhi	r3, #1
 8010354:	2300      	movls	r3, #0
 8010356:	b2db      	uxtb	r3, r3
 8010358:	461a      	mov	r2, r3
 801035a:	f107 0314 	add.w	r3, r7, #20
 801035e:	4611      	mov	r1, r2
 8010360:	4618      	mov	r0, r3
 8010362:	f7fe fb5b 	bl	800ea1c <inc_lock>
 8010366:	4602      	mov	r2, r0
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d102      	bne.n	801037a <f_open+0x226>
 8010374:	2302      	movs	r3, #2
 8010376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801037a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 8095 	bne.w	80104ae <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010388:	4611      	mov	r1, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7ff f97c 	bl	800f688 <ld_clust>
 8010390:	4602      	mov	r2, r0
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010398:	331c      	adds	r3, #28
 801039a:	4618      	mov	r0, r3
 801039c:	f7fe f9a7 	bl	800e6ee <ld_dword>
 80103a0:	4602      	mov	r2, r0
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80103ac:	693a      	ldr	r2, [r7, #16]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	88da      	ldrh	r2, [r3, #6]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	79fa      	ldrb	r2, [r7, #7]
 80103be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3330      	adds	r3, #48	@ 0x30
 80103d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80103da:	2100      	movs	r1, #0
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fe fa11 	bl	800e804 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80103e2:	79fb      	ldrb	r3, [r7, #7]
 80103e4:	f003 0320 	and.w	r3, r3, #32
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d060      	beq.n	80104ae <f_open+0x35a>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d05c      	beq.n	80104ae <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	68da      	ldr	r2, [r3, #12]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	025b      	lsls	r3, r3, #9
 8010402:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010410:	e016      	b.n	8010440 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fced 	bl	800edf6 <get_fat>
 801041c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801041e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010420:	2b01      	cmp	r3, #1
 8010422:	d802      	bhi.n	801042a <f_open+0x2d6>
 8010424:	2302      	movs	r3, #2
 8010426:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801042a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801042c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010430:	d102      	bne.n	8010438 <f_open+0x2e4>
 8010432:	2301      	movs	r3, #1
 8010434:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801043a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010440:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010444:	2b00      	cmp	r3, #0
 8010446:	d103      	bne.n	8010450 <f_open+0x2fc>
 8010448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801044a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801044c:	429a      	cmp	r2, r3
 801044e:	d8e0      	bhi.n	8010412 <f_open+0x2be>
				}
				fp->clust = clst;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010454:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010456:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801045a:	2b00      	cmp	r3, #0
 801045c:	d127      	bne.n	80104ae <f_open+0x35a>
 801045e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010464:	2b00      	cmp	r3, #0
 8010466:	d022      	beq.n	80104ae <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801046c:	4618      	mov	r0, r3
 801046e:	f7fe fca3 	bl	800edb8 <clust2sect>
 8010472:	6478      	str	r0, [r7, #68]	@ 0x44
 8010474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010476:	2b00      	cmp	r3, #0
 8010478:	d103      	bne.n	8010482 <f_open+0x32e>
						res = FR_INT_ERR;
 801047a:	2302      	movs	r3, #2
 801047c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010480:	e015      	b.n	80104ae <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010484:	0a5a      	lsrs	r2, r3, #9
 8010486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010488:	441a      	add	r2, r3
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	7858      	ldrb	r0, [r3, #1]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	6a1a      	ldr	r2, [r3, #32]
 801049c:	2301      	movs	r3, #1
 801049e:	f7fe f8af 	bl	800e600 <disk_read>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <f_open+0x35a>
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80104ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d002      	beq.n	80104bc <f_open+0x368>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fe fa10 	bl	800e8ea <unlock_fs>
 80104ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3760      	adds	r7, #96	@ 0x60
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b08c      	sub	sp, #48	@ 0x30
 80104da:	af00      	add	r7, sp, #0
 80104dc:	60f8      	str	r0, [r7, #12]
 80104de:	60b9      	str	r1, [r7, #8]
 80104e0:	607a      	str	r2, [r7, #4]
 80104e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f107 0210 	add.w	r2, r7, #16
 80104f4:	4611      	mov	r1, r2
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fd80 	bl	800fffc <validate>
 80104fc:	4603      	mov	r3, r0
 80104fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010506:	2b00      	cmp	r3, #0
 8010508:	d107      	bne.n	801051a <f_write+0x44>
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	7d5b      	ldrb	r3, [r3, #21]
 801050e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010516:	2b00      	cmp	r3, #0
 8010518:	d009      	beq.n	801052e <f_write+0x58>
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010520:	4611      	mov	r1, r2
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe f9e1 	bl	800e8ea <unlock_fs>
 8010528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801052c:	e173      	b.n	8010816 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	7d1b      	ldrb	r3, [r3, #20]
 8010532:	f003 0302 	and.w	r3, r3, #2
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <f_write+0x72>
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	2107      	movs	r1, #7
 801053e:	4618      	mov	r0, r3
 8010540:	f7fe f9d3 	bl	800e8ea <unlock_fs>
 8010544:	2307      	movs	r3, #7
 8010546:	e166      	b.n	8010816 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	699a      	ldr	r2, [r3, #24]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	441a      	add	r2, r3
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	699b      	ldr	r3, [r3, #24]
 8010554:	429a      	cmp	r2, r3
 8010556:	f080 814b 	bcs.w	80107f0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	699b      	ldr	r3, [r3, #24]
 801055e:	43db      	mvns	r3, r3
 8010560:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010562:	e145      	b.n	80107f0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	699b      	ldr	r3, [r3, #24]
 8010568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801056c:	2b00      	cmp	r3, #0
 801056e:	f040 8101 	bne.w	8010774 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	0a5b      	lsrs	r3, r3, #9
 8010578:	693a      	ldr	r2, [r7, #16]
 801057a:	8952      	ldrh	r2, [r2, #10]
 801057c:	3a01      	subs	r2, #1
 801057e:	4013      	ands	r3, r2
 8010580:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d14d      	bne.n	8010624 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	699b      	ldr	r3, [r3, #24]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d10c      	bne.n	80105aa <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010598:	2b00      	cmp	r3, #0
 801059a:	d11a      	bne.n	80105d2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2100      	movs	r1, #0
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fe1e 	bl	800f1e2 <create_chain>
 80105a6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80105a8:	e013      	b.n	80105d2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d007      	beq.n	80105c2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	4619      	mov	r1, r3
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f7fe feaa 	bl	800f312 <clmt_clust>
 80105be:	62b8      	str	r0, [r7, #40]	@ 0x28
 80105c0:	e007      	b.n	80105d2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	4619      	mov	r1, r3
 80105ca:	4610      	mov	r0, r2
 80105cc:	f7fe fe09 	bl	800f1e2 <create_chain>
 80105d0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80105d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 8110 	beq.w	80107fa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80105da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d109      	bne.n	80105f4 <f_write+0x11e>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2202      	movs	r2, #2
 80105e4:	755a      	strb	r2, [r3, #21]
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	2102      	movs	r1, #2
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fe f97d 	bl	800e8ea <unlock_fs>
 80105f0:	2302      	movs	r3, #2
 80105f2:	e110      	b.n	8010816 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105fa:	d109      	bne.n	8010610 <f_write+0x13a>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2201      	movs	r2, #1
 8010600:	755a      	strb	r2, [r3, #21]
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	2101      	movs	r1, #1
 8010606:	4618      	mov	r0, r3
 8010608:	f7fe f96f 	bl	800e8ea <unlock_fs>
 801060c:	2301      	movs	r3, #1
 801060e:	e102      	b.n	8010816 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010614:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d102      	bne.n	8010624 <f_write+0x14e>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010622:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	7d1b      	ldrb	r3, [r3, #20]
 8010628:	b25b      	sxtb	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	da1d      	bge.n	801066a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	7858      	ldrb	r0, [r3, #1]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6a1a      	ldr	r2, [r3, #32]
 801063c:	2301      	movs	r3, #1
 801063e:	f7fd ffff 	bl	800e640 <disk_write>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d009      	beq.n	801065c <f_write+0x186>
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2201      	movs	r2, #1
 801064c:	755a      	strb	r2, [r3, #21]
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	2101      	movs	r1, #1
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe f949 	bl	800e8ea <unlock_fs>
 8010658:	2301      	movs	r3, #1
 801065a:	e0dc      	b.n	8010816 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	7d1b      	ldrb	r3, [r3, #20]
 8010660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010664:	b2da      	uxtb	r2, r3
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801066a:	693a      	ldr	r2, [r7, #16]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	69db      	ldr	r3, [r3, #28]
 8010670:	4619      	mov	r1, r3
 8010672:	4610      	mov	r0, r2
 8010674:	f7fe fba0 	bl	800edb8 <clust2sect>
 8010678:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d109      	bne.n	8010694 <f_write+0x1be>
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2202      	movs	r2, #2
 8010684:	755a      	strb	r2, [r3, #21]
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2102      	movs	r1, #2
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe f92d 	bl	800e8ea <unlock_fs>
 8010690:	2302      	movs	r3, #2
 8010692:	e0c0      	b.n	8010816 <f_write+0x340>
			sect += csect;
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	4413      	add	r3, r2
 801069a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	0a5b      	lsrs	r3, r3, #9
 80106a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80106a2:	6a3b      	ldr	r3, [r7, #32]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d041      	beq.n	801072c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80106a8:	69ba      	ldr	r2, [r7, #24]
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	4413      	add	r3, r2
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	8952      	ldrh	r2, [r2, #10]
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d905      	bls.n	80106c2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	895b      	ldrh	r3, [r3, #10]
 80106ba:	461a      	mov	r2, r3
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	7858      	ldrb	r0, [r3, #1]
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	69f9      	ldr	r1, [r7, #28]
 80106cc:	f7fd ffb8 	bl	800e640 <disk_write>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d009      	beq.n	80106ea <f_write+0x214>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2201      	movs	r2, #1
 80106da:	755a      	strb	r2, [r3, #21]
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	2101      	movs	r1, #1
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fe f902 	bl	800e8ea <unlock_fs>
 80106e6:	2301      	movs	r3, #1
 80106e8:	e095      	b.n	8010816 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	6a1a      	ldr	r2, [r3, #32]
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	6a3a      	ldr	r2, [r7, #32]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d915      	bls.n	8010724 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	6a1a      	ldr	r2, [r3, #32]
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	025b      	lsls	r3, r3, #9
 8010708:	69fa      	ldr	r2, [r7, #28]
 801070a:	4413      	add	r3, r2
 801070c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010710:	4619      	mov	r1, r3
 8010712:	f7fe f856 	bl	800e7c2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	7d1b      	ldrb	r3, [r3, #20]
 801071a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801071e:	b2da      	uxtb	r2, r3
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	025b      	lsls	r3, r3, #9
 8010728:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801072a:	e044      	b.n	80107b6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6a1b      	ldr	r3, [r3, #32]
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	429a      	cmp	r2, r3
 8010734:	d01b      	beq.n	801076e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	699a      	ldr	r2, [r3, #24]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801073e:	429a      	cmp	r2, r3
 8010740:	d215      	bcs.n	801076e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	7858      	ldrb	r0, [r3, #1]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801074c:	2301      	movs	r3, #1
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	f7fd ff56 	bl	800e600 <disk_read>
 8010754:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010756:	2b00      	cmp	r3, #0
 8010758:	d009      	beq.n	801076e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	755a      	strb	r2, [r3, #21]
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	2101      	movs	r1, #1
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe f8c0 	bl	800e8ea <unlock_fs>
 801076a:	2301      	movs	r3, #1
 801076c:	e053      	b.n	8010816 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	697a      	ldr	r2, [r7, #20]
 8010772:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801077c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010780:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	429a      	cmp	r2, r3
 8010788:	d901      	bls.n	801078e <f_write+0x2b8>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801079c:	4413      	add	r3, r2
 801079e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107a0:	69f9      	ldr	r1, [r7, #28]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fe f80d 	bl	800e7c2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	7d1b      	ldrb	r3, [r3, #20]
 80107ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80107b0:	b2da      	uxtb	r2, r3
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80107b6:	69fa      	ldr	r2, [r7, #28]
 80107b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ba:	4413      	add	r3, r2
 80107bc:	61fb      	str	r3, [r7, #28]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	699a      	ldr	r2, [r3, #24]
 80107c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c4:	441a      	add	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	619a      	str	r2, [r3, #24]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	68da      	ldr	r2, [r3, #12]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	699b      	ldr	r3, [r3, #24]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	bf38      	it	cc
 80107d6:	461a      	movcc	r2, r3
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	60da      	str	r2, [r3, #12]
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e2:	441a      	add	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ec:	1ad3      	subs	r3, r2, r3
 80107ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f47f aeb6 	bne.w	8010564 <f_write+0x8e>
 80107f8:	e000      	b.n	80107fc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80107fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	7d1b      	ldrb	r3, [r3, #20]
 8010800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010804:	b2da      	uxtb	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	2100      	movs	r1, #0
 801080e:	4618      	mov	r0, r3
 8010810:	f7fe f86b 	bl	800e8ea <unlock_fs>
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3730      	adds	r7, #48	@ 0x30
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b086      	sub	sp, #24
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f107 0208 	add.w	r2, r7, #8
 801082c:	4611      	mov	r1, r2
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff fbe4 	bl	800fffc <validate>
 8010834:	4603      	mov	r3, r0
 8010836:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010838:	7dfb      	ldrb	r3, [r7, #23]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d16d      	bne.n	801091a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	7d1b      	ldrb	r3, [r3, #20]
 8010842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010846:	2b00      	cmp	r3, #0
 8010848:	d067      	beq.n	801091a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7d1b      	ldrb	r3, [r3, #20]
 801084e:	b25b      	sxtb	r3, r3
 8010850:	2b00      	cmp	r3, #0
 8010852:	da1a      	bge.n	801088a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	7858      	ldrb	r0, [r3, #1]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a1a      	ldr	r2, [r3, #32]
 8010862:	2301      	movs	r3, #1
 8010864:	f7fd feec 	bl	800e640 <disk_write>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d006      	beq.n	801087c <f_sync+0x5e>
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2101      	movs	r1, #1
 8010872:	4618      	mov	r0, r3
 8010874:	f7fe f839 	bl	800e8ea <unlock_fs>
 8010878:	2301      	movs	r3, #1
 801087a:	e055      	b.n	8010928 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	7d1b      	ldrb	r3, [r3, #20]
 8010880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010884:	b2da      	uxtb	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801088a:	f7fd fe1b 	bl	800e4c4 <get_fattime>
 801088e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010896:	4619      	mov	r1, r3
 8010898:	4610      	mov	r0, r2
 801089a:	f7fe f9f1 	bl	800ec80 <move_window>
 801089e:	4603      	mov	r3, r0
 80108a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d138      	bne.n	801091a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	330b      	adds	r3, #11
 80108b2:	781a      	ldrb	r2, [r3, #0]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	330b      	adds	r3, #11
 80108b8:	f042 0220 	orr.w	r2, r2, #32
 80108bc:	b2d2      	uxtb	r2, r2
 80108be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6818      	ldr	r0, [r3, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	461a      	mov	r2, r3
 80108ca:	68f9      	ldr	r1, [r7, #12]
 80108cc:	f7fe fefb 	bl	800f6c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f103 021c 	add.w	r2, r3, #28
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	4619      	mov	r1, r3
 80108dc:	4610      	mov	r0, r2
 80108de:	f7fd ff44 	bl	800e76a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	3316      	adds	r3, #22
 80108e6:	6939      	ldr	r1, [r7, #16]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fd ff3e 	bl	800e76a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	3312      	adds	r3, #18
 80108f2:	2100      	movs	r1, #0
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fd ff1d 	bl	800e734 <st_word>
					fs->wflag = 1;
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2201      	movs	r2, #1
 80108fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe f9ea 	bl	800ecdc <sync_fs>
 8010908:	4603      	mov	r3, r0
 801090a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7d1b      	ldrb	r3, [r3, #20]
 8010910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010914:	b2da      	uxtb	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	7dfa      	ldrb	r2, [r7, #23]
 801091e:	4611      	mov	r1, r2
 8010920:	4618      	mov	r0, r3
 8010922:	f7fd ffe2 	bl	800e8ea <unlock_fs>
 8010926:	7dfb      	ldrb	r3, [r7, #23]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7ff ff70 	bl	801081e <f_sync>
 801093e:	4603      	mov	r3, r0
 8010940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010942:	7bfb      	ldrb	r3, [r7, #15]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d11d      	bne.n	8010984 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f107 0208 	add.w	r2, r7, #8
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7ff fb53 	bl	800fffc <validate>
 8010956:	4603      	mov	r3, r0
 8010958:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801095a:	7bfb      	ldrb	r3, [r7, #15]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d111      	bne.n	8010984 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	4618      	mov	r0, r3
 8010966:	f7fe f8e7 	bl	800eb38 <dec_lock>
 801096a:	4603      	mov	r3, r0
 801096c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801096e:	7bfb      	ldrb	r3, [r7, #15]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d102      	bne.n	801097a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	2100      	movs	r1, #0
 801097e:	4618      	mov	r0, r3
 8010980:	f7fd ffb3 	bl	800e8ea <unlock_fs>
#endif
		}
	}
	return res;
 8010984:	7bfb      	ldrb	r3, [r7, #15]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b090      	sub	sp, #64	@ 0x40
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f107 0208 	add.w	r2, r7, #8
 801099e:	4611      	mov	r1, r2
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff fb2b 	bl	800fffc <validate>
 80109a6:	4603      	mov	r3, r0
 80109a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80109ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d103      	bne.n	80109bc <f_lseek+0x2e>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	7d5b      	ldrb	r3, [r3, #21]
 80109b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80109bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d009      	beq.n	80109d8 <f_lseek+0x4a>
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80109ca:	4611      	mov	r1, r2
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fd ff8c 	bl	800e8ea <unlock_fs>
 80109d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80109d6:	e229      	b.n	8010e2c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 80ea 	beq.w	8010bb6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e8:	d164      	bne.n	8010ab4 <f_lseek+0x126>
			tbl = fp->cltbl;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ee:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80109f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f2:	1d1a      	adds	r2, r3, #4
 80109f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	617b      	str	r3, [r7, #20]
 80109fa:	2302      	movs	r3, #2
 80109fc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d044      	beq.n	8010a94 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a0c:	613b      	str	r3, [r7, #16]
 8010a0e:	2300      	movs	r3, #0
 8010a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a14:	3302      	adds	r3, #2
 8010a16:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a1e:	3301      	adds	r3, #1
 8010a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fe f9e5 	bl	800edf6 <get_fat>
 8010a2c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d809      	bhi.n	8010a48 <f_lseek+0xba>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2202      	movs	r2, #2
 8010a38:	755a      	strb	r2, [r3, #21]
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2102      	movs	r1, #2
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fd ff53 	bl	800e8ea <unlock_fs>
 8010a44:	2302      	movs	r3, #2
 8010a46:	e1f1      	b.n	8010e2c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4e:	d109      	bne.n	8010a64 <f_lseek+0xd6>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	755a      	strb	r2, [r3, #21]
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	2101      	movs	r1, #1
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fd ff45 	bl	800e8ea <unlock_fs>
 8010a60:	2301      	movs	r3, #1
 8010a62:	e1e3      	b.n	8010e2c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3301      	adds	r3, #1
 8010a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d0d4      	beq.n	8010a18 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d809      	bhi.n	8010a8a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a78:	1d1a      	adds	r2, r3, #4
 8010a7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a7e:	601a      	str	r2, [r3, #0]
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a86:	693a      	ldr	r2, [r7, #16]
 8010a88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	699b      	ldr	r3, [r3, #24]
 8010a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d3ba      	bcc.n	8010a0a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d803      	bhi.n	8010aac <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	e1b6      	b.n	8010e1a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010aac:	2311      	movs	r3, #17
 8010aae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010ab2:	e1b2      	b.n	8010e1a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d902      	bls.n	8010ac4 <f_lseek+0x136>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f000 81a4 	beq.w	8010e1a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7fe fc1a 	bl	800f312 <clmt_clust>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	69db      	ldr	r3, [r3, #28]
 8010aea:	4619      	mov	r1, r3
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fe f963 	bl	800edb8 <clust2sect>
 8010af2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d109      	bne.n	8010b0e <f_lseek+0x180>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2202      	movs	r2, #2
 8010afe:	755a      	strb	r2, [r3, #21]
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2102      	movs	r1, #2
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fd fef0 	bl	800e8ea <unlock_fs>
 8010b0a:	2302      	movs	r3, #2
 8010b0c:	e18e      	b.n	8010e2c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	3b01      	subs	r3, #1
 8010b12:	0a5b      	lsrs	r3, r3, #9
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	8952      	ldrh	r2, [r2, #10]
 8010b18:	3a01      	subs	r2, #1
 8010b1a:	4013      	ands	r3, r2
 8010b1c:	69ba      	ldr	r2, [r7, #24]
 8010b1e:	4413      	add	r3, r2
 8010b20:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	699b      	ldr	r3, [r3, #24]
 8010b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f000 8175 	beq.w	8010e1a <f_lseek+0x48c>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a1b      	ldr	r3, [r3, #32]
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	f000 816f 	beq.w	8010e1a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7d1b      	ldrb	r3, [r3, #20]
 8010b40:	b25b      	sxtb	r3, r3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	da1d      	bge.n	8010b82 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	7858      	ldrb	r0, [r3, #1]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a1a      	ldr	r2, [r3, #32]
 8010b54:	2301      	movs	r3, #1
 8010b56:	f7fd fd73 	bl	800e640 <disk_write>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d009      	beq.n	8010b74 <f_lseek+0x1e6>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2201      	movs	r2, #1
 8010b64:	755a      	strb	r2, [r3, #21]
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2101      	movs	r1, #1
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fd febd 	bl	800e8ea <unlock_fs>
 8010b70:	2301      	movs	r3, #1
 8010b72:	e15b      	b.n	8010e2c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	7d1b      	ldrb	r3, [r3, #20]
 8010b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b7c:	b2da      	uxtb	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	7858      	ldrb	r0, [r3, #1]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	69ba      	ldr	r2, [r7, #24]
 8010b90:	f7fd fd36 	bl	800e600 <disk_read>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d009      	beq.n	8010bae <f_lseek+0x220>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	755a      	strb	r2, [r3, #21]
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2101      	movs	r1, #1
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fd fea0 	bl	800e8ea <unlock_fs>
 8010baa:	2301      	movs	r3, #1
 8010bac:	e13e      	b.n	8010e2c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	621a      	str	r2, [r3, #32]
 8010bb4:	e131      	b.n	8010e1a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	683a      	ldr	r2, [r7, #0]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d908      	bls.n	8010bd2 <f_lseek+0x244>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	7d1b      	ldrb	r3, [r3, #20]
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d102      	bne.n	8010bd2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010be0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 80c0 	beq.w	8010d6a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	895b      	ldrh	r3, [r3, #10]
 8010bee:	025b      	lsls	r3, r3, #9
 8010bf0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010bf2:	6a3b      	ldr	r3, [r7, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d01b      	beq.n	8010c30 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	1e5a      	subs	r2, r3, #1
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8010c02:	6a3b      	ldr	r3, [r7, #32]
 8010c04:	1e59      	subs	r1, r3, #1
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d30f      	bcc.n	8010c30 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010c10:	6a3b      	ldr	r3, [r7, #32]
 8010c12:	1e5a      	subs	r2, r3, #1
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	425b      	negs	r3, r3
 8010c18:	401a      	ands	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	699b      	ldr	r3, [r3, #24]
 8010c22:	683a      	ldr	r2, [r7, #0]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	69db      	ldr	r3, [r3, #28]
 8010c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c2e:	e02c      	b.n	8010c8a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d123      	bne.n	8010c84 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fe face 	bl	800f1e2 <create_chain>
 8010c46:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d109      	bne.n	8010c62 <f_lseek+0x2d4>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2202      	movs	r2, #2
 8010c52:	755a      	strb	r2, [r3, #21]
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2102      	movs	r1, #2
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7fd fe46 	bl	800e8ea <unlock_fs>
 8010c5e:	2302      	movs	r3, #2
 8010c60:	e0e4      	b.n	8010e2c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c68:	d109      	bne.n	8010c7e <f_lseek+0x2f0>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	755a      	strb	r2, [r3, #21]
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	2101      	movs	r1, #1
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fd fe38 	bl	800e8ea <unlock_fs>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e0d6      	b.n	8010e2c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c82:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c88:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d06c      	beq.n	8010d6a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010c90:	e044      	b.n	8010d1c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	603b      	str	r3, [r7, #0]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	699a      	ldr	r2, [r3, #24]
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	441a      	add	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00b      	beq.n	8010cca <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fe fa93 	bl	800f1e2 <create_chain>
 8010cbc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d108      	bne.n	8010cd6 <f_lseek+0x348>
							ofs = 0; break;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	603b      	str	r3, [r7, #0]
 8010cc8:	e02c      	b.n	8010d24 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fe f891 	bl	800edf6 <get_fat>
 8010cd4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cdc:	d109      	bne.n	8010cf2 <f_lseek+0x364>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	755a      	strb	r2, [r3, #21]
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fd fdfe 	bl	800e8ea <unlock_fs>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e09c      	b.n	8010e2c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d904      	bls.n	8010d02 <f_lseek+0x374>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	699b      	ldr	r3, [r3, #24]
 8010cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d309      	bcc.n	8010d16 <f_lseek+0x388>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2202      	movs	r2, #2
 8010d06:	755a      	strb	r2, [r3, #21]
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2102      	movs	r1, #2
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fd fdec 	bl	800e8ea <unlock_fs>
 8010d12:	2302      	movs	r3, #2
 8010d14:	e08a      	b.n	8010e2c <f_lseek+0x49e>
					fp->clust = clst;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d1a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d8b6      	bhi.n	8010c92 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	699a      	ldr	r2, [r3, #24]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	441a      	add	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d017      	beq.n	8010d6a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fe f83a 	bl	800edb8 <clust2sect>
 8010d44:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d109      	bne.n	8010d60 <f_lseek+0x3d2>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2202      	movs	r2, #2
 8010d50:	755a      	strb	r2, [r3, #21]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2102      	movs	r1, #2
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fd fdc7 	bl	800e8ea <unlock_fs>
 8010d5c:	2302      	movs	r3, #2
 8010d5e:	e065      	b.n	8010e2c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	0a5b      	lsrs	r3, r3, #9
 8010d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d66:	4413      	add	r3, r2
 8010d68:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	699a      	ldr	r2, [r3, #24]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d90a      	bls.n	8010d8c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	699a      	ldr	r2, [r3, #24]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	7d1b      	ldrb	r3, [r3, #20]
 8010d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d86:	b2da      	uxtb	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d040      	beq.n	8010e1a <f_lseek+0x48c>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6a1b      	ldr	r3, [r3, #32]
 8010d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d03b      	beq.n	8010e1a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7d1b      	ldrb	r3, [r3, #20]
 8010da6:	b25b      	sxtb	r3, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	da1d      	bge.n	8010de8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	7858      	ldrb	r0, [r3, #1]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6a1a      	ldr	r2, [r3, #32]
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f7fd fc40 	bl	800e640 <disk_write>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d009      	beq.n	8010dda <f_lseek+0x44c>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	755a      	strb	r2, [r3, #21]
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	2101      	movs	r1, #1
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fd fd8a 	bl	800e8ea <unlock_fs>
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	e028      	b.n	8010e2c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	7d1b      	ldrb	r3, [r3, #20]
 8010dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	7858      	ldrb	r0, [r3, #1]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010df2:	2301      	movs	r3, #1
 8010df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010df6:	f7fd fc03 	bl	800e600 <disk_read>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d009      	beq.n	8010e14 <f_lseek+0x486>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	755a      	strb	r2, [r3, #21]
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2101      	movs	r1, #1
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fd fd6d 	bl	800e8ea <unlock_fs>
 8010e10:	2301      	movs	r3, #1
 8010e12:	e00b      	b.n	8010e2c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e18:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010e20:	4611      	mov	r1, r2
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fd fd61 	bl	800e8ea <unlock_fs>
 8010e28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3740      	adds	r7, #64	@ 0x40
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b096      	sub	sp, #88	@ 0x58
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010e3c:	f107 0108 	add.w	r1, r7, #8
 8010e40:	1d3b      	adds	r3, r7, #4
 8010e42:	2202      	movs	r2, #2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fe fe85 	bl	800fb54 <find_volume>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010e54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f040 80ec 	bne.w	8011036 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	f107 030c 	add.w	r3, r7, #12
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe fd68 	bl	800f93c <follow_path>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010e72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d102      	bne.n	8010e80 <f_mkdir+0x4c>
 8010e7a:	2308      	movs	r3, #8
 8010e7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010e80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e84:	2b04      	cmp	r3, #4
 8010e86:	f040 80d6 	bne.w	8011036 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010e8a:	f107 030c 	add.w	r3, r7, #12
 8010e8e:	2100      	movs	r1, #0
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fe f9a6 	bl	800f1e2 <create_chain>
 8010e96:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	895b      	ldrh	r3, [r3, #10]
 8010e9c:	025b      	lsls	r3, r3, #9
 8010e9e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d102      	bne.n	8010eb2 <f_mkdir+0x7e>
 8010eac:	2307      	movs	r3, #7
 8010eae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d102      	bne.n	8010ebe <f_mkdir+0x8a>
 8010eb8:	2302      	movs	r3, #2
 8010eba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec4:	d102      	bne.n	8010ecc <f_mkdir+0x98>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d106      	bne.n	8010ee2 <f_mkdir+0xae>
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd fe8e 	bl	800ebf8 <sync_window>
 8010edc:	4603      	mov	r3, r0
 8010ede:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8010ee2:	f7fd faef 	bl	800e4c4 <get_fattime>
 8010ee6:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d16a      	bne.n	8010fc6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fd ff5f 	bl	800edb8 <clust2sect>
 8010efa:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	3334      	adds	r3, #52	@ 0x34
 8010f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8010f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f06:	2100      	movs	r1, #0
 8010f08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010f0a:	f7fd fc7b 	bl	800e804 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010f0e:	220b      	movs	r2, #11
 8010f10:	2120      	movs	r1, #32
 8010f12:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010f14:	f7fd fc76 	bl	800e804 <mem_set>
					dir[DIR_Name] = '.';
 8010f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f1a:	222e      	movs	r2, #46	@ 0x2e
 8010f1c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f20:	330b      	adds	r3, #11
 8010f22:	2210      	movs	r2, #16
 8010f24:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f28:	3316      	adds	r3, #22
 8010f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fd fc1c 	bl	800e76a <st_dword>
					st_clust(fs, dir, dcl);
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fe fbc4 	bl	800f6c6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f40:	3320      	adds	r3, #32
 8010f42:	2220      	movs	r2, #32
 8010f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fd fc3b 	bl	800e7c2 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f4e:	3321      	adds	r3, #33	@ 0x21
 8010f50:	222e      	movs	r2, #46	@ 0x2e
 8010f52:	701a      	strb	r2, [r3, #0]
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	2b03      	cmp	r3, #3
 8010f5e:	d106      	bne.n	8010f6e <f_mkdir+0x13a>
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d101      	bne.n	8010f6e <f_mkdir+0x13a>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010f6e:	68b8      	ldr	r0, [r7, #8]
 8010f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f72:	3320      	adds	r3, #32
 8010f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f76:	4619      	mov	r1, r3
 8010f78:	f7fe fba5 	bl	800f6c6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	895b      	ldrh	r3, [r3, #10]
 8010f80:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f82:	e01b      	b.n	8010fbc <f_mkdir+0x188>
					fs->winsect = dsc++;
 8010f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	2201      	movs	r2, #1
 8010f92:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fd fe2e 	bl	800ebf8 <sync_window>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8010fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10c      	bne.n	8010fc4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8010faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fae:	2100      	movs	r1, #0
 8010fb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010fb2:	f7fd fc27 	bl	800e804 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1e0      	bne.n	8010f84 <f_mkdir+0x150>
 8010fc2:	e000      	b.n	8010fc6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8010fc4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d107      	bne.n	8010fde <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010fce:	f107 030c 	add.w	r3, r7, #12
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fe fbec 	bl	800f7b0 <dir_register>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8010fde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d120      	bne.n	8011028 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fec:	3316      	adds	r3, #22
 8010fee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fd fbba 	bl	800e76a <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe fb62 	bl	800f6c6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011004:	330b      	adds	r3, #11
 8011006:	2210      	movs	r2, #16
 8011008:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	2201      	movs	r2, #1
 801100e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011010:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10e      	bne.n	8011036 <f_mkdir+0x202>
					res = sync_fs(fs);
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	4618      	mov	r0, r3
 801101c:	f7fd fe5e 	bl	800ecdc <sync_fs>
 8011020:	4603      	mov	r3, r0
 8011022:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8011026:	e006      	b.n	8011036 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011028:	f107 030c 	add.w	r3, r7, #12
 801102c:	2200      	movs	r2, #0
 801102e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011030:	4618      	mov	r0, r3
 8011032:	f7fe f871 	bl	800f118 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801103c:	4611      	mov	r1, r2
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd fc53 	bl	800e8ea <unlock_fs>
 8011044:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8011048:	4618      	mov	r0, r3
 801104a:	3758      	adds	r7, #88	@ 0x58
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011050:	b480      	push	{r7}
 8011052:	b087      	sub	sp, #28
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	4613      	mov	r3, r2
 801105c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801105e:	2301      	movs	r3, #1
 8011060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011062:	2300      	movs	r3, #0
 8011064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011066:	4b1f      	ldr	r3, [pc, #124]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011068:	7a5b      	ldrb	r3, [r3, #9]
 801106a:	b2db      	uxtb	r3, r3
 801106c:	2b00      	cmp	r3, #0
 801106e:	d131      	bne.n	80110d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011070:	4b1c      	ldr	r3, [pc, #112]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011072:	7a5b      	ldrb	r3, [r3, #9]
 8011074:	b2db      	uxtb	r3, r3
 8011076:	461a      	mov	r2, r3
 8011078:	4b1a      	ldr	r3, [pc, #104]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 801107a:	2100      	movs	r1, #0
 801107c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801107e:	4b19      	ldr	r3, [pc, #100]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011080:	7a5b      	ldrb	r3, [r3, #9]
 8011082:	b2db      	uxtb	r3, r3
 8011084:	4a17      	ldr	r2, [pc, #92]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	4413      	add	r3, r2
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801108e:	4b15      	ldr	r3, [pc, #84]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011090:	7a5b      	ldrb	r3, [r3, #9]
 8011092:	b2db      	uxtb	r3, r3
 8011094:	461a      	mov	r2, r3
 8011096:	4b13      	ldr	r3, [pc, #76]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 8011098:	4413      	add	r3, r2
 801109a:	79fa      	ldrb	r2, [r7, #7]
 801109c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801109e:	4b11      	ldr	r3, [pc, #68]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 80110a0:	7a5b      	ldrb	r3, [r3, #9]
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	b2d1      	uxtb	r1, r2
 80110a8:	4a0e      	ldr	r2, [pc, #56]	@ (80110e4 <FATFS_LinkDriverEx+0x94>)
 80110aa:	7251      	strb	r1, [r2, #9]
 80110ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80110ae:	7dbb      	ldrb	r3, [r7, #22]
 80110b0:	3330      	adds	r3, #48	@ 0x30
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	3301      	adds	r3, #1
 80110bc:	223a      	movs	r2, #58	@ 0x3a
 80110be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	3302      	adds	r3, #2
 80110c4:	222f      	movs	r2, #47	@ 0x2f
 80110c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	3303      	adds	r3, #3
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80110d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	371c      	adds	r7, #28
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	200018b4 	.word	0x200018b4

080110e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80110f2:	2200      	movs	r2, #0
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7ff ffaa 	bl	8011050 <FATFS_LinkDriverEx>
 80110fc:	4603      	mov	r3, r0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3708      	adds	r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b084      	sub	sp, #16
 801110a:	af00      	add	r7, sp, #0
 801110c:	4603      	mov	r3, r0
 801110e:	6039      	str	r1, [r7, #0]
 8011110:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011112:	2300      	movs	r3, #0
 8011114:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011116:	f107 0308 	add.w	r3, r7, #8
 801111a:	2101      	movs	r1, #1
 801111c:	4618      	mov	r0, r3
 801111e:	f000 f925 	bl	801136c <osSemaphoreCreate>
 8011122:	4602      	mov	r2, r0
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	bf14      	ite	ne
 8011130:	2301      	movne	r3, #1
 8011132:	2300      	moveq	r3, #0
 8011134:	b2db      	uxtb	r3, r3
 8011136:	60fb      	str	r3, [r7, #12]

    return ret;
 8011138:	68fb      	ldr	r3, [r7, #12]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b082      	sub	sp, #8
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f9b0 	bl	80114b0 <osSemaphoreDelete>
#endif
    return 1;
 8011150:	2301      	movs	r3, #1
}
 8011152:	4618      	mov	r0, r3
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b084      	sub	sp, #16
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011166:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f000 f91c 	bl	80113a8 <osSemaphoreWait>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011176:	2301      	movs	r3, #1
 8011178:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801117a:	68fb      	ldr	r3, [r7, #12]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f959 	bl	8011444 <osSemaphoreRelease>
#endif
}
 8011192:	bf00      	nop
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801119a:	b480      	push	{r7}
 801119c:	b085      	sub	sp, #20
 801119e:	af00      	add	r7, sp, #0
 80111a0:	4603      	mov	r3, r0
 80111a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80111a4:	2300      	movs	r3, #0
 80111a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80111a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111ac:	2b84      	cmp	r3, #132	@ 0x84
 80111ae:	d005      	beq.n	80111bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80111b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	4413      	add	r3, r2
 80111b8:	3303      	adds	r3, #3
 80111ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80111bc:	68fb      	ldr	r3, [r7, #12]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3714      	adds	r7, #20
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111d0:	f3ef 8305 	mrs	r3, IPSR
 80111d4:	607b      	str	r3, [r7, #4]
  return(result);
 80111d6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80111d8:	2b00      	cmp	r3, #0
 80111da:	bf14      	ite	ne
 80111dc:	2301      	movne	r3, #1
 80111de:	2300      	moveq	r3, #0
 80111e0:	b2db      	uxtb	r3, r3
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	370c      	adds	r7, #12
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80111f2:	f001 fa57 	bl	80126a4 <vTaskStartScheduler>
  
  return osOK;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	bd80      	pop	{r7, pc}

080111fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80111fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111fe:	b087      	sub	sp, #28
 8011200:	af02      	add	r7, sp, #8
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	685c      	ldr	r4, [r3, #4]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011212:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801121a:	4618      	mov	r0, r3
 801121c:	f7ff ffbd 	bl	801119a <makeFreeRtosPriority>
 8011220:	4602      	mov	r2, r0
 8011222:	f107 030c 	add.w	r3, r7, #12
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	9200      	str	r2, [sp, #0]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	4632      	mov	r2, r6
 801122e:	4629      	mov	r1, r5
 8011230:	4620      	mov	r0, r4
 8011232:	f000 ff99 	bl	8012168 <xTaskCreate>
 8011236:	4603      	mov	r3, r0
 8011238:	2b01      	cmp	r3, #1
 801123a:	d001      	beq.n	8011240 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801123c:	2300      	movs	r3, #0
 801123e:	e000      	b.n	8011242 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011240:	68fb      	ldr	r3, [r7, #12]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3714      	adds	r7, #20
 8011246:	46bd      	mov	sp, r7
 8011248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801124a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8011252:	2001      	movs	r0, #1
 8011254:	f000 fada 	bl	801180c <xQueueCreateMutex>
 8011258:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801125a:	4618      	mov	r0, r3
 801125c:	3708      	adds	r7, #8
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
	...

08011264 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801126e:	2300      	movs	r3, #0
 8011270:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d101      	bne.n	801127c <osMutexWait+0x18>
    return osErrorParameter;
 8011278:	2380      	movs	r3, #128	@ 0x80
 801127a:	e03a      	b.n	80112f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 801127c:	2300      	movs	r3, #0
 801127e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011286:	d103      	bne.n	8011290 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011288:	f04f 33ff 	mov.w	r3, #4294967295
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	e009      	b.n	80112a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d006      	beq.n	80112a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <osMutexWait+0x40>
      ticks = 1;
 80112a0:	2301      	movs	r3, #1
 80112a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80112a4:	f7ff ff91 	bl	80111ca <inHandlerMode>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d017      	beq.n	80112de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80112ae:	f107 0308 	add.w	r3, r7, #8
 80112b2:	461a      	mov	r2, r3
 80112b4:	2100      	movs	r1, #0
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 fd62 	bl	8011d80 <xQueueReceiveFromISR>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d001      	beq.n	80112c6 <osMutexWait+0x62>
      return osErrorOS;
 80112c2:	23ff      	movs	r3, #255	@ 0xff
 80112c4:	e015      	b.n	80112f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d011      	beq.n	80112f0 <osMutexWait+0x8c>
 80112cc:	4b0b      	ldr	r3, [pc, #44]	@ (80112fc <osMutexWait+0x98>)
 80112ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112d2:	601a      	str	r2, [r3, #0]
 80112d4:	f3bf 8f4f 	dsb	sy
 80112d8:	f3bf 8f6f 	isb	sy
 80112dc:	e008      	b.n	80112f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80112de:	68f9      	ldr	r1, [r7, #12]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fc3d 	bl	8011b60 <xQueueSemaphoreTake>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d001      	beq.n	80112f0 <osMutexWait+0x8c>
    return osErrorOS;
 80112ec:	23ff      	movs	r3, #255	@ 0xff
 80112ee:	e000      	b.n	80112f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	e000ed04 	.word	0xe000ed04

08011300 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011308:	2300      	movs	r3, #0
 801130a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801130c:	2300      	movs	r3, #0
 801130e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011310:	f7ff ff5b 	bl	80111ca <inHandlerMode>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d016      	beq.n	8011348 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801131a:	f107 0308 	add.w	r3, r7, #8
 801131e:	4619      	mov	r1, r3
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fb8d 	bl	8011a40 <xQueueGiveFromISR>
 8011326:	4603      	mov	r3, r0
 8011328:	2b01      	cmp	r3, #1
 801132a:	d001      	beq.n	8011330 <osMutexRelease+0x30>
      return osErrorOS;
 801132c:	23ff      	movs	r3, #255	@ 0xff
 801132e:	e017      	b.n	8011360 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d013      	beq.n	801135e <osMutexRelease+0x5e>
 8011336:	4b0c      	ldr	r3, [pc, #48]	@ (8011368 <osMutexRelease+0x68>)
 8011338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801133c:	601a      	str	r2, [r3, #0]
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	e00a      	b.n	801135e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011348:	2300      	movs	r3, #0
 801134a:	2200      	movs	r2, #0
 801134c:	2100      	movs	r1, #0
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fa74 	bl	801183c <xQueueGenericSend>
 8011354:	4603      	mov	r3, r0
 8011356:	2b01      	cmp	r3, #1
 8011358:	d001      	beq.n	801135e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801135a:	23ff      	movs	r3, #255	@ 0xff
 801135c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801135e:	68fb      	ldr	r3, [r7, #12]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	e000ed04 	.word	0xe000ed04

0801136c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d110      	bne.n	801139e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801137c:	2203      	movs	r2, #3
 801137e:	2100      	movs	r1, #0
 8011380:	2001      	movs	r0, #1
 8011382:	f000 f9d3 	bl	801172c <xQueueGenericCreate>
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <osSemaphoreCreate+0x2e>
 801138e:	2300      	movs	r3, #0
 8011390:	2200      	movs	r2, #0
 8011392:	2100      	movs	r1, #0
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f000 fa51 	bl	801183c <xQueueGenericSend>
    return sema;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	e000      	b.n	80113a0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 801139e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80113b2:	2300      	movs	r3, #0
 80113b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d101      	bne.n	80113c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80113bc:	2380      	movs	r3, #128	@ 0x80
 80113be:	e03a      	b.n	8011436 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80113c0:	2300      	movs	r3, #0
 80113c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ca:	d103      	bne.n	80113d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80113cc:	f04f 33ff 	mov.w	r3, #4294967295
 80113d0:	60fb      	str	r3, [r7, #12]
 80113d2:	e009      	b.n	80113e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d101      	bne.n	80113e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80113e4:	2301      	movs	r3, #1
 80113e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80113e8:	f7ff feef 	bl	80111ca <inHandlerMode>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d017      	beq.n	8011422 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80113f2:	f107 0308 	add.w	r3, r7, #8
 80113f6:	461a      	mov	r2, r3
 80113f8:	2100      	movs	r1, #0
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fcc0 	bl	8011d80 <xQueueReceiveFromISR>
 8011400:	4603      	mov	r3, r0
 8011402:	2b01      	cmp	r3, #1
 8011404:	d001      	beq.n	801140a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011406:	23ff      	movs	r3, #255	@ 0xff
 8011408:	e015      	b.n	8011436 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d011      	beq.n	8011434 <osSemaphoreWait+0x8c>
 8011410:	4b0b      	ldr	r3, [pc, #44]	@ (8011440 <osSemaphoreWait+0x98>)
 8011412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	f3bf 8f4f 	dsb	sy
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	e008      	b.n	8011434 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011422:	68f9      	ldr	r1, [r7, #12]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 fb9b 	bl	8011b60 <xQueueSemaphoreTake>
 801142a:	4603      	mov	r3, r0
 801142c:	2b01      	cmp	r3, #1
 801142e:	d001      	beq.n	8011434 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011430:	23ff      	movs	r3, #255	@ 0xff
 8011432:	e000      	b.n	8011436 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	e000ed04 	.word	0xe000ed04

08011444 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801144c:	2300      	movs	r3, #0
 801144e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011450:	2300      	movs	r3, #0
 8011452:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011454:	f7ff feb9 	bl	80111ca <inHandlerMode>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d016      	beq.n	801148c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801145e:	f107 0308 	add.w	r3, r7, #8
 8011462:	4619      	mov	r1, r3
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 faeb 	bl	8011a40 <xQueueGiveFromISR>
 801146a:	4603      	mov	r3, r0
 801146c:	2b01      	cmp	r3, #1
 801146e:	d001      	beq.n	8011474 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011470:	23ff      	movs	r3, #255	@ 0xff
 8011472:	e017      	b.n	80114a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d013      	beq.n	80114a2 <osSemaphoreRelease+0x5e>
 801147a:	4b0c      	ldr	r3, [pc, #48]	@ (80114ac <osSemaphoreRelease+0x68>)
 801147c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	e00a      	b.n	80114a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801148c:	2300      	movs	r3, #0
 801148e:	2200      	movs	r2, #0
 8011490:	2100      	movs	r1, #0
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f9d2 	bl	801183c <xQueueGenericSend>
 8011498:	4603      	mov	r3, r0
 801149a:	2b01      	cmp	r3, #1
 801149c:	d001      	beq.n	80114a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801149e:	23ff      	movs	r3, #255	@ 0xff
 80114a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80114a2:	68fb      	ldr	r3, [r7, #12]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3710      	adds	r7, #16
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	e000ed04 	.word	0xe000ed04

080114b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80114b8:	f7ff fe87 	bl	80111ca <inHandlerMode>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d001      	beq.n	80114c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80114c2:	2382      	movs	r3, #130	@ 0x82
 80114c4:	e003      	b.n	80114ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 fcdc 	bl	8011e84 <vQueueDelete>

  return osOK; 
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b082      	sub	sp, #8
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f001 f84c 	bl	801257c <vTaskSuspend>
  
  return osOK;
 80114e4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80114ee:	b480      	push	{r7}
 80114f0:	b083      	sub	sp, #12
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f103 0208 	add.w	r2, r3, #8
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f04f 32ff 	mov.w	r2, #4294967295
 8011506:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f103 0208 	add.w	r2, r3, #8
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f103 0208 	add.w	r2, r3, #8
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011522:	bf00      	nop
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801152e:	b480      	push	{r7}
 8011530:	b083      	sub	sp, #12
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801153c:	bf00      	nop
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	68fa      	ldr	r2, [r7, #12]
 801155c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	689a      	ldr	r2, [r3, #8]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	683a      	ldr	r2, [r7, #0]
 801156c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	601a      	str	r2, [r3, #0]
}
 8011584:	bf00      	nop
 8011586:	3714      	adds	r7, #20
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011590:	b480      	push	{r7}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a6:	d103      	bne.n	80115b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	60fb      	str	r3, [r7, #12]
 80115ae:	e00c      	b.n	80115ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	3308      	adds	r3, #8
 80115b4:	60fb      	str	r3, [r7, #12]
 80115b6:	e002      	b.n	80115be <vListInsert+0x2e>
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	60fb      	str	r3, [r7, #12]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	68ba      	ldr	r2, [r7, #8]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d2f6      	bcs.n	80115b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	601a      	str	r2, [r3, #0]
}
 80115f6:	bf00      	nop
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011602:	b480      	push	{r7}
 8011604:	b085      	sub	sp, #20
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	691b      	ldr	r3, [r3, #16]
 801160e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	6892      	ldr	r2, [r2, #8]
 8011618:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	6852      	ldr	r2, [r2, #4]
 8011622:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	429a      	cmp	r2, r3
 801162c:	d103      	bne.n	8011636 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	689a      	ldr	r2, [r3, #8]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2200      	movs	r2, #0
 801163a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	1e5a      	subs	r2, r3, #1
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
	...

08011658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d10b      	bne.n	8011684 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801166c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011670:	f383 8811 	msr	BASEPRI, r3
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801167e:	bf00      	nop
 8011680:	bf00      	nop
 8011682:	e7fd      	b.n	8011680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011684:	f001 ff98 	bl	80135b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011690:	68f9      	ldr	r1, [r7, #12]
 8011692:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011694:	fb01 f303 	mul.w	r3, r1, r3
 8011698:	441a      	add	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2200      	movs	r2, #0
 80116a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116b4:	3b01      	subs	r3, #1
 80116b6:	68f9      	ldr	r1, [r7, #12]
 80116b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116ba:	fb01 f303 	mul.w	r3, r1, r3
 80116be:	441a      	add	r2, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	22ff      	movs	r2, #255	@ 0xff
 80116c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	22ff      	movs	r2, #255	@ 0xff
 80116d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d114      	bne.n	8011704 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d01a      	beq.n	8011718 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	3310      	adds	r3, #16
 80116e6:	4618      	mov	r0, r3
 80116e8:	f001 fa2e 	bl	8012b48 <xTaskRemoveFromEventList>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d012      	beq.n	8011718 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80116f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011728 <xQueueGenericReset+0xd0>)
 80116f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116f8:	601a      	str	r2, [r3, #0]
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	e009      	b.n	8011718 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	3310      	adds	r3, #16
 8011708:	4618      	mov	r0, r3
 801170a:	f7ff fef0 	bl	80114ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3324      	adds	r3, #36	@ 0x24
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff feeb 	bl	80114ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011718:	f001 ff80 	bl	801361c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801171c:	2301      	movs	r3, #1
}
 801171e:	4618      	mov	r0, r3
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	e000ed04 	.word	0xe000ed04

0801172c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08a      	sub	sp, #40	@ 0x28
 8011730:	af02      	add	r7, sp, #8
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	4613      	mov	r3, r2
 8011738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10b      	bne.n	8011758 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	613b      	str	r3, [r7, #16]
}
 8011752:	bf00      	nop
 8011754:	bf00      	nop
 8011756:	e7fd      	b.n	8011754 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	fb02 f303 	mul.w	r3, r2, r3
 8011760:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	3348      	adds	r3, #72	@ 0x48
 8011766:	4618      	mov	r0, r3
 8011768:	f002 f848 	bl	80137fc <pvPortMalloc>
 801176c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00d      	beq.n	8011790 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	3348      	adds	r3, #72	@ 0x48
 801177c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801177e:	79fa      	ldrb	r2, [r7, #7]
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4613      	mov	r3, r2
 8011786:	697a      	ldr	r2, [r7, #20]
 8011788:	68b9      	ldr	r1, [r7, #8]
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f000 f805 	bl	801179a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011790:	69bb      	ldr	r3, [r7, #24]
	}
 8011792:	4618      	mov	r0, r3
 8011794:	3720      	adds	r7, #32
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801179a:	b580      	push	{r7, lr}
 801179c:	b084      	sub	sp, #16
 801179e:	af00      	add	r7, sp, #0
 80117a0:	60f8      	str	r0, [r7, #12]
 80117a2:	60b9      	str	r1, [r7, #8]
 80117a4:	607a      	str	r2, [r7, #4]
 80117a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d103      	bne.n	80117b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	69ba      	ldr	r2, [r7, #24]
 80117b2:	601a      	str	r2, [r3, #0]
 80117b4:	e002      	b.n	80117bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80117c8:	2101      	movs	r1, #1
 80117ca:	69b8      	ldr	r0, [r7, #24]
 80117cc:	f7ff ff44 	bl	8011658 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80117d0:	bf00      	nop
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d00e      	beq.n	8011804 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2200      	movs	r2, #0
 80117ea:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80117f8:	2300      	movs	r3, #0
 80117fa:	2200      	movs	r2, #0
 80117fc:	2100      	movs	r1, #0
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f81c 	bl	801183c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011804:	bf00      	nop
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801180c:	b580      	push	{r7, lr}
 801180e:	b086      	sub	sp, #24
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011816:	2301      	movs	r3, #1
 8011818:	617b      	str	r3, [r7, #20]
 801181a:	2300      	movs	r3, #0
 801181c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801181e:	79fb      	ldrb	r3, [r7, #7]
 8011820:	461a      	mov	r2, r3
 8011822:	6939      	ldr	r1, [r7, #16]
 8011824:	6978      	ldr	r0, [r7, #20]
 8011826:	f7ff ff81 	bl	801172c <xQueueGenericCreate>
 801182a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f7ff ffd3 	bl	80117d8 <prvInitialiseMutex>

		return xNewQueue;
 8011832:	68fb      	ldr	r3, [r7, #12]
	}
 8011834:	4618      	mov	r0, r3
 8011836:	3718      	adds	r7, #24
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b08e      	sub	sp, #56	@ 0x38
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801184a:	2300      	movs	r3, #0
 801184c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011854:	2b00      	cmp	r3, #0
 8011856:	d10b      	bne.n	8011870 <xQueueGenericSend+0x34>
	__asm volatile
 8011858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801185c:	f383 8811 	msr	BASEPRI, r3
 8011860:	f3bf 8f6f 	isb	sy
 8011864:	f3bf 8f4f 	dsb	sy
 8011868:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801186a:	bf00      	nop
 801186c:	bf00      	nop
 801186e:	e7fd      	b.n	801186c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d103      	bne.n	801187e <xQueueGenericSend+0x42>
 8011876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801187a:	2b00      	cmp	r3, #0
 801187c:	d101      	bne.n	8011882 <xQueueGenericSend+0x46>
 801187e:	2301      	movs	r3, #1
 8011880:	e000      	b.n	8011884 <xQueueGenericSend+0x48>
 8011882:	2300      	movs	r3, #0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d10b      	bne.n	80118a0 <xQueueGenericSend+0x64>
	__asm volatile
 8011888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801188c:	f383 8811 	msr	BASEPRI, r3
 8011890:	f3bf 8f6f 	isb	sy
 8011894:	f3bf 8f4f 	dsb	sy
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801189a:	bf00      	nop
 801189c:	bf00      	nop
 801189e:	e7fd      	b.n	801189c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d103      	bne.n	80118ae <xQueueGenericSend+0x72>
 80118a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d101      	bne.n	80118b2 <xQueueGenericSend+0x76>
 80118ae:	2301      	movs	r3, #1
 80118b0:	e000      	b.n	80118b4 <xQueueGenericSend+0x78>
 80118b2:	2300      	movs	r3, #0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10b      	bne.n	80118d0 <xQueueGenericSend+0x94>
	__asm volatile
 80118b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118bc:	f383 8811 	msr	BASEPRI, r3
 80118c0:	f3bf 8f6f 	isb	sy
 80118c4:	f3bf 8f4f 	dsb	sy
 80118c8:	623b      	str	r3, [r7, #32]
}
 80118ca:	bf00      	nop
 80118cc:	bf00      	nop
 80118ce:	e7fd      	b.n	80118cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118d0:	f001 fb18 	bl	8012f04 <xTaskGetSchedulerState>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d102      	bne.n	80118e0 <xQueueGenericSend+0xa4>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d101      	bne.n	80118e4 <xQueueGenericSend+0xa8>
 80118e0:	2301      	movs	r3, #1
 80118e2:	e000      	b.n	80118e6 <xQueueGenericSend+0xaa>
 80118e4:	2300      	movs	r3, #0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d10b      	bne.n	8011902 <xQueueGenericSend+0xc6>
	__asm volatile
 80118ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ee:	f383 8811 	msr	BASEPRI, r3
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	f3bf 8f4f 	dsb	sy
 80118fa:	61fb      	str	r3, [r7, #28]
}
 80118fc:	bf00      	nop
 80118fe:	bf00      	nop
 8011900:	e7fd      	b.n	80118fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011902:	f001 fe59 	bl	80135b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801190e:	429a      	cmp	r2, r3
 8011910:	d302      	bcc.n	8011918 <xQueueGenericSend+0xdc>
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	2b02      	cmp	r3, #2
 8011916:	d129      	bne.n	801196c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	68b9      	ldr	r1, [r7, #8]
 801191c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801191e:	f000 fae8 	bl	8011ef2 <prvCopyDataToQueue>
 8011922:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011928:	2b00      	cmp	r3, #0
 801192a:	d010      	beq.n	801194e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192e:	3324      	adds	r3, #36	@ 0x24
 8011930:	4618      	mov	r0, r3
 8011932:	f001 f909 	bl	8012b48 <xTaskRemoveFromEventList>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d013      	beq.n	8011964 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801193c:	4b3f      	ldr	r3, [pc, #252]	@ (8011a3c <xQueueGenericSend+0x200>)
 801193e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011942:	601a      	str	r2, [r3, #0]
 8011944:	f3bf 8f4f 	dsb	sy
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	e00a      	b.n	8011964 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d007      	beq.n	8011964 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011954:	4b39      	ldr	r3, [pc, #228]	@ (8011a3c <xQueueGenericSend+0x200>)
 8011956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801195a:	601a      	str	r2, [r3, #0]
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011964:	f001 fe5a 	bl	801361c <vPortExitCritical>
				return pdPASS;
 8011968:	2301      	movs	r3, #1
 801196a:	e063      	b.n	8011a34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d103      	bne.n	801197a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011972:	f001 fe53 	bl	801361c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011976:	2300      	movs	r3, #0
 8011978:	e05c      	b.n	8011a34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011980:	f107 0314 	add.w	r3, r7, #20
 8011984:	4618      	mov	r0, r3
 8011986:	f001 f943 	bl	8012c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801198a:	2301      	movs	r3, #1
 801198c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801198e:	f001 fe45 	bl	801361c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011992:	f000 fed9 	bl	8012748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011996:	f001 fe0f 	bl	80135b8 <vPortEnterCritical>
 801199a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801199c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80119a0:	b25b      	sxtb	r3, r3
 80119a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a6:	d103      	bne.n	80119b0 <xQueueGenericSend+0x174>
 80119a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80119b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80119b6:	b25b      	sxtb	r3, r3
 80119b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119bc:	d103      	bne.n	80119c6 <xQueueGenericSend+0x18a>
 80119be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c0:	2200      	movs	r2, #0
 80119c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80119c6:	f001 fe29 	bl	801361c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119ca:	1d3a      	adds	r2, r7, #4
 80119cc:	f107 0314 	add.w	r3, r7, #20
 80119d0:	4611      	mov	r1, r2
 80119d2:	4618      	mov	r0, r3
 80119d4:	f001 f932 	bl	8012c3c <xTaskCheckForTimeOut>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d124      	bne.n	8011a28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80119de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119e0:	f000 fb7f 	bl	80120e2 <prvIsQueueFull>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d018      	beq.n	8011a1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80119ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ec:	3310      	adds	r3, #16
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	4611      	mov	r1, r2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f001 f882 	bl	8012afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80119f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119fa:	f000 fb0a 	bl	8012012 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80119fe:	f000 feb1 	bl	8012764 <xTaskResumeAll>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f47f af7c 	bne.w	8011902 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011a3c <xQueueGenericSend+0x200>)
 8011a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	e772      	b.n	8011902 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a1e:	f000 faf8 	bl	8012012 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a22:	f000 fe9f 	bl	8012764 <xTaskResumeAll>
 8011a26:	e76c      	b.n	8011902 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a2a:	f000 faf2 	bl	8012012 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a2e:	f000 fe99 	bl	8012764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011a32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3738      	adds	r7, #56	@ 0x38
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	e000ed04 	.word	0xe000ed04

08011a40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08e      	sub	sp, #56	@ 0x38
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10b      	bne.n	8011a6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	623b      	str	r3, [r7, #32]
}
 8011a66:	bf00      	nop
 8011a68:	bf00      	nop
 8011a6a:	e7fd      	b.n	8011a68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00b      	beq.n	8011a8c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	61fb      	str	r3, [r7, #28]
}
 8011a86:	bf00      	nop
 8011a88:	bf00      	nop
 8011a8a:	e7fd      	b.n	8011a88 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d103      	bne.n	8011a9c <xQueueGiveFromISR+0x5c>
 8011a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <xQueueGiveFromISR+0x60>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e000      	b.n	8011aa2 <xQueueGiveFromISR+0x62>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10b      	bne.n	8011abe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	61bb      	str	r3, [r7, #24]
}
 8011ab8:	bf00      	nop
 8011aba:	bf00      	nop
 8011abc:	e7fd      	b.n	8011aba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011abe:	f001 fe5b 	bl	8013778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8011ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	617a      	str	r2, [r7, #20]
 8011ad8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ada:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d22b      	bcs.n	8011b46 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011afa:	1c5a      	adds	r2, r3, #1
 8011afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011afe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011b00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b08:	d112      	bne.n	8011b30 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d016      	beq.n	8011b40 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b14:	3324      	adds	r3, #36	@ 0x24
 8011b16:	4618      	mov	r0, r3
 8011b18:	f001 f816 	bl	8012b48 <xTaskRemoveFromEventList>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00e      	beq.n	8011b40 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d00b      	beq.n	8011b40 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	601a      	str	r2, [r3, #0]
 8011b2e:	e007      	b.n	8011b40 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b34:	3301      	adds	r3, #1
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	b25a      	sxtb	r2, r3
 8011b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011b40:	2301      	movs	r3, #1
 8011b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b44:	e001      	b.n	8011b4a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011b46:	2300      	movs	r3, #0
 8011b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011b54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3738      	adds	r7, #56	@ 0x38
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08e      	sub	sp, #56	@ 0x38
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b72:	2300      	movs	r3, #0
 8011b74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10b      	bne.n	8011b94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b80:	f383 8811 	msr	BASEPRI, r3
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	f3bf 8f4f 	dsb	sy
 8011b8c:	623b      	str	r3, [r7, #32]
}
 8011b8e:	bf00      	nop
 8011b90:	bf00      	nop
 8011b92:	e7fd      	b.n	8011b90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00b      	beq.n	8011bb4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	61fb      	str	r3, [r7, #28]
}
 8011bae:	bf00      	nop
 8011bb0:	bf00      	nop
 8011bb2:	e7fd      	b.n	8011bb0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011bb4:	f001 f9a6 	bl	8012f04 <xTaskGetSchedulerState>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d102      	bne.n	8011bc4 <xQueueSemaphoreTake+0x64>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d101      	bne.n	8011bc8 <xQueueSemaphoreTake+0x68>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e000      	b.n	8011bca <xQueueSemaphoreTake+0x6a>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10b      	bne.n	8011be6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	61bb      	str	r3, [r7, #24]
}
 8011be0:	bf00      	nop
 8011be2:	bf00      	nop
 8011be4:	e7fd      	b.n	8011be2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011be6:	f001 fce7 	bl	80135b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d024      	beq.n	8011c40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf8:	1e5a      	subs	r2, r3, #1
 8011bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bfc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d104      	bne.n	8011c10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011c06:	f001 fb29 	bl	801325c <pvTaskIncrementMutexHeldCount>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c12:	691b      	ldr	r3, [r3, #16]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d00f      	beq.n	8011c38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1a:	3310      	adds	r3, #16
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f000 ff93 	bl	8012b48 <xTaskRemoveFromEventList>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d007      	beq.n	8011c38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011c28:	4b54      	ldr	r3, [pc, #336]	@ (8011d7c <xQueueSemaphoreTake+0x21c>)
 8011c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c2e:	601a      	str	r2, [r3, #0]
 8011c30:	f3bf 8f4f 	dsb	sy
 8011c34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011c38:	f001 fcf0 	bl	801361c <vPortExitCritical>
				return pdPASS;
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e098      	b.n	8011d72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d112      	bne.n	8011c6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00b      	beq.n	8011c64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	617b      	str	r3, [r7, #20]
}
 8011c5e:	bf00      	nop
 8011c60:	bf00      	nop
 8011c62:	e7fd      	b.n	8011c60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c64:	f001 fcda 	bl	801361c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e082      	b.n	8011d72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d106      	bne.n	8011c80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c72:	f107 030c 	add.w	r3, r7, #12
 8011c76:	4618      	mov	r0, r3
 8011c78:	f000 ffca 	bl	8012c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c80:	f001 fccc 	bl	801361c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c84:	f000 fd60 	bl	8012748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c88:	f001 fc96 	bl	80135b8 <vPortEnterCritical>
 8011c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011c92:	b25b      	sxtb	r3, r3
 8011c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c98:	d103      	bne.n	8011ca2 <xQueueSemaphoreTake+0x142>
 8011c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011ca8:	b25b      	sxtb	r3, r3
 8011caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cae:	d103      	bne.n	8011cb8 <xQueueSemaphoreTake+0x158>
 8011cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011cb8:	f001 fcb0 	bl	801361c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011cbc:	463a      	mov	r2, r7
 8011cbe:	f107 030c 	add.w	r3, r7, #12
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 ffb9 	bl	8012c3c <xTaskCheckForTimeOut>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d132      	bne.n	8011d36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011cd2:	f000 f9f0 	bl	80120b6 <prvIsQueueEmpty>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d026      	beq.n	8011d2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d109      	bne.n	8011cf8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011ce4:	f001 fc68 	bl	80135b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cea:	689b      	ldr	r3, [r3, #8]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f001 f927 	bl	8012f40 <xTaskPriorityInherit>
 8011cf2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011cf4:	f001 fc92 	bl	801361c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cfa:	3324      	adds	r3, #36	@ 0x24
 8011cfc:	683a      	ldr	r2, [r7, #0]
 8011cfe:	4611      	mov	r1, r2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f000 fefb 	bl	8012afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011d06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d08:	f000 f983 	bl	8012012 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011d0c:	f000 fd2a 	bl	8012764 <xTaskResumeAll>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f47f af67 	bne.w	8011be6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011d18:	4b18      	ldr	r3, [pc, #96]	@ (8011d7c <xQueueSemaphoreTake+0x21c>)
 8011d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d1e:	601a      	str	r2, [r3, #0]
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	f3bf 8f6f 	isb	sy
 8011d28:	e75d      	b.n	8011be6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d2c:	f000 f971 	bl	8012012 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d30:	f000 fd18 	bl	8012764 <xTaskResumeAll>
 8011d34:	e757      	b.n	8011be6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d38:	f000 f96b 	bl	8012012 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d3c:	f000 fd12 	bl	8012764 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d42:	f000 f9b8 	bl	80120b6 <prvIsQueueEmpty>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f43f af4c 	beq.w	8011be6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00d      	beq.n	8011d70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011d54:	f001 fc30 	bl	80135b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d5a:	f000 f8b2 	bl	8011ec2 <prvGetDisinheritPriorityAfterTimeout>
 8011d5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f001 f9e8 	bl	801313c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d6c:	f001 fc56 	bl	801361c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3738      	adds	r7, #56	@ 0x38
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	e000ed04 	.word	0xe000ed04

08011d80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b08e      	sub	sp, #56	@ 0x38
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10b      	bne.n	8011dae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	623b      	str	r3, [r7, #32]
}
 8011da8:	bf00      	nop
 8011daa:	bf00      	nop
 8011dac:	e7fd      	b.n	8011daa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d103      	bne.n	8011dbc <xQueueReceiveFromISR+0x3c>
 8011db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d101      	bne.n	8011dc0 <xQueueReceiveFromISR+0x40>
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e000      	b.n	8011dc2 <xQueueReceiveFromISR+0x42>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d10b      	bne.n	8011dde <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8011dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	61fb      	str	r3, [r7, #28]
}
 8011dd8:	bf00      	nop
 8011dda:	bf00      	nop
 8011ddc:	e7fd      	b.n	8011dda <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dde:	f001 fccb 	bl	8013778 <vPortValidateInterruptPriority>
	__asm volatile
 8011de2:	f3ef 8211 	mrs	r2, BASEPRI
 8011de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dea:	f383 8811 	msr	BASEPRI, r3
 8011dee:	f3bf 8f6f 	isb	sy
 8011df2:	f3bf 8f4f 	dsb	sy
 8011df6:	61ba      	str	r2, [r7, #24]
 8011df8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011dfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d02f      	beq.n	8011e6a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e18:	f000 f8d5 	bl	8011fc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1e:	1e5a      	subs	r2, r3, #1
 8011e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2c:	d112      	bne.n	8011e54 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e30:	691b      	ldr	r3, [r3, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d016      	beq.n	8011e64 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e38:	3310      	adds	r3, #16
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f000 fe84 	bl	8012b48 <xTaskRemoveFromEventList>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00e      	beq.n	8011e64 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00b      	beq.n	8011e64 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	e007      	b.n	8011e64 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e58:	3301      	adds	r3, #1
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	b25a      	sxtb	r2, r3
 8011e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011e64:	2301      	movs	r3, #1
 8011e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e68:	e001      	b.n	8011e6e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	f383 8811 	msr	BASEPRI, r3
}
 8011e78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3738      	adds	r7, #56	@ 0x38
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d10b      	bne.n	8011eae <vQueueDelete+0x2a>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	60bb      	str	r3, [r7, #8]
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	e7fd      	b.n	8011eaa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f000 f930 	bl	8012114 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f001 fd6f 	bl	8013998 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011eba:	bf00      	nop
 8011ebc:	3710      	adds	r7, #16
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}

08011ec2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011ec2:	b480      	push	{r7}
 8011ec4:	b085      	sub	sp, #20
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d006      	beq.n	8011ee0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f1c3 0307 	rsb	r3, r3, #7
 8011edc:	60fb      	str	r3, [r7, #12]
 8011ede:	e001      	b.n	8011ee4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b086      	sub	sp, #24
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	60f8      	str	r0, [r7, #12]
 8011efa:	60b9      	str	r1, [r7, #8]
 8011efc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011efe:	2300      	movs	r3, #0
 8011f00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d10d      	bne.n	8011f2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d14d      	bne.n	8011fb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f001 f885 	bl	801302c <xTaskPriorityDisinherit>
 8011f22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2200      	movs	r2, #0
 8011f28:	609a      	str	r2, [r3, #8]
 8011f2a:	e043      	b.n	8011fb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d119      	bne.n	8011f66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6858      	ldr	r0, [r3, #4]
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	68b9      	ldr	r1, [r7, #8]
 8011f3e:	f002 feea 	bl	8014d16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f4a:	441a      	add	r2, r3
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	685a      	ldr	r2, [r3, #4]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	689b      	ldr	r3, [r3, #8]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d32b      	bcc.n	8011fb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	605a      	str	r2, [r3, #4]
 8011f64:	e026      	b.n	8011fb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	68d8      	ldr	r0, [r3, #12]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f6e:	461a      	mov	r2, r3
 8011f70:	68b9      	ldr	r1, [r7, #8]
 8011f72:	f002 fed0 	bl	8014d16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	68da      	ldr	r2, [r3, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f7e:	425b      	negs	r3, r3
 8011f80:	441a      	add	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d207      	bcs.n	8011fa2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	689a      	ldr	r2, [r3, #8]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f9a:	425b      	negs	r3, r3
 8011f9c:	441a      	add	r2, r3
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b02      	cmp	r3, #2
 8011fa6:	d105      	bne.n	8011fb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d002      	beq.n	8011fb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	3b01      	subs	r3, #1
 8011fb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011fbc:	697b      	ldr	r3, [r7, #20]
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3718      	adds	r7, #24
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}

08011fc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011fc6:	b580      	push	{r7, lr}
 8011fc8:	b082      	sub	sp, #8
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
 8011fce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d018      	beq.n	801200a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	68da      	ldr	r2, [r3, #12]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fe0:	441a      	add	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	68da      	ldr	r2, [r3, #12]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d303      	bcc.n	8011ffa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	68d9      	ldr	r1, [r3, #12]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012002:	461a      	mov	r2, r3
 8012004:	6838      	ldr	r0, [r7, #0]
 8012006:	f002 fe86 	bl	8014d16 <memcpy>
	}
}
 801200a:	bf00      	nop
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012012:	b580      	push	{r7, lr}
 8012014:	b084      	sub	sp, #16
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801201a:	f001 facd 	bl	80135b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012024:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012026:	e011      	b.n	801204c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801202c:	2b00      	cmp	r3, #0
 801202e:	d012      	beq.n	8012056 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	3324      	adds	r3, #36	@ 0x24
 8012034:	4618      	mov	r0, r3
 8012036:	f000 fd87 	bl	8012b48 <xTaskRemoveFromEventList>
 801203a:	4603      	mov	r3, r0
 801203c:	2b00      	cmp	r3, #0
 801203e:	d001      	beq.n	8012044 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012040:	f000 fe60 	bl	8012d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012044:	7bfb      	ldrb	r3, [r7, #15]
 8012046:	3b01      	subs	r3, #1
 8012048:	b2db      	uxtb	r3, r3
 801204a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012050:	2b00      	cmp	r3, #0
 8012052:	dce9      	bgt.n	8012028 <prvUnlockQueue+0x16>
 8012054:	e000      	b.n	8012058 <prvUnlockQueue+0x46>
					break;
 8012056:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	22ff      	movs	r2, #255	@ 0xff
 801205c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012060:	f001 fadc 	bl	801361c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012064:	f001 faa8 	bl	80135b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801206e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012070:	e011      	b.n	8012096 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d012      	beq.n	80120a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	3310      	adds	r3, #16
 801207e:	4618      	mov	r0, r3
 8012080:	f000 fd62 	bl	8012b48 <xTaskRemoveFromEventList>
 8012084:	4603      	mov	r3, r0
 8012086:	2b00      	cmp	r3, #0
 8012088:	d001      	beq.n	801208e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801208a:	f000 fe3b 	bl	8012d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801208e:	7bbb      	ldrb	r3, [r7, #14]
 8012090:	3b01      	subs	r3, #1
 8012092:	b2db      	uxtb	r3, r3
 8012094:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801209a:	2b00      	cmp	r3, #0
 801209c:	dce9      	bgt.n	8012072 <prvUnlockQueue+0x60>
 801209e:	e000      	b.n	80120a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80120a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	22ff      	movs	r2, #255	@ 0xff
 80120a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80120aa:	f001 fab7 	bl	801361c <vPortExitCritical>
}
 80120ae:	bf00      	nop
 80120b0:	3710      	adds	r7, #16
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80120b6:	b580      	push	{r7, lr}
 80120b8:	b084      	sub	sp, #16
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120be:	f001 fa7b 	bl	80135b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d102      	bne.n	80120d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80120ca:	2301      	movs	r3, #1
 80120cc:	60fb      	str	r3, [r7, #12]
 80120ce:	e001      	b.n	80120d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120d4:	f001 faa2 	bl	801361c <vPortExitCritical>

	return xReturn;
 80120d8:	68fb      	ldr	r3, [r7, #12]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b084      	sub	sp, #16
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120ea:	f001 fa65 	bl	80135b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d102      	bne.n	8012100 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80120fa:	2301      	movs	r3, #1
 80120fc:	60fb      	str	r3, [r7, #12]
 80120fe:	e001      	b.n	8012104 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012100:	2300      	movs	r3, #0
 8012102:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012104:	f001 fa8a 	bl	801361c <vPortExitCritical>

	return xReturn;
 8012108:	68fb      	ldr	r3, [r7, #12]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801211c:	2300      	movs	r3, #0
 801211e:	60fb      	str	r3, [r7, #12]
 8012120:	e016      	b.n	8012150 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012122:	4a10      	ldr	r2, [pc, #64]	@ (8012164 <vQueueUnregisterQueue+0x50>)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	4413      	add	r3, r2
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	687a      	ldr	r2, [r7, #4]
 801212e:	429a      	cmp	r2, r3
 8012130:	d10b      	bne.n	801214a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012132:	4a0c      	ldr	r2, [pc, #48]	@ (8012164 <vQueueUnregisterQueue+0x50>)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2100      	movs	r1, #0
 8012138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801213c:	4a09      	ldr	r2, [pc, #36]	@ (8012164 <vQueueUnregisterQueue+0x50>)
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	4413      	add	r3, r2
 8012144:	2200      	movs	r2, #0
 8012146:	605a      	str	r2, [r3, #4]
				break;
 8012148:	e006      	b.n	8012158 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	3301      	adds	r3, #1
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2b07      	cmp	r3, #7
 8012154:	d9e5      	bls.n	8012122 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012156:	bf00      	nop
 8012158:	bf00      	nop
 801215a:	3714      	adds	r7, #20
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	200018c0 	.word	0x200018c0

08012168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012168:	b580      	push	{r7, lr}
 801216a:	b08c      	sub	sp, #48	@ 0x30
 801216c:	af04      	add	r7, sp, #16
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	603b      	str	r3, [r7, #0]
 8012174:	4613      	mov	r3, r2
 8012176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012178:	88fb      	ldrh	r3, [r7, #6]
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	4618      	mov	r0, r3
 801217e:	f001 fb3d 	bl	80137fc <pvPortMalloc>
 8012182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00e      	beq.n	80121a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801218a:	20a0      	movs	r0, #160	@ 0xa0
 801218c:	f001 fb36 	bl	80137fc <pvPortMalloc>
 8012190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	697a      	ldr	r2, [r7, #20]
 801219c:	631a      	str	r2, [r3, #48]	@ 0x30
 801219e:	e005      	b.n	80121ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80121a0:	6978      	ldr	r0, [r7, #20]
 80121a2:	f001 fbf9 	bl	8013998 <vPortFree>
 80121a6:	e001      	b.n	80121ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d013      	beq.n	80121da <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80121b2:	88fa      	ldrh	r2, [r7, #6]
 80121b4:	2300      	movs	r3, #0
 80121b6:	9303      	str	r3, [sp, #12]
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	9302      	str	r3, [sp, #8]
 80121bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f000 f80f 	bl	80121ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121ce:	69f8      	ldr	r0, [r7, #28]
 80121d0:	f000 f8b4 	bl	801233c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80121d4:	2301      	movs	r3, #1
 80121d6:	61bb      	str	r3, [r7, #24]
 80121d8:	e002      	b.n	80121e0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80121da:	f04f 33ff 	mov.w	r3, #4294967295
 80121de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80121e0:	69bb      	ldr	r3, [r7, #24]
	}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3720      	adds	r7, #32
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
	...

080121ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b088      	sub	sp, #32
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	607a      	str	r2, [r7, #4]
 80121f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80121fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	461a      	mov	r2, r3
 8012204:	21a5      	movs	r1, #165	@ 0xa5
 8012206:	f002 fca8 	bl	8014b5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801220a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801220c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012214:	3b01      	subs	r3, #1
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	4413      	add	r3, r2
 801221a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	f023 0307 	bic.w	r3, r3, #7
 8012222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	f003 0307 	and.w	r3, r3, #7
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00b      	beq.n	8012246 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	617b      	str	r3, [r7, #20]
}
 8012240:	bf00      	nop
 8012242:	bf00      	nop
 8012244:	e7fd      	b.n	8012242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d01f      	beq.n	801228c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801224c:	2300      	movs	r3, #0
 801224e:	61fb      	str	r3, [r7, #28]
 8012250:	e012      	b.n	8012278 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	4413      	add	r3, r2
 8012258:	7819      	ldrb	r1, [r3, #0]
 801225a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	4413      	add	r3, r2
 8012260:	3334      	adds	r3, #52	@ 0x34
 8012262:	460a      	mov	r2, r1
 8012264:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012266:	68ba      	ldr	r2, [r7, #8]
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	4413      	add	r3, r2
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d006      	beq.n	8012280 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012272:	69fb      	ldr	r3, [r7, #28]
 8012274:	3301      	adds	r3, #1
 8012276:	61fb      	str	r3, [r7, #28]
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	2b0f      	cmp	r3, #15
 801227c:	d9e9      	bls.n	8012252 <prvInitialiseNewTask+0x66>
 801227e:	e000      	b.n	8012282 <prvInitialiseNewTask+0x96>
			{
				break;
 8012280:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	2200      	movs	r2, #0
 8012286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801228a:	e003      	b.n	8012294 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228e:	2200      	movs	r2, #0
 8012290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012296:	2b06      	cmp	r3, #6
 8012298:	d901      	bls.n	801229e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801229a:	2306      	movs	r3, #6
 801229c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80122a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80122aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ac:	2200      	movs	r2, #0
 80122ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80122b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b2:	3304      	adds	r3, #4
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff f93a 	bl	801152e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80122ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122bc:	3318      	adds	r3, #24
 80122be:	4618      	mov	r0, r3
 80122c0:	f7ff f935 	bl	801152e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80122c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122cc:	f1c3 0207 	rsb	r2, r3, #7
 80122d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80122d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	2200      	movs	r2, #0
 80122de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80122e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122e4:	2200      	movs	r2, #0
 80122e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80122ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ec:	334c      	adds	r3, #76	@ 0x4c
 80122ee:	224c      	movs	r2, #76	@ 0x4c
 80122f0:	2100      	movs	r1, #0
 80122f2:	4618      	mov	r0, r3
 80122f4:	f002 fc31 	bl	8014b5a <memset>
 80122f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fa:	4a0d      	ldr	r2, [pc, #52]	@ (8012330 <prvInitialiseNewTask+0x144>)
 80122fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80122fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012300:	4a0c      	ldr	r2, [pc, #48]	@ (8012334 <prvInitialiseNewTask+0x148>)
 8012302:	655a      	str	r2, [r3, #84]	@ 0x54
 8012304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012306:	4a0c      	ldr	r2, [pc, #48]	@ (8012338 <prvInitialiseNewTask+0x14c>)
 8012308:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	68f9      	ldr	r1, [r7, #12]
 801230e:	69b8      	ldr	r0, [r7, #24]
 8012310:	f001 f81e 	bl	8013350 <pxPortInitialiseStack>
 8012314:	4602      	mov	r2, r0
 8012316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801231c:	2b00      	cmp	r3, #0
 801231e:	d002      	beq.n	8012326 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012326:	bf00      	nop
 8012328:	3720      	adds	r7, #32
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	20004934 	.word	0x20004934
 8012334:	2000499c 	.word	0x2000499c
 8012338:	20004a04 	.word	0x20004a04

0801233c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012344:	f001 f938 	bl	80135b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012348:	4b2a      	ldr	r3, [pc, #168]	@ (80123f4 <prvAddNewTaskToReadyList+0xb8>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	3301      	adds	r3, #1
 801234e:	4a29      	ldr	r2, [pc, #164]	@ (80123f4 <prvAddNewTaskToReadyList+0xb8>)
 8012350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012352:	4b29      	ldr	r3, [pc, #164]	@ (80123f8 <prvAddNewTaskToReadyList+0xbc>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d109      	bne.n	801236e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801235a:	4a27      	ldr	r2, [pc, #156]	@ (80123f8 <prvAddNewTaskToReadyList+0xbc>)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012360:	4b24      	ldr	r3, [pc, #144]	@ (80123f4 <prvAddNewTaskToReadyList+0xb8>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d110      	bne.n	801238a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012368:	f000 fcf0 	bl	8012d4c <prvInitialiseTaskLists>
 801236c:	e00d      	b.n	801238a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801236e:	4b23      	ldr	r3, [pc, #140]	@ (80123fc <prvAddNewTaskToReadyList+0xc0>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d109      	bne.n	801238a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012376:	4b20      	ldr	r3, [pc, #128]	@ (80123f8 <prvAddNewTaskToReadyList+0xbc>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012380:	429a      	cmp	r2, r3
 8012382:	d802      	bhi.n	801238a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012384:	4a1c      	ldr	r2, [pc, #112]	@ (80123f8 <prvAddNewTaskToReadyList+0xbc>)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801238a:	4b1d      	ldr	r3, [pc, #116]	@ (8012400 <prvAddNewTaskToReadyList+0xc4>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	3301      	adds	r3, #1
 8012390:	4a1b      	ldr	r2, [pc, #108]	@ (8012400 <prvAddNewTaskToReadyList+0xc4>)
 8012392:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012398:	2201      	movs	r2, #1
 801239a:	409a      	lsls	r2, r3
 801239c:	4b19      	ldr	r3, [pc, #100]	@ (8012404 <prvAddNewTaskToReadyList+0xc8>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	4a18      	ldr	r2, [pc, #96]	@ (8012404 <prvAddNewTaskToReadyList+0xc8>)
 80123a4:	6013      	str	r3, [r2, #0]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123aa:	4613      	mov	r3, r2
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	4a15      	ldr	r2, [pc, #84]	@ (8012408 <prvAddNewTaskToReadyList+0xcc>)
 80123b4:	441a      	add	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	3304      	adds	r3, #4
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7ff f8c3 	bl	8011548 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80123c2:	f001 f92b 	bl	801361c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80123c6:	4b0d      	ldr	r3, [pc, #52]	@ (80123fc <prvAddNewTaskToReadyList+0xc0>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d00e      	beq.n	80123ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80123ce:	4b0a      	ldr	r3, [pc, #40]	@ (80123f8 <prvAddNewTaskToReadyList+0xbc>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123d8:	429a      	cmp	r2, r3
 80123da:	d207      	bcs.n	80123ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80123dc:	4b0b      	ldr	r3, [pc, #44]	@ (801240c <prvAddNewTaskToReadyList+0xd0>)
 80123de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	f3bf 8f4f 	dsb	sy
 80123e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	20001a00 	.word	0x20001a00
 80123f8:	20001900 	.word	0x20001900
 80123fc:	20001a0c 	.word	0x20001a0c
 8012400:	20001a1c 	.word	0x20001a1c
 8012404:	20001a08 	.word	0x20001a08
 8012408:	20001904 	.word	0x20001904
 801240c:	e000ed04 	.word	0xe000ed04

08012410 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08a      	sub	sp, #40	@ 0x28
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801241a:	2300      	movs	r3, #0
 801241c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10b      	bne.n	801243c <vTaskDelayUntil+0x2c>
	__asm volatile
 8012424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012428:	f383 8811 	msr	BASEPRI, r3
 801242c:	f3bf 8f6f 	isb	sy
 8012430:	f3bf 8f4f 	dsb	sy
 8012434:	617b      	str	r3, [r7, #20]
}
 8012436:	bf00      	nop
 8012438:	bf00      	nop
 801243a:	e7fd      	b.n	8012438 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10b      	bne.n	801245a <vTaskDelayUntil+0x4a>
	__asm volatile
 8012442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	613b      	str	r3, [r7, #16]
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	e7fd      	b.n	8012456 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801245a:	4b2a      	ldr	r3, [pc, #168]	@ (8012504 <vTaskDelayUntil+0xf4>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00b      	beq.n	801247a <vTaskDelayUntil+0x6a>
	__asm volatile
 8012462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012466:	f383 8811 	msr	BASEPRI, r3
 801246a:	f3bf 8f6f 	isb	sy
 801246e:	f3bf 8f4f 	dsb	sy
 8012472:	60fb      	str	r3, [r7, #12]
}
 8012474:	bf00      	nop
 8012476:	bf00      	nop
 8012478:	e7fd      	b.n	8012476 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801247a:	f000 f965 	bl	8012748 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801247e:	4b22      	ldr	r3, [pc, #136]	@ (8012508 <vTaskDelayUntil+0xf8>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	4413      	add	r3, r2
 801248c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6a3a      	ldr	r2, [r7, #32]
 8012494:	429a      	cmp	r2, r3
 8012496:	d20b      	bcs.n	80124b0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	69fa      	ldr	r2, [r7, #28]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d211      	bcs.n	80124c6 <vTaskDelayUntil+0xb6>
 80124a2:	69fa      	ldr	r2, [r7, #28]
 80124a4:	6a3b      	ldr	r3, [r7, #32]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d90d      	bls.n	80124c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80124aa:	2301      	movs	r3, #1
 80124ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80124ae:	e00a      	b.n	80124c6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	69fa      	ldr	r2, [r7, #28]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d303      	bcc.n	80124c2 <vTaskDelayUntil+0xb2>
 80124ba:	69fa      	ldr	r2, [r7, #28]
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d901      	bls.n	80124c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80124c2:	2301      	movs	r3, #1
 80124c4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	69fa      	ldr	r2, [r7, #28]
 80124ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80124cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d006      	beq.n	80124e0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80124d2:	69fa      	ldr	r2, [r7, #28]
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	2100      	movs	r1, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	f000 fed2 	bl	8013284 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80124e0:	f000 f940 	bl	8012764 <xTaskResumeAll>
 80124e4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d107      	bne.n	80124fc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80124ec:	4b07      	ldr	r3, [pc, #28]	@ (801250c <vTaskDelayUntil+0xfc>)
 80124ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124fc:	bf00      	nop
 80124fe:	3728      	adds	r7, #40	@ 0x28
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	20001a28 	.word	0x20001a28
 8012508:	20001a04 	.word	0x20001a04
 801250c:	e000ed04 	.word	0xe000ed04

08012510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012518:	2300      	movs	r3, #0
 801251a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d018      	beq.n	8012554 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012522:	4b14      	ldr	r3, [pc, #80]	@ (8012574 <vTaskDelay+0x64>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00b      	beq.n	8012542 <vTaskDelay+0x32>
	__asm volatile
 801252a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	60bb      	str	r3, [r7, #8]
}
 801253c:	bf00      	nop
 801253e:	bf00      	nop
 8012540:	e7fd      	b.n	801253e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012542:	f000 f901 	bl	8012748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012546:	2100      	movs	r1, #0
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f000 fe9b 	bl	8013284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801254e:	f000 f909 	bl	8012764 <xTaskResumeAll>
 8012552:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d107      	bne.n	801256a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801255a:	4b07      	ldr	r3, [pc, #28]	@ (8012578 <vTaskDelay+0x68>)
 801255c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	f3bf 8f4f 	dsb	sy
 8012566:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801256a:	bf00      	nop
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	20001a28 	.word	0x20001a28
 8012578:	e000ed04 	.word	0xe000ed04

0801257c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012584:	f001 f818 	bl	80135b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d102      	bne.n	8012594 <vTaskSuspend+0x18>
 801258e:	4b3d      	ldr	r3, [pc, #244]	@ (8012684 <vTaskSuspend+0x108>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	e000      	b.n	8012596 <vTaskSuspend+0x1a>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	3304      	adds	r3, #4
 801259c:	4618      	mov	r0, r3
 801259e:	f7ff f830 	bl	8011602 <uxListRemove>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d115      	bne.n	80125d4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ac:	4936      	ldr	r1, [pc, #216]	@ (8012688 <vTaskSuspend+0x10c>)
 80125ae:	4613      	mov	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	4413      	add	r3, r2
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	440b      	add	r3, r1
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d10a      	bne.n	80125d4 <vTaskSuspend+0x58>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c2:	2201      	movs	r2, #1
 80125c4:	fa02 f303 	lsl.w	r3, r2, r3
 80125c8:	43da      	mvns	r2, r3
 80125ca:	4b30      	ldr	r3, [pc, #192]	@ (801268c <vTaskSuspend+0x110>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4013      	ands	r3, r2
 80125d0:	4a2e      	ldr	r2, [pc, #184]	@ (801268c <vTaskSuspend+0x110>)
 80125d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d004      	beq.n	80125e6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3318      	adds	r3, #24
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff f80e 	bl	8011602 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	3304      	adds	r3, #4
 80125ea:	4619      	mov	r1, r3
 80125ec:	4828      	ldr	r0, [pc, #160]	@ (8012690 <vTaskSuspend+0x114>)
 80125ee:	f7fe ffab 	bl	8011548 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d103      	bne.n	8012606 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2200      	movs	r2, #0
 8012602:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012606:	f001 f809 	bl	801361c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801260a:	4b22      	ldr	r3, [pc, #136]	@ (8012694 <vTaskSuspend+0x118>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d005      	beq.n	801261e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012612:	f000 ffd1 	bl	80135b8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012616:	f000 fc55 	bl	8012ec4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801261a:	f000 ffff 	bl	801361c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801261e:	4b19      	ldr	r3, [pc, #100]	@ (8012684 <vTaskSuspend+0x108>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	429a      	cmp	r2, r3
 8012626:	d128      	bne.n	801267a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012628:	4b1a      	ldr	r3, [pc, #104]	@ (8012694 <vTaskSuspend+0x118>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d018      	beq.n	8012662 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012630:	4b19      	ldr	r3, [pc, #100]	@ (8012698 <vTaskSuspend+0x11c>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00b      	beq.n	8012650 <vTaskSuspend+0xd4>
	__asm volatile
 8012638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	60bb      	str	r3, [r7, #8]
}
 801264a:	bf00      	nop
 801264c:	bf00      	nop
 801264e:	e7fd      	b.n	801264c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012650:	4b12      	ldr	r3, [pc, #72]	@ (801269c <vTaskSuspend+0x120>)
 8012652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	f3bf 8f4f 	dsb	sy
 801265c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012660:	e00b      	b.n	801267a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012662:	4b0b      	ldr	r3, [pc, #44]	@ (8012690 <vTaskSuspend+0x114>)
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	4b0e      	ldr	r3, [pc, #56]	@ (80126a0 <vTaskSuspend+0x124>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	429a      	cmp	r2, r3
 801266c:	d103      	bne.n	8012676 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801266e:	4b05      	ldr	r3, [pc, #20]	@ (8012684 <vTaskSuspend+0x108>)
 8012670:	2200      	movs	r2, #0
 8012672:	601a      	str	r2, [r3, #0]
	}
 8012674:	e001      	b.n	801267a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012676:	f000 f9dd 	bl	8012a34 <vTaskSwitchContext>
	}
 801267a:	bf00      	nop
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	20001900 	.word	0x20001900
 8012688:	20001904 	.word	0x20001904
 801268c:	20001a08 	.word	0x20001a08
 8012690:	200019ec 	.word	0x200019ec
 8012694:	20001a0c 	.word	0x20001a0c
 8012698:	20001a28 	.word	0x20001a28
 801269c:	e000ed04 	.word	0xe000ed04
 80126a0:	20001a00 	.word	0x20001a00

080126a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80126aa:	4b1f      	ldr	r3, [pc, #124]	@ (8012728 <vTaskStartScheduler+0x84>)
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	2300      	movs	r3, #0
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	2300      	movs	r3, #0
 80126b4:	2280      	movs	r2, #128	@ 0x80
 80126b6:	491d      	ldr	r1, [pc, #116]	@ (801272c <vTaskStartScheduler+0x88>)
 80126b8:	481d      	ldr	r0, [pc, #116]	@ (8012730 <vTaskStartScheduler+0x8c>)
 80126ba:	f7ff fd55 	bl	8012168 <xTaskCreate>
 80126be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d11b      	bne.n	80126fe <vTaskStartScheduler+0x5a>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	60bb      	str	r3, [r7, #8]
}
 80126d8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80126da:	4b16      	ldr	r3, [pc, #88]	@ (8012734 <vTaskStartScheduler+0x90>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	334c      	adds	r3, #76	@ 0x4c
 80126e0:	4a15      	ldr	r2, [pc, #84]	@ (8012738 <vTaskStartScheduler+0x94>)
 80126e2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80126e4:	4b15      	ldr	r3, [pc, #84]	@ (801273c <vTaskStartScheduler+0x98>)
 80126e6:	f04f 32ff 	mov.w	r2, #4294967295
 80126ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80126ec:	4b14      	ldr	r3, [pc, #80]	@ (8012740 <vTaskStartScheduler+0x9c>)
 80126ee:	2201      	movs	r2, #1
 80126f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80126f2:	4b14      	ldr	r3, [pc, #80]	@ (8012744 <vTaskStartScheduler+0xa0>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80126f8:	f000 feba 	bl	8013470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80126fc:	e00f      	b.n	801271e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012704:	d10b      	bne.n	801271e <vTaskStartScheduler+0x7a>
	__asm volatile
 8012706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801270a:	f383 8811 	msr	BASEPRI, r3
 801270e:	f3bf 8f6f 	isb	sy
 8012712:	f3bf 8f4f 	dsb	sy
 8012716:	607b      	str	r3, [r7, #4]
}
 8012718:	bf00      	nop
 801271a:	bf00      	nop
 801271c:	e7fd      	b.n	801271a <vTaskStartScheduler+0x76>
}
 801271e:	bf00      	nop
 8012720:	3710      	adds	r7, #16
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	20001a24 	.word	0x20001a24
 801272c:	08019bb8 	.word	0x08019bb8
 8012730:	08012d1d 	.word	0x08012d1d
 8012734:	20001900 	.word	0x20001900
 8012738:	20000054 	.word	0x20000054
 801273c:	20001a20 	.word	0x20001a20
 8012740:	20001a0c 	.word	0x20001a0c
 8012744:	20001a04 	.word	0x20001a04

08012748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012748:	b480      	push	{r7}
 801274a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801274c:	4b04      	ldr	r3, [pc, #16]	@ (8012760 <vTaskSuspendAll+0x18>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	3301      	adds	r3, #1
 8012752:	4a03      	ldr	r2, [pc, #12]	@ (8012760 <vTaskSuspendAll+0x18>)
 8012754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012756:	bf00      	nop
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr
 8012760:	20001a28 	.word	0x20001a28

08012764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801276a:	2300      	movs	r3, #0
 801276c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801276e:	2300      	movs	r3, #0
 8012770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012772:	4b42      	ldr	r3, [pc, #264]	@ (801287c <xTaskResumeAll+0x118>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10b      	bne.n	8012792 <xTaskResumeAll+0x2e>
	__asm volatile
 801277a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801277e:	f383 8811 	msr	BASEPRI, r3
 8012782:	f3bf 8f6f 	isb	sy
 8012786:	f3bf 8f4f 	dsb	sy
 801278a:	603b      	str	r3, [r7, #0]
}
 801278c:	bf00      	nop
 801278e:	bf00      	nop
 8012790:	e7fd      	b.n	801278e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012792:	f000 ff11 	bl	80135b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012796:	4b39      	ldr	r3, [pc, #228]	@ (801287c <xTaskResumeAll+0x118>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	3b01      	subs	r3, #1
 801279c:	4a37      	ldr	r2, [pc, #220]	@ (801287c <xTaskResumeAll+0x118>)
 801279e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127a0:	4b36      	ldr	r3, [pc, #216]	@ (801287c <xTaskResumeAll+0x118>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d161      	bne.n	801286c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80127a8:	4b35      	ldr	r3, [pc, #212]	@ (8012880 <xTaskResumeAll+0x11c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d05d      	beq.n	801286c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80127b0:	e02e      	b.n	8012810 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127b2:	4b34      	ldr	r3, [pc, #208]	@ (8012884 <xTaskResumeAll+0x120>)
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	3318      	adds	r3, #24
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fe ff1f 	bl	8011602 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	3304      	adds	r3, #4
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7fe ff1a 	bl	8011602 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127d2:	2201      	movs	r2, #1
 80127d4:	409a      	lsls	r2, r3
 80127d6:	4b2c      	ldr	r3, [pc, #176]	@ (8012888 <xTaskResumeAll+0x124>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4313      	orrs	r3, r2
 80127dc:	4a2a      	ldr	r2, [pc, #168]	@ (8012888 <xTaskResumeAll+0x124>)
 80127de:	6013      	str	r3, [r2, #0]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127e4:	4613      	mov	r3, r2
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	4413      	add	r3, r2
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	4a27      	ldr	r2, [pc, #156]	@ (801288c <xTaskResumeAll+0x128>)
 80127ee:	441a      	add	r2, r3
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	3304      	adds	r3, #4
 80127f4:	4619      	mov	r1, r3
 80127f6:	4610      	mov	r0, r2
 80127f8:	f7fe fea6 	bl	8011548 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012800:	4b23      	ldr	r3, [pc, #140]	@ (8012890 <xTaskResumeAll+0x12c>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012806:	429a      	cmp	r2, r3
 8012808:	d302      	bcc.n	8012810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801280a:	4b22      	ldr	r3, [pc, #136]	@ (8012894 <xTaskResumeAll+0x130>)
 801280c:	2201      	movs	r2, #1
 801280e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012810:	4b1c      	ldr	r3, [pc, #112]	@ (8012884 <xTaskResumeAll+0x120>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d1cc      	bne.n	80127b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d001      	beq.n	8012822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801281e:	f000 fb51 	bl	8012ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012822:	4b1d      	ldr	r3, [pc, #116]	@ (8012898 <xTaskResumeAll+0x134>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d010      	beq.n	8012850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801282e:	f000 f847 	bl	80128c0 <xTaskIncrementTick>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d002      	beq.n	801283e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012838:	4b16      	ldr	r3, [pc, #88]	@ (8012894 <xTaskResumeAll+0x130>)
 801283a:	2201      	movs	r2, #1
 801283c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	3b01      	subs	r3, #1
 8012842:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1f1      	bne.n	801282e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801284a:	4b13      	ldr	r3, [pc, #76]	@ (8012898 <xTaskResumeAll+0x134>)
 801284c:	2200      	movs	r2, #0
 801284e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012850:	4b10      	ldr	r3, [pc, #64]	@ (8012894 <xTaskResumeAll+0x130>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d009      	beq.n	801286c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012858:	2301      	movs	r3, #1
 801285a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801285c:	4b0f      	ldr	r3, [pc, #60]	@ (801289c <xTaskResumeAll+0x138>)
 801285e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012862:	601a      	str	r2, [r3, #0]
 8012864:	f3bf 8f4f 	dsb	sy
 8012868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801286c:	f000 fed6 	bl	801361c <vPortExitCritical>

	return xAlreadyYielded;
 8012870:	68bb      	ldr	r3, [r7, #8]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	20001a28 	.word	0x20001a28
 8012880:	20001a00 	.word	0x20001a00
 8012884:	200019c0 	.word	0x200019c0
 8012888:	20001a08 	.word	0x20001a08
 801288c:	20001904 	.word	0x20001904
 8012890:	20001900 	.word	0x20001900
 8012894:	20001a14 	.word	0x20001a14
 8012898:	20001a10 	.word	0x20001a10
 801289c:	e000ed04 	.word	0xe000ed04

080128a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80128a6:	4b05      	ldr	r3, [pc, #20]	@ (80128bc <xTaskGetTickCount+0x1c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80128ac:	687b      	ldr	r3, [r7, #4]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	370c      	adds	r7, #12
 80128b2:	46bd      	mov	sp, r7
 80128b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	20001a04 	.word	0x20001a04

080128c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b086      	sub	sp, #24
 80128c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80128c6:	2300      	movs	r3, #0
 80128c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128ca:	4b4f      	ldr	r3, [pc, #316]	@ (8012a08 <xTaskIncrementTick+0x148>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f040 808f 	bne.w	80129f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80128d4:	4b4d      	ldr	r3, [pc, #308]	@ (8012a0c <xTaskIncrementTick+0x14c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	3301      	adds	r3, #1
 80128da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80128dc:	4a4b      	ldr	r2, [pc, #300]	@ (8012a0c <xTaskIncrementTick+0x14c>)
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d121      	bne.n	801292c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80128e8:	4b49      	ldr	r3, [pc, #292]	@ (8012a10 <xTaskIncrementTick+0x150>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00b      	beq.n	801290a <xTaskIncrementTick+0x4a>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	603b      	str	r3, [r7, #0]
}
 8012904:	bf00      	nop
 8012906:	bf00      	nop
 8012908:	e7fd      	b.n	8012906 <xTaskIncrementTick+0x46>
 801290a:	4b41      	ldr	r3, [pc, #260]	@ (8012a10 <xTaskIncrementTick+0x150>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	4b40      	ldr	r3, [pc, #256]	@ (8012a14 <xTaskIncrementTick+0x154>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4a3e      	ldr	r2, [pc, #248]	@ (8012a10 <xTaskIncrementTick+0x150>)
 8012916:	6013      	str	r3, [r2, #0]
 8012918:	4a3e      	ldr	r2, [pc, #248]	@ (8012a14 <xTaskIncrementTick+0x154>)
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	6013      	str	r3, [r2, #0]
 801291e:	4b3e      	ldr	r3, [pc, #248]	@ (8012a18 <xTaskIncrementTick+0x158>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3301      	adds	r3, #1
 8012924:	4a3c      	ldr	r2, [pc, #240]	@ (8012a18 <xTaskIncrementTick+0x158>)
 8012926:	6013      	str	r3, [r2, #0]
 8012928:	f000 facc 	bl	8012ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801292c:	4b3b      	ldr	r3, [pc, #236]	@ (8012a1c <xTaskIncrementTick+0x15c>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	693a      	ldr	r2, [r7, #16]
 8012932:	429a      	cmp	r2, r3
 8012934:	d348      	bcc.n	80129c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012936:	4b36      	ldr	r3, [pc, #216]	@ (8012a10 <xTaskIncrementTick+0x150>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d104      	bne.n	801294a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012940:	4b36      	ldr	r3, [pc, #216]	@ (8012a1c <xTaskIncrementTick+0x15c>)
 8012942:	f04f 32ff 	mov.w	r2, #4294967295
 8012946:	601a      	str	r2, [r3, #0]
					break;
 8012948:	e03e      	b.n	80129c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801294a:	4b31      	ldr	r3, [pc, #196]	@ (8012a10 <xTaskIncrementTick+0x150>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801295a:	693a      	ldr	r2, [r7, #16]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d203      	bcs.n	801296a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012962:	4a2e      	ldr	r2, [pc, #184]	@ (8012a1c <xTaskIncrementTick+0x15c>)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012968:	e02e      	b.n	80129c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	3304      	adds	r3, #4
 801296e:	4618      	mov	r0, r3
 8012970:	f7fe fe47 	bl	8011602 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012978:	2b00      	cmp	r3, #0
 801297a:	d004      	beq.n	8012986 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	3318      	adds	r3, #24
 8012980:	4618      	mov	r0, r3
 8012982:	f7fe fe3e 	bl	8011602 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801298a:	2201      	movs	r2, #1
 801298c:	409a      	lsls	r2, r3
 801298e:	4b24      	ldr	r3, [pc, #144]	@ (8012a20 <xTaskIncrementTick+0x160>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4313      	orrs	r3, r2
 8012994:	4a22      	ldr	r2, [pc, #136]	@ (8012a20 <xTaskIncrementTick+0x160>)
 8012996:	6013      	str	r3, [r2, #0]
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801299c:	4613      	mov	r3, r2
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	4413      	add	r3, r2
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	4a1f      	ldr	r2, [pc, #124]	@ (8012a24 <xTaskIncrementTick+0x164>)
 80129a6:	441a      	add	r2, r3
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	3304      	adds	r3, #4
 80129ac:	4619      	mov	r1, r3
 80129ae:	4610      	mov	r0, r2
 80129b0:	f7fe fdca 	bl	8011548 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129b8:	4b1b      	ldr	r3, [pc, #108]	@ (8012a28 <xTaskIncrementTick+0x168>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129be:	429a      	cmp	r2, r3
 80129c0:	d3b9      	bcc.n	8012936 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80129c2:	2301      	movs	r3, #1
 80129c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129c6:	e7b6      	b.n	8012936 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80129c8:	4b17      	ldr	r3, [pc, #92]	@ (8012a28 <xTaskIncrementTick+0x168>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129ce:	4915      	ldr	r1, [pc, #84]	@ (8012a24 <xTaskIncrementTick+0x164>)
 80129d0:	4613      	mov	r3, r2
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	440b      	add	r3, r1
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d901      	bls.n	80129e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80129e0:	2301      	movs	r3, #1
 80129e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80129e4:	4b11      	ldr	r3, [pc, #68]	@ (8012a2c <xTaskIncrementTick+0x16c>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d007      	beq.n	80129fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80129ec:	2301      	movs	r3, #1
 80129ee:	617b      	str	r3, [r7, #20]
 80129f0:	e004      	b.n	80129fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80129f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012a30 <xTaskIncrementTick+0x170>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	3301      	adds	r3, #1
 80129f8:	4a0d      	ldr	r2, [pc, #52]	@ (8012a30 <xTaskIncrementTick+0x170>)
 80129fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80129fc:	697b      	ldr	r3, [r7, #20]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3718      	adds	r7, #24
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	20001a28 	.word	0x20001a28
 8012a0c:	20001a04 	.word	0x20001a04
 8012a10:	200019b8 	.word	0x200019b8
 8012a14:	200019bc 	.word	0x200019bc
 8012a18:	20001a18 	.word	0x20001a18
 8012a1c:	20001a20 	.word	0x20001a20
 8012a20:	20001a08 	.word	0x20001a08
 8012a24:	20001904 	.word	0x20001904
 8012a28:	20001900 	.word	0x20001900
 8012a2c:	20001a14 	.word	0x20001a14
 8012a30:	20001a10 	.word	0x20001a10

08012a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012a34:	b480      	push	{r7}
 8012a36:	b087      	sub	sp, #28
 8012a38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8012ae4 <vTaskSwitchContext+0xb0>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d003      	beq.n	8012a4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012a42:	4b29      	ldr	r3, [pc, #164]	@ (8012ae8 <vTaskSwitchContext+0xb4>)
 8012a44:	2201      	movs	r2, #1
 8012a46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012a48:	e045      	b.n	8012ad6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8012a4a:	4b27      	ldr	r3, [pc, #156]	@ (8012ae8 <vTaskSwitchContext+0xb4>)
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a50:	4b26      	ldr	r3, [pc, #152]	@ (8012aec <vTaskSwitchContext+0xb8>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	fab3 f383 	clz	r3, r3
 8012a5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012a5e:	7afb      	ldrb	r3, [r7, #11]
 8012a60:	f1c3 031f 	rsb	r3, r3, #31
 8012a64:	617b      	str	r3, [r7, #20]
 8012a66:	4922      	ldr	r1, [pc, #136]	@ (8012af0 <vTaskSwitchContext+0xbc>)
 8012a68:	697a      	ldr	r2, [r7, #20]
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	440b      	add	r3, r1
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d10b      	bne.n	8012a92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8012a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	607b      	str	r3, [r7, #4]
}
 8012a8c:	bf00      	nop
 8012a8e:	bf00      	nop
 8012a90:	e7fd      	b.n	8012a8e <vTaskSwitchContext+0x5a>
 8012a92:	697a      	ldr	r2, [r7, #20]
 8012a94:	4613      	mov	r3, r2
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	4a14      	ldr	r2, [pc, #80]	@ (8012af0 <vTaskSwitchContext+0xbc>)
 8012a9e:	4413      	add	r3, r2
 8012aa0:	613b      	str	r3, [r7, #16]
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	685a      	ldr	r2, [r3, #4]
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	605a      	str	r2, [r3, #4]
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	685a      	ldr	r2, [r3, #4]
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	3308      	adds	r3, #8
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d104      	bne.n	8012ac2 <vTaskSwitchContext+0x8e>
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	685a      	ldr	r2, [r3, #4]
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	605a      	str	r2, [r3, #4]
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8012af4 <vTaskSwitchContext+0xc0>)
 8012aca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012acc:	4b09      	ldr	r3, [pc, #36]	@ (8012af4 <vTaskSwitchContext+0xc0>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	334c      	adds	r3, #76	@ 0x4c
 8012ad2:	4a09      	ldr	r2, [pc, #36]	@ (8012af8 <vTaskSwitchContext+0xc4>)
 8012ad4:	6013      	str	r3, [r2, #0]
}
 8012ad6:	bf00      	nop
 8012ad8:	371c      	adds	r7, #28
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	20001a28 	.word	0x20001a28
 8012ae8:	20001a14 	.word	0x20001a14
 8012aec:	20001a08 	.word	0x20001a08
 8012af0:	20001904 	.word	0x20001904
 8012af4:	20001900 	.word	0x20001900
 8012af8:	20000054 	.word	0x20000054

08012afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d10b      	bne.n	8012b24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b10:	f383 8811 	msr	BASEPRI, r3
 8012b14:	f3bf 8f6f 	isb	sy
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	60fb      	str	r3, [r7, #12]
}
 8012b1e:	bf00      	nop
 8012b20:	bf00      	nop
 8012b22:	e7fd      	b.n	8012b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b24:	4b07      	ldr	r3, [pc, #28]	@ (8012b44 <vTaskPlaceOnEventList+0x48>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	3318      	adds	r3, #24
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7fe fd2f 	bl	8011590 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b32:	2101      	movs	r1, #1
 8012b34:	6838      	ldr	r0, [r7, #0]
 8012b36:	f000 fba5 	bl	8013284 <prvAddCurrentTaskToDelayedList>
}
 8012b3a:	bf00      	nop
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	20001900 	.word	0x20001900

08012b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b086      	sub	sp, #24
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d10b      	bne.n	8012b76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b62:	f383 8811 	msr	BASEPRI, r3
 8012b66:	f3bf 8f6f 	isb	sy
 8012b6a:	f3bf 8f4f 	dsb	sy
 8012b6e:	60fb      	str	r3, [r7, #12]
}
 8012b70:	bf00      	nop
 8012b72:	bf00      	nop
 8012b74:	e7fd      	b.n	8012b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	3318      	adds	r3, #24
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fe fd41 	bl	8011602 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b80:	4b1d      	ldr	r3, [pc, #116]	@ (8012bf8 <xTaskRemoveFromEventList+0xb0>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d11c      	bne.n	8012bc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fe fd38 	bl	8011602 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b96:	2201      	movs	r2, #1
 8012b98:	409a      	lsls	r2, r3
 8012b9a:	4b18      	ldr	r3, [pc, #96]	@ (8012bfc <xTaskRemoveFromEventList+0xb4>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	4a16      	ldr	r2, [pc, #88]	@ (8012bfc <xTaskRemoveFromEventList+0xb4>)
 8012ba2:	6013      	str	r3, [r2, #0]
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ba8:	4613      	mov	r3, r2
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	4413      	add	r3, r2
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	4a13      	ldr	r2, [pc, #76]	@ (8012c00 <xTaskRemoveFromEventList+0xb8>)
 8012bb2:	441a      	add	r2, r3
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	4619      	mov	r1, r3
 8012bba:	4610      	mov	r0, r2
 8012bbc:	f7fe fcc4 	bl	8011548 <vListInsertEnd>
 8012bc0:	e005      	b.n	8012bce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	3318      	adds	r3, #24
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	480e      	ldr	r0, [pc, #56]	@ (8012c04 <xTaskRemoveFromEventList+0xbc>)
 8012bca:	f7fe fcbd 	bl	8011548 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012c08 <xTaskRemoveFromEventList+0xc0>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d905      	bls.n	8012be8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012be0:	4b0a      	ldr	r3, [pc, #40]	@ (8012c0c <xTaskRemoveFromEventList+0xc4>)
 8012be2:	2201      	movs	r2, #1
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	e001      	b.n	8012bec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012be8:	2300      	movs	r3, #0
 8012bea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012bec:	697b      	ldr	r3, [r7, #20]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3718      	adds	r7, #24
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20001a28 	.word	0x20001a28
 8012bfc:	20001a08 	.word	0x20001a08
 8012c00:	20001904 	.word	0x20001904
 8012c04:	200019c0 	.word	0x200019c0
 8012c08:	20001900 	.word	0x20001900
 8012c0c:	20001a14 	.word	0x20001a14

08012c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012c18:	4b06      	ldr	r3, [pc, #24]	@ (8012c34 <vTaskInternalSetTimeOutState+0x24>)
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012c20:	4b05      	ldr	r3, [pc, #20]	@ (8012c38 <vTaskInternalSetTimeOutState+0x28>)
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	605a      	str	r2, [r3, #4]
}
 8012c28:	bf00      	nop
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr
 8012c34:	20001a18 	.word	0x20001a18
 8012c38:	20001a04 	.word	0x20001a04

08012c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b088      	sub	sp, #32
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10b      	bne.n	8012c64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c50:	f383 8811 	msr	BASEPRI, r3
 8012c54:	f3bf 8f6f 	isb	sy
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	613b      	str	r3, [r7, #16]
}
 8012c5e:	bf00      	nop
 8012c60:	bf00      	nop
 8012c62:	e7fd      	b.n	8012c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10b      	bne.n	8012c82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	60fb      	str	r3, [r7, #12]
}
 8012c7c:	bf00      	nop
 8012c7e:	bf00      	nop
 8012c80:	e7fd      	b.n	8012c7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012c82:	f000 fc99 	bl	80135b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012c86:	4b1d      	ldr	r3, [pc, #116]	@ (8012cfc <xTaskCheckForTimeOut+0xc0>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	69ba      	ldr	r2, [r7, #24]
 8012c92:	1ad3      	subs	r3, r2, r3
 8012c94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c9e:	d102      	bne.n	8012ca6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	61fb      	str	r3, [r7, #28]
 8012ca4:	e023      	b.n	8012cee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	4b15      	ldr	r3, [pc, #84]	@ (8012d00 <xTaskCheckForTimeOut+0xc4>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d007      	beq.n	8012cc2 <xTaskCheckForTimeOut+0x86>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	69ba      	ldr	r2, [r7, #24]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d302      	bcc.n	8012cc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	61fb      	str	r3, [r7, #28]
 8012cc0:	e015      	b.n	8012cee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	697a      	ldr	r2, [r7, #20]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d20b      	bcs.n	8012ce4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	1ad2      	subs	r2, r2, r3
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff ff99 	bl	8012c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	61fb      	str	r3, [r7, #28]
 8012ce2:	e004      	b.n	8012cee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012cea:	2301      	movs	r3, #1
 8012cec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012cee:	f000 fc95 	bl	801361c <vPortExitCritical>

	return xReturn;
 8012cf2:	69fb      	ldr	r3, [r7, #28]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3720      	adds	r7, #32
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	20001a04 	.word	0x20001a04
 8012d00:	20001a18 	.word	0x20001a18

08012d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012d04:	b480      	push	{r7}
 8012d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012d08:	4b03      	ldr	r3, [pc, #12]	@ (8012d18 <vTaskMissedYield+0x14>)
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]
}
 8012d0e:	bf00      	nop
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr
 8012d18:	20001a14 	.word	0x20001a14

08012d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012d24:	f000 f852 	bl	8012dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012d28:	4b06      	ldr	r3, [pc, #24]	@ (8012d44 <prvIdleTask+0x28>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d9f9      	bls.n	8012d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012d30:	4b05      	ldr	r3, [pc, #20]	@ (8012d48 <prvIdleTask+0x2c>)
 8012d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d36:	601a      	str	r2, [r3, #0]
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012d40:	e7f0      	b.n	8012d24 <prvIdleTask+0x8>
 8012d42:	bf00      	nop
 8012d44:	20001904 	.word	0x20001904
 8012d48:	e000ed04 	.word	0xe000ed04

08012d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d52:	2300      	movs	r3, #0
 8012d54:	607b      	str	r3, [r7, #4]
 8012d56:	e00c      	b.n	8012d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	4613      	mov	r3, r2
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	4413      	add	r3, r2
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	4a12      	ldr	r2, [pc, #72]	@ (8012dac <prvInitialiseTaskLists+0x60>)
 8012d64:	4413      	add	r3, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fe fbc1 	bl	80114ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	607b      	str	r3, [r7, #4]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2b06      	cmp	r3, #6
 8012d76:	d9ef      	bls.n	8012d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012d78:	480d      	ldr	r0, [pc, #52]	@ (8012db0 <prvInitialiseTaskLists+0x64>)
 8012d7a:	f7fe fbb8 	bl	80114ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012d7e:	480d      	ldr	r0, [pc, #52]	@ (8012db4 <prvInitialiseTaskLists+0x68>)
 8012d80:	f7fe fbb5 	bl	80114ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012d84:	480c      	ldr	r0, [pc, #48]	@ (8012db8 <prvInitialiseTaskLists+0x6c>)
 8012d86:	f7fe fbb2 	bl	80114ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012d8a:	480c      	ldr	r0, [pc, #48]	@ (8012dbc <prvInitialiseTaskLists+0x70>)
 8012d8c:	f7fe fbaf 	bl	80114ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012d90:	480b      	ldr	r0, [pc, #44]	@ (8012dc0 <prvInitialiseTaskLists+0x74>)
 8012d92:	f7fe fbac 	bl	80114ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012d96:	4b0b      	ldr	r3, [pc, #44]	@ (8012dc4 <prvInitialiseTaskLists+0x78>)
 8012d98:	4a05      	ldr	r2, [pc, #20]	@ (8012db0 <prvInitialiseTaskLists+0x64>)
 8012d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc8 <prvInitialiseTaskLists+0x7c>)
 8012d9e:	4a05      	ldr	r2, [pc, #20]	@ (8012db4 <prvInitialiseTaskLists+0x68>)
 8012da0:	601a      	str	r2, [r3, #0]
}
 8012da2:	bf00      	nop
 8012da4:	3708      	adds	r7, #8
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	20001904 	.word	0x20001904
 8012db0:	20001990 	.word	0x20001990
 8012db4:	200019a4 	.word	0x200019a4
 8012db8:	200019c0 	.word	0x200019c0
 8012dbc:	200019d4 	.word	0x200019d4
 8012dc0:	200019ec 	.word	0x200019ec
 8012dc4:	200019b8 	.word	0x200019b8
 8012dc8:	200019bc 	.word	0x200019bc

08012dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012dd2:	e019      	b.n	8012e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012dd4:	f000 fbf0 	bl	80135b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dd8:	4b10      	ldr	r3, [pc, #64]	@ (8012e1c <prvCheckTasksWaitingTermination+0x50>)
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	3304      	adds	r3, #4
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fe fc0c 	bl	8011602 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012dea:	4b0d      	ldr	r3, [pc, #52]	@ (8012e20 <prvCheckTasksWaitingTermination+0x54>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3b01      	subs	r3, #1
 8012df0:	4a0b      	ldr	r2, [pc, #44]	@ (8012e20 <prvCheckTasksWaitingTermination+0x54>)
 8012df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012df4:	4b0b      	ldr	r3, [pc, #44]	@ (8012e24 <prvCheckTasksWaitingTermination+0x58>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8012e24 <prvCheckTasksWaitingTermination+0x58>)
 8012dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012dfe:	f000 fc0d 	bl	801361c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f000 f848 	bl	8012e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e08:	4b06      	ldr	r3, [pc, #24]	@ (8012e24 <prvCheckTasksWaitingTermination+0x58>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d1e1      	bne.n	8012dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012e10:	bf00      	nop
 8012e12:	bf00      	nop
 8012e14:	3708      	adds	r7, #8
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	200019d4 	.word	0x200019d4
 8012e20:	20001a00 	.word	0x20001a00
 8012e24:	200019e8 	.word	0x200019e8

08012e28 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012e28:	b480      	push	{r7}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012e30:	2300      	movs	r3, #0
 8012e32:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012e34:	e005      	b.n	8012e42 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	2ba5      	cmp	r3, #165	@ 0xa5
 8012e48:	d0f5      	beq.n	8012e36 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	089b      	lsrs	r3, r3, #2
 8012e4e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	b29b      	uxth	r3, r3
	}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3714      	adds	r7, #20
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr

08012e60 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <uxTaskGetStackHighWaterMark+0x14>
 8012e6e:	4b09      	ldr	r3, [pc, #36]	@ (8012e94 <uxTaskGetStackHighWaterMark+0x34>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	e000      	b.n	8012e76 <uxTaskGetStackHighWaterMark+0x16>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e7c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8012e7e:	6938      	ldr	r0, [r7, #16]
 8012e80:	f7ff ffd2 	bl	8012e28 <prvTaskCheckFreeStackSpace>
 8012e84:	4603      	mov	r3, r0
 8012e86:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8012e88:	68fb      	ldr	r3, [r7, #12]
	}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3718      	adds	r7, #24
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	20001900 	.word	0x20001900

08012e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	334c      	adds	r3, #76	@ 0x4c
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f001 fe75 	bl	8014b94 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 fd72 	bl	8013998 <vPortFree>
			vPortFree( pxTCB );
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 fd6f 	bl	8013998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012eba:	bf00      	nop
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eca:	4b0c      	ldr	r3, [pc, #48]	@ (8012efc <prvResetNextTaskUnblockTime+0x38>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d104      	bne.n	8012ede <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8012f00 <prvResetNextTaskUnblockTime+0x3c>)
 8012ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8012eda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012edc:	e008      	b.n	8012ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ede:	4b07      	ldr	r3, [pc, #28]	@ (8012efc <prvResetNextTaskUnblockTime+0x38>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	4a04      	ldr	r2, [pc, #16]	@ (8012f00 <prvResetNextTaskUnblockTime+0x3c>)
 8012eee:	6013      	str	r3, [r2, #0]
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	200019b8 	.word	0x200019b8
 8012f00:	20001a20 	.word	0x20001a20

08012f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012f38 <xTaskGetSchedulerState+0x34>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d102      	bne.n	8012f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012f12:	2301      	movs	r3, #1
 8012f14:	607b      	str	r3, [r7, #4]
 8012f16:	e008      	b.n	8012f2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f18:	4b08      	ldr	r3, [pc, #32]	@ (8012f3c <xTaskGetSchedulerState+0x38>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d102      	bne.n	8012f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012f20:	2302      	movs	r3, #2
 8012f22:	607b      	str	r3, [r7, #4]
 8012f24:	e001      	b.n	8012f2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012f26:	2300      	movs	r3, #0
 8012f28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012f2a:	687b      	ldr	r3, [r7, #4]
	}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	370c      	adds	r7, #12
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	20001a0c 	.word	0x20001a0c
 8012f3c:	20001a28 	.word	0x20001a28

08012f40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d05e      	beq.n	8013014 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f5a:	4b31      	ldr	r3, [pc, #196]	@ (8013020 <xTaskPriorityInherit+0xe0>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d24e      	bcs.n	8013002 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	699b      	ldr	r3, [r3, #24]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	db06      	blt.n	8012f7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8013020 <xTaskPriorityInherit+0xe0>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f72:	f1c3 0207 	rsb	r2, r3, #7
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	6959      	ldr	r1, [r3, #20]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f82:	4613      	mov	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	4a26      	ldr	r2, [pc, #152]	@ (8013024 <xTaskPriorityInherit+0xe4>)
 8012f8c:	4413      	add	r3, r2
 8012f8e:	4299      	cmp	r1, r3
 8012f90:	d12f      	bne.n	8012ff2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	3304      	adds	r3, #4
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fe fb33 	bl	8011602 <uxListRemove>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d10a      	bne.n	8012fb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8012fac:	43da      	mvns	r2, r3
 8012fae:	4b1e      	ldr	r3, [pc, #120]	@ (8013028 <xTaskPriorityInherit+0xe8>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4013      	ands	r3, r2
 8012fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8013028 <xTaskPriorityInherit+0xe8>)
 8012fb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012fb8:	4b19      	ldr	r3, [pc, #100]	@ (8013020 <xTaskPriorityInherit+0xe0>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	409a      	lsls	r2, r3
 8012fca:	4b17      	ldr	r3, [pc, #92]	@ (8013028 <xTaskPriorityInherit+0xe8>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4313      	orrs	r3, r2
 8012fd0:	4a15      	ldr	r2, [pc, #84]	@ (8013028 <xTaskPriorityInherit+0xe8>)
 8012fd2:	6013      	str	r3, [r2, #0]
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fd8:	4613      	mov	r3, r2
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	4413      	add	r3, r2
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	4a10      	ldr	r2, [pc, #64]	@ (8013024 <xTaskPriorityInherit+0xe4>)
 8012fe2:	441a      	add	r2, r3
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	4619      	mov	r1, r3
 8012fea:	4610      	mov	r0, r2
 8012fec:	f7fe faac 	bl	8011548 <vListInsertEnd>
 8012ff0:	e004      	b.n	8012ffc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8013020 <xTaskPriorityInherit+0xe0>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	60fb      	str	r3, [r7, #12]
 8013000:	e008      	b.n	8013014 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013006:	4b06      	ldr	r3, [pc, #24]	@ (8013020 <xTaskPriorityInherit+0xe0>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801300c:	429a      	cmp	r2, r3
 801300e:	d201      	bcs.n	8013014 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013010:	2301      	movs	r3, #1
 8013012:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013014:	68fb      	ldr	r3, [r7, #12]
	}
 8013016:	4618      	mov	r0, r3
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	20001900 	.word	0x20001900
 8013024:	20001904 	.word	0x20001904
 8013028:	20001a08 	.word	0x20001a08

0801302c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013038:	2300      	movs	r3, #0
 801303a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d070      	beq.n	8013124 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013042:	4b3b      	ldr	r3, [pc, #236]	@ (8013130 <xTaskPriorityDisinherit+0x104>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	693a      	ldr	r2, [r7, #16]
 8013048:	429a      	cmp	r2, r3
 801304a:	d00b      	beq.n	8013064 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	60fb      	str	r3, [r7, #12]
}
 801305e:	bf00      	nop
 8013060:	bf00      	nop
 8013062:	e7fd      	b.n	8013060 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10b      	bne.n	8013084 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013070:	f383 8811 	msr	BASEPRI, r3
 8013074:	f3bf 8f6f 	isb	sy
 8013078:	f3bf 8f4f 	dsb	sy
 801307c:	60bb      	str	r3, [r7, #8]
}
 801307e:	bf00      	nop
 8013080:	bf00      	nop
 8013082:	e7fd      	b.n	8013080 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013088:	1e5a      	subs	r2, r3, #1
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013096:	429a      	cmp	r2, r3
 8013098:	d044      	beq.n	8013124 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d140      	bne.n	8013124 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	3304      	adds	r3, #4
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fe faab 	bl	8011602 <uxListRemove>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d115      	bne.n	80130de <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130b6:	491f      	ldr	r1, [pc, #124]	@ (8013134 <xTaskPriorityDisinherit+0x108>)
 80130b8:	4613      	mov	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	4413      	add	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	440b      	add	r3, r1
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10a      	bne.n	80130de <xTaskPriorityDisinherit+0xb2>
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130cc:	2201      	movs	r2, #1
 80130ce:	fa02 f303 	lsl.w	r3, r2, r3
 80130d2:	43da      	mvns	r2, r3
 80130d4:	4b18      	ldr	r3, [pc, #96]	@ (8013138 <xTaskPriorityDisinherit+0x10c>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4013      	ands	r3, r2
 80130da:	4a17      	ldr	r2, [pc, #92]	@ (8013138 <xTaskPriorityDisinherit+0x10c>)
 80130dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ea:	f1c3 0207 	rsb	r2, r3, #7
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130f6:	2201      	movs	r2, #1
 80130f8:	409a      	lsls	r2, r3
 80130fa:	4b0f      	ldr	r3, [pc, #60]	@ (8013138 <xTaskPriorityDisinherit+0x10c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	4313      	orrs	r3, r2
 8013100:	4a0d      	ldr	r2, [pc, #52]	@ (8013138 <xTaskPriorityDisinherit+0x10c>)
 8013102:	6013      	str	r3, [r2, #0]
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013108:	4613      	mov	r3, r2
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	4413      	add	r3, r2
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	4a08      	ldr	r2, [pc, #32]	@ (8013134 <xTaskPriorityDisinherit+0x108>)
 8013112:	441a      	add	r2, r3
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	3304      	adds	r3, #4
 8013118:	4619      	mov	r1, r3
 801311a:	4610      	mov	r0, r2
 801311c:	f7fe fa14 	bl	8011548 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013120:	2301      	movs	r3, #1
 8013122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013124:	697b      	ldr	r3, [r7, #20]
	}
 8013126:	4618      	mov	r0, r3
 8013128:	3718      	adds	r7, #24
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	20001900 	.word	0x20001900
 8013134:	20001904 	.word	0x20001904
 8013138:	20001a08 	.word	0x20001a08

0801313c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801313c:	b580      	push	{r7, lr}
 801313e:	b088      	sub	sp, #32
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801314a:	2301      	movs	r3, #1
 801314c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d079      	beq.n	8013248 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10b      	bne.n	8013174 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	60fb      	str	r3, [r7, #12]
}
 801316e:	bf00      	nop
 8013170:	bf00      	nop
 8013172:	e7fd      	b.n	8013170 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	429a      	cmp	r2, r3
 801317c:	d902      	bls.n	8013184 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	61fb      	str	r3, [r7, #28]
 8013182:	e002      	b.n	801318a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013188:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801318e:	69fa      	ldr	r2, [r7, #28]
 8013190:	429a      	cmp	r2, r3
 8013192:	d059      	beq.n	8013248 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013198:	697a      	ldr	r2, [r7, #20]
 801319a:	429a      	cmp	r2, r3
 801319c:	d154      	bne.n	8013248 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801319e:	4b2c      	ldr	r3, [pc, #176]	@ (8013250 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	69ba      	ldr	r2, [r7, #24]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d10b      	bne.n	80131c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80131a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ac:	f383 8811 	msr	BASEPRI, r3
 80131b0:	f3bf 8f6f 	isb	sy
 80131b4:	f3bf 8f4f 	dsb	sy
 80131b8:	60bb      	str	r3, [r7, #8]
}
 80131ba:	bf00      	nop
 80131bc:	bf00      	nop
 80131be:	e7fd      	b.n	80131bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80131c0:	69bb      	ldr	r3, [r7, #24]
 80131c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	69fa      	ldr	r2, [r7, #28]
 80131ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	db04      	blt.n	80131de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	f1c3 0207 	rsb	r2, r3, #7
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	6959      	ldr	r1, [r3, #20]
 80131e2:	693a      	ldr	r2, [r7, #16]
 80131e4:	4613      	mov	r3, r2
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4413      	add	r3, r2
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	4a19      	ldr	r2, [pc, #100]	@ (8013254 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80131ee:	4413      	add	r3, r2
 80131f0:	4299      	cmp	r1, r3
 80131f2:	d129      	bne.n	8013248 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	3304      	adds	r3, #4
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fe fa02 	bl	8011602 <uxListRemove>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d10a      	bne.n	801321a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013204:	69bb      	ldr	r3, [r7, #24]
 8013206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013208:	2201      	movs	r2, #1
 801320a:	fa02 f303 	lsl.w	r3, r2, r3
 801320e:	43da      	mvns	r2, r3
 8013210:	4b11      	ldr	r3, [pc, #68]	@ (8013258 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4013      	ands	r3, r2
 8013216:	4a10      	ldr	r2, [pc, #64]	@ (8013258 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013218:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801321e:	2201      	movs	r2, #1
 8013220:	409a      	lsls	r2, r3
 8013222:	4b0d      	ldr	r3, [pc, #52]	@ (8013258 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	4313      	orrs	r3, r2
 8013228:	4a0b      	ldr	r2, [pc, #44]	@ (8013258 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013230:	4613      	mov	r3, r2
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	4413      	add	r3, r2
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4a06      	ldr	r2, [pc, #24]	@ (8013254 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801323a:	441a      	add	r2, r3
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	3304      	adds	r3, #4
 8013240:	4619      	mov	r1, r3
 8013242:	4610      	mov	r0, r2
 8013244:	f7fe f980 	bl	8011548 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013248:	bf00      	nop
 801324a:	3720      	adds	r7, #32
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	20001900 	.word	0x20001900
 8013254:	20001904 	.word	0x20001904
 8013258:	20001a08 	.word	0x20001a08

0801325c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801325c:	b480      	push	{r7}
 801325e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013260:	4b07      	ldr	r3, [pc, #28]	@ (8013280 <pvTaskIncrementMutexHeldCount+0x24>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d004      	beq.n	8013272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013268:	4b05      	ldr	r3, [pc, #20]	@ (8013280 <pvTaskIncrementMutexHeldCount+0x24>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801326e:	3201      	adds	r2, #1
 8013270:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8013272:	4b03      	ldr	r3, [pc, #12]	@ (8013280 <pvTaskIncrementMutexHeldCount+0x24>)
 8013274:	681b      	ldr	r3, [r3, #0]
	}
 8013276:	4618      	mov	r0, r3
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr
 8013280:	20001900 	.word	0x20001900

08013284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801328e:	4b29      	ldr	r3, [pc, #164]	@ (8013334 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013294:	4b28      	ldr	r3, [pc, #160]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	3304      	adds	r3, #4
 801329a:	4618      	mov	r0, r3
 801329c:	f7fe f9b1 	bl	8011602 <uxListRemove>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10b      	bne.n	80132be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80132a6:	4b24      	ldr	r3, [pc, #144]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ac:	2201      	movs	r2, #1
 80132ae:	fa02 f303 	lsl.w	r3, r2, r3
 80132b2:	43da      	mvns	r2, r3
 80132b4:	4b21      	ldr	r3, [pc, #132]	@ (801333c <prvAddCurrentTaskToDelayedList+0xb8>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	4013      	ands	r3, r2
 80132ba:	4a20      	ldr	r2, [pc, #128]	@ (801333c <prvAddCurrentTaskToDelayedList+0xb8>)
 80132bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c4:	d10a      	bne.n	80132dc <prvAddCurrentTaskToDelayedList+0x58>
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d007      	beq.n	80132dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132cc:	4b1a      	ldr	r3, [pc, #104]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	3304      	adds	r3, #4
 80132d2:	4619      	mov	r1, r3
 80132d4:	481a      	ldr	r0, [pc, #104]	@ (8013340 <prvAddCurrentTaskToDelayedList+0xbc>)
 80132d6:	f7fe f937 	bl	8011548 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80132da:	e026      	b.n	801332a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4413      	add	r3, r2
 80132e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80132e4:	4b14      	ldr	r3, [pc, #80]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d209      	bcs.n	8013308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132f4:	4b13      	ldr	r3, [pc, #76]	@ (8013344 <prvAddCurrentTaskToDelayedList+0xc0>)
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	3304      	adds	r3, #4
 80132fe:	4619      	mov	r1, r3
 8013300:	4610      	mov	r0, r2
 8013302:	f7fe f945 	bl	8011590 <vListInsert>
}
 8013306:	e010      	b.n	801332a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013308:	4b0f      	ldr	r3, [pc, #60]	@ (8013348 <prvAddCurrentTaskToDelayedList+0xc4>)
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	4b0a      	ldr	r3, [pc, #40]	@ (8013338 <prvAddCurrentTaskToDelayedList+0xb4>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	3304      	adds	r3, #4
 8013312:	4619      	mov	r1, r3
 8013314:	4610      	mov	r0, r2
 8013316:	f7fe f93b 	bl	8011590 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801331a:	4b0c      	ldr	r3, [pc, #48]	@ (801334c <prvAddCurrentTaskToDelayedList+0xc8>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68ba      	ldr	r2, [r7, #8]
 8013320:	429a      	cmp	r2, r3
 8013322:	d202      	bcs.n	801332a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013324:	4a09      	ldr	r2, [pc, #36]	@ (801334c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	6013      	str	r3, [r2, #0]
}
 801332a:	bf00      	nop
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	20001a04 	.word	0x20001a04
 8013338:	20001900 	.word	0x20001900
 801333c:	20001a08 	.word	0x20001a08
 8013340:	200019ec 	.word	0x200019ec
 8013344:	200019bc 	.word	0x200019bc
 8013348:	200019b8 	.word	0x200019b8
 801334c:	20001a20 	.word	0x20001a20

08013350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013350:	b480      	push	{r7}
 8013352:	b085      	sub	sp, #20
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	3b04      	subs	r3, #4
 8013360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	3b04      	subs	r3, #4
 801336e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	f023 0201 	bic.w	r2, r3, #1
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	3b04      	subs	r3, #4
 801337e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013380:	4a0c      	ldr	r2, [pc, #48]	@ (80133b4 <pxPortInitialiseStack+0x64>)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3b14      	subs	r3, #20
 801338a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	3b04      	subs	r3, #4
 8013396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f06f 0202 	mvn.w	r2, #2
 801339e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	3b20      	subs	r3, #32
 80133a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80133a6:	68fb      	ldr	r3, [r7, #12]
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3714      	adds	r7, #20
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr
 80133b4:	080133b9 	.word	0x080133b9

080133b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80133b8:	b480      	push	{r7}
 80133ba:	b085      	sub	sp, #20
 80133bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80133c2:	4b13      	ldr	r3, [pc, #76]	@ (8013410 <prvTaskExitError+0x58>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ca:	d00b      	beq.n	80133e4 <prvTaskExitError+0x2c>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	60fb      	str	r3, [r7, #12]
}
 80133de:	bf00      	nop
 80133e0:	bf00      	nop
 80133e2:	e7fd      	b.n	80133e0 <prvTaskExitError+0x28>
	__asm volatile
 80133e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e8:	f383 8811 	msr	BASEPRI, r3
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	60bb      	str	r3, [r7, #8]
}
 80133f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80133f8:	bf00      	nop
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d0fc      	beq.n	80133fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013400:	bf00      	nop
 8013402:	bf00      	nop
 8013404:	3714      	adds	r7, #20
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	20000044 	.word	0x20000044
	...

08013420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013420:	4b07      	ldr	r3, [pc, #28]	@ (8013440 <pxCurrentTCBConst2>)
 8013422:	6819      	ldr	r1, [r3, #0]
 8013424:	6808      	ldr	r0, [r1, #0]
 8013426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342a:	f380 8809 	msr	PSP, r0
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f04f 0000 	mov.w	r0, #0
 8013436:	f380 8811 	msr	BASEPRI, r0
 801343a:	4770      	bx	lr
 801343c:	f3af 8000 	nop.w

08013440 <pxCurrentTCBConst2>:
 8013440:	20001900 	.word	0x20001900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013444:	bf00      	nop
 8013446:	bf00      	nop

08013448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013448:	4808      	ldr	r0, [pc, #32]	@ (801346c <prvPortStartFirstTask+0x24>)
 801344a:	6800      	ldr	r0, [r0, #0]
 801344c:	6800      	ldr	r0, [r0, #0]
 801344e:	f380 8808 	msr	MSP, r0
 8013452:	f04f 0000 	mov.w	r0, #0
 8013456:	f380 8814 	msr	CONTROL, r0
 801345a:	b662      	cpsie	i
 801345c:	b661      	cpsie	f
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	df00      	svc	0
 8013468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801346a:	bf00      	nop
 801346c:	e000ed08 	.word	0xe000ed08

08013470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013476:	4b47      	ldr	r3, [pc, #284]	@ (8013594 <xPortStartScheduler+0x124>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	4a47      	ldr	r2, [pc, #284]	@ (8013598 <xPortStartScheduler+0x128>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d10b      	bne.n	8013498 <xPortStartScheduler+0x28>
	__asm volatile
 8013480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	60fb      	str	r3, [r7, #12]
}
 8013492:	bf00      	nop
 8013494:	bf00      	nop
 8013496:	e7fd      	b.n	8013494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013498:	4b3e      	ldr	r3, [pc, #248]	@ (8013594 <xPortStartScheduler+0x124>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4a3f      	ldr	r2, [pc, #252]	@ (801359c <xPortStartScheduler+0x12c>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d10b      	bne.n	80134ba <xPortStartScheduler+0x4a>
	__asm volatile
 80134a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a6:	f383 8811 	msr	BASEPRI, r3
 80134aa:	f3bf 8f6f 	isb	sy
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	613b      	str	r3, [r7, #16]
}
 80134b4:	bf00      	nop
 80134b6:	bf00      	nop
 80134b8:	e7fd      	b.n	80134b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80134ba:	4b39      	ldr	r3, [pc, #228]	@ (80135a0 <xPortStartScheduler+0x130>)
 80134bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	22ff      	movs	r2, #255	@ 0xff
 80134ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134d4:	78fb      	ldrb	r3, [r7, #3]
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	4b31      	ldr	r3, [pc, #196]	@ (80135a4 <xPortStartScheduler+0x134>)
 80134e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80134e2:	4b31      	ldr	r3, [pc, #196]	@ (80135a8 <xPortStartScheduler+0x138>)
 80134e4:	2207      	movs	r2, #7
 80134e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134e8:	e009      	b.n	80134fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80134ea:	4b2f      	ldr	r3, [pc, #188]	@ (80135a8 <xPortStartScheduler+0x138>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	3b01      	subs	r3, #1
 80134f0:	4a2d      	ldr	r2, [pc, #180]	@ (80135a8 <xPortStartScheduler+0x138>)
 80134f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134f4:	78fb      	ldrb	r3, [r7, #3]
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	005b      	lsls	r3, r3, #1
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134fe:	78fb      	ldrb	r3, [r7, #3]
 8013500:	b2db      	uxtb	r3, r3
 8013502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013506:	2b80      	cmp	r3, #128	@ 0x80
 8013508:	d0ef      	beq.n	80134ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801350a:	4b27      	ldr	r3, [pc, #156]	@ (80135a8 <xPortStartScheduler+0x138>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f1c3 0307 	rsb	r3, r3, #7
 8013512:	2b04      	cmp	r3, #4
 8013514:	d00b      	beq.n	801352e <xPortStartScheduler+0xbe>
	__asm volatile
 8013516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801351a:	f383 8811 	msr	BASEPRI, r3
 801351e:	f3bf 8f6f 	isb	sy
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	60bb      	str	r3, [r7, #8]
}
 8013528:	bf00      	nop
 801352a:	bf00      	nop
 801352c:	e7fd      	b.n	801352a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801352e:	4b1e      	ldr	r3, [pc, #120]	@ (80135a8 <xPortStartScheduler+0x138>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	021b      	lsls	r3, r3, #8
 8013534:	4a1c      	ldr	r2, [pc, #112]	@ (80135a8 <xPortStartScheduler+0x138>)
 8013536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013538:	4b1b      	ldr	r3, [pc, #108]	@ (80135a8 <xPortStartScheduler+0x138>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013540:	4a19      	ldr	r2, [pc, #100]	@ (80135a8 <xPortStartScheduler+0x138>)
 8013542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	b2da      	uxtb	r2, r3
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801354c:	4b17      	ldr	r3, [pc, #92]	@ (80135ac <xPortStartScheduler+0x13c>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a16      	ldr	r2, [pc, #88]	@ (80135ac <xPortStartScheduler+0x13c>)
 8013552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013558:	4b14      	ldr	r3, [pc, #80]	@ (80135ac <xPortStartScheduler+0x13c>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a13      	ldr	r2, [pc, #76]	@ (80135ac <xPortStartScheduler+0x13c>)
 801355e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013564:	f000 f8da 	bl	801371c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013568:	4b11      	ldr	r3, [pc, #68]	@ (80135b0 <xPortStartScheduler+0x140>)
 801356a:	2200      	movs	r2, #0
 801356c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801356e:	f000 f8f9 	bl	8013764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013572:	4b10      	ldr	r3, [pc, #64]	@ (80135b4 <xPortStartScheduler+0x144>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	4a0f      	ldr	r2, [pc, #60]	@ (80135b4 <xPortStartScheduler+0x144>)
 8013578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801357c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801357e:	f7ff ff63 	bl	8013448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013582:	f7ff fa57 	bl	8012a34 <vTaskSwitchContext>
	prvTaskExitError();
 8013586:	f7ff ff17 	bl	80133b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801358a:	2300      	movs	r3, #0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3718      	adds	r7, #24
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	e000ed00 	.word	0xe000ed00
 8013598:	410fc271 	.word	0x410fc271
 801359c:	410fc270 	.word	0x410fc270
 80135a0:	e000e400 	.word	0xe000e400
 80135a4:	20001a2c 	.word	0x20001a2c
 80135a8:	20001a30 	.word	0x20001a30
 80135ac:	e000ed20 	.word	0xe000ed20
 80135b0:	20000044 	.word	0x20000044
 80135b4:	e000ef34 	.word	0xe000ef34

080135b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
	__asm volatile
 80135be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135c2:	f383 8811 	msr	BASEPRI, r3
 80135c6:	f3bf 8f6f 	isb	sy
 80135ca:	f3bf 8f4f 	dsb	sy
 80135ce:	607b      	str	r3, [r7, #4]
}
 80135d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80135d2:	4b10      	ldr	r3, [pc, #64]	@ (8013614 <vPortEnterCritical+0x5c>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	3301      	adds	r3, #1
 80135d8:	4a0e      	ldr	r2, [pc, #56]	@ (8013614 <vPortEnterCritical+0x5c>)
 80135da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80135dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013614 <vPortEnterCritical+0x5c>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d110      	bne.n	8013606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80135e4:	4b0c      	ldr	r3, [pc, #48]	@ (8013618 <vPortEnterCritical+0x60>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00b      	beq.n	8013606 <vPortEnterCritical+0x4e>
	__asm volatile
 80135ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	603b      	str	r3, [r7, #0]
}
 8013600:	bf00      	nop
 8013602:	bf00      	nop
 8013604:	e7fd      	b.n	8013602 <vPortEnterCritical+0x4a>
	}
}
 8013606:	bf00      	nop
 8013608:	370c      	adds	r7, #12
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
 8013612:	bf00      	nop
 8013614:	20000044 	.word	0x20000044
 8013618:	e000ed04 	.word	0xe000ed04

0801361c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013622:	4b12      	ldr	r3, [pc, #72]	@ (801366c <vPortExitCritical+0x50>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d10b      	bne.n	8013642 <vPortExitCritical+0x26>
	__asm volatile
 801362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801362e:	f383 8811 	msr	BASEPRI, r3
 8013632:	f3bf 8f6f 	isb	sy
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	607b      	str	r3, [r7, #4]
}
 801363c:	bf00      	nop
 801363e:	bf00      	nop
 8013640:	e7fd      	b.n	801363e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013642:	4b0a      	ldr	r3, [pc, #40]	@ (801366c <vPortExitCritical+0x50>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	3b01      	subs	r3, #1
 8013648:	4a08      	ldr	r2, [pc, #32]	@ (801366c <vPortExitCritical+0x50>)
 801364a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801364c:	4b07      	ldr	r3, [pc, #28]	@ (801366c <vPortExitCritical+0x50>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d105      	bne.n	8013660 <vPortExitCritical+0x44>
 8013654:	2300      	movs	r3, #0
 8013656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	f383 8811 	msr	BASEPRI, r3
}
 801365e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013660:	bf00      	nop
 8013662:	370c      	adds	r7, #12
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr
 801366c:	20000044 	.word	0x20000044

08013670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013670:	f3ef 8009 	mrs	r0, PSP
 8013674:	f3bf 8f6f 	isb	sy
 8013678:	4b15      	ldr	r3, [pc, #84]	@ (80136d0 <pxCurrentTCBConst>)
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	f01e 0f10 	tst.w	lr, #16
 8013680:	bf08      	it	eq
 8013682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368a:	6010      	str	r0, [r2, #0]
 801368c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013694:	f380 8811 	msr	BASEPRI, r0
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	f7ff f9c8 	bl	8012a34 <vTaskSwitchContext>
 80136a4:	f04f 0000 	mov.w	r0, #0
 80136a8:	f380 8811 	msr	BASEPRI, r0
 80136ac:	bc09      	pop	{r0, r3}
 80136ae:	6819      	ldr	r1, [r3, #0]
 80136b0:	6808      	ldr	r0, [r1, #0]
 80136b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b6:	f01e 0f10 	tst.w	lr, #16
 80136ba:	bf08      	it	eq
 80136bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80136c0:	f380 8809 	msr	PSP, r0
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop
 80136cc:	f3af 8000 	nop.w

080136d0 <pxCurrentTCBConst>:
 80136d0:	20001900 	.word	0x20001900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80136d4:	bf00      	nop
 80136d6:	bf00      	nop

080136d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
	__asm volatile
 80136de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136e2:	f383 8811 	msr	BASEPRI, r3
 80136e6:	f3bf 8f6f 	isb	sy
 80136ea:	f3bf 8f4f 	dsb	sy
 80136ee:	607b      	str	r3, [r7, #4]
}
 80136f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80136f2:	f7ff f8e5 	bl	80128c0 <xTaskIncrementTick>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d003      	beq.n	8013704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80136fc:	4b06      	ldr	r3, [pc, #24]	@ (8013718 <SysTick_Handler+0x40>)
 80136fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	2300      	movs	r3, #0
 8013706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	f383 8811 	msr	BASEPRI, r3
}
 801370e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013710:	bf00      	nop
 8013712:	3708      	adds	r7, #8
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}
 8013718:	e000ed04 	.word	0xe000ed04

0801371c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801371c:	b480      	push	{r7}
 801371e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013720:	4b0b      	ldr	r3, [pc, #44]	@ (8013750 <vPortSetupTimerInterrupt+0x34>)
 8013722:	2200      	movs	r2, #0
 8013724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013726:	4b0b      	ldr	r3, [pc, #44]	@ (8013754 <vPortSetupTimerInterrupt+0x38>)
 8013728:	2200      	movs	r2, #0
 801372a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801372c:	4b0a      	ldr	r3, [pc, #40]	@ (8013758 <vPortSetupTimerInterrupt+0x3c>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	4a0a      	ldr	r2, [pc, #40]	@ (801375c <vPortSetupTimerInterrupt+0x40>)
 8013732:	fba2 2303 	umull	r2, r3, r2, r3
 8013736:	099b      	lsrs	r3, r3, #6
 8013738:	4a09      	ldr	r2, [pc, #36]	@ (8013760 <vPortSetupTimerInterrupt+0x44>)
 801373a:	3b01      	subs	r3, #1
 801373c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801373e:	4b04      	ldr	r3, [pc, #16]	@ (8013750 <vPortSetupTimerInterrupt+0x34>)
 8013740:	2207      	movs	r2, #7
 8013742:	601a      	str	r2, [r3, #0]
}
 8013744:	bf00      	nop
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	e000e010 	.word	0xe000e010
 8013754:	e000e018 	.word	0xe000e018
 8013758:	20000020 	.word	0x20000020
 801375c:	10624dd3 	.word	0x10624dd3
 8013760:	e000e014 	.word	0xe000e014

08013764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013774 <vPortEnableVFP+0x10>
 8013768:	6801      	ldr	r1, [r0, #0]
 801376a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801376e:	6001      	str	r1, [r0, #0]
 8013770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013772:	bf00      	nop
 8013774:	e000ed88 	.word	0xe000ed88

08013778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801377e:	f3ef 8305 	mrs	r3, IPSR
 8013782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2b0f      	cmp	r3, #15
 8013788:	d915      	bls.n	80137b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801378a:	4a18      	ldr	r2, [pc, #96]	@ (80137ec <vPortValidateInterruptPriority+0x74>)
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4413      	add	r3, r2
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013794:	4b16      	ldr	r3, [pc, #88]	@ (80137f0 <vPortValidateInterruptPriority+0x78>)
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	7afa      	ldrb	r2, [r7, #11]
 801379a:	429a      	cmp	r2, r3
 801379c:	d20b      	bcs.n	80137b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	607b      	str	r3, [r7, #4]
}
 80137b0:	bf00      	nop
 80137b2:	bf00      	nop
 80137b4:	e7fd      	b.n	80137b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80137b6:	4b0f      	ldr	r3, [pc, #60]	@ (80137f4 <vPortValidateInterruptPriority+0x7c>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80137be:	4b0e      	ldr	r3, [pc, #56]	@ (80137f8 <vPortValidateInterruptPriority+0x80>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d90b      	bls.n	80137de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80137c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ca:	f383 8811 	msr	BASEPRI, r3
 80137ce:	f3bf 8f6f 	isb	sy
 80137d2:	f3bf 8f4f 	dsb	sy
 80137d6:	603b      	str	r3, [r7, #0]
}
 80137d8:	bf00      	nop
 80137da:	bf00      	nop
 80137dc:	e7fd      	b.n	80137da <vPortValidateInterruptPriority+0x62>
	}
 80137de:	bf00      	nop
 80137e0:	3714      	adds	r7, #20
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	e000e3f0 	.word	0xe000e3f0
 80137f0:	20001a2c 	.word	0x20001a2c
 80137f4:	e000ed0c 	.word	0xe000ed0c
 80137f8:	20001a30 	.word	0x20001a30

080137fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b08a      	sub	sp, #40	@ 0x28
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013804:	2300      	movs	r3, #0
 8013806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013808:	f7fe ff9e 	bl	8012748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801380c:	4b5c      	ldr	r3, [pc, #368]	@ (8013980 <pvPortMalloc+0x184>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d101      	bne.n	8013818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013814:	f000 f924 	bl	8013a60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013818:	4b5a      	ldr	r3, [pc, #360]	@ (8013984 <pvPortMalloc+0x188>)
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	4013      	ands	r3, r2
 8013820:	2b00      	cmp	r3, #0
 8013822:	f040 8095 	bne.w	8013950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d01e      	beq.n	801386a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801382c:	2208      	movs	r2, #8
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4413      	add	r3, r2
 8013832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f003 0307 	and.w	r3, r3, #7
 801383a:	2b00      	cmp	r3, #0
 801383c:	d015      	beq.n	801386a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f023 0307 	bic.w	r3, r3, #7
 8013844:	3308      	adds	r3, #8
 8013846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f003 0307 	and.w	r3, r3, #7
 801384e:	2b00      	cmp	r3, #0
 8013850:	d00b      	beq.n	801386a <pvPortMalloc+0x6e>
	__asm volatile
 8013852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	617b      	str	r3, [r7, #20]
}
 8013864:	bf00      	nop
 8013866:	bf00      	nop
 8013868:	e7fd      	b.n	8013866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d06f      	beq.n	8013950 <pvPortMalloc+0x154>
 8013870:	4b45      	ldr	r3, [pc, #276]	@ (8013988 <pvPortMalloc+0x18c>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	429a      	cmp	r2, r3
 8013878:	d86a      	bhi.n	8013950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801387a:	4b44      	ldr	r3, [pc, #272]	@ (801398c <pvPortMalloc+0x190>)
 801387c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801387e:	4b43      	ldr	r3, [pc, #268]	@ (801398c <pvPortMalloc+0x190>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013884:	e004      	b.n	8013890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	429a      	cmp	r2, r3
 8013898:	d903      	bls.n	80138a2 <pvPortMalloc+0xa6>
 801389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d1f1      	bne.n	8013886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80138a2:	4b37      	ldr	r3, [pc, #220]	@ (8013980 <pvPortMalloc+0x184>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d051      	beq.n	8013950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	2208      	movs	r2, #8
 80138b2:	4413      	add	r3, r2
 80138b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80138b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	6a3b      	ldr	r3, [r7, #32]
 80138bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80138be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c0:	685a      	ldr	r2, [r3, #4]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	1ad2      	subs	r2, r2, r3
 80138c6:	2308      	movs	r3, #8
 80138c8:	005b      	lsls	r3, r3, #1
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d920      	bls.n	8013910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80138ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	4413      	add	r3, r2
 80138d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	f003 0307 	and.w	r3, r3, #7
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00b      	beq.n	80138f8 <pvPortMalloc+0xfc>
	__asm volatile
 80138e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138e4:	f383 8811 	msr	BASEPRI, r3
 80138e8:	f3bf 8f6f 	isb	sy
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	613b      	str	r3, [r7, #16]
}
 80138f2:	bf00      	nop
 80138f4:	bf00      	nop
 80138f6:	e7fd      	b.n	80138f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80138f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138fa:	685a      	ldr	r2, [r3, #4]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	1ad2      	subs	r2, r2, r3
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801390a:	69b8      	ldr	r0, [r7, #24]
 801390c:	f000 f90a 	bl	8013b24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013910:	4b1d      	ldr	r3, [pc, #116]	@ (8013988 <pvPortMalloc+0x18c>)
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	4a1b      	ldr	r2, [pc, #108]	@ (8013988 <pvPortMalloc+0x18c>)
 801391c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801391e:	4b1a      	ldr	r3, [pc, #104]	@ (8013988 <pvPortMalloc+0x18c>)
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	4b1b      	ldr	r3, [pc, #108]	@ (8013990 <pvPortMalloc+0x194>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	429a      	cmp	r2, r3
 8013928:	d203      	bcs.n	8013932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801392a:	4b17      	ldr	r3, [pc, #92]	@ (8013988 <pvPortMalloc+0x18c>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a18      	ldr	r2, [pc, #96]	@ (8013990 <pvPortMalloc+0x194>)
 8013930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013934:	685a      	ldr	r2, [r3, #4]
 8013936:	4b13      	ldr	r3, [pc, #76]	@ (8013984 <pvPortMalloc+0x188>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	431a      	orrs	r2, r3
 801393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801393e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013942:	2200      	movs	r2, #0
 8013944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013946:	4b13      	ldr	r3, [pc, #76]	@ (8013994 <pvPortMalloc+0x198>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	3301      	adds	r3, #1
 801394c:	4a11      	ldr	r2, [pc, #68]	@ (8013994 <pvPortMalloc+0x198>)
 801394e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013950:	f7fe ff08 	bl	8012764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	f003 0307 	and.w	r3, r3, #7
 801395a:	2b00      	cmp	r3, #0
 801395c:	d00b      	beq.n	8013976 <pvPortMalloc+0x17a>
	__asm volatile
 801395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	60fb      	str	r3, [r7, #12]
}
 8013970:	bf00      	nop
 8013972:	bf00      	nop
 8013974:	e7fd      	b.n	8013972 <pvPortMalloc+0x176>
	return pvReturn;
 8013976:	69fb      	ldr	r3, [r7, #28]
}
 8013978:	4618      	mov	r0, r3
 801397a:	3728      	adds	r7, #40	@ 0x28
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	2000491c 	.word	0x2000491c
 8013984:	20004930 	.word	0x20004930
 8013988:	20004920 	.word	0x20004920
 801398c:	20004914 	.word	0x20004914
 8013990:	20004924 	.word	0x20004924
 8013994:	20004928 	.word	0x20004928

08013998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d04f      	beq.n	8013a4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80139aa:	2308      	movs	r3, #8
 80139ac:	425b      	negs	r3, r3
 80139ae:	697a      	ldr	r2, [r7, #20]
 80139b0:	4413      	add	r3, r2
 80139b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	685a      	ldr	r2, [r3, #4]
 80139bc:	4b25      	ldr	r3, [pc, #148]	@ (8013a54 <vPortFree+0xbc>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	4013      	ands	r3, r2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d10b      	bne.n	80139de <vPortFree+0x46>
	__asm volatile
 80139c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ca:	f383 8811 	msr	BASEPRI, r3
 80139ce:	f3bf 8f6f 	isb	sy
 80139d2:	f3bf 8f4f 	dsb	sy
 80139d6:	60fb      	str	r3, [r7, #12]
}
 80139d8:	bf00      	nop
 80139da:	bf00      	nop
 80139dc:	e7fd      	b.n	80139da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00b      	beq.n	80139fe <vPortFree+0x66>
	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	60bb      	str	r3, [r7, #8]
}
 80139f8:	bf00      	nop
 80139fa:	bf00      	nop
 80139fc:	e7fd      	b.n	80139fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	685a      	ldr	r2, [r3, #4]
 8013a02:	4b14      	ldr	r3, [pc, #80]	@ (8013a54 <vPortFree+0xbc>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	4013      	ands	r3, r2
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d01e      	beq.n	8013a4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d11a      	bne.n	8013a4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	685a      	ldr	r2, [r3, #4]
 8013a18:	4b0e      	ldr	r3, [pc, #56]	@ (8013a54 <vPortFree+0xbc>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	43db      	mvns	r3, r3
 8013a1e:	401a      	ands	r2, r3
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013a24:	f7fe fe90 	bl	8012748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	685a      	ldr	r2, [r3, #4]
 8013a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8013a58 <vPortFree+0xc0>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4413      	add	r3, r2
 8013a32:	4a09      	ldr	r2, [pc, #36]	@ (8013a58 <vPortFree+0xc0>)
 8013a34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013a36:	6938      	ldr	r0, [r7, #16]
 8013a38:	f000 f874 	bl	8013b24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013a3c:	4b07      	ldr	r3, [pc, #28]	@ (8013a5c <vPortFree+0xc4>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	3301      	adds	r3, #1
 8013a42:	4a06      	ldr	r2, [pc, #24]	@ (8013a5c <vPortFree+0xc4>)
 8013a44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013a46:	f7fe fe8d 	bl	8012764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013a4a:	bf00      	nop
 8013a4c:	3718      	adds	r7, #24
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	20004930 	.word	0x20004930
 8013a58:	20004920 	.word	0x20004920
 8013a5c:	2000492c 	.word	0x2000492c

08013a60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013a60:	b480      	push	{r7}
 8013a62:	b085      	sub	sp, #20
 8013a64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013a66:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8013a6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013a6c:	4b27      	ldr	r3, [pc, #156]	@ (8013b0c <prvHeapInit+0xac>)
 8013a6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f003 0307 	and.w	r3, r3, #7
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00c      	beq.n	8013a94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	3307      	adds	r3, #7
 8013a7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f023 0307 	bic.w	r3, r3, #7
 8013a86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013a88:	68ba      	ldr	r2, [r7, #8]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8013b0c <prvHeapInit+0xac>)
 8013a90:	4413      	add	r3, r2
 8013a92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013a98:	4a1d      	ldr	r2, [pc, #116]	@ (8013b10 <prvHeapInit+0xb0>)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8013b10 <prvHeapInit+0xb0>)
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013aac:	2208      	movs	r2, #8
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	1a9b      	subs	r3, r3, r2
 8013ab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f023 0307 	bic.w	r3, r3, #7
 8013aba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	4a15      	ldr	r2, [pc, #84]	@ (8013b14 <prvHeapInit+0xb4>)
 8013ac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013ac2:	4b14      	ldr	r3, [pc, #80]	@ (8013b14 <prvHeapInit+0xb4>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013aca:	4b12      	ldr	r3, [pc, #72]	@ (8013b14 <prvHeapInit+0xb4>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	1ad2      	subs	r2, r2, r3
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8013b14 <prvHeapInit+0xb4>)
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	4a0a      	ldr	r2, [pc, #40]	@ (8013b18 <prvHeapInit+0xb8>)
 8013aee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	4a09      	ldr	r2, [pc, #36]	@ (8013b1c <prvHeapInit+0xbc>)
 8013af6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013af8:	4b09      	ldr	r3, [pc, #36]	@ (8013b20 <prvHeapInit+0xc0>)
 8013afa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013afe:	601a      	str	r2, [r3, #0]
}
 8013b00:	bf00      	nop
 8013b02:	3714      	adds	r7, #20
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr
 8013b0c:	20001a34 	.word	0x20001a34
 8013b10:	20004914 	.word	0x20004914
 8013b14:	2000491c 	.word	0x2000491c
 8013b18:	20004924 	.word	0x20004924
 8013b1c:	20004920 	.word	0x20004920
 8013b20:	20004930 	.word	0x20004930

08013b24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013b24:	b480      	push	{r7}
 8013b26:	b085      	sub	sp, #20
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013b2c:	4b28      	ldr	r3, [pc, #160]	@ (8013bd0 <prvInsertBlockIntoFreeList+0xac>)
 8013b2e:	60fb      	str	r3, [r7, #12]
 8013b30:	e002      	b.n	8013b38 <prvInsertBlockIntoFreeList+0x14>
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d8f7      	bhi.n	8013b32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d108      	bne.n	8013b66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	685a      	ldr	r2, [r3, #4]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	441a      	add	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	68ba      	ldr	r2, [r7, #8]
 8013b70:	441a      	add	r2, r3
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d118      	bne.n	8013bac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	4b15      	ldr	r3, [pc, #84]	@ (8013bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d00d      	beq.n	8013ba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	685a      	ldr	r2, [r3, #4]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	441a      	add	r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	681a      	ldr	r2, [r3, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	601a      	str	r2, [r3, #0]
 8013ba0:	e008      	b.n	8013bb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8013bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	e003      	b.n	8013bb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d002      	beq.n	8013bc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013bc2:	bf00      	nop
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr
 8013bce:	bf00      	nop
 8013bd0:	20004914 	.word	0x20004914
 8013bd4:	2000491c 	.word	0x2000491c

08013bd8 <__cvt>:
 8013bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bdc:	ec57 6b10 	vmov	r6, r7, d0
 8013be0:	2f00      	cmp	r7, #0
 8013be2:	460c      	mov	r4, r1
 8013be4:	4619      	mov	r1, r3
 8013be6:	463b      	mov	r3, r7
 8013be8:	bfbb      	ittet	lt
 8013bea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013bee:	461f      	movlt	r7, r3
 8013bf0:	2300      	movge	r3, #0
 8013bf2:	232d      	movlt	r3, #45	@ 0x2d
 8013bf4:	700b      	strb	r3, [r1, #0]
 8013bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013bfc:	4691      	mov	r9, r2
 8013bfe:	f023 0820 	bic.w	r8, r3, #32
 8013c02:	bfbc      	itt	lt
 8013c04:	4632      	movlt	r2, r6
 8013c06:	4616      	movlt	r6, r2
 8013c08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013c0c:	d005      	beq.n	8013c1a <__cvt+0x42>
 8013c0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013c12:	d100      	bne.n	8013c16 <__cvt+0x3e>
 8013c14:	3401      	adds	r4, #1
 8013c16:	2102      	movs	r1, #2
 8013c18:	e000      	b.n	8013c1c <__cvt+0x44>
 8013c1a:	2103      	movs	r1, #3
 8013c1c:	ab03      	add	r3, sp, #12
 8013c1e:	9301      	str	r3, [sp, #4]
 8013c20:	ab02      	add	r3, sp, #8
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	ec47 6b10 	vmov	d0, r6, r7
 8013c28:	4653      	mov	r3, sl
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	f001 f910 	bl	8014e50 <_dtoa_r>
 8013c30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013c34:	4605      	mov	r5, r0
 8013c36:	d119      	bne.n	8013c6c <__cvt+0x94>
 8013c38:	f019 0f01 	tst.w	r9, #1
 8013c3c:	d00e      	beq.n	8013c5c <__cvt+0x84>
 8013c3e:	eb00 0904 	add.w	r9, r0, r4
 8013c42:	2200      	movs	r2, #0
 8013c44:	2300      	movs	r3, #0
 8013c46:	4630      	mov	r0, r6
 8013c48:	4639      	mov	r1, r7
 8013c4a:	f7ec ff65 	bl	8000b18 <__aeabi_dcmpeq>
 8013c4e:	b108      	cbz	r0, 8013c54 <__cvt+0x7c>
 8013c50:	f8cd 900c 	str.w	r9, [sp, #12]
 8013c54:	2230      	movs	r2, #48	@ 0x30
 8013c56:	9b03      	ldr	r3, [sp, #12]
 8013c58:	454b      	cmp	r3, r9
 8013c5a:	d31e      	bcc.n	8013c9a <__cvt+0xc2>
 8013c5c:	9b03      	ldr	r3, [sp, #12]
 8013c5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c60:	1b5b      	subs	r3, r3, r5
 8013c62:	4628      	mov	r0, r5
 8013c64:	6013      	str	r3, [r2, #0]
 8013c66:	b004      	add	sp, #16
 8013c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013c70:	eb00 0904 	add.w	r9, r0, r4
 8013c74:	d1e5      	bne.n	8013c42 <__cvt+0x6a>
 8013c76:	7803      	ldrb	r3, [r0, #0]
 8013c78:	2b30      	cmp	r3, #48	@ 0x30
 8013c7a:	d10a      	bne.n	8013c92 <__cvt+0xba>
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	2300      	movs	r3, #0
 8013c80:	4630      	mov	r0, r6
 8013c82:	4639      	mov	r1, r7
 8013c84:	f7ec ff48 	bl	8000b18 <__aeabi_dcmpeq>
 8013c88:	b918      	cbnz	r0, 8013c92 <__cvt+0xba>
 8013c8a:	f1c4 0401 	rsb	r4, r4, #1
 8013c8e:	f8ca 4000 	str.w	r4, [sl]
 8013c92:	f8da 3000 	ldr.w	r3, [sl]
 8013c96:	4499      	add	r9, r3
 8013c98:	e7d3      	b.n	8013c42 <__cvt+0x6a>
 8013c9a:	1c59      	adds	r1, r3, #1
 8013c9c:	9103      	str	r1, [sp, #12]
 8013c9e:	701a      	strb	r2, [r3, #0]
 8013ca0:	e7d9      	b.n	8013c56 <__cvt+0x7e>

08013ca2 <__exponent>:
 8013ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ca4:	2900      	cmp	r1, #0
 8013ca6:	bfba      	itte	lt
 8013ca8:	4249      	neglt	r1, r1
 8013caa:	232d      	movlt	r3, #45	@ 0x2d
 8013cac:	232b      	movge	r3, #43	@ 0x2b
 8013cae:	2909      	cmp	r1, #9
 8013cb0:	7002      	strb	r2, [r0, #0]
 8013cb2:	7043      	strb	r3, [r0, #1]
 8013cb4:	dd29      	ble.n	8013d0a <__exponent+0x68>
 8013cb6:	f10d 0307 	add.w	r3, sp, #7
 8013cba:	461d      	mov	r5, r3
 8013cbc:	270a      	movs	r7, #10
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8013cc4:	fb07 1416 	mls	r4, r7, r6, r1
 8013cc8:	3430      	adds	r4, #48	@ 0x30
 8013cca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013cce:	460c      	mov	r4, r1
 8013cd0:	2c63      	cmp	r4, #99	@ 0x63
 8013cd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cd6:	4631      	mov	r1, r6
 8013cd8:	dcf1      	bgt.n	8013cbe <__exponent+0x1c>
 8013cda:	3130      	adds	r1, #48	@ 0x30
 8013cdc:	1e94      	subs	r4, r2, #2
 8013cde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013ce2:	1c41      	adds	r1, r0, #1
 8013ce4:	4623      	mov	r3, r4
 8013ce6:	42ab      	cmp	r3, r5
 8013ce8:	d30a      	bcc.n	8013d00 <__exponent+0x5e>
 8013cea:	f10d 0309 	add.w	r3, sp, #9
 8013cee:	1a9b      	subs	r3, r3, r2
 8013cf0:	42ac      	cmp	r4, r5
 8013cf2:	bf88      	it	hi
 8013cf4:	2300      	movhi	r3, #0
 8013cf6:	3302      	adds	r3, #2
 8013cf8:	4403      	add	r3, r0
 8013cfa:	1a18      	subs	r0, r3, r0
 8013cfc:	b003      	add	sp, #12
 8013cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013d04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013d08:	e7ed      	b.n	8013ce6 <__exponent+0x44>
 8013d0a:	2330      	movs	r3, #48	@ 0x30
 8013d0c:	3130      	adds	r1, #48	@ 0x30
 8013d0e:	7083      	strb	r3, [r0, #2]
 8013d10:	70c1      	strb	r1, [r0, #3]
 8013d12:	1d03      	adds	r3, r0, #4
 8013d14:	e7f1      	b.n	8013cfa <__exponent+0x58>
	...

08013d18 <_printf_float>:
 8013d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d1c:	b08d      	sub	sp, #52	@ 0x34
 8013d1e:	460c      	mov	r4, r1
 8013d20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013d24:	4616      	mov	r6, r2
 8013d26:	461f      	mov	r7, r3
 8013d28:	4605      	mov	r5, r0
 8013d2a:	f000 ff1f 	bl	8014b6c <_localeconv_r>
 8013d2e:	6803      	ldr	r3, [r0, #0]
 8013d30:	9304      	str	r3, [sp, #16]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7ec fac4 	bl	80002c0 <strlen>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013d40:	9005      	str	r0, [sp, #20]
 8013d42:	3307      	adds	r3, #7
 8013d44:	f023 0307 	bic.w	r3, r3, #7
 8013d48:	f103 0208 	add.w	r2, r3, #8
 8013d4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013d50:	f8d4 b000 	ldr.w	fp, [r4]
 8013d54:	f8c8 2000 	str.w	r2, [r8]
 8013d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013d60:	9307      	str	r3, [sp, #28]
 8013d62:	f8cd 8018 	str.w	r8, [sp, #24]
 8013d66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8013fe0 <_printf_float+0x2c8>)
 8013d70:	f04f 32ff 	mov.w	r2, #4294967295
 8013d74:	f7ec ff02 	bl	8000b7c <__aeabi_dcmpun>
 8013d78:	bb70      	cbnz	r0, 8013dd8 <_printf_float+0xc0>
 8013d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d7e:	4b98      	ldr	r3, [pc, #608]	@ (8013fe0 <_printf_float+0x2c8>)
 8013d80:	f04f 32ff 	mov.w	r2, #4294967295
 8013d84:	f7ec fedc 	bl	8000b40 <__aeabi_dcmple>
 8013d88:	bb30      	cbnz	r0, 8013dd8 <_printf_float+0xc0>
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	4640      	mov	r0, r8
 8013d90:	4649      	mov	r1, r9
 8013d92:	f7ec fecb 	bl	8000b2c <__aeabi_dcmplt>
 8013d96:	b110      	cbz	r0, 8013d9e <_printf_float+0x86>
 8013d98:	232d      	movs	r3, #45	@ 0x2d
 8013d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d9e:	4a91      	ldr	r2, [pc, #580]	@ (8013fe4 <_printf_float+0x2cc>)
 8013da0:	4b91      	ldr	r3, [pc, #580]	@ (8013fe8 <_printf_float+0x2d0>)
 8013da2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013da6:	bf8c      	ite	hi
 8013da8:	4690      	movhi	r8, r2
 8013daa:	4698      	movls	r8, r3
 8013dac:	2303      	movs	r3, #3
 8013dae:	6123      	str	r3, [r4, #16]
 8013db0:	f02b 0304 	bic.w	r3, fp, #4
 8013db4:	6023      	str	r3, [r4, #0]
 8013db6:	f04f 0900 	mov.w	r9, #0
 8013dba:	9700      	str	r7, [sp, #0]
 8013dbc:	4633      	mov	r3, r6
 8013dbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f000 f9d2 	bl	801416c <_printf_common>
 8013dc8:	3001      	adds	r0, #1
 8013dca:	f040 808d 	bne.w	8013ee8 <_printf_float+0x1d0>
 8013dce:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd2:	b00d      	add	sp, #52	@ 0x34
 8013dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd8:	4642      	mov	r2, r8
 8013dda:	464b      	mov	r3, r9
 8013ddc:	4640      	mov	r0, r8
 8013dde:	4649      	mov	r1, r9
 8013de0:	f7ec fecc 	bl	8000b7c <__aeabi_dcmpun>
 8013de4:	b140      	cbz	r0, 8013df8 <_printf_float+0xe0>
 8013de6:	464b      	mov	r3, r9
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bfbc      	itt	lt
 8013dec:	232d      	movlt	r3, #45	@ 0x2d
 8013dee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013df2:	4a7e      	ldr	r2, [pc, #504]	@ (8013fec <_printf_float+0x2d4>)
 8013df4:	4b7e      	ldr	r3, [pc, #504]	@ (8013ff0 <_printf_float+0x2d8>)
 8013df6:	e7d4      	b.n	8013da2 <_printf_float+0x8a>
 8013df8:	6863      	ldr	r3, [r4, #4]
 8013dfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013dfe:	9206      	str	r2, [sp, #24]
 8013e00:	1c5a      	adds	r2, r3, #1
 8013e02:	d13b      	bne.n	8013e7c <_printf_float+0x164>
 8013e04:	2306      	movs	r3, #6
 8013e06:	6063      	str	r3, [r4, #4]
 8013e08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	6022      	str	r2, [r4, #0]
 8013e10:	9303      	str	r3, [sp, #12]
 8013e12:	ab0a      	add	r3, sp, #40	@ 0x28
 8013e14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013e18:	ab09      	add	r3, sp, #36	@ 0x24
 8013e1a:	9300      	str	r3, [sp, #0]
 8013e1c:	6861      	ldr	r1, [r4, #4]
 8013e1e:	ec49 8b10 	vmov	d0, r8, r9
 8013e22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013e26:	4628      	mov	r0, r5
 8013e28:	f7ff fed6 	bl	8013bd8 <__cvt>
 8013e2c:	9b06      	ldr	r3, [sp, #24]
 8013e2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013e30:	2b47      	cmp	r3, #71	@ 0x47
 8013e32:	4680      	mov	r8, r0
 8013e34:	d129      	bne.n	8013e8a <_printf_float+0x172>
 8013e36:	1cc8      	adds	r0, r1, #3
 8013e38:	db02      	blt.n	8013e40 <_printf_float+0x128>
 8013e3a:	6863      	ldr	r3, [r4, #4]
 8013e3c:	4299      	cmp	r1, r3
 8013e3e:	dd41      	ble.n	8013ec4 <_printf_float+0x1ac>
 8013e40:	f1aa 0a02 	sub.w	sl, sl, #2
 8013e44:	fa5f fa8a 	uxtb.w	sl, sl
 8013e48:	3901      	subs	r1, #1
 8013e4a:	4652      	mov	r2, sl
 8013e4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013e50:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e52:	f7ff ff26 	bl	8013ca2 <__exponent>
 8013e56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e58:	1813      	adds	r3, r2, r0
 8013e5a:	2a01      	cmp	r2, #1
 8013e5c:	4681      	mov	r9, r0
 8013e5e:	6123      	str	r3, [r4, #16]
 8013e60:	dc02      	bgt.n	8013e68 <_printf_float+0x150>
 8013e62:	6822      	ldr	r2, [r4, #0]
 8013e64:	07d2      	lsls	r2, r2, #31
 8013e66:	d501      	bpl.n	8013e6c <_printf_float+0x154>
 8013e68:	3301      	adds	r3, #1
 8013e6a:	6123      	str	r3, [r4, #16]
 8013e6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d0a2      	beq.n	8013dba <_printf_float+0xa2>
 8013e74:	232d      	movs	r3, #45	@ 0x2d
 8013e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e7a:	e79e      	b.n	8013dba <_printf_float+0xa2>
 8013e7c:	9a06      	ldr	r2, [sp, #24]
 8013e7e:	2a47      	cmp	r2, #71	@ 0x47
 8013e80:	d1c2      	bne.n	8013e08 <_printf_float+0xf0>
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d1c0      	bne.n	8013e08 <_printf_float+0xf0>
 8013e86:	2301      	movs	r3, #1
 8013e88:	e7bd      	b.n	8013e06 <_printf_float+0xee>
 8013e8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013e8e:	d9db      	bls.n	8013e48 <_printf_float+0x130>
 8013e90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013e94:	d118      	bne.n	8013ec8 <_printf_float+0x1b0>
 8013e96:	2900      	cmp	r1, #0
 8013e98:	6863      	ldr	r3, [r4, #4]
 8013e9a:	dd0b      	ble.n	8013eb4 <_printf_float+0x19c>
 8013e9c:	6121      	str	r1, [r4, #16]
 8013e9e:	b913      	cbnz	r3, 8013ea6 <_printf_float+0x18e>
 8013ea0:	6822      	ldr	r2, [r4, #0]
 8013ea2:	07d0      	lsls	r0, r2, #31
 8013ea4:	d502      	bpl.n	8013eac <_printf_float+0x194>
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	440b      	add	r3, r1
 8013eaa:	6123      	str	r3, [r4, #16]
 8013eac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013eae:	f04f 0900 	mov.w	r9, #0
 8013eb2:	e7db      	b.n	8013e6c <_printf_float+0x154>
 8013eb4:	b913      	cbnz	r3, 8013ebc <_printf_float+0x1a4>
 8013eb6:	6822      	ldr	r2, [r4, #0]
 8013eb8:	07d2      	lsls	r2, r2, #31
 8013eba:	d501      	bpl.n	8013ec0 <_printf_float+0x1a8>
 8013ebc:	3302      	adds	r3, #2
 8013ebe:	e7f4      	b.n	8013eaa <_printf_float+0x192>
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	e7f2      	b.n	8013eaa <_printf_float+0x192>
 8013ec4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eca:	4299      	cmp	r1, r3
 8013ecc:	db05      	blt.n	8013eda <_printf_float+0x1c2>
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	6121      	str	r1, [r4, #16]
 8013ed2:	07d8      	lsls	r0, r3, #31
 8013ed4:	d5ea      	bpl.n	8013eac <_printf_float+0x194>
 8013ed6:	1c4b      	adds	r3, r1, #1
 8013ed8:	e7e7      	b.n	8013eaa <_printf_float+0x192>
 8013eda:	2900      	cmp	r1, #0
 8013edc:	bfd4      	ite	le
 8013ede:	f1c1 0202 	rsble	r2, r1, #2
 8013ee2:	2201      	movgt	r2, #1
 8013ee4:	4413      	add	r3, r2
 8013ee6:	e7e0      	b.n	8013eaa <_printf_float+0x192>
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	055a      	lsls	r2, r3, #21
 8013eec:	d407      	bmi.n	8013efe <_printf_float+0x1e6>
 8013eee:	6923      	ldr	r3, [r4, #16]
 8013ef0:	4642      	mov	r2, r8
 8013ef2:	4631      	mov	r1, r6
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	47b8      	blx	r7
 8013ef8:	3001      	adds	r0, #1
 8013efa:	d12b      	bne.n	8013f54 <_printf_float+0x23c>
 8013efc:	e767      	b.n	8013dce <_printf_float+0xb6>
 8013efe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013f02:	f240 80dd 	bls.w	80140c0 <_printf_float+0x3a8>
 8013f06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f7ec fe03 	bl	8000b18 <__aeabi_dcmpeq>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d033      	beq.n	8013f7e <_printf_float+0x266>
 8013f16:	4a37      	ldr	r2, [pc, #220]	@ (8013ff4 <_printf_float+0x2dc>)
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4631      	mov	r1, r6
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	47b8      	blx	r7
 8013f20:	3001      	adds	r0, #1
 8013f22:	f43f af54 	beq.w	8013dce <_printf_float+0xb6>
 8013f26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013f2a:	4543      	cmp	r3, r8
 8013f2c:	db02      	blt.n	8013f34 <_printf_float+0x21c>
 8013f2e:	6823      	ldr	r3, [r4, #0]
 8013f30:	07d8      	lsls	r0, r3, #31
 8013f32:	d50f      	bpl.n	8013f54 <_printf_float+0x23c>
 8013f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f38:	4631      	mov	r1, r6
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	47b8      	blx	r7
 8013f3e:	3001      	adds	r0, #1
 8013f40:	f43f af45 	beq.w	8013dce <_printf_float+0xb6>
 8013f44:	f04f 0900 	mov.w	r9, #0
 8013f48:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f4c:	f104 0a1a 	add.w	sl, r4, #26
 8013f50:	45c8      	cmp	r8, r9
 8013f52:	dc09      	bgt.n	8013f68 <_printf_float+0x250>
 8013f54:	6823      	ldr	r3, [r4, #0]
 8013f56:	079b      	lsls	r3, r3, #30
 8013f58:	f100 8103 	bmi.w	8014162 <_printf_float+0x44a>
 8013f5c:	68e0      	ldr	r0, [r4, #12]
 8013f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f60:	4298      	cmp	r0, r3
 8013f62:	bfb8      	it	lt
 8013f64:	4618      	movlt	r0, r3
 8013f66:	e734      	b.n	8013dd2 <_printf_float+0xba>
 8013f68:	2301      	movs	r3, #1
 8013f6a:	4652      	mov	r2, sl
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	4628      	mov	r0, r5
 8013f70:	47b8      	blx	r7
 8013f72:	3001      	adds	r0, #1
 8013f74:	f43f af2b 	beq.w	8013dce <_printf_float+0xb6>
 8013f78:	f109 0901 	add.w	r9, r9, #1
 8013f7c:	e7e8      	b.n	8013f50 <_printf_float+0x238>
 8013f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	dc39      	bgt.n	8013ff8 <_printf_float+0x2e0>
 8013f84:	4a1b      	ldr	r2, [pc, #108]	@ (8013ff4 <_printf_float+0x2dc>)
 8013f86:	2301      	movs	r3, #1
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	47b8      	blx	r7
 8013f8e:	3001      	adds	r0, #1
 8013f90:	f43f af1d 	beq.w	8013dce <_printf_float+0xb6>
 8013f94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013f98:	ea59 0303 	orrs.w	r3, r9, r3
 8013f9c:	d102      	bne.n	8013fa4 <_printf_float+0x28c>
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	07d9      	lsls	r1, r3, #31
 8013fa2:	d5d7      	bpl.n	8013f54 <_printf_float+0x23c>
 8013fa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fa8:	4631      	mov	r1, r6
 8013faa:	4628      	mov	r0, r5
 8013fac:	47b8      	blx	r7
 8013fae:	3001      	adds	r0, #1
 8013fb0:	f43f af0d 	beq.w	8013dce <_printf_float+0xb6>
 8013fb4:	f04f 0a00 	mov.w	sl, #0
 8013fb8:	f104 0b1a 	add.w	fp, r4, #26
 8013fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fbe:	425b      	negs	r3, r3
 8013fc0:	4553      	cmp	r3, sl
 8013fc2:	dc01      	bgt.n	8013fc8 <_printf_float+0x2b0>
 8013fc4:	464b      	mov	r3, r9
 8013fc6:	e793      	b.n	8013ef0 <_printf_float+0x1d8>
 8013fc8:	2301      	movs	r3, #1
 8013fca:	465a      	mov	r2, fp
 8013fcc:	4631      	mov	r1, r6
 8013fce:	4628      	mov	r0, r5
 8013fd0:	47b8      	blx	r7
 8013fd2:	3001      	adds	r0, #1
 8013fd4:	f43f aefb 	beq.w	8013dce <_printf_float+0xb6>
 8013fd8:	f10a 0a01 	add.w	sl, sl, #1
 8013fdc:	e7ee      	b.n	8013fbc <_printf_float+0x2a4>
 8013fde:	bf00      	nop
 8013fe0:	7fefffff 	.word	0x7fefffff
 8013fe4:	0801bbb0 	.word	0x0801bbb0
 8013fe8:	0801bbac 	.word	0x0801bbac
 8013fec:	0801bbb8 	.word	0x0801bbb8
 8013ff0:	0801bbb4 	.word	0x0801bbb4
 8013ff4:	0801bbbc 	.word	0x0801bbbc
 8013ff8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013ffa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013ffe:	4553      	cmp	r3, sl
 8014000:	bfa8      	it	ge
 8014002:	4653      	movge	r3, sl
 8014004:	2b00      	cmp	r3, #0
 8014006:	4699      	mov	r9, r3
 8014008:	dc36      	bgt.n	8014078 <_printf_float+0x360>
 801400a:	f04f 0b00 	mov.w	fp, #0
 801400e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014012:	f104 021a 	add.w	r2, r4, #26
 8014016:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014018:	9306      	str	r3, [sp, #24]
 801401a:	eba3 0309 	sub.w	r3, r3, r9
 801401e:	455b      	cmp	r3, fp
 8014020:	dc31      	bgt.n	8014086 <_printf_float+0x36e>
 8014022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014024:	459a      	cmp	sl, r3
 8014026:	dc3a      	bgt.n	801409e <_printf_float+0x386>
 8014028:	6823      	ldr	r3, [r4, #0]
 801402a:	07da      	lsls	r2, r3, #31
 801402c:	d437      	bmi.n	801409e <_printf_float+0x386>
 801402e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014030:	ebaa 0903 	sub.w	r9, sl, r3
 8014034:	9b06      	ldr	r3, [sp, #24]
 8014036:	ebaa 0303 	sub.w	r3, sl, r3
 801403a:	4599      	cmp	r9, r3
 801403c:	bfa8      	it	ge
 801403e:	4699      	movge	r9, r3
 8014040:	f1b9 0f00 	cmp.w	r9, #0
 8014044:	dc33      	bgt.n	80140ae <_printf_float+0x396>
 8014046:	f04f 0800 	mov.w	r8, #0
 801404a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801404e:	f104 0b1a 	add.w	fp, r4, #26
 8014052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014054:	ebaa 0303 	sub.w	r3, sl, r3
 8014058:	eba3 0309 	sub.w	r3, r3, r9
 801405c:	4543      	cmp	r3, r8
 801405e:	f77f af79 	ble.w	8013f54 <_printf_float+0x23c>
 8014062:	2301      	movs	r3, #1
 8014064:	465a      	mov	r2, fp
 8014066:	4631      	mov	r1, r6
 8014068:	4628      	mov	r0, r5
 801406a:	47b8      	blx	r7
 801406c:	3001      	adds	r0, #1
 801406e:	f43f aeae 	beq.w	8013dce <_printf_float+0xb6>
 8014072:	f108 0801 	add.w	r8, r8, #1
 8014076:	e7ec      	b.n	8014052 <_printf_float+0x33a>
 8014078:	4642      	mov	r2, r8
 801407a:	4631      	mov	r1, r6
 801407c:	4628      	mov	r0, r5
 801407e:	47b8      	blx	r7
 8014080:	3001      	adds	r0, #1
 8014082:	d1c2      	bne.n	801400a <_printf_float+0x2f2>
 8014084:	e6a3      	b.n	8013dce <_printf_float+0xb6>
 8014086:	2301      	movs	r3, #1
 8014088:	4631      	mov	r1, r6
 801408a:	4628      	mov	r0, r5
 801408c:	9206      	str	r2, [sp, #24]
 801408e:	47b8      	blx	r7
 8014090:	3001      	adds	r0, #1
 8014092:	f43f ae9c 	beq.w	8013dce <_printf_float+0xb6>
 8014096:	9a06      	ldr	r2, [sp, #24]
 8014098:	f10b 0b01 	add.w	fp, fp, #1
 801409c:	e7bb      	b.n	8014016 <_printf_float+0x2fe>
 801409e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140a2:	4631      	mov	r1, r6
 80140a4:	4628      	mov	r0, r5
 80140a6:	47b8      	blx	r7
 80140a8:	3001      	adds	r0, #1
 80140aa:	d1c0      	bne.n	801402e <_printf_float+0x316>
 80140ac:	e68f      	b.n	8013dce <_printf_float+0xb6>
 80140ae:	9a06      	ldr	r2, [sp, #24]
 80140b0:	464b      	mov	r3, r9
 80140b2:	4442      	add	r2, r8
 80140b4:	4631      	mov	r1, r6
 80140b6:	4628      	mov	r0, r5
 80140b8:	47b8      	blx	r7
 80140ba:	3001      	adds	r0, #1
 80140bc:	d1c3      	bne.n	8014046 <_printf_float+0x32e>
 80140be:	e686      	b.n	8013dce <_printf_float+0xb6>
 80140c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80140c4:	f1ba 0f01 	cmp.w	sl, #1
 80140c8:	dc01      	bgt.n	80140ce <_printf_float+0x3b6>
 80140ca:	07db      	lsls	r3, r3, #31
 80140cc:	d536      	bpl.n	801413c <_printf_float+0x424>
 80140ce:	2301      	movs	r3, #1
 80140d0:	4642      	mov	r2, r8
 80140d2:	4631      	mov	r1, r6
 80140d4:	4628      	mov	r0, r5
 80140d6:	47b8      	blx	r7
 80140d8:	3001      	adds	r0, #1
 80140da:	f43f ae78 	beq.w	8013dce <_printf_float+0xb6>
 80140de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140e2:	4631      	mov	r1, r6
 80140e4:	4628      	mov	r0, r5
 80140e6:	47b8      	blx	r7
 80140e8:	3001      	adds	r0, #1
 80140ea:	f43f ae70 	beq.w	8013dce <_printf_float+0xb6>
 80140ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80140f2:	2200      	movs	r2, #0
 80140f4:	2300      	movs	r3, #0
 80140f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140fa:	f7ec fd0d 	bl	8000b18 <__aeabi_dcmpeq>
 80140fe:	b9c0      	cbnz	r0, 8014132 <_printf_float+0x41a>
 8014100:	4653      	mov	r3, sl
 8014102:	f108 0201 	add.w	r2, r8, #1
 8014106:	4631      	mov	r1, r6
 8014108:	4628      	mov	r0, r5
 801410a:	47b8      	blx	r7
 801410c:	3001      	adds	r0, #1
 801410e:	d10c      	bne.n	801412a <_printf_float+0x412>
 8014110:	e65d      	b.n	8013dce <_printf_float+0xb6>
 8014112:	2301      	movs	r3, #1
 8014114:	465a      	mov	r2, fp
 8014116:	4631      	mov	r1, r6
 8014118:	4628      	mov	r0, r5
 801411a:	47b8      	blx	r7
 801411c:	3001      	adds	r0, #1
 801411e:	f43f ae56 	beq.w	8013dce <_printf_float+0xb6>
 8014122:	f108 0801 	add.w	r8, r8, #1
 8014126:	45d0      	cmp	r8, sl
 8014128:	dbf3      	blt.n	8014112 <_printf_float+0x3fa>
 801412a:	464b      	mov	r3, r9
 801412c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014130:	e6df      	b.n	8013ef2 <_printf_float+0x1da>
 8014132:	f04f 0800 	mov.w	r8, #0
 8014136:	f104 0b1a 	add.w	fp, r4, #26
 801413a:	e7f4      	b.n	8014126 <_printf_float+0x40e>
 801413c:	2301      	movs	r3, #1
 801413e:	4642      	mov	r2, r8
 8014140:	e7e1      	b.n	8014106 <_printf_float+0x3ee>
 8014142:	2301      	movs	r3, #1
 8014144:	464a      	mov	r2, r9
 8014146:	4631      	mov	r1, r6
 8014148:	4628      	mov	r0, r5
 801414a:	47b8      	blx	r7
 801414c:	3001      	adds	r0, #1
 801414e:	f43f ae3e 	beq.w	8013dce <_printf_float+0xb6>
 8014152:	f108 0801 	add.w	r8, r8, #1
 8014156:	68e3      	ldr	r3, [r4, #12]
 8014158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801415a:	1a5b      	subs	r3, r3, r1
 801415c:	4543      	cmp	r3, r8
 801415e:	dcf0      	bgt.n	8014142 <_printf_float+0x42a>
 8014160:	e6fc      	b.n	8013f5c <_printf_float+0x244>
 8014162:	f04f 0800 	mov.w	r8, #0
 8014166:	f104 0919 	add.w	r9, r4, #25
 801416a:	e7f4      	b.n	8014156 <_printf_float+0x43e>

0801416c <_printf_common>:
 801416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014170:	4616      	mov	r6, r2
 8014172:	4698      	mov	r8, r3
 8014174:	688a      	ldr	r2, [r1, #8]
 8014176:	690b      	ldr	r3, [r1, #16]
 8014178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801417c:	4293      	cmp	r3, r2
 801417e:	bfb8      	it	lt
 8014180:	4613      	movlt	r3, r2
 8014182:	6033      	str	r3, [r6, #0]
 8014184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014188:	4607      	mov	r7, r0
 801418a:	460c      	mov	r4, r1
 801418c:	b10a      	cbz	r2, 8014192 <_printf_common+0x26>
 801418e:	3301      	adds	r3, #1
 8014190:	6033      	str	r3, [r6, #0]
 8014192:	6823      	ldr	r3, [r4, #0]
 8014194:	0699      	lsls	r1, r3, #26
 8014196:	bf42      	ittt	mi
 8014198:	6833      	ldrmi	r3, [r6, #0]
 801419a:	3302      	addmi	r3, #2
 801419c:	6033      	strmi	r3, [r6, #0]
 801419e:	6825      	ldr	r5, [r4, #0]
 80141a0:	f015 0506 	ands.w	r5, r5, #6
 80141a4:	d106      	bne.n	80141b4 <_printf_common+0x48>
 80141a6:	f104 0a19 	add.w	sl, r4, #25
 80141aa:	68e3      	ldr	r3, [r4, #12]
 80141ac:	6832      	ldr	r2, [r6, #0]
 80141ae:	1a9b      	subs	r3, r3, r2
 80141b0:	42ab      	cmp	r3, r5
 80141b2:	dc26      	bgt.n	8014202 <_printf_common+0x96>
 80141b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80141b8:	6822      	ldr	r2, [r4, #0]
 80141ba:	3b00      	subs	r3, #0
 80141bc:	bf18      	it	ne
 80141be:	2301      	movne	r3, #1
 80141c0:	0692      	lsls	r2, r2, #26
 80141c2:	d42b      	bmi.n	801421c <_printf_common+0xb0>
 80141c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80141c8:	4641      	mov	r1, r8
 80141ca:	4638      	mov	r0, r7
 80141cc:	47c8      	blx	r9
 80141ce:	3001      	adds	r0, #1
 80141d0:	d01e      	beq.n	8014210 <_printf_common+0xa4>
 80141d2:	6823      	ldr	r3, [r4, #0]
 80141d4:	6922      	ldr	r2, [r4, #16]
 80141d6:	f003 0306 	and.w	r3, r3, #6
 80141da:	2b04      	cmp	r3, #4
 80141dc:	bf02      	ittt	eq
 80141de:	68e5      	ldreq	r5, [r4, #12]
 80141e0:	6833      	ldreq	r3, [r6, #0]
 80141e2:	1aed      	subeq	r5, r5, r3
 80141e4:	68a3      	ldr	r3, [r4, #8]
 80141e6:	bf0c      	ite	eq
 80141e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141ec:	2500      	movne	r5, #0
 80141ee:	4293      	cmp	r3, r2
 80141f0:	bfc4      	itt	gt
 80141f2:	1a9b      	subgt	r3, r3, r2
 80141f4:	18ed      	addgt	r5, r5, r3
 80141f6:	2600      	movs	r6, #0
 80141f8:	341a      	adds	r4, #26
 80141fa:	42b5      	cmp	r5, r6
 80141fc:	d11a      	bne.n	8014234 <_printf_common+0xc8>
 80141fe:	2000      	movs	r0, #0
 8014200:	e008      	b.n	8014214 <_printf_common+0xa8>
 8014202:	2301      	movs	r3, #1
 8014204:	4652      	mov	r2, sl
 8014206:	4641      	mov	r1, r8
 8014208:	4638      	mov	r0, r7
 801420a:	47c8      	blx	r9
 801420c:	3001      	adds	r0, #1
 801420e:	d103      	bne.n	8014218 <_printf_common+0xac>
 8014210:	f04f 30ff 	mov.w	r0, #4294967295
 8014214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014218:	3501      	adds	r5, #1
 801421a:	e7c6      	b.n	80141aa <_printf_common+0x3e>
 801421c:	18e1      	adds	r1, r4, r3
 801421e:	1c5a      	adds	r2, r3, #1
 8014220:	2030      	movs	r0, #48	@ 0x30
 8014222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014226:	4422      	add	r2, r4
 8014228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801422c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014230:	3302      	adds	r3, #2
 8014232:	e7c7      	b.n	80141c4 <_printf_common+0x58>
 8014234:	2301      	movs	r3, #1
 8014236:	4622      	mov	r2, r4
 8014238:	4641      	mov	r1, r8
 801423a:	4638      	mov	r0, r7
 801423c:	47c8      	blx	r9
 801423e:	3001      	adds	r0, #1
 8014240:	d0e6      	beq.n	8014210 <_printf_common+0xa4>
 8014242:	3601      	adds	r6, #1
 8014244:	e7d9      	b.n	80141fa <_printf_common+0x8e>
	...

08014248 <_printf_i>:
 8014248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801424c:	7e0f      	ldrb	r7, [r1, #24]
 801424e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014250:	2f78      	cmp	r7, #120	@ 0x78
 8014252:	4691      	mov	r9, r2
 8014254:	4680      	mov	r8, r0
 8014256:	460c      	mov	r4, r1
 8014258:	469a      	mov	sl, r3
 801425a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801425e:	d807      	bhi.n	8014270 <_printf_i+0x28>
 8014260:	2f62      	cmp	r7, #98	@ 0x62
 8014262:	d80a      	bhi.n	801427a <_printf_i+0x32>
 8014264:	2f00      	cmp	r7, #0
 8014266:	f000 80d1 	beq.w	801440c <_printf_i+0x1c4>
 801426a:	2f58      	cmp	r7, #88	@ 0x58
 801426c:	f000 80b8 	beq.w	80143e0 <_printf_i+0x198>
 8014270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014278:	e03a      	b.n	80142f0 <_printf_i+0xa8>
 801427a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801427e:	2b15      	cmp	r3, #21
 8014280:	d8f6      	bhi.n	8014270 <_printf_i+0x28>
 8014282:	a101      	add	r1, pc, #4	@ (adr r1, 8014288 <_printf_i+0x40>)
 8014284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014288:	080142e1 	.word	0x080142e1
 801428c:	080142f5 	.word	0x080142f5
 8014290:	08014271 	.word	0x08014271
 8014294:	08014271 	.word	0x08014271
 8014298:	08014271 	.word	0x08014271
 801429c:	08014271 	.word	0x08014271
 80142a0:	080142f5 	.word	0x080142f5
 80142a4:	08014271 	.word	0x08014271
 80142a8:	08014271 	.word	0x08014271
 80142ac:	08014271 	.word	0x08014271
 80142b0:	08014271 	.word	0x08014271
 80142b4:	080143f3 	.word	0x080143f3
 80142b8:	0801431f 	.word	0x0801431f
 80142bc:	080143ad 	.word	0x080143ad
 80142c0:	08014271 	.word	0x08014271
 80142c4:	08014271 	.word	0x08014271
 80142c8:	08014415 	.word	0x08014415
 80142cc:	08014271 	.word	0x08014271
 80142d0:	0801431f 	.word	0x0801431f
 80142d4:	08014271 	.word	0x08014271
 80142d8:	08014271 	.word	0x08014271
 80142dc:	080143b5 	.word	0x080143b5
 80142e0:	6833      	ldr	r3, [r6, #0]
 80142e2:	1d1a      	adds	r2, r3, #4
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	6032      	str	r2, [r6, #0]
 80142e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80142ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80142f0:	2301      	movs	r3, #1
 80142f2:	e09c      	b.n	801442e <_printf_i+0x1e6>
 80142f4:	6833      	ldr	r3, [r6, #0]
 80142f6:	6820      	ldr	r0, [r4, #0]
 80142f8:	1d19      	adds	r1, r3, #4
 80142fa:	6031      	str	r1, [r6, #0]
 80142fc:	0606      	lsls	r6, r0, #24
 80142fe:	d501      	bpl.n	8014304 <_printf_i+0xbc>
 8014300:	681d      	ldr	r5, [r3, #0]
 8014302:	e003      	b.n	801430c <_printf_i+0xc4>
 8014304:	0645      	lsls	r5, r0, #25
 8014306:	d5fb      	bpl.n	8014300 <_printf_i+0xb8>
 8014308:	f9b3 5000 	ldrsh.w	r5, [r3]
 801430c:	2d00      	cmp	r5, #0
 801430e:	da03      	bge.n	8014318 <_printf_i+0xd0>
 8014310:	232d      	movs	r3, #45	@ 0x2d
 8014312:	426d      	negs	r5, r5
 8014314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014318:	4858      	ldr	r0, [pc, #352]	@ (801447c <_printf_i+0x234>)
 801431a:	230a      	movs	r3, #10
 801431c:	e011      	b.n	8014342 <_printf_i+0xfa>
 801431e:	6821      	ldr	r1, [r4, #0]
 8014320:	6833      	ldr	r3, [r6, #0]
 8014322:	0608      	lsls	r0, r1, #24
 8014324:	f853 5b04 	ldr.w	r5, [r3], #4
 8014328:	d402      	bmi.n	8014330 <_printf_i+0xe8>
 801432a:	0649      	lsls	r1, r1, #25
 801432c:	bf48      	it	mi
 801432e:	b2ad      	uxthmi	r5, r5
 8014330:	2f6f      	cmp	r7, #111	@ 0x6f
 8014332:	4852      	ldr	r0, [pc, #328]	@ (801447c <_printf_i+0x234>)
 8014334:	6033      	str	r3, [r6, #0]
 8014336:	bf14      	ite	ne
 8014338:	230a      	movne	r3, #10
 801433a:	2308      	moveq	r3, #8
 801433c:	2100      	movs	r1, #0
 801433e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014342:	6866      	ldr	r6, [r4, #4]
 8014344:	60a6      	str	r6, [r4, #8]
 8014346:	2e00      	cmp	r6, #0
 8014348:	db05      	blt.n	8014356 <_printf_i+0x10e>
 801434a:	6821      	ldr	r1, [r4, #0]
 801434c:	432e      	orrs	r6, r5
 801434e:	f021 0104 	bic.w	r1, r1, #4
 8014352:	6021      	str	r1, [r4, #0]
 8014354:	d04b      	beq.n	80143ee <_printf_i+0x1a6>
 8014356:	4616      	mov	r6, r2
 8014358:	fbb5 f1f3 	udiv	r1, r5, r3
 801435c:	fb03 5711 	mls	r7, r3, r1, r5
 8014360:	5dc7      	ldrb	r7, [r0, r7]
 8014362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014366:	462f      	mov	r7, r5
 8014368:	42bb      	cmp	r3, r7
 801436a:	460d      	mov	r5, r1
 801436c:	d9f4      	bls.n	8014358 <_printf_i+0x110>
 801436e:	2b08      	cmp	r3, #8
 8014370:	d10b      	bne.n	801438a <_printf_i+0x142>
 8014372:	6823      	ldr	r3, [r4, #0]
 8014374:	07df      	lsls	r7, r3, #31
 8014376:	d508      	bpl.n	801438a <_printf_i+0x142>
 8014378:	6923      	ldr	r3, [r4, #16]
 801437a:	6861      	ldr	r1, [r4, #4]
 801437c:	4299      	cmp	r1, r3
 801437e:	bfde      	ittt	le
 8014380:	2330      	movle	r3, #48	@ 0x30
 8014382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014386:	f106 36ff 	addle.w	r6, r6, #4294967295
 801438a:	1b92      	subs	r2, r2, r6
 801438c:	6122      	str	r2, [r4, #16]
 801438e:	f8cd a000 	str.w	sl, [sp]
 8014392:	464b      	mov	r3, r9
 8014394:	aa03      	add	r2, sp, #12
 8014396:	4621      	mov	r1, r4
 8014398:	4640      	mov	r0, r8
 801439a:	f7ff fee7 	bl	801416c <_printf_common>
 801439e:	3001      	adds	r0, #1
 80143a0:	d14a      	bne.n	8014438 <_printf_i+0x1f0>
 80143a2:	f04f 30ff 	mov.w	r0, #4294967295
 80143a6:	b004      	add	sp, #16
 80143a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ac:	6823      	ldr	r3, [r4, #0]
 80143ae:	f043 0320 	orr.w	r3, r3, #32
 80143b2:	6023      	str	r3, [r4, #0]
 80143b4:	4832      	ldr	r0, [pc, #200]	@ (8014480 <_printf_i+0x238>)
 80143b6:	2778      	movs	r7, #120	@ 0x78
 80143b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	6831      	ldr	r1, [r6, #0]
 80143c0:	061f      	lsls	r7, r3, #24
 80143c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80143c6:	d402      	bmi.n	80143ce <_printf_i+0x186>
 80143c8:	065f      	lsls	r7, r3, #25
 80143ca:	bf48      	it	mi
 80143cc:	b2ad      	uxthmi	r5, r5
 80143ce:	6031      	str	r1, [r6, #0]
 80143d0:	07d9      	lsls	r1, r3, #31
 80143d2:	bf44      	itt	mi
 80143d4:	f043 0320 	orrmi.w	r3, r3, #32
 80143d8:	6023      	strmi	r3, [r4, #0]
 80143da:	b11d      	cbz	r5, 80143e4 <_printf_i+0x19c>
 80143dc:	2310      	movs	r3, #16
 80143de:	e7ad      	b.n	801433c <_printf_i+0xf4>
 80143e0:	4826      	ldr	r0, [pc, #152]	@ (801447c <_printf_i+0x234>)
 80143e2:	e7e9      	b.n	80143b8 <_printf_i+0x170>
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	f023 0320 	bic.w	r3, r3, #32
 80143ea:	6023      	str	r3, [r4, #0]
 80143ec:	e7f6      	b.n	80143dc <_printf_i+0x194>
 80143ee:	4616      	mov	r6, r2
 80143f0:	e7bd      	b.n	801436e <_printf_i+0x126>
 80143f2:	6833      	ldr	r3, [r6, #0]
 80143f4:	6825      	ldr	r5, [r4, #0]
 80143f6:	6961      	ldr	r1, [r4, #20]
 80143f8:	1d18      	adds	r0, r3, #4
 80143fa:	6030      	str	r0, [r6, #0]
 80143fc:	062e      	lsls	r6, r5, #24
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	d501      	bpl.n	8014406 <_printf_i+0x1be>
 8014402:	6019      	str	r1, [r3, #0]
 8014404:	e002      	b.n	801440c <_printf_i+0x1c4>
 8014406:	0668      	lsls	r0, r5, #25
 8014408:	d5fb      	bpl.n	8014402 <_printf_i+0x1ba>
 801440a:	8019      	strh	r1, [r3, #0]
 801440c:	2300      	movs	r3, #0
 801440e:	6123      	str	r3, [r4, #16]
 8014410:	4616      	mov	r6, r2
 8014412:	e7bc      	b.n	801438e <_printf_i+0x146>
 8014414:	6833      	ldr	r3, [r6, #0]
 8014416:	1d1a      	adds	r2, r3, #4
 8014418:	6032      	str	r2, [r6, #0]
 801441a:	681e      	ldr	r6, [r3, #0]
 801441c:	6862      	ldr	r2, [r4, #4]
 801441e:	2100      	movs	r1, #0
 8014420:	4630      	mov	r0, r6
 8014422:	f7eb fefd 	bl	8000220 <memchr>
 8014426:	b108      	cbz	r0, 801442c <_printf_i+0x1e4>
 8014428:	1b80      	subs	r0, r0, r6
 801442a:	6060      	str	r0, [r4, #4]
 801442c:	6863      	ldr	r3, [r4, #4]
 801442e:	6123      	str	r3, [r4, #16]
 8014430:	2300      	movs	r3, #0
 8014432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014436:	e7aa      	b.n	801438e <_printf_i+0x146>
 8014438:	6923      	ldr	r3, [r4, #16]
 801443a:	4632      	mov	r2, r6
 801443c:	4649      	mov	r1, r9
 801443e:	4640      	mov	r0, r8
 8014440:	47d0      	blx	sl
 8014442:	3001      	adds	r0, #1
 8014444:	d0ad      	beq.n	80143a2 <_printf_i+0x15a>
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	079b      	lsls	r3, r3, #30
 801444a:	d413      	bmi.n	8014474 <_printf_i+0x22c>
 801444c:	68e0      	ldr	r0, [r4, #12]
 801444e:	9b03      	ldr	r3, [sp, #12]
 8014450:	4298      	cmp	r0, r3
 8014452:	bfb8      	it	lt
 8014454:	4618      	movlt	r0, r3
 8014456:	e7a6      	b.n	80143a6 <_printf_i+0x15e>
 8014458:	2301      	movs	r3, #1
 801445a:	4632      	mov	r2, r6
 801445c:	4649      	mov	r1, r9
 801445e:	4640      	mov	r0, r8
 8014460:	47d0      	blx	sl
 8014462:	3001      	adds	r0, #1
 8014464:	d09d      	beq.n	80143a2 <_printf_i+0x15a>
 8014466:	3501      	adds	r5, #1
 8014468:	68e3      	ldr	r3, [r4, #12]
 801446a:	9903      	ldr	r1, [sp, #12]
 801446c:	1a5b      	subs	r3, r3, r1
 801446e:	42ab      	cmp	r3, r5
 8014470:	dcf2      	bgt.n	8014458 <_printf_i+0x210>
 8014472:	e7eb      	b.n	801444c <_printf_i+0x204>
 8014474:	2500      	movs	r5, #0
 8014476:	f104 0619 	add.w	r6, r4, #25
 801447a:	e7f5      	b.n	8014468 <_printf_i+0x220>
 801447c:	0801bbbe 	.word	0x0801bbbe
 8014480:	0801bbcf 	.word	0x0801bbcf

08014484 <_scanf_float>:
 8014484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014488:	b087      	sub	sp, #28
 801448a:	4691      	mov	r9, r2
 801448c:	9303      	str	r3, [sp, #12]
 801448e:	688b      	ldr	r3, [r1, #8]
 8014490:	1e5a      	subs	r2, r3, #1
 8014492:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014496:	bf81      	itttt	hi
 8014498:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801449c:	eb03 0b05 	addhi.w	fp, r3, r5
 80144a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80144a4:	608b      	strhi	r3, [r1, #8]
 80144a6:	680b      	ldr	r3, [r1, #0]
 80144a8:	460a      	mov	r2, r1
 80144aa:	f04f 0500 	mov.w	r5, #0
 80144ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80144b2:	f842 3b1c 	str.w	r3, [r2], #28
 80144b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80144ba:	4680      	mov	r8, r0
 80144bc:	460c      	mov	r4, r1
 80144be:	bf98      	it	ls
 80144c0:	f04f 0b00 	movls.w	fp, #0
 80144c4:	9201      	str	r2, [sp, #4]
 80144c6:	4616      	mov	r6, r2
 80144c8:	46aa      	mov	sl, r5
 80144ca:	462f      	mov	r7, r5
 80144cc:	9502      	str	r5, [sp, #8]
 80144ce:	68a2      	ldr	r2, [r4, #8]
 80144d0:	b15a      	cbz	r2, 80144ea <_scanf_float+0x66>
 80144d2:	f8d9 3000 	ldr.w	r3, [r9]
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80144da:	d863      	bhi.n	80145a4 <_scanf_float+0x120>
 80144dc:	2b40      	cmp	r3, #64	@ 0x40
 80144de:	d83b      	bhi.n	8014558 <_scanf_float+0xd4>
 80144e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80144e4:	b2c8      	uxtb	r0, r1
 80144e6:	280e      	cmp	r0, #14
 80144e8:	d939      	bls.n	801455e <_scanf_float+0xda>
 80144ea:	b11f      	cbz	r7, 80144f4 <_scanf_float+0x70>
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80144f2:	6023      	str	r3, [r4, #0]
 80144f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144f8:	f1ba 0f01 	cmp.w	sl, #1
 80144fc:	f200 8114 	bhi.w	8014728 <_scanf_float+0x2a4>
 8014500:	9b01      	ldr	r3, [sp, #4]
 8014502:	429e      	cmp	r6, r3
 8014504:	f200 8105 	bhi.w	8014712 <_scanf_float+0x28e>
 8014508:	2001      	movs	r0, #1
 801450a:	b007      	add	sp, #28
 801450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014510:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014514:	2a0d      	cmp	r2, #13
 8014516:	d8e8      	bhi.n	80144ea <_scanf_float+0x66>
 8014518:	a101      	add	r1, pc, #4	@ (adr r1, 8014520 <_scanf_float+0x9c>)
 801451a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801451e:	bf00      	nop
 8014520:	08014669 	.word	0x08014669
 8014524:	080144eb 	.word	0x080144eb
 8014528:	080144eb 	.word	0x080144eb
 801452c:	080144eb 	.word	0x080144eb
 8014530:	080146c5 	.word	0x080146c5
 8014534:	0801469f 	.word	0x0801469f
 8014538:	080144eb 	.word	0x080144eb
 801453c:	080144eb 	.word	0x080144eb
 8014540:	08014677 	.word	0x08014677
 8014544:	080144eb 	.word	0x080144eb
 8014548:	080144eb 	.word	0x080144eb
 801454c:	080144eb 	.word	0x080144eb
 8014550:	080144eb 	.word	0x080144eb
 8014554:	08014633 	.word	0x08014633
 8014558:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801455c:	e7da      	b.n	8014514 <_scanf_float+0x90>
 801455e:	290e      	cmp	r1, #14
 8014560:	d8c3      	bhi.n	80144ea <_scanf_float+0x66>
 8014562:	a001      	add	r0, pc, #4	@ (adr r0, 8014568 <_scanf_float+0xe4>)
 8014564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014568:	08014623 	.word	0x08014623
 801456c:	080144eb 	.word	0x080144eb
 8014570:	08014623 	.word	0x08014623
 8014574:	080146b3 	.word	0x080146b3
 8014578:	080144eb 	.word	0x080144eb
 801457c:	080145c5 	.word	0x080145c5
 8014580:	08014609 	.word	0x08014609
 8014584:	08014609 	.word	0x08014609
 8014588:	08014609 	.word	0x08014609
 801458c:	08014609 	.word	0x08014609
 8014590:	08014609 	.word	0x08014609
 8014594:	08014609 	.word	0x08014609
 8014598:	08014609 	.word	0x08014609
 801459c:	08014609 	.word	0x08014609
 80145a0:	08014609 	.word	0x08014609
 80145a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80145a6:	d809      	bhi.n	80145bc <_scanf_float+0x138>
 80145a8:	2b60      	cmp	r3, #96	@ 0x60
 80145aa:	d8b1      	bhi.n	8014510 <_scanf_float+0x8c>
 80145ac:	2b54      	cmp	r3, #84	@ 0x54
 80145ae:	d07b      	beq.n	80146a8 <_scanf_float+0x224>
 80145b0:	2b59      	cmp	r3, #89	@ 0x59
 80145b2:	d19a      	bne.n	80144ea <_scanf_float+0x66>
 80145b4:	2d07      	cmp	r5, #7
 80145b6:	d198      	bne.n	80144ea <_scanf_float+0x66>
 80145b8:	2508      	movs	r5, #8
 80145ba:	e02f      	b.n	801461c <_scanf_float+0x198>
 80145bc:	2b74      	cmp	r3, #116	@ 0x74
 80145be:	d073      	beq.n	80146a8 <_scanf_float+0x224>
 80145c0:	2b79      	cmp	r3, #121	@ 0x79
 80145c2:	e7f6      	b.n	80145b2 <_scanf_float+0x12e>
 80145c4:	6821      	ldr	r1, [r4, #0]
 80145c6:	05c8      	lsls	r0, r1, #23
 80145c8:	d51e      	bpl.n	8014608 <_scanf_float+0x184>
 80145ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80145ce:	6021      	str	r1, [r4, #0]
 80145d0:	3701      	adds	r7, #1
 80145d2:	f1bb 0f00 	cmp.w	fp, #0
 80145d6:	d003      	beq.n	80145e0 <_scanf_float+0x15c>
 80145d8:	3201      	adds	r2, #1
 80145da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145de:	60a2      	str	r2, [r4, #8]
 80145e0:	68a3      	ldr	r3, [r4, #8]
 80145e2:	3b01      	subs	r3, #1
 80145e4:	60a3      	str	r3, [r4, #8]
 80145e6:	6923      	ldr	r3, [r4, #16]
 80145e8:	3301      	adds	r3, #1
 80145ea:	6123      	str	r3, [r4, #16]
 80145ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80145f0:	3b01      	subs	r3, #1
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80145f8:	f340 8082 	ble.w	8014700 <_scanf_float+0x27c>
 80145fc:	f8d9 3000 	ldr.w	r3, [r9]
 8014600:	3301      	adds	r3, #1
 8014602:	f8c9 3000 	str.w	r3, [r9]
 8014606:	e762      	b.n	80144ce <_scanf_float+0x4a>
 8014608:	eb1a 0105 	adds.w	r1, sl, r5
 801460c:	f47f af6d 	bne.w	80144ea <_scanf_float+0x66>
 8014610:	6822      	ldr	r2, [r4, #0]
 8014612:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014616:	6022      	str	r2, [r4, #0]
 8014618:	460d      	mov	r5, r1
 801461a:	468a      	mov	sl, r1
 801461c:	f806 3b01 	strb.w	r3, [r6], #1
 8014620:	e7de      	b.n	80145e0 <_scanf_float+0x15c>
 8014622:	6822      	ldr	r2, [r4, #0]
 8014624:	0610      	lsls	r0, r2, #24
 8014626:	f57f af60 	bpl.w	80144ea <_scanf_float+0x66>
 801462a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801462e:	6022      	str	r2, [r4, #0]
 8014630:	e7f4      	b.n	801461c <_scanf_float+0x198>
 8014632:	f1ba 0f00 	cmp.w	sl, #0
 8014636:	d10c      	bne.n	8014652 <_scanf_float+0x1ce>
 8014638:	b977      	cbnz	r7, 8014658 <_scanf_float+0x1d4>
 801463a:	6822      	ldr	r2, [r4, #0]
 801463c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014640:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014644:	d108      	bne.n	8014658 <_scanf_float+0x1d4>
 8014646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801464a:	6022      	str	r2, [r4, #0]
 801464c:	f04f 0a01 	mov.w	sl, #1
 8014650:	e7e4      	b.n	801461c <_scanf_float+0x198>
 8014652:	f1ba 0f02 	cmp.w	sl, #2
 8014656:	d050      	beq.n	80146fa <_scanf_float+0x276>
 8014658:	2d01      	cmp	r5, #1
 801465a:	d002      	beq.n	8014662 <_scanf_float+0x1de>
 801465c:	2d04      	cmp	r5, #4
 801465e:	f47f af44 	bne.w	80144ea <_scanf_float+0x66>
 8014662:	3501      	adds	r5, #1
 8014664:	b2ed      	uxtb	r5, r5
 8014666:	e7d9      	b.n	801461c <_scanf_float+0x198>
 8014668:	f1ba 0f01 	cmp.w	sl, #1
 801466c:	f47f af3d 	bne.w	80144ea <_scanf_float+0x66>
 8014670:	f04f 0a02 	mov.w	sl, #2
 8014674:	e7d2      	b.n	801461c <_scanf_float+0x198>
 8014676:	b975      	cbnz	r5, 8014696 <_scanf_float+0x212>
 8014678:	2f00      	cmp	r7, #0
 801467a:	f47f af37 	bne.w	80144ec <_scanf_float+0x68>
 801467e:	6822      	ldr	r2, [r4, #0]
 8014680:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014684:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014688:	f040 8103 	bne.w	8014892 <_scanf_float+0x40e>
 801468c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014690:	6022      	str	r2, [r4, #0]
 8014692:	2501      	movs	r5, #1
 8014694:	e7c2      	b.n	801461c <_scanf_float+0x198>
 8014696:	2d03      	cmp	r5, #3
 8014698:	d0e3      	beq.n	8014662 <_scanf_float+0x1de>
 801469a:	2d05      	cmp	r5, #5
 801469c:	e7df      	b.n	801465e <_scanf_float+0x1da>
 801469e:	2d02      	cmp	r5, #2
 80146a0:	f47f af23 	bne.w	80144ea <_scanf_float+0x66>
 80146a4:	2503      	movs	r5, #3
 80146a6:	e7b9      	b.n	801461c <_scanf_float+0x198>
 80146a8:	2d06      	cmp	r5, #6
 80146aa:	f47f af1e 	bne.w	80144ea <_scanf_float+0x66>
 80146ae:	2507      	movs	r5, #7
 80146b0:	e7b4      	b.n	801461c <_scanf_float+0x198>
 80146b2:	6822      	ldr	r2, [r4, #0]
 80146b4:	0591      	lsls	r1, r2, #22
 80146b6:	f57f af18 	bpl.w	80144ea <_scanf_float+0x66>
 80146ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80146be:	6022      	str	r2, [r4, #0]
 80146c0:	9702      	str	r7, [sp, #8]
 80146c2:	e7ab      	b.n	801461c <_scanf_float+0x198>
 80146c4:	6822      	ldr	r2, [r4, #0]
 80146c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80146ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80146ce:	d005      	beq.n	80146dc <_scanf_float+0x258>
 80146d0:	0550      	lsls	r0, r2, #21
 80146d2:	f57f af0a 	bpl.w	80144ea <_scanf_float+0x66>
 80146d6:	2f00      	cmp	r7, #0
 80146d8:	f000 80db 	beq.w	8014892 <_scanf_float+0x40e>
 80146dc:	0591      	lsls	r1, r2, #22
 80146de:	bf58      	it	pl
 80146e0:	9902      	ldrpl	r1, [sp, #8]
 80146e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80146e6:	bf58      	it	pl
 80146e8:	1a79      	subpl	r1, r7, r1
 80146ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80146ee:	bf58      	it	pl
 80146f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80146f4:	6022      	str	r2, [r4, #0]
 80146f6:	2700      	movs	r7, #0
 80146f8:	e790      	b.n	801461c <_scanf_float+0x198>
 80146fa:	f04f 0a03 	mov.w	sl, #3
 80146fe:	e78d      	b.n	801461c <_scanf_float+0x198>
 8014700:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014704:	4649      	mov	r1, r9
 8014706:	4640      	mov	r0, r8
 8014708:	4798      	blx	r3
 801470a:	2800      	cmp	r0, #0
 801470c:	f43f aedf 	beq.w	80144ce <_scanf_float+0x4a>
 8014710:	e6eb      	b.n	80144ea <_scanf_float+0x66>
 8014712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801471a:	464a      	mov	r2, r9
 801471c:	4640      	mov	r0, r8
 801471e:	4798      	blx	r3
 8014720:	6923      	ldr	r3, [r4, #16]
 8014722:	3b01      	subs	r3, #1
 8014724:	6123      	str	r3, [r4, #16]
 8014726:	e6eb      	b.n	8014500 <_scanf_float+0x7c>
 8014728:	1e6b      	subs	r3, r5, #1
 801472a:	2b06      	cmp	r3, #6
 801472c:	d824      	bhi.n	8014778 <_scanf_float+0x2f4>
 801472e:	2d02      	cmp	r5, #2
 8014730:	d836      	bhi.n	80147a0 <_scanf_float+0x31c>
 8014732:	9b01      	ldr	r3, [sp, #4]
 8014734:	429e      	cmp	r6, r3
 8014736:	f67f aee7 	bls.w	8014508 <_scanf_float+0x84>
 801473a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801473e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014742:	464a      	mov	r2, r9
 8014744:	4640      	mov	r0, r8
 8014746:	4798      	blx	r3
 8014748:	6923      	ldr	r3, [r4, #16]
 801474a:	3b01      	subs	r3, #1
 801474c:	6123      	str	r3, [r4, #16]
 801474e:	e7f0      	b.n	8014732 <_scanf_float+0x2ae>
 8014750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014754:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014758:	464a      	mov	r2, r9
 801475a:	4640      	mov	r0, r8
 801475c:	4798      	blx	r3
 801475e:	6923      	ldr	r3, [r4, #16]
 8014760:	3b01      	subs	r3, #1
 8014762:	6123      	str	r3, [r4, #16]
 8014764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014768:	fa5f fa8a 	uxtb.w	sl, sl
 801476c:	f1ba 0f02 	cmp.w	sl, #2
 8014770:	d1ee      	bne.n	8014750 <_scanf_float+0x2cc>
 8014772:	3d03      	subs	r5, #3
 8014774:	b2ed      	uxtb	r5, r5
 8014776:	1b76      	subs	r6, r6, r5
 8014778:	6823      	ldr	r3, [r4, #0]
 801477a:	05da      	lsls	r2, r3, #23
 801477c:	d530      	bpl.n	80147e0 <_scanf_float+0x35c>
 801477e:	055b      	lsls	r3, r3, #21
 8014780:	d511      	bpl.n	80147a6 <_scanf_float+0x322>
 8014782:	9b01      	ldr	r3, [sp, #4]
 8014784:	429e      	cmp	r6, r3
 8014786:	f67f aebf 	bls.w	8014508 <_scanf_float+0x84>
 801478a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801478e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014792:	464a      	mov	r2, r9
 8014794:	4640      	mov	r0, r8
 8014796:	4798      	blx	r3
 8014798:	6923      	ldr	r3, [r4, #16]
 801479a:	3b01      	subs	r3, #1
 801479c:	6123      	str	r3, [r4, #16]
 801479e:	e7f0      	b.n	8014782 <_scanf_float+0x2fe>
 80147a0:	46aa      	mov	sl, r5
 80147a2:	46b3      	mov	fp, r6
 80147a4:	e7de      	b.n	8014764 <_scanf_float+0x2e0>
 80147a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80147aa:	6923      	ldr	r3, [r4, #16]
 80147ac:	2965      	cmp	r1, #101	@ 0x65
 80147ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80147b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80147b6:	6123      	str	r3, [r4, #16]
 80147b8:	d00c      	beq.n	80147d4 <_scanf_float+0x350>
 80147ba:	2945      	cmp	r1, #69	@ 0x45
 80147bc:	d00a      	beq.n	80147d4 <_scanf_float+0x350>
 80147be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80147c2:	464a      	mov	r2, r9
 80147c4:	4640      	mov	r0, r8
 80147c6:	4798      	blx	r3
 80147c8:	6923      	ldr	r3, [r4, #16]
 80147ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80147ce:	3b01      	subs	r3, #1
 80147d0:	1eb5      	subs	r5, r6, #2
 80147d2:	6123      	str	r3, [r4, #16]
 80147d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80147d8:	464a      	mov	r2, r9
 80147da:	4640      	mov	r0, r8
 80147dc:	4798      	blx	r3
 80147de:	462e      	mov	r6, r5
 80147e0:	6822      	ldr	r2, [r4, #0]
 80147e2:	f012 0210 	ands.w	r2, r2, #16
 80147e6:	d001      	beq.n	80147ec <_scanf_float+0x368>
 80147e8:	2000      	movs	r0, #0
 80147ea:	e68e      	b.n	801450a <_scanf_float+0x86>
 80147ec:	7032      	strb	r2, [r6, #0]
 80147ee:	6823      	ldr	r3, [r4, #0]
 80147f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80147f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80147f8:	d125      	bne.n	8014846 <_scanf_float+0x3c2>
 80147fa:	9b02      	ldr	r3, [sp, #8]
 80147fc:	429f      	cmp	r7, r3
 80147fe:	d00a      	beq.n	8014816 <_scanf_float+0x392>
 8014800:	1bda      	subs	r2, r3, r7
 8014802:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014806:	429e      	cmp	r6, r3
 8014808:	bf28      	it	cs
 801480a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801480e:	4922      	ldr	r1, [pc, #136]	@ (8014898 <_scanf_float+0x414>)
 8014810:	4630      	mov	r0, r6
 8014812:	f000 f93d 	bl	8014a90 <siprintf>
 8014816:	9901      	ldr	r1, [sp, #4]
 8014818:	2200      	movs	r2, #0
 801481a:	4640      	mov	r0, r8
 801481c:	f002 fc94 	bl	8017148 <_strtod_r>
 8014820:	9b03      	ldr	r3, [sp, #12]
 8014822:	6821      	ldr	r1, [r4, #0]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f011 0f02 	tst.w	r1, #2
 801482a:	ec57 6b10 	vmov	r6, r7, d0
 801482e:	f103 0204 	add.w	r2, r3, #4
 8014832:	d015      	beq.n	8014860 <_scanf_float+0x3dc>
 8014834:	9903      	ldr	r1, [sp, #12]
 8014836:	600a      	str	r2, [r1, #0]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	e9c3 6700 	strd	r6, r7, [r3]
 801483e:	68e3      	ldr	r3, [r4, #12]
 8014840:	3301      	adds	r3, #1
 8014842:	60e3      	str	r3, [r4, #12]
 8014844:	e7d0      	b.n	80147e8 <_scanf_float+0x364>
 8014846:	9b04      	ldr	r3, [sp, #16]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d0e4      	beq.n	8014816 <_scanf_float+0x392>
 801484c:	9905      	ldr	r1, [sp, #20]
 801484e:	230a      	movs	r3, #10
 8014850:	3101      	adds	r1, #1
 8014852:	4640      	mov	r0, r8
 8014854:	f002 fcf8 	bl	8017248 <_strtol_r>
 8014858:	9b04      	ldr	r3, [sp, #16]
 801485a:	9e05      	ldr	r6, [sp, #20]
 801485c:	1ac2      	subs	r2, r0, r3
 801485e:	e7d0      	b.n	8014802 <_scanf_float+0x37e>
 8014860:	f011 0f04 	tst.w	r1, #4
 8014864:	9903      	ldr	r1, [sp, #12]
 8014866:	600a      	str	r2, [r1, #0]
 8014868:	d1e6      	bne.n	8014838 <_scanf_float+0x3b4>
 801486a:	681d      	ldr	r5, [r3, #0]
 801486c:	4632      	mov	r2, r6
 801486e:	463b      	mov	r3, r7
 8014870:	4630      	mov	r0, r6
 8014872:	4639      	mov	r1, r7
 8014874:	f7ec f982 	bl	8000b7c <__aeabi_dcmpun>
 8014878:	b128      	cbz	r0, 8014886 <_scanf_float+0x402>
 801487a:	4808      	ldr	r0, [pc, #32]	@ (801489c <_scanf_float+0x418>)
 801487c:	f000 fa5a 	bl	8014d34 <nanf>
 8014880:	ed85 0a00 	vstr	s0, [r5]
 8014884:	e7db      	b.n	801483e <_scanf_float+0x3ba>
 8014886:	4630      	mov	r0, r6
 8014888:	4639      	mov	r1, r7
 801488a:	f7ec f9d5 	bl	8000c38 <__aeabi_d2f>
 801488e:	6028      	str	r0, [r5, #0]
 8014890:	e7d5      	b.n	801483e <_scanf_float+0x3ba>
 8014892:	2700      	movs	r7, #0
 8014894:	e62e      	b.n	80144f4 <_scanf_float+0x70>
 8014896:	bf00      	nop
 8014898:	0801bbe0 	.word	0x0801bbe0
 801489c:	0801bd21 	.word	0x0801bd21

080148a0 <std>:
 80148a0:	2300      	movs	r3, #0
 80148a2:	b510      	push	{r4, lr}
 80148a4:	4604      	mov	r4, r0
 80148a6:	e9c0 3300 	strd	r3, r3, [r0]
 80148aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148ae:	6083      	str	r3, [r0, #8]
 80148b0:	8181      	strh	r1, [r0, #12]
 80148b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80148b4:	81c2      	strh	r2, [r0, #14]
 80148b6:	6183      	str	r3, [r0, #24]
 80148b8:	4619      	mov	r1, r3
 80148ba:	2208      	movs	r2, #8
 80148bc:	305c      	adds	r0, #92	@ 0x5c
 80148be:	f000 f94c 	bl	8014b5a <memset>
 80148c2:	4b0d      	ldr	r3, [pc, #52]	@ (80148f8 <std+0x58>)
 80148c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80148c6:	4b0d      	ldr	r3, [pc, #52]	@ (80148fc <std+0x5c>)
 80148c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80148ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014900 <std+0x60>)
 80148cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80148ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014904 <std+0x64>)
 80148d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80148d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014908 <std+0x68>)
 80148d4:	6224      	str	r4, [r4, #32]
 80148d6:	429c      	cmp	r4, r3
 80148d8:	d006      	beq.n	80148e8 <std+0x48>
 80148da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80148de:	4294      	cmp	r4, r2
 80148e0:	d002      	beq.n	80148e8 <std+0x48>
 80148e2:	33d0      	adds	r3, #208	@ 0xd0
 80148e4:	429c      	cmp	r4, r3
 80148e6:	d105      	bne.n	80148f4 <std+0x54>
 80148e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80148ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148f0:	f000 ba0e 	b.w	8014d10 <__retarget_lock_init_recursive>
 80148f4:	bd10      	pop	{r4, pc}
 80148f6:	bf00      	nop
 80148f8:	08014ad5 	.word	0x08014ad5
 80148fc:	08014af7 	.word	0x08014af7
 8014900:	08014b2f 	.word	0x08014b2f
 8014904:	08014b53 	.word	0x08014b53
 8014908:	20004934 	.word	0x20004934

0801490c <stdio_exit_handler>:
 801490c:	4a02      	ldr	r2, [pc, #8]	@ (8014918 <stdio_exit_handler+0xc>)
 801490e:	4903      	ldr	r1, [pc, #12]	@ (801491c <stdio_exit_handler+0x10>)
 8014910:	4803      	ldr	r0, [pc, #12]	@ (8014920 <stdio_exit_handler+0x14>)
 8014912:	f000 b869 	b.w	80149e8 <_fwalk_sglue>
 8014916:	bf00      	nop
 8014918:	20000048 	.word	0x20000048
 801491c:	08017605 	.word	0x08017605
 8014920:	20000058 	.word	0x20000058

08014924 <cleanup_stdio>:
 8014924:	6841      	ldr	r1, [r0, #4]
 8014926:	4b0c      	ldr	r3, [pc, #48]	@ (8014958 <cleanup_stdio+0x34>)
 8014928:	4299      	cmp	r1, r3
 801492a:	b510      	push	{r4, lr}
 801492c:	4604      	mov	r4, r0
 801492e:	d001      	beq.n	8014934 <cleanup_stdio+0x10>
 8014930:	f002 fe68 	bl	8017604 <_fflush_r>
 8014934:	68a1      	ldr	r1, [r4, #8]
 8014936:	4b09      	ldr	r3, [pc, #36]	@ (801495c <cleanup_stdio+0x38>)
 8014938:	4299      	cmp	r1, r3
 801493a:	d002      	beq.n	8014942 <cleanup_stdio+0x1e>
 801493c:	4620      	mov	r0, r4
 801493e:	f002 fe61 	bl	8017604 <_fflush_r>
 8014942:	68e1      	ldr	r1, [r4, #12]
 8014944:	4b06      	ldr	r3, [pc, #24]	@ (8014960 <cleanup_stdio+0x3c>)
 8014946:	4299      	cmp	r1, r3
 8014948:	d004      	beq.n	8014954 <cleanup_stdio+0x30>
 801494a:	4620      	mov	r0, r4
 801494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014950:	f002 be58 	b.w	8017604 <_fflush_r>
 8014954:	bd10      	pop	{r4, pc}
 8014956:	bf00      	nop
 8014958:	20004934 	.word	0x20004934
 801495c:	2000499c 	.word	0x2000499c
 8014960:	20004a04 	.word	0x20004a04

08014964 <global_stdio_init.part.0>:
 8014964:	b510      	push	{r4, lr}
 8014966:	4b0b      	ldr	r3, [pc, #44]	@ (8014994 <global_stdio_init.part.0+0x30>)
 8014968:	4c0b      	ldr	r4, [pc, #44]	@ (8014998 <global_stdio_init.part.0+0x34>)
 801496a:	4a0c      	ldr	r2, [pc, #48]	@ (801499c <global_stdio_init.part.0+0x38>)
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	4620      	mov	r0, r4
 8014970:	2200      	movs	r2, #0
 8014972:	2104      	movs	r1, #4
 8014974:	f7ff ff94 	bl	80148a0 <std>
 8014978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801497c:	2201      	movs	r2, #1
 801497e:	2109      	movs	r1, #9
 8014980:	f7ff ff8e 	bl	80148a0 <std>
 8014984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014988:	2202      	movs	r2, #2
 801498a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801498e:	2112      	movs	r1, #18
 8014990:	f7ff bf86 	b.w	80148a0 <std>
 8014994:	20004a6c 	.word	0x20004a6c
 8014998:	20004934 	.word	0x20004934
 801499c:	0801490d 	.word	0x0801490d

080149a0 <__sfp_lock_acquire>:
 80149a0:	4801      	ldr	r0, [pc, #4]	@ (80149a8 <__sfp_lock_acquire+0x8>)
 80149a2:	f000 b9b6 	b.w	8014d12 <__retarget_lock_acquire_recursive>
 80149a6:	bf00      	nop
 80149a8:	20004a75 	.word	0x20004a75

080149ac <__sfp_lock_release>:
 80149ac:	4801      	ldr	r0, [pc, #4]	@ (80149b4 <__sfp_lock_release+0x8>)
 80149ae:	f000 b9b1 	b.w	8014d14 <__retarget_lock_release_recursive>
 80149b2:	bf00      	nop
 80149b4:	20004a75 	.word	0x20004a75

080149b8 <__sinit>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	4604      	mov	r4, r0
 80149bc:	f7ff fff0 	bl	80149a0 <__sfp_lock_acquire>
 80149c0:	6a23      	ldr	r3, [r4, #32]
 80149c2:	b11b      	cbz	r3, 80149cc <__sinit+0x14>
 80149c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149c8:	f7ff bff0 	b.w	80149ac <__sfp_lock_release>
 80149cc:	4b04      	ldr	r3, [pc, #16]	@ (80149e0 <__sinit+0x28>)
 80149ce:	6223      	str	r3, [r4, #32]
 80149d0:	4b04      	ldr	r3, [pc, #16]	@ (80149e4 <__sinit+0x2c>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d1f5      	bne.n	80149c4 <__sinit+0xc>
 80149d8:	f7ff ffc4 	bl	8014964 <global_stdio_init.part.0>
 80149dc:	e7f2      	b.n	80149c4 <__sinit+0xc>
 80149de:	bf00      	nop
 80149e0:	08014925 	.word	0x08014925
 80149e4:	20004a6c 	.word	0x20004a6c

080149e8 <_fwalk_sglue>:
 80149e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149ec:	4607      	mov	r7, r0
 80149ee:	4688      	mov	r8, r1
 80149f0:	4614      	mov	r4, r2
 80149f2:	2600      	movs	r6, #0
 80149f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149f8:	f1b9 0901 	subs.w	r9, r9, #1
 80149fc:	d505      	bpl.n	8014a0a <_fwalk_sglue+0x22>
 80149fe:	6824      	ldr	r4, [r4, #0]
 8014a00:	2c00      	cmp	r4, #0
 8014a02:	d1f7      	bne.n	80149f4 <_fwalk_sglue+0xc>
 8014a04:	4630      	mov	r0, r6
 8014a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d907      	bls.n	8014a20 <_fwalk_sglue+0x38>
 8014a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a14:	3301      	adds	r3, #1
 8014a16:	d003      	beq.n	8014a20 <_fwalk_sglue+0x38>
 8014a18:	4629      	mov	r1, r5
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	47c0      	blx	r8
 8014a1e:	4306      	orrs	r6, r0
 8014a20:	3568      	adds	r5, #104	@ 0x68
 8014a22:	e7e9      	b.n	80149f8 <_fwalk_sglue+0x10>

08014a24 <sniprintf>:
 8014a24:	b40c      	push	{r2, r3}
 8014a26:	b530      	push	{r4, r5, lr}
 8014a28:	4b18      	ldr	r3, [pc, #96]	@ (8014a8c <sniprintf+0x68>)
 8014a2a:	1e0c      	subs	r4, r1, #0
 8014a2c:	681d      	ldr	r5, [r3, #0]
 8014a2e:	b09d      	sub	sp, #116	@ 0x74
 8014a30:	da08      	bge.n	8014a44 <sniprintf+0x20>
 8014a32:	238b      	movs	r3, #139	@ 0x8b
 8014a34:	602b      	str	r3, [r5, #0]
 8014a36:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3a:	b01d      	add	sp, #116	@ 0x74
 8014a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a40:	b002      	add	sp, #8
 8014a42:	4770      	bx	lr
 8014a44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014a48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a4c:	f04f 0300 	mov.w	r3, #0
 8014a50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014a52:	bf14      	ite	ne
 8014a54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a58:	4623      	moveq	r3, r4
 8014a5a:	9304      	str	r3, [sp, #16]
 8014a5c:	9307      	str	r3, [sp, #28]
 8014a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a62:	9002      	str	r0, [sp, #8]
 8014a64:	9006      	str	r0, [sp, #24]
 8014a66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014a6c:	ab21      	add	r3, sp, #132	@ 0x84
 8014a6e:	a902      	add	r1, sp, #8
 8014a70:	4628      	mov	r0, r5
 8014a72:	9301      	str	r3, [sp, #4]
 8014a74:	f002 fc46 	bl	8017304 <_svfiprintf_r>
 8014a78:	1c43      	adds	r3, r0, #1
 8014a7a:	bfbc      	itt	lt
 8014a7c:	238b      	movlt	r3, #139	@ 0x8b
 8014a7e:	602b      	strlt	r3, [r5, #0]
 8014a80:	2c00      	cmp	r4, #0
 8014a82:	d0da      	beq.n	8014a3a <sniprintf+0x16>
 8014a84:	9b02      	ldr	r3, [sp, #8]
 8014a86:	2200      	movs	r2, #0
 8014a88:	701a      	strb	r2, [r3, #0]
 8014a8a:	e7d6      	b.n	8014a3a <sniprintf+0x16>
 8014a8c:	20000054 	.word	0x20000054

08014a90 <siprintf>:
 8014a90:	b40e      	push	{r1, r2, r3}
 8014a92:	b510      	push	{r4, lr}
 8014a94:	b09d      	sub	sp, #116	@ 0x74
 8014a96:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014a98:	9002      	str	r0, [sp, #8]
 8014a9a:	9006      	str	r0, [sp, #24]
 8014a9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014aa0:	480a      	ldr	r0, [pc, #40]	@ (8014acc <siprintf+0x3c>)
 8014aa2:	9107      	str	r1, [sp, #28]
 8014aa4:	9104      	str	r1, [sp, #16]
 8014aa6:	490a      	ldr	r1, [pc, #40]	@ (8014ad0 <siprintf+0x40>)
 8014aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aac:	9105      	str	r1, [sp, #20]
 8014aae:	2400      	movs	r4, #0
 8014ab0:	a902      	add	r1, sp, #8
 8014ab2:	6800      	ldr	r0, [r0, #0]
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014ab8:	f002 fc24 	bl	8017304 <_svfiprintf_r>
 8014abc:	9b02      	ldr	r3, [sp, #8]
 8014abe:	701c      	strb	r4, [r3, #0]
 8014ac0:	b01d      	add	sp, #116	@ 0x74
 8014ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ac6:	b003      	add	sp, #12
 8014ac8:	4770      	bx	lr
 8014aca:	bf00      	nop
 8014acc:	20000054 	.word	0x20000054
 8014ad0:	ffff0208 	.word	0xffff0208

08014ad4 <__sread>:
 8014ad4:	b510      	push	{r4, lr}
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014adc:	f000 f8ca 	bl	8014c74 <_read_r>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	bfab      	itete	ge
 8014ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ae8:	181b      	addge	r3, r3, r0
 8014aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014aee:	bfac      	ite	ge
 8014af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014af2:	81a3      	strhlt	r3, [r4, #12]
 8014af4:	bd10      	pop	{r4, pc}

08014af6 <__swrite>:
 8014af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014afa:	461f      	mov	r7, r3
 8014afc:	898b      	ldrh	r3, [r1, #12]
 8014afe:	05db      	lsls	r3, r3, #23
 8014b00:	4605      	mov	r5, r0
 8014b02:	460c      	mov	r4, r1
 8014b04:	4616      	mov	r6, r2
 8014b06:	d505      	bpl.n	8014b14 <__swrite+0x1e>
 8014b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b0c:	2302      	movs	r3, #2
 8014b0e:	2200      	movs	r2, #0
 8014b10:	f000 f89e 	bl	8014c50 <_lseek_r>
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014b1e:	81a3      	strh	r3, [r4, #12]
 8014b20:	4632      	mov	r2, r6
 8014b22:	463b      	mov	r3, r7
 8014b24:	4628      	mov	r0, r5
 8014b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b2a:	f000 b8b5 	b.w	8014c98 <_write_r>

08014b2e <__sseek>:
 8014b2e:	b510      	push	{r4, lr}
 8014b30:	460c      	mov	r4, r1
 8014b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b36:	f000 f88b 	bl	8014c50 <_lseek_r>
 8014b3a:	1c43      	adds	r3, r0, #1
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	bf15      	itete	ne
 8014b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014b4a:	81a3      	strheq	r3, [r4, #12]
 8014b4c:	bf18      	it	ne
 8014b4e:	81a3      	strhne	r3, [r4, #12]
 8014b50:	bd10      	pop	{r4, pc}

08014b52 <__sclose>:
 8014b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b56:	f000 b80d 	b.w	8014b74 <_close_r>

08014b5a <memset>:
 8014b5a:	4402      	add	r2, r0
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d100      	bne.n	8014b64 <memset+0xa>
 8014b62:	4770      	bx	lr
 8014b64:	f803 1b01 	strb.w	r1, [r3], #1
 8014b68:	e7f9      	b.n	8014b5e <memset+0x4>
	...

08014b6c <_localeconv_r>:
 8014b6c:	4800      	ldr	r0, [pc, #0]	@ (8014b70 <_localeconv_r+0x4>)
 8014b6e:	4770      	bx	lr
 8014b70:	20000194 	.word	0x20000194

08014b74 <_close_r>:
 8014b74:	b538      	push	{r3, r4, r5, lr}
 8014b76:	4d06      	ldr	r5, [pc, #24]	@ (8014b90 <_close_r+0x1c>)
 8014b78:	2300      	movs	r3, #0
 8014b7a:	4604      	mov	r4, r0
 8014b7c:	4608      	mov	r0, r1
 8014b7e:	602b      	str	r3, [r5, #0]
 8014b80:	f7ef fd10 	bl	80045a4 <_close>
 8014b84:	1c43      	adds	r3, r0, #1
 8014b86:	d102      	bne.n	8014b8e <_close_r+0x1a>
 8014b88:	682b      	ldr	r3, [r5, #0]
 8014b8a:	b103      	cbz	r3, 8014b8e <_close_r+0x1a>
 8014b8c:	6023      	str	r3, [r4, #0]
 8014b8e:	bd38      	pop	{r3, r4, r5, pc}
 8014b90:	20004a70 	.word	0x20004a70

08014b94 <_reclaim_reent>:
 8014b94:	4b2d      	ldr	r3, [pc, #180]	@ (8014c4c <_reclaim_reent+0xb8>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4283      	cmp	r3, r0
 8014b9a:	b570      	push	{r4, r5, r6, lr}
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	d053      	beq.n	8014c48 <_reclaim_reent+0xb4>
 8014ba0:	69c3      	ldr	r3, [r0, #28]
 8014ba2:	b31b      	cbz	r3, 8014bec <_reclaim_reent+0x58>
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	b163      	cbz	r3, 8014bc2 <_reclaim_reent+0x2e>
 8014ba8:	2500      	movs	r5, #0
 8014baa:	69e3      	ldr	r3, [r4, #28]
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	5959      	ldr	r1, [r3, r5]
 8014bb0:	b9b1      	cbnz	r1, 8014be0 <_reclaim_reent+0x4c>
 8014bb2:	3504      	adds	r5, #4
 8014bb4:	2d80      	cmp	r5, #128	@ 0x80
 8014bb6:	d1f8      	bne.n	8014baa <_reclaim_reent+0x16>
 8014bb8:	69e3      	ldr	r3, [r4, #28]
 8014bba:	4620      	mov	r0, r4
 8014bbc:	68d9      	ldr	r1, [r3, #12]
 8014bbe:	f000 ff17 	bl	80159f0 <_free_r>
 8014bc2:	69e3      	ldr	r3, [r4, #28]
 8014bc4:	6819      	ldr	r1, [r3, #0]
 8014bc6:	b111      	cbz	r1, 8014bce <_reclaim_reent+0x3a>
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f000 ff11 	bl	80159f0 <_free_r>
 8014bce:	69e3      	ldr	r3, [r4, #28]
 8014bd0:	689d      	ldr	r5, [r3, #8]
 8014bd2:	b15d      	cbz	r5, 8014bec <_reclaim_reent+0x58>
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	682d      	ldr	r5, [r5, #0]
 8014bda:	f000 ff09 	bl	80159f0 <_free_r>
 8014bde:	e7f8      	b.n	8014bd2 <_reclaim_reent+0x3e>
 8014be0:	680e      	ldr	r6, [r1, #0]
 8014be2:	4620      	mov	r0, r4
 8014be4:	f000 ff04 	bl	80159f0 <_free_r>
 8014be8:	4631      	mov	r1, r6
 8014bea:	e7e1      	b.n	8014bb0 <_reclaim_reent+0x1c>
 8014bec:	6961      	ldr	r1, [r4, #20]
 8014bee:	b111      	cbz	r1, 8014bf6 <_reclaim_reent+0x62>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	f000 fefd 	bl	80159f0 <_free_r>
 8014bf6:	69e1      	ldr	r1, [r4, #28]
 8014bf8:	b111      	cbz	r1, 8014c00 <_reclaim_reent+0x6c>
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 fef8 	bl	80159f0 <_free_r>
 8014c00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014c02:	b111      	cbz	r1, 8014c0a <_reclaim_reent+0x76>
 8014c04:	4620      	mov	r0, r4
 8014c06:	f000 fef3 	bl	80159f0 <_free_r>
 8014c0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c0c:	b111      	cbz	r1, 8014c14 <_reclaim_reent+0x80>
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f000 feee 	bl	80159f0 <_free_r>
 8014c14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014c16:	b111      	cbz	r1, 8014c1e <_reclaim_reent+0x8a>
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f000 fee9 	bl	80159f0 <_free_r>
 8014c1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014c20:	b111      	cbz	r1, 8014c28 <_reclaim_reent+0x94>
 8014c22:	4620      	mov	r0, r4
 8014c24:	f000 fee4 	bl	80159f0 <_free_r>
 8014c28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014c2a:	b111      	cbz	r1, 8014c32 <_reclaim_reent+0x9e>
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f000 fedf 	bl	80159f0 <_free_r>
 8014c32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014c34:	b111      	cbz	r1, 8014c3c <_reclaim_reent+0xa8>
 8014c36:	4620      	mov	r0, r4
 8014c38:	f000 feda 	bl	80159f0 <_free_r>
 8014c3c:	6a23      	ldr	r3, [r4, #32]
 8014c3e:	b11b      	cbz	r3, 8014c48 <_reclaim_reent+0xb4>
 8014c40:	4620      	mov	r0, r4
 8014c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c46:	4718      	bx	r3
 8014c48:	bd70      	pop	{r4, r5, r6, pc}
 8014c4a:	bf00      	nop
 8014c4c:	20000054 	.word	0x20000054

08014c50 <_lseek_r>:
 8014c50:	b538      	push	{r3, r4, r5, lr}
 8014c52:	4d07      	ldr	r5, [pc, #28]	@ (8014c70 <_lseek_r+0x20>)
 8014c54:	4604      	mov	r4, r0
 8014c56:	4608      	mov	r0, r1
 8014c58:	4611      	mov	r1, r2
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	602a      	str	r2, [r5, #0]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	f7ef fcc7 	bl	80045f2 <_lseek>
 8014c64:	1c43      	adds	r3, r0, #1
 8014c66:	d102      	bne.n	8014c6e <_lseek_r+0x1e>
 8014c68:	682b      	ldr	r3, [r5, #0]
 8014c6a:	b103      	cbz	r3, 8014c6e <_lseek_r+0x1e>
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	bd38      	pop	{r3, r4, r5, pc}
 8014c70:	20004a70 	.word	0x20004a70

08014c74 <_read_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d07      	ldr	r5, [pc, #28]	@ (8014c94 <_read_r+0x20>)
 8014c78:	4604      	mov	r4, r0
 8014c7a:	4608      	mov	r0, r1
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	2200      	movs	r2, #0
 8014c80:	602a      	str	r2, [r5, #0]
 8014c82:	461a      	mov	r2, r3
 8014c84:	f7ef fc55 	bl	8004532 <_read>
 8014c88:	1c43      	adds	r3, r0, #1
 8014c8a:	d102      	bne.n	8014c92 <_read_r+0x1e>
 8014c8c:	682b      	ldr	r3, [r5, #0]
 8014c8e:	b103      	cbz	r3, 8014c92 <_read_r+0x1e>
 8014c90:	6023      	str	r3, [r4, #0]
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	20004a70 	.word	0x20004a70

08014c98 <_write_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d07      	ldr	r5, [pc, #28]	@ (8014cb8 <_write_r+0x20>)
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	602a      	str	r2, [r5, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f7ef fc60 	bl	800456c <_write>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_write_r+0x1e>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_write_r+0x1e>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	20004a70 	.word	0x20004a70

08014cbc <__errno>:
 8014cbc:	4b01      	ldr	r3, [pc, #4]	@ (8014cc4 <__errno+0x8>)
 8014cbe:	6818      	ldr	r0, [r3, #0]
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop
 8014cc4:	20000054 	.word	0x20000054

08014cc8 <__libc_init_array>:
 8014cc8:	b570      	push	{r4, r5, r6, lr}
 8014cca:	4d0d      	ldr	r5, [pc, #52]	@ (8014d00 <__libc_init_array+0x38>)
 8014ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8014d04 <__libc_init_array+0x3c>)
 8014cce:	1b64      	subs	r4, r4, r5
 8014cd0:	10a4      	asrs	r4, r4, #2
 8014cd2:	2600      	movs	r6, #0
 8014cd4:	42a6      	cmp	r6, r4
 8014cd6:	d109      	bne.n	8014cec <__libc_init_array+0x24>
 8014cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8014d08 <__libc_init_array+0x40>)
 8014cda:	4c0c      	ldr	r4, [pc, #48]	@ (8014d0c <__libc_init_array+0x44>)
 8014cdc:	f004 fdd8 	bl	8019890 <_init>
 8014ce0:	1b64      	subs	r4, r4, r5
 8014ce2:	10a4      	asrs	r4, r4, #2
 8014ce4:	2600      	movs	r6, #0
 8014ce6:	42a6      	cmp	r6, r4
 8014ce8:	d105      	bne.n	8014cf6 <__libc_init_array+0x2e>
 8014cea:	bd70      	pop	{r4, r5, r6, pc}
 8014cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cf0:	4798      	blx	r3
 8014cf2:	3601      	adds	r6, #1
 8014cf4:	e7ee      	b.n	8014cd4 <__libc_init_array+0xc>
 8014cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cfa:	4798      	blx	r3
 8014cfc:	3601      	adds	r6, #1
 8014cfe:	e7f2      	b.n	8014ce6 <__libc_init_array+0x1e>
 8014d00:	0801c3fc 	.word	0x0801c3fc
 8014d04:	0801c3fc 	.word	0x0801c3fc
 8014d08:	0801c3fc 	.word	0x0801c3fc
 8014d0c:	0801c400 	.word	0x0801c400

08014d10 <__retarget_lock_init_recursive>:
 8014d10:	4770      	bx	lr

08014d12 <__retarget_lock_acquire_recursive>:
 8014d12:	4770      	bx	lr

08014d14 <__retarget_lock_release_recursive>:
 8014d14:	4770      	bx	lr

08014d16 <memcpy>:
 8014d16:	440a      	add	r2, r1
 8014d18:	4291      	cmp	r1, r2
 8014d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d1e:	d100      	bne.n	8014d22 <memcpy+0xc>
 8014d20:	4770      	bx	lr
 8014d22:	b510      	push	{r4, lr}
 8014d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d2c:	4291      	cmp	r1, r2
 8014d2e:	d1f9      	bne.n	8014d24 <memcpy+0xe>
 8014d30:	bd10      	pop	{r4, pc}
	...

08014d34 <nanf>:
 8014d34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014d3c <nanf+0x8>
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	7fc00000 	.word	0x7fc00000

08014d40 <quorem>:
 8014d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	6903      	ldr	r3, [r0, #16]
 8014d46:	690c      	ldr	r4, [r1, #16]
 8014d48:	42a3      	cmp	r3, r4
 8014d4a:	4607      	mov	r7, r0
 8014d4c:	db7e      	blt.n	8014e4c <quorem+0x10c>
 8014d4e:	3c01      	subs	r4, #1
 8014d50:	f101 0814 	add.w	r8, r1, #20
 8014d54:	00a3      	lsls	r3, r4, #2
 8014d56:	f100 0514 	add.w	r5, r0, #20
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d72:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d76:	d32e      	bcc.n	8014dd6 <quorem+0x96>
 8014d78:	f04f 0a00 	mov.w	sl, #0
 8014d7c:	46c4      	mov	ip, r8
 8014d7e:	46ae      	mov	lr, r5
 8014d80:	46d3      	mov	fp, sl
 8014d82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d86:	b298      	uxth	r0, r3
 8014d88:	fb06 a000 	mla	r0, r6, r0, sl
 8014d8c:	0c02      	lsrs	r2, r0, #16
 8014d8e:	0c1b      	lsrs	r3, r3, #16
 8014d90:	fb06 2303 	mla	r3, r6, r3, r2
 8014d94:	f8de 2000 	ldr.w	r2, [lr]
 8014d98:	b280      	uxth	r0, r0
 8014d9a:	b292      	uxth	r2, r2
 8014d9c:	1a12      	subs	r2, r2, r0
 8014d9e:	445a      	add	r2, fp
 8014da0:	f8de 0000 	ldr.w	r0, [lr]
 8014da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014dae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014db2:	b292      	uxth	r2, r2
 8014db4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014db8:	45e1      	cmp	r9, ip
 8014dba:	f84e 2b04 	str.w	r2, [lr], #4
 8014dbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014dc2:	d2de      	bcs.n	8014d82 <quorem+0x42>
 8014dc4:	9b00      	ldr	r3, [sp, #0]
 8014dc6:	58eb      	ldr	r3, [r5, r3]
 8014dc8:	b92b      	cbnz	r3, 8014dd6 <quorem+0x96>
 8014dca:	9b01      	ldr	r3, [sp, #4]
 8014dcc:	3b04      	subs	r3, #4
 8014dce:	429d      	cmp	r5, r3
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	d32f      	bcc.n	8014e34 <quorem+0xf4>
 8014dd4:	613c      	str	r4, [r7, #16]
 8014dd6:	4638      	mov	r0, r7
 8014dd8:	f001 f9c6 	bl	8016168 <__mcmp>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	db25      	blt.n	8014e2c <quorem+0xec>
 8014de0:	4629      	mov	r1, r5
 8014de2:	2000      	movs	r0, #0
 8014de4:	f858 2b04 	ldr.w	r2, [r8], #4
 8014de8:	f8d1 c000 	ldr.w	ip, [r1]
 8014dec:	fa1f fe82 	uxth.w	lr, r2
 8014df0:	fa1f f38c 	uxth.w	r3, ip
 8014df4:	eba3 030e 	sub.w	r3, r3, lr
 8014df8:	4403      	add	r3, r0
 8014dfa:	0c12      	lsrs	r2, r2, #16
 8014dfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e0a:	45c1      	cmp	r9, r8
 8014e0c:	f841 3b04 	str.w	r3, [r1], #4
 8014e10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e14:	d2e6      	bcs.n	8014de4 <quorem+0xa4>
 8014e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e1e:	b922      	cbnz	r2, 8014e2a <quorem+0xea>
 8014e20:	3b04      	subs	r3, #4
 8014e22:	429d      	cmp	r5, r3
 8014e24:	461a      	mov	r2, r3
 8014e26:	d30b      	bcc.n	8014e40 <quorem+0x100>
 8014e28:	613c      	str	r4, [r7, #16]
 8014e2a:	3601      	adds	r6, #1
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	b003      	add	sp, #12
 8014e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e34:	6812      	ldr	r2, [r2, #0]
 8014e36:	3b04      	subs	r3, #4
 8014e38:	2a00      	cmp	r2, #0
 8014e3a:	d1cb      	bne.n	8014dd4 <quorem+0x94>
 8014e3c:	3c01      	subs	r4, #1
 8014e3e:	e7c6      	b.n	8014dce <quorem+0x8e>
 8014e40:	6812      	ldr	r2, [r2, #0]
 8014e42:	3b04      	subs	r3, #4
 8014e44:	2a00      	cmp	r2, #0
 8014e46:	d1ef      	bne.n	8014e28 <quorem+0xe8>
 8014e48:	3c01      	subs	r4, #1
 8014e4a:	e7ea      	b.n	8014e22 <quorem+0xe2>
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	e7ee      	b.n	8014e2e <quorem+0xee>

08014e50 <_dtoa_r>:
 8014e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	69c7      	ldr	r7, [r0, #28]
 8014e56:	b097      	sub	sp, #92	@ 0x5c
 8014e58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014e5c:	ec55 4b10 	vmov	r4, r5, d0
 8014e60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014e62:	9107      	str	r1, [sp, #28]
 8014e64:	4681      	mov	r9, r0
 8014e66:	920c      	str	r2, [sp, #48]	@ 0x30
 8014e68:	9311      	str	r3, [sp, #68]	@ 0x44
 8014e6a:	b97f      	cbnz	r7, 8014e8c <_dtoa_r+0x3c>
 8014e6c:	2010      	movs	r0, #16
 8014e6e:	f000 fe09 	bl	8015a84 <malloc>
 8014e72:	4602      	mov	r2, r0
 8014e74:	f8c9 001c 	str.w	r0, [r9, #28]
 8014e78:	b920      	cbnz	r0, 8014e84 <_dtoa_r+0x34>
 8014e7a:	4ba9      	ldr	r3, [pc, #676]	@ (8015120 <_dtoa_r+0x2d0>)
 8014e7c:	21ef      	movs	r1, #239	@ 0xef
 8014e7e:	48a9      	ldr	r0, [pc, #676]	@ (8015124 <_dtoa_r+0x2d4>)
 8014e80:	f002 fc2e 	bl	80176e0 <__assert_func>
 8014e84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014e88:	6007      	str	r7, [r0, #0]
 8014e8a:	60c7      	str	r7, [r0, #12]
 8014e8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e90:	6819      	ldr	r1, [r3, #0]
 8014e92:	b159      	cbz	r1, 8014eac <_dtoa_r+0x5c>
 8014e94:	685a      	ldr	r2, [r3, #4]
 8014e96:	604a      	str	r2, [r1, #4]
 8014e98:	2301      	movs	r3, #1
 8014e9a:	4093      	lsls	r3, r2
 8014e9c:	608b      	str	r3, [r1, #8]
 8014e9e:	4648      	mov	r0, r9
 8014ea0:	f000 fee6 	bl	8015c70 <_Bfree>
 8014ea4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	601a      	str	r2, [r3, #0]
 8014eac:	1e2b      	subs	r3, r5, #0
 8014eae:	bfb9      	ittee	lt
 8014eb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014eb4:	9305      	strlt	r3, [sp, #20]
 8014eb6:	2300      	movge	r3, #0
 8014eb8:	6033      	strge	r3, [r6, #0]
 8014eba:	9f05      	ldr	r7, [sp, #20]
 8014ebc:	4b9a      	ldr	r3, [pc, #616]	@ (8015128 <_dtoa_r+0x2d8>)
 8014ebe:	bfbc      	itt	lt
 8014ec0:	2201      	movlt	r2, #1
 8014ec2:	6032      	strlt	r2, [r6, #0]
 8014ec4:	43bb      	bics	r3, r7
 8014ec6:	d112      	bne.n	8014eee <_dtoa_r+0x9e>
 8014ec8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014eca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014ece:	6013      	str	r3, [r2, #0]
 8014ed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014ed4:	4323      	orrs	r3, r4
 8014ed6:	f000 855a 	beq.w	801598e <_dtoa_r+0xb3e>
 8014eda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014edc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801513c <_dtoa_r+0x2ec>
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f000 855c 	beq.w	801599e <_dtoa_r+0xb4e>
 8014ee6:	f10a 0303 	add.w	r3, sl, #3
 8014eea:	f000 bd56 	b.w	801599a <_dtoa_r+0xb4a>
 8014eee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	ec51 0b17 	vmov	r0, r1, d7
 8014ef8:	2300      	movs	r3, #0
 8014efa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014efe:	f7eb fe0b 	bl	8000b18 <__aeabi_dcmpeq>
 8014f02:	4680      	mov	r8, r0
 8014f04:	b158      	cbz	r0, 8014f1e <_dtoa_r+0xce>
 8014f06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f08:	2301      	movs	r3, #1
 8014f0a:	6013      	str	r3, [r2, #0]
 8014f0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014f0e:	b113      	cbz	r3, 8014f16 <_dtoa_r+0xc6>
 8014f10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014f12:	4b86      	ldr	r3, [pc, #536]	@ (801512c <_dtoa_r+0x2dc>)
 8014f14:	6013      	str	r3, [r2, #0]
 8014f16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015140 <_dtoa_r+0x2f0>
 8014f1a:	f000 bd40 	b.w	801599e <_dtoa_r+0xb4e>
 8014f1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014f22:	aa14      	add	r2, sp, #80	@ 0x50
 8014f24:	a915      	add	r1, sp, #84	@ 0x54
 8014f26:	4648      	mov	r0, r9
 8014f28:	f001 fa3e 	bl	80163a8 <__d2b>
 8014f2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014f30:	9002      	str	r0, [sp, #8]
 8014f32:	2e00      	cmp	r6, #0
 8014f34:	d078      	beq.n	8015028 <_dtoa_r+0x1d8>
 8014f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014f38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014f44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014f48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014f4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014f50:	4619      	mov	r1, r3
 8014f52:	2200      	movs	r2, #0
 8014f54:	4b76      	ldr	r3, [pc, #472]	@ (8015130 <_dtoa_r+0x2e0>)
 8014f56:	f7eb f9bf 	bl	80002d8 <__aeabi_dsub>
 8014f5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8015108 <_dtoa_r+0x2b8>)
 8014f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f60:	f7eb fb72 	bl	8000648 <__aeabi_dmul>
 8014f64:	a36a      	add	r3, pc, #424	@ (adr r3, 8015110 <_dtoa_r+0x2c0>)
 8014f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6a:	f7eb f9b7 	bl	80002dc <__adddf3>
 8014f6e:	4604      	mov	r4, r0
 8014f70:	4630      	mov	r0, r6
 8014f72:	460d      	mov	r5, r1
 8014f74:	f7eb fafe 	bl	8000574 <__aeabi_i2d>
 8014f78:	a367      	add	r3, pc, #412	@ (adr r3, 8015118 <_dtoa_r+0x2c8>)
 8014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7e:	f7eb fb63 	bl	8000648 <__aeabi_dmul>
 8014f82:	4602      	mov	r2, r0
 8014f84:	460b      	mov	r3, r1
 8014f86:	4620      	mov	r0, r4
 8014f88:	4629      	mov	r1, r5
 8014f8a:	f7eb f9a7 	bl	80002dc <__adddf3>
 8014f8e:	4604      	mov	r4, r0
 8014f90:	460d      	mov	r5, r1
 8014f92:	f7eb fe09 	bl	8000ba8 <__aeabi_d2iz>
 8014f96:	2200      	movs	r2, #0
 8014f98:	4607      	mov	r7, r0
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	4629      	mov	r1, r5
 8014fa0:	f7eb fdc4 	bl	8000b2c <__aeabi_dcmplt>
 8014fa4:	b140      	cbz	r0, 8014fb8 <_dtoa_r+0x168>
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	f7eb fae4 	bl	8000574 <__aeabi_i2d>
 8014fac:	4622      	mov	r2, r4
 8014fae:	462b      	mov	r3, r5
 8014fb0:	f7eb fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 8014fb4:	b900      	cbnz	r0, 8014fb8 <_dtoa_r+0x168>
 8014fb6:	3f01      	subs	r7, #1
 8014fb8:	2f16      	cmp	r7, #22
 8014fba:	d852      	bhi.n	8015062 <_dtoa_r+0x212>
 8014fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8015134 <_dtoa_r+0x2e4>)
 8014fbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014fca:	f7eb fdaf 	bl	8000b2c <__aeabi_dcmplt>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d049      	beq.n	8015066 <_dtoa_r+0x216>
 8014fd2:	3f01      	subs	r7, #1
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8014fd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014fda:	1b9b      	subs	r3, r3, r6
 8014fdc:	1e5a      	subs	r2, r3, #1
 8014fde:	bf45      	ittet	mi
 8014fe0:	f1c3 0301 	rsbmi	r3, r3, #1
 8014fe4:	9300      	strmi	r3, [sp, #0]
 8014fe6:	2300      	movpl	r3, #0
 8014fe8:	2300      	movmi	r3, #0
 8014fea:	9206      	str	r2, [sp, #24]
 8014fec:	bf54      	ite	pl
 8014fee:	9300      	strpl	r3, [sp, #0]
 8014ff0:	9306      	strmi	r3, [sp, #24]
 8014ff2:	2f00      	cmp	r7, #0
 8014ff4:	db39      	blt.n	801506a <_dtoa_r+0x21a>
 8014ff6:	9b06      	ldr	r3, [sp, #24]
 8014ff8:	970d      	str	r7, [sp, #52]	@ 0x34
 8014ffa:	443b      	add	r3, r7
 8014ffc:	9306      	str	r3, [sp, #24]
 8014ffe:	2300      	movs	r3, #0
 8015000:	9308      	str	r3, [sp, #32]
 8015002:	9b07      	ldr	r3, [sp, #28]
 8015004:	2b09      	cmp	r3, #9
 8015006:	d863      	bhi.n	80150d0 <_dtoa_r+0x280>
 8015008:	2b05      	cmp	r3, #5
 801500a:	bfc4      	itt	gt
 801500c:	3b04      	subgt	r3, #4
 801500e:	9307      	strgt	r3, [sp, #28]
 8015010:	9b07      	ldr	r3, [sp, #28]
 8015012:	f1a3 0302 	sub.w	r3, r3, #2
 8015016:	bfcc      	ite	gt
 8015018:	2400      	movgt	r4, #0
 801501a:	2401      	movle	r4, #1
 801501c:	2b03      	cmp	r3, #3
 801501e:	d863      	bhi.n	80150e8 <_dtoa_r+0x298>
 8015020:	e8df f003 	tbb	[pc, r3]
 8015024:	2b375452 	.word	0x2b375452
 8015028:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801502c:	441e      	add	r6, r3
 801502e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015032:	2b20      	cmp	r3, #32
 8015034:	bfc1      	itttt	gt
 8015036:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801503a:	409f      	lslgt	r7, r3
 801503c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015040:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015044:	bfd6      	itet	le
 8015046:	f1c3 0320 	rsble	r3, r3, #32
 801504a:	ea47 0003 	orrgt.w	r0, r7, r3
 801504e:	fa04 f003 	lslle.w	r0, r4, r3
 8015052:	f7eb fa7f 	bl	8000554 <__aeabi_ui2d>
 8015056:	2201      	movs	r2, #1
 8015058:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801505c:	3e01      	subs	r6, #1
 801505e:	9212      	str	r2, [sp, #72]	@ 0x48
 8015060:	e776      	b.n	8014f50 <_dtoa_r+0x100>
 8015062:	2301      	movs	r3, #1
 8015064:	e7b7      	b.n	8014fd6 <_dtoa_r+0x186>
 8015066:	9010      	str	r0, [sp, #64]	@ 0x40
 8015068:	e7b6      	b.n	8014fd8 <_dtoa_r+0x188>
 801506a:	9b00      	ldr	r3, [sp, #0]
 801506c:	1bdb      	subs	r3, r3, r7
 801506e:	9300      	str	r3, [sp, #0]
 8015070:	427b      	negs	r3, r7
 8015072:	9308      	str	r3, [sp, #32]
 8015074:	2300      	movs	r3, #0
 8015076:	930d      	str	r3, [sp, #52]	@ 0x34
 8015078:	e7c3      	b.n	8015002 <_dtoa_r+0x1b2>
 801507a:	2301      	movs	r3, #1
 801507c:	9309      	str	r3, [sp, #36]	@ 0x24
 801507e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015080:	eb07 0b03 	add.w	fp, r7, r3
 8015084:	f10b 0301 	add.w	r3, fp, #1
 8015088:	2b01      	cmp	r3, #1
 801508a:	9303      	str	r3, [sp, #12]
 801508c:	bfb8      	it	lt
 801508e:	2301      	movlt	r3, #1
 8015090:	e006      	b.n	80150a0 <_dtoa_r+0x250>
 8015092:	2301      	movs	r3, #1
 8015094:	9309      	str	r3, [sp, #36]	@ 0x24
 8015096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015098:	2b00      	cmp	r3, #0
 801509a:	dd28      	ble.n	80150ee <_dtoa_r+0x29e>
 801509c:	469b      	mov	fp, r3
 801509e:	9303      	str	r3, [sp, #12]
 80150a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80150a4:	2100      	movs	r1, #0
 80150a6:	2204      	movs	r2, #4
 80150a8:	f102 0514 	add.w	r5, r2, #20
 80150ac:	429d      	cmp	r5, r3
 80150ae:	d926      	bls.n	80150fe <_dtoa_r+0x2ae>
 80150b0:	6041      	str	r1, [r0, #4]
 80150b2:	4648      	mov	r0, r9
 80150b4:	f000 fd9c 	bl	8015bf0 <_Balloc>
 80150b8:	4682      	mov	sl, r0
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d142      	bne.n	8015144 <_dtoa_r+0x2f4>
 80150be:	4b1e      	ldr	r3, [pc, #120]	@ (8015138 <_dtoa_r+0x2e8>)
 80150c0:	4602      	mov	r2, r0
 80150c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80150c6:	e6da      	b.n	8014e7e <_dtoa_r+0x2e>
 80150c8:	2300      	movs	r3, #0
 80150ca:	e7e3      	b.n	8015094 <_dtoa_r+0x244>
 80150cc:	2300      	movs	r3, #0
 80150ce:	e7d5      	b.n	801507c <_dtoa_r+0x22c>
 80150d0:	2401      	movs	r4, #1
 80150d2:	2300      	movs	r3, #0
 80150d4:	9307      	str	r3, [sp, #28]
 80150d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80150d8:	f04f 3bff 	mov.w	fp, #4294967295
 80150dc:	2200      	movs	r2, #0
 80150de:	f8cd b00c 	str.w	fp, [sp, #12]
 80150e2:	2312      	movs	r3, #18
 80150e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80150e6:	e7db      	b.n	80150a0 <_dtoa_r+0x250>
 80150e8:	2301      	movs	r3, #1
 80150ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80150ec:	e7f4      	b.n	80150d8 <_dtoa_r+0x288>
 80150ee:	f04f 0b01 	mov.w	fp, #1
 80150f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80150f6:	465b      	mov	r3, fp
 80150f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80150fc:	e7d0      	b.n	80150a0 <_dtoa_r+0x250>
 80150fe:	3101      	adds	r1, #1
 8015100:	0052      	lsls	r2, r2, #1
 8015102:	e7d1      	b.n	80150a8 <_dtoa_r+0x258>
 8015104:	f3af 8000 	nop.w
 8015108:	636f4361 	.word	0x636f4361
 801510c:	3fd287a7 	.word	0x3fd287a7
 8015110:	8b60c8b3 	.word	0x8b60c8b3
 8015114:	3fc68a28 	.word	0x3fc68a28
 8015118:	509f79fb 	.word	0x509f79fb
 801511c:	3fd34413 	.word	0x3fd34413
 8015120:	0801bbf2 	.word	0x0801bbf2
 8015124:	0801bc09 	.word	0x0801bc09
 8015128:	7ff00000 	.word	0x7ff00000
 801512c:	0801bbbd 	.word	0x0801bbbd
 8015130:	3ff80000 	.word	0x3ff80000
 8015134:	0801bdb8 	.word	0x0801bdb8
 8015138:	0801bc61 	.word	0x0801bc61
 801513c:	0801bbee 	.word	0x0801bbee
 8015140:	0801bbbc 	.word	0x0801bbbc
 8015144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015148:	6018      	str	r0, [r3, #0]
 801514a:	9b03      	ldr	r3, [sp, #12]
 801514c:	2b0e      	cmp	r3, #14
 801514e:	f200 80a1 	bhi.w	8015294 <_dtoa_r+0x444>
 8015152:	2c00      	cmp	r4, #0
 8015154:	f000 809e 	beq.w	8015294 <_dtoa_r+0x444>
 8015158:	2f00      	cmp	r7, #0
 801515a:	dd33      	ble.n	80151c4 <_dtoa_r+0x374>
 801515c:	4b9c      	ldr	r3, [pc, #624]	@ (80153d0 <_dtoa_r+0x580>)
 801515e:	f007 020f 	and.w	r2, r7, #15
 8015162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015166:	ed93 7b00 	vldr	d7, [r3]
 801516a:	05f8      	lsls	r0, r7, #23
 801516c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015174:	d516      	bpl.n	80151a4 <_dtoa_r+0x354>
 8015176:	4b97      	ldr	r3, [pc, #604]	@ (80153d4 <_dtoa_r+0x584>)
 8015178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801517c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015180:	f7eb fb8c 	bl	800089c <__aeabi_ddiv>
 8015184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015188:	f004 040f 	and.w	r4, r4, #15
 801518c:	2603      	movs	r6, #3
 801518e:	4d91      	ldr	r5, [pc, #580]	@ (80153d4 <_dtoa_r+0x584>)
 8015190:	b954      	cbnz	r4, 80151a8 <_dtoa_r+0x358>
 8015192:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801519a:	f7eb fb7f 	bl	800089c <__aeabi_ddiv>
 801519e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151a2:	e028      	b.n	80151f6 <_dtoa_r+0x3a6>
 80151a4:	2602      	movs	r6, #2
 80151a6:	e7f2      	b.n	801518e <_dtoa_r+0x33e>
 80151a8:	07e1      	lsls	r1, r4, #31
 80151aa:	d508      	bpl.n	80151be <_dtoa_r+0x36e>
 80151ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80151b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151b4:	f7eb fa48 	bl	8000648 <__aeabi_dmul>
 80151b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80151bc:	3601      	adds	r6, #1
 80151be:	1064      	asrs	r4, r4, #1
 80151c0:	3508      	adds	r5, #8
 80151c2:	e7e5      	b.n	8015190 <_dtoa_r+0x340>
 80151c4:	f000 80af 	beq.w	8015326 <_dtoa_r+0x4d6>
 80151c8:	427c      	negs	r4, r7
 80151ca:	4b81      	ldr	r3, [pc, #516]	@ (80153d0 <_dtoa_r+0x580>)
 80151cc:	4d81      	ldr	r5, [pc, #516]	@ (80153d4 <_dtoa_r+0x584>)
 80151ce:	f004 020f 	and.w	r2, r4, #15
 80151d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80151de:	f7eb fa33 	bl	8000648 <__aeabi_dmul>
 80151e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151e6:	1124      	asrs	r4, r4, #4
 80151e8:	2300      	movs	r3, #0
 80151ea:	2602      	movs	r6, #2
 80151ec:	2c00      	cmp	r4, #0
 80151ee:	f040 808f 	bne.w	8015310 <_dtoa_r+0x4c0>
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1d3      	bne.n	801519e <_dtoa_r+0x34e>
 80151f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80151f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f000 8094 	beq.w	801532a <_dtoa_r+0x4da>
 8015202:	4b75      	ldr	r3, [pc, #468]	@ (80153d8 <_dtoa_r+0x588>)
 8015204:	2200      	movs	r2, #0
 8015206:	4620      	mov	r0, r4
 8015208:	4629      	mov	r1, r5
 801520a:	f7eb fc8f 	bl	8000b2c <__aeabi_dcmplt>
 801520e:	2800      	cmp	r0, #0
 8015210:	f000 808b 	beq.w	801532a <_dtoa_r+0x4da>
 8015214:	9b03      	ldr	r3, [sp, #12]
 8015216:	2b00      	cmp	r3, #0
 8015218:	f000 8087 	beq.w	801532a <_dtoa_r+0x4da>
 801521c:	f1bb 0f00 	cmp.w	fp, #0
 8015220:	dd34      	ble.n	801528c <_dtoa_r+0x43c>
 8015222:	4620      	mov	r0, r4
 8015224:	4b6d      	ldr	r3, [pc, #436]	@ (80153dc <_dtoa_r+0x58c>)
 8015226:	2200      	movs	r2, #0
 8015228:	4629      	mov	r1, r5
 801522a:	f7eb fa0d 	bl	8000648 <__aeabi_dmul>
 801522e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015232:	f107 38ff 	add.w	r8, r7, #4294967295
 8015236:	3601      	adds	r6, #1
 8015238:	465c      	mov	r4, fp
 801523a:	4630      	mov	r0, r6
 801523c:	f7eb f99a 	bl	8000574 <__aeabi_i2d>
 8015240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015244:	f7eb fa00 	bl	8000648 <__aeabi_dmul>
 8015248:	4b65      	ldr	r3, [pc, #404]	@ (80153e0 <_dtoa_r+0x590>)
 801524a:	2200      	movs	r2, #0
 801524c:	f7eb f846 	bl	80002dc <__adddf3>
 8015250:	4605      	mov	r5, r0
 8015252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015256:	2c00      	cmp	r4, #0
 8015258:	d16a      	bne.n	8015330 <_dtoa_r+0x4e0>
 801525a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801525e:	4b61      	ldr	r3, [pc, #388]	@ (80153e4 <_dtoa_r+0x594>)
 8015260:	2200      	movs	r2, #0
 8015262:	f7eb f839 	bl	80002d8 <__aeabi_dsub>
 8015266:	4602      	mov	r2, r0
 8015268:	460b      	mov	r3, r1
 801526a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801526e:	462a      	mov	r2, r5
 8015270:	4633      	mov	r3, r6
 8015272:	f7eb fc79 	bl	8000b68 <__aeabi_dcmpgt>
 8015276:	2800      	cmp	r0, #0
 8015278:	f040 8298 	bne.w	80157ac <_dtoa_r+0x95c>
 801527c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015280:	462a      	mov	r2, r5
 8015282:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015286:	f7eb fc51 	bl	8000b2c <__aeabi_dcmplt>
 801528a:	bb38      	cbnz	r0, 80152dc <_dtoa_r+0x48c>
 801528c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015290:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015296:	2b00      	cmp	r3, #0
 8015298:	f2c0 8157 	blt.w	801554a <_dtoa_r+0x6fa>
 801529c:	2f0e      	cmp	r7, #14
 801529e:	f300 8154 	bgt.w	801554a <_dtoa_r+0x6fa>
 80152a2:	4b4b      	ldr	r3, [pc, #300]	@ (80153d0 <_dtoa_r+0x580>)
 80152a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152a8:	ed93 7b00 	vldr	d7, [r3]
 80152ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	ed8d 7b00 	vstr	d7, [sp]
 80152b4:	f280 80e5 	bge.w	8015482 <_dtoa_r+0x632>
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f300 80e1 	bgt.w	8015482 <_dtoa_r+0x632>
 80152c0:	d10c      	bne.n	80152dc <_dtoa_r+0x48c>
 80152c2:	4b48      	ldr	r3, [pc, #288]	@ (80153e4 <_dtoa_r+0x594>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	ec51 0b17 	vmov	r0, r1, d7
 80152ca:	f7eb f9bd 	bl	8000648 <__aeabi_dmul>
 80152ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152d2:	f7eb fc3f 	bl	8000b54 <__aeabi_dcmpge>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	f000 8266 	beq.w	80157a8 <_dtoa_r+0x958>
 80152dc:	2400      	movs	r4, #0
 80152de:	4625      	mov	r5, r4
 80152e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152e2:	4656      	mov	r6, sl
 80152e4:	ea6f 0803 	mvn.w	r8, r3
 80152e8:	2700      	movs	r7, #0
 80152ea:	4621      	mov	r1, r4
 80152ec:	4648      	mov	r0, r9
 80152ee:	f000 fcbf 	bl	8015c70 <_Bfree>
 80152f2:	2d00      	cmp	r5, #0
 80152f4:	f000 80bd 	beq.w	8015472 <_dtoa_r+0x622>
 80152f8:	b12f      	cbz	r7, 8015306 <_dtoa_r+0x4b6>
 80152fa:	42af      	cmp	r7, r5
 80152fc:	d003      	beq.n	8015306 <_dtoa_r+0x4b6>
 80152fe:	4639      	mov	r1, r7
 8015300:	4648      	mov	r0, r9
 8015302:	f000 fcb5 	bl	8015c70 <_Bfree>
 8015306:	4629      	mov	r1, r5
 8015308:	4648      	mov	r0, r9
 801530a:	f000 fcb1 	bl	8015c70 <_Bfree>
 801530e:	e0b0      	b.n	8015472 <_dtoa_r+0x622>
 8015310:	07e2      	lsls	r2, r4, #31
 8015312:	d505      	bpl.n	8015320 <_dtoa_r+0x4d0>
 8015314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015318:	f7eb f996 	bl	8000648 <__aeabi_dmul>
 801531c:	3601      	adds	r6, #1
 801531e:	2301      	movs	r3, #1
 8015320:	1064      	asrs	r4, r4, #1
 8015322:	3508      	adds	r5, #8
 8015324:	e762      	b.n	80151ec <_dtoa_r+0x39c>
 8015326:	2602      	movs	r6, #2
 8015328:	e765      	b.n	80151f6 <_dtoa_r+0x3a6>
 801532a:	9c03      	ldr	r4, [sp, #12]
 801532c:	46b8      	mov	r8, r7
 801532e:	e784      	b.n	801523a <_dtoa_r+0x3ea>
 8015330:	4b27      	ldr	r3, [pc, #156]	@ (80153d0 <_dtoa_r+0x580>)
 8015332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801533c:	4454      	add	r4, sl
 801533e:	2900      	cmp	r1, #0
 8015340:	d054      	beq.n	80153ec <_dtoa_r+0x59c>
 8015342:	4929      	ldr	r1, [pc, #164]	@ (80153e8 <_dtoa_r+0x598>)
 8015344:	2000      	movs	r0, #0
 8015346:	f7eb faa9 	bl	800089c <__aeabi_ddiv>
 801534a:	4633      	mov	r3, r6
 801534c:	462a      	mov	r2, r5
 801534e:	f7ea ffc3 	bl	80002d8 <__aeabi_dsub>
 8015352:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015356:	4656      	mov	r6, sl
 8015358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801535c:	f7eb fc24 	bl	8000ba8 <__aeabi_d2iz>
 8015360:	4605      	mov	r5, r0
 8015362:	f7eb f907 	bl	8000574 <__aeabi_i2d>
 8015366:	4602      	mov	r2, r0
 8015368:	460b      	mov	r3, r1
 801536a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801536e:	f7ea ffb3 	bl	80002d8 <__aeabi_dsub>
 8015372:	3530      	adds	r5, #48	@ 0x30
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801537c:	f806 5b01 	strb.w	r5, [r6], #1
 8015380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015384:	f7eb fbd2 	bl	8000b2c <__aeabi_dcmplt>
 8015388:	2800      	cmp	r0, #0
 801538a:	d172      	bne.n	8015472 <_dtoa_r+0x622>
 801538c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015390:	4911      	ldr	r1, [pc, #68]	@ (80153d8 <_dtoa_r+0x588>)
 8015392:	2000      	movs	r0, #0
 8015394:	f7ea ffa0 	bl	80002d8 <__aeabi_dsub>
 8015398:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801539c:	f7eb fbc6 	bl	8000b2c <__aeabi_dcmplt>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	f040 80b4 	bne.w	801550e <_dtoa_r+0x6be>
 80153a6:	42a6      	cmp	r6, r4
 80153a8:	f43f af70 	beq.w	801528c <_dtoa_r+0x43c>
 80153ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80153b0:	4b0a      	ldr	r3, [pc, #40]	@ (80153dc <_dtoa_r+0x58c>)
 80153b2:	2200      	movs	r2, #0
 80153b4:	f7eb f948 	bl	8000648 <__aeabi_dmul>
 80153b8:	4b08      	ldr	r3, [pc, #32]	@ (80153dc <_dtoa_r+0x58c>)
 80153ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80153be:	2200      	movs	r2, #0
 80153c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153c4:	f7eb f940 	bl	8000648 <__aeabi_dmul>
 80153c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153cc:	e7c4      	b.n	8015358 <_dtoa_r+0x508>
 80153ce:	bf00      	nop
 80153d0:	0801bdb8 	.word	0x0801bdb8
 80153d4:	0801bd90 	.word	0x0801bd90
 80153d8:	3ff00000 	.word	0x3ff00000
 80153dc:	40240000 	.word	0x40240000
 80153e0:	401c0000 	.word	0x401c0000
 80153e4:	40140000 	.word	0x40140000
 80153e8:	3fe00000 	.word	0x3fe00000
 80153ec:	4631      	mov	r1, r6
 80153ee:	4628      	mov	r0, r5
 80153f0:	f7eb f92a 	bl	8000648 <__aeabi_dmul>
 80153f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80153f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80153fa:	4656      	mov	r6, sl
 80153fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015400:	f7eb fbd2 	bl	8000ba8 <__aeabi_d2iz>
 8015404:	4605      	mov	r5, r0
 8015406:	f7eb f8b5 	bl	8000574 <__aeabi_i2d>
 801540a:	4602      	mov	r2, r0
 801540c:	460b      	mov	r3, r1
 801540e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015412:	f7ea ff61 	bl	80002d8 <__aeabi_dsub>
 8015416:	3530      	adds	r5, #48	@ 0x30
 8015418:	f806 5b01 	strb.w	r5, [r6], #1
 801541c:	4602      	mov	r2, r0
 801541e:	460b      	mov	r3, r1
 8015420:	42a6      	cmp	r6, r4
 8015422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015426:	f04f 0200 	mov.w	r2, #0
 801542a:	d124      	bne.n	8015476 <_dtoa_r+0x626>
 801542c:	4baf      	ldr	r3, [pc, #700]	@ (80156ec <_dtoa_r+0x89c>)
 801542e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015432:	f7ea ff53 	bl	80002dc <__adddf3>
 8015436:	4602      	mov	r2, r0
 8015438:	460b      	mov	r3, r1
 801543a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801543e:	f7eb fb93 	bl	8000b68 <__aeabi_dcmpgt>
 8015442:	2800      	cmp	r0, #0
 8015444:	d163      	bne.n	801550e <_dtoa_r+0x6be>
 8015446:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801544a:	49a8      	ldr	r1, [pc, #672]	@ (80156ec <_dtoa_r+0x89c>)
 801544c:	2000      	movs	r0, #0
 801544e:	f7ea ff43 	bl	80002d8 <__aeabi_dsub>
 8015452:	4602      	mov	r2, r0
 8015454:	460b      	mov	r3, r1
 8015456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801545a:	f7eb fb67 	bl	8000b2c <__aeabi_dcmplt>
 801545e:	2800      	cmp	r0, #0
 8015460:	f43f af14 	beq.w	801528c <_dtoa_r+0x43c>
 8015464:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015466:	1e73      	subs	r3, r6, #1
 8015468:	9313      	str	r3, [sp, #76]	@ 0x4c
 801546a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801546e:	2b30      	cmp	r3, #48	@ 0x30
 8015470:	d0f8      	beq.n	8015464 <_dtoa_r+0x614>
 8015472:	4647      	mov	r7, r8
 8015474:	e03b      	b.n	80154ee <_dtoa_r+0x69e>
 8015476:	4b9e      	ldr	r3, [pc, #632]	@ (80156f0 <_dtoa_r+0x8a0>)
 8015478:	f7eb f8e6 	bl	8000648 <__aeabi_dmul>
 801547c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015480:	e7bc      	b.n	80153fc <_dtoa_r+0x5ac>
 8015482:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015486:	4656      	mov	r6, sl
 8015488:	e9dd 2300 	ldrd	r2, r3, [sp]
 801548c:	4620      	mov	r0, r4
 801548e:	4629      	mov	r1, r5
 8015490:	f7eb fa04 	bl	800089c <__aeabi_ddiv>
 8015494:	f7eb fb88 	bl	8000ba8 <__aeabi_d2iz>
 8015498:	4680      	mov	r8, r0
 801549a:	f7eb f86b 	bl	8000574 <__aeabi_i2d>
 801549e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154a2:	f7eb f8d1 	bl	8000648 <__aeabi_dmul>
 80154a6:	4602      	mov	r2, r0
 80154a8:	460b      	mov	r3, r1
 80154aa:	4620      	mov	r0, r4
 80154ac:	4629      	mov	r1, r5
 80154ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80154b2:	f7ea ff11 	bl	80002d8 <__aeabi_dsub>
 80154b6:	f806 4b01 	strb.w	r4, [r6], #1
 80154ba:	9d03      	ldr	r5, [sp, #12]
 80154bc:	eba6 040a 	sub.w	r4, r6, sl
 80154c0:	42a5      	cmp	r5, r4
 80154c2:	4602      	mov	r2, r0
 80154c4:	460b      	mov	r3, r1
 80154c6:	d133      	bne.n	8015530 <_dtoa_r+0x6e0>
 80154c8:	f7ea ff08 	bl	80002dc <__adddf3>
 80154cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154d0:	4604      	mov	r4, r0
 80154d2:	460d      	mov	r5, r1
 80154d4:	f7eb fb48 	bl	8000b68 <__aeabi_dcmpgt>
 80154d8:	b9c0      	cbnz	r0, 801550c <_dtoa_r+0x6bc>
 80154da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154de:	4620      	mov	r0, r4
 80154e0:	4629      	mov	r1, r5
 80154e2:	f7eb fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80154e6:	b110      	cbz	r0, 80154ee <_dtoa_r+0x69e>
 80154e8:	f018 0f01 	tst.w	r8, #1
 80154ec:	d10e      	bne.n	801550c <_dtoa_r+0x6bc>
 80154ee:	9902      	ldr	r1, [sp, #8]
 80154f0:	4648      	mov	r0, r9
 80154f2:	f000 fbbd 	bl	8015c70 <_Bfree>
 80154f6:	2300      	movs	r3, #0
 80154f8:	7033      	strb	r3, [r6, #0]
 80154fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154fc:	3701      	adds	r7, #1
 80154fe:	601f      	str	r7, [r3, #0]
 8015500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015502:	2b00      	cmp	r3, #0
 8015504:	f000 824b 	beq.w	801599e <_dtoa_r+0xb4e>
 8015508:	601e      	str	r6, [r3, #0]
 801550a:	e248      	b.n	801599e <_dtoa_r+0xb4e>
 801550c:	46b8      	mov	r8, r7
 801550e:	4633      	mov	r3, r6
 8015510:	461e      	mov	r6, r3
 8015512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015516:	2a39      	cmp	r2, #57	@ 0x39
 8015518:	d106      	bne.n	8015528 <_dtoa_r+0x6d8>
 801551a:	459a      	cmp	sl, r3
 801551c:	d1f8      	bne.n	8015510 <_dtoa_r+0x6c0>
 801551e:	2230      	movs	r2, #48	@ 0x30
 8015520:	f108 0801 	add.w	r8, r8, #1
 8015524:	f88a 2000 	strb.w	r2, [sl]
 8015528:	781a      	ldrb	r2, [r3, #0]
 801552a:	3201      	adds	r2, #1
 801552c:	701a      	strb	r2, [r3, #0]
 801552e:	e7a0      	b.n	8015472 <_dtoa_r+0x622>
 8015530:	4b6f      	ldr	r3, [pc, #444]	@ (80156f0 <_dtoa_r+0x8a0>)
 8015532:	2200      	movs	r2, #0
 8015534:	f7eb f888 	bl	8000648 <__aeabi_dmul>
 8015538:	2200      	movs	r2, #0
 801553a:	2300      	movs	r3, #0
 801553c:	4604      	mov	r4, r0
 801553e:	460d      	mov	r5, r1
 8015540:	f7eb faea 	bl	8000b18 <__aeabi_dcmpeq>
 8015544:	2800      	cmp	r0, #0
 8015546:	d09f      	beq.n	8015488 <_dtoa_r+0x638>
 8015548:	e7d1      	b.n	80154ee <_dtoa_r+0x69e>
 801554a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801554c:	2a00      	cmp	r2, #0
 801554e:	f000 80ea 	beq.w	8015726 <_dtoa_r+0x8d6>
 8015552:	9a07      	ldr	r2, [sp, #28]
 8015554:	2a01      	cmp	r2, #1
 8015556:	f300 80cd 	bgt.w	80156f4 <_dtoa_r+0x8a4>
 801555a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801555c:	2a00      	cmp	r2, #0
 801555e:	f000 80c1 	beq.w	80156e4 <_dtoa_r+0x894>
 8015562:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015566:	9c08      	ldr	r4, [sp, #32]
 8015568:	9e00      	ldr	r6, [sp, #0]
 801556a:	9a00      	ldr	r2, [sp, #0]
 801556c:	441a      	add	r2, r3
 801556e:	9200      	str	r2, [sp, #0]
 8015570:	9a06      	ldr	r2, [sp, #24]
 8015572:	2101      	movs	r1, #1
 8015574:	441a      	add	r2, r3
 8015576:	4648      	mov	r0, r9
 8015578:	9206      	str	r2, [sp, #24]
 801557a:	f000 fc77 	bl	8015e6c <__i2b>
 801557e:	4605      	mov	r5, r0
 8015580:	b166      	cbz	r6, 801559c <_dtoa_r+0x74c>
 8015582:	9b06      	ldr	r3, [sp, #24]
 8015584:	2b00      	cmp	r3, #0
 8015586:	dd09      	ble.n	801559c <_dtoa_r+0x74c>
 8015588:	42b3      	cmp	r3, r6
 801558a:	9a00      	ldr	r2, [sp, #0]
 801558c:	bfa8      	it	ge
 801558e:	4633      	movge	r3, r6
 8015590:	1ad2      	subs	r2, r2, r3
 8015592:	9200      	str	r2, [sp, #0]
 8015594:	9a06      	ldr	r2, [sp, #24]
 8015596:	1af6      	subs	r6, r6, r3
 8015598:	1ad3      	subs	r3, r2, r3
 801559a:	9306      	str	r3, [sp, #24]
 801559c:	9b08      	ldr	r3, [sp, #32]
 801559e:	b30b      	cbz	r3, 80155e4 <_dtoa_r+0x794>
 80155a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	f000 80c6 	beq.w	8015734 <_dtoa_r+0x8e4>
 80155a8:	2c00      	cmp	r4, #0
 80155aa:	f000 80c0 	beq.w	801572e <_dtoa_r+0x8de>
 80155ae:	4629      	mov	r1, r5
 80155b0:	4622      	mov	r2, r4
 80155b2:	4648      	mov	r0, r9
 80155b4:	f000 fd12 	bl	8015fdc <__pow5mult>
 80155b8:	9a02      	ldr	r2, [sp, #8]
 80155ba:	4601      	mov	r1, r0
 80155bc:	4605      	mov	r5, r0
 80155be:	4648      	mov	r0, r9
 80155c0:	f000 fc6a 	bl	8015e98 <__multiply>
 80155c4:	9902      	ldr	r1, [sp, #8]
 80155c6:	4680      	mov	r8, r0
 80155c8:	4648      	mov	r0, r9
 80155ca:	f000 fb51 	bl	8015c70 <_Bfree>
 80155ce:	9b08      	ldr	r3, [sp, #32]
 80155d0:	1b1b      	subs	r3, r3, r4
 80155d2:	9308      	str	r3, [sp, #32]
 80155d4:	f000 80b1 	beq.w	801573a <_dtoa_r+0x8ea>
 80155d8:	9a08      	ldr	r2, [sp, #32]
 80155da:	4641      	mov	r1, r8
 80155dc:	4648      	mov	r0, r9
 80155de:	f000 fcfd 	bl	8015fdc <__pow5mult>
 80155e2:	9002      	str	r0, [sp, #8]
 80155e4:	2101      	movs	r1, #1
 80155e6:	4648      	mov	r0, r9
 80155e8:	f000 fc40 	bl	8015e6c <__i2b>
 80155ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155ee:	4604      	mov	r4, r0
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	f000 81d8 	beq.w	80159a6 <_dtoa_r+0xb56>
 80155f6:	461a      	mov	r2, r3
 80155f8:	4601      	mov	r1, r0
 80155fa:	4648      	mov	r0, r9
 80155fc:	f000 fcee 	bl	8015fdc <__pow5mult>
 8015600:	9b07      	ldr	r3, [sp, #28]
 8015602:	2b01      	cmp	r3, #1
 8015604:	4604      	mov	r4, r0
 8015606:	f300 809f 	bgt.w	8015748 <_dtoa_r+0x8f8>
 801560a:	9b04      	ldr	r3, [sp, #16]
 801560c:	2b00      	cmp	r3, #0
 801560e:	f040 8097 	bne.w	8015740 <_dtoa_r+0x8f0>
 8015612:	9b05      	ldr	r3, [sp, #20]
 8015614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015618:	2b00      	cmp	r3, #0
 801561a:	f040 8093 	bne.w	8015744 <_dtoa_r+0x8f4>
 801561e:	9b05      	ldr	r3, [sp, #20]
 8015620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015624:	0d1b      	lsrs	r3, r3, #20
 8015626:	051b      	lsls	r3, r3, #20
 8015628:	b133      	cbz	r3, 8015638 <_dtoa_r+0x7e8>
 801562a:	9b00      	ldr	r3, [sp, #0]
 801562c:	3301      	adds	r3, #1
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	9b06      	ldr	r3, [sp, #24]
 8015632:	3301      	adds	r3, #1
 8015634:	9306      	str	r3, [sp, #24]
 8015636:	2301      	movs	r3, #1
 8015638:	9308      	str	r3, [sp, #32]
 801563a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801563c:	2b00      	cmp	r3, #0
 801563e:	f000 81b8 	beq.w	80159b2 <_dtoa_r+0xb62>
 8015642:	6923      	ldr	r3, [r4, #16]
 8015644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015648:	6918      	ldr	r0, [r3, #16]
 801564a:	f000 fbc3 	bl	8015dd4 <__hi0bits>
 801564e:	f1c0 0020 	rsb	r0, r0, #32
 8015652:	9b06      	ldr	r3, [sp, #24]
 8015654:	4418      	add	r0, r3
 8015656:	f010 001f 	ands.w	r0, r0, #31
 801565a:	f000 8082 	beq.w	8015762 <_dtoa_r+0x912>
 801565e:	f1c0 0320 	rsb	r3, r0, #32
 8015662:	2b04      	cmp	r3, #4
 8015664:	dd73      	ble.n	801574e <_dtoa_r+0x8fe>
 8015666:	9b00      	ldr	r3, [sp, #0]
 8015668:	f1c0 001c 	rsb	r0, r0, #28
 801566c:	4403      	add	r3, r0
 801566e:	9300      	str	r3, [sp, #0]
 8015670:	9b06      	ldr	r3, [sp, #24]
 8015672:	4403      	add	r3, r0
 8015674:	4406      	add	r6, r0
 8015676:	9306      	str	r3, [sp, #24]
 8015678:	9b00      	ldr	r3, [sp, #0]
 801567a:	2b00      	cmp	r3, #0
 801567c:	dd05      	ble.n	801568a <_dtoa_r+0x83a>
 801567e:	9902      	ldr	r1, [sp, #8]
 8015680:	461a      	mov	r2, r3
 8015682:	4648      	mov	r0, r9
 8015684:	f000 fd04 	bl	8016090 <__lshift>
 8015688:	9002      	str	r0, [sp, #8]
 801568a:	9b06      	ldr	r3, [sp, #24]
 801568c:	2b00      	cmp	r3, #0
 801568e:	dd05      	ble.n	801569c <_dtoa_r+0x84c>
 8015690:	4621      	mov	r1, r4
 8015692:	461a      	mov	r2, r3
 8015694:	4648      	mov	r0, r9
 8015696:	f000 fcfb 	bl	8016090 <__lshift>
 801569a:	4604      	mov	r4, r0
 801569c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d061      	beq.n	8015766 <_dtoa_r+0x916>
 80156a2:	9802      	ldr	r0, [sp, #8]
 80156a4:	4621      	mov	r1, r4
 80156a6:	f000 fd5f 	bl	8016168 <__mcmp>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	da5b      	bge.n	8015766 <_dtoa_r+0x916>
 80156ae:	2300      	movs	r3, #0
 80156b0:	9902      	ldr	r1, [sp, #8]
 80156b2:	220a      	movs	r2, #10
 80156b4:	4648      	mov	r0, r9
 80156b6:	f000 fafd 	bl	8015cb4 <__multadd>
 80156ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156bc:	9002      	str	r0, [sp, #8]
 80156be:	f107 38ff 	add.w	r8, r7, #4294967295
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f000 8177 	beq.w	80159b6 <_dtoa_r+0xb66>
 80156c8:	4629      	mov	r1, r5
 80156ca:	2300      	movs	r3, #0
 80156cc:	220a      	movs	r2, #10
 80156ce:	4648      	mov	r0, r9
 80156d0:	f000 faf0 	bl	8015cb4 <__multadd>
 80156d4:	f1bb 0f00 	cmp.w	fp, #0
 80156d8:	4605      	mov	r5, r0
 80156da:	dc6f      	bgt.n	80157bc <_dtoa_r+0x96c>
 80156dc:	9b07      	ldr	r3, [sp, #28]
 80156de:	2b02      	cmp	r3, #2
 80156e0:	dc49      	bgt.n	8015776 <_dtoa_r+0x926>
 80156e2:	e06b      	b.n	80157bc <_dtoa_r+0x96c>
 80156e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80156e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80156ea:	e73c      	b.n	8015566 <_dtoa_r+0x716>
 80156ec:	3fe00000 	.word	0x3fe00000
 80156f0:	40240000 	.word	0x40240000
 80156f4:	9b03      	ldr	r3, [sp, #12]
 80156f6:	1e5c      	subs	r4, r3, #1
 80156f8:	9b08      	ldr	r3, [sp, #32]
 80156fa:	42a3      	cmp	r3, r4
 80156fc:	db09      	blt.n	8015712 <_dtoa_r+0x8c2>
 80156fe:	1b1c      	subs	r4, r3, r4
 8015700:	9b03      	ldr	r3, [sp, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	f6bf af30 	bge.w	8015568 <_dtoa_r+0x718>
 8015708:	9b00      	ldr	r3, [sp, #0]
 801570a:	9a03      	ldr	r2, [sp, #12]
 801570c:	1a9e      	subs	r6, r3, r2
 801570e:	2300      	movs	r3, #0
 8015710:	e72b      	b.n	801556a <_dtoa_r+0x71a>
 8015712:	9b08      	ldr	r3, [sp, #32]
 8015714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015716:	9408      	str	r4, [sp, #32]
 8015718:	1ae3      	subs	r3, r4, r3
 801571a:	441a      	add	r2, r3
 801571c:	9e00      	ldr	r6, [sp, #0]
 801571e:	9b03      	ldr	r3, [sp, #12]
 8015720:	920d      	str	r2, [sp, #52]	@ 0x34
 8015722:	2400      	movs	r4, #0
 8015724:	e721      	b.n	801556a <_dtoa_r+0x71a>
 8015726:	9c08      	ldr	r4, [sp, #32]
 8015728:	9e00      	ldr	r6, [sp, #0]
 801572a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801572c:	e728      	b.n	8015580 <_dtoa_r+0x730>
 801572e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015732:	e751      	b.n	80155d8 <_dtoa_r+0x788>
 8015734:	9a08      	ldr	r2, [sp, #32]
 8015736:	9902      	ldr	r1, [sp, #8]
 8015738:	e750      	b.n	80155dc <_dtoa_r+0x78c>
 801573a:	f8cd 8008 	str.w	r8, [sp, #8]
 801573e:	e751      	b.n	80155e4 <_dtoa_r+0x794>
 8015740:	2300      	movs	r3, #0
 8015742:	e779      	b.n	8015638 <_dtoa_r+0x7e8>
 8015744:	9b04      	ldr	r3, [sp, #16]
 8015746:	e777      	b.n	8015638 <_dtoa_r+0x7e8>
 8015748:	2300      	movs	r3, #0
 801574a:	9308      	str	r3, [sp, #32]
 801574c:	e779      	b.n	8015642 <_dtoa_r+0x7f2>
 801574e:	d093      	beq.n	8015678 <_dtoa_r+0x828>
 8015750:	9a00      	ldr	r2, [sp, #0]
 8015752:	331c      	adds	r3, #28
 8015754:	441a      	add	r2, r3
 8015756:	9200      	str	r2, [sp, #0]
 8015758:	9a06      	ldr	r2, [sp, #24]
 801575a:	441a      	add	r2, r3
 801575c:	441e      	add	r6, r3
 801575e:	9206      	str	r2, [sp, #24]
 8015760:	e78a      	b.n	8015678 <_dtoa_r+0x828>
 8015762:	4603      	mov	r3, r0
 8015764:	e7f4      	b.n	8015750 <_dtoa_r+0x900>
 8015766:	9b03      	ldr	r3, [sp, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	46b8      	mov	r8, r7
 801576c:	dc20      	bgt.n	80157b0 <_dtoa_r+0x960>
 801576e:	469b      	mov	fp, r3
 8015770:	9b07      	ldr	r3, [sp, #28]
 8015772:	2b02      	cmp	r3, #2
 8015774:	dd1e      	ble.n	80157b4 <_dtoa_r+0x964>
 8015776:	f1bb 0f00 	cmp.w	fp, #0
 801577a:	f47f adb1 	bne.w	80152e0 <_dtoa_r+0x490>
 801577e:	4621      	mov	r1, r4
 8015780:	465b      	mov	r3, fp
 8015782:	2205      	movs	r2, #5
 8015784:	4648      	mov	r0, r9
 8015786:	f000 fa95 	bl	8015cb4 <__multadd>
 801578a:	4601      	mov	r1, r0
 801578c:	4604      	mov	r4, r0
 801578e:	9802      	ldr	r0, [sp, #8]
 8015790:	f000 fcea 	bl	8016168 <__mcmp>
 8015794:	2800      	cmp	r0, #0
 8015796:	f77f ada3 	ble.w	80152e0 <_dtoa_r+0x490>
 801579a:	4656      	mov	r6, sl
 801579c:	2331      	movs	r3, #49	@ 0x31
 801579e:	f806 3b01 	strb.w	r3, [r6], #1
 80157a2:	f108 0801 	add.w	r8, r8, #1
 80157a6:	e59f      	b.n	80152e8 <_dtoa_r+0x498>
 80157a8:	9c03      	ldr	r4, [sp, #12]
 80157aa:	46b8      	mov	r8, r7
 80157ac:	4625      	mov	r5, r4
 80157ae:	e7f4      	b.n	801579a <_dtoa_r+0x94a>
 80157b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80157b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 8101 	beq.w	80159be <_dtoa_r+0xb6e>
 80157bc:	2e00      	cmp	r6, #0
 80157be:	dd05      	ble.n	80157cc <_dtoa_r+0x97c>
 80157c0:	4629      	mov	r1, r5
 80157c2:	4632      	mov	r2, r6
 80157c4:	4648      	mov	r0, r9
 80157c6:	f000 fc63 	bl	8016090 <__lshift>
 80157ca:	4605      	mov	r5, r0
 80157cc:	9b08      	ldr	r3, [sp, #32]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d05c      	beq.n	801588c <_dtoa_r+0xa3c>
 80157d2:	6869      	ldr	r1, [r5, #4]
 80157d4:	4648      	mov	r0, r9
 80157d6:	f000 fa0b 	bl	8015bf0 <_Balloc>
 80157da:	4606      	mov	r6, r0
 80157dc:	b928      	cbnz	r0, 80157ea <_dtoa_r+0x99a>
 80157de:	4b82      	ldr	r3, [pc, #520]	@ (80159e8 <_dtoa_r+0xb98>)
 80157e0:	4602      	mov	r2, r0
 80157e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80157e6:	f7ff bb4a 	b.w	8014e7e <_dtoa_r+0x2e>
 80157ea:	692a      	ldr	r2, [r5, #16]
 80157ec:	3202      	adds	r2, #2
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	f105 010c 	add.w	r1, r5, #12
 80157f4:	300c      	adds	r0, #12
 80157f6:	f7ff fa8e 	bl	8014d16 <memcpy>
 80157fa:	2201      	movs	r2, #1
 80157fc:	4631      	mov	r1, r6
 80157fe:	4648      	mov	r0, r9
 8015800:	f000 fc46 	bl	8016090 <__lshift>
 8015804:	f10a 0301 	add.w	r3, sl, #1
 8015808:	9300      	str	r3, [sp, #0]
 801580a:	eb0a 030b 	add.w	r3, sl, fp
 801580e:	9308      	str	r3, [sp, #32]
 8015810:	9b04      	ldr	r3, [sp, #16]
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	462f      	mov	r7, r5
 8015818:	9306      	str	r3, [sp, #24]
 801581a:	4605      	mov	r5, r0
 801581c:	9b00      	ldr	r3, [sp, #0]
 801581e:	9802      	ldr	r0, [sp, #8]
 8015820:	4621      	mov	r1, r4
 8015822:	f103 3bff 	add.w	fp, r3, #4294967295
 8015826:	f7ff fa8b 	bl	8014d40 <quorem>
 801582a:	4603      	mov	r3, r0
 801582c:	3330      	adds	r3, #48	@ 0x30
 801582e:	9003      	str	r0, [sp, #12]
 8015830:	4639      	mov	r1, r7
 8015832:	9802      	ldr	r0, [sp, #8]
 8015834:	9309      	str	r3, [sp, #36]	@ 0x24
 8015836:	f000 fc97 	bl	8016168 <__mcmp>
 801583a:	462a      	mov	r2, r5
 801583c:	9004      	str	r0, [sp, #16]
 801583e:	4621      	mov	r1, r4
 8015840:	4648      	mov	r0, r9
 8015842:	f000 fcad 	bl	80161a0 <__mdiff>
 8015846:	68c2      	ldr	r2, [r0, #12]
 8015848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801584a:	4606      	mov	r6, r0
 801584c:	bb02      	cbnz	r2, 8015890 <_dtoa_r+0xa40>
 801584e:	4601      	mov	r1, r0
 8015850:	9802      	ldr	r0, [sp, #8]
 8015852:	f000 fc89 	bl	8016168 <__mcmp>
 8015856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015858:	4602      	mov	r2, r0
 801585a:	4631      	mov	r1, r6
 801585c:	4648      	mov	r0, r9
 801585e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015860:	9309      	str	r3, [sp, #36]	@ 0x24
 8015862:	f000 fa05 	bl	8015c70 <_Bfree>
 8015866:	9b07      	ldr	r3, [sp, #28]
 8015868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801586a:	9e00      	ldr	r6, [sp, #0]
 801586c:	ea42 0103 	orr.w	r1, r2, r3
 8015870:	9b06      	ldr	r3, [sp, #24]
 8015872:	4319      	orrs	r1, r3
 8015874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015876:	d10d      	bne.n	8015894 <_dtoa_r+0xa44>
 8015878:	2b39      	cmp	r3, #57	@ 0x39
 801587a:	d027      	beq.n	80158cc <_dtoa_r+0xa7c>
 801587c:	9a04      	ldr	r2, [sp, #16]
 801587e:	2a00      	cmp	r2, #0
 8015880:	dd01      	ble.n	8015886 <_dtoa_r+0xa36>
 8015882:	9b03      	ldr	r3, [sp, #12]
 8015884:	3331      	adds	r3, #49	@ 0x31
 8015886:	f88b 3000 	strb.w	r3, [fp]
 801588a:	e52e      	b.n	80152ea <_dtoa_r+0x49a>
 801588c:	4628      	mov	r0, r5
 801588e:	e7b9      	b.n	8015804 <_dtoa_r+0x9b4>
 8015890:	2201      	movs	r2, #1
 8015892:	e7e2      	b.n	801585a <_dtoa_r+0xa0a>
 8015894:	9904      	ldr	r1, [sp, #16]
 8015896:	2900      	cmp	r1, #0
 8015898:	db04      	blt.n	80158a4 <_dtoa_r+0xa54>
 801589a:	9807      	ldr	r0, [sp, #28]
 801589c:	4301      	orrs	r1, r0
 801589e:	9806      	ldr	r0, [sp, #24]
 80158a0:	4301      	orrs	r1, r0
 80158a2:	d120      	bne.n	80158e6 <_dtoa_r+0xa96>
 80158a4:	2a00      	cmp	r2, #0
 80158a6:	ddee      	ble.n	8015886 <_dtoa_r+0xa36>
 80158a8:	9902      	ldr	r1, [sp, #8]
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	2201      	movs	r2, #1
 80158ae:	4648      	mov	r0, r9
 80158b0:	f000 fbee 	bl	8016090 <__lshift>
 80158b4:	4621      	mov	r1, r4
 80158b6:	9002      	str	r0, [sp, #8]
 80158b8:	f000 fc56 	bl	8016168 <__mcmp>
 80158bc:	2800      	cmp	r0, #0
 80158be:	9b00      	ldr	r3, [sp, #0]
 80158c0:	dc02      	bgt.n	80158c8 <_dtoa_r+0xa78>
 80158c2:	d1e0      	bne.n	8015886 <_dtoa_r+0xa36>
 80158c4:	07da      	lsls	r2, r3, #31
 80158c6:	d5de      	bpl.n	8015886 <_dtoa_r+0xa36>
 80158c8:	2b39      	cmp	r3, #57	@ 0x39
 80158ca:	d1da      	bne.n	8015882 <_dtoa_r+0xa32>
 80158cc:	2339      	movs	r3, #57	@ 0x39
 80158ce:	f88b 3000 	strb.w	r3, [fp]
 80158d2:	4633      	mov	r3, r6
 80158d4:	461e      	mov	r6, r3
 80158d6:	3b01      	subs	r3, #1
 80158d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80158dc:	2a39      	cmp	r2, #57	@ 0x39
 80158de:	d04e      	beq.n	801597e <_dtoa_r+0xb2e>
 80158e0:	3201      	adds	r2, #1
 80158e2:	701a      	strb	r2, [r3, #0]
 80158e4:	e501      	b.n	80152ea <_dtoa_r+0x49a>
 80158e6:	2a00      	cmp	r2, #0
 80158e8:	dd03      	ble.n	80158f2 <_dtoa_r+0xaa2>
 80158ea:	2b39      	cmp	r3, #57	@ 0x39
 80158ec:	d0ee      	beq.n	80158cc <_dtoa_r+0xa7c>
 80158ee:	3301      	adds	r3, #1
 80158f0:	e7c9      	b.n	8015886 <_dtoa_r+0xa36>
 80158f2:	9a00      	ldr	r2, [sp, #0]
 80158f4:	9908      	ldr	r1, [sp, #32]
 80158f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80158fa:	428a      	cmp	r2, r1
 80158fc:	d028      	beq.n	8015950 <_dtoa_r+0xb00>
 80158fe:	9902      	ldr	r1, [sp, #8]
 8015900:	2300      	movs	r3, #0
 8015902:	220a      	movs	r2, #10
 8015904:	4648      	mov	r0, r9
 8015906:	f000 f9d5 	bl	8015cb4 <__multadd>
 801590a:	42af      	cmp	r7, r5
 801590c:	9002      	str	r0, [sp, #8]
 801590e:	f04f 0300 	mov.w	r3, #0
 8015912:	f04f 020a 	mov.w	r2, #10
 8015916:	4639      	mov	r1, r7
 8015918:	4648      	mov	r0, r9
 801591a:	d107      	bne.n	801592c <_dtoa_r+0xadc>
 801591c:	f000 f9ca 	bl	8015cb4 <__multadd>
 8015920:	4607      	mov	r7, r0
 8015922:	4605      	mov	r5, r0
 8015924:	9b00      	ldr	r3, [sp, #0]
 8015926:	3301      	adds	r3, #1
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	e777      	b.n	801581c <_dtoa_r+0x9cc>
 801592c:	f000 f9c2 	bl	8015cb4 <__multadd>
 8015930:	4629      	mov	r1, r5
 8015932:	4607      	mov	r7, r0
 8015934:	2300      	movs	r3, #0
 8015936:	220a      	movs	r2, #10
 8015938:	4648      	mov	r0, r9
 801593a:	f000 f9bb 	bl	8015cb4 <__multadd>
 801593e:	4605      	mov	r5, r0
 8015940:	e7f0      	b.n	8015924 <_dtoa_r+0xad4>
 8015942:	f1bb 0f00 	cmp.w	fp, #0
 8015946:	bfcc      	ite	gt
 8015948:	465e      	movgt	r6, fp
 801594a:	2601      	movle	r6, #1
 801594c:	4456      	add	r6, sl
 801594e:	2700      	movs	r7, #0
 8015950:	9902      	ldr	r1, [sp, #8]
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	2201      	movs	r2, #1
 8015956:	4648      	mov	r0, r9
 8015958:	f000 fb9a 	bl	8016090 <__lshift>
 801595c:	4621      	mov	r1, r4
 801595e:	9002      	str	r0, [sp, #8]
 8015960:	f000 fc02 	bl	8016168 <__mcmp>
 8015964:	2800      	cmp	r0, #0
 8015966:	dcb4      	bgt.n	80158d2 <_dtoa_r+0xa82>
 8015968:	d102      	bne.n	8015970 <_dtoa_r+0xb20>
 801596a:	9b00      	ldr	r3, [sp, #0]
 801596c:	07db      	lsls	r3, r3, #31
 801596e:	d4b0      	bmi.n	80158d2 <_dtoa_r+0xa82>
 8015970:	4633      	mov	r3, r6
 8015972:	461e      	mov	r6, r3
 8015974:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015978:	2a30      	cmp	r2, #48	@ 0x30
 801597a:	d0fa      	beq.n	8015972 <_dtoa_r+0xb22>
 801597c:	e4b5      	b.n	80152ea <_dtoa_r+0x49a>
 801597e:	459a      	cmp	sl, r3
 8015980:	d1a8      	bne.n	80158d4 <_dtoa_r+0xa84>
 8015982:	2331      	movs	r3, #49	@ 0x31
 8015984:	f108 0801 	add.w	r8, r8, #1
 8015988:	f88a 3000 	strb.w	r3, [sl]
 801598c:	e4ad      	b.n	80152ea <_dtoa_r+0x49a>
 801598e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015990:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80159ec <_dtoa_r+0xb9c>
 8015994:	b11b      	cbz	r3, 801599e <_dtoa_r+0xb4e>
 8015996:	f10a 0308 	add.w	r3, sl, #8
 801599a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801599c:	6013      	str	r3, [r2, #0]
 801599e:	4650      	mov	r0, sl
 80159a0:	b017      	add	sp, #92	@ 0x5c
 80159a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a6:	9b07      	ldr	r3, [sp, #28]
 80159a8:	2b01      	cmp	r3, #1
 80159aa:	f77f ae2e 	ble.w	801560a <_dtoa_r+0x7ba>
 80159ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80159b0:	9308      	str	r3, [sp, #32]
 80159b2:	2001      	movs	r0, #1
 80159b4:	e64d      	b.n	8015652 <_dtoa_r+0x802>
 80159b6:	f1bb 0f00 	cmp.w	fp, #0
 80159ba:	f77f aed9 	ble.w	8015770 <_dtoa_r+0x920>
 80159be:	4656      	mov	r6, sl
 80159c0:	9802      	ldr	r0, [sp, #8]
 80159c2:	4621      	mov	r1, r4
 80159c4:	f7ff f9bc 	bl	8014d40 <quorem>
 80159c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80159cc:	f806 3b01 	strb.w	r3, [r6], #1
 80159d0:	eba6 020a 	sub.w	r2, r6, sl
 80159d4:	4593      	cmp	fp, r2
 80159d6:	ddb4      	ble.n	8015942 <_dtoa_r+0xaf2>
 80159d8:	9902      	ldr	r1, [sp, #8]
 80159da:	2300      	movs	r3, #0
 80159dc:	220a      	movs	r2, #10
 80159de:	4648      	mov	r0, r9
 80159e0:	f000 f968 	bl	8015cb4 <__multadd>
 80159e4:	9002      	str	r0, [sp, #8]
 80159e6:	e7eb      	b.n	80159c0 <_dtoa_r+0xb70>
 80159e8:	0801bc61 	.word	0x0801bc61
 80159ec:	0801bbe5 	.word	0x0801bbe5

080159f0 <_free_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	4605      	mov	r5, r0
 80159f4:	2900      	cmp	r1, #0
 80159f6:	d041      	beq.n	8015a7c <_free_r+0x8c>
 80159f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159fc:	1f0c      	subs	r4, r1, #4
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	bfb8      	it	lt
 8015a02:	18e4      	addlt	r4, r4, r3
 8015a04:	f000 f8e8 	bl	8015bd8 <__malloc_lock>
 8015a08:	4a1d      	ldr	r2, [pc, #116]	@ (8015a80 <_free_r+0x90>)
 8015a0a:	6813      	ldr	r3, [r2, #0]
 8015a0c:	b933      	cbnz	r3, 8015a1c <_free_r+0x2c>
 8015a0e:	6063      	str	r3, [r4, #4]
 8015a10:	6014      	str	r4, [r2, #0]
 8015a12:	4628      	mov	r0, r5
 8015a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a18:	f000 b8e4 	b.w	8015be4 <__malloc_unlock>
 8015a1c:	42a3      	cmp	r3, r4
 8015a1e:	d908      	bls.n	8015a32 <_free_r+0x42>
 8015a20:	6820      	ldr	r0, [r4, #0]
 8015a22:	1821      	adds	r1, r4, r0
 8015a24:	428b      	cmp	r3, r1
 8015a26:	bf01      	itttt	eq
 8015a28:	6819      	ldreq	r1, [r3, #0]
 8015a2a:	685b      	ldreq	r3, [r3, #4]
 8015a2c:	1809      	addeq	r1, r1, r0
 8015a2e:	6021      	streq	r1, [r4, #0]
 8015a30:	e7ed      	b.n	8015a0e <_free_r+0x1e>
 8015a32:	461a      	mov	r2, r3
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	b10b      	cbz	r3, 8015a3c <_free_r+0x4c>
 8015a38:	42a3      	cmp	r3, r4
 8015a3a:	d9fa      	bls.n	8015a32 <_free_r+0x42>
 8015a3c:	6811      	ldr	r1, [r2, #0]
 8015a3e:	1850      	adds	r0, r2, r1
 8015a40:	42a0      	cmp	r0, r4
 8015a42:	d10b      	bne.n	8015a5c <_free_r+0x6c>
 8015a44:	6820      	ldr	r0, [r4, #0]
 8015a46:	4401      	add	r1, r0
 8015a48:	1850      	adds	r0, r2, r1
 8015a4a:	4283      	cmp	r3, r0
 8015a4c:	6011      	str	r1, [r2, #0]
 8015a4e:	d1e0      	bne.n	8015a12 <_free_r+0x22>
 8015a50:	6818      	ldr	r0, [r3, #0]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	6053      	str	r3, [r2, #4]
 8015a56:	4408      	add	r0, r1
 8015a58:	6010      	str	r0, [r2, #0]
 8015a5a:	e7da      	b.n	8015a12 <_free_r+0x22>
 8015a5c:	d902      	bls.n	8015a64 <_free_r+0x74>
 8015a5e:	230c      	movs	r3, #12
 8015a60:	602b      	str	r3, [r5, #0]
 8015a62:	e7d6      	b.n	8015a12 <_free_r+0x22>
 8015a64:	6820      	ldr	r0, [r4, #0]
 8015a66:	1821      	adds	r1, r4, r0
 8015a68:	428b      	cmp	r3, r1
 8015a6a:	bf04      	itt	eq
 8015a6c:	6819      	ldreq	r1, [r3, #0]
 8015a6e:	685b      	ldreq	r3, [r3, #4]
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	bf04      	itt	eq
 8015a74:	1809      	addeq	r1, r1, r0
 8015a76:	6021      	streq	r1, [r4, #0]
 8015a78:	6054      	str	r4, [r2, #4]
 8015a7a:	e7ca      	b.n	8015a12 <_free_r+0x22>
 8015a7c:	bd38      	pop	{r3, r4, r5, pc}
 8015a7e:	bf00      	nop
 8015a80:	20004a7c 	.word	0x20004a7c

08015a84 <malloc>:
 8015a84:	4b02      	ldr	r3, [pc, #8]	@ (8015a90 <malloc+0xc>)
 8015a86:	4601      	mov	r1, r0
 8015a88:	6818      	ldr	r0, [r3, #0]
 8015a8a:	f000 b825 	b.w	8015ad8 <_malloc_r>
 8015a8e:	bf00      	nop
 8015a90:	20000054 	.word	0x20000054

08015a94 <sbrk_aligned>:
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	4e0f      	ldr	r6, [pc, #60]	@ (8015ad4 <sbrk_aligned+0x40>)
 8015a98:	460c      	mov	r4, r1
 8015a9a:	6831      	ldr	r1, [r6, #0]
 8015a9c:	4605      	mov	r5, r0
 8015a9e:	b911      	cbnz	r1, 8015aa6 <sbrk_aligned+0x12>
 8015aa0:	f001 fe04 	bl	80176ac <_sbrk_r>
 8015aa4:	6030      	str	r0, [r6, #0]
 8015aa6:	4621      	mov	r1, r4
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f001 fdff 	bl	80176ac <_sbrk_r>
 8015aae:	1c43      	adds	r3, r0, #1
 8015ab0:	d103      	bne.n	8015aba <sbrk_aligned+0x26>
 8015ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	bd70      	pop	{r4, r5, r6, pc}
 8015aba:	1cc4      	adds	r4, r0, #3
 8015abc:	f024 0403 	bic.w	r4, r4, #3
 8015ac0:	42a0      	cmp	r0, r4
 8015ac2:	d0f8      	beq.n	8015ab6 <sbrk_aligned+0x22>
 8015ac4:	1a21      	subs	r1, r4, r0
 8015ac6:	4628      	mov	r0, r5
 8015ac8:	f001 fdf0 	bl	80176ac <_sbrk_r>
 8015acc:	3001      	adds	r0, #1
 8015ace:	d1f2      	bne.n	8015ab6 <sbrk_aligned+0x22>
 8015ad0:	e7ef      	b.n	8015ab2 <sbrk_aligned+0x1e>
 8015ad2:	bf00      	nop
 8015ad4:	20004a78 	.word	0x20004a78

08015ad8 <_malloc_r>:
 8015ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015adc:	1ccd      	adds	r5, r1, #3
 8015ade:	f025 0503 	bic.w	r5, r5, #3
 8015ae2:	3508      	adds	r5, #8
 8015ae4:	2d0c      	cmp	r5, #12
 8015ae6:	bf38      	it	cc
 8015ae8:	250c      	movcc	r5, #12
 8015aea:	2d00      	cmp	r5, #0
 8015aec:	4606      	mov	r6, r0
 8015aee:	db01      	blt.n	8015af4 <_malloc_r+0x1c>
 8015af0:	42a9      	cmp	r1, r5
 8015af2:	d904      	bls.n	8015afe <_malloc_r+0x26>
 8015af4:	230c      	movs	r3, #12
 8015af6:	6033      	str	r3, [r6, #0]
 8015af8:	2000      	movs	r0, #0
 8015afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015bd4 <_malloc_r+0xfc>
 8015b02:	f000 f869 	bl	8015bd8 <__malloc_lock>
 8015b06:	f8d8 3000 	ldr.w	r3, [r8]
 8015b0a:	461c      	mov	r4, r3
 8015b0c:	bb44      	cbnz	r4, 8015b60 <_malloc_r+0x88>
 8015b0e:	4629      	mov	r1, r5
 8015b10:	4630      	mov	r0, r6
 8015b12:	f7ff ffbf 	bl	8015a94 <sbrk_aligned>
 8015b16:	1c43      	adds	r3, r0, #1
 8015b18:	4604      	mov	r4, r0
 8015b1a:	d158      	bne.n	8015bce <_malloc_r+0xf6>
 8015b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8015b20:	4627      	mov	r7, r4
 8015b22:	2f00      	cmp	r7, #0
 8015b24:	d143      	bne.n	8015bae <_malloc_r+0xd6>
 8015b26:	2c00      	cmp	r4, #0
 8015b28:	d04b      	beq.n	8015bc2 <_malloc_r+0xea>
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	4639      	mov	r1, r7
 8015b2e:	4630      	mov	r0, r6
 8015b30:	eb04 0903 	add.w	r9, r4, r3
 8015b34:	f001 fdba 	bl	80176ac <_sbrk_r>
 8015b38:	4581      	cmp	r9, r0
 8015b3a:	d142      	bne.n	8015bc2 <_malloc_r+0xea>
 8015b3c:	6821      	ldr	r1, [r4, #0]
 8015b3e:	1a6d      	subs	r5, r5, r1
 8015b40:	4629      	mov	r1, r5
 8015b42:	4630      	mov	r0, r6
 8015b44:	f7ff ffa6 	bl	8015a94 <sbrk_aligned>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d03a      	beq.n	8015bc2 <_malloc_r+0xea>
 8015b4c:	6823      	ldr	r3, [r4, #0]
 8015b4e:	442b      	add	r3, r5
 8015b50:	6023      	str	r3, [r4, #0]
 8015b52:	f8d8 3000 	ldr.w	r3, [r8]
 8015b56:	685a      	ldr	r2, [r3, #4]
 8015b58:	bb62      	cbnz	r2, 8015bb4 <_malloc_r+0xdc>
 8015b5a:	f8c8 7000 	str.w	r7, [r8]
 8015b5e:	e00f      	b.n	8015b80 <_malloc_r+0xa8>
 8015b60:	6822      	ldr	r2, [r4, #0]
 8015b62:	1b52      	subs	r2, r2, r5
 8015b64:	d420      	bmi.n	8015ba8 <_malloc_r+0xd0>
 8015b66:	2a0b      	cmp	r2, #11
 8015b68:	d917      	bls.n	8015b9a <_malloc_r+0xc2>
 8015b6a:	1961      	adds	r1, r4, r5
 8015b6c:	42a3      	cmp	r3, r4
 8015b6e:	6025      	str	r5, [r4, #0]
 8015b70:	bf18      	it	ne
 8015b72:	6059      	strne	r1, [r3, #4]
 8015b74:	6863      	ldr	r3, [r4, #4]
 8015b76:	bf08      	it	eq
 8015b78:	f8c8 1000 	streq.w	r1, [r8]
 8015b7c:	5162      	str	r2, [r4, r5]
 8015b7e:	604b      	str	r3, [r1, #4]
 8015b80:	4630      	mov	r0, r6
 8015b82:	f000 f82f 	bl	8015be4 <__malloc_unlock>
 8015b86:	f104 000b 	add.w	r0, r4, #11
 8015b8a:	1d23      	adds	r3, r4, #4
 8015b8c:	f020 0007 	bic.w	r0, r0, #7
 8015b90:	1ac2      	subs	r2, r0, r3
 8015b92:	bf1c      	itt	ne
 8015b94:	1a1b      	subne	r3, r3, r0
 8015b96:	50a3      	strne	r3, [r4, r2]
 8015b98:	e7af      	b.n	8015afa <_malloc_r+0x22>
 8015b9a:	6862      	ldr	r2, [r4, #4]
 8015b9c:	42a3      	cmp	r3, r4
 8015b9e:	bf0c      	ite	eq
 8015ba0:	f8c8 2000 	streq.w	r2, [r8]
 8015ba4:	605a      	strne	r2, [r3, #4]
 8015ba6:	e7eb      	b.n	8015b80 <_malloc_r+0xa8>
 8015ba8:	4623      	mov	r3, r4
 8015baa:	6864      	ldr	r4, [r4, #4]
 8015bac:	e7ae      	b.n	8015b0c <_malloc_r+0x34>
 8015bae:	463c      	mov	r4, r7
 8015bb0:	687f      	ldr	r7, [r7, #4]
 8015bb2:	e7b6      	b.n	8015b22 <_malloc_r+0x4a>
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	42a3      	cmp	r3, r4
 8015bba:	d1fb      	bne.n	8015bb4 <_malloc_r+0xdc>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	6053      	str	r3, [r2, #4]
 8015bc0:	e7de      	b.n	8015b80 <_malloc_r+0xa8>
 8015bc2:	230c      	movs	r3, #12
 8015bc4:	6033      	str	r3, [r6, #0]
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	f000 f80c 	bl	8015be4 <__malloc_unlock>
 8015bcc:	e794      	b.n	8015af8 <_malloc_r+0x20>
 8015bce:	6005      	str	r5, [r0, #0]
 8015bd0:	e7d6      	b.n	8015b80 <_malloc_r+0xa8>
 8015bd2:	bf00      	nop
 8015bd4:	20004a7c 	.word	0x20004a7c

08015bd8 <__malloc_lock>:
 8015bd8:	4801      	ldr	r0, [pc, #4]	@ (8015be0 <__malloc_lock+0x8>)
 8015bda:	f7ff b89a 	b.w	8014d12 <__retarget_lock_acquire_recursive>
 8015bde:	bf00      	nop
 8015be0:	20004a74 	.word	0x20004a74

08015be4 <__malloc_unlock>:
 8015be4:	4801      	ldr	r0, [pc, #4]	@ (8015bec <__malloc_unlock+0x8>)
 8015be6:	f7ff b895 	b.w	8014d14 <__retarget_lock_release_recursive>
 8015bea:	bf00      	nop
 8015bec:	20004a74 	.word	0x20004a74

08015bf0 <_Balloc>:
 8015bf0:	b570      	push	{r4, r5, r6, lr}
 8015bf2:	69c6      	ldr	r6, [r0, #28]
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	460d      	mov	r5, r1
 8015bf8:	b976      	cbnz	r6, 8015c18 <_Balloc+0x28>
 8015bfa:	2010      	movs	r0, #16
 8015bfc:	f7ff ff42 	bl	8015a84 <malloc>
 8015c00:	4602      	mov	r2, r0
 8015c02:	61e0      	str	r0, [r4, #28]
 8015c04:	b920      	cbnz	r0, 8015c10 <_Balloc+0x20>
 8015c06:	4b18      	ldr	r3, [pc, #96]	@ (8015c68 <_Balloc+0x78>)
 8015c08:	4818      	ldr	r0, [pc, #96]	@ (8015c6c <_Balloc+0x7c>)
 8015c0a:	216b      	movs	r1, #107	@ 0x6b
 8015c0c:	f001 fd68 	bl	80176e0 <__assert_func>
 8015c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c14:	6006      	str	r6, [r0, #0]
 8015c16:	60c6      	str	r6, [r0, #12]
 8015c18:	69e6      	ldr	r6, [r4, #28]
 8015c1a:	68f3      	ldr	r3, [r6, #12]
 8015c1c:	b183      	cbz	r3, 8015c40 <_Balloc+0x50>
 8015c1e:	69e3      	ldr	r3, [r4, #28]
 8015c20:	68db      	ldr	r3, [r3, #12]
 8015c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015c26:	b9b8      	cbnz	r0, 8015c58 <_Balloc+0x68>
 8015c28:	2101      	movs	r1, #1
 8015c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8015c2e:	1d72      	adds	r2, r6, #5
 8015c30:	0092      	lsls	r2, r2, #2
 8015c32:	4620      	mov	r0, r4
 8015c34:	f001 fd72 	bl	801771c <_calloc_r>
 8015c38:	b160      	cbz	r0, 8015c54 <_Balloc+0x64>
 8015c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015c3e:	e00e      	b.n	8015c5e <_Balloc+0x6e>
 8015c40:	2221      	movs	r2, #33	@ 0x21
 8015c42:	2104      	movs	r1, #4
 8015c44:	4620      	mov	r0, r4
 8015c46:	f001 fd69 	bl	801771c <_calloc_r>
 8015c4a:	69e3      	ldr	r3, [r4, #28]
 8015c4c:	60f0      	str	r0, [r6, #12]
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d1e4      	bne.n	8015c1e <_Balloc+0x2e>
 8015c54:	2000      	movs	r0, #0
 8015c56:	bd70      	pop	{r4, r5, r6, pc}
 8015c58:	6802      	ldr	r2, [r0, #0]
 8015c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c5e:	2300      	movs	r3, #0
 8015c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015c64:	e7f7      	b.n	8015c56 <_Balloc+0x66>
 8015c66:	bf00      	nop
 8015c68:	0801bbf2 	.word	0x0801bbf2
 8015c6c:	0801bc72 	.word	0x0801bc72

08015c70 <_Bfree>:
 8015c70:	b570      	push	{r4, r5, r6, lr}
 8015c72:	69c6      	ldr	r6, [r0, #28]
 8015c74:	4605      	mov	r5, r0
 8015c76:	460c      	mov	r4, r1
 8015c78:	b976      	cbnz	r6, 8015c98 <_Bfree+0x28>
 8015c7a:	2010      	movs	r0, #16
 8015c7c:	f7ff ff02 	bl	8015a84 <malloc>
 8015c80:	4602      	mov	r2, r0
 8015c82:	61e8      	str	r0, [r5, #28]
 8015c84:	b920      	cbnz	r0, 8015c90 <_Bfree+0x20>
 8015c86:	4b09      	ldr	r3, [pc, #36]	@ (8015cac <_Bfree+0x3c>)
 8015c88:	4809      	ldr	r0, [pc, #36]	@ (8015cb0 <_Bfree+0x40>)
 8015c8a:	218f      	movs	r1, #143	@ 0x8f
 8015c8c:	f001 fd28 	bl	80176e0 <__assert_func>
 8015c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c94:	6006      	str	r6, [r0, #0]
 8015c96:	60c6      	str	r6, [r0, #12]
 8015c98:	b13c      	cbz	r4, 8015caa <_Bfree+0x3a>
 8015c9a:	69eb      	ldr	r3, [r5, #28]
 8015c9c:	6862      	ldr	r2, [r4, #4]
 8015c9e:	68db      	ldr	r3, [r3, #12]
 8015ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015ca4:	6021      	str	r1, [r4, #0]
 8015ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015caa:	bd70      	pop	{r4, r5, r6, pc}
 8015cac:	0801bbf2 	.word	0x0801bbf2
 8015cb0:	0801bc72 	.word	0x0801bc72

08015cb4 <__multadd>:
 8015cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb8:	690d      	ldr	r5, [r1, #16]
 8015cba:	4607      	mov	r7, r0
 8015cbc:	460c      	mov	r4, r1
 8015cbe:	461e      	mov	r6, r3
 8015cc0:	f101 0c14 	add.w	ip, r1, #20
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8015cca:	b299      	uxth	r1, r3
 8015ccc:	fb02 6101 	mla	r1, r2, r1, r6
 8015cd0:	0c1e      	lsrs	r6, r3, #16
 8015cd2:	0c0b      	lsrs	r3, r1, #16
 8015cd4:	fb02 3306 	mla	r3, r2, r6, r3
 8015cd8:	b289      	uxth	r1, r1
 8015cda:	3001      	adds	r0, #1
 8015cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015ce0:	4285      	cmp	r5, r0
 8015ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8015ce6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015cea:	dcec      	bgt.n	8015cc6 <__multadd+0x12>
 8015cec:	b30e      	cbz	r6, 8015d32 <__multadd+0x7e>
 8015cee:	68a3      	ldr	r3, [r4, #8]
 8015cf0:	42ab      	cmp	r3, r5
 8015cf2:	dc19      	bgt.n	8015d28 <__multadd+0x74>
 8015cf4:	6861      	ldr	r1, [r4, #4]
 8015cf6:	4638      	mov	r0, r7
 8015cf8:	3101      	adds	r1, #1
 8015cfa:	f7ff ff79 	bl	8015bf0 <_Balloc>
 8015cfe:	4680      	mov	r8, r0
 8015d00:	b928      	cbnz	r0, 8015d0e <__multadd+0x5a>
 8015d02:	4602      	mov	r2, r0
 8015d04:	4b0c      	ldr	r3, [pc, #48]	@ (8015d38 <__multadd+0x84>)
 8015d06:	480d      	ldr	r0, [pc, #52]	@ (8015d3c <__multadd+0x88>)
 8015d08:	21ba      	movs	r1, #186	@ 0xba
 8015d0a:	f001 fce9 	bl	80176e0 <__assert_func>
 8015d0e:	6922      	ldr	r2, [r4, #16]
 8015d10:	3202      	adds	r2, #2
 8015d12:	f104 010c 	add.w	r1, r4, #12
 8015d16:	0092      	lsls	r2, r2, #2
 8015d18:	300c      	adds	r0, #12
 8015d1a:	f7fe fffc 	bl	8014d16 <memcpy>
 8015d1e:	4621      	mov	r1, r4
 8015d20:	4638      	mov	r0, r7
 8015d22:	f7ff ffa5 	bl	8015c70 <_Bfree>
 8015d26:	4644      	mov	r4, r8
 8015d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015d2c:	3501      	adds	r5, #1
 8015d2e:	615e      	str	r6, [r3, #20]
 8015d30:	6125      	str	r5, [r4, #16]
 8015d32:	4620      	mov	r0, r4
 8015d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d38:	0801bc61 	.word	0x0801bc61
 8015d3c:	0801bc72 	.word	0x0801bc72

08015d40 <__s2b>:
 8015d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d44:	460c      	mov	r4, r1
 8015d46:	4615      	mov	r5, r2
 8015d48:	461f      	mov	r7, r3
 8015d4a:	2209      	movs	r2, #9
 8015d4c:	3308      	adds	r3, #8
 8015d4e:	4606      	mov	r6, r0
 8015d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d54:	2100      	movs	r1, #0
 8015d56:	2201      	movs	r2, #1
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	db09      	blt.n	8015d70 <__s2b+0x30>
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f7ff ff47 	bl	8015bf0 <_Balloc>
 8015d62:	b940      	cbnz	r0, 8015d76 <__s2b+0x36>
 8015d64:	4602      	mov	r2, r0
 8015d66:	4b19      	ldr	r3, [pc, #100]	@ (8015dcc <__s2b+0x8c>)
 8015d68:	4819      	ldr	r0, [pc, #100]	@ (8015dd0 <__s2b+0x90>)
 8015d6a:	21d3      	movs	r1, #211	@ 0xd3
 8015d6c:	f001 fcb8 	bl	80176e0 <__assert_func>
 8015d70:	0052      	lsls	r2, r2, #1
 8015d72:	3101      	adds	r1, #1
 8015d74:	e7f0      	b.n	8015d58 <__s2b+0x18>
 8015d76:	9b08      	ldr	r3, [sp, #32]
 8015d78:	6143      	str	r3, [r0, #20]
 8015d7a:	2d09      	cmp	r5, #9
 8015d7c:	f04f 0301 	mov.w	r3, #1
 8015d80:	6103      	str	r3, [r0, #16]
 8015d82:	dd16      	ble.n	8015db2 <__s2b+0x72>
 8015d84:	f104 0909 	add.w	r9, r4, #9
 8015d88:	46c8      	mov	r8, r9
 8015d8a:	442c      	add	r4, r5
 8015d8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015d90:	4601      	mov	r1, r0
 8015d92:	3b30      	subs	r3, #48	@ 0x30
 8015d94:	220a      	movs	r2, #10
 8015d96:	4630      	mov	r0, r6
 8015d98:	f7ff ff8c 	bl	8015cb4 <__multadd>
 8015d9c:	45a0      	cmp	r8, r4
 8015d9e:	d1f5      	bne.n	8015d8c <__s2b+0x4c>
 8015da0:	f1a5 0408 	sub.w	r4, r5, #8
 8015da4:	444c      	add	r4, r9
 8015da6:	1b2d      	subs	r5, r5, r4
 8015da8:	1963      	adds	r3, r4, r5
 8015daa:	42bb      	cmp	r3, r7
 8015dac:	db04      	blt.n	8015db8 <__s2b+0x78>
 8015dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015db2:	340a      	adds	r4, #10
 8015db4:	2509      	movs	r5, #9
 8015db6:	e7f6      	b.n	8015da6 <__s2b+0x66>
 8015db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015dbc:	4601      	mov	r1, r0
 8015dbe:	3b30      	subs	r3, #48	@ 0x30
 8015dc0:	220a      	movs	r2, #10
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	f7ff ff76 	bl	8015cb4 <__multadd>
 8015dc8:	e7ee      	b.n	8015da8 <__s2b+0x68>
 8015dca:	bf00      	nop
 8015dcc:	0801bc61 	.word	0x0801bc61
 8015dd0:	0801bc72 	.word	0x0801bc72

08015dd4 <__hi0bits>:
 8015dd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015dd8:	4603      	mov	r3, r0
 8015dda:	bf36      	itet	cc
 8015ddc:	0403      	lslcc	r3, r0, #16
 8015dde:	2000      	movcs	r0, #0
 8015de0:	2010      	movcc	r0, #16
 8015de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015de6:	bf3c      	itt	cc
 8015de8:	021b      	lslcc	r3, r3, #8
 8015dea:	3008      	addcc	r0, #8
 8015dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015df0:	bf3c      	itt	cc
 8015df2:	011b      	lslcc	r3, r3, #4
 8015df4:	3004      	addcc	r0, #4
 8015df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015dfa:	bf3c      	itt	cc
 8015dfc:	009b      	lslcc	r3, r3, #2
 8015dfe:	3002      	addcc	r0, #2
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	db05      	blt.n	8015e10 <__hi0bits+0x3c>
 8015e04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015e08:	f100 0001 	add.w	r0, r0, #1
 8015e0c:	bf08      	it	eq
 8015e0e:	2020      	moveq	r0, #32
 8015e10:	4770      	bx	lr

08015e12 <__lo0bits>:
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	4602      	mov	r2, r0
 8015e16:	f013 0007 	ands.w	r0, r3, #7
 8015e1a:	d00b      	beq.n	8015e34 <__lo0bits+0x22>
 8015e1c:	07d9      	lsls	r1, r3, #31
 8015e1e:	d421      	bmi.n	8015e64 <__lo0bits+0x52>
 8015e20:	0798      	lsls	r0, r3, #30
 8015e22:	bf49      	itett	mi
 8015e24:	085b      	lsrmi	r3, r3, #1
 8015e26:	089b      	lsrpl	r3, r3, #2
 8015e28:	2001      	movmi	r0, #1
 8015e2a:	6013      	strmi	r3, [r2, #0]
 8015e2c:	bf5c      	itt	pl
 8015e2e:	6013      	strpl	r3, [r2, #0]
 8015e30:	2002      	movpl	r0, #2
 8015e32:	4770      	bx	lr
 8015e34:	b299      	uxth	r1, r3
 8015e36:	b909      	cbnz	r1, 8015e3c <__lo0bits+0x2a>
 8015e38:	0c1b      	lsrs	r3, r3, #16
 8015e3a:	2010      	movs	r0, #16
 8015e3c:	b2d9      	uxtb	r1, r3
 8015e3e:	b909      	cbnz	r1, 8015e44 <__lo0bits+0x32>
 8015e40:	3008      	adds	r0, #8
 8015e42:	0a1b      	lsrs	r3, r3, #8
 8015e44:	0719      	lsls	r1, r3, #28
 8015e46:	bf04      	itt	eq
 8015e48:	091b      	lsreq	r3, r3, #4
 8015e4a:	3004      	addeq	r0, #4
 8015e4c:	0799      	lsls	r1, r3, #30
 8015e4e:	bf04      	itt	eq
 8015e50:	089b      	lsreq	r3, r3, #2
 8015e52:	3002      	addeq	r0, #2
 8015e54:	07d9      	lsls	r1, r3, #31
 8015e56:	d403      	bmi.n	8015e60 <__lo0bits+0x4e>
 8015e58:	085b      	lsrs	r3, r3, #1
 8015e5a:	f100 0001 	add.w	r0, r0, #1
 8015e5e:	d003      	beq.n	8015e68 <__lo0bits+0x56>
 8015e60:	6013      	str	r3, [r2, #0]
 8015e62:	4770      	bx	lr
 8015e64:	2000      	movs	r0, #0
 8015e66:	4770      	bx	lr
 8015e68:	2020      	movs	r0, #32
 8015e6a:	4770      	bx	lr

08015e6c <__i2b>:
 8015e6c:	b510      	push	{r4, lr}
 8015e6e:	460c      	mov	r4, r1
 8015e70:	2101      	movs	r1, #1
 8015e72:	f7ff febd 	bl	8015bf0 <_Balloc>
 8015e76:	4602      	mov	r2, r0
 8015e78:	b928      	cbnz	r0, 8015e86 <__i2b+0x1a>
 8015e7a:	4b05      	ldr	r3, [pc, #20]	@ (8015e90 <__i2b+0x24>)
 8015e7c:	4805      	ldr	r0, [pc, #20]	@ (8015e94 <__i2b+0x28>)
 8015e7e:	f240 1145 	movw	r1, #325	@ 0x145
 8015e82:	f001 fc2d 	bl	80176e0 <__assert_func>
 8015e86:	2301      	movs	r3, #1
 8015e88:	6144      	str	r4, [r0, #20]
 8015e8a:	6103      	str	r3, [r0, #16]
 8015e8c:	bd10      	pop	{r4, pc}
 8015e8e:	bf00      	nop
 8015e90:	0801bc61 	.word	0x0801bc61
 8015e94:	0801bc72 	.word	0x0801bc72

08015e98 <__multiply>:
 8015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9c:	4617      	mov	r7, r2
 8015e9e:	690a      	ldr	r2, [r1, #16]
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	bfa8      	it	ge
 8015ea6:	463b      	movge	r3, r7
 8015ea8:	4689      	mov	r9, r1
 8015eaa:	bfa4      	itt	ge
 8015eac:	460f      	movge	r7, r1
 8015eae:	4699      	movge	r9, r3
 8015eb0:	693d      	ldr	r5, [r7, #16]
 8015eb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	6879      	ldr	r1, [r7, #4]
 8015eba:	eb05 060a 	add.w	r6, r5, sl
 8015ebe:	42b3      	cmp	r3, r6
 8015ec0:	b085      	sub	sp, #20
 8015ec2:	bfb8      	it	lt
 8015ec4:	3101      	addlt	r1, #1
 8015ec6:	f7ff fe93 	bl	8015bf0 <_Balloc>
 8015eca:	b930      	cbnz	r0, 8015eda <__multiply+0x42>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	4b41      	ldr	r3, [pc, #260]	@ (8015fd4 <__multiply+0x13c>)
 8015ed0:	4841      	ldr	r0, [pc, #260]	@ (8015fd8 <__multiply+0x140>)
 8015ed2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015ed6:	f001 fc03 	bl	80176e0 <__assert_func>
 8015eda:	f100 0414 	add.w	r4, r0, #20
 8015ede:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015ee2:	4623      	mov	r3, r4
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	4573      	cmp	r3, lr
 8015ee8:	d320      	bcc.n	8015f2c <__multiply+0x94>
 8015eea:	f107 0814 	add.w	r8, r7, #20
 8015eee:	f109 0114 	add.w	r1, r9, #20
 8015ef2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015ef6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015efa:	9302      	str	r3, [sp, #8]
 8015efc:	1beb      	subs	r3, r5, r7
 8015efe:	3b15      	subs	r3, #21
 8015f00:	f023 0303 	bic.w	r3, r3, #3
 8015f04:	3304      	adds	r3, #4
 8015f06:	3715      	adds	r7, #21
 8015f08:	42bd      	cmp	r5, r7
 8015f0a:	bf38      	it	cc
 8015f0c:	2304      	movcc	r3, #4
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	9b02      	ldr	r3, [sp, #8]
 8015f12:	9103      	str	r1, [sp, #12]
 8015f14:	428b      	cmp	r3, r1
 8015f16:	d80c      	bhi.n	8015f32 <__multiply+0x9a>
 8015f18:	2e00      	cmp	r6, #0
 8015f1a:	dd03      	ble.n	8015f24 <__multiply+0x8c>
 8015f1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d055      	beq.n	8015fd0 <__multiply+0x138>
 8015f24:	6106      	str	r6, [r0, #16]
 8015f26:	b005      	add	sp, #20
 8015f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2c:	f843 2b04 	str.w	r2, [r3], #4
 8015f30:	e7d9      	b.n	8015ee6 <__multiply+0x4e>
 8015f32:	f8b1 a000 	ldrh.w	sl, [r1]
 8015f36:	f1ba 0f00 	cmp.w	sl, #0
 8015f3a:	d01f      	beq.n	8015f7c <__multiply+0xe4>
 8015f3c:	46c4      	mov	ip, r8
 8015f3e:	46a1      	mov	r9, r4
 8015f40:	2700      	movs	r7, #0
 8015f42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015f46:	f8d9 3000 	ldr.w	r3, [r9]
 8015f4a:	fa1f fb82 	uxth.w	fp, r2
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	fb0a 330b 	mla	r3, sl, fp, r3
 8015f54:	443b      	add	r3, r7
 8015f56:	f8d9 7000 	ldr.w	r7, [r9]
 8015f5a:	0c12      	lsrs	r2, r2, #16
 8015f5c:	0c3f      	lsrs	r7, r7, #16
 8015f5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8015f62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f6c:	4565      	cmp	r5, ip
 8015f6e:	f849 3b04 	str.w	r3, [r9], #4
 8015f72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015f76:	d8e4      	bhi.n	8015f42 <__multiply+0xaa>
 8015f78:	9b01      	ldr	r3, [sp, #4]
 8015f7a:	50e7      	str	r7, [r4, r3]
 8015f7c:	9b03      	ldr	r3, [sp, #12]
 8015f7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015f82:	3104      	adds	r1, #4
 8015f84:	f1b9 0f00 	cmp.w	r9, #0
 8015f88:	d020      	beq.n	8015fcc <__multiply+0x134>
 8015f8a:	6823      	ldr	r3, [r4, #0]
 8015f8c:	4647      	mov	r7, r8
 8015f8e:	46a4      	mov	ip, r4
 8015f90:	f04f 0a00 	mov.w	sl, #0
 8015f94:	f8b7 b000 	ldrh.w	fp, [r7]
 8015f98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015f9c:	fb09 220b 	mla	r2, r9, fp, r2
 8015fa0:	4452      	add	r2, sl
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015fa8:	f84c 3b04 	str.w	r3, [ip], #4
 8015fac:	f857 3b04 	ldr.w	r3, [r7], #4
 8015fb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015fb4:	f8bc 3000 	ldrh.w	r3, [ip]
 8015fb8:	fb09 330a 	mla	r3, r9, sl, r3
 8015fbc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015fc0:	42bd      	cmp	r5, r7
 8015fc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015fc6:	d8e5      	bhi.n	8015f94 <__multiply+0xfc>
 8015fc8:	9a01      	ldr	r2, [sp, #4]
 8015fca:	50a3      	str	r3, [r4, r2]
 8015fcc:	3404      	adds	r4, #4
 8015fce:	e79f      	b.n	8015f10 <__multiply+0x78>
 8015fd0:	3e01      	subs	r6, #1
 8015fd2:	e7a1      	b.n	8015f18 <__multiply+0x80>
 8015fd4:	0801bc61 	.word	0x0801bc61
 8015fd8:	0801bc72 	.word	0x0801bc72

08015fdc <__pow5mult>:
 8015fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fe0:	4615      	mov	r5, r2
 8015fe2:	f012 0203 	ands.w	r2, r2, #3
 8015fe6:	4607      	mov	r7, r0
 8015fe8:	460e      	mov	r6, r1
 8015fea:	d007      	beq.n	8015ffc <__pow5mult+0x20>
 8015fec:	4c25      	ldr	r4, [pc, #148]	@ (8016084 <__pow5mult+0xa8>)
 8015fee:	3a01      	subs	r2, #1
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015ff6:	f7ff fe5d 	bl	8015cb4 <__multadd>
 8015ffa:	4606      	mov	r6, r0
 8015ffc:	10ad      	asrs	r5, r5, #2
 8015ffe:	d03d      	beq.n	801607c <__pow5mult+0xa0>
 8016000:	69fc      	ldr	r4, [r7, #28]
 8016002:	b97c      	cbnz	r4, 8016024 <__pow5mult+0x48>
 8016004:	2010      	movs	r0, #16
 8016006:	f7ff fd3d 	bl	8015a84 <malloc>
 801600a:	4602      	mov	r2, r0
 801600c:	61f8      	str	r0, [r7, #28]
 801600e:	b928      	cbnz	r0, 801601c <__pow5mult+0x40>
 8016010:	4b1d      	ldr	r3, [pc, #116]	@ (8016088 <__pow5mult+0xac>)
 8016012:	481e      	ldr	r0, [pc, #120]	@ (801608c <__pow5mult+0xb0>)
 8016014:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016018:	f001 fb62 	bl	80176e0 <__assert_func>
 801601c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016020:	6004      	str	r4, [r0, #0]
 8016022:	60c4      	str	r4, [r0, #12]
 8016024:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801602c:	b94c      	cbnz	r4, 8016042 <__pow5mult+0x66>
 801602e:	f240 2171 	movw	r1, #625	@ 0x271
 8016032:	4638      	mov	r0, r7
 8016034:	f7ff ff1a 	bl	8015e6c <__i2b>
 8016038:	2300      	movs	r3, #0
 801603a:	f8c8 0008 	str.w	r0, [r8, #8]
 801603e:	4604      	mov	r4, r0
 8016040:	6003      	str	r3, [r0, #0]
 8016042:	f04f 0900 	mov.w	r9, #0
 8016046:	07eb      	lsls	r3, r5, #31
 8016048:	d50a      	bpl.n	8016060 <__pow5mult+0x84>
 801604a:	4631      	mov	r1, r6
 801604c:	4622      	mov	r2, r4
 801604e:	4638      	mov	r0, r7
 8016050:	f7ff ff22 	bl	8015e98 <__multiply>
 8016054:	4631      	mov	r1, r6
 8016056:	4680      	mov	r8, r0
 8016058:	4638      	mov	r0, r7
 801605a:	f7ff fe09 	bl	8015c70 <_Bfree>
 801605e:	4646      	mov	r6, r8
 8016060:	106d      	asrs	r5, r5, #1
 8016062:	d00b      	beq.n	801607c <__pow5mult+0xa0>
 8016064:	6820      	ldr	r0, [r4, #0]
 8016066:	b938      	cbnz	r0, 8016078 <__pow5mult+0x9c>
 8016068:	4622      	mov	r2, r4
 801606a:	4621      	mov	r1, r4
 801606c:	4638      	mov	r0, r7
 801606e:	f7ff ff13 	bl	8015e98 <__multiply>
 8016072:	6020      	str	r0, [r4, #0]
 8016074:	f8c0 9000 	str.w	r9, [r0]
 8016078:	4604      	mov	r4, r0
 801607a:	e7e4      	b.n	8016046 <__pow5mult+0x6a>
 801607c:	4630      	mov	r0, r6
 801607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016082:	bf00      	nop
 8016084:	0801bd84 	.word	0x0801bd84
 8016088:	0801bbf2 	.word	0x0801bbf2
 801608c:	0801bc72 	.word	0x0801bc72

08016090 <__lshift>:
 8016090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016094:	460c      	mov	r4, r1
 8016096:	6849      	ldr	r1, [r1, #4]
 8016098:	6923      	ldr	r3, [r4, #16]
 801609a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801609e:	68a3      	ldr	r3, [r4, #8]
 80160a0:	4607      	mov	r7, r0
 80160a2:	4691      	mov	r9, r2
 80160a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80160a8:	f108 0601 	add.w	r6, r8, #1
 80160ac:	42b3      	cmp	r3, r6
 80160ae:	db0b      	blt.n	80160c8 <__lshift+0x38>
 80160b0:	4638      	mov	r0, r7
 80160b2:	f7ff fd9d 	bl	8015bf0 <_Balloc>
 80160b6:	4605      	mov	r5, r0
 80160b8:	b948      	cbnz	r0, 80160ce <__lshift+0x3e>
 80160ba:	4602      	mov	r2, r0
 80160bc:	4b28      	ldr	r3, [pc, #160]	@ (8016160 <__lshift+0xd0>)
 80160be:	4829      	ldr	r0, [pc, #164]	@ (8016164 <__lshift+0xd4>)
 80160c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80160c4:	f001 fb0c 	bl	80176e0 <__assert_func>
 80160c8:	3101      	adds	r1, #1
 80160ca:	005b      	lsls	r3, r3, #1
 80160cc:	e7ee      	b.n	80160ac <__lshift+0x1c>
 80160ce:	2300      	movs	r3, #0
 80160d0:	f100 0114 	add.w	r1, r0, #20
 80160d4:	f100 0210 	add.w	r2, r0, #16
 80160d8:	4618      	mov	r0, r3
 80160da:	4553      	cmp	r3, sl
 80160dc:	db33      	blt.n	8016146 <__lshift+0xb6>
 80160de:	6920      	ldr	r0, [r4, #16]
 80160e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80160e4:	f104 0314 	add.w	r3, r4, #20
 80160e8:	f019 091f 	ands.w	r9, r9, #31
 80160ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80160f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80160f4:	d02b      	beq.n	801614e <__lshift+0xbe>
 80160f6:	f1c9 0e20 	rsb	lr, r9, #32
 80160fa:	468a      	mov	sl, r1
 80160fc:	2200      	movs	r2, #0
 80160fe:	6818      	ldr	r0, [r3, #0]
 8016100:	fa00 f009 	lsl.w	r0, r0, r9
 8016104:	4310      	orrs	r0, r2
 8016106:	f84a 0b04 	str.w	r0, [sl], #4
 801610a:	f853 2b04 	ldr.w	r2, [r3], #4
 801610e:	459c      	cmp	ip, r3
 8016110:	fa22 f20e 	lsr.w	r2, r2, lr
 8016114:	d8f3      	bhi.n	80160fe <__lshift+0x6e>
 8016116:	ebac 0304 	sub.w	r3, ip, r4
 801611a:	3b15      	subs	r3, #21
 801611c:	f023 0303 	bic.w	r3, r3, #3
 8016120:	3304      	adds	r3, #4
 8016122:	f104 0015 	add.w	r0, r4, #21
 8016126:	4560      	cmp	r0, ip
 8016128:	bf88      	it	hi
 801612a:	2304      	movhi	r3, #4
 801612c:	50ca      	str	r2, [r1, r3]
 801612e:	b10a      	cbz	r2, 8016134 <__lshift+0xa4>
 8016130:	f108 0602 	add.w	r6, r8, #2
 8016134:	3e01      	subs	r6, #1
 8016136:	4638      	mov	r0, r7
 8016138:	612e      	str	r6, [r5, #16]
 801613a:	4621      	mov	r1, r4
 801613c:	f7ff fd98 	bl	8015c70 <_Bfree>
 8016140:	4628      	mov	r0, r5
 8016142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016146:	f842 0f04 	str.w	r0, [r2, #4]!
 801614a:	3301      	adds	r3, #1
 801614c:	e7c5      	b.n	80160da <__lshift+0x4a>
 801614e:	3904      	subs	r1, #4
 8016150:	f853 2b04 	ldr.w	r2, [r3], #4
 8016154:	f841 2f04 	str.w	r2, [r1, #4]!
 8016158:	459c      	cmp	ip, r3
 801615a:	d8f9      	bhi.n	8016150 <__lshift+0xc0>
 801615c:	e7ea      	b.n	8016134 <__lshift+0xa4>
 801615e:	bf00      	nop
 8016160:	0801bc61 	.word	0x0801bc61
 8016164:	0801bc72 	.word	0x0801bc72

08016168 <__mcmp>:
 8016168:	690a      	ldr	r2, [r1, #16]
 801616a:	4603      	mov	r3, r0
 801616c:	6900      	ldr	r0, [r0, #16]
 801616e:	1a80      	subs	r0, r0, r2
 8016170:	b530      	push	{r4, r5, lr}
 8016172:	d10e      	bne.n	8016192 <__mcmp+0x2a>
 8016174:	3314      	adds	r3, #20
 8016176:	3114      	adds	r1, #20
 8016178:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801617c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016180:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016184:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016188:	4295      	cmp	r5, r2
 801618a:	d003      	beq.n	8016194 <__mcmp+0x2c>
 801618c:	d205      	bcs.n	801619a <__mcmp+0x32>
 801618e:	f04f 30ff 	mov.w	r0, #4294967295
 8016192:	bd30      	pop	{r4, r5, pc}
 8016194:	42a3      	cmp	r3, r4
 8016196:	d3f3      	bcc.n	8016180 <__mcmp+0x18>
 8016198:	e7fb      	b.n	8016192 <__mcmp+0x2a>
 801619a:	2001      	movs	r0, #1
 801619c:	e7f9      	b.n	8016192 <__mcmp+0x2a>
	...

080161a0 <__mdiff>:
 80161a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	4689      	mov	r9, r1
 80161a6:	4606      	mov	r6, r0
 80161a8:	4611      	mov	r1, r2
 80161aa:	4648      	mov	r0, r9
 80161ac:	4614      	mov	r4, r2
 80161ae:	f7ff ffdb 	bl	8016168 <__mcmp>
 80161b2:	1e05      	subs	r5, r0, #0
 80161b4:	d112      	bne.n	80161dc <__mdiff+0x3c>
 80161b6:	4629      	mov	r1, r5
 80161b8:	4630      	mov	r0, r6
 80161ba:	f7ff fd19 	bl	8015bf0 <_Balloc>
 80161be:	4602      	mov	r2, r0
 80161c0:	b928      	cbnz	r0, 80161ce <__mdiff+0x2e>
 80161c2:	4b3f      	ldr	r3, [pc, #252]	@ (80162c0 <__mdiff+0x120>)
 80161c4:	f240 2137 	movw	r1, #567	@ 0x237
 80161c8:	483e      	ldr	r0, [pc, #248]	@ (80162c4 <__mdiff+0x124>)
 80161ca:	f001 fa89 	bl	80176e0 <__assert_func>
 80161ce:	2301      	movs	r3, #1
 80161d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80161d4:	4610      	mov	r0, r2
 80161d6:	b003      	add	sp, #12
 80161d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161dc:	bfbc      	itt	lt
 80161de:	464b      	movlt	r3, r9
 80161e0:	46a1      	movlt	r9, r4
 80161e2:	4630      	mov	r0, r6
 80161e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80161e8:	bfba      	itte	lt
 80161ea:	461c      	movlt	r4, r3
 80161ec:	2501      	movlt	r5, #1
 80161ee:	2500      	movge	r5, #0
 80161f0:	f7ff fcfe 	bl	8015bf0 <_Balloc>
 80161f4:	4602      	mov	r2, r0
 80161f6:	b918      	cbnz	r0, 8016200 <__mdiff+0x60>
 80161f8:	4b31      	ldr	r3, [pc, #196]	@ (80162c0 <__mdiff+0x120>)
 80161fa:	f240 2145 	movw	r1, #581	@ 0x245
 80161fe:	e7e3      	b.n	80161c8 <__mdiff+0x28>
 8016200:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016204:	6926      	ldr	r6, [r4, #16]
 8016206:	60c5      	str	r5, [r0, #12]
 8016208:	f109 0310 	add.w	r3, r9, #16
 801620c:	f109 0514 	add.w	r5, r9, #20
 8016210:	f104 0e14 	add.w	lr, r4, #20
 8016214:	f100 0b14 	add.w	fp, r0, #20
 8016218:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801621c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016220:	9301      	str	r3, [sp, #4]
 8016222:	46d9      	mov	r9, fp
 8016224:	f04f 0c00 	mov.w	ip, #0
 8016228:	9b01      	ldr	r3, [sp, #4]
 801622a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801622e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016232:	9301      	str	r3, [sp, #4]
 8016234:	fa1f f38a 	uxth.w	r3, sl
 8016238:	4619      	mov	r1, r3
 801623a:	b283      	uxth	r3, r0
 801623c:	1acb      	subs	r3, r1, r3
 801623e:	0c00      	lsrs	r0, r0, #16
 8016240:	4463      	add	r3, ip
 8016242:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016246:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801624a:	b29b      	uxth	r3, r3
 801624c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016250:	4576      	cmp	r6, lr
 8016252:	f849 3b04 	str.w	r3, [r9], #4
 8016256:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801625a:	d8e5      	bhi.n	8016228 <__mdiff+0x88>
 801625c:	1b33      	subs	r3, r6, r4
 801625e:	3b15      	subs	r3, #21
 8016260:	f023 0303 	bic.w	r3, r3, #3
 8016264:	3415      	adds	r4, #21
 8016266:	3304      	adds	r3, #4
 8016268:	42a6      	cmp	r6, r4
 801626a:	bf38      	it	cc
 801626c:	2304      	movcc	r3, #4
 801626e:	441d      	add	r5, r3
 8016270:	445b      	add	r3, fp
 8016272:	461e      	mov	r6, r3
 8016274:	462c      	mov	r4, r5
 8016276:	4544      	cmp	r4, r8
 8016278:	d30e      	bcc.n	8016298 <__mdiff+0xf8>
 801627a:	f108 0103 	add.w	r1, r8, #3
 801627e:	1b49      	subs	r1, r1, r5
 8016280:	f021 0103 	bic.w	r1, r1, #3
 8016284:	3d03      	subs	r5, #3
 8016286:	45a8      	cmp	r8, r5
 8016288:	bf38      	it	cc
 801628a:	2100      	movcc	r1, #0
 801628c:	440b      	add	r3, r1
 801628e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016292:	b191      	cbz	r1, 80162ba <__mdiff+0x11a>
 8016294:	6117      	str	r7, [r2, #16]
 8016296:	e79d      	b.n	80161d4 <__mdiff+0x34>
 8016298:	f854 1b04 	ldr.w	r1, [r4], #4
 801629c:	46e6      	mov	lr, ip
 801629e:	0c08      	lsrs	r0, r1, #16
 80162a0:	fa1c fc81 	uxtah	ip, ip, r1
 80162a4:	4471      	add	r1, lr
 80162a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80162aa:	b289      	uxth	r1, r1
 80162ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80162b0:	f846 1b04 	str.w	r1, [r6], #4
 80162b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80162b8:	e7dd      	b.n	8016276 <__mdiff+0xd6>
 80162ba:	3f01      	subs	r7, #1
 80162bc:	e7e7      	b.n	801628e <__mdiff+0xee>
 80162be:	bf00      	nop
 80162c0:	0801bc61 	.word	0x0801bc61
 80162c4:	0801bc72 	.word	0x0801bc72

080162c8 <__ulp>:
 80162c8:	b082      	sub	sp, #8
 80162ca:	ed8d 0b00 	vstr	d0, [sp]
 80162ce:	9a01      	ldr	r2, [sp, #4]
 80162d0:	4b0f      	ldr	r3, [pc, #60]	@ (8016310 <__ulp+0x48>)
 80162d2:	4013      	ands	r3, r2
 80162d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80162d8:	2b00      	cmp	r3, #0
 80162da:	dc08      	bgt.n	80162ee <__ulp+0x26>
 80162dc:	425b      	negs	r3, r3
 80162de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80162e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80162e6:	da04      	bge.n	80162f2 <__ulp+0x2a>
 80162e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80162ec:	4113      	asrs	r3, r2
 80162ee:	2200      	movs	r2, #0
 80162f0:	e008      	b.n	8016304 <__ulp+0x3c>
 80162f2:	f1a2 0314 	sub.w	r3, r2, #20
 80162f6:	2b1e      	cmp	r3, #30
 80162f8:	bfda      	itte	le
 80162fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80162fe:	40da      	lsrle	r2, r3
 8016300:	2201      	movgt	r2, #1
 8016302:	2300      	movs	r3, #0
 8016304:	4619      	mov	r1, r3
 8016306:	4610      	mov	r0, r2
 8016308:	ec41 0b10 	vmov	d0, r0, r1
 801630c:	b002      	add	sp, #8
 801630e:	4770      	bx	lr
 8016310:	7ff00000 	.word	0x7ff00000

08016314 <__b2d>:
 8016314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016318:	6906      	ldr	r6, [r0, #16]
 801631a:	f100 0814 	add.w	r8, r0, #20
 801631e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016322:	1f37      	subs	r7, r6, #4
 8016324:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016328:	4610      	mov	r0, r2
 801632a:	f7ff fd53 	bl	8015dd4 <__hi0bits>
 801632e:	f1c0 0320 	rsb	r3, r0, #32
 8016332:	280a      	cmp	r0, #10
 8016334:	600b      	str	r3, [r1, #0]
 8016336:	491b      	ldr	r1, [pc, #108]	@ (80163a4 <__b2d+0x90>)
 8016338:	dc15      	bgt.n	8016366 <__b2d+0x52>
 801633a:	f1c0 0c0b 	rsb	ip, r0, #11
 801633e:	fa22 f30c 	lsr.w	r3, r2, ip
 8016342:	45b8      	cmp	r8, r7
 8016344:	ea43 0501 	orr.w	r5, r3, r1
 8016348:	bf34      	ite	cc
 801634a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801634e:	2300      	movcs	r3, #0
 8016350:	3015      	adds	r0, #21
 8016352:	fa02 f000 	lsl.w	r0, r2, r0
 8016356:	fa23 f30c 	lsr.w	r3, r3, ip
 801635a:	4303      	orrs	r3, r0
 801635c:	461c      	mov	r4, r3
 801635e:	ec45 4b10 	vmov	d0, r4, r5
 8016362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016366:	45b8      	cmp	r8, r7
 8016368:	bf3a      	itte	cc
 801636a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801636e:	f1a6 0708 	subcc.w	r7, r6, #8
 8016372:	2300      	movcs	r3, #0
 8016374:	380b      	subs	r0, #11
 8016376:	d012      	beq.n	801639e <__b2d+0x8a>
 8016378:	f1c0 0120 	rsb	r1, r0, #32
 801637c:	fa23 f401 	lsr.w	r4, r3, r1
 8016380:	4082      	lsls	r2, r0
 8016382:	4322      	orrs	r2, r4
 8016384:	4547      	cmp	r7, r8
 8016386:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801638a:	bf8c      	ite	hi
 801638c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016390:	2200      	movls	r2, #0
 8016392:	4083      	lsls	r3, r0
 8016394:	40ca      	lsrs	r2, r1
 8016396:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801639a:	4313      	orrs	r3, r2
 801639c:	e7de      	b.n	801635c <__b2d+0x48>
 801639e:	ea42 0501 	orr.w	r5, r2, r1
 80163a2:	e7db      	b.n	801635c <__b2d+0x48>
 80163a4:	3ff00000 	.word	0x3ff00000

080163a8 <__d2b>:
 80163a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163ac:	460f      	mov	r7, r1
 80163ae:	2101      	movs	r1, #1
 80163b0:	ec59 8b10 	vmov	r8, r9, d0
 80163b4:	4616      	mov	r6, r2
 80163b6:	f7ff fc1b 	bl	8015bf0 <_Balloc>
 80163ba:	4604      	mov	r4, r0
 80163bc:	b930      	cbnz	r0, 80163cc <__d2b+0x24>
 80163be:	4602      	mov	r2, r0
 80163c0:	4b23      	ldr	r3, [pc, #140]	@ (8016450 <__d2b+0xa8>)
 80163c2:	4824      	ldr	r0, [pc, #144]	@ (8016454 <__d2b+0xac>)
 80163c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80163c8:	f001 f98a 	bl	80176e0 <__assert_func>
 80163cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80163d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163d4:	b10d      	cbz	r5, 80163da <__d2b+0x32>
 80163d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80163da:	9301      	str	r3, [sp, #4]
 80163dc:	f1b8 0300 	subs.w	r3, r8, #0
 80163e0:	d023      	beq.n	801642a <__d2b+0x82>
 80163e2:	4668      	mov	r0, sp
 80163e4:	9300      	str	r3, [sp, #0]
 80163e6:	f7ff fd14 	bl	8015e12 <__lo0bits>
 80163ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80163ee:	b1d0      	cbz	r0, 8016426 <__d2b+0x7e>
 80163f0:	f1c0 0320 	rsb	r3, r0, #32
 80163f4:	fa02 f303 	lsl.w	r3, r2, r3
 80163f8:	430b      	orrs	r3, r1
 80163fa:	40c2      	lsrs	r2, r0
 80163fc:	6163      	str	r3, [r4, #20]
 80163fe:	9201      	str	r2, [sp, #4]
 8016400:	9b01      	ldr	r3, [sp, #4]
 8016402:	61a3      	str	r3, [r4, #24]
 8016404:	2b00      	cmp	r3, #0
 8016406:	bf0c      	ite	eq
 8016408:	2201      	moveq	r2, #1
 801640a:	2202      	movne	r2, #2
 801640c:	6122      	str	r2, [r4, #16]
 801640e:	b1a5      	cbz	r5, 801643a <__d2b+0x92>
 8016410:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016414:	4405      	add	r5, r0
 8016416:	603d      	str	r5, [r7, #0]
 8016418:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801641c:	6030      	str	r0, [r6, #0]
 801641e:	4620      	mov	r0, r4
 8016420:	b003      	add	sp, #12
 8016422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016426:	6161      	str	r1, [r4, #20]
 8016428:	e7ea      	b.n	8016400 <__d2b+0x58>
 801642a:	a801      	add	r0, sp, #4
 801642c:	f7ff fcf1 	bl	8015e12 <__lo0bits>
 8016430:	9b01      	ldr	r3, [sp, #4]
 8016432:	6163      	str	r3, [r4, #20]
 8016434:	3020      	adds	r0, #32
 8016436:	2201      	movs	r2, #1
 8016438:	e7e8      	b.n	801640c <__d2b+0x64>
 801643a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801643e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016442:	6038      	str	r0, [r7, #0]
 8016444:	6918      	ldr	r0, [r3, #16]
 8016446:	f7ff fcc5 	bl	8015dd4 <__hi0bits>
 801644a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801644e:	e7e5      	b.n	801641c <__d2b+0x74>
 8016450:	0801bc61 	.word	0x0801bc61
 8016454:	0801bc72 	.word	0x0801bc72

08016458 <__ratio>:
 8016458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645c:	b085      	sub	sp, #20
 801645e:	e9cd 1000 	strd	r1, r0, [sp]
 8016462:	a902      	add	r1, sp, #8
 8016464:	f7ff ff56 	bl	8016314 <__b2d>
 8016468:	9800      	ldr	r0, [sp, #0]
 801646a:	a903      	add	r1, sp, #12
 801646c:	ec55 4b10 	vmov	r4, r5, d0
 8016470:	f7ff ff50 	bl	8016314 <__b2d>
 8016474:	9b01      	ldr	r3, [sp, #4]
 8016476:	6919      	ldr	r1, [r3, #16]
 8016478:	9b00      	ldr	r3, [sp, #0]
 801647a:	691b      	ldr	r3, [r3, #16]
 801647c:	1ac9      	subs	r1, r1, r3
 801647e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016482:	1a9b      	subs	r3, r3, r2
 8016484:	ec5b ab10 	vmov	sl, fp, d0
 8016488:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801648c:	2b00      	cmp	r3, #0
 801648e:	bfce      	itee	gt
 8016490:	462a      	movgt	r2, r5
 8016492:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016496:	465a      	movle	r2, fp
 8016498:	462f      	mov	r7, r5
 801649a:	46d9      	mov	r9, fp
 801649c:	bfcc      	ite	gt
 801649e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80164a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80164a6:	464b      	mov	r3, r9
 80164a8:	4652      	mov	r2, sl
 80164aa:	4620      	mov	r0, r4
 80164ac:	4639      	mov	r1, r7
 80164ae:	f7ea f9f5 	bl	800089c <__aeabi_ddiv>
 80164b2:	ec41 0b10 	vmov	d0, r0, r1
 80164b6:	b005      	add	sp, #20
 80164b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164bc <__copybits>:
 80164bc:	3901      	subs	r1, #1
 80164be:	b570      	push	{r4, r5, r6, lr}
 80164c0:	1149      	asrs	r1, r1, #5
 80164c2:	6914      	ldr	r4, [r2, #16]
 80164c4:	3101      	adds	r1, #1
 80164c6:	f102 0314 	add.w	r3, r2, #20
 80164ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80164ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80164d2:	1f05      	subs	r5, r0, #4
 80164d4:	42a3      	cmp	r3, r4
 80164d6:	d30c      	bcc.n	80164f2 <__copybits+0x36>
 80164d8:	1aa3      	subs	r3, r4, r2
 80164da:	3b11      	subs	r3, #17
 80164dc:	f023 0303 	bic.w	r3, r3, #3
 80164e0:	3211      	adds	r2, #17
 80164e2:	42a2      	cmp	r2, r4
 80164e4:	bf88      	it	hi
 80164e6:	2300      	movhi	r3, #0
 80164e8:	4418      	add	r0, r3
 80164ea:	2300      	movs	r3, #0
 80164ec:	4288      	cmp	r0, r1
 80164ee:	d305      	bcc.n	80164fc <__copybits+0x40>
 80164f0:	bd70      	pop	{r4, r5, r6, pc}
 80164f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80164f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80164fa:	e7eb      	b.n	80164d4 <__copybits+0x18>
 80164fc:	f840 3b04 	str.w	r3, [r0], #4
 8016500:	e7f4      	b.n	80164ec <__copybits+0x30>

08016502 <__any_on>:
 8016502:	f100 0214 	add.w	r2, r0, #20
 8016506:	6900      	ldr	r0, [r0, #16]
 8016508:	114b      	asrs	r3, r1, #5
 801650a:	4298      	cmp	r0, r3
 801650c:	b510      	push	{r4, lr}
 801650e:	db11      	blt.n	8016534 <__any_on+0x32>
 8016510:	dd0a      	ble.n	8016528 <__any_on+0x26>
 8016512:	f011 011f 	ands.w	r1, r1, #31
 8016516:	d007      	beq.n	8016528 <__any_on+0x26>
 8016518:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801651c:	fa24 f001 	lsr.w	r0, r4, r1
 8016520:	fa00 f101 	lsl.w	r1, r0, r1
 8016524:	428c      	cmp	r4, r1
 8016526:	d10b      	bne.n	8016540 <__any_on+0x3e>
 8016528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801652c:	4293      	cmp	r3, r2
 801652e:	d803      	bhi.n	8016538 <__any_on+0x36>
 8016530:	2000      	movs	r0, #0
 8016532:	bd10      	pop	{r4, pc}
 8016534:	4603      	mov	r3, r0
 8016536:	e7f7      	b.n	8016528 <__any_on+0x26>
 8016538:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801653c:	2900      	cmp	r1, #0
 801653e:	d0f5      	beq.n	801652c <__any_on+0x2a>
 8016540:	2001      	movs	r0, #1
 8016542:	e7f6      	b.n	8016532 <__any_on+0x30>

08016544 <sulp>:
 8016544:	b570      	push	{r4, r5, r6, lr}
 8016546:	4604      	mov	r4, r0
 8016548:	460d      	mov	r5, r1
 801654a:	ec45 4b10 	vmov	d0, r4, r5
 801654e:	4616      	mov	r6, r2
 8016550:	f7ff feba 	bl	80162c8 <__ulp>
 8016554:	ec51 0b10 	vmov	r0, r1, d0
 8016558:	b17e      	cbz	r6, 801657a <sulp+0x36>
 801655a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801655e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016562:	2b00      	cmp	r3, #0
 8016564:	dd09      	ble.n	801657a <sulp+0x36>
 8016566:	051b      	lsls	r3, r3, #20
 8016568:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801656c:	2400      	movs	r4, #0
 801656e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016572:	4622      	mov	r2, r4
 8016574:	462b      	mov	r3, r5
 8016576:	f7ea f867 	bl	8000648 <__aeabi_dmul>
 801657a:	ec41 0b10 	vmov	d0, r0, r1
 801657e:	bd70      	pop	{r4, r5, r6, pc}

08016580 <_strtod_l>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	b09f      	sub	sp, #124	@ 0x7c
 8016586:	460c      	mov	r4, r1
 8016588:	9217      	str	r2, [sp, #92]	@ 0x5c
 801658a:	2200      	movs	r2, #0
 801658c:	921a      	str	r2, [sp, #104]	@ 0x68
 801658e:	9005      	str	r0, [sp, #20]
 8016590:	f04f 0a00 	mov.w	sl, #0
 8016594:	f04f 0b00 	mov.w	fp, #0
 8016598:	460a      	mov	r2, r1
 801659a:	9219      	str	r2, [sp, #100]	@ 0x64
 801659c:	7811      	ldrb	r1, [r2, #0]
 801659e:	292b      	cmp	r1, #43	@ 0x2b
 80165a0:	d04a      	beq.n	8016638 <_strtod_l+0xb8>
 80165a2:	d838      	bhi.n	8016616 <_strtod_l+0x96>
 80165a4:	290d      	cmp	r1, #13
 80165a6:	d832      	bhi.n	801660e <_strtod_l+0x8e>
 80165a8:	2908      	cmp	r1, #8
 80165aa:	d832      	bhi.n	8016612 <_strtod_l+0x92>
 80165ac:	2900      	cmp	r1, #0
 80165ae:	d03b      	beq.n	8016628 <_strtod_l+0xa8>
 80165b0:	2200      	movs	r2, #0
 80165b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80165b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80165b6:	782a      	ldrb	r2, [r5, #0]
 80165b8:	2a30      	cmp	r2, #48	@ 0x30
 80165ba:	f040 80b2 	bne.w	8016722 <_strtod_l+0x1a2>
 80165be:	786a      	ldrb	r2, [r5, #1]
 80165c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80165c4:	2a58      	cmp	r2, #88	@ 0x58
 80165c6:	d16e      	bne.n	80166a6 <_strtod_l+0x126>
 80165c8:	9302      	str	r3, [sp, #8]
 80165ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165cc:	9301      	str	r3, [sp, #4]
 80165ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80165d0:	9300      	str	r3, [sp, #0]
 80165d2:	4a8f      	ldr	r2, [pc, #572]	@ (8016810 <_strtod_l+0x290>)
 80165d4:	9805      	ldr	r0, [sp, #20]
 80165d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80165d8:	a919      	add	r1, sp, #100	@ 0x64
 80165da:	f001 f91b 	bl	8017814 <__gethex>
 80165de:	f010 060f 	ands.w	r6, r0, #15
 80165e2:	4604      	mov	r4, r0
 80165e4:	d005      	beq.n	80165f2 <_strtod_l+0x72>
 80165e6:	2e06      	cmp	r6, #6
 80165e8:	d128      	bne.n	801663c <_strtod_l+0xbc>
 80165ea:	3501      	adds	r5, #1
 80165ec:	2300      	movs	r3, #0
 80165ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80165f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80165f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f040 858e 	bne.w	8017116 <_strtod_l+0xb96>
 80165fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165fc:	b1cb      	cbz	r3, 8016632 <_strtod_l+0xb2>
 80165fe:	4652      	mov	r2, sl
 8016600:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016604:	ec43 2b10 	vmov	d0, r2, r3
 8016608:	b01f      	add	sp, #124	@ 0x7c
 801660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660e:	2920      	cmp	r1, #32
 8016610:	d1ce      	bne.n	80165b0 <_strtod_l+0x30>
 8016612:	3201      	adds	r2, #1
 8016614:	e7c1      	b.n	801659a <_strtod_l+0x1a>
 8016616:	292d      	cmp	r1, #45	@ 0x2d
 8016618:	d1ca      	bne.n	80165b0 <_strtod_l+0x30>
 801661a:	2101      	movs	r1, #1
 801661c:	910e      	str	r1, [sp, #56]	@ 0x38
 801661e:	1c51      	adds	r1, r2, #1
 8016620:	9119      	str	r1, [sp, #100]	@ 0x64
 8016622:	7852      	ldrb	r2, [r2, #1]
 8016624:	2a00      	cmp	r2, #0
 8016626:	d1c5      	bne.n	80165b4 <_strtod_l+0x34>
 8016628:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801662a:	9419      	str	r4, [sp, #100]	@ 0x64
 801662c:	2b00      	cmp	r3, #0
 801662e:	f040 8570 	bne.w	8017112 <_strtod_l+0xb92>
 8016632:	4652      	mov	r2, sl
 8016634:	465b      	mov	r3, fp
 8016636:	e7e5      	b.n	8016604 <_strtod_l+0x84>
 8016638:	2100      	movs	r1, #0
 801663a:	e7ef      	b.n	801661c <_strtod_l+0x9c>
 801663c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801663e:	b13a      	cbz	r2, 8016650 <_strtod_l+0xd0>
 8016640:	2135      	movs	r1, #53	@ 0x35
 8016642:	a81c      	add	r0, sp, #112	@ 0x70
 8016644:	f7ff ff3a 	bl	80164bc <__copybits>
 8016648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801664a:	9805      	ldr	r0, [sp, #20]
 801664c:	f7ff fb10 	bl	8015c70 <_Bfree>
 8016650:	3e01      	subs	r6, #1
 8016652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016654:	2e04      	cmp	r6, #4
 8016656:	d806      	bhi.n	8016666 <_strtod_l+0xe6>
 8016658:	e8df f006 	tbb	[pc, r6]
 801665c:	201d0314 	.word	0x201d0314
 8016660:	14          	.byte	0x14
 8016661:	00          	.byte	0x00
 8016662:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016666:	05e1      	lsls	r1, r4, #23
 8016668:	bf48      	it	mi
 801666a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801666e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016672:	0d1b      	lsrs	r3, r3, #20
 8016674:	051b      	lsls	r3, r3, #20
 8016676:	2b00      	cmp	r3, #0
 8016678:	d1bb      	bne.n	80165f2 <_strtod_l+0x72>
 801667a:	f7fe fb1f 	bl	8014cbc <__errno>
 801667e:	2322      	movs	r3, #34	@ 0x22
 8016680:	6003      	str	r3, [r0, #0]
 8016682:	e7b6      	b.n	80165f2 <_strtod_l+0x72>
 8016684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016688:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801668c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016690:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016694:	e7e7      	b.n	8016666 <_strtod_l+0xe6>
 8016696:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016818 <_strtod_l+0x298>
 801669a:	e7e4      	b.n	8016666 <_strtod_l+0xe6>
 801669c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80166a0:	f04f 3aff 	mov.w	sl, #4294967295
 80166a4:	e7df      	b.n	8016666 <_strtod_l+0xe6>
 80166a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166a8:	1c5a      	adds	r2, r3, #1
 80166aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80166ac:	785b      	ldrb	r3, [r3, #1]
 80166ae:	2b30      	cmp	r3, #48	@ 0x30
 80166b0:	d0f9      	beq.n	80166a6 <_strtod_l+0x126>
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d09d      	beq.n	80165f2 <_strtod_l+0x72>
 80166b6:	2301      	movs	r3, #1
 80166b8:	2700      	movs	r7, #0
 80166ba:	9308      	str	r3, [sp, #32]
 80166bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166be:	930c      	str	r3, [sp, #48]	@ 0x30
 80166c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80166c2:	46b9      	mov	r9, r7
 80166c4:	220a      	movs	r2, #10
 80166c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80166c8:	7805      	ldrb	r5, [r0, #0]
 80166ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80166ce:	b2d9      	uxtb	r1, r3
 80166d0:	2909      	cmp	r1, #9
 80166d2:	d928      	bls.n	8016726 <_strtod_l+0x1a6>
 80166d4:	494f      	ldr	r1, [pc, #316]	@ (8016814 <_strtod_l+0x294>)
 80166d6:	2201      	movs	r2, #1
 80166d8:	f000 ffd6 	bl	8017688 <strncmp>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d032      	beq.n	8016746 <_strtod_l+0x1c6>
 80166e0:	2000      	movs	r0, #0
 80166e2:	462a      	mov	r2, r5
 80166e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80166e6:	464d      	mov	r5, r9
 80166e8:	4603      	mov	r3, r0
 80166ea:	2a65      	cmp	r2, #101	@ 0x65
 80166ec:	d001      	beq.n	80166f2 <_strtod_l+0x172>
 80166ee:	2a45      	cmp	r2, #69	@ 0x45
 80166f0:	d114      	bne.n	801671c <_strtod_l+0x19c>
 80166f2:	b91d      	cbnz	r5, 80166fc <_strtod_l+0x17c>
 80166f4:	9a08      	ldr	r2, [sp, #32]
 80166f6:	4302      	orrs	r2, r0
 80166f8:	d096      	beq.n	8016628 <_strtod_l+0xa8>
 80166fa:	2500      	movs	r5, #0
 80166fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80166fe:	1c62      	adds	r2, r4, #1
 8016700:	9219      	str	r2, [sp, #100]	@ 0x64
 8016702:	7862      	ldrb	r2, [r4, #1]
 8016704:	2a2b      	cmp	r2, #43	@ 0x2b
 8016706:	d07a      	beq.n	80167fe <_strtod_l+0x27e>
 8016708:	2a2d      	cmp	r2, #45	@ 0x2d
 801670a:	d07e      	beq.n	801680a <_strtod_l+0x28a>
 801670c:	f04f 0c00 	mov.w	ip, #0
 8016710:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016714:	2909      	cmp	r1, #9
 8016716:	f240 8085 	bls.w	8016824 <_strtod_l+0x2a4>
 801671a:	9419      	str	r4, [sp, #100]	@ 0x64
 801671c:	f04f 0800 	mov.w	r8, #0
 8016720:	e0a5      	b.n	801686e <_strtod_l+0x2ee>
 8016722:	2300      	movs	r3, #0
 8016724:	e7c8      	b.n	80166b8 <_strtod_l+0x138>
 8016726:	f1b9 0f08 	cmp.w	r9, #8
 801672a:	bfd8      	it	le
 801672c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801672e:	f100 0001 	add.w	r0, r0, #1
 8016732:	bfda      	itte	le
 8016734:	fb02 3301 	mlale	r3, r2, r1, r3
 8016738:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801673a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801673e:	f109 0901 	add.w	r9, r9, #1
 8016742:	9019      	str	r0, [sp, #100]	@ 0x64
 8016744:	e7bf      	b.n	80166c6 <_strtod_l+0x146>
 8016746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016748:	1c5a      	adds	r2, r3, #1
 801674a:	9219      	str	r2, [sp, #100]	@ 0x64
 801674c:	785a      	ldrb	r2, [r3, #1]
 801674e:	f1b9 0f00 	cmp.w	r9, #0
 8016752:	d03b      	beq.n	80167cc <_strtod_l+0x24c>
 8016754:	900a      	str	r0, [sp, #40]	@ 0x28
 8016756:	464d      	mov	r5, r9
 8016758:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801675c:	2b09      	cmp	r3, #9
 801675e:	d912      	bls.n	8016786 <_strtod_l+0x206>
 8016760:	2301      	movs	r3, #1
 8016762:	e7c2      	b.n	80166ea <_strtod_l+0x16a>
 8016764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016766:	1c5a      	adds	r2, r3, #1
 8016768:	9219      	str	r2, [sp, #100]	@ 0x64
 801676a:	785a      	ldrb	r2, [r3, #1]
 801676c:	3001      	adds	r0, #1
 801676e:	2a30      	cmp	r2, #48	@ 0x30
 8016770:	d0f8      	beq.n	8016764 <_strtod_l+0x1e4>
 8016772:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016776:	2b08      	cmp	r3, #8
 8016778:	f200 84d2 	bhi.w	8017120 <_strtod_l+0xba0>
 801677c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801677e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016780:	2000      	movs	r0, #0
 8016782:	930c      	str	r3, [sp, #48]	@ 0x30
 8016784:	4605      	mov	r5, r0
 8016786:	3a30      	subs	r2, #48	@ 0x30
 8016788:	f100 0301 	add.w	r3, r0, #1
 801678c:	d018      	beq.n	80167c0 <_strtod_l+0x240>
 801678e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016790:	4419      	add	r1, r3
 8016792:	910a      	str	r1, [sp, #40]	@ 0x28
 8016794:	462e      	mov	r6, r5
 8016796:	f04f 0e0a 	mov.w	lr, #10
 801679a:	1c71      	adds	r1, r6, #1
 801679c:	eba1 0c05 	sub.w	ip, r1, r5
 80167a0:	4563      	cmp	r3, ip
 80167a2:	dc15      	bgt.n	80167d0 <_strtod_l+0x250>
 80167a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80167a8:	182b      	adds	r3, r5, r0
 80167aa:	2b08      	cmp	r3, #8
 80167ac:	f105 0501 	add.w	r5, r5, #1
 80167b0:	4405      	add	r5, r0
 80167b2:	dc1a      	bgt.n	80167ea <_strtod_l+0x26a>
 80167b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80167b6:	230a      	movs	r3, #10
 80167b8:	fb03 2301 	mla	r3, r3, r1, r2
 80167bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80167be:	2300      	movs	r3, #0
 80167c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80167c2:	1c51      	adds	r1, r2, #1
 80167c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80167c6:	7852      	ldrb	r2, [r2, #1]
 80167c8:	4618      	mov	r0, r3
 80167ca:	e7c5      	b.n	8016758 <_strtod_l+0x1d8>
 80167cc:	4648      	mov	r0, r9
 80167ce:	e7ce      	b.n	801676e <_strtod_l+0x1ee>
 80167d0:	2e08      	cmp	r6, #8
 80167d2:	dc05      	bgt.n	80167e0 <_strtod_l+0x260>
 80167d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80167d6:	fb0e f606 	mul.w	r6, lr, r6
 80167da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80167dc:	460e      	mov	r6, r1
 80167de:	e7dc      	b.n	801679a <_strtod_l+0x21a>
 80167e0:	2910      	cmp	r1, #16
 80167e2:	bfd8      	it	le
 80167e4:	fb0e f707 	mulle.w	r7, lr, r7
 80167e8:	e7f8      	b.n	80167dc <_strtod_l+0x25c>
 80167ea:	2b0f      	cmp	r3, #15
 80167ec:	bfdc      	itt	le
 80167ee:	230a      	movle	r3, #10
 80167f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80167f4:	e7e3      	b.n	80167be <_strtod_l+0x23e>
 80167f6:	2300      	movs	r3, #0
 80167f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80167fa:	2301      	movs	r3, #1
 80167fc:	e77a      	b.n	80166f4 <_strtod_l+0x174>
 80167fe:	f04f 0c00 	mov.w	ip, #0
 8016802:	1ca2      	adds	r2, r4, #2
 8016804:	9219      	str	r2, [sp, #100]	@ 0x64
 8016806:	78a2      	ldrb	r2, [r4, #2]
 8016808:	e782      	b.n	8016710 <_strtod_l+0x190>
 801680a:	f04f 0c01 	mov.w	ip, #1
 801680e:	e7f8      	b.n	8016802 <_strtod_l+0x282>
 8016810:	0801be94 	.word	0x0801be94
 8016814:	0801bccb 	.word	0x0801bccb
 8016818:	7ff00000 	.word	0x7ff00000
 801681c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801681e:	1c51      	adds	r1, r2, #1
 8016820:	9119      	str	r1, [sp, #100]	@ 0x64
 8016822:	7852      	ldrb	r2, [r2, #1]
 8016824:	2a30      	cmp	r2, #48	@ 0x30
 8016826:	d0f9      	beq.n	801681c <_strtod_l+0x29c>
 8016828:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801682c:	2908      	cmp	r1, #8
 801682e:	f63f af75 	bhi.w	801671c <_strtod_l+0x19c>
 8016832:	3a30      	subs	r2, #48	@ 0x30
 8016834:	9209      	str	r2, [sp, #36]	@ 0x24
 8016836:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016838:	920f      	str	r2, [sp, #60]	@ 0x3c
 801683a:	f04f 080a 	mov.w	r8, #10
 801683e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016840:	1c56      	adds	r6, r2, #1
 8016842:	9619      	str	r6, [sp, #100]	@ 0x64
 8016844:	7852      	ldrb	r2, [r2, #1]
 8016846:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801684a:	f1be 0f09 	cmp.w	lr, #9
 801684e:	d939      	bls.n	80168c4 <_strtod_l+0x344>
 8016850:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016852:	1a76      	subs	r6, r6, r1
 8016854:	2e08      	cmp	r6, #8
 8016856:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801685a:	dc03      	bgt.n	8016864 <_strtod_l+0x2e4>
 801685c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801685e:	4588      	cmp	r8, r1
 8016860:	bfa8      	it	ge
 8016862:	4688      	movge	r8, r1
 8016864:	f1bc 0f00 	cmp.w	ip, #0
 8016868:	d001      	beq.n	801686e <_strtod_l+0x2ee>
 801686a:	f1c8 0800 	rsb	r8, r8, #0
 801686e:	2d00      	cmp	r5, #0
 8016870:	d14e      	bne.n	8016910 <_strtod_l+0x390>
 8016872:	9908      	ldr	r1, [sp, #32]
 8016874:	4308      	orrs	r0, r1
 8016876:	f47f aebc 	bne.w	80165f2 <_strtod_l+0x72>
 801687a:	2b00      	cmp	r3, #0
 801687c:	f47f aed4 	bne.w	8016628 <_strtod_l+0xa8>
 8016880:	2a69      	cmp	r2, #105	@ 0x69
 8016882:	d028      	beq.n	80168d6 <_strtod_l+0x356>
 8016884:	dc25      	bgt.n	80168d2 <_strtod_l+0x352>
 8016886:	2a49      	cmp	r2, #73	@ 0x49
 8016888:	d025      	beq.n	80168d6 <_strtod_l+0x356>
 801688a:	2a4e      	cmp	r2, #78	@ 0x4e
 801688c:	f47f aecc 	bne.w	8016628 <_strtod_l+0xa8>
 8016890:	499a      	ldr	r1, [pc, #616]	@ (8016afc <_strtod_l+0x57c>)
 8016892:	a819      	add	r0, sp, #100	@ 0x64
 8016894:	f001 f9e0 	bl	8017c58 <__match>
 8016898:	2800      	cmp	r0, #0
 801689a:	f43f aec5 	beq.w	8016628 <_strtod_l+0xa8>
 801689e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	2b28      	cmp	r3, #40	@ 0x28
 80168a4:	d12e      	bne.n	8016904 <_strtod_l+0x384>
 80168a6:	4996      	ldr	r1, [pc, #600]	@ (8016b00 <_strtod_l+0x580>)
 80168a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80168aa:	a819      	add	r0, sp, #100	@ 0x64
 80168ac:	f001 f9e8 	bl	8017c80 <__hexnan>
 80168b0:	2805      	cmp	r0, #5
 80168b2:	d127      	bne.n	8016904 <_strtod_l+0x384>
 80168b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80168b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80168ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80168be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80168c2:	e696      	b.n	80165f2 <_strtod_l+0x72>
 80168c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80168c6:	fb08 2101 	mla	r1, r8, r1, r2
 80168ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80168ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80168d0:	e7b5      	b.n	801683e <_strtod_l+0x2be>
 80168d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80168d4:	e7da      	b.n	801688c <_strtod_l+0x30c>
 80168d6:	498b      	ldr	r1, [pc, #556]	@ (8016b04 <_strtod_l+0x584>)
 80168d8:	a819      	add	r0, sp, #100	@ 0x64
 80168da:	f001 f9bd 	bl	8017c58 <__match>
 80168de:	2800      	cmp	r0, #0
 80168e0:	f43f aea2 	beq.w	8016628 <_strtod_l+0xa8>
 80168e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168e6:	4988      	ldr	r1, [pc, #544]	@ (8016b08 <_strtod_l+0x588>)
 80168e8:	3b01      	subs	r3, #1
 80168ea:	a819      	add	r0, sp, #100	@ 0x64
 80168ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80168ee:	f001 f9b3 	bl	8017c58 <__match>
 80168f2:	b910      	cbnz	r0, 80168fa <_strtod_l+0x37a>
 80168f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168f6:	3301      	adds	r3, #1
 80168f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80168fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016b18 <_strtod_l+0x598>
 80168fe:	f04f 0a00 	mov.w	sl, #0
 8016902:	e676      	b.n	80165f2 <_strtod_l+0x72>
 8016904:	4881      	ldr	r0, [pc, #516]	@ (8016b0c <_strtod_l+0x58c>)
 8016906:	f000 fee3 	bl	80176d0 <nan>
 801690a:	ec5b ab10 	vmov	sl, fp, d0
 801690e:	e670      	b.n	80165f2 <_strtod_l+0x72>
 8016910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016912:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016914:	eba8 0303 	sub.w	r3, r8, r3
 8016918:	f1b9 0f00 	cmp.w	r9, #0
 801691c:	bf08      	it	eq
 801691e:	46a9      	moveq	r9, r5
 8016920:	2d10      	cmp	r5, #16
 8016922:	9309      	str	r3, [sp, #36]	@ 0x24
 8016924:	462c      	mov	r4, r5
 8016926:	bfa8      	it	ge
 8016928:	2410      	movge	r4, #16
 801692a:	f7e9 fe13 	bl	8000554 <__aeabi_ui2d>
 801692e:	2d09      	cmp	r5, #9
 8016930:	4682      	mov	sl, r0
 8016932:	468b      	mov	fp, r1
 8016934:	dc13      	bgt.n	801695e <_strtod_l+0x3de>
 8016936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016938:	2b00      	cmp	r3, #0
 801693a:	f43f ae5a 	beq.w	80165f2 <_strtod_l+0x72>
 801693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016940:	dd78      	ble.n	8016a34 <_strtod_l+0x4b4>
 8016942:	2b16      	cmp	r3, #22
 8016944:	dc5f      	bgt.n	8016a06 <_strtod_l+0x486>
 8016946:	4972      	ldr	r1, [pc, #456]	@ (8016b10 <_strtod_l+0x590>)
 8016948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801694c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016950:	4652      	mov	r2, sl
 8016952:	465b      	mov	r3, fp
 8016954:	f7e9 fe78 	bl	8000648 <__aeabi_dmul>
 8016958:	4682      	mov	sl, r0
 801695a:	468b      	mov	fp, r1
 801695c:	e649      	b.n	80165f2 <_strtod_l+0x72>
 801695e:	4b6c      	ldr	r3, [pc, #432]	@ (8016b10 <_strtod_l+0x590>)
 8016960:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016964:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016968:	f7e9 fe6e 	bl	8000648 <__aeabi_dmul>
 801696c:	4682      	mov	sl, r0
 801696e:	4638      	mov	r0, r7
 8016970:	468b      	mov	fp, r1
 8016972:	f7e9 fdef 	bl	8000554 <__aeabi_ui2d>
 8016976:	4602      	mov	r2, r0
 8016978:	460b      	mov	r3, r1
 801697a:	4650      	mov	r0, sl
 801697c:	4659      	mov	r1, fp
 801697e:	f7e9 fcad 	bl	80002dc <__adddf3>
 8016982:	2d0f      	cmp	r5, #15
 8016984:	4682      	mov	sl, r0
 8016986:	468b      	mov	fp, r1
 8016988:	ddd5      	ble.n	8016936 <_strtod_l+0x3b6>
 801698a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801698c:	1b2c      	subs	r4, r5, r4
 801698e:	441c      	add	r4, r3
 8016990:	2c00      	cmp	r4, #0
 8016992:	f340 8093 	ble.w	8016abc <_strtod_l+0x53c>
 8016996:	f014 030f 	ands.w	r3, r4, #15
 801699a:	d00a      	beq.n	80169b2 <_strtod_l+0x432>
 801699c:	495c      	ldr	r1, [pc, #368]	@ (8016b10 <_strtod_l+0x590>)
 801699e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80169a2:	4652      	mov	r2, sl
 80169a4:	465b      	mov	r3, fp
 80169a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169aa:	f7e9 fe4d 	bl	8000648 <__aeabi_dmul>
 80169ae:	4682      	mov	sl, r0
 80169b0:	468b      	mov	fp, r1
 80169b2:	f034 040f 	bics.w	r4, r4, #15
 80169b6:	d073      	beq.n	8016aa0 <_strtod_l+0x520>
 80169b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80169bc:	dd49      	ble.n	8016a52 <_strtod_l+0x4d2>
 80169be:	2400      	movs	r4, #0
 80169c0:	46a0      	mov	r8, r4
 80169c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80169c4:	46a1      	mov	r9, r4
 80169c6:	9a05      	ldr	r2, [sp, #20]
 80169c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016b18 <_strtod_l+0x598>
 80169cc:	2322      	movs	r3, #34	@ 0x22
 80169ce:	6013      	str	r3, [r2, #0]
 80169d0:	f04f 0a00 	mov.w	sl, #0
 80169d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	f43f ae0b 	beq.w	80165f2 <_strtod_l+0x72>
 80169dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80169de:	9805      	ldr	r0, [sp, #20]
 80169e0:	f7ff f946 	bl	8015c70 <_Bfree>
 80169e4:	9805      	ldr	r0, [sp, #20]
 80169e6:	4649      	mov	r1, r9
 80169e8:	f7ff f942 	bl	8015c70 <_Bfree>
 80169ec:	9805      	ldr	r0, [sp, #20]
 80169ee:	4641      	mov	r1, r8
 80169f0:	f7ff f93e 	bl	8015c70 <_Bfree>
 80169f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80169f6:	9805      	ldr	r0, [sp, #20]
 80169f8:	f7ff f93a 	bl	8015c70 <_Bfree>
 80169fc:	9805      	ldr	r0, [sp, #20]
 80169fe:	4621      	mov	r1, r4
 8016a00:	f7ff f936 	bl	8015c70 <_Bfree>
 8016a04:	e5f5      	b.n	80165f2 <_strtod_l+0x72>
 8016a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	dbbc      	blt.n	801698a <_strtod_l+0x40a>
 8016a10:	4c3f      	ldr	r4, [pc, #252]	@ (8016b10 <_strtod_l+0x590>)
 8016a12:	f1c5 050f 	rsb	r5, r5, #15
 8016a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016a1a:	4652      	mov	r2, sl
 8016a1c:	465b      	mov	r3, fp
 8016a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a22:	f7e9 fe11 	bl	8000648 <__aeabi_dmul>
 8016a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a28:	1b5d      	subs	r5, r3, r5
 8016a2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016a32:	e78f      	b.n	8016954 <_strtod_l+0x3d4>
 8016a34:	3316      	adds	r3, #22
 8016a36:	dba8      	blt.n	801698a <_strtod_l+0x40a>
 8016a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a3a:	eba3 0808 	sub.w	r8, r3, r8
 8016a3e:	4b34      	ldr	r3, [pc, #208]	@ (8016b10 <_strtod_l+0x590>)
 8016a40:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016a44:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016a48:	4650      	mov	r0, sl
 8016a4a:	4659      	mov	r1, fp
 8016a4c:	f7e9 ff26 	bl	800089c <__aeabi_ddiv>
 8016a50:	e782      	b.n	8016958 <_strtod_l+0x3d8>
 8016a52:	2300      	movs	r3, #0
 8016a54:	4f2f      	ldr	r7, [pc, #188]	@ (8016b14 <_strtod_l+0x594>)
 8016a56:	1124      	asrs	r4, r4, #4
 8016a58:	4650      	mov	r0, sl
 8016a5a:	4659      	mov	r1, fp
 8016a5c:	461e      	mov	r6, r3
 8016a5e:	2c01      	cmp	r4, #1
 8016a60:	dc21      	bgt.n	8016aa6 <_strtod_l+0x526>
 8016a62:	b10b      	cbz	r3, 8016a68 <_strtod_l+0x4e8>
 8016a64:	4682      	mov	sl, r0
 8016a66:	468b      	mov	fp, r1
 8016a68:	492a      	ldr	r1, [pc, #168]	@ (8016b14 <_strtod_l+0x594>)
 8016a6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016a6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016a72:	4652      	mov	r2, sl
 8016a74:	465b      	mov	r3, fp
 8016a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a7a:	f7e9 fde5 	bl	8000648 <__aeabi_dmul>
 8016a7e:	4b26      	ldr	r3, [pc, #152]	@ (8016b18 <_strtod_l+0x598>)
 8016a80:	460a      	mov	r2, r1
 8016a82:	400b      	ands	r3, r1
 8016a84:	4925      	ldr	r1, [pc, #148]	@ (8016b1c <_strtod_l+0x59c>)
 8016a86:	428b      	cmp	r3, r1
 8016a88:	4682      	mov	sl, r0
 8016a8a:	d898      	bhi.n	80169be <_strtod_l+0x43e>
 8016a8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016a90:	428b      	cmp	r3, r1
 8016a92:	bf86      	itte	hi
 8016a94:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016b20 <_strtod_l+0x5a0>
 8016a98:	f04f 3aff 	movhi.w	sl, #4294967295
 8016a9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	9308      	str	r3, [sp, #32]
 8016aa4:	e076      	b.n	8016b94 <_strtod_l+0x614>
 8016aa6:	07e2      	lsls	r2, r4, #31
 8016aa8:	d504      	bpl.n	8016ab4 <_strtod_l+0x534>
 8016aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016aae:	f7e9 fdcb 	bl	8000648 <__aeabi_dmul>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	3601      	adds	r6, #1
 8016ab6:	1064      	asrs	r4, r4, #1
 8016ab8:	3708      	adds	r7, #8
 8016aba:	e7d0      	b.n	8016a5e <_strtod_l+0x4de>
 8016abc:	d0f0      	beq.n	8016aa0 <_strtod_l+0x520>
 8016abe:	4264      	negs	r4, r4
 8016ac0:	f014 020f 	ands.w	r2, r4, #15
 8016ac4:	d00a      	beq.n	8016adc <_strtod_l+0x55c>
 8016ac6:	4b12      	ldr	r3, [pc, #72]	@ (8016b10 <_strtod_l+0x590>)
 8016ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016acc:	4650      	mov	r0, sl
 8016ace:	4659      	mov	r1, fp
 8016ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad4:	f7e9 fee2 	bl	800089c <__aeabi_ddiv>
 8016ad8:	4682      	mov	sl, r0
 8016ada:	468b      	mov	fp, r1
 8016adc:	1124      	asrs	r4, r4, #4
 8016ade:	d0df      	beq.n	8016aa0 <_strtod_l+0x520>
 8016ae0:	2c1f      	cmp	r4, #31
 8016ae2:	dd1f      	ble.n	8016b24 <_strtod_l+0x5a4>
 8016ae4:	2400      	movs	r4, #0
 8016ae6:	46a0      	mov	r8, r4
 8016ae8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016aea:	46a1      	mov	r9, r4
 8016aec:	9a05      	ldr	r2, [sp, #20]
 8016aee:	2322      	movs	r3, #34	@ 0x22
 8016af0:	f04f 0a00 	mov.w	sl, #0
 8016af4:	f04f 0b00 	mov.w	fp, #0
 8016af8:	6013      	str	r3, [r2, #0]
 8016afa:	e76b      	b.n	80169d4 <_strtod_l+0x454>
 8016afc:	0801bbb9 	.word	0x0801bbb9
 8016b00:	0801be80 	.word	0x0801be80
 8016b04:	0801bbb1 	.word	0x0801bbb1
 8016b08:	0801bbe8 	.word	0x0801bbe8
 8016b0c:	0801bd21 	.word	0x0801bd21
 8016b10:	0801bdb8 	.word	0x0801bdb8
 8016b14:	0801bd90 	.word	0x0801bd90
 8016b18:	7ff00000 	.word	0x7ff00000
 8016b1c:	7ca00000 	.word	0x7ca00000
 8016b20:	7fefffff 	.word	0x7fefffff
 8016b24:	f014 0310 	ands.w	r3, r4, #16
 8016b28:	bf18      	it	ne
 8016b2a:	236a      	movne	r3, #106	@ 0x6a
 8016b2c:	4ea9      	ldr	r6, [pc, #676]	@ (8016dd4 <_strtod_l+0x854>)
 8016b2e:	9308      	str	r3, [sp, #32]
 8016b30:	4650      	mov	r0, sl
 8016b32:	4659      	mov	r1, fp
 8016b34:	2300      	movs	r3, #0
 8016b36:	07e7      	lsls	r7, r4, #31
 8016b38:	d504      	bpl.n	8016b44 <_strtod_l+0x5c4>
 8016b3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016b3e:	f7e9 fd83 	bl	8000648 <__aeabi_dmul>
 8016b42:	2301      	movs	r3, #1
 8016b44:	1064      	asrs	r4, r4, #1
 8016b46:	f106 0608 	add.w	r6, r6, #8
 8016b4a:	d1f4      	bne.n	8016b36 <_strtod_l+0x5b6>
 8016b4c:	b10b      	cbz	r3, 8016b52 <_strtod_l+0x5d2>
 8016b4e:	4682      	mov	sl, r0
 8016b50:	468b      	mov	fp, r1
 8016b52:	9b08      	ldr	r3, [sp, #32]
 8016b54:	b1b3      	cbz	r3, 8016b84 <_strtod_l+0x604>
 8016b56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016b5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	4659      	mov	r1, fp
 8016b62:	dd0f      	ble.n	8016b84 <_strtod_l+0x604>
 8016b64:	2b1f      	cmp	r3, #31
 8016b66:	dd56      	ble.n	8016c16 <_strtod_l+0x696>
 8016b68:	2b34      	cmp	r3, #52	@ 0x34
 8016b6a:	bfde      	ittt	le
 8016b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8016b70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016b74:	4093      	lslle	r3, r2
 8016b76:	f04f 0a00 	mov.w	sl, #0
 8016b7a:	bfcc      	ite	gt
 8016b7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016b80:	ea03 0b01 	andle.w	fp, r3, r1
 8016b84:	2200      	movs	r2, #0
 8016b86:	2300      	movs	r3, #0
 8016b88:	4650      	mov	r0, sl
 8016b8a:	4659      	mov	r1, fp
 8016b8c:	f7e9 ffc4 	bl	8000b18 <__aeabi_dcmpeq>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d1a7      	bne.n	8016ae4 <_strtod_l+0x564>
 8016b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016b9a:	9805      	ldr	r0, [sp, #20]
 8016b9c:	462b      	mov	r3, r5
 8016b9e:	464a      	mov	r2, r9
 8016ba0:	f7ff f8ce 	bl	8015d40 <__s2b>
 8016ba4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f43f af09 	beq.w	80169be <_strtod_l+0x43e>
 8016bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bb0:	2a00      	cmp	r2, #0
 8016bb2:	eba3 0308 	sub.w	r3, r3, r8
 8016bb6:	bfa8      	it	ge
 8016bb8:	2300      	movge	r3, #0
 8016bba:	9312      	str	r3, [sp, #72]	@ 0x48
 8016bbc:	2400      	movs	r4, #0
 8016bbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016bc2:	9316      	str	r3, [sp, #88]	@ 0x58
 8016bc4:	46a0      	mov	r8, r4
 8016bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bc8:	9805      	ldr	r0, [sp, #20]
 8016bca:	6859      	ldr	r1, [r3, #4]
 8016bcc:	f7ff f810 	bl	8015bf0 <_Balloc>
 8016bd0:	4681      	mov	r9, r0
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	f43f aef7 	beq.w	80169c6 <_strtod_l+0x446>
 8016bd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bda:	691a      	ldr	r2, [r3, #16]
 8016bdc:	3202      	adds	r2, #2
 8016bde:	f103 010c 	add.w	r1, r3, #12
 8016be2:	0092      	lsls	r2, r2, #2
 8016be4:	300c      	adds	r0, #12
 8016be6:	f7fe f896 	bl	8014d16 <memcpy>
 8016bea:	ec4b ab10 	vmov	d0, sl, fp
 8016bee:	9805      	ldr	r0, [sp, #20]
 8016bf0:	aa1c      	add	r2, sp, #112	@ 0x70
 8016bf2:	a91b      	add	r1, sp, #108	@ 0x6c
 8016bf4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016bf8:	f7ff fbd6 	bl	80163a8 <__d2b>
 8016bfc:	901a      	str	r0, [sp, #104]	@ 0x68
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	f43f aee1 	beq.w	80169c6 <_strtod_l+0x446>
 8016c04:	9805      	ldr	r0, [sp, #20]
 8016c06:	2101      	movs	r1, #1
 8016c08:	f7ff f930 	bl	8015e6c <__i2b>
 8016c0c:	4680      	mov	r8, r0
 8016c0e:	b948      	cbnz	r0, 8016c24 <_strtod_l+0x6a4>
 8016c10:	f04f 0800 	mov.w	r8, #0
 8016c14:	e6d7      	b.n	80169c6 <_strtod_l+0x446>
 8016c16:	f04f 32ff 	mov.w	r2, #4294967295
 8016c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c1e:	ea03 0a0a 	and.w	sl, r3, sl
 8016c22:	e7af      	b.n	8016b84 <_strtod_l+0x604>
 8016c24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016c26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016c28:	2d00      	cmp	r5, #0
 8016c2a:	bfab      	itete	ge
 8016c2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016c2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016c30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016c32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016c34:	bfac      	ite	ge
 8016c36:	18ef      	addge	r7, r5, r3
 8016c38:	1b5e      	sublt	r6, r3, r5
 8016c3a:	9b08      	ldr	r3, [sp, #32]
 8016c3c:	1aed      	subs	r5, r5, r3
 8016c3e:	4415      	add	r5, r2
 8016c40:	4b65      	ldr	r3, [pc, #404]	@ (8016dd8 <_strtod_l+0x858>)
 8016c42:	3d01      	subs	r5, #1
 8016c44:	429d      	cmp	r5, r3
 8016c46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016c4a:	da50      	bge.n	8016cee <_strtod_l+0x76e>
 8016c4c:	1b5b      	subs	r3, r3, r5
 8016c4e:	2b1f      	cmp	r3, #31
 8016c50:	eba2 0203 	sub.w	r2, r2, r3
 8016c54:	f04f 0101 	mov.w	r1, #1
 8016c58:	dc3d      	bgt.n	8016cd6 <_strtod_l+0x756>
 8016c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8016c5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016c60:	2300      	movs	r3, #0
 8016c62:	9310      	str	r3, [sp, #64]	@ 0x40
 8016c64:	18bd      	adds	r5, r7, r2
 8016c66:	9b08      	ldr	r3, [sp, #32]
 8016c68:	42af      	cmp	r7, r5
 8016c6a:	4416      	add	r6, r2
 8016c6c:	441e      	add	r6, r3
 8016c6e:	463b      	mov	r3, r7
 8016c70:	bfa8      	it	ge
 8016c72:	462b      	movge	r3, r5
 8016c74:	42b3      	cmp	r3, r6
 8016c76:	bfa8      	it	ge
 8016c78:	4633      	movge	r3, r6
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	bfc2      	ittt	gt
 8016c7e:	1aed      	subgt	r5, r5, r3
 8016c80:	1af6      	subgt	r6, r6, r3
 8016c82:	1aff      	subgt	r7, r7, r3
 8016c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	dd16      	ble.n	8016cb8 <_strtod_l+0x738>
 8016c8a:	4641      	mov	r1, r8
 8016c8c:	9805      	ldr	r0, [sp, #20]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	f7ff f9a4 	bl	8015fdc <__pow5mult>
 8016c94:	4680      	mov	r8, r0
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d0ba      	beq.n	8016c10 <_strtod_l+0x690>
 8016c9a:	4601      	mov	r1, r0
 8016c9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016c9e:	9805      	ldr	r0, [sp, #20]
 8016ca0:	f7ff f8fa 	bl	8015e98 <__multiply>
 8016ca4:	900a      	str	r0, [sp, #40]	@ 0x28
 8016ca6:	2800      	cmp	r0, #0
 8016ca8:	f43f ae8d 	beq.w	80169c6 <_strtod_l+0x446>
 8016cac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cae:	9805      	ldr	r0, [sp, #20]
 8016cb0:	f7fe ffde 	bl	8015c70 <_Bfree>
 8016cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016cb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cb8:	2d00      	cmp	r5, #0
 8016cba:	dc1d      	bgt.n	8016cf8 <_strtod_l+0x778>
 8016cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	dd23      	ble.n	8016d0a <_strtod_l+0x78a>
 8016cc2:	4649      	mov	r1, r9
 8016cc4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016cc6:	9805      	ldr	r0, [sp, #20]
 8016cc8:	f7ff f988 	bl	8015fdc <__pow5mult>
 8016ccc:	4681      	mov	r9, r0
 8016cce:	b9e0      	cbnz	r0, 8016d0a <_strtod_l+0x78a>
 8016cd0:	f04f 0900 	mov.w	r9, #0
 8016cd4:	e677      	b.n	80169c6 <_strtod_l+0x446>
 8016cd6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016cda:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016cde:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016ce2:	35e2      	adds	r5, #226	@ 0xe2
 8016ce4:	fa01 f305 	lsl.w	r3, r1, r5
 8016ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016cea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016cec:	e7ba      	b.n	8016c64 <_strtod_l+0x6e4>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016cf6:	e7b5      	b.n	8016c64 <_strtod_l+0x6e4>
 8016cf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cfa:	9805      	ldr	r0, [sp, #20]
 8016cfc:	462a      	mov	r2, r5
 8016cfe:	f7ff f9c7 	bl	8016090 <__lshift>
 8016d02:	901a      	str	r0, [sp, #104]	@ 0x68
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d1d9      	bne.n	8016cbc <_strtod_l+0x73c>
 8016d08:	e65d      	b.n	80169c6 <_strtod_l+0x446>
 8016d0a:	2e00      	cmp	r6, #0
 8016d0c:	dd07      	ble.n	8016d1e <_strtod_l+0x79e>
 8016d0e:	4649      	mov	r1, r9
 8016d10:	9805      	ldr	r0, [sp, #20]
 8016d12:	4632      	mov	r2, r6
 8016d14:	f7ff f9bc 	bl	8016090 <__lshift>
 8016d18:	4681      	mov	r9, r0
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	d0d8      	beq.n	8016cd0 <_strtod_l+0x750>
 8016d1e:	2f00      	cmp	r7, #0
 8016d20:	dd08      	ble.n	8016d34 <_strtod_l+0x7b4>
 8016d22:	4641      	mov	r1, r8
 8016d24:	9805      	ldr	r0, [sp, #20]
 8016d26:	463a      	mov	r2, r7
 8016d28:	f7ff f9b2 	bl	8016090 <__lshift>
 8016d2c:	4680      	mov	r8, r0
 8016d2e:	2800      	cmp	r0, #0
 8016d30:	f43f ae49 	beq.w	80169c6 <_strtod_l+0x446>
 8016d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d36:	9805      	ldr	r0, [sp, #20]
 8016d38:	464a      	mov	r2, r9
 8016d3a:	f7ff fa31 	bl	80161a0 <__mdiff>
 8016d3e:	4604      	mov	r4, r0
 8016d40:	2800      	cmp	r0, #0
 8016d42:	f43f ae40 	beq.w	80169c6 <_strtod_l+0x446>
 8016d46:	68c3      	ldr	r3, [r0, #12]
 8016d48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	60c3      	str	r3, [r0, #12]
 8016d4e:	4641      	mov	r1, r8
 8016d50:	f7ff fa0a 	bl	8016168 <__mcmp>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	da45      	bge.n	8016de4 <_strtod_l+0x864>
 8016d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d5a:	ea53 030a 	orrs.w	r3, r3, sl
 8016d5e:	d16b      	bne.n	8016e38 <_strtod_l+0x8b8>
 8016d60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d167      	bne.n	8016e38 <_strtod_l+0x8b8>
 8016d68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d6c:	0d1b      	lsrs	r3, r3, #20
 8016d6e:	051b      	lsls	r3, r3, #20
 8016d70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016d74:	d960      	bls.n	8016e38 <_strtod_l+0x8b8>
 8016d76:	6963      	ldr	r3, [r4, #20]
 8016d78:	b913      	cbnz	r3, 8016d80 <_strtod_l+0x800>
 8016d7a:	6923      	ldr	r3, [r4, #16]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	dd5b      	ble.n	8016e38 <_strtod_l+0x8b8>
 8016d80:	4621      	mov	r1, r4
 8016d82:	2201      	movs	r2, #1
 8016d84:	9805      	ldr	r0, [sp, #20]
 8016d86:	f7ff f983 	bl	8016090 <__lshift>
 8016d8a:	4641      	mov	r1, r8
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	f7ff f9eb 	bl	8016168 <__mcmp>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	dd50      	ble.n	8016e38 <_strtod_l+0x8b8>
 8016d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d9a:	9a08      	ldr	r2, [sp, #32]
 8016d9c:	0d1b      	lsrs	r3, r3, #20
 8016d9e:	051b      	lsls	r3, r3, #20
 8016da0:	2a00      	cmp	r2, #0
 8016da2:	d06a      	beq.n	8016e7a <_strtod_l+0x8fa>
 8016da4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016da8:	d867      	bhi.n	8016e7a <_strtod_l+0x8fa>
 8016daa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016dae:	f67f ae9d 	bls.w	8016aec <_strtod_l+0x56c>
 8016db2:	4b0a      	ldr	r3, [pc, #40]	@ (8016ddc <_strtod_l+0x85c>)
 8016db4:	4650      	mov	r0, sl
 8016db6:	4659      	mov	r1, fp
 8016db8:	2200      	movs	r2, #0
 8016dba:	f7e9 fc45 	bl	8000648 <__aeabi_dmul>
 8016dbe:	4b08      	ldr	r3, [pc, #32]	@ (8016de0 <_strtod_l+0x860>)
 8016dc0:	400b      	ands	r3, r1
 8016dc2:	4682      	mov	sl, r0
 8016dc4:	468b      	mov	fp, r1
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	f47f ae08 	bne.w	80169dc <_strtod_l+0x45c>
 8016dcc:	9a05      	ldr	r2, [sp, #20]
 8016dce:	2322      	movs	r3, #34	@ 0x22
 8016dd0:	6013      	str	r3, [r2, #0]
 8016dd2:	e603      	b.n	80169dc <_strtod_l+0x45c>
 8016dd4:	0801bea8 	.word	0x0801bea8
 8016dd8:	fffffc02 	.word	0xfffffc02
 8016ddc:	39500000 	.word	0x39500000
 8016de0:	7ff00000 	.word	0x7ff00000
 8016de4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016de8:	d165      	bne.n	8016eb6 <_strtod_l+0x936>
 8016dea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016df0:	b35a      	cbz	r2, 8016e4a <_strtod_l+0x8ca>
 8016df2:	4a9f      	ldr	r2, [pc, #636]	@ (8017070 <_strtod_l+0xaf0>)
 8016df4:	4293      	cmp	r3, r2
 8016df6:	d12b      	bne.n	8016e50 <_strtod_l+0x8d0>
 8016df8:	9b08      	ldr	r3, [sp, #32]
 8016dfa:	4651      	mov	r1, sl
 8016dfc:	b303      	cbz	r3, 8016e40 <_strtod_l+0x8c0>
 8016dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8017074 <_strtod_l+0xaf4>)
 8016e00:	465a      	mov	r2, fp
 8016e02:	4013      	ands	r3, r2
 8016e04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016e08:	f04f 32ff 	mov.w	r2, #4294967295
 8016e0c:	d81b      	bhi.n	8016e46 <_strtod_l+0x8c6>
 8016e0e:	0d1b      	lsrs	r3, r3, #20
 8016e10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016e14:	fa02 f303 	lsl.w	r3, r2, r3
 8016e18:	4299      	cmp	r1, r3
 8016e1a:	d119      	bne.n	8016e50 <_strtod_l+0x8d0>
 8016e1c:	4b96      	ldr	r3, [pc, #600]	@ (8017078 <_strtod_l+0xaf8>)
 8016e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e20:	429a      	cmp	r2, r3
 8016e22:	d102      	bne.n	8016e2a <_strtod_l+0x8aa>
 8016e24:	3101      	adds	r1, #1
 8016e26:	f43f adce 	beq.w	80169c6 <_strtod_l+0x446>
 8016e2a:	4b92      	ldr	r3, [pc, #584]	@ (8017074 <_strtod_l+0xaf4>)
 8016e2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e2e:	401a      	ands	r2, r3
 8016e30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016e34:	f04f 0a00 	mov.w	sl, #0
 8016e38:	9b08      	ldr	r3, [sp, #32]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1b9      	bne.n	8016db2 <_strtod_l+0x832>
 8016e3e:	e5cd      	b.n	80169dc <_strtod_l+0x45c>
 8016e40:	f04f 33ff 	mov.w	r3, #4294967295
 8016e44:	e7e8      	b.n	8016e18 <_strtod_l+0x898>
 8016e46:	4613      	mov	r3, r2
 8016e48:	e7e6      	b.n	8016e18 <_strtod_l+0x898>
 8016e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8016e4e:	d0a2      	beq.n	8016d96 <_strtod_l+0x816>
 8016e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e52:	b1db      	cbz	r3, 8016e8c <_strtod_l+0x90c>
 8016e54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e56:	4213      	tst	r3, r2
 8016e58:	d0ee      	beq.n	8016e38 <_strtod_l+0x8b8>
 8016e5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e5c:	9a08      	ldr	r2, [sp, #32]
 8016e5e:	4650      	mov	r0, sl
 8016e60:	4659      	mov	r1, fp
 8016e62:	b1bb      	cbz	r3, 8016e94 <_strtod_l+0x914>
 8016e64:	f7ff fb6e 	bl	8016544 <sulp>
 8016e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016e6c:	ec53 2b10 	vmov	r2, r3, d0
 8016e70:	f7e9 fa34 	bl	80002dc <__adddf3>
 8016e74:	4682      	mov	sl, r0
 8016e76:	468b      	mov	fp, r1
 8016e78:	e7de      	b.n	8016e38 <_strtod_l+0x8b8>
 8016e7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016e7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016e82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016e86:	f04f 3aff 	mov.w	sl, #4294967295
 8016e8a:	e7d5      	b.n	8016e38 <_strtod_l+0x8b8>
 8016e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016e8e:	ea13 0f0a 	tst.w	r3, sl
 8016e92:	e7e1      	b.n	8016e58 <_strtod_l+0x8d8>
 8016e94:	f7ff fb56 	bl	8016544 <sulp>
 8016e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016e9c:	ec53 2b10 	vmov	r2, r3, d0
 8016ea0:	f7e9 fa1a 	bl	80002d8 <__aeabi_dsub>
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	4682      	mov	sl, r0
 8016eaa:	468b      	mov	fp, r1
 8016eac:	f7e9 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	d0c1      	beq.n	8016e38 <_strtod_l+0x8b8>
 8016eb4:	e61a      	b.n	8016aec <_strtod_l+0x56c>
 8016eb6:	4641      	mov	r1, r8
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f7ff facd 	bl	8016458 <__ratio>
 8016ebe:	ec57 6b10 	vmov	r6, r7, d0
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016ec8:	4630      	mov	r0, r6
 8016eca:	4639      	mov	r1, r7
 8016ecc:	f7e9 fe38 	bl	8000b40 <__aeabi_dcmple>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	d06f      	beq.n	8016fb4 <_strtod_l+0xa34>
 8016ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d17a      	bne.n	8016fd0 <_strtod_l+0xa50>
 8016eda:	f1ba 0f00 	cmp.w	sl, #0
 8016ede:	d158      	bne.n	8016f92 <_strtod_l+0xa12>
 8016ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d15a      	bne.n	8016fa0 <_strtod_l+0xa20>
 8016eea:	4b64      	ldr	r3, [pc, #400]	@ (801707c <_strtod_l+0xafc>)
 8016eec:	2200      	movs	r2, #0
 8016eee:	4630      	mov	r0, r6
 8016ef0:	4639      	mov	r1, r7
 8016ef2:	f7e9 fe1b 	bl	8000b2c <__aeabi_dcmplt>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	d159      	bne.n	8016fae <_strtod_l+0xa2e>
 8016efa:	4630      	mov	r0, r6
 8016efc:	4639      	mov	r1, r7
 8016efe:	4b60      	ldr	r3, [pc, #384]	@ (8017080 <_strtod_l+0xb00>)
 8016f00:	2200      	movs	r2, #0
 8016f02:	f7e9 fba1 	bl	8000648 <__aeabi_dmul>
 8016f06:	4606      	mov	r6, r0
 8016f08:	460f      	mov	r7, r1
 8016f0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016f0e:	9606      	str	r6, [sp, #24]
 8016f10:	9307      	str	r3, [sp, #28]
 8016f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f16:	4d57      	ldr	r5, [pc, #348]	@ (8017074 <_strtod_l+0xaf4>)
 8016f18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f1e:	401d      	ands	r5, r3
 8016f20:	4b58      	ldr	r3, [pc, #352]	@ (8017084 <_strtod_l+0xb04>)
 8016f22:	429d      	cmp	r5, r3
 8016f24:	f040 80b2 	bne.w	801708c <_strtod_l+0xb0c>
 8016f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016f2e:	ec4b ab10 	vmov	d0, sl, fp
 8016f32:	f7ff f9c9 	bl	80162c8 <__ulp>
 8016f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f3a:	ec51 0b10 	vmov	r0, r1, d0
 8016f3e:	f7e9 fb83 	bl	8000648 <__aeabi_dmul>
 8016f42:	4652      	mov	r2, sl
 8016f44:	465b      	mov	r3, fp
 8016f46:	f7e9 f9c9 	bl	80002dc <__adddf3>
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	4949      	ldr	r1, [pc, #292]	@ (8017074 <_strtod_l+0xaf4>)
 8016f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8017088 <_strtod_l+0xb08>)
 8016f50:	4019      	ands	r1, r3
 8016f52:	4291      	cmp	r1, r2
 8016f54:	4682      	mov	sl, r0
 8016f56:	d942      	bls.n	8016fde <_strtod_l+0xa5e>
 8016f58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016f5a:	4b47      	ldr	r3, [pc, #284]	@ (8017078 <_strtod_l+0xaf8>)
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d103      	bne.n	8016f68 <_strtod_l+0x9e8>
 8016f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f62:	3301      	adds	r3, #1
 8016f64:	f43f ad2f 	beq.w	80169c6 <_strtod_l+0x446>
 8016f68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017078 <_strtod_l+0xaf8>
 8016f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8016f70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f72:	9805      	ldr	r0, [sp, #20]
 8016f74:	f7fe fe7c 	bl	8015c70 <_Bfree>
 8016f78:	9805      	ldr	r0, [sp, #20]
 8016f7a:	4649      	mov	r1, r9
 8016f7c:	f7fe fe78 	bl	8015c70 <_Bfree>
 8016f80:	9805      	ldr	r0, [sp, #20]
 8016f82:	4641      	mov	r1, r8
 8016f84:	f7fe fe74 	bl	8015c70 <_Bfree>
 8016f88:	9805      	ldr	r0, [sp, #20]
 8016f8a:	4621      	mov	r1, r4
 8016f8c:	f7fe fe70 	bl	8015c70 <_Bfree>
 8016f90:	e619      	b.n	8016bc6 <_strtod_l+0x646>
 8016f92:	f1ba 0f01 	cmp.w	sl, #1
 8016f96:	d103      	bne.n	8016fa0 <_strtod_l+0xa20>
 8016f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	f43f ada6 	beq.w	8016aec <_strtod_l+0x56c>
 8016fa0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017050 <_strtod_l+0xad0>
 8016fa4:	4f35      	ldr	r7, [pc, #212]	@ (801707c <_strtod_l+0xafc>)
 8016fa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016faa:	2600      	movs	r6, #0
 8016fac:	e7b1      	b.n	8016f12 <_strtod_l+0x992>
 8016fae:	4f34      	ldr	r7, [pc, #208]	@ (8017080 <_strtod_l+0xb00>)
 8016fb0:	2600      	movs	r6, #0
 8016fb2:	e7aa      	b.n	8016f0a <_strtod_l+0x98a>
 8016fb4:	4b32      	ldr	r3, [pc, #200]	@ (8017080 <_strtod_l+0xb00>)
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	4639      	mov	r1, r7
 8016fba:	2200      	movs	r2, #0
 8016fbc:	f7e9 fb44 	bl	8000648 <__aeabi_dmul>
 8016fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fc2:	4606      	mov	r6, r0
 8016fc4:	460f      	mov	r7, r1
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d09f      	beq.n	8016f0a <_strtod_l+0x98a>
 8016fca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016fce:	e7a0      	b.n	8016f12 <_strtod_l+0x992>
 8016fd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017058 <_strtod_l+0xad8>
 8016fd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016fd8:	ec57 6b17 	vmov	r6, r7, d7
 8016fdc:	e799      	b.n	8016f12 <_strtod_l+0x992>
 8016fde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016fe2:	9b08      	ldr	r3, [sp, #32]
 8016fe4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1c1      	bne.n	8016f70 <_strtod_l+0x9f0>
 8016fec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ff0:	0d1b      	lsrs	r3, r3, #20
 8016ff2:	051b      	lsls	r3, r3, #20
 8016ff4:	429d      	cmp	r5, r3
 8016ff6:	d1bb      	bne.n	8016f70 <_strtod_l+0x9f0>
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	4639      	mov	r1, r7
 8016ffc:	f7e9 fe84 	bl	8000d08 <__aeabi_d2lz>
 8017000:	f7e9 faf4 	bl	80005ec <__aeabi_l2d>
 8017004:	4602      	mov	r2, r0
 8017006:	460b      	mov	r3, r1
 8017008:	4630      	mov	r0, r6
 801700a:	4639      	mov	r1, r7
 801700c:	f7e9 f964 	bl	80002d8 <__aeabi_dsub>
 8017010:	460b      	mov	r3, r1
 8017012:	4602      	mov	r2, r0
 8017014:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017018:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801701c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801701e:	ea46 060a 	orr.w	r6, r6, sl
 8017022:	431e      	orrs	r6, r3
 8017024:	d06f      	beq.n	8017106 <_strtod_l+0xb86>
 8017026:	a30e      	add	r3, pc, #56	@ (adr r3, 8017060 <_strtod_l+0xae0>)
 8017028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801702c:	f7e9 fd7e 	bl	8000b2c <__aeabi_dcmplt>
 8017030:	2800      	cmp	r0, #0
 8017032:	f47f acd3 	bne.w	80169dc <_strtod_l+0x45c>
 8017036:	a30c      	add	r3, pc, #48	@ (adr r3, 8017068 <_strtod_l+0xae8>)
 8017038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017040:	f7e9 fd92 	bl	8000b68 <__aeabi_dcmpgt>
 8017044:	2800      	cmp	r0, #0
 8017046:	d093      	beq.n	8016f70 <_strtod_l+0x9f0>
 8017048:	e4c8      	b.n	80169dc <_strtod_l+0x45c>
 801704a:	bf00      	nop
 801704c:	f3af 8000 	nop.w
 8017050:	00000000 	.word	0x00000000
 8017054:	bff00000 	.word	0xbff00000
 8017058:	00000000 	.word	0x00000000
 801705c:	3ff00000 	.word	0x3ff00000
 8017060:	94a03595 	.word	0x94a03595
 8017064:	3fdfffff 	.word	0x3fdfffff
 8017068:	35afe535 	.word	0x35afe535
 801706c:	3fe00000 	.word	0x3fe00000
 8017070:	000fffff 	.word	0x000fffff
 8017074:	7ff00000 	.word	0x7ff00000
 8017078:	7fefffff 	.word	0x7fefffff
 801707c:	3ff00000 	.word	0x3ff00000
 8017080:	3fe00000 	.word	0x3fe00000
 8017084:	7fe00000 	.word	0x7fe00000
 8017088:	7c9fffff 	.word	0x7c9fffff
 801708c:	9b08      	ldr	r3, [sp, #32]
 801708e:	b323      	cbz	r3, 80170da <_strtod_l+0xb5a>
 8017090:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017094:	d821      	bhi.n	80170da <_strtod_l+0xb5a>
 8017096:	a328      	add	r3, pc, #160	@ (adr r3, 8017138 <_strtod_l+0xbb8>)
 8017098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801709c:	4630      	mov	r0, r6
 801709e:	4639      	mov	r1, r7
 80170a0:	f7e9 fd4e 	bl	8000b40 <__aeabi_dcmple>
 80170a4:	b1a0      	cbz	r0, 80170d0 <_strtod_l+0xb50>
 80170a6:	4639      	mov	r1, r7
 80170a8:	4630      	mov	r0, r6
 80170aa:	f7e9 fda5 	bl	8000bf8 <__aeabi_d2uiz>
 80170ae:	2801      	cmp	r0, #1
 80170b0:	bf38      	it	cc
 80170b2:	2001      	movcc	r0, #1
 80170b4:	f7e9 fa4e 	bl	8000554 <__aeabi_ui2d>
 80170b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170ba:	4606      	mov	r6, r0
 80170bc:	460f      	mov	r7, r1
 80170be:	b9fb      	cbnz	r3, 8017100 <_strtod_l+0xb80>
 80170c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80170c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80170c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80170c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80170cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80170d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80170d6:	1b5b      	subs	r3, r3, r5
 80170d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80170da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80170de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80170e2:	f7ff f8f1 	bl	80162c8 <__ulp>
 80170e6:	4650      	mov	r0, sl
 80170e8:	ec53 2b10 	vmov	r2, r3, d0
 80170ec:	4659      	mov	r1, fp
 80170ee:	f7e9 faab 	bl	8000648 <__aeabi_dmul>
 80170f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80170f6:	f7e9 f8f1 	bl	80002dc <__adddf3>
 80170fa:	4682      	mov	sl, r0
 80170fc:	468b      	mov	fp, r1
 80170fe:	e770      	b.n	8016fe2 <_strtod_l+0xa62>
 8017100:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8017104:	e7e0      	b.n	80170c8 <_strtod_l+0xb48>
 8017106:	a30e      	add	r3, pc, #56	@ (adr r3, 8017140 <_strtod_l+0xbc0>)
 8017108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801710c:	f7e9 fd0e 	bl	8000b2c <__aeabi_dcmplt>
 8017110:	e798      	b.n	8017044 <_strtod_l+0xac4>
 8017112:	2300      	movs	r3, #0
 8017114:	930e      	str	r3, [sp, #56]	@ 0x38
 8017116:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801711a:	6013      	str	r3, [r2, #0]
 801711c:	f7ff ba6d 	b.w	80165fa <_strtod_l+0x7a>
 8017120:	2a65      	cmp	r2, #101	@ 0x65
 8017122:	f43f ab68 	beq.w	80167f6 <_strtod_l+0x276>
 8017126:	2a45      	cmp	r2, #69	@ 0x45
 8017128:	f43f ab65 	beq.w	80167f6 <_strtod_l+0x276>
 801712c:	2301      	movs	r3, #1
 801712e:	f7ff bba0 	b.w	8016872 <_strtod_l+0x2f2>
 8017132:	bf00      	nop
 8017134:	f3af 8000 	nop.w
 8017138:	ffc00000 	.word	0xffc00000
 801713c:	41dfffff 	.word	0x41dfffff
 8017140:	94a03595 	.word	0x94a03595
 8017144:	3fcfffff 	.word	0x3fcfffff

08017148 <_strtod_r>:
 8017148:	4b01      	ldr	r3, [pc, #4]	@ (8017150 <_strtod_r+0x8>)
 801714a:	f7ff ba19 	b.w	8016580 <_strtod_l>
 801714e:	bf00      	nop
 8017150:	200000a4 	.word	0x200000a4

08017154 <_strtol_l.isra.0>:
 8017154:	2b24      	cmp	r3, #36	@ 0x24
 8017156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801715a:	4686      	mov	lr, r0
 801715c:	4690      	mov	r8, r2
 801715e:	d801      	bhi.n	8017164 <_strtol_l.isra.0+0x10>
 8017160:	2b01      	cmp	r3, #1
 8017162:	d106      	bne.n	8017172 <_strtol_l.isra.0+0x1e>
 8017164:	f7fd fdaa 	bl	8014cbc <__errno>
 8017168:	2316      	movs	r3, #22
 801716a:	6003      	str	r3, [r0, #0]
 801716c:	2000      	movs	r0, #0
 801716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017172:	4834      	ldr	r0, [pc, #208]	@ (8017244 <_strtol_l.isra.0+0xf0>)
 8017174:	460d      	mov	r5, r1
 8017176:	462a      	mov	r2, r5
 8017178:	f815 4b01 	ldrb.w	r4, [r5], #1
 801717c:	5d06      	ldrb	r6, [r0, r4]
 801717e:	f016 0608 	ands.w	r6, r6, #8
 8017182:	d1f8      	bne.n	8017176 <_strtol_l.isra.0+0x22>
 8017184:	2c2d      	cmp	r4, #45	@ 0x2d
 8017186:	d110      	bne.n	80171aa <_strtol_l.isra.0+0x56>
 8017188:	782c      	ldrb	r4, [r5, #0]
 801718a:	2601      	movs	r6, #1
 801718c:	1c95      	adds	r5, r2, #2
 801718e:	f033 0210 	bics.w	r2, r3, #16
 8017192:	d115      	bne.n	80171c0 <_strtol_l.isra.0+0x6c>
 8017194:	2c30      	cmp	r4, #48	@ 0x30
 8017196:	d10d      	bne.n	80171b4 <_strtol_l.isra.0+0x60>
 8017198:	782a      	ldrb	r2, [r5, #0]
 801719a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801719e:	2a58      	cmp	r2, #88	@ 0x58
 80171a0:	d108      	bne.n	80171b4 <_strtol_l.isra.0+0x60>
 80171a2:	786c      	ldrb	r4, [r5, #1]
 80171a4:	3502      	adds	r5, #2
 80171a6:	2310      	movs	r3, #16
 80171a8:	e00a      	b.n	80171c0 <_strtol_l.isra.0+0x6c>
 80171aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80171ac:	bf04      	itt	eq
 80171ae:	782c      	ldrbeq	r4, [r5, #0]
 80171b0:	1c95      	addeq	r5, r2, #2
 80171b2:	e7ec      	b.n	801718e <_strtol_l.isra.0+0x3a>
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1f6      	bne.n	80171a6 <_strtol_l.isra.0+0x52>
 80171b8:	2c30      	cmp	r4, #48	@ 0x30
 80171ba:	bf14      	ite	ne
 80171bc:	230a      	movne	r3, #10
 80171be:	2308      	moveq	r3, #8
 80171c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80171c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80171c8:	2200      	movs	r2, #0
 80171ca:	fbbc f9f3 	udiv	r9, ip, r3
 80171ce:	4610      	mov	r0, r2
 80171d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80171d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80171d8:	2f09      	cmp	r7, #9
 80171da:	d80f      	bhi.n	80171fc <_strtol_l.isra.0+0xa8>
 80171dc:	463c      	mov	r4, r7
 80171de:	42a3      	cmp	r3, r4
 80171e0:	dd1b      	ble.n	801721a <_strtol_l.isra.0+0xc6>
 80171e2:	1c57      	adds	r7, r2, #1
 80171e4:	d007      	beq.n	80171f6 <_strtol_l.isra.0+0xa2>
 80171e6:	4581      	cmp	r9, r0
 80171e8:	d314      	bcc.n	8017214 <_strtol_l.isra.0+0xc0>
 80171ea:	d101      	bne.n	80171f0 <_strtol_l.isra.0+0x9c>
 80171ec:	45a2      	cmp	sl, r4
 80171ee:	db11      	blt.n	8017214 <_strtol_l.isra.0+0xc0>
 80171f0:	fb00 4003 	mla	r0, r0, r3, r4
 80171f4:	2201      	movs	r2, #1
 80171f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171fa:	e7eb      	b.n	80171d4 <_strtol_l.isra.0+0x80>
 80171fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017200:	2f19      	cmp	r7, #25
 8017202:	d801      	bhi.n	8017208 <_strtol_l.isra.0+0xb4>
 8017204:	3c37      	subs	r4, #55	@ 0x37
 8017206:	e7ea      	b.n	80171de <_strtol_l.isra.0+0x8a>
 8017208:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801720c:	2f19      	cmp	r7, #25
 801720e:	d804      	bhi.n	801721a <_strtol_l.isra.0+0xc6>
 8017210:	3c57      	subs	r4, #87	@ 0x57
 8017212:	e7e4      	b.n	80171de <_strtol_l.isra.0+0x8a>
 8017214:	f04f 32ff 	mov.w	r2, #4294967295
 8017218:	e7ed      	b.n	80171f6 <_strtol_l.isra.0+0xa2>
 801721a:	1c53      	adds	r3, r2, #1
 801721c:	d108      	bne.n	8017230 <_strtol_l.isra.0+0xdc>
 801721e:	2322      	movs	r3, #34	@ 0x22
 8017220:	f8ce 3000 	str.w	r3, [lr]
 8017224:	4660      	mov	r0, ip
 8017226:	f1b8 0f00 	cmp.w	r8, #0
 801722a:	d0a0      	beq.n	801716e <_strtol_l.isra.0+0x1a>
 801722c:	1e69      	subs	r1, r5, #1
 801722e:	e006      	b.n	801723e <_strtol_l.isra.0+0xea>
 8017230:	b106      	cbz	r6, 8017234 <_strtol_l.isra.0+0xe0>
 8017232:	4240      	negs	r0, r0
 8017234:	f1b8 0f00 	cmp.w	r8, #0
 8017238:	d099      	beq.n	801716e <_strtol_l.isra.0+0x1a>
 801723a:	2a00      	cmp	r2, #0
 801723c:	d1f6      	bne.n	801722c <_strtol_l.isra.0+0xd8>
 801723e:	f8c8 1000 	str.w	r1, [r8]
 8017242:	e794      	b.n	801716e <_strtol_l.isra.0+0x1a>
 8017244:	0801bed1 	.word	0x0801bed1

08017248 <_strtol_r>:
 8017248:	f7ff bf84 	b.w	8017154 <_strtol_l.isra.0>

0801724c <__ssputs_r>:
 801724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017250:	688e      	ldr	r6, [r1, #8]
 8017252:	461f      	mov	r7, r3
 8017254:	42be      	cmp	r6, r7
 8017256:	680b      	ldr	r3, [r1, #0]
 8017258:	4682      	mov	sl, r0
 801725a:	460c      	mov	r4, r1
 801725c:	4690      	mov	r8, r2
 801725e:	d82d      	bhi.n	80172bc <__ssputs_r+0x70>
 8017260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017268:	d026      	beq.n	80172b8 <__ssputs_r+0x6c>
 801726a:	6965      	ldr	r5, [r4, #20]
 801726c:	6909      	ldr	r1, [r1, #16]
 801726e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017272:	eba3 0901 	sub.w	r9, r3, r1
 8017276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801727a:	1c7b      	adds	r3, r7, #1
 801727c:	444b      	add	r3, r9
 801727e:	106d      	asrs	r5, r5, #1
 8017280:	429d      	cmp	r5, r3
 8017282:	bf38      	it	cc
 8017284:	461d      	movcc	r5, r3
 8017286:	0553      	lsls	r3, r2, #21
 8017288:	d527      	bpl.n	80172da <__ssputs_r+0x8e>
 801728a:	4629      	mov	r1, r5
 801728c:	f7fe fc24 	bl	8015ad8 <_malloc_r>
 8017290:	4606      	mov	r6, r0
 8017292:	b360      	cbz	r0, 80172ee <__ssputs_r+0xa2>
 8017294:	6921      	ldr	r1, [r4, #16]
 8017296:	464a      	mov	r2, r9
 8017298:	f7fd fd3d 	bl	8014d16 <memcpy>
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80172a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80172a6:	81a3      	strh	r3, [r4, #12]
 80172a8:	6126      	str	r6, [r4, #16]
 80172aa:	6165      	str	r5, [r4, #20]
 80172ac:	444e      	add	r6, r9
 80172ae:	eba5 0509 	sub.w	r5, r5, r9
 80172b2:	6026      	str	r6, [r4, #0]
 80172b4:	60a5      	str	r5, [r4, #8]
 80172b6:	463e      	mov	r6, r7
 80172b8:	42be      	cmp	r6, r7
 80172ba:	d900      	bls.n	80172be <__ssputs_r+0x72>
 80172bc:	463e      	mov	r6, r7
 80172be:	6820      	ldr	r0, [r4, #0]
 80172c0:	4632      	mov	r2, r6
 80172c2:	4641      	mov	r1, r8
 80172c4:	f000 f9c6 	bl	8017654 <memmove>
 80172c8:	68a3      	ldr	r3, [r4, #8]
 80172ca:	1b9b      	subs	r3, r3, r6
 80172cc:	60a3      	str	r3, [r4, #8]
 80172ce:	6823      	ldr	r3, [r4, #0]
 80172d0:	4433      	add	r3, r6
 80172d2:	6023      	str	r3, [r4, #0]
 80172d4:	2000      	movs	r0, #0
 80172d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172da:	462a      	mov	r2, r5
 80172dc:	f000 fd7d 	bl	8017dda <_realloc_r>
 80172e0:	4606      	mov	r6, r0
 80172e2:	2800      	cmp	r0, #0
 80172e4:	d1e0      	bne.n	80172a8 <__ssputs_r+0x5c>
 80172e6:	6921      	ldr	r1, [r4, #16]
 80172e8:	4650      	mov	r0, sl
 80172ea:	f7fe fb81 	bl	80159f0 <_free_r>
 80172ee:	230c      	movs	r3, #12
 80172f0:	f8ca 3000 	str.w	r3, [sl]
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017300:	e7e9      	b.n	80172d6 <__ssputs_r+0x8a>
	...

08017304 <_svfiprintf_r>:
 8017304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017308:	4698      	mov	r8, r3
 801730a:	898b      	ldrh	r3, [r1, #12]
 801730c:	061b      	lsls	r3, r3, #24
 801730e:	b09d      	sub	sp, #116	@ 0x74
 8017310:	4607      	mov	r7, r0
 8017312:	460d      	mov	r5, r1
 8017314:	4614      	mov	r4, r2
 8017316:	d510      	bpl.n	801733a <_svfiprintf_r+0x36>
 8017318:	690b      	ldr	r3, [r1, #16]
 801731a:	b973      	cbnz	r3, 801733a <_svfiprintf_r+0x36>
 801731c:	2140      	movs	r1, #64	@ 0x40
 801731e:	f7fe fbdb 	bl	8015ad8 <_malloc_r>
 8017322:	6028      	str	r0, [r5, #0]
 8017324:	6128      	str	r0, [r5, #16]
 8017326:	b930      	cbnz	r0, 8017336 <_svfiprintf_r+0x32>
 8017328:	230c      	movs	r3, #12
 801732a:	603b      	str	r3, [r7, #0]
 801732c:	f04f 30ff 	mov.w	r0, #4294967295
 8017330:	b01d      	add	sp, #116	@ 0x74
 8017332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017336:	2340      	movs	r3, #64	@ 0x40
 8017338:	616b      	str	r3, [r5, #20]
 801733a:	2300      	movs	r3, #0
 801733c:	9309      	str	r3, [sp, #36]	@ 0x24
 801733e:	2320      	movs	r3, #32
 8017340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017344:	f8cd 800c 	str.w	r8, [sp, #12]
 8017348:	2330      	movs	r3, #48	@ 0x30
 801734a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80174e8 <_svfiprintf_r+0x1e4>
 801734e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017352:	f04f 0901 	mov.w	r9, #1
 8017356:	4623      	mov	r3, r4
 8017358:	469a      	mov	sl, r3
 801735a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801735e:	b10a      	cbz	r2, 8017364 <_svfiprintf_r+0x60>
 8017360:	2a25      	cmp	r2, #37	@ 0x25
 8017362:	d1f9      	bne.n	8017358 <_svfiprintf_r+0x54>
 8017364:	ebba 0b04 	subs.w	fp, sl, r4
 8017368:	d00b      	beq.n	8017382 <_svfiprintf_r+0x7e>
 801736a:	465b      	mov	r3, fp
 801736c:	4622      	mov	r2, r4
 801736e:	4629      	mov	r1, r5
 8017370:	4638      	mov	r0, r7
 8017372:	f7ff ff6b 	bl	801724c <__ssputs_r>
 8017376:	3001      	adds	r0, #1
 8017378:	f000 80a7 	beq.w	80174ca <_svfiprintf_r+0x1c6>
 801737c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801737e:	445a      	add	r2, fp
 8017380:	9209      	str	r2, [sp, #36]	@ 0x24
 8017382:	f89a 3000 	ldrb.w	r3, [sl]
 8017386:	2b00      	cmp	r3, #0
 8017388:	f000 809f 	beq.w	80174ca <_svfiprintf_r+0x1c6>
 801738c:	2300      	movs	r3, #0
 801738e:	f04f 32ff 	mov.w	r2, #4294967295
 8017392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017396:	f10a 0a01 	add.w	sl, sl, #1
 801739a:	9304      	str	r3, [sp, #16]
 801739c:	9307      	str	r3, [sp, #28]
 801739e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80173a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80173a4:	4654      	mov	r4, sl
 80173a6:	2205      	movs	r2, #5
 80173a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173ac:	484e      	ldr	r0, [pc, #312]	@ (80174e8 <_svfiprintf_r+0x1e4>)
 80173ae:	f7e8 ff37 	bl	8000220 <memchr>
 80173b2:	9a04      	ldr	r2, [sp, #16]
 80173b4:	b9d8      	cbnz	r0, 80173ee <_svfiprintf_r+0xea>
 80173b6:	06d0      	lsls	r0, r2, #27
 80173b8:	bf44      	itt	mi
 80173ba:	2320      	movmi	r3, #32
 80173bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173c0:	0711      	lsls	r1, r2, #28
 80173c2:	bf44      	itt	mi
 80173c4:	232b      	movmi	r3, #43	@ 0x2b
 80173c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173ca:	f89a 3000 	ldrb.w	r3, [sl]
 80173ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80173d0:	d015      	beq.n	80173fe <_svfiprintf_r+0xfa>
 80173d2:	9a07      	ldr	r2, [sp, #28]
 80173d4:	4654      	mov	r4, sl
 80173d6:	2000      	movs	r0, #0
 80173d8:	f04f 0c0a 	mov.w	ip, #10
 80173dc:	4621      	mov	r1, r4
 80173de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173e2:	3b30      	subs	r3, #48	@ 0x30
 80173e4:	2b09      	cmp	r3, #9
 80173e6:	d94b      	bls.n	8017480 <_svfiprintf_r+0x17c>
 80173e8:	b1b0      	cbz	r0, 8017418 <_svfiprintf_r+0x114>
 80173ea:	9207      	str	r2, [sp, #28]
 80173ec:	e014      	b.n	8017418 <_svfiprintf_r+0x114>
 80173ee:	eba0 0308 	sub.w	r3, r0, r8
 80173f2:	fa09 f303 	lsl.w	r3, r9, r3
 80173f6:	4313      	orrs	r3, r2
 80173f8:	9304      	str	r3, [sp, #16]
 80173fa:	46a2      	mov	sl, r4
 80173fc:	e7d2      	b.n	80173a4 <_svfiprintf_r+0xa0>
 80173fe:	9b03      	ldr	r3, [sp, #12]
 8017400:	1d19      	adds	r1, r3, #4
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	9103      	str	r1, [sp, #12]
 8017406:	2b00      	cmp	r3, #0
 8017408:	bfbb      	ittet	lt
 801740a:	425b      	neglt	r3, r3
 801740c:	f042 0202 	orrlt.w	r2, r2, #2
 8017410:	9307      	strge	r3, [sp, #28]
 8017412:	9307      	strlt	r3, [sp, #28]
 8017414:	bfb8      	it	lt
 8017416:	9204      	strlt	r2, [sp, #16]
 8017418:	7823      	ldrb	r3, [r4, #0]
 801741a:	2b2e      	cmp	r3, #46	@ 0x2e
 801741c:	d10a      	bne.n	8017434 <_svfiprintf_r+0x130>
 801741e:	7863      	ldrb	r3, [r4, #1]
 8017420:	2b2a      	cmp	r3, #42	@ 0x2a
 8017422:	d132      	bne.n	801748a <_svfiprintf_r+0x186>
 8017424:	9b03      	ldr	r3, [sp, #12]
 8017426:	1d1a      	adds	r2, r3, #4
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	9203      	str	r2, [sp, #12]
 801742c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017430:	3402      	adds	r4, #2
 8017432:	9305      	str	r3, [sp, #20]
 8017434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80174f8 <_svfiprintf_r+0x1f4>
 8017438:	7821      	ldrb	r1, [r4, #0]
 801743a:	2203      	movs	r2, #3
 801743c:	4650      	mov	r0, sl
 801743e:	f7e8 feef 	bl	8000220 <memchr>
 8017442:	b138      	cbz	r0, 8017454 <_svfiprintf_r+0x150>
 8017444:	9b04      	ldr	r3, [sp, #16]
 8017446:	eba0 000a 	sub.w	r0, r0, sl
 801744a:	2240      	movs	r2, #64	@ 0x40
 801744c:	4082      	lsls	r2, r0
 801744e:	4313      	orrs	r3, r2
 8017450:	3401      	adds	r4, #1
 8017452:	9304      	str	r3, [sp, #16]
 8017454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017458:	4824      	ldr	r0, [pc, #144]	@ (80174ec <_svfiprintf_r+0x1e8>)
 801745a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801745e:	2206      	movs	r2, #6
 8017460:	f7e8 fede 	bl	8000220 <memchr>
 8017464:	2800      	cmp	r0, #0
 8017466:	d036      	beq.n	80174d6 <_svfiprintf_r+0x1d2>
 8017468:	4b21      	ldr	r3, [pc, #132]	@ (80174f0 <_svfiprintf_r+0x1ec>)
 801746a:	bb1b      	cbnz	r3, 80174b4 <_svfiprintf_r+0x1b0>
 801746c:	9b03      	ldr	r3, [sp, #12]
 801746e:	3307      	adds	r3, #7
 8017470:	f023 0307 	bic.w	r3, r3, #7
 8017474:	3308      	adds	r3, #8
 8017476:	9303      	str	r3, [sp, #12]
 8017478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801747a:	4433      	add	r3, r6
 801747c:	9309      	str	r3, [sp, #36]	@ 0x24
 801747e:	e76a      	b.n	8017356 <_svfiprintf_r+0x52>
 8017480:	fb0c 3202 	mla	r2, ip, r2, r3
 8017484:	460c      	mov	r4, r1
 8017486:	2001      	movs	r0, #1
 8017488:	e7a8      	b.n	80173dc <_svfiprintf_r+0xd8>
 801748a:	2300      	movs	r3, #0
 801748c:	3401      	adds	r4, #1
 801748e:	9305      	str	r3, [sp, #20]
 8017490:	4619      	mov	r1, r3
 8017492:	f04f 0c0a 	mov.w	ip, #10
 8017496:	4620      	mov	r0, r4
 8017498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801749c:	3a30      	subs	r2, #48	@ 0x30
 801749e:	2a09      	cmp	r2, #9
 80174a0:	d903      	bls.n	80174aa <_svfiprintf_r+0x1a6>
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d0c6      	beq.n	8017434 <_svfiprintf_r+0x130>
 80174a6:	9105      	str	r1, [sp, #20]
 80174a8:	e7c4      	b.n	8017434 <_svfiprintf_r+0x130>
 80174aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80174ae:	4604      	mov	r4, r0
 80174b0:	2301      	movs	r3, #1
 80174b2:	e7f0      	b.n	8017496 <_svfiprintf_r+0x192>
 80174b4:	ab03      	add	r3, sp, #12
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	462a      	mov	r2, r5
 80174ba:	4b0e      	ldr	r3, [pc, #56]	@ (80174f4 <_svfiprintf_r+0x1f0>)
 80174bc:	a904      	add	r1, sp, #16
 80174be:	4638      	mov	r0, r7
 80174c0:	f7fc fc2a 	bl	8013d18 <_printf_float>
 80174c4:	1c42      	adds	r2, r0, #1
 80174c6:	4606      	mov	r6, r0
 80174c8:	d1d6      	bne.n	8017478 <_svfiprintf_r+0x174>
 80174ca:	89ab      	ldrh	r3, [r5, #12]
 80174cc:	065b      	lsls	r3, r3, #25
 80174ce:	f53f af2d 	bmi.w	801732c <_svfiprintf_r+0x28>
 80174d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174d4:	e72c      	b.n	8017330 <_svfiprintf_r+0x2c>
 80174d6:	ab03      	add	r3, sp, #12
 80174d8:	9300      	str	r3, [sp, #0]
 80174da:	462a      	mov	r2, r5
 80174dc:	4b05      	ldr	r3, [pc, #20]	@ (80174f4 <_svfiprintf_r+0x1f0>)
 80174de:	a904      	add	r1, sp, #16
 80174e0:	4638      	mov	r0, r7
 80174e2:	f7fc feb1 	bl	8014248 <_printf_i>
 80174e6:	e7ed      	b.n	80174c4 <_svfiprintf_r+0x1c0>
 80174e8:	0801bccd 	.word	0x0801bccd
 80174ec:	0801bcd7 	.word	0x0801bcd7
 80174f0:	08013d19 	.word	0x08013d19
 80174f4:	0801724d 	.word	0x0801724d
 80174f8:	0801bcd3 	.word	0x0801bcd3

080174fc <__sflush_r>:
 80174fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017504:	0716      	lsls	r6, r2, #28
 8017506:	4605      	mov	r5, r0
 8017508:	460c      	mov	r4, r1
 801750a:	d454      	bmi.n	80175b6 <__sflush_r+0xba>
 801750c:	684b      	ldr	r3, [r1, #4]
 801750e:	2b00      	cmp	r3, #0
 8017510:	dc02      	bgt.n	8017518 <__sflush_r+0x1c>
 8017512:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017514:	2b00      	cmp	r3, #0
 8017516:	dd48      	ble.n	80175aa <__sflush_r+0xae>
 8017518:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801751a:	2e00      	cmp	r6, #0
 801751c:	d045      	beq.n	80175aa <__sflush_r+0xae>
 801751e:	2300      	movs	r3, #0
 8017520:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017524:	682f      	ldr	r7, [r5, #0]
 8017526:	6a21      	ldr	r1, [r4, #32]
 8017528:	602b      	str	r3, [r5, #0]
 801752a:	d030      	beq.n	801758e <__sflush_r+0x92>
 801752c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801752e:	89a3      	ldrh	r3, [r4, #12]
 8017530:	0759      	lsls	r1, r3, #29
 8017532:	d505      	bpl.n	8017540 <__sflush_r+0x44>
 8017534:	6863      	ldr	r3, [r4, #4]
 8017536:	1ad2      	subs	r2, r2, r3
 8017538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801753a:	b10b      	cbz	r3, 8017540 <__sflush_r+0x44>
 801753c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801753e:	1ad2      	subs	r2, r2, r3
 8017540:	2300      	movs	r3, #0
 8017542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017544:	6a21      	ldr	r1, [r4, #32]
 8017546:	4628      	mov	r0, r5
 8017548:	47b0      	blx	r6
 801754a:	1c43      	adds	r3, r0, #1
 801754c:	89a3      	ldrh	r3, [r4, #12]
 801754e:	d106      	bne.n	801755e <__sflush_r+0x62>
 8017550:	6829      	ldr	r1, [r5, #0]
 8017552:	291d      	cmp	r1, #29
 8017554:	d82b      	bhi.n	80175ae <__sflush_r+0xb2>
 8017556:	4a2a      	ldr	r2, [pc, #168]	@ (8017600 <__sflush_r+0x104>)
 8017558:	40ca      	lsrs	r2, r1
 801755a:	07d6      	lsls	r6, r2, #31
 801755c:	d527      	bpl.n	80175ae <__sflush_r+0xb2>
 801755e:	2200      	movs	r2, #0
 8017560:	6062      	str	r2, [r4, #4]
 8017562:	04d9      	lsls	r1, r3, #19
 8017564:	6922      	ldr	r2, [r4, #16]
 8017566:	6022      	str	r2, [r4, #0]
 8017568:	d504      	bpl.n	8017574 <__sflush_r+0x78>
 801756a:	1c42      	adds	r2, r0, #1
 801756c:	d101      	bne.n	8017572 <__sflush_r+0x76>
 801756e:	682b      	ldr	r3, [r5, #0]
 8017570:	b903      	cbnz	r3, 8017574 <__sflush_r+0x78>
 8017572:	6560      	str	r0, [r4, #84]	@ 0x54
 8017574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017576:	602f      	str	r7, [r5, #0]
 8017578:	b1b9      	cbz	r1, 80175aa <__sflush_r+0xae>
 801757a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801757e:	4299      	cmp	r1, r3
 8017580:	d002      	beq.n	8017588 <__sflush_r+0x8c>
 8017582:	4628      	mov	r0, r5
 8017584:	f7fe fa34 	bl	80159f0 <_free_r>
 8017588:	2300      	movs	r3, #0
 801758a:	6363      	str	r3, [r4, #52]	@ 0x34
 801758c:	e00d      	b.n	80175aa <__sflush_r+0xae>
 801758e:	2301      	movs	r3, #1
 8017590:	4628      	mov	r0, r5
 8017592:	47b0      	blx	r6
 8017594:	4602      	mov	r2, r0
 8017596:	1c50      	adds	r0, r2, #1
 8017598:	d1c9      	bne.n	801752e <__sflush_r+0x32>
 801759a:	682b      	ldr	r3, [r5, #0]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d0c6      	beq.n	801752e <__sflush_r+0x32>
 80175a0:	2b1d      	cmp	r3, #29
 80175a2:	d001      	beq.n	80175a8 <__sflush_r+0xac>
 80175a4:	2b16      	cmp	r3, #22
 80175a6:	d11e      	bne.n	80175e6 <__sflush_r+0xea>
 80175a8:	602f      	str	r7, [r5, #0]
 80175aa:	2000      	movs	r0, #0
 80175ac:	e022      	b.n	80175f4 <__sflush_r+0xf8>
 80175ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175b2:	b21b      	sxth	r3, r3
 80175b4:	e01b      	b.n	80175ee <__sflush_r+0xf2>
 80175b6:	690f      	ldr	r7, [r1, #16]
 80175b8:	2f00      	cmp	r7, #0
 80175ba:	d0f6      	beq.n	80175aa <__sflush_r+0xae>
 80175bc:	0793      	lsls	r3, r2, #30
 80175be:	680e      	ldr	r6, [r1, #0]
 80175c0:	bf08      	it	eq
 80175c2:	694b      	ldreq	r3, [r1, #20]
 80175c4:	600f      	str	r7, [r1, #0]
 80175c6:	bf18      	it	ne
 80175c8:	2300      	movne	r3, #0
 80175ca:	eba6 0807 	sub.w	r8, r6, r7
 80175ce:	608b      	str	r3, [r1, #8]
 80175d0:	f1b8 0f00 	cmp.w	r8, #0
 80175d4:	dde9      	ble.n	80175aa <__sflush_r+0xae>
 80175d6:	6a21      	ldr	r1, [r4, #32]
 80175d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80175da:	4643      	mov	r3, r8
 80175dc:	463a      	mov	r2, r7
 80175de:	4628      	mov	r0, r5
 80175e0:	47b0      	blx	r6
 80175e2:	2800      	cmp	r0, #0
 80175e4:	dc08      	bgt.n	80175f8 <__sflush_r+0xfc>
 80175e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175ee:	81a3      	strh	r3, [r4, #12]
 80175f0:	f04f 30ff 	mov.w	r0, #4294967295
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f8:	4407      	add	r7, r0
 80175fa:	eba8 0800 	sub.w	r8, r8, r0
 80175fe:	e7e7      	b.n	80175d0 <__sflush_r+0xd4>
 8017600:	20400001 	.word	0x20400001

08017604 <_fflush_r>:
 8017604:	b538      	push	{r3, r4, r5, lr}
 8017606:	690b      	ldr	r3, [r1, #16]
 8017608:	4605      	mov	r5, r0
 801760a:	460c      	mov	r4, r1
 801760c:	b913      	cbnz	r3, 8017614 <_fflush_r+0x10>
 801760e:	2500      	movs	r5, #0
 8017610:	4628      	mov	r0, r5
 8017612:	bd38      	pop	{r3, r4, r5, pc}
 8017614:	b118      	cbz	r0, 801761e <_fflush_r+0x1a>
 8017616:	6a03      	ldr	r3, [r0, #32]
 8017618:	b90b      	cbnz	r3, 801761e <_fflush_r+0x1a>
 801761a:	f7fd f9cd 	bl	80149b8 <__sinit>
 801761e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d0f3      	beq.n	801760e <_fflush_r+0xa>
 8017626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017628:	07d0      	lsls	r0, r2, #31
 801762a:	d404      	bmi.n	8017636 <_fflush_r+0x32>
 801762c:	0599      	lsls	r1, r3, #22
 801762e:	d402      	bmi.n	8017636 <_fflush_r+0x32>
 8017630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017632:	f7fd fb6e 	bl	8014d12 <__retarget_lock_acquire_recursive>
 8017636:	4628      	mov	r0, r5
 8017638:	4621      	mov	r1, r4
 801763a:	f7ff ff5f 	bl	80174fc <__sflush_r>
 801763e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017640:	07da      	lsls	r2, r3, #31
 8017642:	4605      	mov	r5, r0
 8017644:	d4e4      	bmi.n	8017610 <_fflush_r+0xc>
 8017646:	89a3      	ldrh	r3, [r4, #12]
 8017648:	059b      	lsls	r3, r3, #22
 801764a:	d4e1      	bmi.n	8017610 <_fflush_r+0xc>
 801764c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801764e:	f7fd fb61 	bl	8014d14 <__retarget_lock_release_recursive>
 8017652:	e7dd      	b.n	8017610 <_fflush_r+0xc>

08017654 <memmove>:
 8017654:	4288      	cmp	r0, r1
 8017656:	b510      	push	{r4, lr}
 8017658:	eb01 0402 	add.w	r4, r1, r2
 801765c:	d902      	bls.n	8017664 <memmove+0x10>
 801765e:	4284      	cmp	r4, r0
 8017660:	4623      	mov	r3, r4
 8017662:	d807      	bhi.n	8017674 <memmove+0x20>
 8017664:	1e43      	subs	r3, r0, #1
 8017666:	42a1      	cmp	r1, r4
 8017668:	d008      	beq.n	801767c <memmove+0x28>
 801766a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801766e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017672:	e7f8      	b.n	8017666 <memmove+0x12>
 8017674:	4402      	add	r2, r0
 8017676:	4601      	mov	r1, r0
 8017678:	428a      	cmp	r2, r1
 801767a:	d100      	bne.n	801767e <memmove+0x2a>
 801767c:	bd10      	pop	{r4, pc}
 801767e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017686:	e7f7      	b.n	8017678 <memmove+0x24>

08017688 <strncmp>:
 8017688:	b510      	push	{r4, lr}
 801768a:	b16a      	cbz	r2, 80176a8 <strncmp+0x20>
 801768c:	3901      	subs	r1, #1
 801768e:	1884      	adds	r4, r0, r2
 8017690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017694:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017698:	429a      	cmp	r2, r3
 801769a:	d103      	bne.n	80176a4 <strncmp+0x1c>
 801769c:	42a0      	cmp	r0, r4
 801769e:	d001      	beq.n	80176a4 <strncmp+0x1c>
 80176a0:	2a00      	cmp	r2, #0
 80176a2:	d1f5      	bne.n	8017690 <strncmp+0x8>
 80176a4:	1ad0      	subs	r0, r2, r3
 80176a6:	bd10      	pop	{r4, pc}
 80176a8:	4610      	mov	r0, r2
 80176aa:	e7fc      	b.n	80176a6 <strncmp+0x1e>

080176ac <_sbrk_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d06      	ldr	r5, [pc, #24]	@ (80176c8 <_sbrk_r+0x1c>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	602b      	str	r3, [r5, #0]
 80176b8:	f7ec ffa8 	bl	800460c <_sbrk>
 80176bc:	1c43      	adds	r3, r0, #1
 80176be:	d102      	bne.n	80176c6 <_sbrk_r+0x1a>
 80176c0:	682b      	ldr	r3, [r5, #0]
 80176c2:	b103      	cbz	r3, 80176c6 <_sbrk_r+0x1a>
 80176c4:	6023      	str	r3, [r4, #0]
 80176c6:	bd38      	pop	{r3, r4, r5, pc}
 80176c8:	20004a70 	.word	0x20004a70
 80176cc:	00000000 	.word	0x00000000

080176d0 <nan>:
 80176d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80176d8 <nan+0x8>
 80176d4:	4770      	bx	lr
 80176d6:	bf00      	nop
 80176d8:	00000000 	.word	0x00000000
 80176dc:	7ff80000 	.word	0x7ff80000

080176e0 <__assert_func>:
 80176e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176e2:	4614      	mov	r4, r2
 80176e4:	461a      	mov	r2, r3
 80176e6:	4b09      	ldr	r3, [pc, #36]	@ (801770c <__assert_func+0x2c>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	4605      	mov	r5, r0
 80176ec:	68d8      	ldr	r0, [r3, #12]
 80176ee:	b14c      	cbz	r4, 8017704 <__assert_func+0x24>
 80176f0:	4b07      	ldr	r3, [pc, #28]	@ (8017710 <__assert_func+0x30>)
 80176f2:	9100      	str	r1, [sp, #0]
 80176f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80176f8:	4906      	ldr	r1, [pc, #24]	@ (8017714 <__assert_func+0x34>)
 80176fa:	462b      	mov	r3, r5
 80176fc:	f000 fba8 	bl	8017e50 <fiprintf>
 8017700:	f000 fbb8 	bl	8017e74 <abort>
 8017704:	4b04      	ldr	r3, [pc, #16]	@ (8017718 <__assert_func+0x38>)
 8017706:	461c      	mov	r4, r3
 8017708:	e7f3      	b.n	80176f2 <__assert_func+0x12>
 801770a:	bf00      	nop
 801770c:	20000054 	.word	0x20000054
 8017710:	0801bce6 	.word	0x0801bce6
 8017714:	0801bcf3 	.word	0x0801bcf3
 8017718:	0801bd21 	.word	0x0801bd21

0801771c <_calloc_r>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	fba1 5402 	umull	r5, r4, r1, r2
 8017722:	b934      	cbnz	r4, 8017732 <_calloc_r+0x16>
 8017724:	4629      	mov	r1, r5
 8017726:	f7fe f9d7 	bl	8015ad8 <_malloc_r>
 801772a:	4606      	mov	r6, r0
 801772c:	b928      	cbnz	r0, 801773a <_calloc_r+0x1e>
 801772e:	4630      	mov	r0, r6
 8017730:	bd70      	pop	{r4, r5, r6, pc}
 8017732:	220c      	movs	r2, #12
 8017734:	6002      	str	r2, [r0, #0]
 8017736:	2600      	movs	r6, #0
 8017738:	e7f9      	b.n	801772e <_calloc_r+0x12>
 801773a:	462a      	mov	r2, r5
 801773c:	4621      	mov	r1, r4
 801773e:	f7fd fa0c 	bl	8014b5a <memset>
 8017742:	e7f4      	b.n	801772e <_calloc_r+0x12>

08017744 <rshift>:
 8017744:	6903      	ldr	r3, [r0, #16]
 8017746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801774a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801774e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017752:	f100 0414 	add.w	r4, r0, #20
 8017756:	dd45      	ble.n	80177e4 <rshift+0xa0>
 8017758:	f011 011f 	ands.w	r1, r1, #31
 801775c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017760:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017764:	d10c      	bne.n	8017780 <rshift+0x3c>
 8017766:	f100 0710 	add.w	r7, r0, #16
 801776a:	4629      	mov	r1, r5
 801776c:	42b1      	cmp	r1, r6
 801776e:	d334      	bcc.n	80177da <rshift+0x96>
 8017770:	1a9b      	subs	r3, r3, r2
 8017772:	009b      	lsls	r3, r3, #2
 8017774:	1eea      	subs	r2, r5, #3
 8017776:	4296      	cmp	r6, r2
 8017778:	bf38      	it	cc
 801777a:	2300      	movcc	r3, #0
 801777c:	4423      	add	r3, r4
 801777e:	e015      	b.n	80177ac <rshift+0x68>
 8017780:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017784:	f1c1 0820 	rsb	r8, r1, #32
 8017788:	40cf      	lsrs	r7, r1
 801778a:	f105 0e04 	add.w	lr, r5, #4
 801778e:	46a1      	mov	r9, r4
 8017790:	4576      	cmp	r6, lr
 8017792:	46f4      	mov	ip, lr
 8017794:	d815      	bhi.n	80177c2 <rshift+0x7e>
 8017796:	1a9a      	subs	r2, r3, r2
 8017798:	0092      	lsls	r2, r2, #2
 801779a:	3a04      	subs	r2, #4
 801779c:	3501      	adds	r5, #1
 801779e:	42ae      	cmp	r6, r5
 80177a0:	bf38      	it	cc
 80177a2:	2200      	movcc	r2, #0
 80177a4:	18a3      	adds	r3, r4, r2
 80177a6:	50a7      	str	r7, [r4, r2]
 80177a8:	b107      	cbz	r7, 80177ac <rshift+0x68>
 80177aa:	3304      	adds	r3, #4
 80177ac:	1b1a      	subs	r2, r3, r4
 80177ae:	42a3      	cmp	r3, r4
 80177b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80177b4:	bf08      	it	eq
 80177b6:	2300      	moveq	r3, #0
 80177b8:	6102      	str	r2, [r0, #16]
 80177ba:	bf08      	it	eq
 80177bc:	6143      	streq	r3, [r0, #20]
 80177be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177c2:	f8dc c000 	ldr.w	ip, [ip]
 80177c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80177ca:	ea4c 0707 	orr.w	r7, ip, r7
 80177ce:	f849 7b04 	str.w	r7, [r9], #4
 80177d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80177d6:	40cf      	lsrs	r7, r1
 80177d8:	e7da      	b.n	8017790 <rshift+0x4c>
 80177da:	f851 cb04 	ldr.w	ip, [r1], #4
 80177de:	f847 cf04 	str.w	ip, [r7, #4]!
 80177e2:	e7c3      	b.n	801776c <rshift+0x28>
 80177e4:	4623      	mov	r3, r4
 80177e6:	e7e1      	b.n	80177ac <rshift+0x68>

080177e8 <__hexdig_fun>:
 80177e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80177ec:	2b09      	cmp	r3, #9
 80177ee:	d802      	bhi.n	80177f6 <__hexdig_fun+0xe>
 80177f0:	3820      	subs	r0, #32
 80177f2:	b2c0      	uxtb	r0, r0
 80177f4:	4770      	bx	lr
 80177f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80177fa:	2b05      	cmp	r3, #5
 80177fc:	d801      	bhi.n	8017802 <__hexdig_fun+0x1a>
 80177fe:	3847      	subs	r0, #71	@ 0x47
 8017800:	e7f7      	b.n	80177f2 <__hexdig_fun+0xa>
 8017802:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017806:	2b05      	cmp	r3, #5
 8017808:	d801      	bhi.n	801780e <__hexdig_fun+0x26>
 801780a:	3827      	subs	r0, #39	@ 0x27
 801780c:	e7f1      	b.n	80177f2 <__hexdig_fun+0xa>
 801780e:	2000      	movs	r0, #0
 8017810:	4770      	bx	lr
	...

08017814 <__gethex>:
 8017814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017818:	b085      	sub	sp, #20
 801781a:	468a      	mov	sl, r1
 801781c:	9302      	str	r3, [sp, #8]
 801781e:	680b      	ldr	r3, [r1, #0]
 8017820:	9001      	str	r0, [sp, #4]
 8017822:	4690      	mov	r8, r2
 8017824:	1c9c      	adds	r4, r3, #2
 8017826:	46a1      	mov	r9, r4
 8017828:	f814 0b01 	ldrb.w	r0, [r4], #1
 801782c:	2830      	cmp	r0, #48	@ 0x30
 801782e:	d0fa      	beq.n	8017826 <__gethex+0x12>
 8017830:	eba9 0303 	sub.w	r3, r9, r3
 8017834:	f1a3 0b02 	sub.w	fp, r3, #2
 8017838:	f7ff ffd6 	bl	80177e8 <__hexdig_fun>
 801783c:	4605      	mov	r5, r0
 801783e:	2800      	cmp	r0, #0
 8017840:	d168      	bne.n	8017914 <__gethex+0x100>
 8017842:	49a0      	ldr	r1, [pc, #640]	@ (8017ac4 <__gethex+0x2b0>)
 8017844:	2201      	movs	r2, #1
 8017846:	4648      	mov	r0, r9
 8017848:	f7ff ff1e 	bl	8017688 <strncmp>
 801784c:	4607      	mov	r7, r0
 801784e:	2800      	cmp	r0, #0
 8017850:	d167      	bne.n	8017922 <__gethex+0x10e>
 8017852:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017856:	4626      	mov	r6, r4
 8017858:	f7ff ffc6 	bl	80177e8 <__hexdig_fun>
 801785c:	2800      	cmp	r0, #0
 801785e:	d062      	beq.n	8017926 <__gethex+0x112>
 8017860:	4623      	mov	r3, r4
 8017862:	7818      	ldrb	r0, [r3, #0]
 8017864:	2830      	cmp	r0, #48	@ 0x30
 8017866:	4699      	mov	r9, r3
 8017868:	f103 0301 	add.w	r3, r3, #1
 801786c:	d0f9      	beq.n	8017862 <__gethex+0x4e>
 801786e:	f7ff ffbb 	bl	80177e8 <__hexdig_fun>
 8017872:	fab0 f580 	clz	r5, r0
 8017876:	096d      	lsrs	r5, r5, #5
 8017878:	f04f 0b01 	mov.w	fp, #1
 801787c:	464a      	mov	r2, r9
 801787e:	4616      	mov	r6, r2
 8017880:	3201      	adds	r2, #1
 8017882:	7830      	ldrb	r0, [r6, #0]
 8017884:	f7ff ffb0 	bl	80177e8 <__hexdig_fun>
 8017888:	2800      	cmp	r0, #0
 801788a:	d1f8      	bne.n	801787e <__gethex+0x6a>
 801788c:	498d      	ldr	r1, [pc, #564]	@ (8017ac4 <__gethex+0x2b0>)
 801788e:	2201      	movs	r2, #1
 8017890:	4630      	mov	r0, r6
 8017892:	f7ff fef9 	bl	8017688 <strncmp>
 8017896:	2800      	cmp	r0, #0
 8017898:	d13f      	bne.n	801791a <__gethex+0x106>
 801789a:	b944      	cbnz	r4, 80178ae <__gethex+0x9a>
 801789c:	1c74      	adds	r4, r6, #1
 801789e:	4622      	mov	r2, r4
 80178a0:	4616      	mov	r6, r2
 80178a2:	3201      	adds	r2, #1
 80178a4:	7830      	ldrb	r0, [r6, #0]
 80178a6:	f7ff ff9f 	bl	80177e8 <__hexdig_fun>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	d1f8      	bne.n	80178a0 <__gethex+0x8c>
 80178ae:	1ba4      	subs	r4, r4, r6
 80178b0:	00a7      	lsls	r7, r4, #2
 80178b2:	7833      	ldrb	r3, [r6, #0]
 80178b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80178b8:	2b50      	cmp	r3, #80	@ 0x50
 80178ba:	d13e      	bne.n	801793a <__gethex+0x126>
 80178bc:	7873      	ldrb	r3, [r6, #1]
 80178be:	2b2b      	cmp	r3, #43	@ 0x2b
 80178c0:	d033      	beq.n	801792a <__gethex+0x116>
 80178c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80178c4:	d034      	beq.n	8017930 <__gethex+0x11c>
 80178c6:	1c71      	adds	r1, r6, #1
 80178c8:	2400      	movs	r4, #0
 80178ca:	7808      	ldrb	r0, [r1, #0]
 80178cc:	f7ff ff8c 	bl	80177e8 <__hexdig_fun>
 80178d0:	1e43      	subs	r3, r0, #1
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	2b18      	cmp	r3, #24
 80178d6:	d830      	bhi.n	801793a <__gethex+0x126>
 80178d8:	f1a0 0210 	sub.w	r2, r0, #16
 80178dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80178e0:	f7ff ff82 	bl	80177e8 <__hexdig_fun>
 80178e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80178e8:	fa5f fc8c 	uxtb.w	ip, ip
 80178ec:	f1bc 0f18 	cmp.w	ip, #24
 80178f0:	f04f 030a 	mov.w	r3, #10
 80178f4:	d91e      	bls.n	8017934 <__gethex+0x120>
 80178f6:	b104      	cbz	r4, 80178fa <__gethex+0xe6>
 80178f8:	4252      	negs	r2, r2
 80178fa:	4417      	add	r7, r2
 80178fc:	f8ca 1000 	str.w	r1, [sl]
 8017900:	b1ed      	cbz	r5, 801793e <__gethex+0x12a>
 8017902:	f1bb 0f00 	cmp.w	fp, #0
 8017906:	bf0c      	ite	eq
 8017908:	2506      	moveq	r5, #6
 801790a:	2500      	movne	r5, #0
 801790c:	4628      	mov	r0, r5
 801790e:	b005      	add	sp, #20
 8017910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017914:	2500      	movs	r5, #0
 8017916:	462c      	mov	r4, r5
 8017918:	e7b0      	b.n	801787c <__gethex+0x68>
 801791a:	2c00      	cmp	r4, #0
 801791c:	d1c7      	bne.n	80178ae <__gethex+0x9a>
 801791e:	4627      	mov	r7, r4
 8017920:	e7c7      	b.n	80178b2 <__gethex+0x9e>
 8017922:	464e      	mov	r6, r9
 8017924:	462f      	mov	r7, r5
 8017926:	2501      	movs	r5, #1
 8017928:	e7c3      	b.n	80178b2 <__gethex+0x9e>
 801792a:	2400      	movs	r4, #0
 801792c:	1cb1      	adds	r1, r6, #2
 801792e:	e7cc      	b.n	80178ca <__gethex+0xb6>
 8017930:	2401      	movs	r4, #1
 8017932:	e7fb      	b.n	801792c <__gethex+0x118>
 8017934:	fb03 0002 	mla	r0, r3, r2, r0
 8017938:	e7ce      	b.n	80178d8 <__gethex+0xc4>
 801793a:	4631      	mov	r1, r6
 801793c:	e7de      	b.n	80178fc <__gethex+0xe8>
 801793e:	eba6 0309 	sub.w	r3, r6, r9
 8017942:	3b01      	subs	r3, #1
 8017944:	4629      	mov	r1, r5
 8017946:	2b07      	cmp	r3, #7
 8017948:	dc0a      	bgt.n	8017960 <__gethex+0x14c>
 801794a:	9801      	ldr	r0, [sp, #4]
 801794c:	f7fe f950 	bl	8015bf0 <_Balloc>
 8017950:	4604      	mov	r4, r0
 8017952:	b940      	cbnz	r0, 8017966 <__gethex+0x152>
 8017954:	4b5c      	ldr	r3, [pc, #368]	@ (8017ac8 <__gethex+0x2b4>)
 8017956:	4602      	mov	r2, r0
 8017958:	21e4      	movs	r1, #228	@ 0xe4
 801795a:	485c      	ldr	r0, [pc, #368]	@ (8017acc <__gethex+0x2b8>)
 801795c:	f7ff fec0 	bl	80176e0 <__assert_func>
 8017960:	3101      	adds	r1, #1
 8017962:	105b      	asrs	r3, r3, #1
 8017964:	e7ef      	b.n	8017946 <__gethex+0x132>
 8017966:	f100 0a14 	add.w	sl, r0, #20
 801796a:	2300      	movs	r3, #0
 801796c:	4655      	mov	r5, sl
 801796e:	469b      	mov	fp, r3
 8017970:	45b1      	cmp	r9, r6
 8017972:	d337      	bcc.n	80179e4 <__gethex+0x1d0>
 8017974:	f845 bb04 	str.w	fp, [r5], #4
 8017978:	eba5 050a 	sub.w	r5, r5, sl
 801797c:	10ad      	asrs	r5, r5, #2
 801797e:	6125      	str	r5, [r4, #16]
 8017980:	4658      	mov	r0, fp
 8017982:	f7fe fa27 	bl	8015dd4 <__hi0bits>
 8017986:	016d      	lsls	r5, r5, #5
 8017988:	f8d8 6000 	ldr.w	r6, [r8]
 801798c:	1a2d      	subs	r5, r5, r0
 801798e:	42b5      	cmp	r5, r6
 8017990:	dd54      	ble.n	8017a3c <__gethex+0x228>
 8017992:	1bad      	subs	r5, r5, r6
 8017994:	4629      	mov	r1, r5
 8017996:	4620      	mov	r0, r4
 8017998:	f7fe fdb3 	bl	8016502 <__any_on>
 801799c:	4681      	mov	r9, r0
 801799e:	b178      	cbz	r0, 80179c0 <__gethex+0x1ac>
 80179a0:	1e6b      	subs	r3, r5, #1
 80179a2:	1159      	asrs	r1, r3, #5
 80179a4:	f003 021f 	and.w	r2, r3, #31
 80179a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80179ac:	f04f 0901 	mov.w	r9, #1
 80179b0:	fa09 f202 	lsl.w	r2, r9, r2
 80179b4:	420a      	tst	r2, r1
 80179b6:	d003      	beq.n	80179c0 <__gethex+0x1ac>
 80179b8:	454b      	cmp	r3, r9
 80179ba:	dc36      	bgt.n	8017a2a <__gethex+0x216>
 80179bc:	f04f 0902 	mov.w	r9, #2
 80179c0:	4629      	mov	r1, r5
 80179c2:	4620      	mov	r0, r4
 80179c4:	f7ff febe 	bl	8017744 <rshift>
 80179c8:	442f      	add	r7, r5
 80179ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80179ce:	42bb      	cmp	r3, r7
 80179d0:	da42      	bge.n	8017a58 <__gethex+0x244>
 80179d2:	9801      	ldr	r0, [sp, #4]
 80179d4:	4621      	mov	r1, r4
 80179d6:	f7fe f94b 	bl	8015c70 <_Bfree>
 80179da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179dc:	2300      	movs	r3, #0
 80179de:	6013      	str	r3, [r2, #0]
 80179e0:	25a3      	movs	r5, #163	@ 0xa3
 80179e2:	e793      	b.n	801790c <__gethex+0xf8>
 80179e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80179e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80179ea:	d012      	beq.n	8017a12 <__gethex+0x1fe>
 80179ec:	2b20      	cmp	r3, #32
 80179ee:	d104      	bne.n	80179fa <__gethex+0x1e6>
 80179f0:	f845 bb04 	str.w	fp, [r5], #4
 80179f4:	f04f 0b00 	mov.w	fp, #0
 80179f8:	465b      	mov	r3, fp
 80179fa:	7830      	ldrb	r0, [r6, #0]
 80179fc:	9303      	str	r3, [sp, #12]
 80179fe:	f7ff fef3 	bl	80177e8 <__hexdig_fun>
 8017a02:	9b03      	ldr	r3, [sp, #12]
 8017a04:	f000 000f 	and.w	r0, r0, #15
 8017a08:	4098      	lsls	r0, r3
 8017a0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a0e:	3304      	adds	r3, #4
 8017a10:	e7ae      	b.n	8017970 <__gethex+0x15c>
 8017a12:	45b1      	cmp	r9, r6
 8017a14:	d8ea      	bhi.n	80179ec <__gethex+0x1d8>
 8017a16:	492b      	ldr	r1, [pc, #172]	@ (8017ac4 <__gethex+0x2b0>)
 8017a18:	9303      	str	r3, [sp, #12]
 8017a1a:	2201      	movs	r2, #1
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	f7ff fe33 	bl	8017688 <strncmp>
 8017a22:	9b03      	ldr	r3, [sp, #12]
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d1e1      	bne.n	80179ec <__gethex+0x1d8>
 8017a28:	e7a2      	b.n	8017970 <__gethex+0x15c>
 8017a2a:	1ea9      	subs	r1, r5, #2
 8017a2c:	4620      	mov	r0, r4
 8017a2e:	f7fe fd68 	bl	8016502 <__any_on>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	d0c2      	beq.n	80179bc <__gethex+0x1a8>
 8017a36:	f04f 0903 	mov.w	r9, #3
 8017a3a:	e7c1      	b.n	80179c0 <__gethex+0x1ac>
 8017a3c:	da09      	bge.n	8017a52 <__gethex+0x23e>
 8017a3e:	1b75      	subs	r5, r6, r5
 8017a40:	4621      	mov	r1, r4
 8017a42:	9801      	ldr	r0, [sp, #4]
 8017a44:	462a      	mov	r2, r5
 8017a46:	f7fe fb23 	bl	8016090 <__lshift>
 8017a4a:	1b7f      	subs	r7, r7, r5
 8017a4c:	4604      	mov	r4, r0
 8017a4e:	f100 0a14 	add.w	sl, r0, #20
 8017a52:	f04f 0900 	mov.w	r9, #0
 8017a56:	e7b8      	b.n	80179ca <__gethex+0x1b6>
 8017a58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017a5c:	42bd      	cmp	r5, r7
 8017a5e:	dd6f      	ble.n	8017b40 <__gethex+0x32c>
 8017a60:	1bed      	subs	r5, r5, r7
 8017a62:	42ae      	cmp	r6, r5
 8017a64:	dc34      	bgt.n	8017ad0 <__gethex+0x2bc>
 8017a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a6a:	2b02      	cmp	r3, #2
 8017a6c:	d022      	beq.n	8017ab4 <__gethex+0x2a0>
 8017a6e:	2b03      	cmp	r3, #3
 8017a70:	d024      	beq.n	8017abc <__gethex+0x2a8>
 8017a72:	2b01      	cmp	r3, #1
 8017a74:	d115      	bne.n	8017aa2 <__gethex+0x28e>
 8017a76:	42ae      	cmp	r6, r5
 8017a78:	d113      	bne.n	8017aa2 <__gethex+0x28e>
 8017a7a:	2e01      	cmp	r6, #1
 8017a7c:	d10b      	bne.n	8017a96 <__gethex+0x282>
 8017a7e:	9a02      	ldr	r2, [sp, #8]
 8017a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017a84:	6013      	str	r3, [r2, #0]
 8017a86:	2301      	movs	r3, #1
 8017a88:	6123      	str	r3, [r4, #16]
 8017a8a:	f8ca 3000 	str.w	r3, [sl]
 8017a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a90:	2562      	movs	r5, #98	@ 0x62
 8017a92:	601c      	str	r4, [r3, #0]
 8017a94:	e73a      	b.n	801790c <__gethex+0xf8>
 8017a96:	1e71      	subs	r1, r6, #1
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f7fe fd32 	bl	8016502 <__any_on>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	d1ed      	bne.n	8017a7e <__gethex+0x26a>
 8017aa2:	9801      	ldr	r0, [sp, #4]
 8017aa4:	4621      	mov	r1, r4
 8017aa6:	f7fe f8e3 	bl	8015c70 <_Bfree>
 8017aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017aac:	2300      	movs	r3, #0
 8017aae:	6013      	str	r3, [r2, #0]
 8017ab0:	2550      	movs	r5, #80	@ 0x50
 8017ab2:	e72b      	b.n	801790c <__gethex+0xf8>
 8017ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1f3      	bne.n	8017aa2 <__gethex+0x28e>
 8017aba:	e7e0      	b.n	8017a7e <__gethex+0x26a>
 8017abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d1dd      	bne.n	8017a7e <__gethex+0x26a>
 8017ac2:	e7ee      	b.n	8017aa2 <__gethex+0x28e>
 8017ac4:	0801bccb 	.word	0x0801bccb
 8017ac8:	0801bc61 	.word	0x0801bc61
 8017acc:	0801bd22 	.word	0x0801bd22
 8017ad0:	1e6f      	subs	r7, r5, #1
 8017ad2:	f1b9 0f00 	cmp.w	r9, #0
 8017ad6:	d130      	bne.n	8017b3a <__gethex+0x326>
 8017ad8:	b127      	cbz	r7, 8017ae4 <__gethex+0x2d0>
 8017ada:	4639      	mov	r1, r7
 8017adc:	4620      	mov	r0, r4
 8017ade:	f7fe fd10 	bl	8016502 <__any_on>
 8017ae2:	4681      	mov	r9, r0
 8017ae4:	117a      	asrs	r2, r7, #5
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017aec:	f007 071f 	and.w	r7, r7, #31
 8017af0:	40bb      	lsls	r3, r7
 8017af2:	4213      	tst	r3, r2
 8017af4:	4629      	mov	r1, r5
 8017af6:	4620      	mov	r0, r4
 8017af8:	bf18      	it	ne
 8017afa:	f049 0902 	orrne.w	r9, r9, #2
 8017afe:	f7ff fe21 	bl	8017744 <rshift>
 8017b02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017b06:	1b76      	subs	r6, r6, r5
 8017b08:	2502      	movs	r5, #2
 8017b0a:	f1b9 0f00 	cmp.w	r9, #0
 8017b0e:	d047      	beq.n	8017ba0 <__gethex+0x38c>
 8017b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b14:	2b02      	cmp	r3, #2
 8017b16:	d015      	beq.n	8017b44 <__gethex+0x330>
 8017b18:	2b03      	cmp	r3, #3
 8017b1a:	d017      	beq.n	8017b4c <__gethex+0x338>
 8017b1c:	2b01      	cmp	r3, #1
 8017b1e:	d109      	bne.n	8017b34 <__gethex+0x320>
 8017b20:	f019 0f02 	tst.w	r9, #2
 8017b24:	d006      	beq.n	8017b34 <__gethex+0x320>
 8017b26:	f8da 3000 	ldr.w	r3, [sl]
 8017b2a:	ea49 0903 	orr.w	r9, r9, r3
 8017b2e:	f019 0f01 	tst.w	r9, #1
 8017b32:	d10e      	bne.n	8017b52 <__gethex+0x33e>
 8017b34:	f045 0510 	orr.w	r5, r5, #16
 8017b38:	e032      	b.n	8017ba0 <__gethex+0x38c>
 8017b3a:	f04f 0901 	mov.w	r9, #1
 8017b3e:	e7d1      	b.n	8017ae4 <__gethex+0x2d0>
 8017b40:	2501      	movs	r5, #1
 8017b42:	e7e2      	b.n	8017b0a <__gethex+0x2f6>
 8017b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b46:	f1c3 0301 	rsb	r3, r3, #1
 8017b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d0f0      	beq.n	8017b34 <__gethex+0x320>
 8017b52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017b56:	f104 0314 	add.w	r3, r4, #20
 8017b5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017b5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017b62:	f04f 0c00 	mov.w	ip, #0
 8017b66:	4618      	mov	r0, r3
 8017b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017b70:	d01b      	beq.n	8017baa <__gethex+0x396>
 8017b72:	3201      	adds	r2, #1
 8017b74:	6002      	str	r2, [r0, #0]
 8017b76:	2d02      	cmp	r5, #2
 8017b78:	f104 0314 	add.w	r3, r4, #20
 8017b7c:	d13c      	bne.n	8017bf8 <__gethex+0x3e4>
 8017b7e:	f8d8 2000 	ldr.w	r2, [r8]
 8017b82:	3a01      	subs	r2, #1
 8017b84:	42b2      	cmp	r2, r6
 8017b86:	d109      	bne.n	8017b9c <__gethex+0x388>
 8017b88:	1171      	asrs	r1, r6, #5
 8017b8a:	2201      	movs	r2, #1
 8017b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017b90:	f006 061f 	and.w	r6, r6, #31
 8017b94:	fa02 f606 	lsl.w	r6, r2, r6
 8017b98:	421e      	tst	r6, r3
 8017b9a:	d13a      	bne.n	8017c12 <__gethex+0x3fe>
 8017b9c:	f045 0520 	orr.w	r5, r5, #32
 8017ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ba2:	601c      	str	r4, [r3, #0]
 8017ba4:	9b02      	ldr	r3, [sp, #8]
 8017ba6:	601f      	str	r7, [r3, #0]
 8017ba8:	e6b0      	b.n	801790c <__gethex+0xf8>
 8017baa:	4299      	cmp	r1, r3
 8017bac:	f843 cc04 	str.w	ip, [r3, #-4]
 8017bb0:	d8d9      	bhi.n	8017b66 <__gethex+0x352>
 8017bb2:	68a3      	ldr	r3, [r4, #8]
 8017bb4:	459b      	cmp	fp, r3
 8017bb6:	db17      	blt.n	8017be8 <__gethex+0x3d4>
 8017bb8:	6861      	ldr	r1, [r4, #4]
 8017bba:	9801      	ldr	r0, [sp, #4]
 8017bbc:	3101      	adds	r1, #1
 8017bbe:	f7fe f817 	bl	8015bf0 <_Balloc>
 8017bc2:	4681      	mov	r9, r0
 8017bc4:	b918      	cbnz	r0, 8017bce <__gethex+0x3ba>
 8017bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8017c30 <__gethex+0x41c>)
 8017bc8:	4602      	mov	r2, r0
 8017bca:	2184      	movs	r1, #132	@ 0x84
 8017bcc:	e6c5      	b.n	801795a <__gethex+0x146>
 8017bce:	6922      	ldr	r2, [r4, #16]
 8017bd0:	3202      	adds	r2, #2
 8017bd2:	f104 010c 	add.w	r1, r4, #12
 8017bd6:	0092      	lsls	r2, r2, #2
 8017bd8:	300c      	adds	r0, #12
 8017bda:	f7fd f89c 	bl	8014d16 <memcpy>
 8017bde:	4621      	mov	r1, r4
 8017be0:	9801      	ldr	r0, [sp, #4]
 8017be2:	f7fe f845 	bl	8015c70 <_Bfree>
 8017be6:	464c      	mov	r4, r9
 8017be8:	6923      	ldr	r3, [r4, #16]
 8017bea:	1c5a      	adds	r2, r3, #1
 8017bec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017bf0:	6122      	str	r2, [r4, #16]
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	615a      	str	r2, [r3, #20]
 8017bf6:	e7be      	b.n	8017b76 <__gethex+0x362>
 8017bf8:	6922      	ldr	r2, [r4, #16]
 8017bfa:	455a      	cmp	r2, fp
 8017bfc:	dd0b      	ble.n	8017c16 <__gethex+0x402>
 8017bfe:	2101      	movs	r1, #1
 8017c00:	4620      	mov	r0, r4
 8017c02:	f7ff fd9f 	bl	8017744 <rshift>
 8017c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c0a:	3701      	adds	r7, #1
 8017c0c:	42bb      	cmp	r3, r7
 8017c0e:	f6ff aee0 	blt.w	80179d2 <__gethex+0x1be>
 8017c12:	2501      	movs	r5, #1
 8017c14:	e7c2      	b.n	8017b9c <__gethex+0x388>
 8017c16:	f016 061f 	ands.w	r6, r6, #31
 8017c1a:	d0fa      	beq.n	8017c12 <__gethex+0x3fe>
 8017c1c:	4453      	add	r3, sl
 8017c1e:	f1c6 0620 	rsb	r6, r6, #32
 8017c22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017c26:	f7fe f8d5 	bl	8015dd4 <__hi0bits>
 8017c2a:	42b0      	cmp	r0, r6
 8017c2c:	dbe7      	blt.n	8017bfe <__gethex+0x3ea>
 8017c2e:	e7f0      	b.n	8017c12 <__gethex+0x3fe>
 8017c30:	0801bc61 	.word	0x0801bc61

08017c34 <L_shift>:
 8017c34:	f1c2 0208 	rsb	r2, r2, #8
 8017c38:	0092      	lsls	r2, r2, #2
 8017c3a:	b570      	push	{r4, r5, r6, lr}
 8017c3c:	f1c2 0620 	rsb	r6, r2, #32
 8017c40:	6843      	ldr	r3, [r0, #4]
 8017c42:	6804      	ldr	r4, [r0, #0]
 8017c44:	fa03 f506 	lsl.w	r5, r3, r6
 8017c48:	432c      	orrs	r4, r5
 8017c4a:	40d3      	lsrs	r3, r2
 8017c4c:	6004      	str	r4, [r0, #0]
 8017c4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8017c52:	4288      	cmp	r0, r1
 8017c54:	d3f4      	bcc.n	8017c40 <L_shift+0xc>
 8017c56:	bd70      	pop	{r4, r5, r6, pc}

08017c58 <__match>:
 8017c58:	b530      	push	{r4, r5, lr}
 8017c5a:	6803      	ldr	r3, [r0, #0]
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c62:	b914      	cbnz	r4, 8017c6a <__match+0x12>
 8017c64:	6003      	str	r3, [r0, #0]
 8017c66:	2001      	movs	r0, #1
 8017c68:	bd30      	pop	{r4, r5, pc}
 8017c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017c72:	2d19      	cmp	r5, #25
 8017c74:	bf98      	it	ls
 8017c76:	3220      	addls	r2, #32
 8017c78:	42a2      	cmp	r2, r4
 8017c7a:	d0f0      	beq.n	8017c5e <__match+0x6>
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	e7f3      	b.n	8017c68 <__match+0x10>

08017c80 <__hexnan>:
 8017c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c84:	680b      	ldr	r3, [r1, #0]
 8017c86:	6801      	ldr	r1, [r0, #0]
 8017c88:	115e      	asrs	r6, r3, #5
 8017c8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017c8e:	f013 031f 	ands.w	r3, r3, #31
 8017c92:	b087      	sub	sp, #28
 8017c94:	bf18      	it	ne
 8017c96:	3604      	addne	r6, #4
 8017c98:	2500      	movs	r5, #0
 8017c9a:	1f37      	subs	r7, r6, #4
 8017c9c:	4682      	mov	sl, r0
 8017c9e:	4690      	mov	r8, r2
 8017ca0:	9301      	str	r3, [sp, #4]
 8017ca2:	f846 5c04 	str.w	r5, [r6, #-4]
 8017ca6:	46b9      	mov	r9, r7
 8017ca8:	463c      	mov	r4, r7
 8017caa:	9502      	str	r5, [sp, #8]
 8017cac:	46ab      	mov	fp, r5
 8017cae:	784a      	ldrb	r2, [r1, #1]
 8017cb0:	1c4b      	adds	r3, r1, #1
 8017cb2:	9303      	str	r3, [sp, #12]
 8017cb4:	b342      	cbz	r2, 8017d08 <__hexnan+0x88>
 8017cb6:	4610      	mov	r0, r2
 8017cb8:	9105      	str	r1, [sp, #20]
 8017cba:	9204      	str	r2, [sp, #16]
 8017cbc:	f7ff fd94 	bl	80177e8 <__hexdig_fun>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d151      	bne.n	8017d68 <__hexnan+0xe8>
 8017cc4:	9a04      	ldr	r2, [sp, #16]
 8017cc6:	9905      	ldr	r1, [sp, #20]
 8017cc8:	2a20      	cmp	r2, #32
 8017cca:	d818      	bhi.n	8017cfe <__hexnan+0x7e>
 8017ccc:	9b02      	ldr	r3, [sp, #8]
 8017cce:	459b      	cmp	fp, r3
 8017cd0:	dd13      	ble.n	8017cfa <__hexnan+0x7a>
 8017cd2:	454c      	cmp	r4, r9
 8017cd4:	d206      	bcs.n	8017ce4 <__hexnan+0x64>
 8017cd6:	2d07      	cmp	r5, #7
 8017cd8:	dc04      	bgt.n	8017ce4 <__hexnan+0x64>
 8017cda:	462a      	mov	r2, r5
 8017cdc:	4649      	mov	r1, r9
 8017cde:	4620      	mov	r0, r4
 8017ce0:	f7ff ffa8 	bl	8017c34 <L_shift>
 8017ce4:	4544      	cmp	r4, r8
 8017ce6:	d952      	bls.n	8017d8e <__hexnan+0x10e>
 8017ce8:	2300      	movs	r3, #0
 8017cea:	f1a4 0904 	sub.w	r9, r4, #4
 8017cee:	f844 3c04 	str.w	r3, [r4, #-4]
 8017cf2:	f8cd b008 	str.w	fp, [sp, #8]
 8017cf6:	464c      	mov	r4, r9
 8017cf8:	461d      	mov	r5, r3
 8017cfa:	9903      	ldr	r1, [sp, #12]
 8017cfc:	e7d7      	b.n	8017cae <__hexnan+0x2e>
 8017cfe:	2a29      	cmp	r2, #41	@ 0x29
 8017d00:	d157      	bne.n	8017db2 <__hexnan+0x132>
 8017d02:	3102      	adds	r1, #2
 8017d04:	f8ca 1000 	str.w	r1, [sl]
 8017d08:	f1bb 0f00 	cmp.w	fp, #0
 8017d0c:	d051      	beq.n	8017db2 <__hexnan+0x132>
 8017d0e:	454c      	cmp	r4, r9
 8017d10:	d206      	bcs.n	8017d20 <__hexnan+0xa0>
 8017d12:	2d07      	cmp	r5, #7
 8017d14:	dc04      	bgt.n	8017d20 <__hexnan+0xa0>
 8017d16:	462a      	mov	r2, r5
 8017d18:	4649      	mov	r1, r9
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f7ff ff8a 	bl	8017c34 <L_shift>
 8017d20:	4544      	cmp	r4, r8
 8017d22:	d936      	bls.n	8017d92 <__hexnan+0x112>
 8017d24:	f1a8 0204 	sub.w	r2, r8, #4
 8017d28:	4623      	mov	r3, r4
 8017d2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017d2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017d32:	429f      	cmp	r7, r3
 8017d34:	d2f9      	bcs.n	8017d2a <__hexnan+0xaa>
 8017d36:	1b3b      	subs	r3, r7, r4
 8017d38:	f023 0303 	bic.w	r3, r3, #3
 8017d3c:	3304      	adds	r3, #4
 8017d3e:	3401      	adds	r4, #1
 8017d40:	3e03      	subs	r6, #3
 8017d42:	42b4      	cmp	r4, r6
 8017d44:	bf88      	it	hi
 8017d46:	2304      	movhi	r3, #4
 8017d48:	4443      	add	r3, r8
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	f843 2b04 	str.w	r2, [r3], #4
 8017d50:	429f      	cmp	r7, r3
 8017d52:	d2fb      	bcs.n	8017d4c <__hexnan+0xcc>
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	b91b      	cbnz	r3, 8017d60 <__hexnan+0xe0>
 8017d58:	4547      	cmp	r7, r8
 8017d5a:	d128      	bne.n	8017dae <__hexnan+0x12e>
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	603b      	str	r3, [r7, #0]
 8017d60:	2005      	movs	r0, #5
 8017d62:	b007      	add	sp, #28
 8017d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d68:	3501      	adds	r5, #1
 8017d6a:	2d08      	cmp	r5, #8
 8017d6c:	f10b 0b01 	add.w	fp, fp, #1
 8017d70:	dd06      	ble.n	8017d80 <__hexnan+0x100>
 8017d72:	4544      	cmp	r4, r8
 8017d74:	d9c1      	bls.n	8017cfa <__hexnan+0x7a>
 8017d76:	2300      	movs	r3, #0
 8017d78:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d7c:	2501      	movs	r5, #1
 8017d7e:	3c04      	subs	r4, #4
 8017d80:	6822      	ldr	r2, [r4, #0]
 8017d82:	f000 000f 	and.w	r0, r0, #15
 8017d86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017d8a:	6020      	str	r0, [r4, #0]
 8017d8c:	e7b5      	b.n	8017cfa <__hexnan+0x7a>
 8017d8e:	2508      	movs	r5, #8
 8017d90:	e7b3      	b.n	8017cfa <__hexnan+0x7a>
 8017d92:	9b01      	ldr	r3, [sp, #4]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d0dd      	beq.n	8017d54 <__hexnan+0xd4>
 8017d98:	f1c3 0320 	rsb	r3, r3, #32
 8017d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8017da0:	40da      	lsrs	r2, r3
 8017da2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017da6:	4013      	ands	r3, r2
 8017da8:	f846 3c04 	str.w	r3, [r6, #-4]
 8017dac:	e7d2      	b.n	8017d54 <__hexnan+0xd4>
 8017dae:	3f04      	subs	r7, #4
 8017db0:	e7d0      	b.n	8017d54 <__hexnan+0xd4>
 8017db2:	2004      	movs	r0, #4
 8017db4:	e7d5      	b.n	8017d62 <__hexnan+0xe2>

08017db6 <__ascii_mbtowc>:
 8017db6:	b082      	sub	sp, #8
 8017db8:	b901      	cbnz	r1, 8017dbc <__ascii_mbtowc+0x6>
 8017dba:	a901      	add	r1, sp, #4
 8017dbc:	b142      	cbz	r2, 8017dd0 <__ascii_mbtowc+0x1a>
 8017dbe:	b14b      	cbz	r3, 8017dd4 <__ascii_mbtowc+0x1e>
 8017dc0:	7813      	ldrb	r3, [r2, #0]
 8017dc2:	600b      	str	r3, [r1, #0]
 8017dc4:	7812      	ldrb	r2, [r2, #0]
 8017dc6:	1e10      	subs	r0, r2, #0
 8017dc8:	bf18      	it	ne
 8017dca:	2001      	movne	r0, #1
 8017dcc:	b002      	add	sp, #8
 8017dce:	4770      	bx	lr
 8017dd0:	4610      	mov	r0, r2
 8017dd2:	e7fb      	b.n	8017dcc <__ascii_mbtowc+0x16>
 8017dd4:	f06f 0001 	mvn.w	r0, #1
 8017dd8:	e7f8      	b.n	8017dcc <__ascii_mbtowc+0x16>

08017dda <_realloc_r>:
 8017dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dde:	4607      	mov	r7, r0
 8017de0:	4614      	mov	r4, r2
 8017de2:	460d      	mov	r5, r1
 8017de4:	b921      	cbnz	r1, 8017df0 <_realloc_r+0x16>
 8017de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017dea:	4611      	mov	r1, r2
 8017dec:	f7fd be74 	b.w	8015ad8 <_malloc_r>
 8017df0:	b92a      	cbnz	r2, 8017dfe <_realloc_r+0x24>
 8017df2:	f7fd fdfd 	bl	80159f0 <_free_r>
 8017df6:	4625      	mov	r5, r4
 8017df8:	4628      	mov	r0, r5
 8017dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dfe:	f000 f840 	bl	8017e82 <_malloc_usable_size_r>
 8017e02:	4284      	cmp	r4, r0
 8017e04:	4606      	mov	r6, r0
 8017e06:	d802      	bhi.n	8017e0e <_realloc_r+0x34>
 8017e08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e0c:	d8f4      	bhi.n	8017df8 <_realloc_r+0x1e>
 8017e0e:	4621      	mov	r1, r4
 8017e10:	4638      	mov	r0, r7
 8017e12:	f7fd fe61 	bl	8015ad8 <_malloc_r>
 8017e16:	4680      	mov	r8, r0
 8017e18:	b908      	cbnz	r0, 8017e1e <_realloc_r+0x44>
 8017e1a:	4645      	mov	r5, r8
 8017e1c:	e7ec      	b.n	8017df8 <_realloc_r+0x1e>
 8017e1e:	42b4      	cmp	r4, r6
 8017e20:	4622      	mov	r2, r4
 8017e22:	4629      	mov	r1, r5
 8017e24:	bf28      	it	cs
 8017e26:	4632      	movcs	r2, r6
 8017e28:	f7fc ff75 	bl	8014d16 <memcpy>
 8017e2c:	4629      	mov	r1, r5
 8017e2e:	4638      	mov	r0, r7
 8017e30:	f7fd fdde 	bl	80159f0 <_free_r>
 8017e34:	e7f1      	b.n	8017e1a <_realloc_r+0x40>

08017e36 <__ascii_wctomb>:
 8017e36:	4603      	mov	r3, r0
 8017e38:	4608      	mov	r0, r1
 8017e3a:	b141      	cbz	r1, 8017e4e <__ascii_wctomb+0x18>
 8017e3c:	2aff      	cmp	r2, #255	@ 0xff
 8017e3e:	d904      	bls.n	8017e4a <__ascii_wctomb+0x14>
 8017e40:	228a      	movs	r2, #138	@ 0x8a
 8017e42:	601a      	str	r2, [r3, #0]
 8017e44:	f04f 30ff 	mov.w	r0, #4294967295
 8017e48:	4770      	bx	lr
 8017e4a:	700a      	strb	r2, [r1, #0]
 8017e4c:	2001      	movs	r0, #1
 8017e4e:	4770      	bx	lr

08017e50 <fiprintf>:
 8017e50:	b40e      	push	{r1, r2, r3}
 8017e52:	b503      	push	{r0, r1, lr}
 8017e54:	4601      	mov	r1, r0
 8017e56:	ab03      	add	r3, sp, #12
 8017e58:	4805      	ldr	r0, [pc, #20]	@ (8017e70 <fiprintf+0x20>)
 8017e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e5e:	6800      	ldr	r0, [r0, #0]
 8017e60:	9301      	str	r3, [sp, #4]
 8017e62:	f000 f83f 	bl	8017ee4 <_vfiprintf_r>
 8017e66:	b002      	add	sp, #8
 8017e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e6c:	b003      	add	sp, #12
 8017e6e:	4770      	bx	lr
 8017e70:	20000054 	.word	0x20000054

08017e74 <abort>:
 8017e74:	b508      	push	{r3, lr}
 8017e76:	2006      	movs	r0, #6
 8017e78:	f000 fa08 	bl	801828c <raise>
 8017e7c:	2001      	movs	r0, #1
 8017e7e:	f7ec fb4d 	bl	800451c <_exit>

08017e82 <_malloc_usable_size_r>:
 8017e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e86:	1f18      	subs	r0, r3, #4
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	bfbc      	itt	lt
 8017e8c:	580b      	ldrlt	r3, [r1, r0]
 8017e8e:	18c0      	addlt	r0, r0, r3
 8017e90:	4770      	bx	lr

08017e92 <__sfputc_r>:
 8017e92:	6893      	ldr	r3, [r2, #8]
 8017e94:	3b01      	subs	r3, #1
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	b410      	push	{r4}
 8017e9a:	6093      	str	r3, [r2, #8]
 8017e9c:	da08      	bge.n	8017eb0 <__sfputc_r+0x1e>
 8017e9e:	6994      	ldr	r4, [r2, #24]
 8017ea0:	42a3      	cmp	r3, r4
 8017ea2:	db01      	blt.n	8017ea8 <__sfputc_r+0x16>
 8017ea4:	290a      	cmp	r1, #10
 8017ea6:	d103      	bne.n	8017eb0 <__sfputc_r+0x1e>
 8017ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eac:	f000 b932 	b.w	8018114 <__swbuf_r>
 8017eb0:	6813      	ldr	r3, [r2, #0]
 8017eb2:	1c58      	adds	r0, r3, #1
 8017eb4:	6010      	str	r0, [r2, #0]
 8017eb6:	7019      	strb	r1, [r3, #0]
 8017eb8:	4608      	mov	r0, r1
 8017eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ebe:	4770      	bx	lr

08017ec0 <__sfputs_r>:
 8017ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec2:	4606      	mov	r6, r0
 8017ec4:	460f      	mov	r7, r1
 8017ec6:	4614      	mov	r4, r2
 8017ec8:	18d5      	adds	r5, r2, r3
 8017eca:	42ac      	cmp	r4, r5
 8017ecc:	d101      	bne.n	8017ed2 <__sfputs_r+0x12>
 8017ece:	2000      	movs	r0, #0
 8017ed0:	e007      	b.n	8017ee2 <__sfputs_r+0x22>
 8017ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ed6:	463a      	mov	r2, r7
 8017ed8:	4630      	mov	r0, r6
 8017eda:	f7ff ffda 	bl	8017e92 <__sfputc_r>
 8017ede:	1c43      	adds	r3, r0, #1
 8017ee0:	d1f3      	bne.n	8017eca <__sfputs_r+0xa>
 8017ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ee4 <_vfiprintf_r>:
 8017ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee8:	460d      	mov	r5, r1
 8017eea:	b09d      	sub	sp, #116	@ 0x74
 8017eec:	4614      	mov	r4, r2
 8017eee:	4698      	mov	r8, r3
 8017ef0:	4606      	mov	r6, r0
 8017ef2:	b118      	cbz	r0, 8017efc <_vfiprintf_r+0x18>
 8017ef4:	6a03      	ldr	r3, [r0, #32]
 8017ef6:	b90b      	cbnz	r3, 8017efc <_vfiprintf_r+0x18>
 8017ef8:	f7fc fd5e 	bl	80149b8 <__sinit>
 8017efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017efe:	07d9      	lsls	r1, r3, #31
 8017f00:	d405      	bmi.n	8017f0e <_vfiprintf_r+0x2a>
 8017f02:	89ab      	ldrh	r3, [r5, #12]
 8017f04:	059a      	lsls	r2, r3, #22
 8017f06:	d402      	bmi.n	8017f0e <_vfiprintf_r+0x2a>
 8017f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f0a:	f7fc ff02 	bl	8014d12 <__retarget_lock_acquire_recursive>
 8017f0e:	89ab      	ldrh	r3, [r5, #12]
 8017f10:	071b      	lsls	r3, r3, #28
 8017f12:	d501      	bpl.n	8017f18 <_vfiprintf_r+0x34>
 8017f14:	692b      	ldr	r3, [r5, #16]
 8017f16:	b99b      	cbnz	r3, 8017f40 <_vfiprintf_r+0x5c>
 8017f18:	4629      	mov	r1, r5
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	f000 f938 	bl	8018190 <__swsetup_r>
 8017f20:	b170      	cbz	r0, 8017f40 <_vfiprintf_r+0x5c>
 8017f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f24:	07dc      	lsls	r4, r3, #31
 8017f26:	d504      	bpl.n	8017f32 <_vfiprintf_r+0x4e>
 8017f28:	f04f 30ff 	mov.w	r0, #4294967295
 8017f2c:	b01d      	add	sp, #116	@ 0x74
 8017f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f32:	89ab      	ldrh	r3, [r5, #12]
 8017f34:	0598      	lsls	r0, r3, #22
 8017f36:	d4f7      	bmi.n	8017f28 <_vfiprintf_r+0x44>
 8017f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f3a:	f7fc feeb 	bl	8014d14 <__retarget_lock_release_recursive>
 8017f3e:	e7f3      	b.n	8017f28 <_vfiprintf_r+0x44>
 8017f40:	2300      	movs	r3, #0
 8017f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f44:	2320      	movs	r3, #32
 8017f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f4e:	2330      	movs	r3, #48	@ 0x30
 8017f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018100 <_vfiprintf_r+0x21c>
 8017f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f58:	f04f 0901 	mov.w	r9, #1
 8017f5c:	4623      	mov	r3, r4
 8017f5e:	469a      	mov	sl, r3
 8017f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f64:	b10a      	cbz	r2, 8017f6a <_vfiprintf_r+0x86>
 8017f66:	2a25      	cmp	r2, #37	@ 0x25
 8017f68:	d1f9      	bne.n	8017f5e <_vfiprintf_r+0x7a>
 8017f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8017f6e:	d00b      	beq.n	8017f88 <_vfiprintf_r+0xa4>
 8017f70:	465b      	mov	r3, fp
 8017f72:	4622      	mov	r2, r4
 8017f74:	4629      	mov	r1, r5
 8017f76:	4630      	mov	r0, r6
 8017f78:	f7ff ffa2 	bl	8017ec0 <__sfputs_r>
 8017f7c:	3001      	adds	r0, #1
 8017f7e:	f000 80a7 	beq.w	80180d0 <_vfiprintf_r+0x1ec>
 8017f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f84:	445a      	add	r2, fp
 8017f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f88:	f89a 3000 	ldrb.w	r3, [sl]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	f000 809f 	beq.w	80180d0 <_vfiprintf_r+0x1ec>
 8017f92:	2300      	movs	r3, #0
 8017f94:	f04f 32ff 	mov.w	r2, #4294967295
 8017f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f9c:	f10a 0a01 	add.w	sl, sl, #1
 8017fa0:	9304      	str	r3, [sp, #16]
 8017fa2:	9307      	str	r3, [sp, #28]
 8017fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8017faa:	4654      	mov	r4, sl
 8017fac:	2205      	movs	r2, #5
 8017fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fb2:	4853      	ldr	r0, [pc, #332]	@ (8018100 <_vfiprintf_r+0x21c>)
 8017fb4:	f7e8 f934 	bl	8000220 <memchr>
 8017fb8:	9a04      	ldr	r2, [sp, #16]
 8017fba:	b9d8      	cbnz	r0, 8017ff4 <_vfiprintf_r+0x110>
 8017fbc:	06d1      	lsls	r1, r2, #27
 8017fbe:	bf44      	itt	mi
 8017fc0:	2320      	movmi	r3, #32
 8017fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fc6:	0713      	lsls	r3, r2, #28
 8017fc8:	bf44      	itt	mi
 8017fca:	232b      	movmi	r3, #43	@ 0x2b
 8017fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8017fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fd6:	d015      	beq.n	8018004 <_vfiprintf_r+0x120>
 8017fd8:	9a07      	ldr	r2, [sp, #28]
 8017fda:	4654      	mov	r4, sl
 8017fdc:	2000      	movs	r0, #0
 8017fde:	f04f 0c0a 	mov.w	ip, #10
 8017fe2:	4621      	mov	r1, r4
 8017fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fe8:	3b30      	subs	r3, #48	@ 0x30
 8017fea:	2b09      	cmp	r3, #9
 8017fec:	d94b      	bls.n	8018086 <_vfiprintf_r+0x1a2>
 8017fee:	b1b0      	cbz	r0, 801801e <_vfiprintf_r+0x13a>
 8017ff0:	9207      	str	r2, [sp, #28]
 8017ff2:	e014      	b.n	801801e <_vfiprintf_r+0x13a>
 8017ff4:	eba0 0308 	sub.w	r3, r0, r8
 8017ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	9304      	str	r3, [sp, #16]
 8018000:	46a2      	mov	sl, r4
 8018002:	e7d2      	b.n	8017faa <_vfiprintf_r+0xc6>
 8018004:	9b03      	ldr	r3, [sp, #12]
 8018006:	1d19      	adds	r1, r3, #4
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	9103      	str	r1, [sp, #12]
 801800c:	2b00      	cmp	r3, #0
 801800e:	bfbb      	ittet	lt
 8018010:	425b      	neglt	r3, r3
 8018012:	f042 0202 	orrlt.w	r2, r2, #2
 8018016:	9307      	strge	r3, [sp, #28]
 8018018:	9307      	strlt	r3, [sp, #28]
 801801a:	bfb8      	it	lt
 801801c:	9204      	strlt	r2, [sp, #16]
 801801e:	7823      	ldrb	r3, [r4, #0]
 8018020:	2b2e      	cmp	r3, #46	@ 0x2e
 8018022:	d10a      	bne.n	801803a <_vfiprintf_r+0x156>
 8018024:	7863      	ldrb	r3, [r4, #1]
 8018026:	2b2a      	cmp	r3, #42	@ 0x2a
 8018028:	d132      	bne.n	8018090 <_vfiprintf_r+0x1ac>
 801802a:	9b03      	ldr	r3, [sp, #12]
 801802c:	1d1a      	adds	r2, r3, #4
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	9203      	str	r2, [sp, #12]
 8018032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018036:	3402      	adds	r4, #2
 8018038:	9305      	str	r3, [sp, #20]
 801803a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018110 <_vfiprintf_r+0x22c>
 801803e:	7821      	ldrb	r1, [r4, #0]
 8018040:	2203      	movs	r2, #3
 8018042:	4650      	mov	r0, sl
 8018044:	f7e8 f8ec 	bl	8000220 <memchr>
 8018048:	b138      	cbz	r0, 801805a <_vfiprintf_r+0x176>
 801804a:	9b04      	ldr	r3, [sp, #16]
 801804c:	eba0 000a 	sub.w	r0, r0, sl
 8018050:	2240      	movs	r2, #64	@ 0x40
 8018052:	4082      	lsls	r2, r0
 8018054:	4313      	orrs	r3, r2
 8018056:	3401      	adds	r4, #1
 8018058:	9304      	str	r3, [sp, #16]
 801805a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801805e:	4829      	ldr	r0, [pc, #164]	@ (8018104 <_vfiprintf_r+0x220>)
 8018060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018064:	2206      	movs	r2, #6
 8018066:	f7e8 f8db 	bl	8000220 <memchr>
 801806a:	2800      	cmp	r0, #0
 801806c:	d03f      	beq.n	80180ee <_vfiprintf_r+0x20a>
 801806e:	4b26      	ldr	r3, [pc, #152]	@ (8018108 <_vfiprintf_r+0x224>)
 8018070:	bb1b      	cbnz	r3, 80180ba <_vfiprintf_r+0x1d6>
 8018072:	9b03      	ldr	r3, [sp, #12]
 8018074:	3307      	adds	r3, #7
 8018076:	f023 0307 	bic.w	r3, r3, #7
 801807a:	3308      	adds	r3, #8
 801807c:	9303      	str	r3, [sp, #12]
 801807e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018080:	443b      	add	r3, r7
 8018082:	9309      	str	r3, [sp, #36]	@ 0x24
 8018084:	e76a      	b.n	8017f5c <_vfiprintf_r+0x78>
 8018086:	fb0c 3202 	mla	r2, ip, r2, r3
 801808a:	460c      	mov	r4, r1
 801808c:	2001      	movs	r0, #1
 801808e:	e7a8      	b.n	8017fe2 <_vfiprintf_r+0xfe>
 8018090:	2300      	movs	r3, #0
 8018092:	3401      	adds	r4, #1
 8018094:	9305      	str	r3, [sp, #20]
 8018096:	4619      	mov	r1, r3
 8018098:	f04f 0c0a 	mov.w	ip, #10
 801809c:	4620      	mov	r0, r4
 801809e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180a2:	3a30      	subs	r2, #48	@ 0x30
 80180a4:	2a09      	cmp	r2, #9
 80180a6:	d903      	bls.n	80180b0 <_vfiprintf_r+0x1cc>
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d0c6      	beq.n	801803a <_vfiprintf_r+0x156>
 80180ac:	9105      	str	r1, [sp, #20]
 80180ae:	e7c4      	b.n	801803a <_vfiprintf_r+0x156>
 80180b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80180b4:	4604      	mov	r4, r0
 80180b6:	2301      	movs	r3, #1
 80180b8:	e7f0      	b.n	801809c <_vfiprintf_r+0x1b8>
 80180ba:	ab03      	add	r3, sp, #12
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	462a      	mov	r2, r5
 80180c0:	4b12      	ldr	r3, [pc, #72]	@ (801810c <_vfiprintf_r+0x228>)
 80180c2:	a904      	add	r1, sp, #16
 80180c4:	4630      	mov	r0, r6
 80180c6:	f7fb fe27 	bl	8013d18 <_printf_float>
 80180ca:	4607      	mov	r7, r0
 80180cc:	1c78      	adds	r0, r7, #1
 80180ce:	d1d6      	bne.n	801807e <_vfiprintf_r+0x19a>
 80180d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80180d2:	07d9      	lsls	r1, r3, #31
 80180d4:	d405      	bmi.n	80180e2 <_vfiprintf_r+0x1fe>
 80180d6:	89ab      	ldrh	r3, [r5, #12]
 80180d8:	059a      	lsls	r2, r3, #22
 80180da:	d402      	bmi.n	80180e2 <_vfiprintf_r+0x1fe>
 80180dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180de:	f7fc fe19 	bl	8014d14 <__retarget_lock_release_recursive>
 80180e2:	89ab      	ldrh	r3, [r5, #12]
 80180e4:	065b      	lsls	r3, r3, #25
 80180e6:	f53f af1f 	bmi.w	8017f28 <_vfiprintf_r+0x44>
 80180ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180ec:	e71e      	b.n	8017f2c <_vfiprintf_r+0x48>
 80180ee:	ab03      	add	r3, sp, #12
 80180f0:	9300      	str	r3, [sp, #0]
 80180f2:	462a      	mov	r2, r5
 80180f4:	4b05      	ldr	r3, [pc, #20]	@ (801810c <_vfiprintf_r+0x228>)
 80180f6:	a904      	add	r1, sp, #16
 80180f8:	4630      	mov	r0, r6
 80180fa:	f7fc f8a5 	bl	8014248 <_printf_i>
 80180fe:	e7e4      	b.n	80180ca <_vfiprintf_r+0x1e6>
 8018100:	0801bccd 	.word	0x0801bccd
 8018104:	0801bcd7 	.word	0x0801bcd7
 8018108:	08013d19 	.word	0x08013d19
 801810c:	08017ec1 	.word	0x08017ec1
 8018110:	0801bcd3 	.word	0x0801bcd3

08018114 <__swbuf_r>:
 8018114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018116:	460e      	mov	r6, r1
 8018118:	4614      	mov	r4, r2
 801811a:	4605      	mov	r5, r0
 801811c:	b118      	cbz	r0, 8018126 <__swbuf_r+0x12>
 801811e:	6a03      	ldr	r3, [r0, #32]
 8018120:	b90b      	cbnz	r3, 8018126 <__swbuf_r+0x12>
 8018122:	f7fc fc49 	bl	80149b8 <__sinit>
 8018126:	69a3      	ldr	r3, [r4, #24]
 8018128:	60a3      	str	r3, [r4, #8]
 801812a:	89a3      	ldrh	r3, [r4, #12]
 801812c:	071a      	lsls	r2, r3, #28
 801812e:	d501      	bpl.n	8018134 <__swbuf_r+0x20>
 8018130:	6923      	ldr	r3, [r4, #16]
 8018132:	b943      	cbnz	r3, 8018146 <__swbuf_r+0x32>
 8018134:	4621      	mov	r1, r4
 8018136:	4628      	mov	r0, r5
 8018138:	f000 f82a 	bl	8018190 <__swsetup_r>
 801813c:	b118      	cbz	r0, 8018146 <__swbuf_r+0x32>
 801813e:	f04f 37ff 	mov.w	r7, #4294967295
 8018142:	4638      	mov	r0, r7
 8018144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018146:	6823      	ldr	r3, [r4, #0]
 8018148:	6922      	ldr	r2, [r4, #16]
 801814a:	1a98      	subs	r0, r3, r2
 801814c:	6963      	ldr	r3, [r4, #20]
 801814e:	b2f6      	uxtb	r6, r6
 8018150:	4283      	cmp	r3, r0
 8018152:	4637      	mov	r7, r6
 8018154:	dc05      	bgt.n	8018162 <__swbuf_r+0x4e>
 8018156:	4621      	mov	r1, r4
 8018158:	4628      	mov	r0, r5
 801815a:	f7ff fa53 	bl	8017604 <_fflush_r>
 801815e:	2800      	cmp	r0, #0
 8018160:	d1ed      	bne.n	801813e <__swbuf_r+0x2a>
 8018162:	68a3      	ldr	r3, [r4, #8]
 8018164:	3b01      	subs	r3, #1
 8018166:	60a3      	str	r3, [r4, #8]
 8018168:	6823      	ldr	r3, [r4, #0]
 801816a:	1c5a      	adds	r2, r3, #1
 801816c:	6022      	str	r2, [r4, #0]
 801816e:	701e      	strb	r6, [r3, #0]
 8018170:	6962      	ldr	r2, [r4, #20]
 8018172:	1c43      	adds	r3, r0, #1
 8018174:	429a      	cmp	r2, r3
 8018176:	d004      	beq.n	8018182 <__swbuf_r+0x6e>
 8018178:	89a3      	ldrh	r3, [r4, #12]
 801817a:	07db      	lsls	r3, r3, #31
 801817c:	d5e1      	bpl.n	8018142 <__swbuf_r+0x2e>
 801817e:	2e0a      	cmp	r6, #10
 8018180:	d1df      	bne.n	8018142 <__swbuf_r+0x2e>
 8018182:	4621      	mov	r1, r4
 8018184:	4628      	mov	r0, r5
 8018186:	f7ff fa3d 	bl	8017604 <_fflush_r>
 801818a:	2800      	cmp	r0, #0
 801818c:	d0d9      	beq.n	8018142 <__swbuf_r+0x2e>
 801818e:	e7d6      	b.n	801813e <__swbuf_r+0x2a>

08018190 <__swsetup_r>:
 8018190:	b538      	push	{r3, r4, r5, lr}
 8018192:	4b29      	ldr	r3, [pc, #164]	@ (8018238 <__swsetup_r+0xa8>)
 8018194:	4605      	mov	r5, r0
 8018196:	6818      	ldr	r0, [r3, #0]
 8018198:	460c      	mov	r4, r1
 801819a:	b118      	cbz	r0, 80181a4 <__swsetup_r+0x14>
 801819c:	6a03      	ldr	r3, [r0, #32]
 801819e:	b90b      	cbnz	r3, 80181a4 <__swsetup_r+0x14>
 80181a0:	f7fc fc0a 	bl	80149b8 <__sinit>
 80181a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181a8:	0719      	lsls	r1, r3, #28
 80181aa:	d422      	bmi.n	80181f2 <__swsetup_r+0x62>
 80181ac:	06da      	lsls	r2, r3, #27
 80181ae:	d407      	bmi.n	80181c0 <__swsetup_r+0x30>
 80181b0:	2209      	movs	r2, #9
 80181b2:	602a      	str	r2, [r5, #0]
 80181b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181b8:	81a3      	strh	r3, [r4, #12]
 80181ba:	f04f 30ff 	mov.w	r0, #4294967295
 80181be:	e033      	b.n	8018228 <__swsetup_r+0x98>
 80181c0:	0758      	lsls	r0, r3, #29
 80181c2:	d512      	bpl.n	80181ea <__swsetup_r+0x5a>
 80181c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80181c6:	b141      	cbz	r1, 80181da <__swsetup_r+0x4a>
 80181c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181cc:	4299      	cmp	r1, r3
 80181ce:	d002      	beq.n	80181d6 <__swsetup_r+0x46>
 80181d0:	4628      	mov	r0, r5
 80181d2:	f7fd fc0d 	bl	80159f0 <_free_r>
 80181d6:	2300      	movs	r3, #0
 80181d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80181da:	89a3      	ldrh	r3, [r4, #12]
 80181dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80181e0:	81a3      	strh	r3, [r4, #12]
 80181e2:	2300      	movs	r3, #0
 80181e4:	6063      	str	r3, [r4, #4]
 80181e6:	6923      	ldr	r3, [r4, #16]
 80181e8:	6023      	str	r3, [r4, #0]
 80181ea:	89a3      	ldrh	r3, [r4, #12]
 80181ec:	f043 0308 	orr.w	r3, r3, #8
 80181f0:	81a3      	strh	r3, [r4, #12]
 80181f2:	6923      	ldr	r3, [r4, #16]
 80181f4:	b94b      	cbnz	r3, 801820a <__swsetup_r+0x7a>
 80181f6:	89a3      	ldrh	r3, [r4, #12]
 80181f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80181fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018200:	d003      	beq.n	801820a <__swsetup_r+0x7a>
 8018202:	4621      	mov	r1, r4
 8018204:	4628      	mov	r0, r5
 8018206:	f000 f883 	bl	8018310 <__smakebuf_r>
 801820a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801820e:	f013 0201 	ands.w	r2, r3, #1
 8018212:	d00a      	beq.n	801822a <__swsetup_r+0x9a>
 8018214:	2200      	movs	r2, #0
 8018216:	60a2      	str	r2, [r4, #8]
 8018218:	6962      	ldr	r2, [r4, #20]
 801821a:	4252      	negs	r2, r2
 801821c:	61a2      	str	r2, [r4, #24]
 801821e:	6922      	ldr	r2, [r4, #16]
 8018220:	b942      	cbnz	r2, 8018234 <__swsetup_r+0xa4>
 8018222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018226:	d1c5      	bne.n	80181b4 <__swsetup_r+0x24>
 8018228:	bd38      	pop	{r3, r4, r5, pc}
 801822a:	0799      	lsls	r1, r3, #30
 801822c:	bf58      	it	pl
 801822e:	6962      	ldrpl	r2, [r4, #20]
 8018230:	60a2      	str	r2, [r4, #8]
 8018232:	e7f4      	b.n	801821e <__swsetup_r+0x8e>
 8018234:	2000      	movs	r0, #0
 8018236:	e7f7      	b.n	8018228 <__swsetup_r+0x98>
 8018238:	20000054 	.word	0x20000054

0801823c <_raise_r>:
 801823c:	291f      	cmp	r1, #31
 801823e:	b538      	push	{r3, r4, r5, lr}
 8018240:	4605      	mov	r5, r0
 8018242:	460c      	mov	r4, r1
 8018244:	d904      	bls.n	8018250 <_raise_r+0x14>
 8018246:	2316      	movs	r3, #22
 8018248:	6003      	str	r3, [r0, #0]
 801824a:	f04f 30ff 	mov.w	r0, #4294967295
 801824e:	bd38      	pop	{r3, r4, r5, pc}
 8018250:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018252:	b112      	cbz	r2, 801825a <_raise_r+0x1e>
 8018254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018258:	b94b      	cbnz	r3, 801826e <_raise_r+0x32>
 801825a:	4628      	mov	r0, r5
 801825c:	f000 f830 	bl	80182c0 <_getpid_r>
 8018260:	4622      	mov	r2, r4
 8018262:	4601      	mov	r1, r0
 8018264:	4628      	mov	r0, r5
 8018266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801826a:	f000 b817 	b.w	801829c <_kill_r>
 801826e:	2b01      	cmp	r3, #1
 8018270:	d00a      	beq.n	8018288 <_raise_r+0x4c>
 8018272:	1c59      	adds	r1, r3, #1
 8018274:	d103      	bne.n	801827e <_raise_r+0x42>
 8018276:	2316      	movs	r3, #22
 8018278:	6003      	str	r3, [r0, #0]
 801827a:	2001      	movs	r0, #1
 801827c:	e7e7      	b.n	801824e <_raise_r+0x12>
 801827e:	2100      	movs	r1, #0
 8018280:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018284:	4620      	mov	r0, r4
 8018286:	4798      	blx	r3
 8018288:	2000      	movs	r0, #0
 801828a:	e7e0      	b.n	801824e <_raise_r+0x12>

0801828c <raise>:
 801828c:	4b02      	ldr	r3, [pc, #8]	@ (8018298 <raise+0xc>)
 801828e:	4601      	mov	r1, r0
 8018290:	6818      	ldr	r0, [r3, #0]
 8018292:	f7ff bfd3 	b.w	801823c <_raise_r>
 8018296:	bf00      	nop
 8018298:	20000054 	.word	0x20000054

0801829c <_kill_r>:
 801829c:	b538      	push	{r3, r4, r5, lr}
 801829e:	4d07      	ldr	r5, [pc, #28]	@ (80182bc <_kill_r+0x20>)
 80182a0:	2300      	movs	r3, #0
 80182a2:	4604      	mov	r4, r0
 80182a4:	4608      	mov	r0, r1
 80182a6:	4611      	mov	r1, r2
 80182a8:	602b      	str	r3, [r5, #0]
 80182aa:	f7ec f927 	bl	80044fc <_kill>
 80182ae:	1c43      	adds	r3, r0, #1
 80182b0:	d102      	bne.n	80182b8 <_kill_r+0x1c>
 80182b2:	682b      	ldr	r3, [r5, #0]
 80182b4:	b103      	cbz	r3, 80182b8 <_kill_r+0x1c>
 80182b6:	6023      	str	r3, [r4, #0]
 80182b8:	bd38      	pop	{r3, r4, r5, pc}
 80182ba:	bf00      	nop
 80182bc:	20004a70 	.word	0x20004a70

080182c0 <_getpid_r>:
 80182c0:	f7ec b914 	b.w	80044ec <_getpid>

080182c4 <__swhatbuf_r>:
 80182c4:	b570      	push	{r4, r5, r6, lr}
 80182c6:	460c      	mov	r4, r1
 80182c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182cc:	2900      	cmp	r1, #0
 80182ce:	b096      	sub	sp, #88	@ 0x58
 80182d0:	4615      	mov	r5, r2
 80182d2:	461e      	mov	r6, r3
 80182d4:	da0d      	bge.n	80182f2 <__swhatbuf_r+0x2e>
 80182d6:	89a3      	ldrh	r3, [r4, #12]
 80182d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80182dc:	f04f 0100 	mov.w	r1, #0
 80182e0:	bf14      	ite	ne
 80182e2:	2340      	movne	r3, #64	@ 0x40
 80182e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80182e8:	2000      	movs	r0, #0
 80182ea:	6031      	str	r1, [r6, #0]
 80182ec:	602b      	str	r3, [r5, #0]
 80182ee:	b016      	add	sp, #88	@ 0x58
 80182f0:	bd70      	pop	{r4, r5, r6, pc}
 80182f2:	466a      	mov	r2, sp
 80182f4:	f000 f848 	bl	8018388 <_fstat_r>
 80182f8:	2800      	cmp	r0, #0
 80182fa:	dbec      	blt.n	80182d6 <__swhatbuf_r+0x12>
 80182fc:	9901      	ldr	r1, [sp, #4]
 80182fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018302:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018306:	4259      	negs	r1, r3
 8018308:	4159      	adcs	r1, r3
 801830a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801830e:	e7eb      	b.n	80182e8 <__swhatbuf_r+0x24>

08018310 <__smakebuf_r>:
 8018310:	898b      	ldrh	r3, [r1, #12]
 8018312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018314:	079d      	lsls	r5, r3, #30
 8018316:	4606      	mov	r6, r0
 8018318:	460c      	mov	r4, r1
 801831a:	d507      	bpl.n	801832c <__smakebuf_r+0x1c>
 801831c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018320:	6023      	str	r3, [r4, #0]
 8018322:	6123      	str	r3, [r4, #16]
 8018324:	2301      	movs	r3, #1
 8018326:	6163      	str	r3, [r4, #20]
 8018328:	b003      	add	sp, #12
 801832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801832c:	ab01      	add	r3, sp, #4
 801832e:	466a      	mov	r2, sp
 8018330:	f7ff ffc8 	bl	80182c4 <__swhatbuf_r>
 8018334:	9f00      	ldr	r7, [sp, #0]
 8018336:	4605      	mov	r5, r0
 8018338:	4639      	mov	r1, r7
 801833a:	4630      	mov	r0, r6
 801833c:	f7fd fbcc 	bl	8015ad8 <_malloc_r>
 8018340:	b948      	cbnz	r0, 8018356 <__smakebuf_r+0x46>
 8018342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018346:	059a      	lsls	r2, r3, #22
 8018348:	d4ee      	bmi.n	8018328 <__smakebuf_r+0x18>
 801834a:	f023 0303 	bic.w	r3, r3, #3
 801834e:	f043 0302 	orr.w	r3, r3, #2
 8018352:	81a3      	strh	r3, [r4, #12]
 8018354:	e7e2      	b.n	801831c <__smakebuf_r+0xc>
 8018356:	89a3      	ldrh	r3, [r4, #12]
 8018358:	6020      	str	r0, [r4, #0]
 801835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801835e:	81a3      	strh	r3, [r4, #12]
 8018360:	9b01      	ldr	r3, [sp, #4]
 8018362:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018366:	b15b      	cbz	r3, 8018380 <__smakebuf_r+0x70>
 8018368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801836c:	4630      	mov	r0, r6
 801836e:	f000 f81d 	bl	80183ac <_isatty_r>
 8018372:	b128      	cbz	r0, 8018380 <__smakebuf_r+0x70>
 8018374:	89a3      	ldrh	r3, [r4, #12]
 8018376:	f023 0303 	bic.w	r3, r3, #3
 801837a:	f043 0301 	orr.w	r3, r3, #1
 801837e:	81a3      	strh	r3, [r4, #12]
 8018380:	89a3      	ldrh	r3, [r4, #12]
 8018382:	431d      	orrs	r5, r3
 8018384:	81a5      	strh	r5, [r4, #12]
 8018386:	e7cf      	b.n	8018328 <__smakebuf_r+0x18>

08018388 <_fstat_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	4d07      	ldr	r5, [pc, #28]	@ (80183a8 <_fstat_r+0x20>)
 801838c:	2300      	movs	r3, #0
 801838e:	4604      	mov	r4, r0
 8018390:	4608      	mov	r0, r1
 8018392:	4611      	mov	r1, r2
 8018394:	602b      	str	r3, [r5, #0]
 8018396:	f7ec f911 	bl	80045bc <_fstat>
 801839a:	1c43      	adds	r3, r0, #1
 801839c:	d102      	bne.n	80183a4 <_fstat_r+0x1c>
 801839e:	682b      	ldr	r3, [r5, #0]
 80183a0:	b103      	cbz	r3, 80183a4 <_fstat_r+0x1c>
 80183a2:	6023      	str	r3, [r4, #0]
 80183a4:	bd38      	pop	{r3, r4, r5, pc}
 80183a6:	bf00      	nop
 80183a8:	20004a70 	.word	0x20004a70

080183ac <_isatty_r>:
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	4d06      	ldr	r5, [pc, #24]	@ (80183c8 <_isatty_r+0x1c>)
 80183b0:	2300      	movs	r3, #0
 80183b2:	4604      	mov	r4, r0
 80183b4:	4608      	mov	r0, r1
 80183b6:	602b      	str	r3, [r5, #0]
 80183b8:	f7ec f910 	bl	80045dc <_isatty>
 80183bc:	1c43      	adds	r3, r0, #1
 80183be:	d102      	bne.n	80183c6 <_isatty_r+0x1a>
 80183c0:	682b      	ldr	r3, [r5, #0]
 80183c2:	b103      	cbz	r3, 80183c6 <_isatty_r+0x1a>
 80183c4:	6023      	str	r3, [r4, #0]
 80183c6:	bd38      	pop	{r3, r4, r5, pc}
 80183c8:	20004a70 	.word	0x20004a70

080183cc <atan2f>:
 80183cc:	f000 b9ae 	b.w	801872c <__ieee754_atan2f>

080183d0 <powf>:
 80183d0:	b508      	push	{r3, lr}
 80183d2:	ed2d 8b04 	vpush	{d8-d9}
 80183d6:	eeb0 8a60 	vmov.f32	s16, s1
 80183da:	eeb0 9a40 	vmov.f32	s18, s0
 80183de:	f000 fa45 	bl	801886c <__ieee754_powf>
 80183e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80183e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ea:	eef0 8a40 	vmov.f32	s17, s0
 80183ee:	d63e      	bvs.n	801846e <powf+0x9e>
 80183f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80183f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f8:	d112      	bne.n	8018420 <powf+0x50>
 80183fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80183fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018402:	d039      	beq.n	8018478 <powf+0xa8>
 8018404:	eeb0 0a48 	vmov.f32	s0, s16
 8018408:	f000 f8e2 	bl	80185d0 <finitef>
 801840c:	b378      	cbz	r0, 801846e <powf+0x9e>
 801840e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018416:	d52a      	bpl.n	801846e <powf+0x9e>
 8018418:	f7fc fc50 	bl	8014cbc <__errno>
 801841c:	2322      	movs	r3, #34	@ 0x22
 801841e:	e014      	b.n	801844a <powf+0x7a>
 8018420:	f000 f8d6 	bl	80185d0 <finitef>
 8018424:	b998      	cbnz	r0, 801844e <powf+0x7e>
 8018426:	eeb0 0a49 	vmov.f32	s0, s18
 801842a:	f000 f8d1 	bl	80185d0 <finitef>
 801842e:	b170      	cbz	r0, 801844e <powf+0x7e>
 8018430:	eeb0 0a48 	vmov.f32	s0, s16
 8018434:	f000 f8cc 	bl	80185d0 <finitef>
 8018438:	b148      	cbz	r0, 801844e <powf+0x7e>
 801843a:	eef4 8a68 	vcmp.f32	s17, s17
 801843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018442:	d7e9      	bvc.n	8018418 <powf+0x48>
 8018444:	f7fc fc3a 	bl	8014cbc <__errno>
 8018448:	2321      	movs	r3, #33	@ 0x21
 801844a:	6003      	str	r3, [r0, #0]
 801844c:	e00f      	b.n	801846e <powf+0x9e>
 801844e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018456:	d10a      	bne.n	801846e <powf+0x9e>
 8018458:	eeb0 0a49 	vmov.f32	s0, s18
 801845c:	f000 f8b8 	bl	80185d0 <finitef>
 8018460:	b128      	cbz	r0, 801846e <powf+0x9e>
 8018462:	eeb0 0a48 	vmov.f32	s0, s16
 8018466:	f000 f8b3 	bl	80185d0 <finitef>
 801846a:	2800      	cmp	r0, #0
 801846c:	d1d4      	bne.n	8018418 <powf+0x48>
 801846e:	eeb0 0a68 	vmov.f32	s0, s17
 8018472:	ecbd 8b04 	vpop	{d8-d9}
 8018476:	bd08      	pop	{r3, pc}
 8018478:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801847c:	e7f7      	b.n	801846e <powf+0x9e>
	...

08018480 <sqrtf>:
 8018480:	b508      	push	{r3, lr}
 8018482:	ed2d 8b02 	vpush	{d8}
 8018486:	eeb0 8a40 	vmov.f32	s16, s0
 801848a:	f000 f8ab 	bl	80185e4 <__ieee754_sqrtf>
 801848e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	d60c      	bvs.n	80184b2 <sqrtf+0x32>
 8018498:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80184b8 <sqrtf+0x38>
 801849c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80184a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a4:	d505      	bpl.n	80184b2 <sqrtf+0x32>
 80184a6:	f7fc fc09 	bl	8014cbc <__errno>
 80184aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80184ae:	2321      	movs	r3, #33	@ 0x21
 80184b0:	6003      	str	r3, [r0, #0]
 80184b2:	ecbd 8b02 	vpop	{d8}
 80184b6:	bd08      	pop	{r3, pc}
 80184b8:	00000000 	.word	0x00000000

080184bc <cosf>:
 80184bc:	ee10 3a10 	vmov	r3, s0
 80184c0:	b507      	push	{r0, r1, r2, lr}
 80184c2:	4a1e      	ldr	r2, [pc, #120]	@ (801853c <cosf+0x80>)
 80184c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80184c8:	4293      	cmp	r3, r2
 80184ca:	d806      	bhi.n	80184da <cosf+0x1e>
 80184cc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018540 <cosf+0x84>
 80184d0:	b003      	add	sp, #12
 80184d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80184d6:	f000 b889 	b.w	80185ec <__kernel_cosf>
 80184da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80184de:	d304      	bcc.n	80184ea <cosf+0x2e>
 80184e0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80184e4:	b003      	add	sp, #12
 80184e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80184ea:	4668      	mov	r0, sp
 80184ec:	f000 fc8c 	bl	8018e08 <__ieee754_rem_pio2f>
 80184f0:	f000 0003 	and.w	r0, r0, #3
 80184f4:	2801      	cmp	r0, #1
 80184f6:	d009      	beq.n	801850c <cosf+0x50>
 80184f8:	2802      	cmp	r0, #2
 80184fa:	d010      	beq.n	801851e <cosf+0x62>
 80184fc:	b9b0      	cbnz	r0, 801852c <cosf+0x70>
 80184fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8018502:	ed9d 0a00 	vldr	s0, [sp]
 8018506:	f000 f871 	bl	80185ec <__kernel_cosf>
 801850a:	e7eb      	b.n	80184e4 <cosf+0x28>
 801850c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018510:	ed9d 0a00 	vldr	s0, [sp]
 8018514:	f000 f8c2 	bl	801869c <__kernel_sinf>
 8018518:	eeb1 0a40 	vneg.f32	s0, s0
 801851c:	e7e2      	b.n	80184e4 <cosf+0x28>
 801851e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018522:	ed9d 0a00 	vldr	s0, [sp]
 8018526:	f000 f861 	bl	80185ec <__kernel_cosf>
 801852a:	e7f5      	b.n	8018518 <cosf+0x5c>
 801852c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018530:	ed9d 0a00 	vldr	s0, [sp]
 8018534:	2001      	movs	r0, #1
 8018536:	f000 f8b1 	bl	801869c <__kernel_sinf>
 801853a:	e7d3      	b.n	80184e4 <cosf+0x28>
 801853c:	3f490fd8 	.word	0x3f490fd8
 8018540:	00000000 	.word	0x00000000

08018544 <sinf>:
 8018544:	ee10 3a10 	vmov	r3, s0
 8018548:	b507      	push	{r0, r1, r2, lr}
 801854a:	4a1f      	ldr	r2, [pc, #124]	@ (80185c8 <sinf+0x84>)
 801854c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018550:	4293      	cmp	r3, r2
 8018552:	d807      	bhi.n	8018564 <sinf+0x20>
 8018554:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80185cc <sinf+0x88>
 8018558:	2000      	movs	r0, #0
 801855a:	b003      	add	sp, #12
 801855c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018560:	f000 b89c 	b.w	801869c <__kernel_sinf>
 8018564:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018568:	d304      	bcc.n	8018574 <sinf+0x30>
 801856a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801856e:	b003      	add	sp, #12
 8018570:	f85d fb04 	ldr.w	pc, [sp], #4
 8018574:	4668      	mov	r0, sp
 8018576:	f000 fc47 	bl	8018e08 <__ieee754_rem_pio2f>
 801857a:	f000 0003 	and.w	r0, r0, #3
 801857e:	2801      	cmp	r0, #1
 8018580:	d00a      	beq.n	8018598 <sinf+0x54>
 8018582:	2802      	cmp	r0, #2
 8018584:	d00f      	beq.n	80185a6 <sinf+0x62>
 8018586:	b9c0      	cbnz	r0, 80185ba <sinf+0x76>
 8018588:	eddd 0a01 	vldr	s1, [sp, #4]
 801858c:	ed9d 0a00 	vldr	s0, [sp]
 8018590:	2001      	movs	r0, #1
 8018592:	f000 f883 	bl	801869c <__kernel_sinf>
 8018596:	e7ea      	b.n	801856e <sinf+0x2a>
 8018598:	eddd 0a01 	vldr	s1, [sp, #4]
 801859c:	ed9d 0a00 	vldr	s0, [sp]
 80185a0:	f000 f824 	bl	80185ec <__kernel_cosf>
 80185a4:	e7e3      	b.n	801856e <sinf+0x2a>
 80185a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80185aa:	ed9d 0a00 	vldr	s0, [sp]
 80185ae:	2001      	movs	r0, #1
 80185b0:	f000 f874 	bl	801869c <__kernel_sinf>
 80185b4:	eeb1 0a40 	vneg.f32	s0, s0
 80185b8:	e7d9      	b.n	801856e <sinf+0x2a>
 80185ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80185be:	ed9d 0a00 	vldr	s0, [sp]
 80185c2:	f000 f813 	bl	80185ec <__kernel_cosf>
 80185c6:	e7f5      	b.n	80185b4 <sinf+0x70>
 80185c8:	3f490fd8 	.word	0x3f490fd8
 80185cc:	00000000 	.word	0x00000000

080185d0 <finitef>:
 80185d0:	ee10 3a10 	vmov	r3, s0
 80185d4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80185d8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80185dc:	bfac      	ite	ge
 80185de:	2000      	movge	r0, #0
 80185e0:	2001      	movlt	r0, #1
 80185e2:	4770      	bx	lr

080185e4 <__ieee754_sqrtf>:
 80185e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80185e8:	4770      	bx	lr
	...

080185ec <__kernel_cosf>:
 80185ec:	ee10 3a10 	vmov	r3, s0
 80185f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80185f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80185f8:	eef0 6a40 	vmov.f32	s13, s0
 80185fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018600:	d204      	bcs.n	801860c <__kernel_cosf+0x20>
 8018602:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018606:	ee17 2a90 	vmov	r2, s15
 801860a:	b342      	cbz	r2, 801865e <__kernel_cosf+0x72>
 801860c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018610:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801867c <__kernel_cosf+0x90>
 8018614:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018680 <__kernel_cosf+0x94>
 8018618:	4a1a      	ldr	r2, [pc, #104]	@ (8018684 <__kernel_cosf+0x98>)
 801861a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801861e:	4293      	cmp	r3, r2
 8018620:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018688 <__kernel_cosf+0x9c>
 8018624:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018628:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801868c <__kernel_cosf+0xa0>
 801862c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018630:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018690 <__kernel_cosf+0xa4>
 8018634:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018638:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8018694 <__kernel_cosf+0xa8>
 801863c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018640:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018644:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018648:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801864c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018654:	d804      	bhi.n	8018660 <__kernel_cosf+0x74>
 8018656:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801865a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801865e:	4770      	bx	lr
 8018660:	4a0d      	ldr	r2, [pc, #52]	@ (8018698 <__kernel_cosf+0xac>)
 8018662:	4293      	cmp	r3, r2
 8018664:	bf9a      	itte	ls
 8018666:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801866a:	ee07 3a10 	vmovls	s14, r3
 801866e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018672:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801867a:	e7ec      	b.n	8018656 <__kernel_cosf+0x6a>
 801867c:	ad47d74e 	.word	0xad47d74e
 8018680:	310f74f6 	.word	0x310f74f6
 8018684:	3e999999 	.word	0x3e999999
 8018688:	b493f27c 	.word	0xb493f27c
 801868c:	37d00d01 	.word	0x37d00d01
 8018690:	bab60b61 	.word	0xbab60b61
 8018694:	3d2aaaab 	.word	0x3d2aaaab
 8018698:	3f480000 	.word	0x3f480000

0801869c <__kernel_sinf>:
 801869c:	ee10 3a10 	vmov	r3, s0
 80186a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80186a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80186a8:	d204      	bcs.n	80186b4 <__kernel_sinf+0x18>
 80186aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80186ae:	ee17 3a90 	vmov	r3, s15
 80186b2:	b35b      	cbz	r3, 801870c <__kernel_sinf+0x70>
 80186b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80186b8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018710 <__kernel_sinf+0x74>
 80186bc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018714 <__kernel_sinf+0x78>
 80186c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80186c4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018718 <__kernel_sinf+0x7c>
 80186c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80186cc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801871c <__kernel_sinf+0x80>
 80186d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80186d4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018720 <__kernel_sinf+0x84>
 80186d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80186dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80186e0:	b930      	cbnz	r0, 80186f0 <__kernel_sinf+0x54>
 80186e2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018724 <__kernel_sinf+0x88>
 80186e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80186ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 80186ee:	4770      	bx	lr
 80186f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80186f4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80186f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80186fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018700:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018728 <__kernel_sinf+0x8c>
 8018704:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018708:	ee30 0a60 	vsub.f32	s0, s0, s1
 801870c:	4770      	bx	lr
 801870e:	bf00      	nop
 8018710:	2f2ec9d3 	.word	0x2f2ec9d3
 8018714:	b2d72f34 	.word	0xb2d72f34
 8018718:	3638ef1b 	.word	0x3638ef1b
 801871c:	b9500d01 	.word	0xb9500d01
 8018720:	3c088889 	.word	0x3c088889
 8018724:	be2aaaab 	.word	0xbe2aaaab
 8018728:	3e2aaaab 	.word	0x3e2aaaab

0801872c <__ieee754_atan2f>:
 801872c:	ee10 2a90 	vmov	r2, s1
 8018730:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8018734:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018738:	b510      	push	{r4, lr}
 801873a:	eef0 7a40 	vmov.f32	s15, s0
 801873e:	d806      	bhi.n	801874e <__ieee754_atan2f+0x22>
 8018740:	ee10 0a10 	vmov	r0, s0
 8018744:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8018748:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801874c:	d904      	bls.n	8018758 <__ieee754_atan2f+0x2c>
 801874e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018752:	eeb0 0a67 	vmov.f32	s0, s15
 8018756:	bd10      	pop	{r4, pc}
 8018758:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801875c:	d103      	bne.n	8018766 <__ieee754_atan2f+0x3a>
 801875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018762:	f000 bc81 	b.w	8019068 <atanf>
 8018766:	1794      	asrs	r4, r2, #30
 8018768:	f004 0402 	and.w	r4, r4, #2
 801876c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018770:	b943      	cbnz	r3, 8018784 <__ieee754_atan2f+0x58>
 8018772:	2c02      	cmp	r4, #2
 8018774:	d05e      	beq.n	8018834 <__ieee754_atan2f+0x108>
 8018776:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8018848 <__ieee754_atan2f+0x11c>
 801877a:	2c03      	cmp	r4, #3
 801877c:	bf08      	it	eq
 801877e:	eef0 7a47 	vmoveq.f32	s15, s14
 8018782:	e7e6      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018784:	b941      	cbnz	r1, 8018798 <__ieee754_atan2f+0x6c>
 8018786:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801884c <__ieee754_atan2f+0x120>
 801878a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8018850 <__ieee754_atan2f+0x124>
 801878e:	2800      	cmp	r0, #0
 8018790:	bfa8      	it	ge
 8018792:	eef0 7a47 	vmovge.f32	s15, s14
 8018796:	e7dc      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018798:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801879c:	d110      	bne.n	80187c0 <__ieee754_atan2f+0x94>
 801879e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80187a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80187a6:	d107      	bne.n	80187b8 <__ieee754_atan2f+0x8c>
 80187a8:	2c02      	cmp	r4, #2
 80187aa:	d846      	bhi.n	801883a <__ieee754_atan2f+0x10e>
 80187ac:	4b29      	ldr	r3, [pc, #164]	@ (8018854 <__ieee754_atan2f+0x128>)
 80187ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80187b2:	edd3 7a00 	vldr	s15, [r3]
 80187b6:	e7cc      	b.n	8018752 <__ieee754_atan2f+0x26>
 80187b8:	2c02      	cmp	r4, #2
 80187ba:	d841      	bhi.n	8018840 <__ieee754_atan2f+0x114>
 80187bc:	4b26      	ldr	r3, [pc, #152]	@ (8018858 <__ieee754_atan2f+0x12c>)
 80187be:	e7f6      	b.n	80187ae <__ieee754_atan2f+0x82>
 80187c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80187c4:	d0df      	beq.n	8018786 <__ieee754_atan2f+0x5a>
 80187c6:	1a5b      	subs	r3, r3, r1
 80187c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80187cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80187d0:	da1a      	bge.n	8018808 <__ieee754_atan2f+0xdc>
 80187d2:	2a00      	cmp	r2, #0
 80187d4:	da01      	bge.n	80187da <__ieee754_atan2f+0xae>
 80187d6:	313c      	adds	r1, #60	@ 0x3c
 80187d8:	db19      	blt.n	801880e <__ieee754_atan2f+0xe2>
 80187da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80187de:	f000 fd17 	bl	8019210 <fabsf>
 80187e2:	f000 fc41 	bl	8019068 <atanf>
 80187e6:	eef0 7a40 	vmov.f32	s15, s0
 80187ea:	2c01      	cmp	r4, #1
 80187ec:	d012      	beq.n	8018814 <__ieee754_atan2f+0xe8>
 80187ee:	2c02      	cmp	r4, #2
 80187f0:	d017      	beq.n	8018822 <__ieee754_atan2f+0xf6>
 80187f2:	2c00      	cmp	r4, #0
 80187f4:	d0ad      	beq.n	8018752 <__ieee754_atan2f+0x26>
 80187f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801885c <__ieee754_atan2f+0x130>
 80187fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80187fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8018860 <__ieee754_atan2f+0x134>
 8018802:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018806:	e7a4      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018808:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018850 <__ieee754_atan2f+0x124>
 801880c:	e7ed      	b.n	80187ea <__ieee754_atan2f+0xbe>
 801880e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018864 <__ieee754_atan2f+0x138>
 8018812:	e7ea      	b.n	80187ea <__ieee754_atan2f+0xbe>
 8018814:	ee17 3a90 	vmov	r3, s15
 8018818:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801881c:	ee07 3a90 	vmov	s15, r3
 8018820:	e797      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018822:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801885c <__ieee754_atan2f+0x130>
 8018826:	ee77 7a87 	vadd.f32	s15, s15, s14
 801882a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8018860 <__ieee754_atan2f+0x134>
 801882e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018832:	e78e      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018834:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8018860 <__ieee754_atan2f+0x134>
 8018838:	e78b      	b.n	8018752 <__ieee754_atan2f+0x26>
 801883a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8018868 <__ieee754_atan2f+0x13c>
 801883e:	e788      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018840:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018864 <__ieee754_atan2f+0x138>
 8018844:	e785      	b.n	8018752 <__ieee754_atan2f+0x26>
 8018846:	bf00      	nop
 8018848:	c0490fdb 	.word	0xc0490fdb
 801884c:	bfc90fdb 	.word	0xbfc90fdb
 8018850:	3fc90fdb 	.word	0x3fc90fdb
 8018854:	0801bfe0 	.word	0x0801bfe0
 8018858:	0801bfd4 	.word	0x0801bfd4
 801885c:	33bbbd2e 	.word	0x33bbbd2e
 8018860:	40490fdb 	.word	0x40490fdb
 8018864:	00000000 	.word	0x00000000
 8018868:	3f490fdb 	.word	0x3f490fdb

0801886c <__ieee754_powf>:
 801886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018870:	ee10 4a90 	vmov	r4, s1
 8018874:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018878:	ed2d 8b02 	vpush	{d8}
 801887c:	ee10 6a10 	vmov	r6, s0
 8018880:	eeb0 8a40 	vmov.f32	s16, s0
 8018884:	eef0 8a60 	vmov.f32	s17, s1
 8018888:	d10c      	bne.n	80188a4 <__ieee754_powf+0x38>
 801888a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801888e:	0076      	lsls	r6, r6, #1
 8018890:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018894:	f240 8274 	bls.w	8018d80 <__ieee754_powf+0x514>
 8018898:	ee38 0a28 	vadd.f32	s0, s16, s17
 801889c:	ecbd 8b02 	vpop	{d8}
 80188a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188a4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80188a8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80188ac:	d802      	bhi.n	80188b4 <__ieee754_powf+0x48>
 80188ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80188b2:	d908      	bls.n	80188c6 <__ieee754_powf+0x5a>
 80188b4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80188b8:	d1ee      	bne.n	8018898 <__ieee754_powf+0x2c>
 80188ba:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80188be:	0064      	lsls	r4, r4, #1
 80188c0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80188c4:	e7e6      	b.n	8018894 <__ieee754_powf+0x28>
 80188c6:	2e00      	cmp	r6, #0
 80188c8:	da1f      	bge.n	801890a <__ieee754_powf+0x9e>
 80188ca:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80188ce:	f080 8260 	bcs.w	8018d92 <__ieee754_powf+0x526>
 80188d2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80188d6:	d32f      	bcc.n	8018938 <__ieee754_powf+0xcc>
 80188d8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80188dc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80188e0:	fa49 f503 	asr.w	r5, r9, r3
 80188e4:	fa05 f303 	lsl.w	r3, r5, r3
 80188e8:	454b      	cmp	r3, r9
 80188ea:	d123      	bne.n	8018934 <__ieee754_powf+0xc8>
 80188ec:	f005 0501 	and.w	r5, r5, #1
 80188f0:	f1c5 0502 	rsb	r5, r5, #2
 80188f4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80188f8:	d11f      	bne.n	801893a <__ieee754_powf+0xce>
 80188fa:	2c00      	cmp	r4, #0
 80188fc:	f280 8246 	bge.w	8018d8c <__ieee754_powf+0x520>
 8018900:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018904:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018908:	e7c8      	b.n	801889c <__ieee754_powf+0x30>
 801890a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801890e:	d111      	bne.n	8018934 <__ieee754_powf+0xc8>
 8018910:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018914:	f000 8234 	beq.w	8018d80 <__ieee754_powf+0x514>
 8018918:	d906      	bls.n	8018928 <__ieee754_powf+0xbc>
 801891a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018c30 <__ieee754_powf+0x3c4>
 801891e:	2c00      	cmp	r4, #0
 8018920:	bfa8      	it	ge
 8018922:	eeb0 0a68 	vmovge.f32	s0, s17
 8018926:	e7b9      	b.n	801889c <__ieee754_powf+0x30>
 8018928:	2c00      	cmp	r4, #0
 801892a:	f280 822c 	bge.w	8018d86 <__ieee754_powf+0x51a>
 801892e:	eeb1 0a68 	vneg.f32	s0, s17
 8018932:	e7b3      	b.n	801889c <__ieee754_powf+0x30>
 8018934:	2500      	movs	r5, #0
 8018936:	e7dd      	b.n	80188f4 <__ieee754_powf+0x88>
 8018938:	2500      	movs	r5, #0
 801893a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801893e:	d102      	bne.n	8018946 <__ieee754_powf+0xda>
 8018940:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018944:	e7aa      	b.n	801889c <__ieee754_powf+0x30>
 8018946:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801894a:	f040 8227 	bne.w	8018d9c <__ieee754_powf+0x530>
 801894e:	2e00      	cmp	r6, #0
 8018950:	f2c0 8224 	blt.w	8018d9c <__ieee754_powf+0x530>
 8018954:	eeb0 0a48 	vmov.f32	s0, s16
 8018958:	ecbd 8b02 	vpop	{d8}
 801895c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018960:	f7ff be40 	b.w	80185e4 <__ieee754_sqrtf>
 8018964:	2d01      	cmp	r5, #1
 8018966:	d199      	bne.n	801889c <__ieee754_powf+0x30>
 8018968:	eeb1 0a40 	vneg.f32	s0, s0
 801896c:	e796      	b.n	801889c <__ieee754_powf+0x30>
 801896e:	0ff0      	lsrs	r0, r6, #31
 8018970:	3801      	subs	r0, #1
 8018972:	ea55 0300 	orrs.w	r3, r5, r0
 8018976:	d104      	bne.n	8018982 <__ieee754_powf+0x116>
 8018978:	ee38 8a48 	vsub.f32	s16, s16, s16
 801897c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018980:	e78c      	b.n	801889c <__ieee754_powf+0x30>
 8018982:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8018986:	d96d      	bls.n	8018a64 <__ieee754_powf+0x1f8>
 8018988:	4baa      	ldr	r3, [pc, #680]	@ (8018c34 <__ieee754_powf+0x3c8>)
 801898a:	4598      	cmp	r8, r3
 801898c:	d808      	bhi.n	80189a0 <__ieee754_powf+0x134>
 801898e:	2c00      	cmp	r4, #0
 8018990:	da0b      	bge.n	80189aa <__ieee754_powf+0x13e>
 8018992:	2000      	movs	r0, #0
 8018994:	ecbd 8b02 	vpop	{d8}
 8018998:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801899c:	f000 bcc6 	b.w	801932c <__math_oflowf>
 80189a0:	4ba5      	ldr	r3, [pc, #660]	@ (8018c38 <__ieee754_powf+0x3cc>)
 80189a2:	4598      	cmp	r8, r3
 80189a4:	d908      	bls.n	80189b8 <__ieee754_powf+0x14c>
 80189a6:	2c00      	cmp	r4, #0
 80189a8:	dcf3      	bgt.n	8018992 <__ieee754_powf+0x126>
 80189aa:	2000      	movs	r0, #0
 80189ac:	ecbd 8b02 	vpop	{d8}
 80189b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189b4:	f000 bcb4 	b.w	8019320 <__math_uflowf>
 80189b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80189bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189c0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018c3c <__ieee754_powf+0x3d0>
 80189c4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80189c8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80189cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80189d0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80189d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80189d8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018c40 <__ieee754_powf+0x3d4>
 80189dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189e0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018c44 <__ieee754_powf+0x3d8>
 80189e4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80189e8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8018c48 <__ieee754_powf+0x3dc>
 80189ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 80189f0:	eeb0 7a67 	vmov.f32	s14, s15
 80189f4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80189f8:	ee17 3a10 	vmov	r3, s14
 80189fc:	f36f 030b 	bfc	r3, #0, #12
 8018a00:	ee07 3a10 	vmov	s14, r3
 8018a04:	eeb0 6a47 	vmov.f32	s12, s14
 8018a08:	eea0 6a66 	vfms.f32	s12, s0, s13
 8018a0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018a10:	3d01      	subs	r5, #1
 8018a12:	4305      	orrs	r5, r0
 8018a14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018a18:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018a1c:	f36f 040b 	bfc	r4, #0, #12
 8018a20:	bf18      	it	ne
 8018a22:	eeb0 8a66 	vmovne.f32	s16, s13
 8018a26:	ee06 4a90 	vmov	s13, r4
 8018a2a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018a2e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018a32:	ee67 7a26 	vmul.f32	s15, s14, s13
 8018a36:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018a3a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018a3e:	ee17 1a10 	vmov	r1, s14
 8018a42:	2900      	cmp	r1, #0
 8018a44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018a48:	f340 80dd 	ble.w	8018c06 <__ieee754_powf+0x39a>
 8018a4c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018a50:	f240 80ca 	bls.w	8018be8 <__ieee754_powf+0x37c>
 8018a54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a5c:	bf4c      	ite	mi
 8018a5e:	2001      	movmi	r0, #1
 8018a60:	2000      	movpl	r0, #0
 8018a62:	e797      	b.n	8018994 <__ieee754_powf+0x128>
 8018a64:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018a68:	bf01      	itttt	eq
 8018a6a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018c4c <__ieee754_powf+0x3e0>
 8018a6e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018a72:	f06f 0317 	mvneq.w	r3, #23
 8018a76:	ee17 7a90 	vmoveq	r7, s15
 8018a7a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018a7e:	bf18      	it	ne
 8018a80:	2300      	movne	r3, #0
 8018a82:	3a7f      	subs	r2, #127	@ 0x7f
 8018a84:	441a      	add	r2, r3
 8018a86:	4b72      	ldr	r3, [pc, #456]	@ (8018c50 <__ieee754_powf+0x3e4>)
 8018a88:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018a8c:	429f      	cmp	r7, r3
 8018a8e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018a92:	dd06      	ble.n	8018aa2 <__ieee754_powf+0x236>
 8018a94:	4b6f      	ldr	r3, [pc, #444]	@ (8018c54 <__ieee754_powf+0x3e8>)
 8018a96:	429f      	cmp	r7, r3
 8018a98:	f340 80a4 	ble.w	8018be4 <__ieee754_powf+0x378>
 8018a9c:	3201      	adds	r2, #1
 8018a9e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018aa2:	2600      	movs	r6, #0
 8018aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8018c58 <__ieee754_powf+0x3ec>)
 8018aa6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018aaa:	ee07 1a10 	vmov	s14, r1
 8018aae:	edd3 5a00 	vldr	s11, [r3]
 8018ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8018c5c <__ieee754_powf+0x3f0>)
 8018ab4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8018ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018abc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018ac0:	1049      	asrs	r1, r1, #1
 8018ac2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8018ac6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8018aca:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8018ace:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018ad2:	ee07 1a90 	vmov	s15, r1
 8018ad6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8018ada:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018ade:	ee15 7a10 	vmov	r7, s10
 8018ae2:	401f      	ands	r7, r3
 8018ae4:	ee06 7a90 	vmov	s13, r7
 8018ae8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018aec:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018af0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018af4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018af8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018c60 <__ieee754_powf+0x3f4>
 8018afc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018c64 <__ieee754_powf+0x3f8>
 8018b00:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018b04:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018c68 <__ieee754_powf+0x3fc>
 8018b08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018b0c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018c3c <__ieee754_powf+0x3d0>
 8018b10:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018b14:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018c6c <__ieee754_powf+0x400>
 8018b18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018b1c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018c70 <__ieee754_powf+0x404>
 8018b20:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018b24:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018b28:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018b2c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018b30:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b34:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018b38:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018b3c:	eef0 5a67 	vmov.f32	s11, s15
 8018b40:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018b44:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018b48:	ee15 1a90 	vmov	r1, s11
 8018b4c:	4019      	ands	r1, r3
 8018b4e:	ee05 1a90 	vmov	s11, r1
 8018b52:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018b56:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b5e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018b62:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018b66:	eeb0 6a67 	vmov.f32	s12, s15
 8018b6a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018b6e:	ee16 1a10 	vmov	r1, s12
 8018b72:	4019      	ands	r1, r3
 8018b74:	ee06 1a10 	vmov	s12, r1
 8018b78:	eeb0 7a46 	vmov.f32	s14, s12
 8018b7c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018b80:	493c      	ldr	r1, [pc, #240]	@ (8018c74 <__ieee754_powf+0x408>)
 8018b82:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8018b86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b8a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018c78 <__ieee754_powf+0x40c>
 8018b8e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018c7c <__ieee754_powf+0x410>
 8018b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b96:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018c80 <__ieee754_powf+0x414>
 8018b9a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b9e:	ed91 7a00 	vldr	s14, [r1]
 8018ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ba6:	ee07 2a10 	vmov	s14, r2
 8018baa:	4a36      	ldr	r2, [pc, #216]	@ (8018c84 <__ieee754_powf+0x418>)
 8018bac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018bb0:	eeb0 7a67 	vmov.f32	s14, s15
 8018bb4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018bb8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018bbc:	ed92 5a00 	vldr	s10, [r2]
 8018bc0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018bc4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018bc8:	ee17 2a10 	vmov	r2, s14
 8018bcc:	401a      	ands	r2, r3
 8018bce:	ee07 2a10 	vmov	s14, r2
 8018bd2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018bd6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8018bda:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018bde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018be2:	e715      	b.n	8018a10 <__ieee754_powf+0x1a4>
 8018be4:	2601      	movs	r6, #1
 8018be6:	e75d      	b.n	8018aa4 <__ieee754_powf+0x238>
 8018be8:	d152      	bne.n	8018c90 <__ieee754_powf+0x424>
 8018bea:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018c88 <__ieee754_powf+0x41c>
 8018bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018bf2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018bf6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bfe:	f73f af29 	bgt.w	8018a54 <__ieee754_powf+0x1e8>
 8018c02:	2386      	movs	r3, #134	@ 0x86
 8018c04:	e048      	b.n	8018c98 <__ieee754_powf+0x42c>
 8018c06:	4a21      	ldr	r2, [pc, #132]	@ (8018c8c <__ieee754_powf+0x420>)
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	d907      	bls.n	8018c1c <__ieee754_powf+0x3b0>
 8018c0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c14:	bf4c      	ite	mi
 8018c16:	2001      	movmi	r0, #1
 8018c18:	2000      	movpl	r0, #0
 8018c1a:	e6c7      	b.n	80189ac <__ieee754_powf+0x140>
 8018c1c:	d138      	bne.n	8018c90 <__ieee754_powf+0x424>
 8018c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018c22:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c2a:	dbea      	blt.n	8018c02 <__ieee754_powf+0x396>
 8018c2c:	e7ee      	b.n	8018c0c <__ieee754_powf+0x3a0>
 8018c2e:	bf00      	nop
 8018c30:	00000000 	.word	0x00000000
 8018c34:	3f7ffff3 	.word	0x3f7ffff3
 8018c38:	3f800007 	.word	0x3f800007
 8018c3c:	3eaaaaab 	.word	0x3eaaaaab
 8018c40:	3fb8aa00 	.word	0x3fb8aa00
 8018c44:	3fb8aa3b 	.word	0x3fb8aa3b
 8018c48:	36eca570 	.word	0x36eca570
 8018c4c:	4b800000 	.word	0x4b800000
 8018c50:	001cc471 	.word	0x001cc471
 8018c54:	005db3d6 	.word	0x005db3d6
 8018c58:	0801bffc 	.word	0x0801bffc
 8018c5c:	fffff000 	.word	0xfffff000
 8018c60:	3e6c3255 	.word	0x3e6c3255
 8018c64:	3e53f142 	.word	0x3e53f142
 8018c68:	3e8ba305 	.word	0x3e8ba305
 8018c6c:	3edb6db7 	.word	0x3edb6db7
 8018c70:	3f19999a 	.word	0x3f19999a
 8018c74:	0801bfec 	.word	0x0801bfec
 8018c78:	3f76384f 	.word	0x3f76384f
 8018c7c:	3f763800 	.word	0x3f763800
 8018c80:	369dc3a0 	.word	0x369dc3a0
 8018c84:	0801bff4 	.word	0x0801bff4
 8018c88:	3338aa3c 	.word	0x3338aa3c
 8018c8c:	43160000 	.word	0x43160000
 8018c90:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018c94:	d96f      	bls.n	8018d76 <__ieee754_powf+0x50a>
 8018c96:	15db      	asrs	r3, r3, #23
 8018c98:	3b7e      	subs	r3, #126	@ 0x7e
 8018c9a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018c9e:	4118      	asrs	r0, r3
 8018ca0:	4408      	add	r0, r1
 8018ca2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8018de0 <__ieee754_powf+0x574>)
 8018ca8:	3b7f      	subs	r3, #127	@ 0x7f
 8018caa:	411a      	asrs	r2, r3
 8018cac:	4002      	ands	r2, r0
 8018cae:	ee07 2a10 	vmov	s14, r2
 8018cb2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8018cb6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8018cba:	f1c3 0317 	rsb	r3, r3, #23
 8018cbe:	4118      	asrs	r0, r3
 8018cc0:	2900      	cmp	r1, #0
 8018cc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018cc6:	bfb8      	it	lt
 8018cc8:	4240      	neglt	r0, r0
 8018cca:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018cce:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018de4 <__ieee754_powf+0x578>
 8018cd2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8018de8 <__ieee754_powf+0x57c>
 8018cd6:	ee16 3a90 	vmov	r3, s13
 8018cda:	f36f 030b 	bfc	r3, #0, #12
 8018cde:	ee06 3a90 	vmov	s13, r3
 8018ce2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018ce6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018cea:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018cee:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8018dec <__ieee754_powf+0x580>
 8018cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018cf6:	eee0 7a87 	vfma.f32	s15, s1, s14
 8018cfa:	eeb0 7a67 	vmov.f32	s14, s15
 8018cfe:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018d02:	eef0 5a47 	vmov.f32	s11, s14
 8018d06:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8018d0a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018d0e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018d12:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8018df0 <__ieee754_powf+0x584>
 8018d16:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8018df4 <__ieee754_powf+0x588>
 8018d1a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018d1e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8018df8 <__ieee754_powf+0x58c>
 8018d22:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018d26:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018dfc <__ieee754_powf+0x590>
 8018d2a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018d2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018e00 <__ieee754_powf+0x594>
 8018d32:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018d36:	eeb0 6a47 	vmov.f32	s12, s14
 8018d3a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018d3e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018d42:	ee67 5a06 	vmul.f32	s11, s14, s12
 8018d46:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018d4a:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018d4e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018d52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d5e:	ee10 3a10 	vmov	r3, s0
 8018d62:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018d66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018d6a:	da06      	bge.n	8018d7a <__ieee754_powf+0x50e>
 8018d6c:	f000 fa58 	bl	8019220 <scalbnf>
 8018d70:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018d74:	e592      	b.n	801889c <__ieee754_powf+0x30>
 8018d76:	2000      	movs	r0, #0
 8018d78:	e7a7      	b.n	8018cca <__ieee754_powf+0x45e>
 8018d7a:	ee00 3a10 	vmov	s0, r3
 8018d7e:	e7f7      	b.n	8018d70 <__ieee754_powf+0x504>
 8018d80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018d84:	e58a      	b.n	801889c <__ieee754_powf+0x30>
 8018d86:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018e04 <__ieee754_powf+0x598>
 8018d8a:	e587      	b.n	801889c <__ieee754_powf+0x30>
 8018d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8018d90:	e584      	b.n	801889c <__ieee754_powf+0x30>
 8018d92:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018d96:	f43f adbb 	beq.w	8018910 <__ieee754_powf+0xa4>
 8018d9a:	2502      	movs	r5, #2
 8018d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8018da0:	f000 fa36 	bl	8019210 <fabsf>
 8018da4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018da8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018dac:	4647      	mov	r7, r8
 8018dae:	d003      	beq.n	8018db8 <__ieee754_powf+0x54c>
 8018db0:	f1b8 0f00 	cmp.w	r8, #0
 8018db4:	f47f addb 	bne.w	801896e <__ieee754_powf+0x102>
 8018db8:	2c00      	cmp	r4, #0
 8018dba:	bfbc      	itt	lt
 8018dbc:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018dc0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018dc4:	2e00      	cmp	r6, #0
 8018dc6:	f6bf ad69 	bge.w	801889c <__ieee754_powf+0x30>
 8018dca:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018dce:	ea58 0805 	orrs.w	r8, r8, r5
 8018dd2:	f47f adc7 	bne.w	8018964 <__ieee754_powf+0xf8>
 8018dd6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018dda:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018dde:	e55d      	b.n	801889c <__ieee754_powf+0x30>
 8018de0:	ff800000 	.word	0xff800000
 8018de4:	3f317218 	.word	0x3f317218
 8018de8:	3f317200 	.word	0x3f317200
 8018dec:	35bfbe8c 	.word	0x35bfbe8c
 8018df0:	b5ddea0e 	.word	0xb5ddea0e
 8018df4:	3331bb4c 	.word	0x3331bb4c
 8018df8:	388ab355 	.word	0x388ab355
 8018dfc:	bb360b61 	.word	0xbb360b61
 8018e00:	3e2aaaab 	.word	0x3e2aaaab
 8018e04:	00000000 	.word	0x00000000

08018e08 <__ieee754_rem_pio2f>:
 8018e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e0a:	ee10 6a10 	vmov	r6, s0
 8018e0e:	4b88      	ldr	r3, [pc, #544]	@ (8019030 <__ieee754_rem_pio2f+0x228>)
 8018e10:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018e14:	429d      	cmp	r5, r3
 8018e16:	b087      	sub	sp, #28
 8018e18:	4604      	mov	r4, r0
 8018e1a:	d805      	bhi.n	8018e28 <__ieee754_rem_pio2f+0x20>
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	ed80 0a00 	vstr	s0, [r0]
 8018e22:	6043      	str	r3, [r0, #4]
 8018e24:	2000      	movs	r0, #0
 8018e26:	e022      	b.n	8018e6e <__ieee754_rem_pio2f+0x66>
 8018e28:	4b82      	ldr	r3, [pc, #520]	@ (8019034 <__ieee754_rem_pio2f+0x22c>)
 8018e2a:	429d      	cmp	r5, r3
 8018e2c:	d83a      	bhi.n	8018ea4 <__ieee754_rem_pio2f+0x9c>
 8018e2e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018e32:	2e00      	cmp	r6, #0
 8018e34:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019038 <__ieee754_rem_pio2f+0x230>
 8018e38:	4a80      	ldr	r2, [pc, #512]	@ (801903c <__ieee754_rem_pio2f+0x234>)
 8018e3a:	f023 030f 	bic.w	r3, r3, #15
 8018e3e:	dd18      	ble.n	8018e72 <__ieee754_rem_pio2f+0x6a>
 8018e40:	4293      	cmp	r3, r2
 8018e42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018e46:	bf09      	itett	eq
 8018e48:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019040 <__ieee754_rem_pio2f+0x238>
 8018e4c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019044 <__ieee754_rem_pio2f+0x23c>
 8018e50:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019048 <__ieee754_rem_pio2f+0x240>
 8018e54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018e58:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e60:	ed80 7a00 	vstr	s14, [r0]
 8018e64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018e68:	edc0 7a01 	vstr	s15, [r0, #4]
 8018e6c:	2001      	movs	r0, #1
 8018e6e:	b007      	add	sp, #28
 8018e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e72:	4293      	cmp	r3, r2
 8018e74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018e78:	bf09      	itett	eq
 8018e7a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019040 <__ieee754_rem_pio2f+0x238>
 8018e7e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019044 <__ieee754_rem_pio2f+0x23c>
 8018e82:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019048 <__ieee754_rem_pio2f+0x240>
 8018e86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018e8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e92:	ed80 7a00 	vstr	s14, [r0]
 8018e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8018e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8018ea2:	e7e4      	b.n	8018e6e <__ieee754_rem_pio2f+0x66>
 8018ea4:	4b69      	ldr	r3, [pc, #420]	@ (801904c <__ieee754_rem_pio2f+0x244>)
 8018ea6:	429d      	cmp	r5, r3
 8018ea8:	d873      	bhi.n	8018f92 <__ieee754_rem_pio2f+0x18a>
 8018eaa:	f000 f9b1 	bl	8019210 <fabsf>
 8018eae:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019050 <__ieee754_rem_pio2f+0x248>
 8018eb2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018eb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018ec2:	ee17 0a90 	vmov	r0, s15
 8018ec6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019038 <__ieee754_rem_pio2f+0x230>
 8018eca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018ece:	281f      	cmp	r0, #31
 8018ed0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019044 <__ieee754_rem_pio2f+0x23c>
 8018ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ed8:	eeb1 6a47 	vneg.f32	s12, s14
 8018edc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018ee0:	ee16 1a90 	vmov	r1, s13
 8018ee4:	dc09      	bgt.n	8018efa <__ieee754_rem_pio2f+0xf2>
 8018ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8019054 <__ieee754_rem_pio2f+0x24c>)
 8018ee8:	1e47      	subs	r7, r0, #1
 8018eea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018eee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8018ef2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018ef6:	4293      	cmp	r3, r2
 8018ef8:	d107      	bne.n	8018f0a <__ieee754_rem_pio2f+0x102>
 8018efa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8018efe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8018f02:	2a08      	cmp	r2, #8
 8018f04:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018f08:	dc14      	bgt.n	8018f34 <__ieee754_rem_pio2f+0x12c>
 8018f0a:	6021      	str	r1, [r4, #0]
 8018f0c:	ed94 7a00 	vldr	s14, [r4]
 8018f10:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018f14:	2e00      	cmp	r6, #0
 8018f16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018f1a:	ed84 0a01 	vstr	s0, [r4, #4]
 8018f1e:	daa6      	bge.n	8018e6e <__ieee754_rem_pio2f+0x66>
 8018f20:	eeb1 7a47 	vneg.f32	s14, s14
 8018f24:	eeb1 0a40 	vneg.f32	s0, s0
 8018f28:	ed84 7a00 	vstr	s14, [r4]
 8018f2c:	ed84 0a01 	vstr	s0, [r4, #4]
 8018f30:	4240      	negs	r0, r0
 8018f32:	e79c      	b.n	8018e6e <__ieee754_rem_pio2f+0x66>
 8018f34:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019040 <__ieee754_rem_pio2f+0x238>
 8018f38:	eef0 6a40 	vmov.f32	s13, s0
 8018f3c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018f40:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018f44:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018f48:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019048 <__ieee754_rem_pio2f+0x240>
 8018f4c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018f50:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018f54:	ee15 2a90 	vmov	r2, s11
 8018f58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018f5c:	1a5b      	subs	r3, r3, r1
 8018f5e:	2b19      	cmp	r3, #25
 8018f60:	dc04      	bgt.n	8018f6c <__ieee754_rem_pio2f+0x164>
 8018f62:	edc4 5a00 	vstr	s11, [r4]
 8018f66:	eeb0 0a66 	vmov.f32	s0, s13
 8018f6a:	e7cf      	b.n	8018f0c <__ieee754_rem_pio2f+0x104>
 8018f6c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019058 <__ieee754_rem_pio2f+0x250>
 8018f70:	eeb0 0a66 	vmov.f32	s0, s13
 8018f74:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018f78:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018f7c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801905c <__ieee754_rem_pio2f+0x254>
 8018f80:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018f84:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018f88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018f8c:	ed84 7a00 	vstr	s14, [r4]
 8018f90:	e7bc      	b.n	8018f0c <__ieee754_rem_pio2f+0x104>
 8018f92:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018f96:	d306      	bcc.n	8018fa6 <__ieee754_rem_pio2f+0x19e>
 8018f98:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018f9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018fa0:	edc0 7a00 	vstr	s15, [r0]
 8018fa4:	e73e      	b.n	8018e24 <__ieee754_rem_pio2f+0x1c>
 8018fa6:	15ea      	asrs	r2, r5, #23
 8018fa8:	3a86      	subs	r2, #134	@ 0x86
 8018faa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018fae:	ee07 3a90 	vmov	s15, r3
 8018fb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018fb6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019060 <__ieee754_rem_pio2f+0x258>
 8018fba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018fc2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018fc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018fca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018fce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018fd6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018fda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe6:	edcd 7a05 	vstr	s15, [sp, #20]
 8018fea:	d11e      	bne.n	801902a <__ieee754_rem_pio2f+0x222>
 8018fec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff4:	bf0c      	ite	eq
 8018ff6:	2301      	moveq	r3, #1
 8018ff8:	2302      	movne	r3, #2
 8018ffa:	491a      	ldr	r1, [pc, #104]	@ (8019064 <__ieee754_rem_pio2f+0x25c>)
 8018ffc:	9101      	str	r1, [sp, #4]
 8018ffe:	2102      	movs	r1, #2
 8019000:	9100      	str	r1, [sp, #0]
 8019002:	a803      	add	r0, sp, #12
 8019004:	4621      	mov	r1, r4
 8019006:	f000 f997 	bl	8019338 <__kernel_rem_pio2f>
 801900a:	2e00      	cmp	r6, #0
 801900c:	f6bf af2f 	bge.w	8018e6e <__ieee754_rem_pio2f+0x66>
 8019010:	edd4 7a00 	vldr	s15, [r4]
 8019014:	eef1 7a67 	vneg.f32	s15, s15
 8019018:	edc4 7a00 	vstr	s15, [r4]
 801901c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019020:	eef1 7a67 	vneg.f32	s15, s15
 8019024:	edc4 7a01 	vstr	s15, [r4, #4]
 8019028:	e782      	b.n	8018f30 <__ieee754_rem_pio2f+0x128>
 801902a:	2303      	movs	r3, #3
 801902c:	e7e5      	b.n	8018ffa <__ieee754_rem_pio2f+0x1f2>
 801902e:	bf00      	nop
 8019030:	3f490fd8 	.word	0x3f490fd8
 8019034:	4016cbe3 	.word	0x4016cbe3
 8019038:	3fc90f80 	.word	0x3fc90f80
 801903c:	3fc90fd0 	.word	0x3fc90fd0
 8019040:	37354400 	.word	0x37354400
 8019044:	37354443 	.word	0x37354443
 8019048:	2e85a308 	.word	0x2e85a308
 801904c:	43490f80 	.word	0x43490f80
 8019050:	3f22f984 	.word	0x3f22f984
 8019054:	0801c004 	.word	0x0801c004
 8019058:	2e85a300 	.word	0x2e85a300
 801905c:	248d3132 	.word	0x248d3132
 8019060:	43800000 	.word	0x43800000
 8019064:	0801c084 	.word	0x0801c084

08019068 <atanf>:
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	ee10 5a10 	vmov	r5, s0
 801906e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019072:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8019076:	eef0 7a40 	vmov.f32	s15, s0
 801907a:	d310      	bcc.n	801909e <atanf+0x36>
 801907c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8019080:	d904      	bls.n	801908c <atanf+0x24>
 8019082:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019086:	eeb0 0a67 	vmov.f32	s0, s15
 801908a:	bd38      	pop	{r3, r4, r5, pc}
 801908c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80191c4 <atanf+0x15c>
 8019090:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80191c8 <atanf+0x160>
 8019094:	2d00      	cmp	r5, #0
 8019096:	bfc8      	it	gt
 8019098:	eef0 7a47 	vmovgt.f32	s15, s14
 801909c:	e7f3      	b.n	8019086 <atanf+0x1e>
 801909e:	4b4b      	ldr	r3, [pc, #300]	@ (80191cc <atanf+0x164>)
 80190a0:	429c      	cmp	r4, r3
 80190a2:	d810      	bhi.n	80190c6 <atanf+0x5e>
 80190a4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80190a8:	d20a      	bcs.n	80190c0 <atanf+0x58>
 80190aa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80191d0 <atanf+0x168>
 80190ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 80190b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80190b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80190ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190be:	dce2      	bgt.n	8019086 <atanf+0x1e>
 80190c0:	f04f 33ff 	mov.w	r3, #4294967295
 80190c4:	e013      	b.n	80190ee <atanf+0x86>
 80190c6:	f000 f8a3 	bl	8019210 <fabsf>
 80190ca:	4b42      	ldr	r3, [pc, #264]	@ (80191d4 <atanf+0x16c>)
 80190cc:	429c      	cmp	r4, r3
 80190ce:	d84f      	bhi.n	8019170 <atanf+0x108>
 80190d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80190d4:	429c      	cmp	r4, r3
 80190d6:	d841      	bhi.n	801915c <atanf+0xf4>
 80190d8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80190dc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80190e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80190e4:	2300      	movs	r3, #0
 80190e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80190ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80190ee:	1c5a      	adds	r2, r3, #1
 80190f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80190f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80191d8 <atanf+0x170>
 80190f8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80191dc <atanf+0x174>
 80190fc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80191e0 <atanf+0x178>
 8019100:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019104:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019108:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80191e4 <atanf+0x17c>
 801910c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019110:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80191e8 <atanf+0x180>
 8019114:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019118:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80191ec <atanf+0x184>
 801911c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019120:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80191f0 <atanf+0x188>
 8019124:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019128:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80191f4 <atanf+0x18c>
 801912c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019130:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80191f8 <atanf+0x190>
 8019134:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019138:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80191fc <atanf+0x194>
 801913c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019140:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8019200 <atanf+0x198>
 8019144:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019148:	ee27 7a26 	vmul.f32	s14, s14, s13
 801914c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019154:	d121      	bne.n	801919a <atanf+0x132>
 8019156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801915a:	e794      	b.n	8019086 <atanf+0x1e>
 801915c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019160:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019164:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019168:	2301      	movs	r3, #1
 801916a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801916e:	e7be      	b.n	80190ee <atanf+0x86>
 8019170:	4b24      	ldr	r3, [pc, #144]	@ (8019204 <atanf+0x19c>)
 8019172:	429c      	cmp	r4, r3
 8019174:	d80b      	bhi.n	801918e <atanf+0x126>
 8019176:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801917a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801917e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019182:	2302      	movs	r3, #2
 8019184:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801918c:	e7af      	b.n	80190ee <atanf+0x86>
 801918e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019192:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019196:	2303      	movs	r3, #3
 8019198:	e7a9      	b.n	80190ee <atanf+0x86>
 801919a:	4a1b      	ldr	r2, [pc, #108]	@ (8019208 <atanf+0x1a0>)
 801919c:	491b      	ldr	r1, [pc, #108]	@ (801920c <atanf+0x1a4>)
 801919e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80191a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80191a6:	edd3 6a00 	vldr	s13, [r3]
 80191aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80191ae:	2d00      	cmp	r5, #0
 80191b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80191b4:	edd2 7a00 	vldr	s15, [r2]
 80191b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191bc:	bfb8      	it	lt
 80191be:	eef1 7a67 	vneglt.f32	s15, s15
 80191c2:	e760      	b.n	8019086 <atanf+0x1e>
 80191c4:	bfc90fdb 	.word	0xbfc90fdb
 80191c8:	3fc90fdb 	.word	0x3fc90fdb
 80191cc:	3edfffff 	.word	0x3edfffff
 80191d0:	7149f2ca 	.word	0x7149f2ca
 80191d4:	3f97ffff 	.word	0x3f97ffff
 80191d8:	3c8569d7 	.word	0x3c8569d7
 80191dc:	3d4bda59 	.word	0x3d4bda59
 80191e0:	bd6ef16b 	.word	0xbd6ef16b
 80191e4:	3d886b35 	.word	0x3d886b35
 80191e8:	3dba2e6e 	.word	0x3dba2e6e
 80191ec:	3e124925 	.word	0x3e124925
 80191f0:	3eaaaaab 	.word	0x3eaaaaab
 80191f4:	bd15a221 	.word	0xbd15a221
 80191f8:	bd9d8795 	.word	0xbd9d8795
 80191fc:	bde38e38 	.word	0xbde38e38
 8019200:	be4ccccd 	.word	0xbe4ccccd
 8019204:	401bffff 	.word	0x401bffff
 8019208:	0801c3ac 	.word	0x0801c3ac
 801920c:	0801c39c 	.word	0x0801c39c

08019210 <fabsf>:
 8019210:	ee10 3a10 	vmov	r3, s0
 8019214:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019218:	ee00 3a10 	vmov	s0, r3
 801921c:	4770      	bx	lr
	...

08019220 <scalbnf>:
 8019220:	ee10 3a10 	vmov	r3, s0
 8019224:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019228:	d02b      	beq.n	8019282 <scalbnf+0x62>
 801922a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801922e:	d302      	bcc.n	8019236 <scalbnf+0x16>
 8019230:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019234:	4770      	bx	lr
 8019236:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801923a:	d123      	bne.n	8019284 <scalbnf+0x64>
 801923c:	4b24      	ldr	r3, [pc, #144]	@ (80192d0 <scalbnf+0xb0>)
 801923e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80192d4 <scalbnf+0xb4>
 8019242:	4298      	cmp	r0, r3
 8019244:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019248:	db17      	blt.n	801927a <scalbnf+0x5a>
 801924a:	ee10 3a10 	vmov	r3, s0
 801924e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019252:	3a19      	subs	r2, #25
 8019254:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019258:	4288      	cmp	r0, r1
 801925a:	dd15      	ble.n	8019288 <scalbnf+0x68>
 801925c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80192d8 <scalbnf+0xb8>
 8019260:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80192dc <scalbnf+0xbc>
 8019264:	ee10 3a10 	vmov	r3, s0
 8019268:	eeb0 7a67 	vmov.f32	s14, s15
 801926c:	2b00      	cmp	r3, #0
 801926e:	bfb8      	it	lt
 8019270:	eef0 7a66 	vmovlt.f32	s15, s13
 8019274:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019278:	4770      	bx	lr
 801927a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80192e0 <scalbnf+0xc0>
 801927e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019282:	4770      	bx	lr
 8019284:	0dd2      	lsrs	r2, r2, #23
 8019286:	e7e5      	b.n	8019254 <scalbnf+0x34>
 8019288:	4410      	add	r0, r2
 801928a:	28fe      	cmp	r0, #254	@ 0xfe
 801928c:	dce6      	bgt.n	801925c <scalbnf+0x3c>
 801928e:	2800      	cmp	r0, #0
 8019290:	dd06      	ble.n	80192a0 <scalbnf+0x80>
 8019292:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019296:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801929a:	ee00 3a10 	vmov	s0, r3
 801929e:	4770      	bx	lr
 80192a0:	f110 0f16 	cmn.w	r0, #22
 80192a4:	da09      	bge.n	80192ba <scalbnf+0x9a>
 80192a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80192e0 <scalbnf+0xc0>
 80192aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80192e4 <scalbnf+0xc4>
 80192ae:	ee10 3a10 	vmov	r3, s0
 80192b2:	eeb0 7a67 	vmov.f32	s14, s15
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	e7d9      	b.n	801926e <scalbnf+0x4e>
 80192ba:	3019      	adds	r0, #25
 80192bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80192c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80192c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80192e8 <scalbnf+0xc8>
 80192c8:	ee07 3a90 	vmov	s15, r3
 80192cc:	e7d7      	b.n	801927e <scalbnf+0x5e>
 80192ce:	bf00      	nop
 80192d0:	ffff3cb0 	.word	0xffff3cb0
 80192d4:	4c000000 	.word	0x4c000000
 80192d8:	7149f2ca 	.word	0x7149f2ca
 80192dc:	f149f2ca 	.word	0xf149f2ca
 80192e0:	0da24260 	.word	0x0da24260
 80192e4:	8da24260 	.word	0x8da24260
 80192e8:	33000000 	.word	0x33000000

080192ec <with_errnof>:
 80192ec:	b510      	push	{r4, lr}
 80192ee:	ed2d 8b02 	vpush	{d8}
 80192f2:	eeb0 8a40 	vmov.f32	s16, s0
 80192f6:	4604      	mov	r4, r0
 80192f8:	f7fb fce0 	bl	8014cbc <__errno>
 80192fc:	eeb0 0a48 	vmov.f32	s0, s16
 8019300:	ecbd 8b02 	vpop	{d8}
 8019304:	6004      	str	r4, [r0, #0]
 8019306:	bd10      	pop	{r4, pc}

08019308 <xflowf>:
 8019308:	b130      	cbz	r0, 8019318 <xflowf+0x10>
 801930a:	eef1 7a40 	vneg.f32	s15, s0
 801930e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019312:	2022      	movs	r0, #34	@ 0x22
 8019314:	f7ff bfea 	b.w	80192ec <with_errnof>
 8019318:	eef0 7a40 	vmov.f32	s15, s0
 801931c:	e7f7      	b.n	801930e <xflowf+0x6>
	...

08019320 <__math_uflowf>:
 8019320:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019328 <__math_uflowf+0x8>
 8019324:	f7ff bff0 	b.w	8019308 <xflowf>
 8019328:	10000000 	.word	0x10000000

0801932c <__math_oflowf>:
 801932c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019334 <__math_oflowf+0x8>
 8019330:	f7ff bfea 	b.w	8019308 <xflowf>
 8019334:	70000000 	.word	0x70000000

08019338 <__kernel_rem_pio2f>:
 8019338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801933c:	ed2d 8b04 	vpush	{d8-d9}
 8019340:	b0d9      	sub	sp, #356	@ 0x164
 8019342:	4690      	mov	r8, r2
 8019344:	9001      	str	r0, [sp, #4]
 8019346:	4ab6      	ldr	r2, [pc, #728]	@ (8019620 <__kernel_rem_pio2f+0x2e8>)
 8019348:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801934a:	f118 0f04 	cmn.w	r8, #4
 801934e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019352:	460f      	mov	r7, r1
 8019354:	f103 3bff 	add.w	fp, r3, #4294967295
 8019358:	db26      	blt.n	80193a8 <__kernel_rem_pio2f+0x70>
 801935a:	f1b8 0203 	subs.w	r2, r8, #3
 801935e:	bf48      	it	mi
 8019360:	f108 0204 	addmi.w	r2, r8, #4
 8019364:	10d2      	asrs	r2, r2, #3
 8019366:	1c55      	adds	r5, r2, #1
 8019368:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801936a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 801936e:	00e8      	lsls	r0, r5, #3
 8019370:	eba2 060b 	sub.w	r6, r2, fp
 8019374:	9002      	str	r0, [sp, #8]
 8019376:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801937a:	eb0a 0c0b 	add.w	ip, sl, fp
 801937e:	ac1c      	add	r4, sp, #112	@ 0x70
 8019380:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019384:	2000      	movs	r0, #0
 8019386:	4560      	cmp	r0, ip
 8019388:	dd10      	ble.n	80193ac <__kernel_rem_pio2f+0x74>
 801938a:	a91c      	add	r1, sp, #112	@ 0x70
 801938c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019390:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019394:	2600      	movs	r6, #0
 8019396:	4556      	cmp	r6, sl
 8019398:	dc24      	bgt.n	80193e4 <__kernel_rem_pio2f+0xac>
 801939a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801939e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 80193a2:	4684      	mov	ip, r0
 80193a4:	2400      	movs	r4, #0
 80193a6:	e016      	b.n	80193d6 <__kernel_rem_pio2f+0x9e>
 80193a8:	2200      	movs	r2, #0
 80193aa:	e7dc      	b.n	8019366 <__kernel_rem_pio2f+0x2e>
 80193ac:	42c6      	cmn	r6, r0
 80193ae:	bf5d      	ittte	pl
 80193b0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80193b4:	ee07 1a90 	vmovpl	s15, r1
 80193b8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80193bc:	eef0 7a47 	vmovmi.f32	s15, s14
 80193c0:	ece4 7a01 	vstmia	r4!, {s15}
 80193c4:	3001      	adds	r0, #1
 80193c6:	e7de      	b.n	8019386 <__kernel_rem_pio2f+0x4e>
 80193c8:	ecfe 6a01 	vldmia	lr!, {s13}
 80193cc:	ed3c 7a01 	vldmdb	ip!, {s14}
 80193d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80193d4:	3401      	adds	r4, #1
 80193d6:	455c      	cmp	r4, fp
 80193d8:	ddf6      	ble.n	80193c8 <__kernel_rem_pio2f+0x90>
 80193da:	ece9 7a01 	vstmia	r9!, {s15}
 80193de:	3601      	adds	r6, #1
 80193e0:	3004      	adds	r0, #4
 80193e2:	e7d8      	b.n	8019396 <__kernel_rem_pio2f+0x5e>
 80193e4:	a908      	add	r1, sp, #32
 80193e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80193ea:	9104      	str	r1, [sp, #16]
 80193ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80193ee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801962c <__kernel_rem_pio2f+0x2f4>
 80193f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019628 <__kernel_rem_pio2f+0x2f0>
 80193f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80193fa:	9203      	str	r2, [sp, #12]
 80193fc:	4654      	mov	r4, sl
 80193fe:	00a2      	lsls	r2, r4, #2
 8019400:	9205      	str	r2, [sp, #20]
 8019402:	aa58      	add	r2, sp, #352	@ 0x160
 8019404:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019408:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801940c:	a944      	add	r1, sp, #272	@ 0x110
 801940e:	aa08      	add	r2, sp, #32
 8019410:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019414:	4694      	mov	ip, r2
 8019416:	4626      	mov	r6, r4
 8019418:	2e00      	cmp	r6, #0
 801941a:	dc4c      	bgt.n	80194b6 <__kernel_rem_pio2f+0x17e>
 801941c:	4628      	mov	r0, r5
 801941e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019422:	f7ff fefd 	bl	8019220 <scalbnf>
 8019426:	eeb0 8a40 	vmov.f32	s16, s0
 801942a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801942e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019432:	f000 f9e9 	bl	8019808 <floorf>
 8019436:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801943a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801943e:	2d00      	cmp	r5, #0
 8019440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019444:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019448:	ee17 9a90 	vmov	r9, s15
 801944c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019450:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019454:	dd41      	ble.n	80194da <__kernel_rem_pio2f+0x1a2>
 8019456:	f104 3cff 	add.w	ip, r4, #4294967295
 801945a:	a908      	add	r1, sp, #32
 801945c:	f1c5 0e08 	rsb	lr, r5, #8
 8019460:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019464:	fa46 f00e 	asr.w	r0, r6, lr
 8019468:	4481      	add	r9, r0
 801946a:	fa00 f00e 	lsl.w	r0, r0, lr
 801946e:	1a36      	subs	r6, r6, r0
 8019470:	f1c5 0007 	rsb	r0, r5, #7
 8019474:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019478:	4106      	asrs	r6, r0
 801947a:	2e00      	cmp	r6, #0
 801947c:	dd3c      	ble.n	80194f8 <__kernel_rem_pio2f+0x1c0>
 801947e:	f04f 0e00 	mov.w	lr, #0
 8019482:	f109 0901 	add.w	r9, r9, #1
 8019486:	4670      	mov	r0, lr
 8019488:	4574      	cmp	r4, lr
 801948a:	dc68      	bgt.n	801955e <__kernel_rem_pio2f+0x226>
 801948c:	2d00      	cmp	r5, #0
 801948e:	dd03      	ble.n	8019498 <__kernel_rem_pio2f+0x160>
 8019490:	2d01      	cmp	r5, #1
 8019492:	d074      	beq.n	801957e <__kernel_rem_pio2f+0x246>
 8019494:	2d02      	cmp	r5, #2
 8019496:	d07d      	beq.n	8019594 <__kernel_rem_pio2f+0x25c>
 8019498:	2e02      	cmp	r6, #2
 801949a:	d12d      	bne.n	80194f8 <__kernel_rem_pio2f+0x1c0>
 801949c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80194a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80194a4:	b340      	cbz	r0, 80194f8 <__kernel_rem_pio2f+0x1c0>
 80194a6:	4628      	mov	r0, r5
 80194a8:	9306      	str	r3, [sp, #24]
 80194aa:	f7ff feb9 	bl	8019220 <scalbnf>
 80194ae:	9b06      	ldr	r3, [sp, #24]
 80194b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80194b4:	e020      	b.n	80194f8 <__kernel_rem_pio2f+0x1c0>
 80194b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80194ba:	3e01      	subs	r6, #1
 80194bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80194c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80194cc:	ecac 0a01 	vstmia	ip!, {s0}
 80194d0:	ed30 0a01 	vldmdb	r0!, {s0}
 80194d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80194d8:	e79e      	b.n	8019418 <__kernel_rem_pio2f+0xe0>
 80194da:	d105      	bne.n	80194e8 <__kernel_rem_pio2f+0x1b0>
 80194dc:	1e60      	subs	r0, r4, #1
 80194de:	a908      	add	r1, sp, #32
 80194e0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80194e4:	11f6      	asrs	r6, r6, #7
 80194e6:	e7c8      	b.n	801947a <__kernel_rem_pio2f+0x142>
 80194e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80194ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80194f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f4:	da31      	bge.n	801955a <__kernel_rem_pio2f+0x222>
 80194f6:	2600      	movs	r6, #0
 80194f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80194fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019500:	f040 8098 	bne.w	8019634 <__kernel_rem_pio2f+0x2fc>
 8019504:	1e60      	subs	r0, r4, #1
 8019506:	2200      	movs	r2, #0
 8019508:	4550      	cmp	r0, sl
 801950a:	da4b      	bge.n	80195a4 <__kernel_rem_pio2f+0x26c>
 801950c:	2a00      	cmp	r2, #0
 801950e:	d065      	beq.n	80195dc <__kernel_rem_pio2f+0x2a4>
 8019510:	3c01      	subs	r4, #1
 8019512:	ab08      	add	r3, sp, #32
 8019514:	3d08      	subs	r5, #8
 8019516:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801951a:	2b00      	cmp	r3, #0
 801951c:	d0f8      	beq.n	8019510 <__kernel_rem_pio2f+0x1d8>
 801951e:	4628      	mov	r0, r5
 8019520:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019524:	f7ff fe7c 	bl	8019220 <scalbnf>
 8019528:	1c63      	adds	r3, r4, #1
 801952a:	aa44      	add	r2, sp, #272	@ 0x110
 801952c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801962c <__kernel_rem_pio2f+0x2f4>
 8019530:	0099      	lsls	r1, r3, #2
 8019532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019536:	4623      	mov	r3, r4
 8019538:	2b00      	cmp	r3, #0
 801953a:	f280 80a9 	bge.w	8019690 <__kernel_rem_pio2f+0x358>
 801953e:	4623      	mov	r3, r4
 8019540:	2b00      	cmp	r3, #0
 8019542:	f2c0 80c7 	blt.w	80196d4 <__kernel_rem_pio2f+0x39c>
 8019546:	aa44      	add	r2, sp, #272	@ 0x110
 8019548:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801954c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019624 <__kernel_rem_pio2f+0x2ec>
 8019550:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 8019554:	2000      	movs	r0, #0
 8019556:	1ae2      	subs	r2, r4, r3
 8019558:	e0b1      	b.n	80196be <__kernel_rem_pio2f+0x386>
 801955a:	2602      	movs	r6, #2
 801955c:	e78f      	b.n	801947e <__kernel_rem_pio2f+0x146>
 801955e:	f852 1b04 	ldr.w	r1, [r2], #4
 8019562:	b948      	cbnz	r0, 8019578 <__kernel_rem_pio2f+0x240>
 8019564:	b121      	cbz	r1, 8019570 <__kernel_rem_pio2f+0x238>
 8019566:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801956a:	f842 1c04 	str.w	r1, [r2, #-4]
 801956e:	2101      	movs	r1, #1
 8019570:	f10e 0e01 	add.w	lr, lr, #1
 8019574:	4608      	mov	r0, r1
 8019576:	e787      	b.n	8019488 <__kernel_rem_pio2f+0x150>
 8019578:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801957c:	e7f5      	b.n	801956a <__kernel_rem_pio2f+0x232>
 801957e:	f104 3cff 	add.w	ip, r4, #4294967295
 8019582:	aa08      	add	r2, sp, #32
 8019584:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019588:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801958c:	a908      	add	r1, sp, #32
 801958e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019592:	e781      	b.n	8019498 <__kernel_rem_pio2f+0x160>
 8019594:	f104 3cff 	add.w	ip, r4, #4294967295
 8019598:	aa08      	add	r2, sp, #32
 801959a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801959e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80195a2:	e7f3      	b.n	801958c <__kernel_rem_pio2f+0x254>
 80195a4:	a908      	add	r1, sp, #32
 80195a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80195aa:	3801      	subs	r0, #1
 80195ac:	430a      	orrs	r2, r1
 80195ae:	e7ab      	b.n	8019508 <__kernel_rem_pio2f+0x1d0>
 80195b0:	3201      	adds	r2, #1
 80195b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	d0fa      	beq.n	80195b0 <__kernel_rem_pio2f+0x278>
 80195ba:	9905      	ldr	r1, [sp, #20]
 80195bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80195c0:	eb0d 0001 	add.w	r0, sp, r1
 80195c4:	18e6      	adds	r6, r4, r3
 80195c6:	a91c      	add	r1, sp, #112	@ 0x70
 80195c8:	f104 0c01 	add.w	ip, r4, #1
 80195cc:	384c      	subs	r0, #76	@ 0x4c
 80195ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80195d2:	4422      	add	r2, r4
 80195d4:	4562      	cmp	r2, ip
 80195d6:	da04      	bge.n	80195e2 <__kernel_rem_pio2f+0x2aa>
 80195d8:	4614      	mov	r4, r2
 80195da:	e710      	b.n	80193fe <__kernel_rem_pio2f+0xc6>
 80195dc:	9804      	ldr	r0, [sp, #16]
 80195de:	2201      	movs	r2, #1
 80195e0:	e7e7      	b.n	80195b2 <__kernel_rem_pio2f+0x27a>
 80195e2:	9903      	ldr	r1, [sp, #12]
 80195e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80195e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80195ec:	9105      	str	r1, [sp, #20]
 80195ee:	ee07 1a90 	vmov	s15, r1
 80195f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195f6:	2400      	movs	r4, #0
 80195f8:	ece6 7a01 	vstmia	r6!, {s15}
 80195fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 8019600:	46b1      	mov	r9, r6
 8019602:	455c      	cmp	r4, fp
 8019604:	dd04      	ble.n	8019610 <__kernel_rem_pio2f+0x2d8>
 8019606:	ece0 7a01 	vstmia	r0!, {s15}
 801960a:	f10c 0c01 	add.w	ip, ip, #1
 801960e:	e7e1      	b.n	80195d4 <__kernel_rem_pio2f+0x29c>
 8019610:	ecfe 6a01 	vldmia	lr!, {s13}
 8019614:	ed39 7a01 	vldmdb	r9!, {s14}
 8019618:	3401      	adds	r4, #1
 801961a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801961e:	e7f0      	b.n	8019602 <__kernel_rem_pio2f+0x2ca>
 8019620:	0801c3e8 	.word	0x0801c3e8
 8019624:	0801c3bc 	.word	0x0801c3bc
 8019628:	43800000 	.word	0x43800000
 801962c:	3b800000 	.word	0x3b800000
 8019630:	00000000 	.word	0x00000000
 8019634:	9b02      	ldr	r3, [sp, #8]
 8019636:	eeb0 0a48 	vmov.f32	s0, s16
 801963a:	eba3 0008 	sub.w	r0, r3, r8
 801963e:	f7ff fdef 	bl	8019220 <scalbnf>
 8019642:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019628 <__kernel_rem_pio2f+0x2f0>
 8019646:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801964a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801964e:	db19      	blt.n	8019684 <__kernel_rem_pio2f+0x34c>
 8019650:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801962c <__kernel_rem_pio2f+0x2f4>
 8019654:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019658:	aa08      	add	r2, sp, #32
 801965a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801965e:	3508      	adds	r5, #8
 8019660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019664:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801966c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019670:	ee10 3a10 	vmov	r3, s0
 8019674:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019678:	ee17 3a90 	vmov	r3, s15
 801967c:	3401      	adds	r4, #1
 801967e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019682:	e74c      	b.n	801951e <__kernel_rem_pio2f+0x1e6>
 8019684:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019688:	aa08      	add	r2, sp, #32
 801968a:	ee10 3a10 	vmov	r3, s0
 801968e:	e7f6      	b.n	801967e <__kernel_rem_pio2f+0x346>
 8019690:	a808      	add	r0, sp, #32
 8019692:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019696:	9001      	str	r0, [sp, #4]
 8019698:	ee07 0a90 	vmov	s15, r0
 801969c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196a0:	3b01      	subs	r3, #1
 80196a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80196a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80196aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80196ae:	e743      	b.n	8019538 <__kernel_rem_pio2f+0x200>
 80196b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80196b4:	ecb5 7a01 	vldmia	r5!, {s14}
 80196b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80196bc:	3001      	adds	r0, #1
 80196be:	4550      	cmp	r0, sl
 80196c0:	dc01      	bgt.n	80196c6 <__kernel_rem_pio2f+0x38e>
 80196c2:	4290      	cmp	r0, r2
 80196c4:	ddf4      	ble.n	80196b0 <__kernel_rem_pio2f+0x378>
 80196c6:	a858      	add	r0, sp, #352	@ 0x160
 80196c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80196cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80196d0:	3b01      	subs	r3, #1
 80196d2:	e735      	b.n	8019540 <__kernel_rem_pio2f+0x208>
 80196d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80196d6:	2b02      	cmp	r3, #2
 80196d8:	dc09      	bgt.n	80196ee <__kernel_rem_pio2f+0x3b6>
 80196da:	2b00      	cmp	r3, #0
 80196dc:	dc27      	bgt.n	801972e <__kernel_rem_pio2f+0x3f6>
 80196de:	d040      	beq.n	8019762 <__kernel_rem_pio2f+0x42a>
 80196e0:	f009 0007 	and.w	r0, r9, #7
 80196e4:	b059      	add	sp, #356	@ 0x164
 80196e6:	ecbd 8b04 	vpop	{d8-d9}
 80196ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80196f0:	2b03      	cmp	r3, #3
 80196f2:	d1f5      	bne.n	80196e0 <__kernel_rem_pio2f+0x3a8>
 80196f4:	aa30      	add	r2, sp, #192	@ 0xc0
 80196f6:	1f0b      	subs	r3, r1, #4
 80196f8:	4413      	add	r3, r2
 80196fa:	461a      	mov	r2, r3
 80196fc:	4620      	mov	r0, r4
 80196fe:	2800      	cmp	r0, #0
 8019700:	dc50      	bgt.n	80197a4 <__kernel_rem_pio2f+0x46c>
 8019702:	4622      	mov	r2, r4
 8019704:	2a01      	cmp	r2, #1
 8019706:	dc5d      	bgt.n	80197c4 <__kernel_rem_pio2f+0x48c>
 8019708:	ab30      	add	r3, sp, #192	@ 0xc0
 801970a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 801970e:	440b      	add	r3, r1
 8019710:	2c01      	cmp	r4, #1
 8019712:	dc67      	bgt.n	80197e4 <__kernel_rem_pio2f+0x4ac>
 8019714:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019718:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801971c:	2e00      	cmp	r6, #0
 801971e:	d167      	bne.n	80197f0 <__kernel_rem_pio2f+0x4b8>
 8019720:	edc7 6a00 	vstr	s13, [r7]
 8019724:	ed87 7a01 	vstr	s14, [r7, #4]
 8019728:	edc7 7a02 	vstr	s15, [r7, #8]
 801972c:	e7d8      	b.n	80196e0 <__kernel_rem_pio2f+0x3a8>
 801972e:	ab30      	add	r3, sp, #192	@ 0xc0
 8019730:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 8019734:	440b      	add	r3, r1
 8019736:	4622      	mov	r2, r4
 8019738:	2a00      	cmp	r2, #0
 801973a:	da24      	bge.n	8019786 <__kernel_rem_pio2f+0x44e>
 801973c:	b34e      	cbz	r6, 8019792 <__kernel_rem_pio2f+0x45a>
 801973e:	eef1 7a47 	vneg.f32	s15, s14
 8019742:	edc7 7a00 	vstr	s15, [r7]
 8019746:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801974a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801974e:	aa31      	add	r2, sp, #196	@ 0xc4
 8019750:	2301      	movs	r3, #1
 8019752:	429c      	cmp	r4, r3
 8019754:	da20      	bge.n	8019798 <__kernel_rem_pio2f+0x460>
 8019756:	b10e      	cbz	r6, 801975c <__kernel_rem_pio2f+0x424>
 8019758:	eef1 7a67 	vneg.f32	s15, s15
 801975c:	edc7 7a01 	vstr	s15, [r7, #4]
 8019760:	e7be      	b.n	80196e0 <__kernel_rem_pio2f+0x3a8>
 8019762:	ab30      	add	r3, sp, #192	@ 0xc0
 8019764:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019630 <__kernel_rem_pio2f+0x2f8>
 8019768:	440b      	add	r3, r1
 801976a:	2c00      	cmp	r4, #0
 801976c:	da05      	bge.n	801977a <__kernel_rem_pio2f+0x442>
 801976e:	b10e      	cbz	r6, 8019774 <__kernel_rem_pio2f+0x43c>
 8019770:	eef1 7a67 	vneg.f32	s15, s15
 8019774:	edc7 7a00 	vstr	s15, [r7]
 8019778:	e7b2      	b.n	80196e0 <__kernel_rem_pio2f+0x3a8>
 801977a:	ed33 7a01 	vldmdb	r3!, {s14}
 801977e:	3c01      	subs	r4, #1
 8019780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019784:	e7f1      	b.n	801976a <__kernel_rem_pio2f+0x432>
 8019786:	ed73 7a01 	vldmdb	r3!, {s15}
 801978a:	3a01      	subs	r2, #1
 801978c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019790:	e7d2      	b.n	8019738 <__kernel_rem_pio2f+0x400>
 8019792:	eef0 7a47 	vmov.f32	s15, s14
 8019796:	e7d4      	b.n	8019742 <__kernel_rem_pio2f+0x40a>
 8019798:	ecb2 7a01 	vldmia	r2!, {s14}
 801979c:	3301      	adds	r3, #1
 801979e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197a2:	e7d6      	b.n	8019752 <__kernel_rem_pio2f+0x41a>
 80197a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80197a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80197ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80197b0:	3801      	subs	r0, #1
 80197b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197b6:	ed82 7a00 	vstr	s14, [r2]
 80197ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80197be:	edc2 7a01 	vstr	s15, [r2, #4]
 80197c2:	e79c      	b.n	80196fe <__kernel_rem_pio2f+0x3c6>
 80197c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80197c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80197cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80197d0:	3a01      	subs	r2, #1
 80197d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197d6:	ed83 7a00 	vstr	s14, [r3]
 80197da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80197de:	edc3 7a01 	vstr	s15, [r3, #4]
 80197e2:	e78f      	b.n	8019704 <__kernel_rem_pio2f+0x3cc>
 80197e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80197e8:	3c01      	subs	r4, #1
 80197ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197ee:	e78f      	b.n	8019710 <__kernel_rem_pio2f+0x3d8>
 80197f0:	eef1 6a66 	vneg.f32	s13, s13
 80197f4:	eeb1 7a47 	vneg.f32	s14, s14
 80197f8:	edc7 6a00 	vstr	s13, [r7]
 80197fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8019800:	eef1 7a67 	vneg.f32	s15, s15
 8019804:	e790      	b.n	8019728 <__kernel_rem_pio2f+0x3f0>
 8019806:	bf00      	nop

08019808 <floorf>:
 8019808:	ee10 3a10 	vmov	r3, s0
 801980c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019810:	3a7f      	subs	r2, #127	@ 0x7f
 8019812:	2a16      	cmp	r2, #22
 8019814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019818:	dc2b      	bgt.n	8019872 <floorf+0x6a>
 801981a:	2a00      	cmp	r2, #0
 801981c:	da12      	bge.n	8019844 <floorf+0x3c>
 801981e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019884 <floorf+0x7c>
 8019822:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019826:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982e:	dd06      	ble.n	801983e <floorf+0x36>
 8019830:	2b00      	cmp	r3, #0
 8019832:	da24      	bge.n	801987e <floorf+0x76>
 8019834:	2900      	cmp	r1, #0
 8019836:	4b14      	ldr	r3, [pc, #80]	@ (8019888 <floorf+0x80>)
 8019838:	bf08      	it	eq
 801983a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801983e:	ee00 3a10 	vmov	s0, r3
 8019842:	4770      	bx	lr
 8019844:	4911      	ldr	r1, [pc, #68]	@ (801988c <floorf+0x84>)
 8019846:	4111      	asrs	r1, r2
 8019848:	420b      	tst	r3, r1
 801984a:	d0fa      	beq.n	8019842 <floorf+0x3a>
 801984c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019884 <floorf+0x7c>
 8019850:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019854:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985c:	ddef      	ble.n	801983e <floorf+0x36>
 801985e:	2b00      	cmp	r3, #0
 8019860:	bfbe      	ittt	lt
 8019862:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019866:	fa40 f202 	asrlt.w	r2, r0, r2
 801986a:	189b      	addlt	r3, r3, r2
 801986c:	ea23 0301 	bic.w	r3, r3, r1
 8019870:	e7e5      	b.n	801983e <floorf+0x36>
 8019872:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019876:	d3e4      	bcc.n	8019842 <floorf+0x3a>
 8019878:	ee30 0a00 	vadd.f32	s0, s0, s0
 801987c:	4770      	bx	lr
 801987e:	2300      	movs	r3, #0
 8019880:	e7dd      	b.n	801983e <floorf+0x36>
 8019882:	bf00      	nop
 8019884:	7149f2ca 	.word	0x7149f2ca
 8019888:	bf800000 	.word	0xbf800000
 801988c:	007fffff 	.word	0x007fffff

08019890 <_init>:
 8019890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019892:	bf00      	nop
 8019894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019896:	bc08      	pop	{r3}
 8019898:	469e      	mov	lr, r3
 801989a:	4770      	bx	lr

0801989c <_fini>:
 801989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801989e:	bf00      	nop
 80198a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198a2:	bc08      	pop	{r3}
 80198a4:	469e      	mov	lr, r3
 80198a6:	4770      	bx	lr
