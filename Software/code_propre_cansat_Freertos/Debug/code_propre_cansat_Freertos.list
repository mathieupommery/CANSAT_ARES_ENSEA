
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a50  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002744  08018c30  08018c30  00019c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b374  0801b374  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b374  0801b374  0001c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b37c  0801b37c  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b37c  0801b37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b380  0801b380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0801b384  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b00  20000210  0801b594  0001d210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004d10  0801b594  0001dd10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000373f0  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078a9  00000000  00000000  00054630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002890  00000000  00000000  0005bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f45  00000000  00000000  0005e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2e6  00000000  00000000  000606b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039143  00000000  00000000  0008a99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef7c3  00000000  00000000  000c3ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b32a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfa8  00000000  00000000  001b32e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001bf28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018c18 	.word	0x08018c18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08018c18 	.word	0x08018c18

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4830      	ldr	r0, [pc, #192]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 8001094:	f007 fac4 	bl	8008620 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4828      	ldr	r0, [pc, #160]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010b2:	f007 fab5 	bl	8008620 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4821      	ldr	r0, [pc, #132]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010d0:	f007 faa6 	bl	8008620 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4819      	ldr	r0, [pc, #100]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 80010ee:	f007 fa97 	bl	8008620 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	4812      	ldr	r0, [pc, #72]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 800110c:	f007 fa88 	bl	8008620 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	480a      	ldr	r0, [pc, #40]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 800112a:	f007 fa79 	bl	8008620 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <Init_HighPerf_Mode_6_axis+0xe4>)
 8001148:	f007 fb7e 	bl	8008848 <HAL_I2C_Mem_Read>
        }
        if (status & 0x02) {
            //printf("Les données du gyroscope sont prêtes.\r\n");
        }

}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200003b4 	.word	0x200003b4

08001158 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af04      	add	r7, sp, #16
 800115e:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	f107 030b 	add.w	r3, r7, #11
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	221e      	movs	r2, #30
 8001174:	21d6      	movs	r1, #214	@ 0xd6
 8001176:	4874      	ldr	r0, [pc, #464]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001178:	f007 fb66 	bl	8008848 <HAL_I2C_Mem_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <Read_sensor_data+0x32>
 8001186:	7ffb      	ldrb	r3, [r7, #31]
 8001188:	e0da      	b.n	8001340 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <Read_sensor_data+0x46>
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0ce      	b.n	8001340 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a6:	e044      	b.n	8001232 <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	3311      	adds	r3, #17
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011b2:	7f3b      	ldrb	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011b8:	7f3b      	ldrb	r3, [r7, #28]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 030a 	add.w	r3, r7, #10
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	21d6      	movs	r1, #214	@ 0xd6
 80011d0:	485d      	ldr	r0, [pc, #372]	@ (8001348 <Read_sensor_data+0x1f0>)
 80011d2:	f007 fb39 	bl	8008848 <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <Read_sensor_data+0x8c>
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	e0ad      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011e4:	7efb      	ldrb	r3, [r7, #27]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 0309 	add.w	r3, r7, #9
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d6      	movs	r1, #214	@ 0xd6
 80011fc:	4852      	ldr	r0, [pc, #328]	@ (8001348 <Read_sensor_data+0x1f0>)
 80011fe:	f007 fb23 	bl	8008848 <HAL_I2C_Mem_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <Read_sensor_data+0xb8>
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	e097      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001210:	7a7b      	ldrb	r3, [r7, #9]
 8001212:	b21b      	sxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	3328      	adds	r3, #40	@ 0x28
 8001226:	443b      	add	r3, r7
 8001228:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	3301      	adds	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	2b02      	cmp	r3, #2
 8001236:	ddb7      	ble.n	80011a8 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	e044      	b.n	80012c8 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3314      	adds	r3, #20
 8001242:	b2db      	uxtb	r3, r3
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	3301      	adds	r3, #1
 800124c:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 030a 	add.w	r3, r7, #10
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	21d6      	movs	r1, #214	@ 0xd6
 8001266:	4838      	ldr	r0, [pc, #224]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001268:	f007 faee 	bl	8008848 <HAL_I2C_Mem_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <Read_sensor_data+0x122>
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	e062      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800127a:	7f7b      	ldrb	r3, [r7, #29]
 800127c:	b29a      	uxth	r2, r3
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f107 0309 	add.w	r3, r7, #9
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	21d6      	movs	r1, #214	@ 0xd6
 8001292:	482d      	ldr	r0, [pc, #180]	@ (8001348 <Read_sensor_data+0x1f0>)
 8001294:	f007 fad8 	bl	8008848 <HAL_I2C_Mem_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <Read_sensor_data+0x14e>
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	e04c      	b.n	8001340 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012a6:	7a7b      	ldrb	r3, [r7, #9]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	7abb      	ldrb	r3, [r7, #10]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3328      	adds	r3, #40	@ 0x28
 80012bc:	443b      	add	r3, r7
 80012be:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	ddb7      	ble.n	800123e <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 80012f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 8001304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 8001322:	f000 f815 	bl	8001350 <Read_temp>
 8001326:	ec51 0b10 	vmov	r0, r1, d0
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <Read_sensor_data+0x1f4>)
 8001330:	f7fe ffd2 	bl	80002d8 <__aeabi_dsub>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3728      	adds	r7, #40	@ 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200003b4 	.word	0x200003b4
 800134c:	40210000 	.word	0x40210000

08001350 <Read_temp>:

double Read_temp() {
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2220      	movs	r2, #32
 8001368:	21d6      	movs	r1, #214	@ 0xd6
 800136a:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <Read_temp+0x98>)
 800136c:	f007 fa6c 	bl	8008848 <HAL_I2C_Mem_Read>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2221      	movs	r2, #33	@ 0x21
 8001386:	21d6      	movs	r1, #214	@ 0xd6
 8001388:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <Read_temp+0x98>)
 800138a:	f007 fa5d 	bl	8008848 <HAL_I2C_Mem_Read>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <Read_temp+0x9c>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <Read_temp+0xa0>)
 80013c4:	f7fe ff8a 	bl	80002dc <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d8:	eeb0 0a47 	vmov.f32	s0, s14
 80013dc:	eef0 0a67 	vmov.f32	s1, s15
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003b4 	.word	0x200003b4
 80013ec:	40700000 	.word	0x40700000
 80013f0:	40390000 	.word	0x40390000
 80013f4:	00000000 	.word	0x00000000

080013f8 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	@ 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	2bb5      	cmp	r3, #181	@ 0xb5
 8001406:	f040 81d7 	bne.w	80017b8 <GNSS_ParsePVTData+0x3c0>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7a5b      	ldrb	r3, [r3, #9]
 800140e:	2b62      	cmp	r3, #98	@ 0x62
 8001410:	f040 81d2 	bne.w	80017b8 <GNSS_ParsePVTData+0x3c0>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7c9a      	ldrb	r2, [r3, #18]
 8001418:	4b9f      	ldr	r3, [pc, #636]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800141a:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7c9a      	ldrb	r2, [r3, #18]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7cda      	ldrb	r2, [r3, #19]
 800142a:	4b9b      	ldr	r3, [pc, #620]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800142c:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7cda      	ldrb	r2, [r3, #19]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001438:	4b97      	ldr	r3, [pc, #604]	@ (8001698 <GNSS_ParsePVTData+0x2a0>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7d1a      	ldrb	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7d5a      	ldrb	r2, [r3, #21]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7d9a      	ldrb	r2, [r3, #22]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7dda      	ldrb	r2, [r3, #23]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1a      	ldrb	r2, [r3, #24]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001490:	e017      	b.n	80014c2 <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	331e      	adds	r3, #30
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	7a19      	ldrb	r1, [r3, #8]
 800149c:	4a7f      	ldr	r2, [pc, #508]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 800149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a0:	4413      	add	r3, r2
 80014a2:	460a      	mov	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a8:	331e      	adds	r3, #30
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	7a19      	ldrb	r1, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	4413      	add	r3, r2
 80014b6:	3380      	adds	r3, #128	@ 0x80
 80014b8:	460a      	mov	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	dde4      	ble.n	8001492 <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014c8:	4b74      	ldr	r3, [pc, #464]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014d0:	4b72      	ldr	r3, [pc, #456]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016a0 <GNSS_ParsePVTData+0x2a8>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ee:	e017      	b.n	8001520 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	3322      	adds	r3, #34	@ 0x22
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	7a19      	ldrb	r1, [r3, #8]
 80014fa:	4a68      	ldr	r2, [pc, #416]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80014fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	3322      	adds	r3, #34	@ 0x22
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	7a19      	ldrb	r1, [r3, #8]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001512:	4413      	add	r3, r2
 8001514:	3388      	adds	r3, #136	@ 0x88
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	3301      	adds	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	2b03      	cmp	r3, #3
 8001524:	dde4      	ble.n	80014f0 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 8001526:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001530:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016a0 <GNSS_ParsePVTData+0x2a8>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
 800154e:	e00c      	b.n	800156a <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	3326      	adds	r3, #38	@ 0x26
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	7a19      	ldrb	r1, [r3, #8]
 800155a:	4a50      	ldr	r2, [pc, #320]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	4413      	add	r3, r2
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	2b03      	cmp	r3, #3
 800156e:	ddef      	ble.n	8001550 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001570:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 800158c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	e017      	b.n	80015cc <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	332a      	adds	r3, #42	@ 0x2a
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	7a19      	ldrb	r1, [r3, #8]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	460a      	mov	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	332a      	adds	r3, #42	@ 0x2a
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	7a19      	ldrb	r1, [r3, #8]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	4413      	add	r3, r2
 80015c0:	33a0      	adds	r3, #160	@ 0xa0
 80015c2:	460a      	mov	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	3301      	adds	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	dde4      	ble.n	800159c <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015d2:	4b32      	ldr	r3, [pc, #200]	@ (800169c <GNSS_ParsePVTData+0x2a4>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ea:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 80015ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e00c      	b.n	8001618 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	332e      	adds	r3, #46	@ 0x2e
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	7a19      	ldrb	r1, [r3, #8]
 8001608:	4a27      	ldr	r2, [pc, #156]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b03      	cmp	r3, #3
 800161c:	ddef      	ble.n	80015fe <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001636:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	e00c      	b.n	8001664 <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	3332      	adds	r3, #50	@ 0x32
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	7a19      	ldrb	r1, [r3, #8]
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	460a      	mov	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	3301      	adds	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b03      	cmp	r3, #3
 8001668:	ddef      	ble.n	800164a <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <GNSS_ParsePVTData+0x2b0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001682:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016a4 <GNSS_ParsePVTData+0x2ac>
 8001686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e022      	b.n	80016dc <GNSS_ParsePVTData+0x2e4>
 8001696:	bf00      	nop
 8001698:	2000022c 	.word	0x2000022c
 800169c:	20000234 	.word	0x20000234
 80016a0:	4b189680 	.word	0x4b189680
 80016a4:	447a0000 	.word	0x447a0000
 80016a8:	20000230 	.word	0x20000230
			iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	333e      	adds	r3, #62	@ 0x3e
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	7a19      	ldrb	r1, [r3, #8]
 80016b6:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
			GNSS->vspeedBytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	333e      	adds	r3, #62	@ 0x3e
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	7a19      	ldrb	r1, [r3, #8]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	33c8      	adds	r3, #200	@ 0xc8
 80016d2:	460a      	mov	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	dde4      	ble.n	80016ac <GNSS_ParsePVTData+0x2b4>
		}
	GNSS->vspeed = iLong.iLong;
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	GNSS->fvspeed=(float)GNSS->vspeed/1000.0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017cc <GNSS_ParsePVTData+0x3d4>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	for (int var = 0; var < 4; ++var) {
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e017      	b.n	800173e <GNSS_ParsePVTData+0x346>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3342      	adds	r3, #66	@ 0x42
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	7a19      	ldrb	r1, [r3, #8]
 8001718:	4a2b      	ldr	r2, [pc, #172]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4413      	add	r3, r2
 800171e:	460a      	mov	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	3342      	adds	r3, #66	@ 0x42
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	7a19      	ldrb	r1, [r3, #8]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	33bc      	adds	r3, #188	@ 0xbc
 8001734:	460a      	mov	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3301      	adds	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b03      	cmp	r3, #3
 8001742:	dde4      	ble.n	800170e <GNSS_ParsePVTData+0x316>
	}
	GNSS->gSpeed = iLong.iLong;
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017cc <GNSS_ParsePVTData+0x3d4>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e00c      	b.n	800178a <GNSS_ParsePVTData+0x392>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3346      	adds	r3, #70	@ 0x46
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	7a19      	ldrb	r1, [r3, #8]
 800177a:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b03      	cmp	r3, #3
 800178e:	ddef      	ble.n	8001770 <GNSS_ParsePVTData+0x378>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <GNSS_ParsePVTData+0x3d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feed 	bl	8000574 <__aeabi_i2d>
 800179a:	a309      	add	r3, pc, #36	@ (adr r3, 80017c0 <GNSS_ParsePVTData+0x3c8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ff52 	bl	8000648 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9fc 	bl	8000ba8 <__aeabi_d2iz>
 80017b0:	4602      	mov	r2, r0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	88e368f1 	.word	0x88e368f1
 80017c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80017c8:	20000234 	.word	0x20000234
 80017cc:	447a0000 	.word	0x447a0000

080017d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2220      	movs	r2, #32
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f013 fa16 	bl	8014c1a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ee:	4b40      	ldr	r3, [pc, #256]	@ (80018f0 <MX_ADC1_Init+0x120>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <MX_ADC1_Init+0x120>)
 80017f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800180a:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001810:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001812:	2201      	movs	r2, #1
 8001814:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001816:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001818:	2208      	movs	r2, #8
 800181a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800181c:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800181e:	2200      	movs	r2, #0
 8001820:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001822:	4b33      	ldr	r3, [pc, #204]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001824:	2201      	movs	r2, #1
 8001826:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800182a:	2203      	movs	r2, #3
 800182c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800183e:	2200      	movs	r2, #0
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800184c:	2200      	movs	r2, #0
 800184e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001858:	4825      	ldr	r0, [pc, #148]	@ (80018f0 <MX_ADC1_Init+0x120>)
 800185a:	f004 fdcd 	bl	80063f8 <HAL_ADC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001864:	f001 fd00 	bl	8003268 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	481f      	ldr	r0, [pc, #124]	@ (80018f0 <MX_ADC1_Init+0x120>)
 8001874:	f005 ff92 	bl	800779c <HAL_ADCEx_MultiModeConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800187e:	f001 fcf3 	bl	8003268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_ADC1_Init+0x124>)
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001886:	2306      	movs	r3, #6
 8001888:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800188a:	2307      	movs	r3, #7
 800188c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800188e:	237f      	movs	r3, #127	@ 0x7f
 8001890:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001892:	2304      	movs	r3, #4
 8001894:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <MX_ADC1_Init+0x120>)
 80018a0:	f005 fa1a 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018aa:	f001 fcdd 	bl	8003268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <MX_ADC1_Init+0x128>)
 80018b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018b2:	230c      	movs	r3, #12
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <MX_ADC1_Init+0x120>)
 80018bc:	f005 fa0c 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80018c6:	f001 fccf 	bl	8003268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_ADC1_Init+0x12c>)
 80018cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018ce:	2312      	movs	r3, #18
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <MX_ADC1_Init+0x120>)
 80018d8:	f005 f9fe 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80018e2:	f001 fcc1 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000238 	.word	0x20000238
 80018f4:	cb840000 	.word	0xcb840000
 80018f8:	c3210000 	.word	0xc3210000
 80018fc:	0c900008 	.word	0x0c900008

08001900 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09a      	sub	sp, #104	@ 0x68
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2244      	movs	r2, #68	@ 0x44
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f013 f97a 	bl	8014c1a <memset>
  if(adcHandle->Instance==ADC1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800192e:	d167      	bne.n	8001a00 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001934:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001936:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4618      	mov	r0, r3
 8001942:	f008 fa05 	bl	8009d50 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800194c:	f001 fc8c 	bl	8003268 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001950:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a2c      	ldr	r2, [pc, #176]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 8001956:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800195a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_ADC_MspInit+0x108>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001980:	2304      	movs	r3, #4
 8001982:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001984:	2303      	movs	r3, #3
 8001986:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f006 fbc3 	bl	8008120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 800199c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_ADC_MspInit+0x110>)
 800199e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019a2:	2205      	movs	r2, #5
 80019a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019ca:	2220      	movs	r2, #32
 80019cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019d6:	f006 f865 	bl	8007aa4 <HAL_DMA_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80019e0:	f001 fc42 	bl	8003268 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80019ea:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <HAL_ADC_MspInit+0x10c>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2105      	movs	r1, #5
 80019f4:	2012      	movs	r0, #18
 80019f6:	f006 f82d 	bl	8007a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019fa:	2012      	movs	r0, #18
 80019fc:	f006 f844 	bl	8007a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	3768      	adds	r7, #104	@ 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	200002a4 	.word	0x200002a4
 8001a10:	4002001c 	.word	0x4002001c
 8001a14:	00000000 	.word	0x00000000

08001a18 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a2a:	f040 8097 	bne.w	8001b5c <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001a2e:	4b52      	ldr	r3, [pc, #328]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd9e 	bl	8000574 <__aeabi_i2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001b68 <HAL_ADC_ConvCpltCallback+0x150>)
 8001a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a42:	f7fe ff2b 	bl	800089c <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f8f3 	bl	8000c38 <__aeabi_d2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a49      	ldr	r2, [pc, #292]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x164>)
 8001a56:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001a58:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <HAL_ADC_ConvCpltCallback+0x168>)
 8001a5a:	ed93 7a00 	vldr	s14, [r3]
 8001a5e:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	ee17 0a90 	vmov	r0, s15
 8001a6c:	f7fe fd94 	bl	8000598 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	4943      	ldr	r1, [pc, #268]	@ (8001b88 <HAL_ADC_ConvCpltCallback+0x170>)
 8001a7a:	f7fe ff0f 	bl	800089c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd72 	bl	8000574 <__aeabi_i2d>
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x164>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd7d 	bl	8000598 <__aeabi_f2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b8c <HAL_ADC_ConvCpltCallback+0x174>)
 8001aa4:	f7fe fefa 	bl	800089c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fdca 	bl	8000648 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fc03 	bl	80002d8 <__aeabi_dsub>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fdb5 	bl	8000648 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f8a7 	bl	8000c38 <__aeabi_d2f>
 8001aea:	ee07 0a10 	vmov	s14, r0
 8001aee:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <HAL_ADC_ConvCpltCallback+0x178>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x160>)
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd37 	bl	8000574 <__aeabi_i2d>
 8001b06:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b70 <HAL_ADC_ConvCpltCallback+0x158>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fec6 	bl	800089c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_ADC_ConvCpltCallback+0x174>)
 8001b1e:	f7fe fd93 	bl	8000648 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x164>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd32 	bl	8000598 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fd84 	bl	8000648 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f876 	bl	8000c38 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001b50:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001b52:	2203      	movs	r2, #3
 8001b54:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b56:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <HAL_ADC_ConvCpltCallback+0x180>)
 8001b58:	f004 fdd2 	bl	8006700 <HAL_ADC_Start_DMA>

	}

}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b66:	bf00      	nop
 8001b68:	d70a3d70 	.word	0xd70a3d70
 8001b6c:	40b36323 	.word	0x40b36323
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40affe00 	.word	0x40affe00
 8001b78:	20000bdc 	.word	0x20000bdc
 8001b7c:	20000be8 	.word	0x20000be8
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004
 8001b88:	40590000 	.word	0x40590000
 8001b8c:	40080000 	.word	0x40080000
 8001b90:	20000be4 	.word	0x20000be4
 8001b94:	20000bec 	.word	0x20000bec
 8001b98:	20000238 	.word	0x20000238

08001b9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b0a2      	sub	sp, #136	@ 0x88
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001ba8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00f fbac 	bl	801130a <osMutexCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a51      	ldr	r2, [pc, #324]	@ (8001cfc <MX_FREERTOS_Init+0x160>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 8001bbe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00f fba1 	bl	801130a <osMutexCreate>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4a4d      	ldr	r2, [pc, #308]	@ (8001d00 <MX_FREERTOS_Init+0x164>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 8001bce:	2300      	movs	r3, #0
 8001bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 8001bd2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00f fb97 	bl	801130a <osMutexCreate>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a49      	ldr	r2, [pc, #292]	@ (8001d04 <MX_FREERTOS_Init+0x168>)
 8001be0:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartTxDone */
  osSemaphoreDef(uartTxDone);
 8001be2:	2300      	movs	r3, #0
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
  uartTxDoneHandle = osSemaphoreCreate(osSemaphore(uartTxDone), 1);
 8001be6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f00f fc1d 	bl	801142c <osSemaphoreCreate>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a44      	ldr	r2, [pc, #272]	@ (8001d08 <MX_FREERTOS_Init+0x16c>)
 8001bf6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(uartTxDoneHandle, 0);
 8001bf8:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <MX_FREERTOS_Init+0x16c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00f fc32 	bl	8011468 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 8001c04:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <MX_FREERTOS_Init+0x170>)
 8001c06:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001c14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00f fb4e 	bl	80112bc <osThreadCreate>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a3b      	ldr	r2, [pc, #236]	@ (8001d10 <MX_FREERTOS_Init+0x174>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityNormal, 0, 256);
 8001c26:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <MX_FREERTOS_Init+0x178>)
 8001c28:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001c36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00f fb3d 	bl	80112bc <osThreadCreate>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a34      	ldr	r2, [pc, #208]	@ (8001d18 <MX_FREERTOS_Init+0x17c>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 8001c48:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <MX_FREERTOS_Init+0x180>)
 8001c4a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001c4e:	461d      	mov	r5, r3
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001c58:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f00f fb2c 	bl	80112bc <osThreadCreate>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a2e      	ldr	r2, [pc, #184]	@ (8001d20 <MX_FREERTOS_Init+0x184>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityAboveNormal, 0, 256);
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <MX_FREERTOS_Init+0x188>)
 8001c6c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001c70:	461d      	mov	r5, r3
 8001c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c76:	682b      	ldr	r3, [r5, #0]
 8001c78:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f00f fb1b 	bl	80112bc <osThreadCreate>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a27      	ldr	r2, [pc, #156]	@ (8001d28 <MX_FREERTOS_Init+0x18c>)
 8001c8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityBelowNormal, 0, 256);
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <MX_FREERTOS_Init+0x190>)
 8001c8e:	f107 0414 	add.w	r4, r7, #20
 8001c92:	461d      	mov	r5, r3
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00f fb0a 	bl	80112bc <osThreadCreate>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <MX_FREERTOS_Init+0x194>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <MX_FREERTOS_Init+0x198>)
 8001cb0:	463c      	mov	r4, r7
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00f fafb 	bl	80112bc <osThreadCreate>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <MX_FREERTOS_Init+0x19c>)
 8001cca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifdef PARTIE_HAUT

  osThreadSuspend(distancecalcHandle);
 8001ccc:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <MX_FREERTOS_Init+0x194>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00f fc60 	bl	8011596 <osThreadSuspend>
  osThreadSuspend(servoHandle);

#endif


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_FREERTOS_Init+0x1a0>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <MX_FREERTOS_Init+0x1a0>)
 8001cdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce0:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_FREERTOS_Init+0x1a4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_FREERTOS_Init+0x1a4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <MX_FREERTOS_Init+0x1a4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cf4:	bf00      	nop
 8001cf6:	3788      	adds	r7, #136	@ 0x88
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	20000350 	.word	0x20000350
 8001d00:	20000354 	.word	0x20000354
 8001d04:	20000358 	.word	0x20000358
 8001d08:	2000035c 	.word	0x2000035c
 8001d0c:	08018c40 	.word	0x08018c40
 8001d10:	20000338 	.word	0x20000338
 8001d14:	08018c60 	.word	0x08018c60
 8001d18:	2000033c 	.word	0x2000033c
 8001d1c:	08018c80 	.word	0x08018c80
 8001d20:	20000340 	.word	0x20000340
 8001d24:	08018c9c 	.word	0x08018c9c
 8001d28:	20000344 	.word	0x20000344
 8001d2c:	08018cc0 	.word	0x08018cc0
 8001d30:	20000348 	.word	0x20000348
 8001d34:	08018ce4 	.word	0x08018ce4
 8001d38:	2000034c 	.word	0x2000034c
 8001d3c:	e000edf0 	.word	0xe000edf0
 8001d40:	e0001000 	.word	0xe0001000

08001d44 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001d4c:	f010 fe08 	bl	8012960 <xTaskGetTickCount>
 8001d50:	4603      	mov	r3, r0
 8001d52:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {

	  uint32_t start1= DWT->CYCCNT;
 8001d54:	4b44      	ldr	r3, [pc, #272]	@ (8001e68 <Startstatemachine+0x124>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	617b      	str	r3, [r7, #20]
      if (osMutexWait(I2CmutexHandle, 20) == osOK)
 8001d5a:	4b44      	ldr	r3, [pc, #272]	@ (8001e6c <Startstatemachine+0x128>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2114      	movs	r1, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00f fadf 	bl	8011324 <osMutexWait>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d13a      	bne.n	8001de2 <Startstatemachine+0x9e>
      {


	  if(pbmseeker_flag==0){
 8001d6c:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <Startstatemachine+0x12c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12d      	bne.n	8001dd0 <Startstatemachine+0x8c>
		  if(pbmseeker==0){
 8001d74:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <Startstatemachine+0x130>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10e      	bne.n	8001d9a <Startstatemachine+0x56>
			  ssd1306_SetCursor(32, 40);
 8001d7c:	2128      	movs	r1, #40	@ 0x28
 8001d7e:	2020      	movs	r0, #32
 8001d80:	f001 fe0a 	bl	8003998 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f001 fcc5 	bl	8003714 <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e78 <Startstatemachine+0x134>)
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	ca06      	ldmia	r2, {r1, r2}
 8001d90:	483a      	ldr	r0, [pc, #232]	@ (8001e7c <Startstatemachine+0x138>)
 8001d92:	f001 fddb 	bl	800394c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001d96:	f001 fcd5 	bl	8003744 <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001d9a:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <Startstatemachine+0x130>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10e      	bne.n	8001dc0 <Startstatemachine+0x7c>
			  ssd1306_SetCursor(32, 40);
 8001da2:	2128      	movs	r1, #40	@ 0x28
 8001da4:	2020      	movs	r0, #32
 8001da6:	f001 fdf7 	bl	8003998 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f001 fcb2 	bl	8003714 <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001db0:	4a31      	ldr	r2, [pc, #196]	@ (8001e78 <Startstatemachine+0x134>)
 8001db2:	2301      	movs	r3, #1
 8001db4:	ca06      	ldmia	r2, {r1, r2}
 8001db6:	4832      	ldr	r0, [pc, #200]	@ (8001e80 <Startstatemachine+0x13c>)
 8001db8:	f001 fdc8 	bl	800394c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001dbc:	f001 fcc2 	bl	8003744 <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001dc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dc4:	f010 fc04 	bl	80125d0 <vTaskDelay>
		  pbmseeker_flag=1;
 8001dc8:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <Startstatemachine+0x12c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e003      	b.n	8001dd8 <Startstatemachine+0x94>
	  }
	  else{
	  statemachine();
 8001dd0:	f001 fe2c 	bl	8003a2c <statemachine>
	  ssd1306_UpdateScreen();
 8001dd4:	f001 fcb6 	bl	8003744 <ssd1306_UpdateScreen>
	  }

      osMutexRelease(I2CmutexHandle);
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <Startstatemachine+0x128>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00f faef 	bl	80113c0 <osMutexRelease>
  }


	  sizestatemachine=uxTaskGetStackHighWaterMark(statemachineHandle);
 8001de2:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <Startstatemachine+0x140>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f011 f89a 	bl	8012f20 <uxTaskGetStackHighWaterMark>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <Startstatemachine+0x144>)
 8001df0:	6013      	str	r3, [r2, #0]
	  sizeGNSS=uxTaskGetStackHighWaterMark(GNSSParseHandle);
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <Startstatemachine+0x148>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f011 f892 	bl	8012f20 <uxTaskGetStackHighWaterMark>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <Startstatemachine+0x14c>)
 8001e00:	6013      	str	r3, [r2, #0]
	  sizesdcard=uxTaskGetStackHighWaterMark(SdcardwriteHandle);
 8001e02:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <Startstatemachine+0x150>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f011 f88a 	bl	8012f20 <uxTaskGetStackHighWaterMark>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <Startstatemachine+0x154>)
 8001e10:	6013      	str	r3, [r2, #0]
	  sizetarvos=uxTaskGetStackHighWaterMark(tarvosDecodeHandle);
 8001e12:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <Startstatemachine+0x158>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f011 f882 	bl	8012f20 <uxTaskGetStackHighWaterMark>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ea0 <Startstatemachine+0x15c>)
 8001e20:	6013      	str	r3, [r2, #0]


	  uint32_t end1= DWT->CYCCNT;
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <Startstatemachine+0x124>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
	  uint32_t cycles= end1-start1;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	60fb      	str	r3, [r7, #12]

	  timestatemachine=(float) cycles/(SystemCoreClock/1000000.0f);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <Startstatemachine+0x160>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8001ea8 <Startstatemachine+0x164>
 8001e4a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <Startstatemachine+0x168>)
 8001e54:	edc3 7a00 	vstr	s15, [r3]





	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	21c8      	movs	r1, #200	@ 0xc8
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f010 fb36 	bl	80124d0 <vTaskDelayUntil>
  {
 8001e64:	e776      	b.n	8001d54 <Startstatemachine+0x10>
 8001e66:	bf00      	nop
 8001e68:	e0001000 	.word	0xe0001000
 8001e6c:	20000354 	.word	0x20000354
 8001e70:	20000308 	.word	0x20000308
 8001e74:	20000ea8 	.word	0x20000ea8
 8001e78:	20000018 	.word	0x20000018
 8001e7c:	08018cf8 	.word	0x08018cf8
 8001e80:	08018cfc 	.word	0x08018cfc
 8001e84:	20000338 	.word	0x20000338
 8001e88:	20000310 	.word	0x20000310
 8001e8c:	2000033c 	.word	0x2000033c
 8001e90:	20000314 	.word	0x20000314
 8001e94:	20000340 	.word	0x20000340
 8001e98:	20000318 	.word	0x20000318
 8001e9c:	2000034c 	.word	0x2000034c
 8001ea0:	2000031c 	.word	0x2000031c
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	49742400 	.word	0x49742400
 8001eac:	20000320 	.word	0x20000320

08001eb0 <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001eb8:	f010 fd52 	bl	8012960 <xTaskGetTickCount>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <StartGNSSParse+0xcc>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	61fb      	str	r3, [r7, #28]
	  GNSS_ParsePVTData(&GNSSData);
 8001ec6:	482e      	ldr	r0, [pc, #184]	@ (8001f80 <StartGNSSParse+0xd0>)
 8001ec8:	f7ff fa96 	bl	80013f8 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001ecc:	482d      	ldr	r0, [pc, #180]	@ (8001f84 <StartGNSSParse+0xd4>)
 8001ece:	f000 fb93 	bl	80025f8 <bmp581_read_precise_normal>
      if (osMutexWait(I2CmutexHandle, 20) == osOK)
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <StartGNSSParse+0xd8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2114      	movs	r1, #20
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00f fa23 	bl	8011324 <osMutexWait>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <StartGNSSParse+0x44>
      {
    	  Read_sensor_data(&myData6AXIS);
 8001ee4:	4829      	ldr	r0, [pc, #164]	@ (8001f8c <StartGNSSParse+0xdc>)
 8001ee6:	f7ff f937 	bl	8001158 <Read_sensor_data>
          osMutexRelease(I2CmutexHandle);
 8001eea:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <StartGNSSParse+0xd8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00f fa66 	bl	80113c0 <osMutexRelease>
      }


	  if(flag_calib){
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <StartGNSSParse+0xe0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <StartGNSSParse+0x62>
		  hauteur_relative=(float)(myDatabmp581.altitude-hauteur_Initiale);
 8001efc:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <StartGNSSParse+0xd4>)
 8001efe:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <StartGNSSParse+0xe4>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <StartGNSSParse+0xe8>)
 8001f0e:	edc3 7a00 	vstr	s15, [r3]
	  }

		if(flag_fin==1){
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <StartGNSSParse+0xec>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <StartGNSSParse+0x70>

			osThreadSuspend(NULL);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f00f fb3b 	bl	8011596 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <StartGNSSParse+0xcc>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
		  uint32_t cycles= end1-start1;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]

		  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <StartGNSSParse+0xf0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f44:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8001fa4 <StartGNSSParse+0xf4>
 8001f48:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f50:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timeGNSS){
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <StartGNSSParse+0xf8>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	dd02      	ble.n	8001f6e <StartGNSSParse+0xbe>
	timeGNSS=times;
 8001f68:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa8 <StartGNSSParse+0xf8>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6013      	str	r3, [r2, #0]
}

vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2164      	movs	r1, #100	@ 0x64
 8001f74:	4618      	mov	r0, r3
 8001f76:	f010 faab 	bl	80124d0 <vTaskDelayUntil>
  {
 8001f7a:	e7a1      	b.n	8001ec0 <StartGNSSParse+0x10>
 8001f7c:	e0001000 	.word	0xe0001000
 8001f80:	20000c6c 	.word	0x20000c6c
 8001f84:	20000758 	.word	0x20000758
 8001f88:	20000354 	.word	0x20000354
 8001f8c:	20000738 	.word	0x20000738
 8001f90:	20000e8c 	.word	0x20000e8c
 8001f94:	20000ea0 	.word	0x20000ea0
 8001f98:	20000ea4 	.word	0x20000ea4
 8001f9c:	20000e9c 	.word	0x20000e9c
 8001fa0:	20000020 	.word	0x20000020
 8001fa4:	49742400 	.word	0x49742400
 8001fa8:	20000334 	.word	0x20000334

08001fac <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4941      	ldr	r1, [pc, #260]	@ (80020c0 <StartSdcard+0x114>)
 8001fbc:	4841      	ldr	r0, [pc, #260]	@ (80020c4 <StartSdcard+0x118>)
 8001fbe:	f00e f8c5 	bl	801014c <f_mount>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001fc6:	f010 fccb 	bl	8012960 <xTaskGetTickCount>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001fce:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <StartSdcard+0x11c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <StartSdcard+0x120>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00f f9a1 	bl	8011324 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <StartSdcard+0x124>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1c3 0301 	rsb	r3, r3, #1
 8001fea:	4a39      	ldr	r2, [pc, #228]	@ (80020d0 <StartSdcard+0x124>)
 8001fec:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <StartSdcard+0x124>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10a      	bne.n	800200c <StartSdcard+0x60>
			  LED_Setcolour(0,0,0,255,255,255);
 8001ff6:	23ff      	movs	r3, #255	@ 0xff
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	23ff      	movs	r3, #255	@ 0xff
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	23ff      	movs	r3, #255	@ 0xff
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2000      	movs	r0, #0
 8002006:	f000 fdd5 	bl	8002bb4 <LED_Setcolour>
 800200a:	e009      	b.n	8002020 <StartSdcard+0x74>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2000      	movs	r0, #0
 800201c:	f000 fdca 	bl	8002bb4 <LED_Setcolour>
		  }

		  if(flag_drop==0){
 8002020:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <StartSdcard+0x128>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <StartSdcard+0xa2>

			  if(sd_counter==5){
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <StartSdcard+0x12c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d108      	bne.n	8002042 <StartSdcard+0x96>
				  fres=store_in_sd(fres);
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	4618      	mov	r0, r3
 8002034:	f001 f91e 	bl	8003274 <store_in_sd>
 8002038:	4603      	mov	r3, r0
 800203a:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <StartSdcard+0x12c>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 8002042:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <StartSdcard+0x12c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <StartSdcard+0x12c>)
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e005      	b.n	800205a <StartSdcard+0xae>

		  }
		  else{
			  fres=store_in_sd(fres);
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f90f 	bl	8003274 <store_in_sd>
 8002056:	4603      	mov	r3, r0
 8002058:	77fb      	strb	r3, [r7, #31]

		  }



		  osMutexRelease(SDCard_mutexeHandle);
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <StartSdcard+0x120>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f00f f9ae 	bl	80113c0 <osMutexRelease>

			if(flag_fin==1){
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <StartSdcard+0x130>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <StartSdcard+0xd0>

				f_mount(NULL, "", 0);
 800206c:	2200      	movs	r2, #0
 800206e:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <StartSdcard+0x114>)
 8002070:	2000      	movs	r0, #0
 8002072:	f00e f86b 	bl	801014c <f_mount>
				osThreadSuspend(NULL);
 8002076:	2000      	movs	r0, #0
 8002078:	f00f fa8d 	bl	8011596 <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <StartSdcard+0x11c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002094:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <StartSdcard+0x134>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a0:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80020e4 <StartSdcard+0x138>
 80020a4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <StartSdcard+0x13c>)
 80020ae:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	21c8      	movs	r1, #200	@ 0xc8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f010 fa09 	bl	80124d0 <vTaskDelayUntil>
  {
 80020be:	e786      	b.n	8001fce <StartSdcard+0x22>
 80020c0:	08018d00 	.word	0x08018d00
 80020c4:	20000770 	.word	0x20000770
 80020c8:	e0001000 	.word	0xe0001000
 80020cc:	20000350 	.word	0x20000350
 80020d0:	2000030c 	.word	0x2000030c
 80020d4:	20000e84 	.word	0x20000e84
 80020d8:	20000304 	.word	0x20000304
 80020dc:	20000e9c 	.word	0x20000e9c
 80020e0:	20000020 	.word	0x20000020
 80020e4:	49742400 	.word	0x49742400
 80020e8:	20000324 	.word	0x20000324

080020ec <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80020f4:	f010 fc34 	bl	8012960 <xTaskGetTickCount>
 80020f8:	4603      	mov	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80020fc:	4b40      	ldr	r3, [pc, #256]	@ (8002200 <Startservo+0x114>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61fb      	str	r3, [r7, #28]

	  if((flag_drop==1) && (flag_calib==1)){
 8002102:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <Startservo+0x118>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d11c      	bne.n	8002144 <Startservo+0x58>
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <Startservo+0x11c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d118      	bne.n	8002144 <Startservo+0x58>

		  if((hauteur_relative<=HAUTEUR_SEPARATION)){
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <Startservo+0x120>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002210 <Startservo+0x124>
 800211c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	d80e      	bhi.n	8002144 <Startservo+0x58>
			  release_mecanism();
 8002126:	f001 f9a7 	bl	8003478 <release_mecanism>
			  flag_separation=1;
 800212a:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <Startservo+0x128>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002130:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <Startservo+0x12c>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]
			  vTaskDelay(pdMS_TO_TICKS(500));
 8002136:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800213a:	f010 fa49 	bl	80125d0 <vTaskDelay>
			  osThreadSuspend(NULL);
 800213e:	2000      	movs	r0, #0
 8002140:	f00f fa29 	bl	8011596 <osThreadSuspend>



		  }
	  }
	  if(flag_drop==0){
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <Startservo+0x118>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d117      	bne.n	800217c <Startservo+0x90>
		  if(flag_bouton_servo==1){
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <Startservo+0x130>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <Startservo+0x78>
			  release_mecanism();
 8002154:	f001 f990 	bl	8003478 <release_mecanism>
			  flag_bouton_servo=2;
 8002158:	4b30      	ldr	r3, [pc, #192]	@ (800221c <Startservo+0x130>)
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 800215e:	4b2e      	ldr	r3, [pc, #184]	@ (8002218 <Startservo+0x12c>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
		  }
		  if(flag_bouton_servo==0){
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <Startservo+0x130>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <Startservo+0x90>
			  lock_mecanism();
 800216c:	f001 f994 	bl	8003498 <lock_mecanism>
			  flag_bouton_servo=2;
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <Startservo+0x130>)
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002176:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <Startservo+0x12c>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]
		  }

	  }

	  	  if(flag_servo_started==1){
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <Startservo+0x12c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <Startservo+0xaa>
	  		 vTaskDelay(pdMS_TO_TICKS(500));
 8002184:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002188:	f010 fa22 	bl	80125d0 <vTaskDelay>

	  		  stop_servo();
 800218c:	f001 f994 	bl	80034b8 <stop_servo>
	  		  flag_servo_started=0;
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <Startservo+0x12c>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
	  	  }



		if(flag_fin==1){
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <Startservo+0x134>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <Startservo+0xb8>

			osThreadSuspend(NULL);
 800219e:	2000      	movs	r0, #0
 80021a0:	f00f f9f9 	bl	8011596 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <Startservo+0x114>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	61bb      	str	r3, [r7, #24]
		  uint32_t cycles= end1-start1;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
		  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <Startservo+0x138>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c8:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8002228 <Startservo+0x13c>
 80021cc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80021d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d4:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timeservo){
 80021d8:	4b14      	ldr	r3, [pc, #80]	@ (800222c <Startservo+0x140>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ed97 7a04 	vldr	s14, [r7, #16]
 80021e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	dd02      	ble.n	80021f2 <Startservo+0x106>
	timeservo=times;
 80021ec:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <Startservo+0x140>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6013      	str	r3, [r2, #0]
}
vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	21c8      	movs	r1, #200	@ 0xc8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f010 f969 	bl	80124d0 <vTaskDelayUntil>
  {
 80021fe:	e77d      	b.n	80020fc <Startservo+0x10>
 8002200:	e0001000 	.word	0xe0001000
 8002204:	20000e84 	.word	0x20000e84
 8002208:	20000e8c 	.word	0x20000e8c
 800220c:	20000ea4 	.word	0x20000ea4
 8002210:	425c0000 	.word	0x425c0000
 8002214:	20000e88 	.word	0x20000e88
 8002218:	20000e94 	.word	0x20000e94
 800221c:	20000e90 	.word	0x20000e90
 8002220:	20000e9c 	.word	0x20000e9c
 8002224:	20000020 	.word	0x20000020
 8002228:	49742400 	.word	0x49742400
 800222c:	2000032c 	.word	0x2000032c

08002230 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002238:	f010 fb92 	bl	8012960 <xTaskGetTickCount>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8002240:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <Startdistancecalc+0x88>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	61fb      	str	r3, [r7, #28]

	  if(flag_calib==1){
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <Startdistancecalc+0x8c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1

#endif
	  }
}

		if(flag_fin==1){
 800224c:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <Startdistancecalc+0x90>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <Startdistancecalc+0x2a>

			osThreadSuspend(NULL);
 8002254:	2000      	movs	r0, #0
 8002256:	f00f f99e 	bl	8011596 <osThreadSuspend>
		}



	  uint32_t end1= DWT->CYCCNT;
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <Startdistancecalc+0x88>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
	  uint32_t cycles= end1-start1;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]

	  float times=(float) cycles/(SystemCoreClock/1000000.0f);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <Startdistancecalc+0x94>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 80022c8 <Startdistancecalc+0x98>
 8002282:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228a:	edc7 7a04 	vstr	s15, [r7, #16]
if(times>timedist){
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <Startdistancecalc+0x9c>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ed97 7a04 	vldr	s14, [r7, #16]
 8002298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	dd02      	ble.n	80022a8 <Startdistancecalc+0x78>
timedist=times;
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <Startdistancecalc+0x9c>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6013      	str	r3, [r2, #0]
}
vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	21c8      	movs	r1, #200	@ 0xc8
 80022ae:	4618      	mov	r0, r3
 80022b0:	f010 f90e 	bl	80124d0 <vTaskDelayUntil>
  {
 80022b4:	e7c4      	b.n	8002240 <Startdistancecalc+0x10>
 80022b6:	bf00      	nop
 80022b8:	e0001000 	.word	0xe0001000
 80022bc:	20000e8c 	.word	0x20000e8c
 80022c0:	20000e9c 	.word	0x20000e9c
 80022c4:	20000020 	.word	0x20000020
 80022c8:	49742400 	.word	0x49742400
 80022cc:	20000330 	.word	0x20000330

080022d0 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b09d      	sub	sp, #116	@ 0x74
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80022d8:	f010 fb42 	bl	8012960 <xTaskGetTickCount>
 80022dc:	6638      	str	r0, [r7, #96]	@ 0x60
	 uint8_t temp_trame[TRAME_SIZE];
		      uint8_t temp5[5];
		      uint8_t data_index = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80022e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002514 <startTarvosDecode+0x244>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	65fb      	str	r3, [r7, #92]	@ 0x5c



	          while (read_index != write_index) {
 80022ea:	e0e3      	b.n	80024b4 <startTarvosDecode+0x1e4>
	              // Recherche de l'entête principale
	              if (circular_buffer[read_index] == 0x02 &&
 80022ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002518 <startTarvosDecode+0x248>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b89      	ldr	r3, [pc, #548]	@ (800251c <startTarvosDecode+0x24c>)
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	f040 80cb 	bne.w	8002494 <startTarvosDecode+0x1c4>
	                  circular_buffer[(read_index + 1) % CIRC_BUF_SIZE] == 0x81)
 80022fe:	4b86      	ldr	r3, [pc, #536]	@ (8002518 <startTarvosDecode+0x248>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	425a      	negs	r2, r3
 8002308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002310:	bf58      	it	pl
 8002312:	4253      	negpl	r3, r2
 8002314:	4a81      	ldr	r2, [pc, #516]	@ (800251c <startTarvosDecode+0x24c>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
	              if (circular_buffer[read_index] == 0x02 &&
 8002318:	2b81      	cmp	r3, #129	@ 0x81
 800231a:	f040 80bb 	bne.w	8002494 <startTarvosDecode+0x1c4>
	              {
	                  data_index = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	                  while (data_index < TRAME_SIZE) {
 8002324:	e082      	b.n	800242c <startTarvosDecode+0x15c>
	                      // Vérifie s’il reste au moins 5 octets
	                      uint16_t available = (write_index >= read_index)
 8002326:	4b7e      	ldr	r3, [pc, #504]	@ (8002520 <startTarvosDecode+0x250>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b7a      	ldr	r3, [pc, #488]	@ (8002518 <startTarvosDecode+0x248>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	429a      	cmp	r2, r3
 8002334:	d308      	bcc.n	8002348 <startTarvosDecode+0x78>
	                          ? (write_index - read_index)
 8002336:	4b7a      	ldr	r3, [pc, #488]	@ (8002520 <startTarvosDecode+0x250>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <startTarvosDecode+0x248>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	b29b      	uxth	r3, r3
 8002346:	e00a      	b.n	800235e <startTarvosDecode+0x8e>
	                          : (CIRC_BUF_SIZE - read_index + write_index);
 8002348:	4b75      	ldr	r3, [pc, #468]	@ (8002520 <startTarvosDecode+0x250>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b72      	ldr	r3, [pc, #456]	@ (8002518 <startTarvosDecode+0x248>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8002358:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800235c:	b29b      	uxth	r3, r3
 800235e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	                      if (available < 5) {
 8002362:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002366:	2b04      	cmp	r3, #4
 8002368:	d966      	bls.n	8002438 <startTarvosDecode+0x168>
	                          break; // attendre plus de données
	                      }

	                      // Copie 5 octets
	                      for (int i = 0; i < 5; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800236e:	e017      	b.n	80023a0 <startTarvosDecode+0xd0>
	                          temp5[i] = circular_buffer[(read_index + i) % CIRC_BUF_SIZE];
 8002370:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <startTarvosDecode+0x248>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800237a:	4413      	add	r3, r2
 800237c:	425a      	negs	r2, r3
 800237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002386:	bf58      	it	pl
 8002388:	4253      	negpl	r3, r2
 800238a:	4a64      	ldr	r2, [pc, #400]	@ (800251c <startTarvosDecode+0x24c>)
 800238c:	5cd1      	ldrb	r1, [r2, r3]
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002394:	4413      	add	r3, r2
 8002396:	460a      	mov	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	                      for (int i = 0; i < 5; i++) {
 800239a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800239c:	3301      	adds	r3, #1
 800239e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	dde4      	ble.n	8002370 <startTarvosDecode+0xa0>
	                      }

	                      // Confirmation TX ? (trame parasite)
	                      if (temp5[0] == 0x02 && temp5[1] == 0x40 && temp5[2] == 0x01) {
 80023a6:	7b3b      	ldrb	r3, [r7, #12]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d114      	bne.n	80023d6 <startTarvosDecode+0x106>
 80023ac:	7b7b      	ldrb	r3, [r7, #13]
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d111      	bne.n	80023d6 <startTarvosDecode+0x106>
 80023b2:	7bbb      	ldrb	r3, [r7, #14]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d10e      	bne.n	80023d6 <startTarvosDecode+0x106>
	                          // Skip trame de confirmation
	                          read_index = (read_index + 5) % CIRC_BUF_SIZE;
 80023b8:	4b57      	ldr	r3, [pc, #348]	@ (8002518 <startTarvosDecode+0x248>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3305      	adds	r3, #5
 80023c0:	425a      	negs	r2, r3
 80023c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ca:	bf58      	it	pl
 80023cc:	4253      	negpl	r3, r2
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <startTarvosDecode+0x248>)
 80023d2:	801a      	strh	r2, [r3, #0]
	                          continue;
 80023d4:	e02a      	b.n	800242c <startTarvosDecode+0x15c>
	                      }

	                      // Sinon : partie utile, on ajoute à la trame
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80023da:	e012      	b.n	8002402 <startTarvosDecode+0x132>
	                          temp_trame[data_index++] = temp5[i];
 80023dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 80023e6:	4619      	mov	r1, r3
 80023e8:	f107 020c 	add.w	r2, r7, #12
 80023ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ee:	4413      	add	r3, r2
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 80023f6:	443b      	add	r3, r7
 80023f8:	f803 2c5c 	strb.w	r2, [r3, #-92]
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80023fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023fe:	3301      	adds	r3, #1
 8002400:	667b      	str	r3, [r7, #100]	@ 0x64
 8002402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002404:	2b04      	cmp	r3, #4
 8002406:	dc03      	bgt.n	8002410 <startTarvosDecode+0x140>
 8002408:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800240c:	2b3b      	cmp	r3, #59	@ 0x3b
 800240e:	d9e5      	bls.n	80023dc <startTarvosDecode+0x10c>
	                      }

	                      read_index = (read_index + 5) % CIRC_BUF_SIZE;
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <startTarvosDecode+0x248>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	3305      	adds	r3, #5
 8002418:	425a      	negs	r2, r3
 800241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002422:	bf58      	it	pl
 8002424:	4253      	negpl	r3, r2
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <startTarvosDecode+0x248>)
 800242a:	801a      	strh	r2, [r3, #0]
	                  while (data_index < TRAME_SIZE) {
 800242c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002430:	2b3b      	cmp	r3, #59	@ 0x3b
 8002432:	f67f af78 	bls.w	8002326 <startTarvosDecode+0x56>
 8002436:	e000      	b.n	800243a <startTarvosDecode+0x16a>
	                          break; // attendre plus de données
 8002438:	bf00      	nop
	                  }

	                  if (data_index == TRAME_SIZE) {
 800243a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800243e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002440:	d137      	bne.n	80024b2 <startTarvosDecode+0x1e2>

	                	  if (tarvos_checksum(temp_trame, TRAME_SIZE) == temp_trame[TRAME_SIZE - 1]) {
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	213c      	movs	r1, #60	@ 0x3c
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fb69 	bl	8004b20 <tarvos_checksum>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002456:	429a      	cmp	r2, r3
 8002458:	d12b      	bne.n	80024b2 <startTarvosDecode+0x1e2>

#ifdef PARTIE_HAUT
	                      memcpy(tarvos_DATA, temp_trame, TRAME_SIZE);
 800245a:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <startTarvosDecode+0x254>)
 800245c:	f107 0414 	add.w	r4, r7, #20
 8002460:	469c      	mov	ip, r3
 8002462:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002466:	4665      	mov	r5, ip
 8002468:	4626      	mov	r6, r4
 800246a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246c:	6028      	str	r0, [r5, #0]
 800246e:	6069      	str	r1, [r5, #4]
 8002470:	60aa      	str	r2, [r5, #8]
 8002472:	60eb      	str	r3, [r5, #12]
 8002474:	3410      	adds	r4, #16
 8002476:	f10c 0c10 	add.w	ip, ip, #16
 800247a:	4574      	cmp	r4, lr
 800247c:	d1f3      	bne.n	8002466 <startTarvosDecode+0x196>
 800247e:	4665      	mov	r5, ip
 8002480:	4623      	mov	r3, r4
 8002482:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002484:	6028      	str	r0, [r5, #0]
 8002486:	6069      	str	r1, [r5, #4]
 8002488:	60aa      	str	r2, [r5, #8]
	                      decode_payload(&OTHERData, tarvos_DATA);  // ou un seul struct global
 800248a:	4926      	ldr	r1, [pc, #152]	@ (8002524 <startTarvosDecode+0x254>)
 800248c:	4826      	ldr	r0, [pc, #152]	@ (8002528 <startTarvosDecode+0x258>)
 800248e:	f002 faaf 	bl	80049f0 <decode_payload>
	                  if (data_index == TRAME_SIZE) {
 8002492:	e00e      	b.n	80024b2 <startTarvosDecode+0x1e2>
	                	  }

	                  }
	              } else {
	                  // Entête invalide : skip 1 octet
	                  read_index = (read_index + 1) % CIRC_BUF_SIZE;
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <startTarvosDecode+0x248>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	425a      	negs	r2, r3
 800249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a6:	bf58      	it	pl
 80024a8:	4253      	negpl	r3, r2
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <startTarvosDecode+0x248>)
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e000      	b.n	80024b4 <startTarvosDecode+0x1e4>
	                  if (data_index == TRAME_SIZE) {
 80024b2:	bf00      	nop
	          while (read_index != write_index) {
 80024b4:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <startTarvosDecode+0x248>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <startTarvosDecode+0x250>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f47f af13 	bne.w	80022ec <startTarvosDecode+0x1c>
	          }




		if(flag_fin==1){
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <startTarvosDecode+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <startTarvosDecode+0x204>

			osThreadSuspend(NULL);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f00f f861 	bl	8011596 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <startTarvosDecode+0x244>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t cycles= end1-start1;
 80024da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	657b      	str	r3, [r7, #84]	@ 0x54

		  timedecode=(float) cycles/(SystemCoreClock/1000000.0f);
 80024e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <startTarvosDecode+0x260>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f8:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8002534 <startTarvosDecode+0x264>
 80024fc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <startTarvosDecode+0x268>)
 8002506:	edc3 7a00 	vstr	s15, [r3]

vTaskDelay(pdMS_TO_TICKS(50));
 800250a:	2032      	movs	r0, #50	@ 0x32
 800250c:	f010 f860 	bl	80125d0 <vTaskDelay>
  {
 8002510:	e6e8      	b.n	80022e4 <startTarvosDecode+0x14>
 8002512:	bf00      	nop
 8002514:	e0001000 	.word	0xe0001000
 8002518:	200018ba 	.word	0x200018ba
 800251c:	200016b8 	.word	0x200016b8
 8002520:	200018b8 	.word	0x200018b8
 8002524:	20000488 	.word	0x20000488
 8002528:	20000bf0 	.word	0x20000bf0
 800252c:	20000e9c 	.word	0x20000e9c
 8002530:	20000020 	.word	0x20000020
 8002534:	49742400 	.word	0x49742400
 8002538:	20000328 	.word	0x20000328

0800253c <bmp581_init_precise_normal>:
extern I2C_HandleTypeDef hi2c1;


//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af04      	add	r7, sp, #16
 8002542:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8002544:	237b      	movs	r3, #123	@ 0x7b
 8002546:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8002548:	2369      	movs	r3, #105	@ 0x69
 800254a:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 800254c:	232b      	movs	r3, #43	@ 0x2b
 800254e:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8002550:	2312      	movs	r3, #18
 8002552:	723b      	strb	r3, [r7, #8]
	int check=0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8002558:	2364      	movs	r3, #100	@ 0x64
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	2301      	movs	r3, #1
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	f107 030b 	add.w	r3, r7, #11
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2301      	movs	r3, #1
 8002568:	2236      	movs	r2, #54	@ 0x36
 800256a:	218e      	movs	r1, #142	@ 0x8e
 800256c:	4821      	ldr	r0, [pc, #132]	@ (80025f4 <bmp581_init_precise_normal+0xb8>)
 800256e:	f006 f857 	bl	8008620 <HAL_I2C_Mem_Write>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <bmp581_init_precise_normal+0x40>
			check=1;
 8002578:	2301      	movs	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800257c:	2364      	movs	r3, #100	@ 0x64
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2301      	movs	r3, #1
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	f107 030a 	add.w	r3, r7, #10
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	2237      	movs	r2, #55	@ 0x37
 800258e:	218e      	movs	r1, #142	@ 0x8e
 8002590:	4818      	ldr	r0, [pc, #96]	@ (80025f4 <bmp581_init_precise_normal+0xb8>)
 8002592:	f006 f845 	bl	8008620 <HAL_I2C_Mem_Write>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <bmp581_init_precise_normal+0x64>
					check=1;
 800259c:	2301      	movs	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 80025a0:	2364      	movs	r3, #100	@ 0x64
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	2301      	movs	r3, #1
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	f107 0309 	add.w	r3, r7, #9
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2301      	movs	r3, #1
 80025b0:	2230      	movs	r2, #48	@ 0x30
 80025b2:	218e      	movs	r1, #142	@ 0x8e
 80025b4:	480f      	ldr	r0, [pc, #60]	@ (80025f4 <bmp581_init_precise_normal+0xb8>)
 80025b6:	f006 f833 	bl	8008620 <HAL_I2C_Mem_Write>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <bmp581_init_precise_normal+0x88>
				check=1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 80025c4:	2364      	movs	r3, #100	@ 0x64
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	2301      	movs	r3, #1
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	2230      	movs	r2, #48	@ 0x30
 80025d6:	218e      	movs	r1, #142	@ 0x8e
 80025d8:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <bmp581_init_precise_normal+0xb8>)
 80025da:	f006 f821 	bl	8008620 <HAL_I2C_Mem_Write>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <bmp581_init_precise_normal+0xac>
					check=1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
//	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
//					check=1;
//				}


	return check;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	b2db      	uxtb	r3, r3

}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000360 	.word	0x20000360

080025f8 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af04      	add	r7, sp, #16
 80025fe:	6078      	str	r0, [r7, #4]
		int check=0;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 800260c:	2364      	movs	r3, #100	@ 0x64
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	2306      	movs	r3, #6
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	221d      	movs	r2, #29
 800261e:	218f      	movs	r1, #143	@ 0x8f
 8002620:	4829      	ldr	r0, [pc, #164]	@ (80026c8 <bmp581_read_precise_normal+0xd0>)
 8002622:	f006 f911 	bl	8008848 <HAL_I2C_Mem_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <bmp581_read_precise_normal+0x38>
					check=1;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d141      	bne.n	80026ba <bmp581_read_precise_normal+0xc2>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	4313      	orrs	r3, r2
 8002640:	7b3a      	ldrb	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8002646:	7c7b      	ldrb	r3, [r7, #17]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	7c3b      	ldrb	r3, [r7, #16]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	4313      	orrs	r3, r2
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
		bmp581->press=(float) intbufferpres/64.0;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002660:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80026cc <bmp581_read_precise_normal+0xd4>
 8002664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	edc3 7a03 	vstr	s15, [r3, #12]
		bmp581->temps=(float) intbuffertemp/65536.0;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002678:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80026d0 <bmp581_read_precise_normal+0xd8>
 800267c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	edc3 7a04 	vstr	s15, [r3, #16]

		bmp581->altitude= (1.0f - powf(bmp581->press / 101325.0f, 0.190295f)) * 44330.0f;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 7a03 	vldr	s15, [r3, #12]
 800268c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80026d4 <bmp581_read_precise_normal+0xdc>
 8002690:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002694:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80026d8 <bmp581_read_precise_normal+0xe0>
 8002698:	eeb0 0a47 	vmov.f32	s0, s14
 800269c:	f015 fef6 	bl	801848c <powf>
 80026a0:	eef0 7a40 	vmov.f32	s15, s0
 80026a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80026dc <bmp581_read_precise_normal+0xe4>
 80026b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edc3 7a05 	vstr	s15, [r3, #20]
		}

		return check;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	b2db      	uxtb	r3, r3
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000360 	.word	0x20000360
 80026cc:	42800000 	.word	0x42800000
 80026d0:	47800000 	.word	0x47800000
 80026d4:	47c5e680 	.word	0x47c5e680
 80026d8:	3e42dcb1 	.word	0x3e42dcb1
 80026dc:	472d2a00 	.word	0x472d2a00

080026e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <MX_DMA_Init+0x90>)
 80026e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ea:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <MX_DMA_Init+0x90>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <MX_DMA_Init+0x90>)
 80026f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <MX_DMA_Init+0x90>)
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <MX_DMA_Init+0x90>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6493      	str	r3, [r2, #72]	@ 0x48
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <MX_DMA_Init+0x90>)
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	200b      	movs	r0, #11
 800271c:	f005 f99a 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002720:	200b      	movs	r0, #11
 8002722:	f005 f9b1 	bl	8007a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2105      	movs	r1, #5
 800272a:	200c      	movs	r0, #12
 800272c:	f005 f992 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002730:	200c      	movs	r0, #12
 8002732:	f005 f9a9 	bl	8007a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2105      	movs	r1, #5
 800273a:	200d      	movs	r0, #13
 800273c:	f005 f98a 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002740:	200d      	movs	r0, #13
 8002742:	f005 f9a1 	bl	8007a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2105      	movs	r1, #5
 800274a:	200e      	movs	r0, #14
 800274c:	f005 f982 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002750:	200e      	movs	r0, #14
 8002752:	f005 f999 	bl	8007a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2105      	movs	r1, #5
 800275a:	200f      	movs	r0, #15
 800275c:	f005 f97a 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002760:	200f      	movs	r0, #15
 8002762:	f005 f991 	bl	8007a88 <HAL_NVIC_EnableIRQ>

}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000

08002774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800278a:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	4a48      	ldr	r2, [pc, #288]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002796:	4b46      	ldr	r3, [pc, #280]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	4a42      	ldr	r2, [pc, #264]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ae:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c6:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	4a36      	ldr	r2, [pc, #216]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <MX_GPIO_Init+0x13c>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2110      	movs	r1, #16
 80027ee:	4831      	ldr	r0, [pc, #196]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027f0:	f005 fe30 	bl	8008454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80027fa:	482f      	ldr	r0, [pc, #188]	@ (80028b8 <MX_GPIO_Init+0x144>)
 80027fc:	f005 fe2a 	bl	8008454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002800:	2310      	movs	r3, #16
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002804:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002818:	f005 fc82 	bl	8008120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800281c:	2310      	movs	r3, #16
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002820:	2301      	movs	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4820      	ldr	r0, [pc, #128]	@ (80028b4 <MX_GPIO_Init+0x140>)
 8002834:	f005 fc74 	bl	8008120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002838:	2302      	movs	r3, #2
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800283c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	481a      	ldr	r0, [pc, #104]	@ (80028b8 <MX_GPIO_Init+0x144>)
 800284e:	f005 fc67 	bl	8008120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002852:	2304      	movs	r3, #4
 8002854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4814      	ldr	r0, [pc, #80]	@ (80028b8 <MX_GPIO_Init+0x144>)
 8002866:	f005 fc5b 	bl	8008120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 800286a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800286e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	2301      	movs	r3, #1
 8002872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <MX_GPIO_Init+0x144>)
 8002884:	f005 fc4c 	bl	8008120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2105      	movs	r1, #5
 800288c:	2007      	movs	r0, #7
 800288e:	f005 f8e1 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002892:	2007      	movs	r0, #7
 8002894:	f005 f8f8 	bl	8007a88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	200a      	movs	r0, #10
 800289e:	f005 f8d9 	bl	8007a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80028a2:	200a      	movs	r0, #10
 80028a4:	f005 f8f0 	bl	8007a88 <HAL_NVIC_EnableIRQ>

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	@ 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	48000800 	.word	0x48000800
 80028b8:	48000400 	.word	0x48000400

080028bc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <MX_I2C1_Init+0x78>)
 80028c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <MX_I2C1_Init+0x7c>)
 80028ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028d8:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028f6:	480e      	ldr	r0, [pc, #56]	@ (8002930 <MX_I2C1_Init+0x74>)
 80028f8:	f005 fdf6 	bl	80084e8 <HAL_I2C_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002902:	f000 fcb1 	bl	8003268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002906:	2100      	movs	r1, #0
 8002908:	4809      	ldr	r0, [pc, #36]	@ (8002930 <MX_I2C1_Init+0x74>)
 800290a:	f006 fb79 	bl	8009000 <HAL_I2CEx_ConfigAnalogFilter>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002914:	f000 fca8 	bl	8003268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002918:	2100      	movs	r1, #0
 800291a:	4805      	ldr	r0, [pc, #20]	@ (8002930 <MX_I2C1_Init+0x74>)
 800291c:	f006 fbbb 	bl	8009096 <HAL_I2CEx_ConfigDigitalFilter>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002926:	f000 fc9f 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000360 	.word	0x20000360
 8002934:	40005400 	.word	0x40005400
 8002938:	40b285c2 	.word	0x40b285c2

0800293c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <MX_I2C3_Init+0x78>)
 8002944:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40621236;
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <MX_I2C3_Init+0x7c>)
 800294a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800294c:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <MX_I2C3_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002952:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002954:	2201      	movs	r2, #1
 8002956:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <MX_I2C3_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800295e:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <MX_I2C3_Init+0x74>)
 800296c:	2200      	movs	r2, #0
 800296e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002976:	480e      	ldr	r0, [pc, #56]	@ (80029b0 <MX_I2C3_Init+0x74>)
 8002978:	f005 fdb6 	bl	80084e8 <HAL_I2C_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002982:	f000 fc71 	bl	8003268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <MX_I2C3_Init+0x74>)
 800298a:	f006 fb39 	bl	8009000 <HAL_I2CEx_ConfigAnalogFilter>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002994:	f000 fc68 	bl	8003268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002998:	2100      	movs	r1, #0
 800299a:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <MX_I2C3_Init+0x74>)
 800299c:	f006 fb7b 	bl	8009096 <HAL_I2CEx_ConfigDigitalFilter>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80029a6:	f000 fc5f 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200003b4 	.word	0x200003b4
 80029b4:	40007800 	.word	0x40007800
 80029b8:	40621236 	.word	0x40621236

080029bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b09e      	sub	sp, #120	@ 0x78
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d4:	f107 0320 	add.w	r3, r7, #32
 80029d8:	2244      	movs	r2, #68	@ 0x44
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f012 f91c 	bl	8014c1a <memset>
  if(i2cHandle->Instance==I2C1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b58 <HAL_I2C_MspInit+0x19c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d155      	bne.n	8002a98 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029ec:	2340      	movs	r3, #64	@ 0x40
 80029ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	4618      	mov	r0, r3
 80029fa:	f007 f9a9 	bl	8009d50 <HAL_RCCEx_PeriphCLKConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a04:	f000 fc30 	bl	8003268 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0c:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a14:	4b51      	ldr	r3, [pc, #324]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b4e      	ldr	r3, [pc, #312]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a24:	4a4d      	ldr	r2, [pc, #308]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a3c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a52:	4619      	mov	r1, r3
 8002a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a58:	f005 fb62 	bl	8008120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a62:	2312      	movs	r3, #18
 8002a64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a76:	4619      	mov	r1, r3
 8002a78:	4839      	ldr	r0, [pc, #228]	@ (8002b60 <HAL_I2C_MspInit+0x1a4>)
 8002a7a:	f005 fb51 	bl	8008120 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a7e:	4b37      	ldr	r3, [pc, #220]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	4a36      	ldr	r2, [pc, #216]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8a:	4b34      	ldr	r3, [pc, #208]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a96:	e05a      	b.n	8002b4e <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	@ (8002b64 <HAL_I2C_MspInit+0x1a8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d155      	bne.n	8002b4e <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aa6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aac:	f107 0320 	add.w	r3, r7, #32
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f007 f94d 	bl	8009d50 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002abc:	f000 fbd4 	bl	8003268 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	4a25      	ldr	r2, [pc, #148]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad8:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002adc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002b02:	2302      	movs	r3, #2
 8002b04:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b10:	f005 fb06 	bl	8008120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002b26:	2308      	movs	r3, #8
 8002b28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480d      	ldr	r0, [pc, #52]	@ (8002b68 <HAL_I2C_MspInit+0x1ac>)
 8002b32:	f005 faf5 	bl	8008120 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b36:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_I2C_MspInit+0x1a0>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	3778      	adds	r7, #120	@ 0x78
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	40007800 	.word	0x40007800
 8002b68:	48000800 	.word	0x48000800

08002b6c <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8002b72:	480d      	ldr	r0, [pc, #52]	@ (8002ba8 <LED_Init+0x3c>)
 8002b74:	f007 ffcc 	bl	800ab10 <HAL_TIM_PWM_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	80fb      	strh	r3, [r7, #6]
 8002b80:	e006      	b.n	8002b90 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4a09      	ldr	r2, [pc, #36]	@ (8002bac <LED_Init+0x40>)
 8002b86:	2100      	movs	r1, #0
 8002b88:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	80fb      	strh	r3, [r7, #6]
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002b96:	d9f4      	bls.n	8002b82 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <LED_Init+0x44>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002b9e:	797b      	ldrb	r3, [r7, #5]




}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20001474 	.word	0x20001474
 8002bac:	20000d40 	.word	0x20000d40
 8002bb0:	20000e79 	.word	0x20000e79

08002bb4 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	@ 0x2c
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	71fb      	strb	r3, [r7, #7]
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71bb      	strb	r3, [r7, #6]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	717b      	strb	r3, [r7, #5]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8002be2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002be6:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8002be8:	793b      	ldrb	r3, [r7, #4]
 8002bea:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002bec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002bf0:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	e007      	b.n	8002c08 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8002bf8:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <LED_Setcolour+0x11c>)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	3301      	adds	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002c0e:	ddf3      	ble.n	8002bf8 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e032      	b.n	8002c7c <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	77bb      	strb	r3, [r7, #30]
 8002c1a:	e029      	b.n	8002c70 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	e020      	b.n	8002c64 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8002c22:	7ffa      	ldrb	r2, [r7, #31]
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	441a      	add	r2, r3
 8002c2a:	7fbb      	ldrb	r3, [r7, #30]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3328      	adds	r3, #40	@ 0x28
 8002c30:	443b      	add	r3, r7
 8002c32:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002c36:	461a      	mov	r2, r3
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa42 f303 	asr.w	r3, r2, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8002c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c48:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <LED_Setcolour+0x11c>)
 8002c4a:	2199      	movs	r1, #153	@ 0x99
 8002c4c:	54d1      	strb	r1, [r2, r3]
 8002c4e:	e003      	b.n	8002c58 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8002c50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c52:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd0 <LED_Setcolour+0x11c>)
 8002c54:	2133      	movs	r1, #51	@ 0x33
 8002c56:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8002c58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	dddb      	ble.n	8002c22 <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8002c6a:	7fbb      	ldrb	r3, [r7, #30]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	77bb      	strb	r3, [r7, #30]
 8002c70:	7fbb      	ldrb	r3, [r7, #30]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d9d2      	bls.n	8002c1c <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	7ffb      	ldrb	r3, [r7, #31]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d9c9      	bls.n	8002c16 <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e009      	b.n	8002c9c <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002c88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c8a:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <LED_Setcolour+0x11c>)
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002c90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c92:	3301      	adds	r3, #1
 8002c94:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca2:	dbf1      	blt.n	8002c88 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e009      	b.n	8002cbe <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002caa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cac:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <LED_Setcolour+0x11c>)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	ddf2      	ble.n	8002caa <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002cc4:	f000 f806 	bl	8002cd4 <LED_Update>

}
 8002cc8:	bf00      	nop
 8002cca:	372c      	adds	r7, #44	@ 0x2c
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	20000d40 	.word	0x20000d40

08002cd4 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002cda:	f240 1339 	movw	r3, #313	@ 0x139
 8002cde:	4a09      	ldr	r2, [pc, #36]	@ (8002d04 <LED_Update+0x30>)
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	4809      	ldr	r0, [pc, #36]	@ (8002d08 <LED_Update+0x34>)
 8002ce4:	f008 f90c 	bl	800af00 <HAL_TIM_PWM_Start_DMA>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <LED_Update+0x38>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000d40 	.word	0x20000d40
 8002d08:	20001474 	.word	0x20001474
 8002d0c:	20000e79 	.word	0x20000e79

08002d10 <LED_Callback>:



void LED_Callback(){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002d14:	2104      	movs	r1, #4
 8002d16:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <LED_Callback+0x18>)
 8002d18:	f008 fb0a 	bl	800b330 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <LED_Callback+0x1c>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]


}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20001474 	.word	0x20001474
 8002d2c:	20000e79 	.word	0x20000e79

08002d30 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	4603      	mov	r3, r0
 8002d38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d171      	bne.n	8002e24 <HAL_GPIO_EXTI_Callback+0xf4>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8002d40:	2110      	movs	r1, #16
 8002d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d46:	f005 fb6d 	bl	8008424 <HAL_GPIO_ReadPin>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d109      	bne.n	8002d64 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8002d50:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8002d56:	f003 f8e1 	bl	8005f1c <HAL_GetTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x124>)
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e05f      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0xf4>


					}
					else{

						gros_btn_time=(HAL_GetTick()-tbtn1);
 8002d64:	f003 f8da 	bl	8005f1c <HAL_GetTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x124>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d74:	601a      	str	r2, [r3, #0]


		if(gros_btn_time<=380){
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8002d7e:	dc02      	bgt.n	8002d86 <HAL_GPIO_EXTI_Callback+0x56>
#ifdef PARTIE_HAUT
			flag_bouton_servo=0;
 8002d80:	4b35      	ldr	r3, [pc, #212]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
#endif

							}
					if(gros_btn_time>=400 && gros_btn_time<=1500){
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002d8e:	db08      	blt.n	8002da2 <HAL_GPIO_EXTI_Callback+0x72>
 8002d90:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	dc02      	bgt.n	8002da2 <HAL_GPIO_EXTI_Callback+0x72>
#ifdef PARTIE_HAUT
						flag_bouton_servo=1;
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
#endif
					}
					if(gros_btn_time>=1500 && gros_btn_time<=3500){
 8002da2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002daa:	4293      	cmp	r3, r2
 8002dac:	dd2a      	ble.n	8002e04 <HAL_GPIO_EXTI_Callback+0xd4>
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002db6:	4293      	cmp	r3, r2
 8002db8:	dc24      	bgt.n	8002e04 <HAL_GPIO_EXTI_Callback+0xd4>

						hauteur_Initiale=myDatabmp581.altitude;
 8002dba:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <HAL_GPIO_EXTI_Callback+0x12c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a28      	ldr	r2, [pc, #160]	@ (8002e60 <HAL_GPIO_EXTI_Callback+0x130>)
 8002dc0:	6013      	str	r3, [r2, #0]
						flag_calib=1;
 8002dc2:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0x134>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
#ifdef PARTIE_HAUT
						create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	ed9f 5a26 	vldr	s10, [pc, #152]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002dd0:	eddf 4a25 	vldr	s9, [pc, #148]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002dd4:	ed9f 4a24 	vldr	s8, [pc, #144]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002dd8:	eddf 3a23 	vldr	s7, [pc, #140]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002ddc:	ed9f 3a22 	vldr	s6, [pc, #136]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002de0:	eddf 2a21 	vldr	s5, [pc, #132]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002de4:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002de8:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002dec:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002df0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002df4:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002e68 <HAL_GPIO_EXTI_Callback+0x138>
 8002df8:	2320      	movs	r3, #32
 8002dfa:	2216      	movs	r2, #22
 8002dfc:	215a      	movs	r1, #90	@ 0x5a
 8002dfe:	481b      	ldr	r0, [pc, #108]	@ (8002e6c <HAL_GPIO_EXTI_Callback+0x13c>)
 8002e00:	f001 fd7a 	bl	80048f8 <create_and_send_payload>
#endif

										}
					if(gros_btn_time>=4000){
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002e0c:	db07      	blt.n	8002e1e <HAL_GPIO_EXTI_Callback+0xee>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e12:	4817      	ldr	r0, [pc, #92]	@ (8002e70 <HAL_GPIO_EXTI_Callback+0x140>)
 8002e14:	f005 fb36 	bl	8008484 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

															}

					gros_btn_time=0;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0x120>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]


	}

#ifdef PARTIE_HAUT
	if(GPIO_Pin==GPIO_PIN_1){
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d10d      	bne.n	8002e46 <HAL_GPIO_EXTI_Callback+0x116>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_SET){
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4810      	ldr	r0, [pc, #64]	@ (8002e70 <HAL_GPIO_EXTI_Callback+0x140>)
 8002e2e:	f005 faf9 	bl	8008424 <HAL_GPIO_ReadPin>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d103      	bne.n	8002e40 <HAL_GPIO_EXTI_Callback+0x110>
			flag_drop=0;
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_GPIO_EXTI_Callback+0x144>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0x116>
			flag_drop=1;
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <HAL_GPIO_EXTI_Callback+0x144>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
	}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000e7c 	.word	0x20000e7c
 8002e54:	20000bd8 	.word	0x20000bd8
 8002e58:	20000e90 	.word	0x20000e90
 8002e5c:	20000758 	.word	0x20000758
 8002e60:	20000ea0 	.word	0x20000ea0
 8002e64:	20000e8c 	.word	0x20000e8c
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	20000408 	.word	0x20000408
 8002e70:	48000400 	.word	0x48000400
 8002e74:	20000e84 	.word	0x20000e84

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002e80:	f7ff ff46 	bl	8002d10 <LED_Callback>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e92:	f003 f818 	bl	8005ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e96:	f000 f98b 	bl	80031b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e9a:	f7ff fc6b 	bl	8002774 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e9e:	f7ff fc1f 	bl	80026e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002ea2:	f7fe fc95 	bl	80017d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002ea6:	f7ff fd09 	bl	80028bc <MX_I2C1_Init>
  MX_I2C3_Init();
 8002eaa:	f7ff fd47 	bl	800293c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002eae:	f002 f873 	bl	8004f98 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002eb2:	f002 f8bb 	bl	800502c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002eb6:	f001 fecb 	bl	8004c50 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002eba:	f001 fe53 	bl	8004b64 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002ebe:	f000 fb05 	bl	80034cc <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002ec2:	f00b fb47 	bl	800e554 <MX_FATFS_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <main+0x44>
    Error_Handler();
 8002ecc:	f000 f9cc 	bl	8003268 <Error_Handler>
  }
  MX_TIM4_Init();
 8002ed0:	f001 ff36 	bl	8004d40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002ed4:	f000 fbb4 	bl	8003640 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f000 fc1b 	bl	8003714 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002ede:	2128      	movs	r1, #40	@ 0x28
 8002ee0:	2020      	movs	r0, #32
 8002ee2:	f000 fd59 	bl	8003998 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002ee6:	4a97      	ldr	r2, [pc, #604]	@ (8003144 <main+0x2b8>)
 8002ee8:	2301      	movs	r3, #1
 8002eea:	ca06      	ldmia	r2, {r1, r2}
 8002eec:	4896      	ldr	r0, [pc, #600]	@ (8003148 <main+0x2bc>)
 8002eee:	f000 fd2d 	bl	800394c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002ef2:	f000 fc27 	bl	8003744 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002efc:	4893      	ldr	r0, [pc, #588]	@ (800314c <main+0x2c0>)
 8002efe:	f005 faa9 	bl	8008454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f08:	4890      	ldr	r0, [pc, #576]	@ (800314c <main+0x2c0>)
 8002f0a:	f005 faa3 	bl	8008454 <HAL_GPIO_WritePin>


#ifdef PARTIE_HAUT
  if( release_mecanism()!=HAL_OK){
 8002f0e:	f000 fab3 	bl	8003478 <release_mecanism>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <main+0xb8>
	  ssd1306_SetCursor(32, 40);
 8002f18:	2128      	movs	r1, #40	@ 0x28
 8002f1a:	2020      	movs	r0, #32
 8002f1c:	f000 fd3c 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f000 fbf7 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("servopbm", Font_7x10, White);
 8002f26:	4a87      	ldr	r2, [pc, #540]	@ (8003144 <main+0x2b8>)
 8002f28:	2301      	movs	r3, #1
 8002f2a:	ca06      	ldmia	r2, {r1, r2}
 8002f2c:	4888      	ldr	r0, [pc, #544]	@ (8003150 <main+0x2c4>)
 8002f2e:	f000 fd0d 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002f32:	f000 fc07 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f3a:	f002 fffb 	bl	8005f34 <HAL_Delay>
 	 pbmseeker=1;
 8002f3e:	4b85      	ldr	r3, [pc, #532]	@ (8003154 <main+0x2c8>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]


   }
  flag_servo_started=1;
 8002f44:	4b84      	ldr	r3, [pc, #528]	@ (8003158 <main+0x2cc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	4983      	ldr	r1, [pc, #524]	@ (800315c <main+0x2d0>)
 8002f4e:	4884      	ldr	r0, [pc, #528]	@ (8003160 <main+0x2d4>)
 8002f50:	f003 fbd6 	bl	8006700 <HAL_ADC_Start_DMA>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <main+0xfa>
	  ssd1306_SetCursor(32, 40);
 8002f5a:	2128      	movs	r1, #40	@ 0x28
 8002f5c:	2020      	movs	r0, #32
 8002f5e:	f000 fd1b 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 fbd6 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002f68:	4a76      	ldr	r2, [pc, #472]	@ (8003144 <main+0x2b8>)
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	ca06      	ldmia	r2, {r1, r2}
 8002f6e:	487d      	ldr	r0, [pc, #500]	@ (8003164 <main+0x2d8>)
 8002f70:	f000 fcec 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002f74:	f000 fbe6 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002f78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f7c:	f002 ffda 	bl	8005f34 <HAL_Delay>
 	 pbmseeker=1;
 8002f80:	4b74      	ldr	r3, [pc, #464]	@ (8003154 <main+0x2c8>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 8002f86:	2064      	movs	r0, #100	@ 0x64
 8002f88:	f002 ffd4 	bl	8005f34 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002f8c:	4876      	ldr	r0, [pc, #472]	@ (8003168 <main+0x2dc>)
 8002f8e:	f009 fdef 	bl	800cb70 <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002f92:	2264      	movs	r2, #100	@ 0x64
 8002f94:	4975      	ldr	r1, [pc, #468]	@ (800316c <main+0x2e0>)
 8002f96:	4874      	ldr	r0, [pc, #464]	@ (8003168 <main+0x2dc>)
 8002f98:	f009 fd9e 	bl	800cad8 <HAL_UART_Receive_DMA>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <main+0x142>
	   ssd1306_SetCursor(32, 40);
 8002fa2:	2128      	movs	r1, #40	@ 0x28
 8002fa4:	2020      	movs	r0, #32
 8002fa6:	f000 fcf7 	bl	8003998 <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 fbb2 	bl	8003714 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002fb0:	4a64      	ldr	r2, [pc, #400]	@ (8003144 <main+0x2b8>)
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	ca06      	ldmia	r2, {r1, r2}
 8002fb6:	486e      	ldr	r0, [pc, #440]	@ (8003170 <main+0x2e4>)
 8002fb8:	f000 fcc8 	bl	800394c <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002fbc:	f000 fbc2 	bl	8003744 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002fc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fc4:	f002 ffb6 	bl	8005f34 <HAL_Delay>
  	pbmseeker=1;
 8002fc8:	4b62      	ldr	r3, [pc, #392]	@ (8003154 <main+0x2c8>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002fce:	f7ff fdcd 	bl	8002b6c <LED_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002fd8:	2128      	movs	r1, #40	@ 0x28
 8002fda:	2020      	movs	r0, #32
 8002fdc:	f000 fcdc 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f000 fb97 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002fe6:	4a57      	ldr	r2, [pc, #348]	@ (8003144 <main+0x2b8>)
 8002fe8:	2301      	movs	r3, #1
 8002fea:	ca06      	ldmia	r2, {r1, r2}
 8002fec:	4861      	ldr	r0, [pc, #388]	@ (8003174 <main+0x2e8>)
 8002fee:	f000 fcad 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002ff2:	f000 fba7 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002ff6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ffa:	f002 ff9b 	bl	8005f34 <HAL_Delay>
 	 pbmseeker=1;
 8002ffe:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <main+0x2c8>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8003004:	f7fe f834 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8003008:	485b      	ldr	r0, [pc, #364]	@ (8003178 <main+0x2ec>)
 800300a:	f7ff fa97 	bl	800253c <bmp581_init_precise_normal>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <main+0x1b4>
	  ssd1306_SetCursor(32, 40);
 8003014:	2128      	movs	r1, #40	@ 0x28
 8003016:	2020      	movs	r0, #32
 8003018:	f000 fcbe 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 800301c:	2000      	movs	r0, #0
 800301e:	f000 fb79 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8003022:	4a48      	ldr	r2, [pc, #288]	@ (8003144 <main+0x2b8>)
 8003024:	2301      	movs	r3, #1
 8003026:	ca06      	ldmia	r2, {r1, r2}
 8003028:	4854      	ldr	r0, [pc, #336]	@ (800317c <main+0x2f0>)
 800302a:	f000 fc8f 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 800302e:	f000 fb89 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8003032:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003036:	f002 ff7d 	bl	8005f34 <HAL_Delay>
 	 pbmseeker=1;
 800303a:	4b46      	ldr	r3, [pc, #280]	@ (8003154 <main+0x2c8>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

   }
#endif

#ifdef PARTIE_HAUT
  if( INIT_PERM_TARVOS(TOP_ADDR, BOTTOM_ADDR)!=HAL_OK){
 8003040:	2116      	movs	r1, #22
 8003042:	2015      	movs	r0, #21
 8003044:	f001 fab0 	bl	80045a8 <INIT_PERM_TARVOS>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d015      	beq.n	800307a <main+0x1ee>
	  ssd1306_SetCursor(32, 40);
 800304e:	2128      	movs	r1, #40	@ 0x28
 8003050:	2020      	movs	r0, #32
 8003052:	f000 fca1 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8003056:	2000      	movs	r0, #0
 8003058:	f000 fb5c 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 800305c:	4a39      	ldr	r2, [pc, #228]	@ (8003144 <main+0x2b8>)
 800305e:	2301      	movs	r3, #1
 8003060:	ca06      	ldmia	r2, {r1, r2}
 8003062:	4847      	ldr	r0, [pc, #284]	@ (8003180 <main+0x2f4>)
 8003064:	f000 fc72 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8003068:	f000 fb6c 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 800306c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003070:	f002 ff60 	bl	8005f34 <HAL_Delay>
 	 pbmseeker=1;
 8003074:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <main+0x2c8>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 800307a:	2064      	movs	r0, #100	@ 0x64
 800307c:	f002 ff5a 	bl	8005f34 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8003080:	4840      	ldr	r0, [pc, #256]	@ (8003184 <main+0x2f8>)
 8003082:	f009 fd75 	bl	800cb70 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, dma_rx_buffer, DMA_CHUNK_SIZE)!=HAL_OK){
 8003086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800308a:	493f      	ldr	r1, [pc, #252]	@ (8003188 <main+0x2fc>)
 800308c:	483d      	ldr	r0, [pc, #244]	@ (8003184 <main+0x2f8>)
 800308e:	f009 fd23 	bl	800cad8 <HAL_UART_Receive_DMA>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <main+0x238>
	   ssd1306_SetCursor(32, 40);
 8003098:	2128      	movs	r1, #40	@ 0x28
 800309a:	2020      	movs	r0, #32
 800309c:	f000 fc7c 	bl	8003998 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f000 fb37 	bl	8003714 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 80030a6:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <main+0x2b8>)
 80030a8:	2301      	movs	r3, #1
 80030aa:	ca06      	ldmia	r2, {r1, r2}
 80030ac:	4837      	ldr	r0, [pc, #220]	@ (800318c <main+0x300>)
 80030ae:	f000 fc4d 	bl	800394c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80030b2:	f000 fb47 	bl	8003744 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80030b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030ba:	f002 ff3b 	bl	8005f34 <HAL_Delay>
 	pbmseeker=1;
 80030be:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <main+0x2c8>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 80030c4:	4832      	ldr	r0, [pc, #200]	@ (8003190 <main+0x304>)
 80030c6:	f007 fcb9 	bl	800aa3c <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80030ca:	200a      	movs	r0, #10
 80030cc:	f002 ff32 	bl	8005f34 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 80030d0:	2201      	movs	r2, #1
 80030d2:	4930      	ldr	r1, [pc, #192]	@ (8003194 <main+0x308>)
 80030d4:	4830      	ldr	r0, [pc, #192]	@ (8003198 <main+0x30c>)
 80030d6:	f00d f839 	bl	801014c <f_mount>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <main+0x310>)
 80030e0:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 80030e2:	4b2e      	ldr	r3, [pc, #184]	@ (800319c <main+0x310>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d125      	bne.n	8003136 <main+0x2aa>
  			  fres = f_mkdir("DEMO");
 80030ea:	482d      	ldr	r0, [pc, #180]	@ (80031a0 <main+0x314>)
 80030ec:	f00d ff02 	bl	8010ef4 <f_mkdir>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b29      	ldr	r3, [pc, #164]	@ (800319c <main+0x310>)
 80030f6:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 80030f8:	2212      	movs	r2, #18
 80030fa:	492a      	ldr	r1, [pc, #168]	@ (80031a4 <main+0x318>)
 80030fc:	482a      	ldr	r0, [pc, #168]	@ (80031a8 <main+0x31c>)
 80030fe:	f00d f889 	bl	8010214 <f_open>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	4b25      	ldr	r3, [pc, #148]	@ (800319c <main+0x310>)
 8003108:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 800310a:	4b24      	ldr	r3, [pc, #144]	@ (800319c <main+0x310>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <main+0x2a0>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	220b      	movs	r2, #11
 8003116:	4925      	ldr	r1, [pc, #148]	@ (80031ac <main+0x320>)
 8003118:	4823      	ldr	r0, [pc, #140]	@ (80031a8 <main+0x31c>)
 800311a:	f00d fa3c 	bl	8010596 <f_write>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <main+0x310>)
 8003124:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8003126:	4820      	ldr	r0, [pc, #128]	@ (80031a8 <main+0x31c>)
 8003128:	f00d fc62 	bl	80109f0 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 800312c:	2200      	movs	r2, #0
 800312e:	4919      	ldr	r1, [pc, #100]	@ (8003194 <main+0x308>)
 8003130:	2000      	movs	r0, #0
 8003132:	f00d f80b 	bl	801014c <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003136:	f7fe fd31 	bl	8001b9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800313a:	f00e f8b8 	bl	80112ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <main+0x2b2>
 8003142:	bf00      	nop
 8003144:	20000010 	.word	0x20000010
 8003148:	08018d04 	.word	0x08018d04
 800314c:	48000400 	.word	0x48000400
 8003150:	08018d0c 	.word	0x08018d0c
 8003154:	20000ea8 	.word	0x20000ea8
 8003158:	20000e94 	.word	0x20000e94
 800315c:	20000bdc 	.word	0x20000bdc
 8003160:	20000238 	.word	0x20000238
 8003164:	08018d18 	.word	0x08018d18
 8003168:	20001950 	.word	0x20001950
 800316c:	200004c8 	.word	0x200004c8
 8003170:	08018d20 	.word	0x08018d20
 8003174:	08018d28 	.word	0x08018d28
 8003178:	20000758 	.word	0x20000758
 800317c:	08018d30 	.word	0x08018d30
 8003180:	08018d38 	.word	0x08018d38
 8003184:	200018bc 	.word	0x200018bc
 8003188:	200015b8 	.word	0x200015b8
 800318c:	08018d44 	.word	0x08018d44
 8003190:	2000150c 	.word	0x2000150c
 8003194:	08018d50 	.word	0x08018d50
 8003198:	20000770 	.word	0x20000770
 800319c:	200009a4 	.word	0x200009a4
 80031a0:	08018d54 	.word	0x08018d54
 80031a4:	08018d5c 	.word	0x08018d5c
 80031a8:	200009a8 	.word	0x200009a8
 80031ac:	08018d6c 	.word	0x08018d6c

080031b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b094      	sub	sp, #80	@ 0x50
 80031b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b6:	f107 0318 	add.w	r3, r7, #24
 80031ba:	2238      	movs	r2, #56	@ 0x38
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f011 fd2b 	bl	8014c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f005 ffac 	bl	8009130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031d8:	2301      	movs	r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e2:	2302      	movs	r3, #2
 80031e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031e6:	2303      	movs	r3, #3
 80031e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031ea:	2304      	movs	r3, #4
 80031ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031ee:	2355      	movs	r3, #85	@ 0x55
 80031f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031f2:	2302      	movs	r3, #2
 80031f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031f6:	2302      	movs	r3, #2
 80031f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031fa:	2302      	movs	r3, #2
 80031fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031fe:	f107 0318 	add.w	r3, r7, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f006 f848 	bl	8009298 <HAL_RCC_OscConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800320e:	f000 f82b 	bl	8003268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003212:	230f      	movs	r3, #15
 8003214:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003216:	2303      	movs	r3, #3
 8003218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2104      	movs	r1, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f006 fb46 	bl	80098bc <HAL_RCC_ClockConfig>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003236:	f000 f817 	bl	8003268 <Error_Handler>
  }
}
 800323a:	bf00      	nop
 800323c:	3750      	adds	r7, #80	@ 0x50
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003256:	f002 fe4f 	bl	8005ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00

08003268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <Error_Handler+0x8>

08003274 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	b0b5      	sub	sp, #212	@ 0xd4
 800327a:	af1e      	add	r7, sp, #120	@ 0x78
 800327c:	4603      	mov	r3, r0
 800327e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	uint16_t sizeligne=0;
 8003282:	2300      	movs	r3, #0
 8003284:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

#ifdef PARTIE_HAUT

	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003288:	4b6c      	ldr	r3, [pc, #432]	@ (800343c <store_in_sd+0x1c8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800328e:	4b6c      	ldr	r3, [pc, #432]	@ (8003440 <store_in_sd+0x1cc>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	647a      	str	r2, [r7, #68]	@ 0x44
 8003294:	4b6b      	ldr	r3, [pc, #428]	@ (8003444 <store_in_sd+0x1d0>)
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	6439      	str	r1, [r7, #64]	@ 0x40
			"%d,%d,%d,%0.7f,%0.7f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.0f,%0.0f,%0.0f,%d,%0.2f,%0.2f,%lu\n\r",
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 800329a:	4b6b      	ldr	r3, [pc, #428]	@ (8003448 <store_in_sd+0x1d4>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f979 	bl	8000598 <__aeabi_f2d>
 80032a6:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 80032aa:	4b67      	ldr	r3, [pc, #412]	@ (8003448 <store_in_sd+0x1d4>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f971 	bl	8000598 <__aeabi_f2d>
 80032b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 80032ba:	4b63      	ldr	r3, [pc, #396]	@ (8003448 <store_in_sd+0x1d4>)
 80032bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f969 	bl	8000598 <__aeabi_f2d>
 80032c6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80032ca:	4b60      	ldr	r3, [pc, #384]	@ (800344c <store_in_sd+0x1d8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f962 	bl	8000598 <__aeabi_f2d>
 80032d4:	e9c7 0108 	strd	r0, r1, [r7, #32]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 80032d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003448 <store_in_sd+0x1d4>)
 80032da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f95a 	bl	8000598 <__aeabi_f2d>
 80032e4:	e9c7 0106 	strd	r0, r1, [r7, #24]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 80032e8:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <store_in_sd+0x1d4>)
 80032ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd f952 	bl	8000598 <__aeabi_f2d>
 80032f4:	e9c7 0104 	strd	r0, r1, [r7, #16]
			hauteur_relative,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 80032f8:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <store_in_sd+0x1dc>)
 80032fa:	68db      	ldr	r3, [r3, #12]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd f94b 	bl	8000598 <__aeabi_f2d>
 8003302:	e9c7 0102 	strd	r0, r1, [r7, #8]
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <store_in_sd+0x1e0>)
 8003308:	681b      	ldr	r3, [r3, #0]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f944 	bl	8000598 <__aeabi_f2d>
 8003310:	e9c7 0100 	strd	r0, r1, [r7]
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8003314:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <store_in_sd+0x1e0>)
 8003316:	685b      	ldr	r3, [r3, #4]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f93d 	bl	8000598 <__aeabi_f2d>
 800331e:	4682      	mov	sl, r0
 8003320:	468b      	mov	fp, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8003322:	4b4c      	ldr	r3, [pc, #304]	@ (8003454 <store_in_sd+0x1e0>)
 8003324:	689b      	ldr	r3, [r3, #8]
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f936 	bl	8000598 <__aeabi_f2d>
 800332c:	4680      	mov	r8, r0
 800332e:	4689      	mov	r9, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,GNSSData.numSV,temp,vbat,timeindex);
 8003330:	4b45      	ldr	r3, [pc, #276]	@ (8003448 <store_in_sd+0x1d4>)
 8003332:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
	sizeligne=snprintf((char *)sdcardbuffer,512,
 8003336:	461e      	mov	r6, r3
 8003338:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <store_in_sd+0x1e4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f92b 	bl	8000598 <__aeabi_f2d>
 8003342:	4604      	mov	r4, r0
 8003344:	460d      	mov	r5, r1
 8003346:	4b45      	ldr	r3, [pc, #276]	@ (800345c <store_in_sd+0x1e8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f924 	bl	8000598 <__aeabi_f2d>
 8003350:	4b43      	ldr	r3, [pc, #268]	@ (8003460 <store_in_sd+0x1ec>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	931c      	str	r3, [sp, #112]	@ 0x70
 8003356:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 800335a:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 800335e:	9616      	str	r6, [sp, #88]	@ 0x58
 8003360:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 8003364:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 8003368:	ed97 7b00 	vldr	d7, [r7]
 800336c:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8003370:	ed97 7b02 	vldr	d7, [r7, #8]
 8003374:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003378:	ed97 7b04 	vldr	d7, [r7, #16]
 800337c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003380:	ed97 7b06 	vldr	d7, [r7, #24]
 8003384:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003388:	ed97 7b08 	vldr	d7, [r7, #32]
 800338c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003390:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003394:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003398:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800339c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80033a0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80033a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033aa:	9101      	str	r1, [sp, #4]
 80033ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ae:	9200      	str	r2, [sp, #0]
 80033b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003464 <store_in_sd+0x1f0>)
 80033b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033b8:	482b      	ldr	r0, [pc, #172]	@ (8003468 <store_in_sd+0x1f4>)
 80033ba:	f011 fb93 	bl	8014ae4 <sniprintf>
 80033be:	4603      	mov	r3, r0
 80033c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,GNSSData.numSV,temp,vbat,timeindex);
#endif



			  if (fres == FR_OK) {
 80033c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d12f      	bne.n	800342c <store_in_sd+0x1b8>
				  if(flag_drop==0){
 80033cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <store_in_sd+0x1cc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <store_in_sd+0x172>
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80033d4:	2212      	movs	r2, #18
 80033d6:	4925      	ldr	r1, [pc, #148]	@ (800346c <store_in_sd+0x1f8>)
 80033d8:	4825      	ldr	r0, [pc, #148]	@ (8003470 <store_in_sd+0x1fc>)
 80033da:	f00c ff1b 	bl	8010214 <f_open>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80033e4:	e007      	b.n	80033f6 <store_in_sd+0x182>
					  fres = f_open(&fil, (uint8_t *) "BOT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
				  }
				  else{
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80033e6:	2212      	movs	r2, #18
 80033e8:	4922      	ldr	r1, [pc, #136]	@ (8003474 <store_in_sd+0x200>)
 80033ea:	4821      	ldr	r0, [pc, #132]	@ (8003470 <store_in_sd+0x1fc>)
 80033ec:	f00c ff12 	bl	8010214 <f_open>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif

				  }
				  if (fres == FR_OK) {
 80033f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <store_in_sd+0x1b8>
					  fres=f_lseek(&fil, f_size(&fil));
 80033fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <store_in_sd+0x1fc>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4619      	mov	r1, r3
 8003404:	481a      	ldr	r0, [pc, #104]	@ (8003470 <store_in_sd+0x1fc>)
 8003406:	f00d fb22 	bl	8010a4e <f_lseek>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 8003410:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8003414:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003418:	4913      	ldr	r1, [pc, #76]	@ (8003468 <store_in_sd+0x1f4>)
 800341a:	4815      	ldr	r0, [pc, #84]	@ (8003470 <store_in_sd+0x1fc>)
 800341c:	f00d f8bb 	bl	8010596 <f_write>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					  f_close(&fil);
 8003426:	4812      	ldr	r0, [pc, #72]	@ (8003470 <store_in_sd+0x1fc>)
 8003428:	f00d fae2 	bl	80109f0 <f_close>
				  }

			  }


	return fres;
 800342c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f

}
 8003430:	4618      	mov	r0, r3
 8003432:	375c      	adds	r7, #92	@ 0x5c
 8003434:	46bd      	mov	sp, r7
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	bf00      	nop
 800343c:	20000e8c 	.word	0x20000e8c
 8003440:	20000e84 	.word	0x20000e84
 8003444:	20000e88 	.word	0x20000e88
 8003448:	20000c6c 	.word	0x20000c6c
 800344c:	20000ea4 	.word	0x20000ea4
 8003450:	20000758 	.word	0x20000758
 8003454:	20000738 	.word	0x20000738
 8003458:	20000be4 	.word	0x20000be4
 800345c:	20000bec 	.word	0x20000bec
 8003460:	20000eb0 	.word	0x20000eb0
 8003464:	08018d78 	.word	0x08018d78
 8003468:	20000538 	.word	0x20000538
 800346c:	08018dd4 	.word	0x08018dd4
 8003470:	200009a8 	.word	0x200009a8
 8003474:	08018de0 	.word	0x08018de0

08003478 <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <release_mecanism+0x1c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8003484:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003486:	2100      	movs	r1, #0
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <release_mecanism+0x1c>)
 800348a:	f007 fba3 	bl	800abd4 <HAL_TIM_PWM_Start>
 800348e:	4603      	mov	r3, r0


}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200014c0 	.word	0x200014c0

08003498 <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <lock_mecanism+0x1c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80034a4:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80034a6:	2100      	movs	r1, #0
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <lock_mecanism+0x1c>)
 80034aa:	f007 fb93 	bl	800abd4 <HAL_TIM_PWM_Start>
 80034ae:	4603      	mov	r3, r0


}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200014c0 	.word	0x200014c0

080034b8 <stop_servo>:
void stop_servo(void){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80034bc:	2100      	movs	r1, #0
 80034be:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <stop_servo+0x10>)
 80034c0:	f007 fc88 	bl	800add4 <HAL_TIM_PWM_Stop>

}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200014c0 	.word	0x200014c0

080034cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <MX_SPI1_Init+0x78>)
 80034d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034de:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034e4:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034f8:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <MX_SPI1_Init+0x74>)
 80034fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <MX_SPI1_Init+0x74>)
 8003502:	2220      	movs	r2, #32
 8003504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <MX_SPI1_Init+0x74>)
 8003508:	2200      	movs	r2, #0
 800350a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <MX_SPI1_Init+0x74>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <MX_SPI1_Init+0x74>)
 8003514:	2200      	movs	r2, #0
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <MX_SPI1_Init+0x74>)
 800351a:	2207      	movs	r2, #7
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <MX_SPI1_Init+0x74>)
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <MX_SPI1_Init+0x74>)
 8003526:	2208      	movs	r2, #8
 8003528:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800352a:	4805      	ldr	r0, [pc, #20]	@ (8003540 <MX_SPI1_Init+0x74>)
 800352c:	f006 fe00 	bl	800a130 <HAL_SPI_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003536:	f7ff fe97 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000eb4 	.word	0x20000eb4
 8003544:	40013000 	.word	0x40013000

08003548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <HAL_SPI_MspInit+0x7c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d128      	bne.n	80035bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 800356c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 8003570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003574:	6613      	str	r3, [r2, #96]	@ 0x60
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	4a10      	ldr	r2, [pc, #64]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <HAL_SPI_MspInit+0x80>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800359a:	23e0      	movs	r3, #224	@ 0xe0
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035aa:	2305      	movs	r3, #5
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b8:	f004 fdb2 	bl	8008120 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035bc:	bf00      	nop
 80035be:	3728      	adds	r7, #40	@ 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40013000 	.word	0x40013000
 80035c8:	40021000 	.word	0x40021000

080035cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	2301      	movs	r3, #1
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	1dfb      	adds	r3, r7, #7
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	2200      	movs	r2, #0
 80035f8:	2178      	movs	r1, #120	@ 0x78
 80035fa:	4803      	ldr	r0, [pc, #12]	@ (8003608 <ssd1306_WriteCommand+0x2c>)
 80035fc:	f005 f810 	bl	8008620 <HAL_I2C_Mem_Write>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200003b4 	.word	0x200003b4

0800360c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af04      	add	r7, sp, #16
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	9202      	str	r2, [sp, #8]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2301      	movs	r3, #1
 8003628:	2240      	movs	r2, #64	@ 0x40
 800362a:	2178      	movs	r1, #120	@ 0x78
 800362c:	4803      	ldr	r0, [pc, #12]	@ (800363c <ssd1306_WriteData+0x30>)
 800362e:	f004 fff7 	bl	8008620 <HAL_I2C_Mem_Write>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200003b4 	.word	0x200003b4

08003640 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003644:	f7ff ffc2 	bl	80035cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003648:	2064      	movs	r0, #100	@ 0x64
 800364a:	f002 fc73 	bl	8005f34 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800364e:	2000      	movs	r0, #0
 8003650:	f000 f9ce 	bl	80039f0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003654:	2020      	movs	r0, #32
 8003656:	f7ff ffc1 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800365a:	2000      	movs	r0, #0
 800365c:	f7ff ffbe 	bl	80035dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003660:	20b0      	movs	r0, #176	@ 0xb0
 8003662:	f7ff ffbb 	bl	80035dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003666:	20c8      	movs	r0, #200	@ 0xc8
 8003668:	f7ff ffb8 	bl	80035dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff ffb5 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003672:	2010      	movs	r0, #16
 8003674:	f7ff ffb2 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003678:	2040      	movs	r0, #64	@ 0x40
 800367a:	f7ff ffaf 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800367e:	20ff      	movs	r0, #255	@ 0xff
 8003680:	f000 f9a2 	bl	80039c8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003684:	20a1      	movs	r0, #161	@ 0xa1
 8003686:	f7ff ffa9 	bl	80035dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800368a:	20a6      	movs	r0, #166	@ 0xa6
 800368c:	f7ff ffa6 	bl	80035dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003690:	20a8      	movs	r0, #168	@ 0xa8
 8003692:	f7ff ffa3 	bl	80035dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003696:	203f      	movs	r0, #63	@ 0x3f
 8003698:	f7ff ffa0 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800369c:	20a4      	movs	r0, #164	@ 0xa4
 800369e:	f7ff ff9d 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80036a2:	20d3      	movs	r0, #211	@ 0xd3
 80036a4:	f7ff ff9a 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7ff ff97 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80036ae:	20d5      	movs	r0, #213	@ 0xd5
 80036b0:	f7ff ff94 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80036b4:	20f0      	movs	r0, #240	@ 0xf0
 80036b6:	f7ff ff91 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80036ba:	20d9      	movs	r0, #217	@ 0xd9
 80036bc:	f7ff ff8e 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80036c0:	2022      	movs	r0, #34	@ 0x22
 80036c2:	f7ff ff8b 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80036c6:	20da      	movs	r0, #218	@ 0xda
 80036c8:	f7ff ff88 	bl	80035dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80036cc:	2012      	movs	r0, #18
 80036ce:	f7ff ff85 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80036d2:	20db      	movs	r0, #219	@ 0xdb
 80036d4:	f7ff ff82 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80036d8:	2020      	movs	r0, #32
 80036da:	f7ff ff7f 	bl	80035dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80036de:	208d      	movs	r0, #141	@ 0x8d
 80036e0:	f7ff ff7c 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80036e4:	2014      	movs	r0, #20
 80036e6:	f7ff ff79 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80036ea:	2001      	movs	r0, #1
 80036ec:	f000 f980 	bl	80039f0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f000 f80f 	bl	8003714 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80036f6:	f000 f825 	bl	8003744 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80036fa:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <ssd1306_Init+0xd0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <ssd1306_Init+0xd0>)
 8003702:	2200      	movs	r2, #0
 8003704:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003706:	4b02      	ldr	r3, [pc, #8]	@ (8003710 <ssd1306_Init+0xd0>)
 8003708:	2201      	movs	r2, #1
 800370a:	711a      	strb	r2, [r3, #4]
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20001318 	.word	0x20001318

08003714 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <ssd1306_Fill+0x14>
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <ssd1306_Fill+0x16>
 8003728:	23ff      	movs	r3, #255	@ 0xff
 800372a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800372e:	4619      	mov	r1, r3
 8003730:	4803      	ldr	r0, [pc, #12]	@ (8003740 <ssd1306_Fill+0x2c>)
 8003732:	f011 fa72 	bl	8014c1a <memset>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000f18 	.word	0x20000f18

08003744 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800374a:	2300      	movs	r3, #0
 800374c:	71fb      	strb	r3, [r7, #7]
 800374e:	e016      	b.n	800377e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	3b50      	subs	r3, #80	@ 0x50
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff40 	bl	80035dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800375c:	2000      	movs	r0, #0
 800375e:	f7ff ff3d 	bl	80035dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003762:	2010      	movs	r0, #16
 8003764:	f7ff ff3a 	bl	80035dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	4a08      	ldr	r2, [pc, #32]	@ (8003790 <ssd1306_UpdateScreen+0x4c>)
 800376e:	4413      	add	r3, r2
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff4a 	bl	800360c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	3301      	adds	r3, #1
 800377c:	71fb      	strb	r3, [r7, #7]
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	2b07      	cmp	r3, #7
 8003782:	d9e5      	bls.n	8003750 <ssd1306_UpdateScreen+0xc>
    }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000f18 	.word	0x20000f18

08003794 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
 800379e:	460b      	mov	r3, r1
 80037a0:	71bb      	strb	r3, [r7, #6]
 80037a2:	4613      	mov	r3, r2
 80037a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db3d      	blt.n	800382a <ssd1306_DrawPixel+0x96>
 80037ae:	79bb      	ldrb	r3, [r7, #6]
 80037b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80037b2:	d83a      	bhi.n	800382a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80037b4:	797b      	ldrb	r3, [r7, #5]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d11a      	bne.n	80037f0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037ba:	79fa      	ldrb	r2, [r7, #7]
 80037bc:	79bb      	ldrb	r3, [r7, #6]
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	b2d8      	uxtb	r0, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	01db      	lsls	r3, r3, #7
 80037c6:	4413      	add	r3, r2
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <ssd1306_DrawPixel+0xa4>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	b25a      	sxtb	r2, r3
 80037ce:	79bb      	ldrb	r3, [r7, #6]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	4313      	orrs	r3, r2
 80037de:	b259      	sxtb	r1, r3
 80037e0:	79fa      	ldrb	r2, [r7, #7]
 80037e2:	4603      	mov	r3, r0
 80037e4:	01db      	lsls	r3, r3, #7
 80037e6:	4413      	add	r3, r2
 80037e8:	b2c9      	uxtb	r1, r1
 80037ea:	4a13      	ldr	r2, [pc, #76]	@ (8003838 <ssd1306_DrawPixel+0xa4>)
 80037ec:	54d1      	strb	r1, [r2, r3]
 80037ee:	e01d      	b.n	800382c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80037f0:	79fa      	ldrb	r2, [r7, #7]
 80037f2:	79bb      	ldrb	r3, [r7, #6]
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	b2d8      	uxtb	r0, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	01db      	lsls	r3, r3, #7
 80037fc:	4413      	add	r3, r2
 80037fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003838 <ssd1306_DrawPixel+0xa4>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
 8003802:	b25a      	sxtb	r2, r3
 8003804:	79bb      	ldrb	r3, [r7, #6]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	b25b      	sxtb	r3, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	b25b      	sxtb	r3, r3
 8003816:	4013      	ands	r3, r2
 8003818:	b259      	sxtb	r1, r3
 800381a:	79fa      	ldrb	r2, [r7, #7]
 800381c:	4603      	mov	r3, r0
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	4413      	add	r3, r2
 8003822:	b2c9      	uxtb	r1, r1
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <ssd1306_DrawPixel+0xa4>)
 8003826:	54d1      	strb	r1, [r2, r3]
 8003828:	e000      	b.n	800382c <ssd1306_DrawPixel+0x98>
        return;
 800382a:	bf00      	nop
    }
}
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000f18 	.word	0x20000f18

0800383c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	4604      	mov	r4, r0
 8003844:	1d38      	adds	r0, r7, #4
 8003846:	e880 0006 	stmia.w	r0, {r1, r2}
 800384a:	461a      	mov	r2, r3
 800384c:	4623      	mov	r3, r4
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	4613      	mov	r3, r2
 8003852:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b1f      	cmp	r3, #31
 8003858:	d902      	bls.n	8003860 <ssd1306_WriteChar+0x24>
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b7e      	cmp	r3, #126	@ 0x7e
 800385e:	d901      	bls.n	8003864 <ssd1306_WriteChar+0x28>
        return 0;
 8003860:	2300      	movs	r3, #0
 8003862:	e06c      	b.n	800393e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003864:	4b38      	ldr	r3, [pc, #224]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	793b      	ldrb	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	2b80      	cmp	r3, #128	@ 0x80
 8003870:	dc06      	bgt.n	8003880 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003872:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 8003874:	885b      	ldrh	r3, [r3, #2]
 8003876:	461a      	mov	r2, r3
 8003878:	797b      	ldrb	r3, [r7, #5]
 800387a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800387c:	2b40      	cmp	r3, #64	@ 0x40
 800387e:	dd01      	ble.n	8003884 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003880:	2300      	movs	r3, #0
 8003882:	e05c      	b.n	800393e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e04c      	b.n	8003924 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	3b20      	subs	r3, #32
 8003890:	7979      	ldrb	r1, [r7, #5]
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4619      	mov	r1, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	440b      	add	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e034      	b.n	8003914 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d012      	beq.n	80038e0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80038ba:	4b23      	ldr	r3, [pc, #140]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	b2d8      	uxtb	r0, r3
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 80038ca:	885b      	ldrh	r3, [r3, #2]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	7bba      	ldrb	r2, [r7, #14]
 80038d8:	4619      	mov	r1, r3
 80038da:	f7ff ff5b 	bl	8003794 <ssd1306_DrawPixel>
 80038de:	e016      	b.n	800390e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	b2d8      	uxtb	r0, r3
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 80038f0:	885b      	ldrh	r3, [r3, #2]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	b2d9      	uxtb	r1, r3
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	f7ff ff43 	bl	8003794 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3301      	adds	r3, #1
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	793b      	ldrb	r3, [r7, #4]
 8003916:	461a      	mov	r2, r3
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4293      	cmp	r3, r2
 800391c:	d3c5      	bcc.n	80038aa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	797b      	ldrb	r3, [r7, #5]
 8003926:	461a      	mov	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4293      	cmp	r3, r2
 800392c:	d3ad      	bcc.n	800388a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	793a      	ldrb	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <ssd1306_WriteChar+0x10c>)
 800393a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20001318 	.word	0x20001318

0800394c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	1d38      	adds	r0, r7, #4
 8003956:	e880 0006 	stmia.w	r0, {r1, r2}
 800395a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800395c:	e012      	b.n	8003984 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	7818      	ldrb	r0, [r3, #0]
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	1d3a      	adds	r2, r7, #4
 8003966:	ca06      	ldmia	r2, {r1, r2}
 8003968:	f7ff ff68 	bl	800383c <ssd1306_WriteChar>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d002      	beq.n	800397e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	e008      	b.n	8003990 <ssd1306_WriteString+0x44>
        }
        str++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e8      	bne.n	800395e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	781b      	ldrb	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	460a      	mov	r2, r1
 80039a2:	71fb      	strb	r3, [r7, #7]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <ssd1306_SetCursor+0x2c>)
 80039ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80039b0:	79bb      	ldrb	r3, [r7, #6]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4b03      	ldr	r3, [pc, #12]	@ (80039c4 <ssd1306_SetCursor+0x2c>)
 80039b6:	805a      	strh	r2, [r3, #2]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20001318 	.word	0x20001318

080039c8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80039d2:	2381      	movs	r3, #129	@ 0x81
 80039d4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fdff 	bl	80035dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fdfb 	bl	80035dc <ssd1306_WriteCommand>
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003a00:	23af      	movs	r3, #175	@ 0xaf
 8003a02:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003a04:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <ssd1306_SetDisplayOn+0x38>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	715a      	strb	r2, [r3, #5]
 8003a0a:	e004      	b.n	8003a16 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003a0c:	23ae      	movs	r3, #174	@ 0xae
 8003a0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003a10:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <ssd1306_SetDisplayOn+0x38>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fddf 	bl	80035dc <ssd1306_WriteCommand>
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20001318 	.word	0x20001318

08003a2c <statemachine>:
extern osMutexId uartmutexHandle;




void statemachine(void){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af02      	add	r7, sp, #8

	switch(state){
 8003a32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba8 <statemachine+0x17c>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	f200 8335 	bhi.w	80040a6 <statemachine+0x67a>
 8003a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <statemachine+0x18>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003d61 	.word	0x08003d61
 8003a4c:	08003f0d 	.word	0x08003f0d
 8003a50:	0800406d 	.word	0x0800406d

	case IDLE:
		ssd1306_Fill(Black);
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7ff fe5d 	bl	8003714 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	2020      	movs	r0, #32
 8003a5e:	f7ff ff9b 	bl	8003998 <ssd1306_SetCursor>
switch(screenindex){
 8003a62:	4b52      	ldr	r3, [pc, #328]	@ (8003bac <statemachine+0x180>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d86f      	bhi.n	8003b4a <statemachine+0x11e>
 8003a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <statemachine+0x44>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003ab9 	.word	0x08003ab9
 8003a78:	08003ae3 	.word	0x08003ae3
 8003a7c:	08003b0f 	.word	0x08003b0f
case 0:
	if (vbat <= 7){
 8003a80:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <statemachine+0x184>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8003a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a92:	d900      	bls.n	8003a96 <statemachine+0x6a>
					ssd1306_WriteString("bat_low", Font_6x8, White);
					LED_Setcolour(255,0,0,0,0,0);
				}
	break;
 8003a94:	e059      	b.n	8003b4a <statemachine+0x11e>
					ssd1306_WriteString("bat_low", Font_6x8, White);
 8003a96:	4a47      	ldr	r2, [pc, #284]	@ (8003bb4 <statemachine+0x188>)
 8003a98:	2301      	movs	r3, #1
 8003a9a:	ca06      	ldmia	r2, {r1, r2}
 8003a9c:	4846      	ldr	r0, [pc, #280]	@ (8003bb8 <statemachine+0x18c>)
 8003a9e:	f7ff ff55 	bl	800394c <ssd1306_WriteString>
					LED_Setcolour(255,0,0,0,0,0);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2200      	movs	r2, #0
 8003aae:	2100      	movs	r1, #0
 8003ab0:	20ff      	movs	r0, #255	@ 0xff
 8003ab2:	f7ff f87f 	bl	8002bb4 <LED_Setcolour>
	break;
 8003ab6:	e048      	b.n	8003b4a <statemachine+0x11e>
case 1:
	if(flag_calib==0){
 8003ab8:	4b40      	ldr	r3, [pc, #256]	@ (8003bbc <statemachine+0x190>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d13f      	bne.n	8003b40 <statemachine+0x114>
		ssd1306_WriteString("alt_cal", Font_6x8, White);
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb4 <statemachine+0x188>)
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	ca06      	ldmia	r2, {r1, r2}
 8003ac6:	483e      	ldr	r0, [pc, #248]	@ (8003bc0 <statemachine+0x194>)
 8003ac8:	f7ff ff40 	bl	800394c <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,0,0);
 8003acc:	2300      	movs	r3, #0
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	21ff      	movs	r1, #255	@ 0xff
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7ff f86a 	bl	8002bb4 <LED_Setcolour>
				}
	break;
 8003ae0:	e02e      	b.n	8003b40 <statemachine+0x114>
case 2:
	if (GNSSData.fixType <= 2){
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <statemachine+0x198>)
 8003ae4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d82b      	bhi.n	8003b44 <statemachine+0x118>
		ssd1306_WriteString("gps_fix", Font_6x8, White);
 8003aec:	4a31      	ldr	r2, [pc, #196]	@ (8003bb4 <statemachine+0x188>)
 8003aee:	2301      	movs	r3, #1
 8003af0:	ca06      	ldmia	r2, {r1, r2}
 8003af2:	4835      	ldr	r0, [pc, #212]	@ (8003bc8 <statemachine+0x19c>)
 8003af4:	f7ff ff2a 	bl	800394c <ssd1306_WriteString>
		LED_Setcolour(255,255,0,0,0,0);
 8003af8:	2300      	movs	r3, #0
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	2200      	movs	r2, #0
 8003b04:	21ff      	movs	r1, #255	@ 0xff
 8003b06:	20ff      	movs	r0, #255	@ 0xff
 8003b08:	f7ff f854 	bl	8002bb4 <LED_Setcolour>
				}

	break;
 8003b0c:	e01a      	b.n	8003b44 <statemachine+0x118>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 8003b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b12:	482e      	ldr	r0, [pc, #184]	@ (8003bcc <statemachine+0x1a0>)
 8003b14:	f004 fc86 	bl	8008424 <HAL_GPIO_ReadPin>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d114      	bne.n	8003b48 <statemachine+0x11c>
		ssd1306_WriteString("TELEPWR", Font_6x8, White);
 8003b1e:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <statemachine+0x188>)
 8003b20:	2301      	movs	r3, #1
 8003b22:	ca06      	ldmia	r2, {r1, r2}
 8003b24:	482a      	ldr	r0, [pc, #168]	@ (8003bd0 <statemachine+0x1a4>)
 8003b26:	f7ff ff11 	bl	800394c <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,0,0);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	22ff      	movs	r2, #255	@ 0xff
 8003b36:	21ff      	movs	r1, #255	@ 0xff
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7ff f83b 	bl	8002bb4 <LED_Setcolour>
	}
	break;
 8003b3e:	e003      	b.n	8003b48 <statemachine+0x11c>
	break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <statemachine+0x11e>
	break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <statemachine+0x11e>
	break;
 8003b48:	bf00      	nop
}


			ssd1306_SetCursor(32, 40);
 8003b4a:	2128      	movs	r1, #40	@ 0x28
 8003b4c:	2020      	movs	r0, #32
 8003b4e:	f7ff ff23 	bl	8003998 <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"sat:%d",GNSSData.numSV);
 8003b52:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <statemachine+0x198>)
 8003b54:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003b58:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd4 <statemachine+0x1a8>)
 8003b5a:	2132      	movs	r1, #50	@ 0x32
 8003b5c:	481e      	ldr	r0, [pc, #120]	@ (8003bd8 <statemachine+0x1ac>)
 8003b5e:	f010 ffc1 	bl	8014ae4 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003b62:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <statemachine+0x188>)
 8003b64:	2301      	movs	r3, #1
 8003b66:	ca06      	ldmia	r2, {r1, r2}
 8003b68:	481b      	ldr	r0, [pc, #108]	@ (8003bd8 <statemachine+0x1ac>)
 8003b6a:	f7ff feef 	bl	800394c <ssd1306_WriteString>
			ssd1306_SetCursor(32, 48);
 8003b6e:	2130      	movs	r1, #48	@ 0x30
 8003b70:	2020      	movs	r0, #32
 8003b72:	f7ff ff11 	bl	8003998 <ssd1306_SetCursor>
		if(flag_calib==0){
 8003b76:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <statemachine+0x190>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d132      	bne.n	8003be4 <statemachine+0x1b8>
			snprintf((char *)screenbuffer,50,"Hba:%0.2f",myDatabmp581.altitude);
 8003b7e:	4b17      	ldr	r3, [pc, #92]	@ (8003bdc <statemachine+0x1b0>)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fd08 	bl	8000598 <__aeabi_f2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b90:	4a13      	ldr	r2, [pc, #76]	@ (8003be0 <statemachine+0x1b4>)
 8003b92:	2132      	movs	r1, #50	@ 0x32
 8003b94:	4810      	ldr	r0, [pc, #64]	@ (8003bd8 <statemachine+0x1ac>)
 8003b96:	f010 ffa5 	bl	8014ae4 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003b9a:	4a06      	ldr	r2, [pc, #24]	@ (8003bb4 <statemachine+0x188>)
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	ca06      	ldmia	r2, {r1, r2}
 8003ba0:	480d      	ldr	r0, [pc, #52]	@ (8003bd8 <statemachine+0x1ac>)
 8003ba2:	f7ff fed3 	bl	800394c <ssd1306_WriteString>
 8003ba6:	e031      	b.n	8003c0c <statemachine+0x1e0>
 8003ba8:	20000e80 	.word	0x20000e80
 8003bac:	20001354 	.word	0x20001354
 8003bb0:	20000bec 	.word	0x20000bec
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	08018dec 	.word	0x08018dec
 8003bbc:	20000e8c 	.word	0x20000e8c
 8003bc0:	08018df4 	.word	0x08018df4
 8003bc4:	20000c6c 	.word	0x20000c6c
 8003bc8:	08018dfc 	.word	0x08018dfc
 8003bcc:	48000400 	.word	0x48000400
 8003bd0:	08018e04 	.word	0x08018e04
 8003bd4:	08018e0c 	.word	0x08018e0c
 8003bd8:	20001320 	.word	0x20001320
 8003bdc:	20000758 	.word	0x20000758
 8003be0:	08018e14 	.word	0x08018e14
			}
		else{
			snprintf((char *)screenbuffer,50,"Hre:%0.2f",hauteur_relative);
 8003be4:	4bb5      	ldr	r3, [pc, #724]	@ (8003ebc <statemachine+0x490>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fcd5 	bl	8000598 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf6:	4ab2      	ldr	r2, [pc, #712]	@ (8003ec0 <statemachine+0x494>)
 8003bf8:	2132      	movs	r1, #50	@ 0x32
 8003bfa:	48b2      	ldr	r0, [pc, #712]	@ (8003ec4 <statemachine+0x498>)
 8003bfc:	f010 ff72 	bl	8014ae4 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003c00:	4ab1      	ldr	r2, [pc, #708]	@ (8003ec8 <statemachine+0x49c>)
 8003c02:	2301      	movs	r3, #1
 8003c04:	ca06      	ldmia	r2, {r1, r2}
 8003c06:	48af      	ldr	r0, [pc, #700]	@ (8003ec4 <statemachine+0x498>)
 8003c08:	f7ff fea0 	bl	800394c <ssd1306_WriteString>
#endif




delaycounterforscreenindex++;
 8003c0c:	4baf      	ldr	r3, [pc, #700]	@ (8003ecc <statemachine+0x4a0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4aae      	ldr	r2, [pc, #696]	@ (8003ecc <statemachine+0x4a0>)
 8003c14:	6013      	str	r3, [r2, #0]
if(delaycounterforscreenindex>=5){
 8003c16:	4bad      	ldr	r3, [pc, #692]	@ (8003ecc <statemachine+0x4a0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	dd07      	ble.n	8003c2e <statemachine+0x202>
	delaycounterforscreenindex=0;
 8003c1e:	4bab      	ldr	r3, [pc, #684]	@ (8003ecc <statemachine+0x4a0>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
	screenindex++;
 8003c24:	4baa      	ldr	r3, [pc, #680]	@ (8003ed0 <statemachine+0x4a4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4aa9      	ldr	r2, [pc, #676]	@ (8003ed0 <statemachine+0x4a4>)
 8003c2c:	6013      	str	r3, [r2, #0]
}

if(screenindex>3){
 8003c2e:	4ba8      	ldr	r3, [pc, #672]	@ (8003ed0 <statemachine+0x4a4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	dd02      	ble.n	8003c3c <statemachine+0x210>
	screenindex=0;
 8003c36:	4ba6      	ldr	r3, [pc, #664]	@ (8003ed0 <statemachine+0x4a4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
}

#ifdef PARTIE_HAUT

create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003c3c:	4ba5      	ldr	r3, [pc, #660]	@ (8003ed4 <statemachine+0x4a8>)
 8003c3e:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003c42:	4ba4      	ldr	r3, [pc, #656]	@ (8003ed4 <statemachine+0x4a8>)
 8003c44:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003c48:	4ba2      	ldr	r3, [pc, #648]	@ (8003ed4 <statemachine+0x4a8>)
 8003c4a:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003c4e:	4b9b      	ldr	r3, [pc, #620]	@ (8003ebc <statemachine+0x490>)
 8003c50:	ed93 6a00 	vldr	s12, [r3]
 8003c54:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed4 <statemachine+0x4a8>)
 8003c56:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003c5a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed4 <statemachine+0x4a8>)
 8003c5c:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003c60:	4b9d      	ldr	r3, [pc, #628]	@ (8003ed8 <statemachine+0x4ac>)
 8003c62:	ed93 3a00 	vldr	s6, [r3]
 8003c66:	4b9d      	ldr	r3, [pc, #628]	@ (8003edc <statemachine+0x4b0>)
 8003c68:	edd3 3a03 	vldr	s7, [r3, #12]
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ee0 <statemachine+0x4b4>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003c70:	ee05 3a10 	vmov	s10, r3
 8003c74:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003c78:	4b99      	ldr	r3, [pc, #612]	@ (8003ee0 <statemachine+0x4b4>)
 8003c7a:	691b      	ldr	r3, [r3, #16]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003c7c:	ee05 3a10 	vmov	s10, r3
 8003c80:	eef8 4ac5 	vcvt.f32.s32	s9, s10
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003c84:	4b96      	ldr	r3, [pc, #600]	@ (8003ee0 <statemachine+0x4b4>)
 8003c86:	695b      	ldr	r3, [r3, #20]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003c88:	ee05 3a10 	vmov	s10, r3
 8003c8c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003c90:	4b94      	ldr	r3, [pc, #592]	@ (8003ee4 <statemachine+0x4b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	eeb0 2a65 	vmov.f32	s4, s11
 8003c9a:	eef0 1a46 	vmov.f32	s3, s12
 8003c9e:	eeb0 1a66 	vmov.f32	s2, s13
 8003ca2:	eef0 0a47 	vmov.f32	s1, s14
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	2310      	movs	r3, #16
 8003cac:	2216      	movs	r2, #22
 8003cae:	215a      	movs	r1, #90	@ 0x5a
 8003cb0:	488d      	ldr	r0, [pc, #564]	@ (8003ee8 <statemachine+0x4bc>)
 8003cb2:	f000 fe21 	bl	80048f8 <create_and_send_payload>

vTaskDelay(pdMS_TO_TICKS(5));
 8003cb6:	2005      	movs	r0, #5
 8003cb8:	f00e fc8a 	bl	80125d0 <vTaskDelay>

create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003cbc:	4b85      	ldr	r3, [pc, #532]	@ (8003ed4 <statemachine+0x4a8>)
 8003cbe:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003cc2:	4b84      	ldr	r3, [pc, #528]	@ (8003ed4 <statemachine+0x4a8>)
 8003cc4:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003cc8:	4b82      	ldr	r3, [pc, #520]	@ (8003ed4 <statemachine+0x4a8>)
 8003cca:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003cce:	4b7b      	ldr	r3, [pc, #492]	@ (8003ebc <statemachine+0x490>)
 8003cd0:	ed93 6a00 	vldr	s12, [r3]
 8003cd4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed4 <statemachine+0x4a8>)
 8003cd6:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003cda:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed4 <statemachine+0x4a8>)
 8003cdc:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003ce0:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed8 <statemachine+0x4ac>)
 8003ce2:	ed93 3a00 	vldr	s6, [r3]
 8003ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8003edc <statemachine+0x4b0>)
 8003ce8:	edd3 3a03 	vldr	s7, [r3, #12]
		  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
		  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003cec:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <statemachine+0x4b4>)
 8003cee:	68db      	ldr	r3, [r3, #12]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003cf0:	ee05 3a10 	vmov	s10, r3
 8003cf4:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
		  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003cf8:	4b79      	ldr	r3, [pc, #484]	@ (8003ee0 <statemachine+0x4b4>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003cfc:	ee05 3a10 	vmov	s10, r3
 8003d00:	eef8 4ac5 	vcvt.f32.s32	s9, s10
		  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003d04:	4b76      	ldr	r3, [pc, #472]	@ (8003ee0 <statemachine+0x4b4>)
 8003d06:	695b      	ldr	r3, [r3, #20]
create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003d08:	ee05 3a10 	vmov	s10, r3
 8003d0c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003d10:	4b74      	ldr	r3, [pc, #464]	@ (8003ee4 <statemachine+0x4b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	eeb0 2a65 	vmov.f32	s4, s11
 8003d1a:	eef0 1a46 	vmov.f32	s3, s12
 8003d1e:	eeb0 1a66 	vmov.f32	s2, s13
 8003d22:	eef0 0a47 	vmov.f32	s1, s14
 8003d26:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	215a      	movs	r1, #90	@ 0x5a
 8003d30:	486d      	ldr	r0, [pc, #436]	@ (8003ee8 <statemachine+0x4bc>)
 8003d32:	f000 fde1 	bl	80048f8 <create_and_send_payload>
		  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);

#endif


if((flag_drop==1) && (flag_calib==1)){
 8003d36:	4b6d      	ldr	r3, [pc, #436]	@ (8003eec <statemachine+0x4c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f040 81ae 	bne.w	800409c <statemachine+0x670>
 8003d40:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef0 <statemachine+0x4c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 81a9 	bne.w	800409c <statemachine+0x670>

				state++;
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <statemachine+0x4c8>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <statemachine+0x4c8>)
 8003d54:	701a      	strb	r2, [r3, #0]
				cpt_tps_chute=timeindex;
 8003d56:	4b63      	ldr	r3, [pc, #396]	@ (8003ee4 <statemachine+0x4b8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a67      	ldr	r2, [pc, #412]	@ (8003ef8 <statemachine+0x4cc>)
 8003d5c:	6013      	str	r3, [r2, #0]
			}

		break;
 8003d5e:	e19d      	b.n	800409c <statemachine+0x670>

	case PRESEPARATION:
		ssd1306_Fill(Black);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7ff fcd7 	bl	8003714 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003d66:	2120      	movs	r1, #32
 8003d68:	2020      	movs	r0, #32
 8003d6a:	f7ff fe15 	bl	8003998 <ssd1306_SetCursor>
		ssd1306_WriteString("PRE", Font_16x24, White);
 8003d6e:	4a63      	ldr	r2, [pc, #396]	@ (8003efc <statemachine+0x4d0>)
 8003d70:	2301      	movs	r3, #1
 8003d72:	ca06      	ldmia	r2, {r1, r2}
 8003d74:	4862      	ldr	r0, [pc, #392]	@ (8003f00 <statemachine+0x4d4>)
 8003d76:	f7ff fde9 	bl	800394c <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003d7a:	2138      	movs	r1, #56	@ 0x38
 8003d7c:	2020      	movs	r0, #32
 8003d7e:	f7ff fe0b 	bl	8003998 <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"h=%f",hauteur_relative);
 8003d82:	4b4e      	ldr	r3, [pc, #312]	@ (8003ebc <statemachine+0x490>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fc06 	bl	8000598 <__aeabi_f2d>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	e9cd 2300 	strd	r2, r3, [sp]
 8003d94:	4a5b      	ldr	r2, [pc, #364]	@ (8003f04 <statemachine+0x4d8>)
 8003d96:	2132      	movs	r1, #50	@ 0x32
 8003d98:	484a      	ldr	r0, [pc, #296]	@ (8003ec4 <statemachine+0x498>)
 8003d9a:	f010 fea3 	bl	8014ae4 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec8 <statemachine+0x49c>)
 8003da0:	2301      	movs	r3, #1
 8003da2:	ca06      	ldmia	r2, {r1, r2}
 8003da4:	4847      	ldr	r0, [pc, #284]	@ (8003ec4 <statemachine+0x498>)
 8003da6:	f7ff fdd1 	bl	800394c <ssd1306_WriteString>
#ifdef PARTIE_HAUT

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003daa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <statemachine+0x4a8>)
 8003dac:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003db0:	4b48      	ldr	r3, [pc, #288]	@ (8003ed4 <statemachine+0x4a8>)
 8003db2:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <statemachine+0x4a8>)
 8003db8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ebc <statemachine+0x490>)
 8003dbe:	ed93 6a00 	vldr	s12, [r3]
 8003dc2:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <statemachine+0x4a8>)
 8003dc4:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003dc8:	4b42      	ldr	r3, [pc, #264]	@ (8003ed4 <statemachine+0x4a8>)
 8003dca:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003dce:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <statemachine+0x4ac>)
 8003dd0:	ed93 3a00 	vldr	s6, [r3]
 8003dd4:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <statemachine+0x4b0>)
 8003dd6:	edd3 3a03 	vldr	s7, [r3, #12]
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <statemachine+0x4b4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003dde:	ee05 3a10 	vmov	s10, r3
 8003de2:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003de6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee0 <statemachine+0x4b4>)
 8003de8:	691b      	ldr	r3, [r3, #16]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003dea:	ee05 3a10 	vmov	s10, r3
 8003dee:	eef8 4ac5 	vcvt.f32.s32	s9, s10
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003df2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <statemachine+0x4b4>)
 8003df4:	695b      	ldr	r3, [r3, #20]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003df6:	ee05 3a10 	vmov	s10, r3
 8003dfa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003dfe:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <statemachine+0x4b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	eeb0 2a65 	vmov.f32	s4, s11
 8003e08:	eef0 1a46 	vmov.f32	s3, s12
 8003e0c:	eeb0 1a66 	vmov.f32	s2, s13
 8003e10:	eef0 0a47 	vmov.f32	s1, s14
 8003e14:	eeb0 0a67 	vmov.f32	s0, s15
 8003e18:	2310      	movs	r3, #16
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	215a      	movs	r1, #90	@ 0x5a
 8003e1e:	4832      	ldr	r0, [pc, #200]	@ (8003ee8 <statemachine+0x4bc>)
 8003e20:	f000 fd6a 	bl	80048f8 <create_and_send_payload>

		vTaskDelay(pdMS_TO_TICKS(5));
 8003e24:	2005      	movs	r0, #5
 8003e26:	f00e fbd3 	bl	80125d0 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed4 <statemachine+0x4a8>)
 8003e2c:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003e30:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <statemachine+0x4a8>)
 8003e32:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003e36:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <statemachine+0x4a8>)
 8003e38:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ebc <statemachine+0x490>)
 8003e3e:	ed93 6a00 	vldr	s12, [r3]
 8003e42:	4b24      	ldr	r3, [pc, #144]	@ (8003ed4 <statemachine+0x4a8>)
 8003e44:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003e48:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <statemachine+0x4a8>)
 8003e4a:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <statemachine+0x4ac>)
 8003e50:	ed93 3a00 	vldr	s6, [r3]
 8003e54:	4b21      	ldr	r3, [pc, #132]	@ (8003edc <statemachine+0x4b0>)
 8003e56:	edd3 3a03 	vldr	s7, [r3, #12]
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <statemachine+0x4b4>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003e5e:	ee05 3a10 	vmov	s10, r3
 8003e62:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003e66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <statemachine+0x4b4>)
 8003e68:	691b      	ldr	r3, [r3, #16]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003e6a:	ee05 3a10 	vmov	s10, r3
 8003e6e:	eef8 4ac5 	vcvt.f32.s32	s9, s10
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003e72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <statemachine+0x4b4>)
 8003e74:	695b      	ldr	r3, [r3, #20]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003e76:	ee05 3a10 	vmov	s10, r3
 8003e7a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003e7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <statemachine+0x4b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	eeb0 2a65 	vmov.f32	s4, s11
 8003e88:	eef0 1a46 	vmov.f32	s3, s12
 8003e8c:	eeb0 1a66 	vmov.f32	s2, s13
 8003e90:	eef0 0a47 	vmov.f32	s1, s14
 8003e94:	eeb0 0a67 	vmov.f32	s0, s15
 8003e98:	2310      	movs	r3, #16
 8003e9a:	2216      	movs	r2, #22
 8003e9c:	215a      	movs	r1, #90	@ 0x5a
 8003e9e:	4812      	ldr	r0, [pc, #72]	@ (8003ee8 <statemachine+0x4bc>)
 8003ea0:	f000 fd2a 	bl	80048f8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);

#endif

		if(flag_separation==1){
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <statemachine+0x4dc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f040 80f9 	bne.w	80040a0 <statemachine+0x674>
			state++;
 8003eae:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <statemachine+0x4c8>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <statemachine+0x4c8>)
 8003eb8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003eba:	e0f1      	b.n	80040a0 <statemachine+0x674>
 8003ebc:	20000ea4 	.word	0x20000ea4
 8003ec0:	08018e20 	.word	0x08018e20
 8003ec4:	20001320 	.word	0x20001320
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	20001358 	.word	0x20001358
 8003ed0:	20001354 	.word	0x20001354
 8003ed4:	20000c6c 	.word	0x20000c6c
 8003ed8:	20000be4 	.word	0x20000be4
 8003edc:	20000758 	.word	0x20000758
 8003ee0:	20000738 	.word	0x20000738
 8003ee4:	20000eb0 	.word	0x20000eb0
 8003ee8:	20000408 	.word	0x20000408
 8003eec:	20000e84 	.word	0x20000e84
 8003ef0:	20000e8c 	.word	0x20000e8c
 8003ef4:	20000e80 	.word	0x20000e80
 8003ef8:	20000e98 	.word	0x20000e98
 8003efc:	20000018 	.word	0x20000018
 8003f00:	08018e2c 	.word	0x08018e2c
 8003f04:	08018e30 	.word	0x08018e30
 8003f08:	20000e88 	.word	0x20000e88

	case POSTSEPARATION:
		ssd1306_Fill(Black);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7ff fc01 	bl	8003714 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003f12:	2120      	movs	r1, #32
 8003f14:	2020      	movs	r0, #32
 8003f16:	f7ff fd3f 	bl	8003998 <ssd1306_SetCursor>
		ssd1306_WriteString("POST", Font_16x24, White);
 8003f1a:	4a64      	ldr	r2, [pc, #400]	@ (80040ac <statemachine+0x680>)
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	ca06      	ldmia	r2, {r1, r2}
 8003f20:	4863      	ldr	r0, [pc, #396]	@ (80040b0 <statemachine+0x684>)
 8003f22:	f7ff fd13 	bl	800394c <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003f26:	2138      	movs	r1, #56	@ 0x38
 8003f28:	2020      	movs	r0, #32
 8003f2a:	f7ff fd35 	bl	8003998 <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"tps=%lu",(timeindex-cpt_tps_chute));
 8003f2e:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <statemachine+0x688>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <statemachine+0x68c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	4a60      	ldr	r2, [pc, #384]	@ (80040bc <statemachine+0x690>)
 8003f3a:	2132      	movs	r1, #50	@ 0x32
 8003f3c:	4860      	ldr	r0, [pc, #384]	@ (80040c0 <statemachine+0x694>)
 8003f3e:	f010 fdd1 	bl	8014ae4 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003f42:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <statemachine+0x698>)
 8003f44:	2301      	movs	r3, #1
 8003f46:	ca06      	ldmia	r2, {r1, r2}
 8003f48:	485d      	ldr	r0, [pc, #372]	@ (80040c0 <statemachine+0x694>)
 8003f4a:	f7ff fcff 	bl	800394c <ssd1306_WriteString>

#ifdef PARTIE_HAUT

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003f4e:	4b5e      	ldr	r3, [pc, #376]	@ (80040c8 <statemachine+0x69c>)
 8003f50:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003f54:	4b5c      	ldr	r3, [pc, #368]	@ (80040c8 <statemachine+0x69c>)
 8003f56:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80040c8 <statemachine+0x69c>)
 8003f5c:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003f60:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <statemachine+0x6a0>)
 8003f62:	ed93 6a00 	vldr	s12, [r3]
 8003f66:	4b58      	ldr	r3, [pc, #352]	@ (80040c8 <statemachine+0x69c>)
 8003f68:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003f6c:	4b56      	ldr	r3, [pc, #344]	@ (80040c8 <statemachine+0x69c>)
 8003f6e:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003f72:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <statemachine+0x6a4>)
 8003f74:	ed93 3a00 	vldr	s6, [r3]
 8003f78:	4b56      	ldr	r3, [pc, #344]	@ (80040d4 <statemachine+0x6a8>)
 8003f7a:	edd3 3a03 	vldr	s7, [r3, #12]
								  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
								  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003f7e:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <statemachine+0x6ac>)
 8003f80:	68db      	ldr	r3, [r3, #12]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003f82:	ee05 3a10 	vmov	s10, r3
 8003f86:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
								  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003f8a:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <statemachine+0x6ac>)
 8003f8c:	691b      	ldr	r3, [r3, #16]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003f8e:	ee05 3a10 	vmov	s10, r3
 8003f92:	eef8 4ac5 	vcvt.f32.s32	s9, s10
								  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003f96:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <statemachine+0x6ac>)
 8003f98:	695b      	ldr	r3, [r3, #20]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,BOTTOM_ADDR,0x10,
 8003f9a:	ee05 3a10 	vmov	s10, r3
 8003f9e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003fa2:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <statemachine+0x688>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	eeb0 2a65 	vmov.f32	s4, s11
 8003fac:	eef0 1a46 	vmov.f32	s3, s12
 8003fb0:	eeb0 1a66 	vmov.f32	s2, s13
 8003fb4:	eef0 0a47 	vmov.f32	s1, s14
 8003fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	2216      	movs	r2, #22
 8003fc0:	215a      	movs	r1, #90	@ 0x5a
 8003fc2:	4846      	ldr	r0, [pc, #280]	@ (80040dc <statemachine+0x6b0>)
 8003fc4:	f000 fc98 	bl	80048f8 <create_and_send_payload>

		vTaskDelay(pdMS_TO_TICKS(5));
 8003fc8:	2005      	movs	r0, #5
 8003fca:	f00e fb01 	bl	80125d0 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8003fce:	4b3e      	ldr	r3, [pc, #248]	@ (80040c8 <statemachine+0x69c>)
 8003fd0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80040c8 <statemachine+0x69c>)
 8003fd6:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003fda:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <statemachine+0x69c>)
 8003fdc:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <statemachine+0x6a0>)
 8003fe2:	ed93 6a00 	vldr	s12, [r3]
 8003fe6:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <statemachine+0x69c>)
 8003fe8:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <statemachine+0x69c>)
 8003fee:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003ff2:	4b37      	ldr	r3, [pc, #220]	@ (80040d0 <statemachine+0x6a4>)
 8003ff4:	ed93 3a00 	vldr	s6, [r3]
 8003ff8:	4b36      	ldr	r3, [pc, #216]	@ (80040d4 <statemachine+0x6a8>)
 8003ffa:	edd3 3a03 	vldr	s7, [r3, #12]
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <statemachine+0x6ac>)
 8004000:	68db      	ldr	r3, [r3, #12]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 8004002:	ee05 3a10 	vmov	s10, r3
 8004006:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 800400a:	4b33      	ldr	r3, [pc, #204]	@ (80040d8 <statemachine+0x6ac>)
 800400c:	691b      	ldr	r3, [r3, #16]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 800400e:	ee05 3a10 	vmov	s10, r3
 8004012:	eef8 4ac5 	vcvt.f32.s32	s9, s10
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);
 8004016:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <statemachine+0x6ac>)
 8004018:	695b      	ldr	r3, [r3, #20]
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,CHANNEL,GROUND_ADDR,0x10,
 800401a:	ee05 3a10 	vmov	s10, r3
 800401e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004022:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <statemachine+0x688>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	eeb0 2a65 	vmov.f32	s4, s11
 800402c:	eef0 1a46 	vmov.f32	s3, s12
 8004030:	eeb0 1a66 	vmov.f32	s2, s13
 8004034:	eef0 0a47 	vmov.f32	s1, s14
 8004038:	eeb0 0a67 	vmov.f32	s0, s15
 800403c:	2310      	movs	r3, #16
 800403e:	2201      	movs	r2, #1
 8004040:	215a      	movs	r1, #90	@ 0x5a
 8004042:	4826      	ldr	r0, [pc, #152]	@ (80040dc <statemachine+0x6b0>)
 8004044:	f000 fc58 	bl	80048f8 <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,hauteur_relative,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,myDatabmp581.press,myData6AXIS.GyroX,myData6AXIS.GyroY,myData6AXIS.GyroZ,timeindex);

#endif

		if((timeindex-cpt_tps_chute)>=600){
 8004048:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <statemachine+0x688>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <statemachine+0x68c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004056:	d325      	bcc.n	80040a4 <statemachine+0x678>
			state++;
 8004058:	4b21      	ldr	r3, [pc, #132]	@ (80040e0 <statemachine+0x6b4>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	4b1f      	ldr	r3, [pc, #124]	@ (80040e0 <statemachine+0x6b4>)
 8004062:	701a      	strb	r2, [r3, #0]
			flag_fin=1;
 8004064:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <statemachine+0x6b8>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]





		break;
 800406a:	e01b      	b.n	80040a4 <statemachine+0x678>
	case FIN:

		ssd1306_Fill(Black);
 800406c:	2000      	movs	r0, #0
 800406e:	f7ff fb51 	bl	8003714 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8004072:	2120      	movs	r1, #32
 8004074:	2020      	movs	r0, #32
 8004076:	f7ff fc8f 	bl	8003998 <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 800407a:	4a0c      	ldr	r2, [pc, #48]	@ (80040ac <statemachine+0x680>)
 800407c:	2301      	movs	r3, #1
 800407e:	ca06      	ldmia	r2, {r1, r2}
 8004080:	4819      	ldr	r0, [pc, #100]	@ (80040e8 <statemachine+0x6bc>)
 8004082:	f7ff fc63 	bl	800394c <ssd1306_WriteString>

		LED_Setcolour(0,255,0,0,255,0);
 8004086:	2300      	movs	r3, #0
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	23ff      	movs	r3, #255	@ 0xff
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	2200      	movs	r2, #0
 8004092:	21ff      	movs	r1, #255	@ 0xff
 8004094:	2000      	movs	r0, #0
 8004096:	f7fe fd8d 	bl	8002bb4 <LED_Setcolour>

		break;
 800409a:	e004      	b.n	80040a6 <statemachine+0x67a>
		break;
 800409c:	bf00      	nop
 800409e:	e002      	b.n	80040a6 <statemachine+0x67a>
		break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <statemachine+0x67a>
		break;
 80040a4:	bf00      	nop
	}

}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000018 	.word	0x20000018
 80040b0:	08018e38 	.word	0x08018e38
 80040b4:	20000eb0 	.word	0x20000eb0
 80040b8:	20000e98 	.word	0x20000e98
 80040bc:	08018e40 	.word	0x08018e40
 80040c0:	20001320 	.word	0x20001320
 80040c4:	20000008 	.word	0x20000008
 80040c8:	20000c6c 	.word	0x20000c6c
 80040cc:	20000ea4 	.word	0x20000ea4
 80040d0:	20000be4 	.word	0x20000be4
 80040d4:	20000758 	.word	0x20000758
 80040d8:	20000738 	.word	0x20000738
 80040dc:	20000408 	.word	0x20000408
 80040e0:	20000e80 	.word	0x20000e80
 80040e4:	20000e9c 	.word	0x20000e9c
 80040e8:	08018e48 	.word	0x08018e48

080040ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f2:	4b12      	ldr	r3, [pc, #72]	@ (800413c <HAL_MspInit+0x50>)
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	4a11      	ldr	r2, [pc, #68]	@ (800413c <HAL_MspInit+0x50>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_MspInit+0x50>)
 8004100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <HAL_MspInit+0x50>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	4a0b      	ldr	r2, [pc, #44]	@ (800413c <HAL_MspInit+0x50>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	@ 0x58
 8004116:	4b09      	ldr	r3, [pc, #36]	@ (800413c <HAL_MspInit+0x50>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004122:	2200      	movs	r2, #0
 8004124:	210f      	movs	r1, #15
 8004126:	f06f 0001 	mvn.w	r0, #1
 800412a:	f003 fc93 	bl	8007a54 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800412e:	f005 f8a3 	bl	8009278 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	@ 0x30
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004150:	4b2c      	ldr	r3, [pc, #176]	@ (8004204 <HAL_InitTick+0xc4>)
 8004152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004154:	4a2b      	ldr	r2, [pc, #172]	@ (8004204 <HAL_InitTick+0xc4>)
 8004156:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800415a:	6613      	str	r3, [r2, #96]	@ 0x60
 800415c:	4b29      	ldr	r3, [pc, #164]	@ (8004204 <HAL_InitTick+0xc4>)
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004168:	f107 020c 	add.w	r2, r7, #12
 800416c:	f107 0310 	add.w	r3, r7, #16
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f005 fd76 	bl	8009c64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004178:	f005 fd5e 	bl	8009c38 <HAL_RCC_GetPCLK2Freq>
 800417c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800417e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004180:	4a21      	ldr	r2, [pc, #132]	@ (8004208 <HAL_InitTick+0xc8>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9b      	lsrs	r3, r3, #18
 8004188:	3b01      	subs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800418c:	4b1f      	ldr	r3, [pc, #124]	@ (800420c <HAL_InitTick+0xcc>)
 800418e:	4a20      	ldr	r2, [pc, #128]	@ (8004210 <HAL_InitTick+0xd0>)
 8004190:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_InitTick+0xcc>)
 8004194:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004198:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800419a:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <HAL_InitTick+0xcc>)
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80041a0:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <HAL_InitTick+0xcc>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a6:	4b19      	ldr	r3, [pc, #100]	@ (800420c <HAL_InitTick+0xcc>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80041ac:	4817      	ldr	r0, [pc, #92]	@ (800420c <HAL_InitTick+0xcc>)
 80041ae:	f006 fbed 	bl	800a98c <HAL_TIM_Base_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80041b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11b      	bne.n	80041f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80041c0:	4812      	ldr	r0, [pc, #72]	@ (800420c <HAL_InitTick+0xcc>)
 80041c2:	f006 fc3b 	bl	800aa3c <HAL_TIM_Base_Start_IT>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80041cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80041d4:	2019      	movs	r0, #25
 80041d6:	f003 fc57 	bl	8007a88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	d808      	bhi.n	80041f2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80041e0:	2200      	movs	r2, #0
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	2019      	movs	r0, #25
 80041e6:	f003 fc35 	bl	8007a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <HAL_InitTick+0xd4>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e002      	b.n	80041f8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80041f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3730      	adds	r7, #48	@ 0x30
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	431bde83 	.word	0x431bde83
 800420c:	2000135c 	.word	0x2000135c
 8004210:	40012c00 	.word	0x40012c00
 8004214:	20000028 	.word	0x20000028

08004218 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b092      	sub	sp, #72	@ 0x48
 800421c:	af08      	add	r7, sp, #32
 800421e:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	9306      	str	r3, [sp, #24]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9303      	str	r3, [sp, #12]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	9302      	str	r3, [sp, #8]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	4a03      	ldr	r2, [pc, #12]	@ (800427c <hard_fault_handler_c+0x64>)
 8004270:	21c8      	movs	r1, #200	@ 0xc8
 8004272:	4803      	ldr	r0, [pc, #12]	@ (8004280 <hard_fault_handler_c+0x68>)
 8004274:	f010 fc36 	bl	8014ae4 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <hard_fault_handler_c+0x60>
 800427c:	08018e4c 	.word	0x08018e4c
 8004280:	200013a8 	.word	0x200013a8

08004284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <NMI_Handler+0x4>

0800428c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8004290:	f01e 0f04 	tst.w	lr, #4
 8004294:	bf0c      	ite	eq
 8004296:	f3ef 8008 	mrseq	r0, MSP
 800429a:	f3ef 8009 	mrsne	r0, PSP
 800429e:	f7ff bfbb 	b.w	8004218 <hard_fault_handler_c>
        "ITE EQ\n"
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
	  ssd1306_SetCursor(32, 32);
 80042a2:	2120      	movs	r1, #32
 80042a4:	2020      	movs	r0, #32
 80042a6:	f7ff fb77 	bl	8003998 <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7ff fa32 	bl	8003714 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80042b0:	4a04      	ldr	r2, [pc, #16]	@ (80042c4 <HardFault_Handler+0x38>)
 80042b2:	2301      	movs	r3, #1
 80042b4:	ca06      	ldmia	r2, {r1, r2}
 80042b6:	4804      	ldr	r0, [pc, #16]	@ (80042c8 <HardFault_Handler+0x3c>)
 80042b8:	f7ff fb48 	bl	800394c <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 80042bc:	f7ff fa42 	bl	8003744 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <HardFault_Handler+0x34>
 80042c4:	20000010 	.word	0x20000010
 80042c8:	08018eb4 	.word	0x08018eb4

080042cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <MemManage_Handler+0x4>

080042d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <BusFault_Handler+0x4>

080042dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <UsageFault_Handler+0x4>

080042e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80042f6:	2002      	movs	r0, #2
 80042f8:	f004 f8de 	bl	80084b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}

08004300 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004304:	2010      	movs	r0, #16
 8004306:	f004 f8d7 	bl	80084b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8004314:	4802      	ldr	r0, [pc, #8]	@ (8004320 <DMA1_Channel1_IRQHandler+0x10>)
 8004316:	f003 fda8 	bl	8007e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20001558 	.word	0x20001558

08004324 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004328:	4802      	ldr	r0, [pc, #8]	@ (8004334 <DMA1_Channel2_IRQHandler+0x10>)
 800432a:	f003 fd9e 	bl	8007e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200002a4 	.word	0x200002a4

08004338 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800433c:	4802      	ldr	r0, [pc, #8]	@ (8004348 <DMA1_Channel3_IRQHandler+0x10>)
 800433e:	f003 fd94 	bl	8007e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200019e4 	.word	0x200019e4

0800434c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004350:	4802      	ldr	r0, [pc, #8]	@ (800435c <DMA1_Channel4_IRQHandler+0x10>)
 8004352:	f003 fd8a 	bl	8007e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20001a44 	.word	0x20001a44

08004360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004364:	4802      	ldr	r0, [pc, #8]	@ (8004370 <DMA1_Channel5_IRQHandler+0x10>)
 8004366:	f003 fd80 	bl	8007e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20001aa4 	.word	0x20001aa4

08004374 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004378:	4802      	ldr	r0, [pc, #8]	@ (8004384 <ADC1_2_IRQHandler+0x10>)
 800437a:	f002 fa75 	bl	8006868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000238 	.word	0x20000238

08004388 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800438c:	4802      	ldr	r0, [pc, #8]	@ (8004398 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800438e:	f007 f8c7 	bl	800b520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	2000135c 	.word	0x2000135c

0800439c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <TIM2_IRQHandler+0x10>)
 80043a2:	f007 f8bd 	bl	800b520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20001474 	.word	0x20001474

080043b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 80043b4:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <TIM4_IRQHandler+0x18>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a03      	ldr	r2, [pc, #12]	@ (80043c8 <TIM4_IRQHandler+0x18>)
 80043bc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80043be:	4803      	ldr	r0, [pc, #12]	@ (80043cc <TIM4_IRQHandler+0x1c>)
 80043c0:	f007 f8ae 	bl	800b520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000eb0 	.word	0x20000eb0
 80043cc:	2000150c 	.word	0x2000150c

080043d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043d4:	4802      	ldr	r0, [pc, #8]	@ (80043e0 <USART1_IRQHandler+0x10>)
 80043d6:	f008 fcd9 	bl	800cd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20001950 	.word	0x20001950

080043e4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80043e8:	4802      	ldr	r0, [pc, #8]	@ (80043f4 <LPUART1_IRQHandler+0x10>)
 80043ea:	f008 fccf 	bl	800cd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200018bc 	.word	0x200018bc

080043f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return 1;
 80043fc:	2301      	movs	r3, #1
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_kill>:

int _kill(int pid, int sig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004412:	f010 fcb3 	bl	8014d7c <__errno>
 8004416:	4603      	mov	r3, r0
 8004418:	2216      	movs	r2, #22
 800441a:	601a      	str	r2, [r3, #0]
  return -1;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_exit>:

void _exit (int status)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ffe7 	bl	8004408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <_exit+0x12>

0800443e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e00a      	b.n	8004466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004450:	f3af 8000 	nop.w
 8004454:	4601      	mov	r1, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	60ba      	str	r2, [r7, #8]
 800445c:	b2ca      	uxtb	r2, r1
 800445e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3301      	adds	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	dbf0      	blt.n	8004450 <_read+0x12>
  }

  return len;
 800446e:	687b      	ldr	r3, [r7, #4]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e009      	b.n	800449e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	60ba      	str	r2, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3301      	adds	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	dbf1      	blt.n	800448a <_write+0x12>
  }
  return len;
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_close>:

int _close(int file)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044d8:	605a      	str	r2, [r3, #4]
  return 0;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_isatty>:

int _isatty(int file)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004520:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <_sbrk+0x5c>)
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <_sbrk+0x60>)
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800452c:	4b13      	ldr	r3, [pc, #76]	@ (800457c <_sbrk+0x64>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <_sbrk+0x64>)
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <_sbrk+0x68>)
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800453a:	4b10      	ldr	r3, [pc, #64]	@ (800457c <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d207      	bcs.n	8004558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004548:	f010 fc18 	bl	8014d7c <__errno>
 800454c:	4603      	mov	r3, r0
 800454e:	220c      	movs	r2, #12
 8004550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	e009      	b.n	800456c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004558:	4b08      	ldr	r3, [pc, #32]	@ (800457c <_sbrk+0x64>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <_sbrk+0x64>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	4a05      	ldr	r2, [pc, #20]	@ (800457c <_sbrk+0x64>)
 8004568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20008000 	.word	0x20008000
 8004578:	00000400 	.word	0x00000400
 800457c:	20001470 	.word	0x20001470
 8004580:	20004d10 	.word	0x20004d10

08004584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <SystemInit+0x20>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458e:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <SystemInit+0x20>)
 8004590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	@ 0x38
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	460a      	mov	r2, r1
 80045b2:	71fb      	strb	r3, [r7, #7]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 80045b8:	2306      	movs	r3, #6
 80045ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 80045be:	2304      	movs	r3, #4
 80045c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80045ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004788 <INIT_PERM_TARVOS+0x1e0>)
 80045cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045d4:	6018      	str	r0, [r3, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, CHANNEL, 0x00}; // 869.5 MHz -> 130 = 0x82
 80045da:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <INIT_PERM_TARVOS+0x1e4>)
 80045dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045e4:	6018      	str	r0, [r3, #0]
 80045e6:	3304      	adds	r3, #4
 80045e8:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 80045ea:	4a69      	ldr	r2, [pc, #420]	@ (8004790 <INIT_PERM_TARVOS+0x1e8>)
 80045ec:	f107 031c 	add.w	r3, r7, #28
 80045f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045f4:	6018      	str	r0, [r3, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 80045fa:	2302      	movs	r3, #2
 80045fc:	753b      	strb	r3, [r7, #20]
 80045fe:	2309      	movs	r3, #9
 8004600:	757b      	strb	r3, [r7, #21]
 8004602:	2302      	movs	r3, #2
 8004604:	75bb      	strb	r3, [r7, #22]
 8004606:	230b      	movs	r3, #11
 8004608:	75fb      	strb	r3, [r7, #23]
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	763b      	strb	r3, [r7, #24]
 800460e:	2300      	movs	r3, #0
 8004610:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8004612:	2302      	movs	r3, #2
 8004614:	733b      	strb	r3, [r7, #12]
 8004616:	2309      	movs	r3, #9
 8004618:	737b      	strb	r3, [r7, #13]
 800461a:	2302      	movs	r3, #2
 800461c:	73bb      	strb	r3, [r7, #14]
 800461e:	2308      	movs	r3, #8
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	79bb      	ldrb	r3, [r7, #6]
 8004624:	743b      	strb	r3, [r7, #16]
 8004626:	2300      	movs	r3, #0
 8004628:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800462a:	4b5a      	ldr	r3, [pc, #360]	@ (8004794 <INIT_PERM_TARVOS+0x1ec>)
 800462c:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 800462e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f8ac 	bl	800479c <Get_CRC8>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 800464a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800464e:	b29a      	uxth	r2, r3
 8004650:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004654:	2364      	movs	r3, #100	@ 0x64
 8004656:	4850      	ldr	r0, [pc, #320]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 8004658:	f008 f930 	bl	800c8bc <HAL_UART_Transmit>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8004668:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f88f 	bl	800479c <Get_CRC8>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8004684:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004688:	b29a      	uxth	r2, r3
 800468a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800468e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004692:	4841      	ldr	r0, [pc, #260]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 8004694:	f008 f912 	bl	800c8bc <HAL_UART_Transmit>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 80046a4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	f107 031c 	add.w	r3, r7, #28
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f871 	bl	800479c <Get_CRC8>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 80046c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	f107 011c 	add.w	r1, r7, #28
 80046ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80046ce:	4832      	ldr	r0, [pc, #200]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 80046d0:	f008 f8f4 	bl	800c8bc <HAL_UART_Transmit>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 80046e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f107 0314 	add.w	r3, r7, #20
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f853 	bl	800479c <Get_CRC8>
 80046f6:	4603      	mov	r3, r0
 80046f8:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 80046fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046fe:	b29a      	uxth	r2, r3
 8004700:	f107 0114 	add.w	r1, r7, #20
 8004704:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004708:	4823      	ldr	r0, [pc, #140]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 800470a:	f008 f8d7 	bl	800c8bc <HAL_UART_Transmit>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800471a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f836 	bl	800479c <Get_CRC8>
 8004730:	4603      	mov	r3, r0
 8004732:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8004734:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004738:	b29a      	uxth	r2, r3
 800473a:	f107 010c 	add.w	r1, r7, #12
 800473e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004742:	4815      	ldr	r0, [pc, #84]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 8004744:	f008 f8ba 	bl	800c8bc <HAL_UART_Transmit>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8004754:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004758:	b29a      	uxth	r2, r3
 800475a:	f107 0108 	add.w	r1, r7, #8
 800475e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004762:	480d      	ldr	r0, [pc, #52]	@ (8004798 <INIT_PERM_TARVOS+0x1f0>)
 8004764:	f008 f8aa 	bl	800c8bc <HAL_UART_Transmit>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8004774:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004778:	f001 fbdc 	bl	8005f34 <HAL_Delay>
    return status;
 800477c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8004780:	4618      	mov	r0, r3
 8004782:	3738      	adds	r7, #56	@ 0x38
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	08018ee4 	.word	0x08018ee4
 800478c:	08018eec 	.word	0x08018eec
 8004790:	08018ef4 	.word	0x08018ef4
 8004794:	07000502 	.word	0x07000502
 8004798:	200018bc 	.word	0x200018bc

0800479c <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80047ac:	2300      	movs	r3, #0
 80047ae:	81bb      	strh	r3, [r7, #12]
 80047b0:	e009      	b.n	80047c6 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 80047b2:	89bb      	ldrh	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	4053      	eors	r3, r2
 80047be:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	81bb      	strh	r3, [r7, #12]
 80047c6:	89ba      	ldrh	r2, [r7, #12]
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d3f1      	bcc.n	80047b2 <Get_CRC8+0x16>
	}
	return crc;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <SEND_DATA_NETW1>:


void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
 80047ec:	4613      	mov	r3, r2
 80047ee:	72bb      	strb	r3, [r7, #10]
 80047f0:	466b      	mov	r3, sp
 80047f2:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1d9e      	adds	r6, r3, #6
 80047f8:	1e73      	subs	r3, r6, #1
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	4632      	mov	r2, r6
 80047fe:	2300      	movs	r3, #0
 8004800:	4690      	mov	r8, r2
 8004802:	4699      	mov	r9, r3
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004818:	4632      	mov	r2, r6
 800481a:	2300      	movs	r3, #0
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	00eb      	lsls	r3, r5, #3
 800482a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482e:	00e2      	lsls	r2, r4, #3
 8004830:	4633      	mov	r3, r6
 8004832:	3307      	adds	r3, #7
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	ebad 0d03 	sub.w	sp, sp, r3
 800483c:	466b      	mov	r3, sp
 800483e:	3300      	adds	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2201      	movs	r2, #1
 800484c:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3302      	adds	r3, #2
 8004854:	b2da      	uxtb	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	7afa      	ldrb	r2, [r7, #11]
 800485e:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	7aba      	ldrb	r2, [r7, #10]
 8004864:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8004866:	2300      	movs	r3, #0
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e00a      	b.n	8004882 <SEND_DATA_NETW1+0xa6>
        trame[5 + i] = data[i];
 800486c:	7ffb      	ldrb	r3, [r7, #31]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	441a      	add	r2, r3
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	3305      	adds	r3, #5
 8004876:	7811      	ldrb	r1, [r2, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	3301      	adds	r3, #1
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	dcf0      	bgt.n	800486c <SEND_DATA_NETW1+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	b29b      	uxth	r3, r3
 800488e:	3305      	adds	r3, #5
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	1d5c      	adds	r4, r3, #5
 8004896:	4611      	mov	r1, r2
 8004898:	6978      	ldr	r0, [r7, #20]
 800489a:	f7ff ff7f 	bl	800479c <Get_CRC8>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	551a      	strb	r2, [r3, r4]


    // Transmission de la trame
    //HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
    if (osMutexWait(uartmutexHandle, osWaitForever) == osOK)
 80048a6:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <SEND_DATA_NETW1+0x110>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f04f 31ff 	mov.w	r1, #4294967295
 80048ae:	4618      	mov	r0, r3
 80048b0:	f00c fd38 	bl	8011324 <osMutexWait>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d111      	bne.n	80048de <SEND_DATA_NETW1+0x102>
    {
    HAL_UART_Transmit_DMA(&hlpuart1, trame, sizeof(trame));
 80048ba:	b2b3      	uxth	r3, r6
 80048bc:	461a      	mov	r2, r3
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	480b      	ldr	r0, [pc, #44]	@ (80048f0 <SEND_DATA_NETW1+0x114>)
 80048c2:	f008 f889 	bl	800c9d8 <HAL_UART_Transmit_DMA>
    osSemaphoreWait(uartTxDoneHandle, osWaitForever);
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <SEND_DATA_NETW1+0x118>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f04f 31ff 	mov.w	r1, #4294967295
 80048ce:	4618      	mov	r0, r3
 80048d0:	f00c fdca 	bl	8011468 <osSemaphoreWait>
    osMutexRelease(uartmutexHandle);
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <SEND_DATA_NETW1+0x110>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f00c fd71 	bl	80113c0 <osMutexRelease>
 80048de:	46d5      	mov	sp, sl
}

    //uint8_t bufferreceivetest[10];
    //HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);

}
 80048e0:	bf00      	nop
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ea:	bf00      	nop
 80048ec:	20000358 	.word	0x20000358
 80048f0:	200018bc 	.word	0x200018bc
 80048f4:	2000035c 	.word	0x2000035c

080048f8 <create_and_send_payload>:


//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,
		float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,
		float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b09c      	sub	sp, #112	@ 0x70
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800490a:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 800490e:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8004912:	edc7 1a08 	vstr	s3, [r7, #32]
 8004916:	ed87 2a07 	vstr	s4, [r7, #28]
 800491a:	edc7 2a06 	vstr	s5, [r7, #24]
 800491e:	ed87 3a05 	vstr	s6, [r7, #20]
 8004922:	edc7 3a04 	vstr	s7, [r7, #16]
 8004926:	ed87 4a03 	vstr	s8, [r7, #12]
 800492a:	edc7 4a02 	vstr	s9, [r7, #8]
 800492e:	ed87 5a01 	vstr	s10, [r7, #4]
 8004932:	4603      	mov	r3, r0
 8004934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004938:	460b      	mov	r3, r1
 800493a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800493e:	4613      	mov	r3, r2
 8004940:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004942:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	b29b      	uxth	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 800494e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <create_and_send_payload+0xe8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <create_and_send_payload+0xec>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 800496a:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <create_and_send_payload+0xf0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_fin;
 8004974:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <create_and_send_payload+0xf4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 80049c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c2:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 80049c6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80049ca:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80049ce:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80049d2:	2336      	movs	r3, #54	@ 0x36
 80049d4:	f7ff ff02 	bl	80047dc <SEND_DATA_NETW1>

}
 80049d8:	bf00      	nop
 80049da:	3770      	adds	r7, #112	@ 0x70
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000e8c 	.word	0x20000e8c
 80049e4:	20000e84 	.word	0x20000e84
 80049e8:	20000e88 	.word	0x20000e88
 80049ec:	20000e9c 	.word	0x20000e9c

080049f0 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	f040 8088 	bne.w	8004b14 <decode_payload+0x124>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b81      	cmp	r3, #129	@ 0x81
 8004a0c:	f040 8082 	bne.w	8004b14 <decode_payload+0x124>
		return;
	}
	if(receivingbuffer[2]!=56){
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	3302      	adds	r3, #2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b38      	cmp	r3, #56	@ 0x38
 8004a18:	d17e      	bne.n	8004b18 <decode_payload+0x128>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	78da      	ldrb	r2, [r3, #3]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	3304      	adds	r3, #4
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	b21a      	sxth	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	3305      	adds	r3, #5
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b21b      	sxth	r3, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b21b      	sxth	r3, r3
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	799a      	ldrb	r2, [r3, #6]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	79da      	ldrb	r2, [r3, #7]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	7a1a      	ldrb	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	7a5a      	ldrb	r2, [r3, #9]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }

#endif

#ifdef PARTIE_HAUT
    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3348      	adds	r3, #72	@ 0x48
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	320a      	adds	r2, #10
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	334c      	adds	r3, #76	@ 0x4c
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	320e      	adds	r2, #14
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3350      	adds	r3, #80	@ 0x50
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	3212      	adds	r2, #18
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3354      	adds	r3, #84	@ 0x54
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	3216      	adds	r2, #22
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3358      	adds	r3, #88	@ 0x58
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	321a      	adds	r2, #26
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	335c      	adds	r3, #92	@ 0x5c
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	321e      	adds	r2, #30
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3360      	adds	r3, #96	@ 0x60
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	3222      	adds	r2, #34	@ 0x22
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3370      	adds	r3, #112	@ 0x70
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	3226      	adds	r2, #38	@ 0x26
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3364      	adds	r3, #100	@ 0x64
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	322a      	adds	r2, #42	@ 0x2a
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3368      	adds	r3, #104	@ 0x68
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	322e      	adds	r2, #46	@ 0x2e
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	336c      	adds	r3, #108	@ 0x6c
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	3232      	adds	r2, #50	@ 0x32
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3374      	adds	r3, #116	@ 0x74
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	3236      	adds	r2, #54	@ 0x36
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3378      	adds	r3, #120	@ 0x78
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	323a      	adds	r2, #58	@ 0x3a
 8004b04:	7812      	ldrb	r2, [r2, #0]
 8004b06:	701a      	strb	r2, [r3, #0]
#endif




    memset((uint8_t *)receivingbuffer,0,64);
 8004b08:	2240      	movs	r2, #64	@ 0x40
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	6838      	ldr	r0, [r7, #0]
 8004b0e:	f010 f884 	bl	8014c1a <memset>
 8004b12:	e002      	b.n	8004b1a <decode_payload+0x12a>
		return;
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <decode_payload+0x12a>
		return;
 8004b18:	bf00      	nop
}
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <tarvos_checksum>:

uint8_t tarvos_checksum(uint8_t *data, uint16_t len)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0x00;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8004b30:	2300      	movs	r3, #0
 8004b32:	81bb      	strh	r3, [r7, #12]
 8004b34:	e009      	b.n	8004b4a <tarvos_checksum+0x2a>
        checksum ^= data[i];
 8004b36:	89bb      	ldrh	r3, [r7, #12]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	4053      	eors	r3, r2
 8004b42:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8004b44:	89bb      	ldrh	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	81bb      	strh	r3, [r7, #12]
 8004b4a:	89ba      	ldrh	r2, [r7, #12]
 8004b4c:	887b      	ldrh	r3, [r7, #2]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	429a      	cmp	r2, r3
 8004b52:	dbf0      	blt.n	8004b36 <tarvos_checksum+0x16>
    }
    return checksum;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08e      	sub	sp, #56	@ 0x38
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b78:	f107 031c 	add.w	r3, r7, #28
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b84:	463b      	mov	r3, r7
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]
 8004b92:	615a      	str	r2, [r3, #20]
 8004b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b96:	4b2d      	ldr	r3, [pc, #180]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004b98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba4:	4b29      	ldr	r3, [pc, #164]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 8004baa:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bac:	22cb      	movs	r2, #203	@ 0xcb
 8004bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bb0:	4b26      	ldr	r3, [pc, #152]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bb6:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bbc:	4823      	ldr	r0, [pc, #140]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bbe:	f005 fee5 	bl	800a98c <HAL_TIM_Base_Init>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004bc8:	f7fe fb4e 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	481c      	ldr	r0, [pc, #112]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bda:	f006 ff05 	bl	800b9e8 <HAL_TIM_ConfigClockSource>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004be4:	f7fe fb40 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004be8:	4818      	ldr	r0, [pc, #96]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004bea:	f005 ff91 	bl	800ab10 <HAL_TIM_PWM_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004bf4:	f7fe fb38 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c00:	f107 031c 	add.w	r3, r7, #28
 8004c04:	4619      	mov	r1, r3
 8004c06:	4811      	ldr	r0, [pc, #68]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004c08:	f007 fd40 	bl	800c68c <HAL_TIMEx_MasterConfigSynchronization>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004c12:	f7fe fb29 	bl	8003268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c16:	2360      	movs	r3, #96	@ 0x60
 8004c18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004c22:	2304      	movs	r3, #4
 8004c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c26:	463b      	mov	r3, r7
 8004c28:	2204      	movs	r2, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4807      	ldr	r0, [pc, #28]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004c2e:	f006 fdc7 	bl	800b7c0 <HAL_TIM_PWM_ConfigChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004c38:	f7fe fb16 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c3c:	4803      	ldr	r0, [pc, #12]	@ (8004c4c <MX_TIM2_Init+0xe8>)
 8004c3e:	f000 f951 	bl	8004ee4 <HAL_TIM_MspPostInit>

}
 8004c42:	bf00      	nop
 8004c44:	3738      	adds	r7, #56	@ 0x38
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20001474 	.word	0x20001474

08004c50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08e      	sub	sp, #56	@ 0x38
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	609a      	str	r2, [r3, #8]
 8004c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c70:	463b      	mov	r3, r7
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	60da      	str	r2, [r3, #12]
 8004c7c:	611a      	str	r2, [r3, #16]
 8004c7e:	615a      	str	r2, [r3, #20]
 8004c80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c82:	4b2d      	ldr	r3, [pc, #180]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004c84:	4a2d      	ldr	r2, [pc, #180]	@ (8004d3c <MX_TIM3_Init+0xec>)
 8004c86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004c8a:	22a9      	movs	r2, #169	@ 0xa9
 8004c8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004c94:	4b28      	ldr	r3, [pc, #160]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004c96:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9c:	4b26      	ldr	r3, [pc, #152]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ca2:	4b25      	ldr	r3, [pc, #148]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ca8:	4823      	ldr	r0, [pc, #140]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004caa:	f005 fe6f 	bl	800a98c <HAL_TIM_Base_Init>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004cb4:	f7fe fad8 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004cbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	481c      	ldr	r0, [pc, #112]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004cc6:	f006 fe8f 	bl	800b9e8 <HAL_TIM_ConfigClockSource>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004cd0:	f7fe faca 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004cd4:	4818      	ldr	r0, [pc, #96]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004cd6:	f005 ff1b 	bl	800ab10 <HAL_TIM_PWM_Init>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004ce0:	f7fe fac2 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cec:	f107 031c 	add.w	r3, r7, #28
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4811      	ldr	r0, [pc, #68]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004cf4:	f007 fcca 	bl	800c68c <HAL_TIMEx_MasterConfigSynchronization>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004cfe:	f7fe fab3 	bl	8003268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d02:	2360      	movs	r3, #96	@ 0x60
 8004d04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d12:	463b      	mov	r3, r7
 8004d14:	2200      	movs	r2, #0
 8004d16:	4619      	mov	r1, r3
 8004d18:	4807      	ldr	r0, [pc, #28]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004d1a:	f006 fd51 	bl	800b7c0 <HAL_TIM_PWM_ConfigChannel>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004d24:	f7fe faa0 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d28:	4803      	ldr	r0, [pc, #12]	@ (8004d38 <MX_TIM3_Init+0xe8>)
 8004d2a:	f000 f8db 	bl	8004ee4 <HAL_TIM_MspPostInit>

}
 8004d2e:	bf00      	nop
 8004d30:	3738      	adds	r7, #56	@ 0x38
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200014c0 	.word	0x200014c0
 8004d3c:	40000400 	.word	0x40000400

08004d40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d60:	4a1e      	ldr	r2, [pc, #120]	@ (8004ddc <MX_TIM4_Init+0x9c>)
 8004d62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8004d64:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d66:	f244 2267 	movw	r2, #16999	@ 0x4267
 8004d6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8004d72:	4b19      	ldr	r3, [pc, #100]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d74:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004d78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d7a:	4b17      	ldr	r3, [pc, #92]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d86:	4814      	ldr	r0, [pc, #80]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004d88:	f005 fe00 	bl	800a98c <HAL_TIM_Base_Init>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8004d92:	f7fe fa69 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	4619      	mov	r1, r3
 8004da2:	480d      	ldr	r0, [pc, #52]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004da4:	f006 fe20 	bl	800b9e8 <HAL_TIM_ConfigClockSource>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8004dae:	f7fe fa5b 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4806      	ldr	r0, [pc, #24]	@ (8004dd8 <MX_TIM4_Init+0x98>)
 8004dc0:	f007 fc64 	bl	800c68c <HAL_TIMEx_MasterConfigSynchronization>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004dca:	f7fe fa4d 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004dce:	bf00      	nop
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000150c 	.word	0x2000150c
 8004ddc:	40000800 	.word	0x40000800

08004de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d13e      	bne.n	8004e70 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004df2:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df6:	4a36      	ldr	r2, [pc, #216]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dfe:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004e0a:	4b32      	ldr	r3, [pc, #200]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e0c:	4a32      	ldr	r2, [pc, #200]	@ (8004ed8 <HAL_TIM_Base_MspInit+0xf8>)
 8004e0e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004e10:	4b30      	ldr	r3, [pc, #192]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e12:	2239      	movs	r2, #57	@ 0x39
 8004e14:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e18:	2210      	movs	r2, #16
 8004e1a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004e22:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e24:	2280      	movs	r2, #128	@ 0x80
 8004e26:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e2e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e30:	4b28      	ldr	r3, [pc, #160]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8004e36:	4b27      	ldr	r3, [pc, #156]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8004e42:	4824      	ldr	r0, [pc, #144]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e44:	f002 fe2e 	bl	8007aa4 <HAL_DMA_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8004e4e:	f7fe fa0b 	bl	8003268 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e58:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <HAL_TIM_Base_MspInit+0xf4>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2105      	movs	r1, #5
 8004e62:	201c      	movs	r0, #28
 8004e64:	f002 fdf6 	bl	8007a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e68:	201c      	movs	r0, #28
 8004e6a:	f002 fe0d 	bl	8007a88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004e6e:	e02a      	b.n	8004ec6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <HAL_TIM_Base_MspInit+0xfc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10c      	bne.n	8004e94 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]
}
 8004e92:	e018      	b.n	8004ec6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <HAL_TIM_Base_MspInit+0x100>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_TIM_Base_MspInit+0xf0>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2106      	movs	r1, #6
 8004eba:	201e      	movs	r0, #30
 8004ebc:	f002 fdca 	bl	8007a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ec0:	201e      	movs	r0, #30
 8004ec2:	f002 fde1 	bl	8007a88 <HAL_NVIC_EnableIRQ>
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	20001558 	.word	0x20001558
 8004ed8:	40020008 	.word	0x40020008
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800

08004ee4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	@ 0x28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d11d      	bne.n	8004f42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f12:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f22:	2302      	movs	r3, #2
 8004f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	4619      	mov	r1, r3
 8004f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f3c:	f003 f8f0 	bl	8008120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f40:	e020      	b.n	8004f84 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a12      	ldr	r2, [pc, #72]	@ (8004f90 <HAL_TIM_MspPostInit+0xac>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f50:	4a0e      	ldr	r2, [pc, #56]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f58:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <HAL_TIM_MspPostInit+0xa8>)
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f64:	2340      	movs	r3, #64	@ 0x40
 8004f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f74:	2302      	movs	r3, #2
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4805      	ldr	r0, [pc, #20]	@ (8004f94 <HAL_TIM_MspPostInit+0xb0>)
 8004f80:	f003 f8ce 	bl	8008120 <HAL_GPIO_Init>
}
 8004f84:	bf00      	nop
 8004f86:	3728      	adds	r7, #40	@ 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	48000800 	.word	0x48000800

08004f98 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004f9c:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <MX_LPUART1_UART_Init+0x90>)
 8004fa0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004fa2:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004fa8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004faa:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fbe:	220c      	movs	r2, #12
 8004fc0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fc2:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fce:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd4:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004fda:	4812      	ldr	r0, [pc, #72]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fdc:	f007 fc1e 	bl	800c81c <HAL_UART_Init>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8004fe6:	f7fe f93f 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fea:	2100      	movs	r1, #0
 8004fec:	480d      	ldr	r0, [pc, #52]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8004fee:	f009 f9e6 	bl	800e3be <HAL_UARTEx_SetTxFifoThreshold>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004ff8:	f7fe f936 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4809      	ldr	r0, [pc, #36]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8005000:	f009 fa1b 	bl	800e43a <HAL_UARTEx_SetRxFifoThreshold>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800500a:	f7fe f92d 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800500e:	4805      	ldr	r0, [pc, #20]	@ (8005024 <MX_LPUART1_UART_Init+0x8c>)
 8005010:	f009 f99c 	bl	800e34c <HAL_UARTEx_DisableFifoMode>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800501a:	f7fe f925 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200018bc 	.word	0x200018bc
 8005028:	40008000 	.word	0x40008000

0800502c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005030:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005032:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <MX_USART1_UART_Init+0x94>)
 8005034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005036:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800503c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800503e:	4b1f      	ldr	r3, [pc, #124]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005044:	4b1d      	ldr	r3, [pc, #116]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005046:	2200      	movs	r2, #0
 8005048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005050:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005052:	220c      	movs	r2, #12
 8005054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005056:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005064:	2200      	movs	r2, #0
 8005066:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800506e:	4b13      	ldr	r3, [pc, #76]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005070:	2200      	movs	r2, #0
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005074:	4811      	ldr	r0, [pc, #68]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005076:	f007 fbd1 	bl	800c81c <HAL_UART_Init>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005080:	f7fe f8f2 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005084:	2100      	movs	r1, #0
 8005086:	480d      	ldr	r0, [pc, #52]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 8005088:	f009 f999 	bl	800e3be <HAL_UARTEx_SetTxFifoThreshold>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005092:	f7fe f8e9 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005096:	2100      	movs	r1, #0
 8005098:	4808      	ldr	r0, [pc, #32]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 800509a:	f009 f9ce 	bl	800e43a <HAL_UARTEx_SetRxFifoThreshold>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80050a4:	f7fe f8e0 	bl	8003268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80050a8:	4804      	ldr	r0, [pc, #16]	@ (80050bc <MX_USART1_UART_Init+0x90>)
 80050aa:	f009 f94f 	bl	800e34c <HAL_UARTEx_DisableFifoMode>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80050b4:	f7fe f8d8 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20001950 	.word	0x20001950
 80050c0:	40013800 	.word	0x40013800

080050c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b09e      	sub	sp, #120	@ 0x78
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050dc:	f107 0320 	add.w	r3, r7, #32
 80050e0:	2244      	movs	r2, #68	@ 0x44
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f00f fd98 	bl	8014c1a <memset>
  if(uartHandle->Instance==LPUART1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a92      	ldr	r2, [pc, #584]	@ (8005338 <HAL_UART_MspInit+0x274>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	f040 80b0 	bne.w	8005256 <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80050f6:	2320      	movs	r3, #32
 80050f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80050fa:	2300      	movs	r3, #0
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050fe:	f107 0320 	add.w	r3, r7, #32
 8005102:	4618      	mov	r0, r3
 8005104:	f004 fe24 	bl	8009d50 <HAL_RCCEx_PeriphCLKConfig>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800510e:	f7fe f8ab 	bl	8003268 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005112:	4b8a      	ldr	r3, [pc, #552]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005116:	4a89      	ldr	r2, [pc, #548]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800511e:	4b87      	ldr	r3, [pc, #540]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512a:	4b84      	ldr	r3, [pc, #528]	@ (800533c <HAL_UART_MspInit+0x278>)
 800512c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512e:	4a83      	ldr	r2, [pc, #524]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005136:	4b81      	ldr	r3, [pc, #516]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005142:	4b7e      	ldr	r3, [pc, #504]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005146:	4a7d      	ldr	r2, [pc, #500]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800514e:	4b7b      	ldr	r3, [pc, #492]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800515a:	2308      	movs	r3, #8
 800515c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515e:	2302      	movs	r3, #2
 8005160:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005166:	2300      	movs	r3, #0
 8005168:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800516a:	230c      	movs	r3, #12
 800516c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005172:	4619      	mov	r1, r3
 8005174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005178:	f002 ffd2 	bl	8008120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800517c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005180:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	2302      	movs	r3, #2
 8005184:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518a:	2300      	movs	r3, #0
 800518c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800518e:	2308      	movs	r3, #8
 8005190:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005192:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005196:	4619      	mov	r1, r3
 8005198:	4869      	ldr	r0, [pc, #420]	@ (8005340 <HAL_UART_MspInit+0x27c>)
 800519a:	f002 ffc1 	bl	8008120 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800519e:	4b69      	ldr	r3, [pc, #420]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051a0:	4a69      	ldr	r2, [pc, #420]	@ (8005348 <HAL_UART_MspInit+0x284>)
 80051a2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80051a4:	4b67      	ldr	r3, [pc, #412]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051a6:	2222      	movs	r2, #34	@ 0x22
 80051a8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051aa:	4b66      	ldr	r3, [pc, #408]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b0:	4b64      	ldr	r3, [pc, #400]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b6:	4b63      	ldr	r3, [pc, #396]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051b8:	2280      	movs	r2, #128	@ 0x80
 80051ba:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051bc:	4b61      	ldr	r3, [pc, #388]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c2:	4b60      	ldr	r3, [pc, #384]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80051c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051ca:	2220      	movs	r2, #32
 80051cc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80051d4:	485b      	ldr	r0, [pc, #364]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051d6:	f002 fc65 	bl	8007aa4 <HAL_DMA_Init>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 80051e0:	f7fe f842 	bl	8003268 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a57      	ldr	r2, [pc, #348]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80051ec:	4a55      	ldr	r2, [pc, #340]	@ (8005344 <HAL_UART_MspInit+0x280>)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80051f2:	4b56      	ldr	r3, [pc, #344]	@ (800534c <HAL_UART_MspInit+0x288>)
 80051f4:	4a56      	ldr	r2, [pc, #344]	@ (8005350 <HAL_UART_MspInit+0x28c>)
 80051f6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80051f8:	4b54      	ldr	r3, [pc, #336]	@ (800534c <HAL_UART_MspInit+0x288>)
 80051fa:	2223      	movs	r2, #35	@ 0x23
 80051fc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051fe:	4b53      	ldr	r3, [pc, #332]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005200:	2210      	movs	r2, #16
 8005202:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005204:	4b51      	ldr	r3, [pc, #324]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005206:	2200      	movs	r2, #0
 8005208:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800520a:	4b50      	ldr	r3, [pc, #320]	@ (800534c <HAL_UART_MspInit+0x288>)
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005210:	4b4e      	ldr	r3, [pc, #312]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005216:	4b4d      	ldr	r3, [pc, #308]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800521c:	4b4b      	ldr	r3, [pc, #300]	@ (800534c <HAL_UART_MspInit+0x288>)
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005222:	4b4a      	ldr	r3, [pc, #296]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005224:	2200      	movs	r2, #0
 8005226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005228:	4848      	ldr	r0, [pc, #288]	@ (800534c <HAL_UART_MspInit+0x288>)
 800522a:	f002 fc3b 	bl	8007aa4 <HAL_DMA_Init>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8005234:	f7fe f818 	bl	8003268 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a44      	ldr	r2, [pc, #272]	@ (800534c <HAL_UART_MspInit+0x288>)
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800523e:	4a43      	ldr	r2, [pc, #268]	@ (800534c <HAL_UART_MspInit+0x288>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8005244:	2200      	movs	r2, #0
 8005246:	2105      	movs	r1, #5
 8005248:	205b      	movs	r0, #91	@ 0x5b
 800524a:	f002 fc03 	bl	8007a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800524e:	205b      	movs	r0, #91	@ 0x5b
 8005250:	f002 fc1a 	bl	8007a88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005254:	e06c      	b.n	8005330 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3e      	ldr	r2, [pc, #248]	@ (8005354 <HAL_UART_MspInit+0x290>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d167      	bne.n	8005330 <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005260:	2301      	movs	r3, #1
 8005262:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005264:	2300      	movs	r3, #0
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005268:	f107 0320 	add.w	r3, r7, #32
 800526c:	4618      	mov	r0, r3
 800526e:	f004 fd6f 	bl	8009d50 <HAL_RCCEx_PeriphCLKConfig>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8005278:	f7fd fff6 	bl	8003268 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800527c:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <HAL_UART_MspInit+0x278>)
 800527e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005280:	4a2e      	ldr	r2, [pc, #184]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005286:	6613      	str	r3, [r2, #96]	@ 0x60
 8005288:	4b2c      	ldr	r3, [pc, #176]	@ (800533c <HAL_UART_MspInit+0x278>)
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005294:	4b29      	ldr	r3, [pc, #164]	@ (800533c <HAL_UART_MspInit+0x278>)
 8005296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005298:	4a28      	ldr	r2, [pc, #160]	@ (800533c <HAL_UART_MspInit+0x278>)
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052a0:	4b26      	ldr	r3, [pc, #152]	@ (800533c <HAL_UART_MspInit+0x278>)
 80052a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052ac:	23c0      	movs	r3, #192	@ 0xc0
 80052ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2302      	movs	r3, #2
 80052b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b8:	2300      	movs	r3, #0
 80052ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052bc:	2307      	movs	r3, #7
 80052be:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052c4:	4619      	mov	r1, r3
 80052c6:	481e      	ldr	r0, [pc, #120]	@ (8005340 <HAL_UART_MspInit+0x27c>)
 80052c8:	f002 ff2a 	bl	8008120 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80052cc:	4b22      	ldr	r3, [pc, #136]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052ce:	4a23      	ldr	r2, [pc, #140]	@ (800535c <HAL_UART_MspInit+0x298>)
 80052d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80052d2:	4b21      	ldr	r3, [pc, #132]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052d4:	2218      	movs	r2, #24
 80052d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052de:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052e6:	2280      	movs	r2, #128	@ 0x80
 80052e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80052f6:	4b18      	ldr	r3, [pc, #96]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052f8:	2220      	movs	r2, #32
 80052fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052fc:	4b16      	ldr	r3, [pc, #88]	@ (8005358 <HAL_UART_MspInit+0x294>)
 80052fe:	2200      	movs	r2, #0
 8005300:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005302:	4815      	ldr	r0, [pc, #84]	@ (8005358 <HAL_UART_MspInit+0x294>)
 8005304:	f002 fbce 	bl	8007aa4 <HAL_DMA_Init>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800530e:	f7fd ffab 	bl	8003268 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <HAL_UART_MspInit+0x294>)
 8005316:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800531a:	4a0f      	ldr	r2, [pc, #60]	@ (8005358 <HAL_UART_MspInit+0x294>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005320:	2200      	movs	r2, #0
 8005322:	2105      	movs	r1, #5
 8005324:	2025      	movs	r0, #37	@ 0x25
 8005326:	f002 fb95 	bl	8007a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800532a:	2025      	movs	r0, #37	@ 0x25
 800532c:	f002 fbac 	bl	8007a88 <HAL_NVIC_EnableIRQ>
}
 8005330:	bf00      	nop
 8005332:	3778      	adds	r7, #120	@ 0x78
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40008000 	.word	0x40008000
 800533c:	40021000 	.word	0x40021000
 8005340:	48000400 	.word	0x48000400
 8005344:	200019e4 	.word	0x200019e4
 8005348:	40020030 	.word	0x40020030
 800534c:	20001a44 	.word	0x20001a44
 8005350:	40020044 	.word	0x40020044
 8005354:	40013800 	.word	0x40013800
 8005358:	20001aa4 	.word	0x20001aa4
 800535c:	40020058 	.word	0x40020058

08005360 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <HAL_UART_RxCpltCallback+0x90>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d114      	bne.n	800539c <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8005372:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <HAL_UART_RxCpltCallback+0x94>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8005378:	2264      	movs	r2, #100	@ 0x64
 800537a:	491f      	ldr	r1, [pc, #124]	@ (80053f8 <HAL_UART_RxCpltCallback+0x98>)
 800537c:	481f      	ldr	r0, [pc, #124]	@ (80053fc <HAL_UART_RxCpltCallback+0x9c>)
 800537e:	f00f fd2a 	bl	8014dd6 <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8005382:	2264      	movs	r2, #100	@ 0x64
 8005384:	491c      	ldr	r1, [pc, #112]	@ (80053f8 <HAL_UART_RxCpltCallback+0x98>)
 8005386:	481e      	ldr	r0, [pc, #120]	@ (8005400 <HAL_UART_RxCpltCallback+0xa0>)
 8005388:	f007 fba6 	bl	800cad8 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800538c:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <HAL_UART_RxCpltCallback+0xa4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <HAL_UART_RxCpltCallback+0xa4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0204 	bic.w	r2, r2, #4
 800539a:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <HAL_UART_RxCpltCallback+0xa8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d120      	bne.n	80053e8 <HAL_UART_RxCpltCallback+0x88>
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 80053a6:	2380      	movs	r3, #128	@ 0x80
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e01a      	b.n	80053e2 <HAL_UART_RxCpltCallback+0x82>
            circular_buffer[write_index] = dma_rx_buffer[i];
 80053ac:	4b17      	ldr	r3, [pc, #92]	@ (800540c <HAL_UART_RxCpltCallback+0xac>)
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	4a16      	ldr	r2, [pc, #88]	@ (8005410 <HAL_UART_RxCpltCallback+0xb0>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <HAL_UART_RxCpltCallback+0xb4>)
 80053be:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 80053c0:	4b12      	ldr	r3, [pc, #72]	@ (800540c <HAL_UART_RxCpltCallback+0xac>)
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	425a      	negs	r2, r3
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d2:	bf58      	it	pl
 80053d4:	4253      	negpl	r3, r2
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	4b0c      	ldr	r3, [pc, #48]	@ (800540c <HAL_UART_RxCpltCallback+0xac>)
 80053da:	801a      	strh	r2, [r3, #0]
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2bff      	cmp	r3, #255	@ 0xff
 80053e6:	dde1      	ble.n	80053ac <HAL_UART_RxCpltCallback+0x4c>
        }
	}


}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40013800 	.word	0x40013800
 80053f4:	20000eac 	.word	0x20000eac
 80053f8:	200004c8 	.word	0x200004c8
 80053fc:	20000c74 	.word	0x20000c74
 8005400:	200018bc 	.word	0x200018bc
 8005404:	20001aa4 	.word	0x20001aa4
 8005408:	40008000 	.word	0x40008000
 800540c:	200018b8 	.word	0x200018b8
 8005410:	200015b8 	.word	0x200015b8
 8005414:	200016b8 	.word	0x200016b8

08005418 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <HAL_UART_RxHalfCpltCallback+0x60>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d120      	bne.n	800546c <HAL_UART_RxHalfCpltCallback+0x54>
    {
        // Copier les 1ers 64 octets
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e01a      	b.n	8005466 <HAL_UART_RxHalfCpltCallback+0x4e>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8005430:	4b12      	ldr	r3, [pc, #72]	@ (800547c <HAL_UART_RxHalfCpltCallback+0x64>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	4619      	mov	r1, r3
 8005438:	4a11      	ldr	r2, [pc, #68]	@ (8005480 <HAL_UART_RxHalfCpltCallback+0x68>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8005442:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 8005444:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <HAL_UART_RxHalfCpltCallback+0x64>)
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	3301      	adds	r3, #1
 800544c:	425a      	negs	r2, r3
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005456:	bf58      	it	pl
 8005458:	4253      	negpl	r3, r2
 800545a:	b29a      	uxth	r2, r3
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <HAL_UART_RxHalfCpltCallback+0x64>)
 800545e:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b7f      	cmp	r3, #127	@ 0x7f
 800546a:	dde1      	ble.n	8005430 <HAL_UART_RxHalfCpltCallback+0x18>
        }
    }
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40008000 	.word	0x40008000
 800547c:	200018b8 	.word	0x200018b8
 8005480:	200015b8 	.word	0x200015b8
 8005484:	200016b8 	.word	0x200016b8

08005488 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a05      	ldr	r2, [pc, #20]	@ (80054ac <HAL_UART_TxCpltCallback+0x24>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d104      	bne.n	80054a4 <HAL_UART_TxCpltCallback+0x1c>
    {
        osSemaphoreRelease(uartTxDoneHandle);
 800549a:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_UART_TxCpltCallback+0x28>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f00c f830 	bl	8011504 <osSemaphoreRelease>
    }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40008000 	.word	0x40008000
 80054b0:	2000035c 	.word	0x2000035c

080054b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80054bc:	f000 fd2e 	bl	8005f1c <HAL_GetTick>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4a04      	ldr	r2, [pc, #16]	@ (80054d4 <SPI_Timer_On+0x20>)
 80054c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80054c6:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <SPI_Timer_On+0x24>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20001b08 	.word	0x20001b08
 80054d8:	20001b0c 	.word	0x20001b0c

080054dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80054e0:	f000 fd1c 	bl	8005f1c <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <SPI_Timer_Status+0x24>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <SPI_Timer_Status+0x28>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	bf34      	ite	cc
 80054f4:	2301      	movcc	r3, #1
 80054f6:	2300      	movcs	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20001b08 	.word	0x20001b08
 8005504:	20001b0c 	.word	0x20001b0c

08005508 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005512:	f107 020f 	add.w	r2, r7, #15
 8005516:	1df9      	adds	r1, r7, #7
 8005518:	2332      	movs	r3, #50	@ 0x32
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2301      	movs	r3, #1
 800551e:	4804      	ldr	r0, [pc, #16]	@ (8005530 <xchg_spi+0x28>)
 8005520:	f004 feb1 	bl	800a286 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000eb4 	.word	0x20000eb4

08005534 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e00a      	b.n	800555a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	18d4      	adds	r4, r2, r3
 800554a:	20ff      	movs	r0, #255	@ 0xff
 800554c:	f7ff ffdc 	bl	8005508 <xchg_spi>
 8005550:	4603      	mov	r3, r0
 8005552:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d3f0      	bcc.n	8005544 <rcvr_spi_multi+0x10>
	}
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e009      	b.n	8005590 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ffbf 	bl	8005508 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d3f1      	bcc.n	800557c <xmit_spi_multi+0x10>
	}
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80055aa:	f000 fcb7 	bl	8005f1c <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80055b4:	20ff      	movs	r0, #255	@ 0xff
 80055b6:	f7ff ffa7 	bl	8005508 <xchg_spi>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2bff      	cmp	r3, #255	@ 0xff
 80055c2:	d007      	beq.n	80055d4 <wait_ready+0x32>
 80055c4:	f000 fcaa 	bl	8005f1c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d8ef      	bhi.n	80055b4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2bff      	cmp	r3, #255	@ 0xff
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80055ec:	2201      	movs	r2, #1
 80055ee:	2110      	movs	r1, #16
 80055f0:	4803      	ldr	r0, [pc, #12]	@ (8005600 <despiselect+0x18>)
 80055f2:	f002 ff2f 	bl	8008454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80055f6:	20ff      	movs	r0, #255	@ 0xff
 80055f8:	f7ff ff86 	bl	8005508 <xchg_spi>

}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	48000800 	.word	0x48000800

08005604 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005608:	2200      	movs	r2, #0
 800560a:	2110      	movs	r1, #16
 800560c:	4809      	ldr	r0, [pc, #36]	@ (8005634 <spiselect+0x30>)
 800560e:	f002 ff21 	bl	8008454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005612:	20ff      	movs	r0, #255	@ 0xff
 8005614:	f7ff ff78 	bl	8005508 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005618:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800561c:	f7ff ffc1 	bl	80055a2 <wait_ready>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <spiselect+0x26>
 8005626:	2301      	movs	r3, #1
 8005628:	e002      	b.n	8005630 <spiselect+0x2c>

	despiselect();
 800562a:	f7ff ffdd 	bl	80055e8 <despiselect>
	return 0;	/* Timeout */
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	48000800 	.word	0x48000800

08005638 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005642:	20c8      	movs	r0, #200	@ 0xc8
 8005644:	f7ff ff36 	bl	80054b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005648:	20ff      	movs	r0, #255	@ 0xff
 800564a:	f7ff ff5d 	bl	8005508 <xchg_spi>
 800564e:	4603      	mov	r3, r0
 8005650:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2bff      	cmp	r3, #255	@ 0xff
 8005656:	d104      	bne.n	8005662 <rcvr_datablock+0x2a>
 8005658:	f7ff ff40 	bl	80054dc <SPI_Timer_Status>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f2      	bne.n	8005648 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2bfe      	cmp	r3, #254	@ 0xfe
 8005666:	d001      	beq.n	800566c <rcvr_datablock+0x34>
 8005668:	2300      	movs	r3, #0
 800566a:	e00a      	b.n	8005682 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ff60 	bl	8005534 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005674:	20ff      	movs	r0, #255	@ 0xff
 8005676:	f7ff ff47 	bl	8005508 <xchg_spi>
 800567a:	20ff      	movs	r0, #255	@ 0xff
 800567c:	f7ff ff44 	bl	8005508 <xchg_spi>

	return 1;						/* Function succeeded */
 8005680:	2301      	movs	r3, #1
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800569a:	f7ff ff82 	bl	80055a2 <wait_ready>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <xmit_datablock+0x1e>
 80056a4:	2300      	movs	r3, #0
 80056a6:	e01e      	b.n	80056e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff2c 	bl	8005508 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2bfd      	cmp	r3, #253	@ 0xfd
 80056b4:	d016      	beq.n	80056e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80056b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ff56 	bl	800556c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80056c0:	20ff      	movs	r0, #255	@ 0xff
 80056c2:	f7ff ff21 	bl	8005508 <xchg_spi>
 80056c6:	20ff      	movs	r0, #255	@ 0xff
 80056c8:	f7ff ff1e 	bl	8005508 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80056cc:	20ff      	movs	r0, #255	@ 0xff
 80056ce:	f7ff ff1b 	bl	8005508 <xchg_spi>
 80056d2:	4603      	mov	r3, r0
 80056d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d001      	beq.n	80056e4 <xmit_datablock+0x5a>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <xmit_datablock+0x5c>
	}
	return 1;
 80056e4:	2301      	movs	r3, #1
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	6039      	str	r1, [r7, #0]
 80056f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	da0e      	bge.n	8005720 <send_cmd+0x32>
		cmd &= 0x7F;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005708:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800570a:	2100      	movs	r1, #0
 800570c:	2037      	movs	r0, #55	@ 0x37
 800570e:	f7ff ffee 	bl	80056ee <send_cmd>
 8005712:	4603      	mov	r3, r0
 8005714:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d901      	bls.n	8005720 <send_cmd+0x32>
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	e051      	b.n	80057c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d008      	beq.n	8005738 <send_cmd+0x4a>
		despiselect();
 8005726:	f7ff ff5f 	bl	80055e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800572a:	f7ff ff6b 	bl	8005604 <spiselect>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <send_cmd+0x4a>
 8005734:	23ff      	movs	r3, #255	@ 0xff
 8005736:	e045      	b.n	80057c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fee1 	bl	8005508 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	0e1b      	lsrs	r3, r3, #24
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fedb 	bl	8005508 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	b2db      	uxtb	r3, r3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fed5 	bl	8005508 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fecf 	bl	8005508 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff feca 	bl	8005508 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <send_cmd+0x94>
 800577e:	2395      	movs	r3, #149	@ 0x95
 8005780:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d101      	bne.n	800578c <send_cmd+0x9e>
 8005788:	2387      	movs	r3, #135	@ 0x87
 800578a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff feba 	bl	8005508 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d102      	bne.n	80057a0 <send_cmd+0xb2>
 800579a:	20ff      	movs	r0, #255	@ 0xff
 800579c:	f7ff feb4 	bl	8005508 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80057a0:	230a      	movs	r3, #10
 80057a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80057a4:	20ff      	movs	r0, #255	@ 0xff
 80057a6:	f7ff feaf 	bl	8005508 <xchg_spi>
 80057aa:	4603      	mov	r3, r0
 80057ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80057ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da05      	bge.n	80057c2 <send_cmd+0xd4>
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <USER_SPI_initialize+0x14>
 80057dc:	2301      	movs	r3, #1
 80057de:	e0d6      	b.n	800598e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80057e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <USER_SPI_initialize+0x2a>
 80057ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e0cb      	b.n	800598e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80057f6:	4b69      	ldr	r3, [pc, #420]	@ (800599c <USER_SPI_initialize+0x1d0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005800:	4b66      	ldr	r3, [pc, #408]	@ (800599c <USER_SPI_initialize+0x1d0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005808:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800580a:	230a      	movs	r3, #10
 800580c:	73fb      	strb	r3, [r7, #15]
 800580e:	e005      	b.n	800581c <USER_SPI_initialize+0x50>
 8005810:	20ff      	movs	r0, #255	@ 0xff
 8005812:	f7ff fe79 	bl	8005508 <xchg_spi>
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	3b01      	subs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f6      	bne.n	8005810 <USER_SPI_initialize+0x44>

	ty = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005826:	2100      	movs	r1, #0
 8005828:	2000      	movs	r0, #0
 800582a:	f7ff ff60 	bl	80056ee <send_cmd>
 800582e:	4603      	mov	r3, r0
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 808b 	bne.w	800594c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005836:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800583a:	f7ff fe3b 	bl	80054b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800583e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005842:	2008      	movs	r0, #8
 8005844:	f7ff ff53 	bl	80056ee <send_cmd>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d151      	bne.n	80058f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e00d      	b.n	8005870 <USER_SPI_initialize+0xa4>
 8005854:	7bfc      	ldrb	r4, [r7, #15]
 8005856:	20ff      	movs	r0, #255	@ 0xff
 8005858:	f7ff fe56 	bl	8005508 <xchg_spi>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	f104 0310 	add.w	r3, r4, #16
 8005864:	443b      	add	r3, r7
 8005866:	f803 2c08 	strb.w	r2, [r3, #-8]
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3301      	adds	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b03      	cmp	r3, #3
 8005874:	d9ee      	bls.n	8005854 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005876:	7abb      	ldrb	r3, [r7, #10]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d167      	bne.n	800594c <USER_SPI_initialize+0x180>
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	2baa      	cmp	r3, #170	@ 0xaa
 8005880:	d164      	bne.n	800594c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005882:	bf00      	nop
 8005884:	f7ff fe2a 	bl	80054dc <SPI_Timer_Status>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <USER_SPI_initialize+0xd2>
 800588e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005892:	20a9      	movs	r0, #169	@ 0xa9
 8005894:	f7ff ff2b 	bl	80056ee <send_cmd>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f2      	bne.n	8005884 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800589e:	f7ff fe1d 	bl	80054dc <SPI_Timer_Status>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d051      	beq.n	800594c <USER_SPI_initialize+0x180>
 80058a8:	2100      	movs	r1, #0
 80058aa:	203a      	movs	r0, #58	@ 0x3a
 80058ac:	f7ff ff1f 	bl	80056ee <send_cmd>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d14a      	bne.n	800594c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
 80058ba:	e00d      	b.n	80058d8 <USER_SPI_initialize+0x10c>
 80058bc:	7bfc      	ldrb	r4, [r7, #15]
 80058be:	20ff      	movs	r0, #255	@ 0xff
 80058c0:	f7ff fe22 	bl	8005508 <xchg_spi>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	f104 0310 	add.w	r3, r4, #16
 80058cc:	443b      	add	r3, r7
 80058ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	3301      	adds	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d9ee      	bls.n	80058bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80058de:	7a3b      	ldrb	r3, [r7, #8]
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USER_SPI_initialize+0x120>
 80058e8:	230c      	movs	r3, #12
 80058ea:	e000      	b.n	80058ee <USER_SPI_initialize+0x122>
 80058ec:	2304      	movs	r3, #4
 80058ee:	737b      	strb	r3, [r7, #13]
 80058f0:	e02c      	b.n	800594c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80058f2:	2100      	movs	r1, #0
 80058f4:	20a9      	movs	r0, #169	@ 0xa9
 80058f6:	f7ff fefa 	bl	80056ee <send_cmd>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d804      	bhi.n	800590a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005900:	2302      	movs	r3, #2
 8005902:	737b      	strb	r3, [r7, #13]
 8005904:	23a9      	movs	r3, #169	@ 0xa9
 8005906:	73bb      	strb	r3, [r7, #14]
 8005908:	e003      	b.n	8005912 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800590a:	2301      	movs	r3, #1
 800590c:	737b      	strb	r3, [r7, #13]
 800590e:	2301      	movs	r3, #1
 8005910:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005912:	bf00      	nop
 8005914:	f7ff fde2 	bl	80054dc <SPI_Timer_Status>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <USER_SPI_initialize+0x162>
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fee3 	bl	80056ee <send_cmd>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f2      	bne.n	8005914 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800592e:	f7ff fdd5 	bl	80054dc <SPI_Timer_Status>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <USER_SPI_initialize+0x17c>
 8005938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800593c:	2010      	movs	r0, #16
 800593e:	f7ff fed6 	bl	80056ee <send_cmd>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <USER_SPI_initialize+0x180>
				ty = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800594c:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <USER_SPI_initialize+0x1d4>)
 800594e:	7b7b      	ldrb	r3, [r7, #13]
 8005950:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005952:	f7ff fe49 	bl	80055e8 <despiselect>

	if (ty) {			/* OK */
 8005956:	7b7b      	ldrb	r3, [r7, #13]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d012      	beq.n	8005982 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800595c:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <USER_SPI_initialize+0x1d0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <USER_SPI_initialize+0x1d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0210 	orr.w	r2, r2, #16
 800596e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005970:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e002      	b.n	8005988 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <USER_SPI_initialize+0x1cc>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	bd90      	pop	{r4, r7, pc}
 8005996:	bf00      	nop
 8005998:	20000024 	.word	0x20000024
 800599c:	20000eb4 	.word	0x20000eb4
 80059a0:	20001b04 	.word	0x20001b04

080059a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <USER_SPI_status+0x14>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e002      	b.n	80059be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <USER_SPI_status+0x28>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000024 	.word	0x20000024

080059d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d102      	bne.n	80059ec <USER_SPI_read+0x1c>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USER_SPI_read+0x20>
 80059ec:	2304      	movs	r3, #4
 80059ee:	e04d      	b.n	8005a8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80059f0:	4b28      	ldr	r3, [pc, #160]	@ (8005a94 <USER_SPI_read+0xc4>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <USER_SPI_read+0x32>
 80059fe:	2303      	movs	r3, #3
 8005a00:	e044      	b.n	8005a8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005a02:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <USER_SPI_read+0xc8>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <USER_SPI_read+0x44>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	025b      	lsls	r3, r3, #9
 8005a12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d111      	bne.n	8005a3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	2011      	movs	r0, #17
 8005a1e:	f7ff fe66 	bl	80056ee <send_cmd>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d129      	bne.n	8005a7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005a28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a2c:	68b8      	ldr	r0, [r7, #8]
 8005a2e:	f7ff fe03 	bl	8005638 <rcvr_datablock>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d021      	beq.n	8005a7c <USER_SPI_read+0xac>
			count = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	e01e      	b.n	8005a7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	2012      	movs	r0, #18
 8005a42:	f7ff fe54 	bl	80056ee <send_cmd>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d117      	bne.n	8005a7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a50:	68b8      	ldr	r0, [r7, #8]
 8005a52:	f7ff fdf1 	bl	8005638 <rcvr_datablock>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <USER_SPI_read+0xa2>
				buff += 512;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ed      	bne.n	8005a4c <USER_SPI_read+0x7c>
 8005a70:	e000      	b.n	8005a74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005a72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005a74:	2100      	movs	r1, #0
 8005a76:	200c      	movs	r0, #12
 8005a78:	f7ff fe39 	bl	80056ee <send_cmd>
		}
	}
	despiselect();
 8005a7c:	f7ff fdb4 	bl	80055e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000024 	.word	0x20000024
 8005a98:	20001b04 	.word	0x20001b04

08005a9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <USER_SPI_write+0x1c>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USER_SPI_write+0x20>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	e063      	b.n	8005b84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005abc:	4b33      	ldr	r3, [pc, #204]	@ (8005b8c <USER_SPI_write+0xf0>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <USER_SPI_write+0x32>
 8005aca:	2303      	movs	r3, #3
 8005acc:	e05a      	b.n	8005b84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005ace:	4b2f      	ldr	r3, [pc, #188]	@ (8005b8c <USER_SPI_write+0xf0>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USER_SPI_write+0x44>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e051      	b.n	8005b84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b90 <USER_SPI_write+0xf4>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <USER_SPI_write+0x56>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	025b      	lsls	r3, r3, #9
 8005af0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d110      	bne.n	8005b1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	2018      	movs	r0, #24
 8005afc:	f7ff fdf7 	bl	80056ee <send_cmd>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d136      	bne.n	8005b74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005b06:	21fe      	movs	r1, #254	@ 0xfe
 8005b08:	68b8      	ldr	r0, [r7, #8]
 8005b0a:	f7ff fdbe 	bl	800568a <xmit_datablock>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02f      	beq.n	8005b74 <USER_SPI_write+0xd8>
			count = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	e02c      	b.n	8005b74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b90 <USER_SPI_write+0xf4>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 0306 	and.w	r3, r3, #6
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <USER_SPI_write+0x92>
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	2097      	movs	r0, #151	@ 0x97
 8005b2a:	f7ff fde0 	bl	80056ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	2019      	movs	r0, #25
 8005b32:	f7ff fddc 	bl	80056ee <send_cmd>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11b      	bne.n	8005b74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005b3c:	21fc      	movs	r1, #252	@ 0xfc
 8005b3e:	68b8      	ldr	r0, [r7, #8]
 8005b40:	f7ff fda3 	bl	800568a <xmit_datablock>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <USER_SPI_write+0xc4>
				buff += 512;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005b50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ee      	bne.n	8005b3c <USER_SPI_write+0xa0>
 8005b5e:	e000      	b.n	8005b62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005b60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005b62:	21fd      	movs	r1, #253	@ 0xfd
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7ff fd90 	bl	800568a <xmit_datablock>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USER_SPI_write+0xd8>
 8005b70:	2301      	movs	r3, #1
 8005b72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005b74:	f7ff fd38 	bl	80055e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000024 	.word	0x20000024
 8005b90:	20001b04 	.word	0x20001b04

08005b94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	@ 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	603a      	str	r2, [r7, #0]
 8005b9e:	71fb      	strb	r3, [r7, #7]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <USER_SPI_ioctl+0x1a>
 8005baa:	2304      	movs	r3, #4
 8005bac:	e15a      	b.n	8005e64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005bae:	4baf      	ldr	r3, [pc, #700]	@ (8005e6c <USER_SPI_ioctl+0x2d8>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <USER_SPI_ioctl+0x2c>
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e151      	b.n	8005e64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005bc6:	79bb      	ldrb	r3, [r7, #6]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	f200 8136 	bhi.w	8005e3a <USER_SPI_ioctl+0x2a6>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <USER_SPI_ioctl+0x40>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005be9 	.word	0x08005be9
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005e3b 	.word	0x08005e3b
 8005be0:	08005ca9 	.word	0x08005ca9
 8005be4:	08005d9f 	.word	0x08005d9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005be8:	f7ff fd0c 	bl	8005604 <spiselect>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8127 	beq.w	8005e42 <USER_SPI_ioctl+0x2ae>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005bfa:	e122      	b.n	8005e42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	2009      	movs	r0, #9
 8005c00:	f7ff fd75 	bl	80056ee <send_cmd>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 811d 	bne.w	8005e46 <USER_SPI_ioctl+0x2b2>
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	2110      	movs	r1, #16
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff fd10 	bl	8005638 <rcvr_datablock>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8113 	beq.w	8005e46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005c20:	7b3b      	ldrb	r3, [r7, #12]
 8005c22:	099b      	lsrs	r3, r3, #6
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d111      	bne.n	8005c4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005c2a:	7d7b      	ldrb	r3, [r7, #21]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	7d3b      	ldrb	r3, [r7, #20]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	4413      	add	r3, r2
 8005c34:	461a      	mov	r2, r3
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005c3e:	4413      	add	r3, r2
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	029a      	lsls	r2, r3, #10
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e028      	b.n	8005ca0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005c4e:	7c7b      	ldrb	r3, [r7, #17]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
 8005c58:	09db      	lsrs	r3, r3, #7
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	7d7b      	ldrb	r3, [r7, #21]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 0306 	and.w	r3, r3, #6
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	3302      	adds	r3, #2
 8005c72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005c76:	7d3b      	ldrb	r3, [r7, #20]
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	7cfb      	ldrb	r3, [r7, #19]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	7cbb      	ldrb	r3, [r7, #18]
 8005c86:	029b      	lsls	r3, r3, #10
 8005c88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005c92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c96:	3b09      	subs	r3, #9
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005ca6:	e0ce      	b.n	8005e46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005ca8:	4b71      	ldr	r3, [pc, #452]	@ (8005e70 <USER_SPI_ioctl+0x2dc>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d031      	beq.n	8005d18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	208d      	movs	r0, #141	@ 0x8d
 8005cb8:	f7ff fd19 	bl	80056ee <send_cmd>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80c3 	bne.w	8005e4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005cc4:	20ff      	movs	r0, #255	@ 0xff
 8005cc6:	f7ff fc1f 	bl	8005508 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	2110      	movs	r1, #16
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fcb1 	bl	8005638 <rcvr_datablock>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80b6 	beq.w	8005e4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005cde:	2330      	movs	r3, #48	@ 0x30
 8005ce0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005ce4:	e007      	b.n	8005cf6 <USER_SPI_ioctl+0x162>
 8005ce6:	20ff      	movs	r0, #255	@ 0xff
 8005ce8:	f7ff fc0e 	bl	8005508 <xchg_spi>
 8005cec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005cf6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f3      	bne.n	8005ce6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005cfe:	7dbb      	ldrb	r3, [r7, #22]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	2310      	movs	r3, #16
 8005d08:	fa03 f202 	lsl.w	r2, r3, r2
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005d16:	e098      	b.n	8005e4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2009      	movs	r0, #9
 8005d1c:	f7ff fce7 	bl	80056ee <send_cmd>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 8091 	bne.w	8005e4a <USER_SPI_ioctl+0x2b6>
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	2110      	movs	r1, #16
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fc82 	bl	8005638 <rcvr_datablock>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8087 	beq.w	8005e4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e70 <USER_SPI_ioctl+0x2dc>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d012      	beq.n	8005d6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005d48:	7dbb      	ldrb	r3, [r7, #22]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005d50:	7dfa      	ldrb	r2, [r7, #23]
 8005d52:	09d2      	lsrs	r2, r2, #7
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	4413      	add	r3, r2
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	7e7b      	ldrb	r3, [r7, #25]
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e013      	b.n	8005d96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005d6e:	7dbb      	ldrb	r3, [r7, #22]
 8005d70:	109b      	asrs	r3, r3, #2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	3301      	adds	r3, #1
 8005d7a:	7dfa      	ldrb	r2, [r7, #23]
 8005d7c:	00d2      	lsls	r2, r2, #3
 8005d7e:	f002 0218 	and.w	r2, r2, #24
 8005d82:	7df9      	ldrb	r1, [r7, #23]
 8005d84:	0949      	lsrs	r1, r1, #5
 8005d86:	b2c9      	uxtb	r1, r1
 8005d88:	440a      	add	r2, r1
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005d9c:	e055      	b.n	8005e4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005d9e:	4b34      	ldr	r3, [pc, #208]	@ (8005e70 <USER_SPI_ioctl+0x2dc>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d051      	beq.n	8005e4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005daa:	f107 020c 	add.w	r2, r7, #12
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	210b      	movs	r1, #11
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff feee 	bl	8005b94 <USER_SPI_ioctl>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d149      	bne.n	8005e52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005dbe:	7b3b      	ldrb	r3, [r7, #12]
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USER_SPI_ioctl+0x23e>
 8005dc8:	7dbb      	ldrb	r3, [r7, #22]
 8005dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d041      	beq.n	8005e56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <USER_SPI_ioctl+0x2dc>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	025b      	lsls	r3, r3, #9
 8005df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	025b      	lsls	r3, r3, #9
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005dfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dfc:	2020      	movs	r0, #32
 8005dfe:	f7ff fc76 	bl	80056ee <send_cmd>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d128      	bne.n	8005e5a <USER_SPI_ioctl+0x2c6>
 8005e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e0a:	2021      	movs	r0, #33	@ 0x21
 8005e0c:	f7ff fc6f 	bl	80056ee <send_cmd>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d121      	bne.n	8005e5a <USER_SPI_ioctl+0x2c6>
 8005e16:	2100      	movs	r1, #0
 8005e18:	2026      	movs	r0, #38	@ 0x26
 8005e1a:	f7ff fc68 	bl	80056ee <send_cmd>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11a      	bne.n	8005e5a <USER_SPI_ioctl+0x2c6>
 8005e24:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005e28:	f7ff fbbb 	bl	80055a2 <wait_ready>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005e38:	e00f      	b.n	8005e5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005e40:	e00c      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		break;
 8005e42:	bf00      	nop
 8005e44:	e00a      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		break;
 8005e46:	bf00      	nop
 8005e48:	e008      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		break;
 8005e4a:	bf00      	nop
 8005e4c:	e006      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005e4e:	bf00      	nop
 8005e50:	e004      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005e52:	bf00      	nop
 8005e54:	e002      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <USER_SPI_ioctl+0x2c8>
		break;
 8005e5a:	bf00      	nop
	}

	despiselect();
 8005e5c:	f7ff fbc4 	bl	80055e8 <despiselect>

	return res;
 8005e60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3730      	adds	r7, #48	@ 0x30
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000024 	.word	0x20000024
 8005e70:	20001b04 	.word	0x20001b04

08005e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e74:	480d      	ldr	r0, [pc, #52]	@ (8005eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e78:	f7fe fb84 	bl	8004584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e7c:	480c      	ldr	r0, [pc, #48]	@ (8005eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e7e:	490d      	ldr	r1, [pc, #52]	@ (8005eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e80:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb8 <LoopForever+0xe>)
  movs r3, #0
 8005e82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e84:	e002      	b.n	8005e8c <LoopCopyDataInit>

08005e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8a:	3304      	adds	r3, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e90:	d3f9      	bcc.n	8005e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e92:	4a0a      	ldr	r2, [pc, #40]	@ (8005ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e94:	4c0a      	ldr	r4, [pc, #40]	@ (8005ec0 <LoopForever+0x16>)
  movs r3, #0
 8005e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e98:	e001      	b.n	8005e9e <LoopFillZerobss>

08005e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e9c:	3204      	adds	r2, #4

08005e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea0:	d3fb      	bcc.n	8005e9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005ea2:	f00e ff71 	bl	8014d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ea6:	f7fc fff1 	bl	8002e8c <main>

08005eaa <LoopForever>:

LoopForever:
    b LoopForever
 8005eaa:	e7fe      	b.n	8005eaa <LoopForever>
  ldr   r0, =_estack
 8005eac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eb4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8005eb8:	0801b384 	.word	0x0801b384
  ldr r2, =_sbss
 8005ebc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005ec0:	20004d10 	.word	0x20004d10

08005ec4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ec4:	e7fe      	b.n	8005ec4 <COMP1_2_3_IRQHandler>

08005ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f001 fdb4 	bl	8007a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ed6:	200f      	movs	r0, #15
 8005ed8:	f7fe f932 	bl	8004140 <HAL_InitTick>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	71fb      	strb	r3, [r7, #7]
 8005ee6:	e001      	b.n	8005eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ee8:	f7fe f900 	bl	80040ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005eec:	79fb      	ldrb	r3, [r7, #7]

}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_IncTick+0x1c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_IncTick+0x20>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4413      	add	r3, r2
 8005f06:	4a03      	ldr	r2, [pc, #12]	@ (8005f14 <HAL_IncTick+0x1c>)
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20001b10 	.word	0x20001b10
 8005f18:	2000002c 	.word	0x2000002c

08005f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <HAL_GetTick+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20001b10 	.word	0x20001b10

08005f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f3c:	f7ff ffee 	bl	8005f1c <HAL_GetTick>
 8005f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d004      	beq.n	8005f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f4e:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <HAL_Delay+0x40>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f58:	bf00      	nop
 8005f5a:	f7ff ffdf 	bl	8005f1c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d8f7      	bhi.n	8005f5a <HAL_Delay+0x26>
  {
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000002c 	.word	0x2000002c

08005f78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	609a      	str	r2, [r3, #8]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3360      	adds	r3, #96	@ 0x60
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <LL_ADC_SetOffset+0x44>)
 8006002:	4013      	ands	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	4313      	orrs	r3, r2
 8006010:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	03fff000 	.word	0x03fff000

08006028 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3360      	adds	r3, #96	@ 0x60
 8006036:	461a      	mov	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3360      	adds	r3, #96	@ 0x60
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	431a      	orrs	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3360      	adds	r3, #96	@ 0x60
 800609a:	461a      	mov	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3360      	adds	r3, #96	@ 0x60
 80060d0:	461a      	mov	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	615a      	str	r2, [r3, #20]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3330      	adds	r3, #48	@ 0x30
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	0a1b      	lsrs	r3, r3, #8
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	4413      	add	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	211f      	movs	r1, #31
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	401a      	ands	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0e9b      	lsrs	r3, r3, #26
 800617a:	f003 011f 	and.w	r1, r3, #31
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	431a      	orrs	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3314      	adds	r3, #20
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0e5b      	lsrs	r3, r3, #25
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	4413      	add	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0d1b      	lsrs	r3, r3, #20
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2107      	movs	r1, #7
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	401a      	ands	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0d1b      	lsrs	r3, r3, #20
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	431a      	orrs	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f003 0318 	and.w	r3, r3, #24
 800623a:	4908      	ldr	r1, [pc, #32]	@ (800625c <LL_ADC_SetChannelSingleDiff+0x44>)
 800623c:	40d9      	lsrs	r1, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	400b      	ands	r3, r1
 8006242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006246:	431a      	orrs	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	0007ffff 	.word	0x0007ffff

08006260 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 031f 	and.w	r3, r3, #31
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80062a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6093      	str	r3, [r2, #8]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d0:	d101      	bne.n	80062d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80062f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006320:	d101      	bne.n	8006326 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <LL_ADC_IsEnabled+0x18>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <LL_ADC_IsEnabled+0x1a>
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006392:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d101      	bne.n	80063c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d101      	bne.n	80063e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063f8:	b590      	push	{r4, r7, lr}
 80063fa:	b089      	sub	sp, #36	@ 0x24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e167      	b.n	80066e2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fb fa6d 	bl	8001900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff ff3f 	bl	80062bc <LL_ADC_IsDeepPowerDownEnabled>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ff25 	bl	8006298 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff5a 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d115      	bne.n	800648a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff ff3e 	bl	80062e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006468:	4ba0      	ldr	r3, [pc, #640]	@ (80066ec <HAL_ADC_Init+0x2f4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	4aa0      	ldr	r2, [pc, #640]	@ (80066f0 <HAL_ADC_Init+0x2f8>)
 8006470:	fba2 2303 	umull	r2, r3, r2, r3
 8006474:	099b      	lsrs	r3, r3, #6
 8006476:	3301      	adds	r3, #1
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800647c:	e002      	b.n	8006484 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b01      	subs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f9      	bne.n	800647e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ff3c 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10d      	bne.n	80064b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	f043 0210 	orr.w	r2, r3, #16
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff75 	bl	80063aa <LL_ADC_REG_IsConversionOngoing>
 80064c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 8100 	bne.w	80066d0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 80fc 	bne.w	80066d0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80064e0:	f043 0202 	orr.w	r2, r3, #2
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff ff35 	bl	800635c <LL_ADC_IsEnabled>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d111      	bne.n	800651c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80064fc:	f7ff ff2e 	bl	800635c <LL_ADC_IsEnabled>
 8006500:	4604      	mov	r4, r0
 8006502:	487c      	ldr	r0, [pc, #496]	@ (80066f4 <HAL_ADC_Init+0x2fc>)
 8006504:	f7ff ff2a 	bl	800635c <LL_ADC_IsEnabled>
 8006508:	4603      	mov	r3, r0
 800650a:	4323      	orrs	r3, r4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4619      	mov	r1, r3
 8006516:	4878      	ldr	r0, [pc, #480]	@ (80066f8 <HAL_ADC_Init+0x300>)
 8006518:	f7ff fd2e 	bl	8005f78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7f5b      	ldrb	r3, [r3, #29]
 8006520:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006526:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800652c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006532:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800653a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006546:	2b01      	cmp	r3, #1
 8006548:	d106      	bne.n	8006558 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	3b01      	subs	r3, #1
 8006550:	045b      	lsls	r3, r3, #17
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4313      	orrs	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	4b60      	ldr	r3, [pc, #384]	@ (80066fc <HAL_ADC_Init+0x304>)
 800657c:	4013      	ands	r3, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	430b      	orrs	r3, r1
 8006586:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff ff14 	bl	80063d0 <LL_ADC_INJ_IsConversionOngoing>
 80065a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d16d      	bne.n	800668c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d16a      	bne.n	800668c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80065ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d2:	f023 0302 	bic.w	r3, r3, #2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	69b9      	ldr	r1, [r7, #24]
 80065dc:	430b      	orrs	r3, r1
 80065de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d017      	beq.n	8006618 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80065f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006600:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006604:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6911      	ldr	r1, [r2, #16]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006616:	e013      	b.n	8006640 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006626:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800663c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d118      	bne.n	800667c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006660:	4311      	orrs	r1, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006666:	4311      	orrs	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800666c:	430a      	orrs	r2, r1
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	611a      	str	r2, [r3, #16]
 800667a:	e007      	b.n	800668c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d10c      	bne.n	80066ae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	f023 010f 	bic.w	r1, r3, #15
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ac:	e007      	b.n	80066be <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 020f 	bic.w	r2, r2, #15
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	f043 0201 	orr.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066ce:	e007      	b.n	80066e0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3724      	adds	r7, #36	@ 0x24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000020 	.word	0x20000020
 80066f0:	053e2d63 	.word	0x053e2d63
 80066f4:	50000100 	.word	0x50000100
 80066f8:	50000300 	.word	0x50000300
 80066fc:	fff04007 	.word	0xfff04007

08006700 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800670c:	4851      	ldr	r0, [pc, #324]	@ (8006854 <HAL_ADC_Start_DMA+0x154>)
 800670e:	f7ff fda7 	bl	8006260 <LL_ADC_GetMultimode>
 8006712:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fe46 	bl	80063aa <LL_ADC_REG_IsConversionOngoing>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	f040 808f 	bne.w	8006844 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_ADC_Start_DMA+0x34>
 8006730:	2302      	movs	r3, #2
 8006732:	e08a      	b.n	800684a <HAL_ADC_Start_DMA+0x14a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b05      	cmp	r3, #5
 8006746:	d002      	beq.n	800674e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b09      	cmp	r3, #9
 800674c:	d173      	bne.n	8006836 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 feb2 	bl	80074b8 <ADC_Enable>
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d166      	bne.n	800682c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006762:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a38      	ldr	r2, [pc, #224]	@ (8006858 <HAL_ADC_Start_DMA+0x158>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d002      	beq.n	8006782 <HAL_ADC_Start_DMA+0x82>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	e001      	b.n	8006786 <HAL_ADC_Start_DMA+0x86>
 8006782:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	4293      	cmp	r3, r2
 800678c:	d002      	beq.n	8006794 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b0:	f023 0206 	bic.w	r2, r3, #6
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80067b8:	e002      	b.n	80067c0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	4a25      	ldr	r2, [pc, #148]	@ (800685c <HAL_ADC_Start_DMA+0x15c>)
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	4a24      	ldr	r2, [pc, #144]	@ (8006860 <HAL_ADC_Start_DMA+0x160>)
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d4:	4a23      	ldr	r2, [pc, #140]	@ (8006864 <HAL_ADC_Start_DMA+0x164>)
 80067d6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	221c      	movs	r2, #28
 80067de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0210 	orr.w	r2, r2, #16
 80067f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3340      	adds	r3, #64	@ 0x40
 8006812:	4619      	mov	r1, r3
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f001 f9ec 	bl	8007bf4 <HAL_DMA_Start_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fdac 	bl	8006382 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800682a:	e00d      	b.n	8006848 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006834:	e008      	b.n	8006848 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006842:	e001      	b.n	8006848 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006844:	2302      	movs	r3, #2
 8006846:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	50000300 	.word	0x50000300
 8006858:	50000100 	.word	0x50000100
 800685c:	080075c5 	.word	0x080075c5
 8006860:	0800769d 	.word	0x0800769d
 8006864:	080076b9 	.word	0x080076b9

08006868 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	@ 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006884:	4883      	ldr	r0, [pc, #524]	@ (8006a94 <HAL_ADC_IRQHandler+0x22c>)
 8006886:	f7ff fceb 	bl	8006260 <LL_ADC_GetMultimode>
 800688a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d017      	beq.n	80068c6 <HAL_ADC_IRQHandler+0x5e>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d012      	beq.n	80068c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 ff65 	bl	8007788 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2202      	movs	r2, #2
 80068c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_ADC_IRQHandler+0x72>
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8085 	beq.w	80069f0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d07f      	beq.n	80069f0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006900:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fc05 	bl	800611c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d064      	beq.n	80069e2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5e      	ldr	r2, [pc, #376]	@ (8006a98 <HAL_ADC_IRQHandler+0x230>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d002      	beq.n	8006928 <HAL_ADC_IRQHandler+0xc0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	e001      	b.n	800692c <HAL_ADC_IRQHandler+0xc4>
 8006928:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	4293      	cmp	r3, r2
 8006932:	d008      	beq.n	8006946 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b05      	cmp	r3, #5
 800693e:	d002      	beq.n	8006946 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b09      	cmp	r3, #9
 8006944:	d104      	bne.n	8006950 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e00d      	b.n	800696c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a50      	ldr	r2, [pc, #320]	@ (8006a98 <HAL_ADC_IRQHandler+0x230>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d002      	beq.n	8006960 <HAL_ADC_IRQHandler+0xf8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	e001      	b.n	8006964 <HAL_ADC_IRQHandler+0xfc>
 8006960:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006964:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d135      	bne.n	80069e2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d12e      	bne.n	80069e2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fd0e 	bl	80063aa <LL_ADC_REG_IsConversionOngoing>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 020c 	bic.w	r2, r2, #12
 80069a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d112      	bne.n	80069e2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c0:	f043 0201 	orr.w	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80069c8:	e00b      	b.n	80069e2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ce:	f043 0210 	orr.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069da:	f043 0201 	orr.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fb f818 	bl	8001a18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	220c      	movs	r2, #12
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_ADC_IRQHandler+0x19c>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10b      	bne.n	8006a1c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 809e 	beq.w	8006b4c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8098 	beq.w	8006b4c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fbae 	bl	800619a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006a3e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fb69 	bl	800611c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a4a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a11      	ldr	r2, [pc, #68]	@ (8006a98 <HAL_ADC_IRQHandler+0x230>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d002      	beq.n	8006a5c <HAL_ADC_IRQHandler+0x1f4>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	e001      	b.n	8006a60 <HAL_ADC_IRQHandler+0x1f8>
 8006a5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d008      	beq.n	8006a7a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b06      	cmp	r3, #6
 8006a72:	d002      	beq.n	8006a7a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b07      	cmp	r3, #7
 8006a78:	d104      	bne.n	8006a84 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	623b      	str	r3, [r7, #32]
 8006a82:	e011      	b.n	8006aa8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a03      	ldr	r2, [pc, #12]	@ (8006a98 <HAL_ADC_IRQHandler+0x230>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d006      	beq.n	8006a9c <HAL_ADC_IRQHandler+0x234>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	e005      	b.n	8006aa0 <HAL_ADC_IRQHandler+0x238>
 8006a94:	50000300 	.word	0x50000300
 8006a98:	50000100 	.word	0x50000100
 8006a9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006aa0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d047      	beq.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <HAL_ADC_IRQHandler+0x260>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d03f      	beq.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d13a      	bne.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad2:	2b40      	cmp	r3, #64	@ 0x40
 8006ad4:	d133      	bne.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d12e      	bne.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fc73 	bl	80063d0 <LL_ADC_INJ_IsConversionOngoing>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11a      	bne.n	8006b26 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006afe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d112      	bne.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	f043 0201 	orr.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b24:	e00b      	b.n	8006b3e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2a:	f043 0210 	orr.w	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b36:	f043 0201 	orr.w	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fdfa 	bl	8007738 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2260      	movs	r2, #96	@ 0x60
 8006b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <HAL_ADC_IRQHandler+0x312>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f89f 	bl	8006cb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2280      	movs	r2, #128	@ 0x80
 8006b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d012      	beq.n	8006baa <HAL_ADC_IRQHandler+0x342>
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fde0 	bl	8007760 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ba8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d012      	beq.n	8006bda <HAL_ADC_IRQHandler+0x372>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fdd2 	bl	8007774 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d036      	beq.n	8006c52 <HAL_ADC_IRQHandler+0x3ea>
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d031      	beq.n	8006c52 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d102      	bne.n	8006bfc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfa:	e014      	b.n	8006c26 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006c02:	4825      	ldr	r0, [pc, #148]	@ (8006c98 <HAL_ADC_IRQHandler+0x430>)
 8006c04:	f7ff fb3a 	bl	800627c <LL_ADC_GetMultiDMATransfer>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c12:	e008      	b.n	8006c26 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006c22:	2301      	movs	r3, #1
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10e      	bne.n	8006c4a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c30:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3c:	f043 0202 	orr.w	r2, r3, #2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f83d 	bl	8006cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d018      	beq.n	8006c8e <HAL_ADC_IRQHandler+0x426>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d013      	beq.n	8006c8e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c76:	f043 0208 	orr.w	r2, r3, #8
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fd5f 	bl	800774c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006c8e:	bf00      	nop
 8006c90:	3728      	adds	r7, #40	@ 0x28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	50000300 	.word	0x50000300

08006c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b0b6      	sub	sp, #216	@ 0xd8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_ADC_ConfigChannel+0x22>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e3c8      	b.n	800748c <HAL_ADC_ConfigChannel+0x7b4>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fb4f 	bl	80063aa <LL_ADC_REG_IsConversionOngoing>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 83ad 	bne.w	800746e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6859      	ldr	r1, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	f7ff fa0e 	bl	8006142 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fb3d 	bl	80063aa <LL_ADC_REG_IsConversionOngoing>
 8006d30:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fb49 	bl	80063d0 <LL_ADC_INJ_IsConversionOngoing>
 8006d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f040 81d9 	bne.w	80070fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 81d4 	bne.w	80070fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d5e:	d10f      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f7ff fa28 	bl	80061c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff f9bc 	bl	80060f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006d7e:	e00e      	b.n	8006d9e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6819      	ldr	r1, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f7ff fa17 	bl	80061c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff f9ac 	bl	80060f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	08db      	lsrs	r3, r3, #3
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d022      	beq.n	8006e06 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6919      	ldr	r1, [r3, #16]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dd0:	f7ff f906 	bl	8005fe0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6919      	ldr	r1, [r3, #16]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f7ff f952 	bl	800608a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d102      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x124>
 8006df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dfa:	e000      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x126>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7ff f95e 	bl	80060c0 <LL_ADC_SetOffsetSaturation>
 8006e04:	e17b      	b.n	80070fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff f90b 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <HAL_ADC_ConfigChannel+0x15a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2100      	movs	r1, #0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff f900 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	0e9b      	lsrs	r3, r3, #26
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	e01e      	b.n	8006e70 <HAL_ADC_ConfigChannel+0x198>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff f8f5 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e48:	fa93 f3a3 	rbit	r3, r3
 8006e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006e60:	2320      	movs	r3, #32
 8006e62:	e004      	b.n	8006e6e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e68:	fab3 f383 	clz	r3, r3
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <HAL_ADC_ConfigChannel+0x1b0>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0e9b      	lsrs	r3, r3, #26
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	e018      	b.n	8006eba <HAL_ADC_ConfigChannel+0x1e2>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e94:	fa93 f3a3 	rbit	r3, r3
 8006e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006eac:	2320      	movs	r3, #32
 8006eae:	e004      	b.n	8006eba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006eb4:	fab3 f383 	clz	r3, r3
 8006eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d106      	bne.n	8006ecc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f8c4 	bl	8006054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff f8a8 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_ADC_ConfigChannel+0x220>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff f89d 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	0e9b      	lsrs	r3, r3, #26
 8006ef2:	f003 021f 	and.w	r2, r3, #31
 8006ef6:	e01e      	b.n	8006f36 <HAL_ADC_ConfigChannel+0x25e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2101      	movs	r1, #1
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff f892 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f0e:	fa93 f3a3 	rbit	r3, r3
 8006f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006f26:	2320      	movs	r3, #32
 8006f28:	e004      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f2e:	fab3 f383 	clz	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d105      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x276>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	0e9b      	lsrs	r3, r3, #26
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	e018      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x2a8>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f5a:	fa93 f3a3 	rbit	r3, r3
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006f72:	2320      	movs	r3, #32
 8006f74:	e004      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d106      	bne.n	8006f92 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff f861 	bl	8006054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff f845 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <HAL_ADC_ConfigChannel+0x2e6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2102      	movs	r1, #2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff f83a 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	0e9b      	lsrs	r3, r3, #26
 8006fb8:	f003 021f 	and.w	r2, r3, #31
 8006fbc:	e01e      	b.n	8006ffc <HAL_ADC_ConfigChannel+0x324>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff f82f 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fd4:	fa93 f3a3 	rbit	r3, r3
 8006fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006fec:	2320      	movs	r3, #32
 8006fee:	e004      	b.n	8006ffa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ff4:	fab3 f383 	clz	r3, r3
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x33c>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	0e9b      	lsrs	r3, r3, #26
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	e016      	b.n	8007042 <HAL_ADC_ConfigChannel+0x36a>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007020:	fa93 f3a3 	rbit	r3, r3
 8007024:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800702c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007034:	2320      	movs	r3, #32
 8007036:	e004      	b.n	8007042 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800703c:	fab3 f383 	clz	r3, r3
 8007040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007042:	429a      	cmp	r2, r3
 8007044:	d106      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff f800 	bl	8006054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2103      	movs	r1, #3
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe ffe4 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8007060:	4603      	mov	r3, r0
 8007062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_ADC_ConfigChannel+0x3a8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2103      	movs	r1, #3
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe ffd9 	bl	8006028 <LL_ADC_GetOffsetChannel>
 8007076:	4603      	mov	r3, r0
 8007078:	0e9b      	lsrs	r3, r3, #26
 800707a:	f003 021f 	and.w	r2, r3, #31
 800707e:	e017      	b.n	80070b0 <HAL_ADC_ConfigChannel+0x3d8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2103      	movs	r1, #3
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe ffce 	bl	8006028 <LL_ADC_GetOffsetChannel>
 800708c:	4603      	mov	r3, r0
 800708e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007092:	fa93 f3a3 	rbit	r3, r3
 8007096:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800709a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800709c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80070a2:	2320      	movs	r3, #32
 80070a4:	e003      	b.n	80070ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80070a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070a8:	fab3 f383 	clz	r3, r3
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d105      	bne.n	80070c8 <HAL_ADC_ConfigChannel+0x3f0>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	0e9b      	lsrs	r3, r3, #26
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	e011      	b.n	80070ec <HAL_ADC_ConfigChannel+0x414>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d0:	fa93 f3a3 	rbit	r3, r3
 80070d4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80070d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80070da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80070e0:	2320      	movs	r3, #32
 80070e2:	e003      	b.n	80070ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80070e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e6:	fab3 f383 	clz	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d106      	bne.n	80070fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2103      	movs	r1, #3
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe ffab 	bl	8006054 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff f92a 	bl	800635c <LL_ADC_IsEnabled>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 8140 	bne.w	8007390 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6819      	ldr	r1, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	461a      	mov	r2, r3
 800711e:	f7ff f87b 	bl	8006218 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	4a8f      	ldr	r2, [pc, #572]	@ (8007364 <HAL_ADC_ConfigChannel+0x68c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	f040 8131 	bne.w	8007390 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_ADC_ConfigChannel+0x47e>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	0e9b      	lsrs	r3, r3, #26
 8007144:	3301      	adds	r3, #1
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	2b09      	cmp	r3, #9
 800714c:	bf94      	ite	ls
 800714e:	2301      	movls	r3, #1
 8007150:	2300      	movhi	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e019      	b.n	800718a <HAL_ADC_ConfigChannel+0x4b2>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800715e:	fa93 f3a3 	rbit	r3, r3
 8007162:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007166:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800716e:	2320      	movs	r3, #32
 8007170:	e003      	b.n	800717a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8007172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007174:	fab3 f383 	clz	r3, r3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	3301      	adds	r3, #1
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b09      	cmp	r3, #9
 8007182:	bf94      	ite	ls
 8007184:	2301      	movls	r3, #1
 8007186:	2300      	movhi	r3, #0
 8007188:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800718a:	2b00      	cmp	r3, #0
 800718c:	d079      	beq.n	8007282 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x4d2>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	0e9b      	lsrs	r3, r3, #26
 80071a0:	3301      	adds	r3, #1
 80071a2:	069b      	lsls	r3, r3, #26
 80071a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071a8:	e015      	b.n	80071d6 <HAL_ADC_ConfigChannel+0x4fe>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b2:	fa93 f3a3 	rbit	r3, r3
 80071b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80071b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80071bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80071c2:	2320      	movs	r3, #32
 80071c4:	e003      	b.n	80071ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80071c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c8:	fab3 f383 	clz	r3, r3
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	3301      	adds	r3, #1
 80071d0:	069b      	lsls	r3, r3, #26
 80071d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d109      	bne.n	80071f6 <HAL_ADC_ConfigChannel+0x51e>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	0e9b      	lsrs	r3, r3, #26
 80071e8:	3301      	adds	r3, #1
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2101      	movs	r1, #1
 80071f0:	fa01 f303 	lsl.w	r3, r1, r3
 80071f4:	e017      	b.n	8007226 <HAL_ADC_ConfigChannel+0x54e>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fe:	fa93 f3a3 	rbit	r3, r3
 8007202:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007206:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800720e:	2320      	movs	r3, #32
 8007210:	e003      	b.n	800721a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007214:	fab3 f383 	clz	r3, r3
 8007218:	b2db      	uxtb	r3, r3
 800721a:	3301      	adds	r3, #1
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2101      	movs	r1, #1
 8007222:	fa01 f303 	lsl.w	r3, r1, r3
 8007226:	ea42 0103 	orr.w	r1, r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <HAL_ADC_ConfigChannel+0x574>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	0e9b      	lsrs	r3, r3, #26
 800723c:	3301      	adds	r3, #1
 800723e:	f003 021f 	and.w	r2, r3, #31
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	051b      	lsls	r3, r3, #20
 800724a:	e018      	b.n	800727e <HAL_ADC_ConfigChannel+0x5a6>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	fa93 f3a3 	rbit	r3, r3
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800725a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800725e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007264:	2320      	movs	r3, #32
 8007266:	e003      	b.n	8007270 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800726a:	fab3 f383 	clz	r3, r3
 800726e:	b2db      	uxtb	r3, r3
 8007270:	3301      	adds	r3, #1
 8007272:	f003 021f 	and.w	r2, r3, #31
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800727e:	430b      	orrs	r3, r1
 8007280:	e081      	b.n	8007386 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728a:	2b00      	cmp	r3, #0
 800728c:	d107      	bne.n	800729e <HAL_ADC_ConfigChannel+0x5c6>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	0e9b      	lsrs	r3, r3, #26
 8007294:	3301      	adds	r3, #1
 8007296:	069b      	lsls	r3, r3, #26
 8007298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800729c:	e015      	b.n	80072ca <HAL_ADC_ConfigChannel+0x5f2>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80072b6:	2320      	movs	r3, #32
 80072b8:	e003      	b.n	80072c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	fab3 f383 	clz	r3, r3
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3301      	adds	r3, #1
 80072c4:	069b      	lsls	r3, r3, #26
 80072c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <HAL_ADC_ConfigChannel+0x612>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	0e9b      	lsrs	r3, r3, #26
 80072dc:	3301      	adds	r3, #1
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2101      	movs	r1, #1
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	e017      	b.n	800731a <HAL_ADC_ConfigChannel+0x642>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	fa93 f3a3 	rbit	r3, r3
 80072f6:	61fb      	str	r3, [r7, #28]
  return result;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007302:	2320      	movs	r3, #32
 8007304:	e003      	b.n	800730e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	fab3 f383 	clz	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	3301      	adds	r3, #1
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2101      	movs	r1, #1
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	ea42 0103 	orr.w	r1, r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <HAL_ADC_ConfigChannel+0x66e>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	0e9b      	lsrs	r3, r3, #26
 8007330:	3301      	adds	r3, #1
 8007332:	f003 021f 	and.w	r2, r3, #31
 8007336:	4613      	mov	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	3b1e      	subs	r3, #30
 800733e:	051b      	lsls	r3, r3, #20
 8007340:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007344:	e01e      	b.n	8007384 <HAL_ADC_ConfigChannel+0x6ac>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	fa93 f3a3 	rbit	r3, r3
 8007352:	613b      	str	r3, [r7, #16]
  return result;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800735e:	2320      	movs	r3, #32
 8007360:	e006      	b.n	8007370 <HAL_ADC_ConfigChannel+0x698>
 8007362:	bf00      	nop
 8007364:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
 8007370:	3301      	adds	r3, #1
 8007372:	f003 021f 	and.w	r2, r3, #31
 8007376:	4613      	mov	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4413      	add	r3, r2
 800737c:	3b1e      	subs	r3, #30
 800737e:	051b      	lsls	r3, r3, #20
 8007380:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007384:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800738a:	4619      	mov	r1, r3
 800738c:	f7fe ff18 	bl	80061c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <HAL_ADC_ConfigChannel+0x7bc>)
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d071      	beq.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800739c:	483e      	ldr	r0, [pc, #248]	@ (8007498 <HAL_ADC_ConfigChannel+0x7c0>)
 800739e:	f7fe fe11 	bl	8005fc4 <LL_ADC_GetCommonPathInternalCh>
 80073a2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3c      	ldr	r2, [pc, #240]	@ (800749c <HAL_ADC_ConfigChannel+0x7c4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_ADC_ConfigChannel+0x6e2>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a3a      	ldr	r2, [pc, #232]	@ (80074a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d127      	bne.n	800740a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80073ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d121      	bne.n	800740a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ce:	d157      	bne.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073d8:	4619      	mov	r1, r3
 80073da:	482f      	ldr	r0, [pc, #188]	@ (8007498 <HAL_ADC_ConfigChannel+0x7c0>)
 80073dc:	f7fe fddf 	bl	8005f9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073e0:	4b30      	ldr	r3, [pc, #192]	@ (80074a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	099b      	lsrs	r3, r3, #6
 80073e6:	4a30      	ldr	r2, [pc, #192]	@ (80074a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	4613      	mov	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80073fa:	e002      	b.n	8007402 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f9      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007408:	e03a      	b.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a27      	ldr	r2, [pc, #156]	@ (80074ac <HAL_ADC_ConfigChannel+0x7d4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d113      	bne.n	800743c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a22      	ldr	r2, [pc, #136]	@ (80074b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02a      	beq.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800742a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800742e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007432:	4619      	mov	r1, r3
 8007434:	4818      	ldr	r0, [pc, #96]	@ (8007498 <HAL_ADC_ConfigChannel+0x7c0>)
 8007436:	f7fe fdb2 	bl	8005f9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800743a:	e021      	b.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1c      	ldr	r2, [pc, #112]	@ (80074b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d11c      	bne.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800744a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d116      	bne.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a16      	ldr	r2, [pc, #88]	@ (80074b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d011      	beq.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800745c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007464:	4619      	mov	r1, r3
 8007466:	480c      	ldr	r0, [pc, #48]	@ (8007498 <HAL_ADC_ConfigChannel+0x7c0>)
 8007468:	f7fe fd99 	bl	8005f9e <LL_ADC_SetCommonPathInternalCh>
 800746c:	e008      	b.n	8007480 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007488:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800748c:	4618      	mov	r0, r3
 800748e:	37d8      	adds	r7, #216	@ 0xd8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	80080000 	.word	0x80080000
 8007498:	50000300 	.word	0x50000300
 800749c:	c3210000 	.word	0xc3210000
 80074a0:	90c00010 	.word	0x90c00010
 80074a4:	20000020 	.word	0x20000020
 80074a8:	053e2d63 	.word	0x053e2d63
 80074ac:	c7520000 	.word	0xc7520000
 80074b0:	50000100 	.word	0x50000100
 80074b4:	cb840000 	.word	0xcb840000

080074b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe ff47 	bl	800635c <LL_ADC_IsEnabled>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d169      	bne.n	80075a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	4b36      	ldr	r3, [pc, #216]	@ (80075b4 <ADC_Enable+0xfc>)
 80074dc:	4013      	ands	r3, r2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e6:	f043 0210 	orr.w	r2, r3, #16
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f2:	f043 0201 	orr.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e055      	b.n	80075aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe ff16 	bl	8006334 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007508:	482b      	ldr	r0, [pc, #172]	@ (80075b8 <ADC_Enable+0x100>)
 800750a:	f7fe fd5b 	bl	8005fc4 <LL_ADC_GetCommonPathInternalCh>
 800750e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007514:	2b00      	cmp	r3, #0
 8007516:	d013      	beq.n	8007540 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007518:	4b28      	ldr	r3, [pc, #160]	@ (80075bc <ADC_Enable+0x104>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	4a28      	ldr	r2, [pc, #160]	@ (80075c0 <ADC_Enable+0x108>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	099b      	lsrs	r3, r3, #6
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007532:	e002      	b.n	800753a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	3b01      	subs	r3, #1
 8007538:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f9      	bne.n	8007534 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007540:	f7fe fcec 	bl	8005f1c <HAL_GetTick>
 8007544:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007546:	e028      	b.n	800759a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe ff05 	bl	800635c <LL_ADC_IsEnabled>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fee9 	bl	8006334 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007562:	f7fe fcdb 	bl	8005f1c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d914      	bls.n	800759a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d00d      	beq.n	800759a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007582:	f043 0210 	orr.w	r2, r3, #16
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e007      	b.n	80075aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d1cf      	bne.n	8007548 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	8000003f 	.word	0x8000003f
 80075b8:	50000300 	.word	0x50000300
 80075bc:	20000020 	.word	0x20000020
 80075c0:	053e2d63 	.word	0x053e2d63

080075c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d14b      	bne.n	8007676 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d021      	beq.n	800763c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fd8d 	bl	800611c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d032      	beq.n	800766e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d12b      	bne.n	800766e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800761a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11f      	bne.n	800766e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007632:	f043 0201 	orr.w	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800763a:	e018      	b.n	800766e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d111      	bne.n	800766e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007666:	f043 0201 	orr.w	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7fa f9d2 	bl	8001a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007674:	e00e      	b.n	8007694 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fb1e 	bl	8006cc4 <HAL_ADC_ErrorCallback>
}
 8007688:	e004      	b.n	8007694 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff faf6 	bl	8006c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d6:	f043 0204 	orr.w	r2, r3, #4
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff faf0 	bl	8006cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <LL_ADC_IsEnabled>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <LL_ADC_IsEnabled+0x18>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <LL_ADC_IsEnabled+0x1a>
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <LL_ADC_REG_IsConversionOngoing>:
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d101      	bne.n	800772a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b0a1      	sub	sp, #132	@ 0x84
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d101      	bne.n	80077ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80077b6:	2302      	movs	r3, #2
 80077b8:	e08b      	b.n	80078d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80077c2:	2300      	movs	r3, #0
 80077c4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80077c6:	2300      	movs	r3, #0
 80077c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077d2:	d102      	bne.n	80077da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80077d4:	4b41      	ldr	r3, [pc, #260]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	e001      	b.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e8:	f043 0220 	orr.w	r2, r3, #32
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e06a      	b.n	80078d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff87 	bl	8007712 <LL_ADC_REG_IsConversionOngoing>
 8007804:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff ff81 	bl	8007712 <LL_ADC_REG_IsConversionOngoing>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d14c      	bne.n	80078b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007818:	2b00      	cmp	r3, #0
 800781a:	d149      	bne.n	80078b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800781c:	4b30      	ldr	r3, [pc, #192]	@ (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800781e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d028      	beq.n	800787a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6859      	ldr	r1, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800783a:	035b      	lsls	r3, r3, #13
 800783c:	430b      	orrs	r3, r1
 800783e:	431a      	orrs	r2, r3
 8007840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007842:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007844:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007848:	f7ff ff50 	bl	80076ec <LL_ADC_IsEnabled>
 800784c:	4604      	mov	r4, r0
 800784e:	4823      	ldr	r0, [pc, #140]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007850:	f7ff ff4c 	bl	80076ec <LL_ADC_IsEnabled>
 8007854:	4603      	mov	r3, r0
 8007856:	4323      	orrs	r3, r4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d133      	bne.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800785c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007864:	f023 030f 	bic.w	r3, r3, #15
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	6811      	ldr	r1, [r2, #0]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	6892      	ldr	r2, [r2, #8]
 8007870:	430a      	orrs	r2, r1
 8007872:	431a      	orrs	r2, r3
 8007874:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007876:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007878:	e024      	b.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800787a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007884:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007886:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800788a:	f7ff ff2f 	bl	80076ec <LL_ADC_IsEnabled>
 800788e:	4604      	mov	r4, r0
 8007890:	4812      	ldr	r0, [pc, #72]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007892:	f7ff ff2b 	bl	80076ec <LL_ADC_IsEnabled>
 8007896:	4603      	mov	r3, r0
 8007898:	4323      	orrs	r3, r4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d112      	bne.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800789e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80078a6:	f023 030f 	bic.w	r3, r3, #15
 80078aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80078ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80078ae:	e009      	b.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80078c2:	e000      	b.n	80078c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80078c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80078ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3784      	adds	r7, #132	@ 0x84
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd90      	pop	{r4, r7, pc}
 80078da:	bf00      	nop
 80078dc:	50000100 	.word	0x50000100
 80078e0:	50000300 	.word	0x50000300

080078e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <__NVIC_SetPriorityGrouping+0x44>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007900:	4013      	ands	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800790c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007916:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <__NVIC_SetPriorityGrouping+0x44>)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	60d3      	str	r3, [r2, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	e000ed00 	.word	0xe000ed00

0800792c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <__NVIC_GetPriorityGrouping+0x18>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	f003 0307 	and.w	r3, r3, #7
}
 800793a:	4618      	mov	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	db0b      	blt.n	8007972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	f003 021f 	and.w	r2, r3, #31
 8007960:	4907      	ldr	r1, [pc, #28]	@ (8007980 <__NVIC_EnableIRQ+0x38>)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	2001      	movs	r0, #1
 800796a:	fa00 f202 	lsl.w	r2, r0, r2
 800796e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000e100 	.word	0xe000e100

08007984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007994:	2b00      	cmp	r3, #0
 8007996:	db0a      	blt.n	80079ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	490c      	ldr	r1, [pc, #48]	@ (80079d0 <__NVIC_SetPriority+0x4c>)
 800799e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a2:	0112      	lsls	r2, r2, #4
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	440b      	add	r3, r1
 80079a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079ac:	e00a      	b.n	80079c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	4908      	ldr	r1, [pc, #32]	@ (80079d4 <__NVIC_SetPriority+0x50>)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	3b04      	subs	r3, #4
 80079bc:	0112      	lsls	r2, r2, #4
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	440b      	add	r3, r1
 80079c2:	761a      	strb	r2, [r3, #24]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	e000e100 	.word	0xe000e100
 80079d4:	e000ed00 	.word	0xe000ed00

080079d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	@ 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f1c3 0307 	rsb	r3, r3, #7
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	bf28      	it	cs
 80079f6:	2304      	movcs	r3, #4
 80079f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	3304      	adds	r3, #4
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d902      	bls.n	8007a08 <NVIC_EncodePriority+0x30>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	3b03      	subs	r3, #3
 8007a06:	e000      	b.n	8007a0a <NVIC_EncodePriority+0x32>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43da      	mvns	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	401a      	ands	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a20:	f04f 31ff 	mov.w	r1, #4294967295
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	43d9      	mvns	r1, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a30:	4313      	orrs	r3, r2
         );
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3724      	adds	r7, #36	@ 0x24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ff4c 	bl	80078e4 <__NVIC_SetPriorityGrouping>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a62:	f7ff ff63 	bl	800792c <__NVIC_GetPriorityGrouping>
 8007a66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	68b9      	ldr	r1, [r7, #8]
 8007a6c:	6978      	ldr	r0, [r7, #20]
 8007a6e:	f7ff ffb3 	bl	80079d8 <NVIC_EncodePriority>
 8007a72:	4602      	mov	r2, r0
 8007a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff ff82 	bl	8007984 <__NVIC_SetPriority>
}
 8007a80:	bf00      	nop
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff56 	bl	8007948 <__NVIC_EnableIRQ>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e08d      	b.n	8007bd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	4b47      	ldr	r3, [pc, #284]	@ (8007bdc <HAL_DMA_Init+0x138>)
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d80f      	bhi.n	8007ae2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4b45      	ldr	r3, [pc, #276]	@ (8007be0 <HAL_DMA_Init+0x13c>)
 8007aca:	4413      	add	r3, r2
 8007acc:	4a45      	ldr	r2, [pc, #276]	@ (8007be4 <HAL_DMA_Init+0x140>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	091b      	lsrs	r3, r3, #4
 8007ad4:	009a      	lsls	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a42      	ldr	r2, [pc, #264]	@ (8007be8 <HAL_DMA_Init+0x144>)
 8007ade:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ae0:	e00e      	b.n	8007b00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b40      	ldr	r3, [pc, #256]	@ (8007bec <HAL_DMA_Init+0x148>)
 8007aea:	4413      	add	r3, r2
 8007aec:	4a3d      	ldr	r2, [pc, #244]	@ (8007be4 <HAL_DMA_Init+0x140>)
 8007aee:	fba2 2303 	umull	r2, r3, r2, r3
 8007af2:	091b      	lsrs	r3, r3, #4
 8007af4:	009a      	lsls	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a3c      	ldr	r2, [pc, #240]	@ (8007bf0 <HAL_DMA_Init+0x14c>)
 8007afe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa82 	bl	800805c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b60:	d102      	bne.n	8007b68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d010      	beq.n	8007ba8 <HAL_DMA_Init+0x104>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d80c      	bhi.n	8007ba8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 faa2 	bl	80080d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	e008      	b.n	8007bba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40020407 	.word	0x40020407
 8007be0:	bffdfff8 	.word	0xbffdfff8
 8007be4:	cccccccd 	.word	0xcccccccd
 8007be8:	40020000 	.word	0x40020000
 8007bec:	bffdfbf8 	.word	0xbffdfbf8
 8007bf0:	40020400 	.word	0x40020400

08007bf4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_DMA_Start_IT+0x20>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e066      	b.n	8007ce2 <HAL_DMA_Start_IT+0xee>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d155      	bne.n	8007cd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f9c7 	bl	8007fe0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 020e 	orr.w	r2, r2, #14
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e00f      	b.n	8007c8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0204 	bic.w	r2, r2, #4
 8007c7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 020a 	orr.w	r2, r2, #10
 8007c8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ca8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0201 	orr.w	r2, r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e005      	b.n	8007ce0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d005      	beq.n	8007d0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	e037      	b.n	8007d7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 020e 	bic.w	r2, r2, #14
 8007d1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d42:	f003 021f 	and.w	r2, r3, #31
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00c      	beq.n	8007d7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d00d      	beq.n	8007dd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2204      	movs	r2, #4
 8007db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	e047      	b.n	8007e60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 020e 	bic.w	r2, r2, #14
 8007dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e04:	f003 021f 	and.w	r2, r3, #31
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
    }
  }
  return status;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e86:	f003 031f 	and.w	r3, r3, #31
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	409a      	lsls	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d026      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x7a>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d021      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d107      	bne.n	8007ebe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0204 	bic.w	r2, r2, #4
 8007ebc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	f003 021f 	and.w	r2, r3, #31
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eca:	2104      	movs	r1, #4
 8007ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ed0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d071      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007ee2:	e06c      	b.n	8007fbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	2202      	movs	r2, #2
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02e      	beq.n	8007f56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d029      	beq.n	8007f56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 020a 	bic.w	r2, r2, #10
 8007f1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2c:	f003 021f 	and.w	r2, r3, #31
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f34:	2102      	movs	r1, #2
 8007f36:	fa01 f202 	lsl.w	r2, r1, r2
 8007f3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d038      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007f54:	e033      	b.n	8007fbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2208      	movs	r2, #8
 8007f60:	409a      	lsls	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4013      	ands	r3, r2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d02a      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d025      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 020e 	bic.w	r2, r2, #14
 8007f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f88:	f003 021f 	and.w	r2, r3, #31
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f202 	lsl.w	r2, r1, r2
 8007f96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
}
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ff6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	f003 021f 	and.w	r2, r3, #31
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	2101      	movs	r1, #1
 8008018:	fa01 f202 	lsl.w	r2, r1, r2
 800801c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	2b10      	cmp	r3, #16
 800802c:	d108      	bne.n	8008040 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800803e:	e007      	b.n	8008050 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	60da      	str	r2, [r3, #12]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	4b16      	ldr	r3, [pc, #88]	@ (80080c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800806c:	429a      	cmp	r2, r3
 800806e:	d802      	bhi.n	8008076 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008070:	4b15      	ldr	r3, [pc, #84]	@ (80080c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e001      	b.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008076:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008078:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	3b08      	subs	r3, #8
 8008086:	4a12      	ldr	r2, [pc, #72]	@ (80080d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	009a      	lsls	r2, r3, #2
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4413      	add	r3, r2
 800809c:	461a      	mov	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a0b      	ldr	r2, [pc, #44]	@ (80080d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2201      	movs	r2, #1
 80080b0:	409a      	lsls	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40020407 	.word	0x40020407
 80080c8:	40020800 	.word	0x40020800
 80080cc:	40020820 	.word	0x40020820
 80080d0:	cccccccd 	.word	0xcccccccd
 80080d4:	40020880 	.word	0x40020880

080080d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a08      	ldr	r2, [pc, #32]	@ (800811c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80080fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3b01      	subs	r3, #1
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	2201      	movs	r2, #1
 8008106:	409a      	lsls	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	1000823f 	.word	0x1000823f
 800811c:	40020940 	.word	0x40020940

08008120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800812e:	e15a      	b.n	80083e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	2101      	movs	r1, #1
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	fa01 f303 	lsl.w	r3, r1, r3
 800813c:	4013      	ands	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 814c 	beq.w	80083e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d005      	beq.n	8008160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800815c:	2b02      	cmp	r3, #2
 800815e:	d130      	bne.n	80081c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	2203      	movs	r2, #3
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	43db      	mvns	r3, r3
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4013      	ands	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008196:	2201      	movs	r2, #1
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	43db      	mvns	r3, r3
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4013      	ands	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	091b      	lsrs	r3, r3, #4
 80081ac:	f003 0201 	and.w	r2, r3, #1
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d017      	beq.n	80081fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	2203      	movs	r2, #3
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43db      	mvns	r3, r3
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4013      	ands	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d123      	bne.n	8008252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	08da      	lsrs	r2, r3, #3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3208      	adds	r2, #8
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	220f      	movs	r2, #15
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43db      	mvns	r3, r3
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4013      	ands	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	08da      	lsrs	r2, r3, #3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3208      	adds	r2, #8
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	2203      	movs	r2, #3
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	43db      	mvns	r3, r3
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4013      	ands	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f003 0203 	and.w	r2, r3, #3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80a6 	beq.w	80083e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008294:	4b5b      	ldr	r3, [pc, #364]	@ (8008404 <HAL_GPIO_Init+0x2e4>)
 8008296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008298:	4a5a      	ldr	r2, [pc, #360]	@ (8008404 <HAL_GPIO_Init+0x2e4>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6613      	str	r3, [r2, #96]	@ 0x60
 80082a0:	4b58      	ldr	r3, [pc, #352]	@ (8008404 <HAL_GPIO_Init+0x2e4>)
 80082a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082ac:	4a56      	ldr	r2, [pc, #344]	@ (8008408 <HAL_GPIO_Init+0x2e8>)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	089b      	lsrs	r3, r3, #2
 80082b2:	3302      	adds	r3, #2
 80082b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	220f      	movs	r2, #15
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4013      	ands	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80082d6:	d01f      	beq.n	8008318 <HAL_GPIO_Init+0x1f8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a4c      	ldr	r2, [pc, #304]	@ (800840c <HAL_GPIO_Init+0x2ec>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d019      	beq.n	8008314 <HAL_GPIO_Init+0x1f4>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a4b      	ldr	r2, [pc, #300]	@ (8008410 <HAL_GPIO_Init+0x2f0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_GPIO_Init+0x1f0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008414 <HAL_GPIO_Init+0x2f4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00d      	beq.n	800830c <HAL_GPIO_Init+0x1ec>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a49      	ldr	r2, [pc, #292]	@ (8008418 <HAL_GPIO_Init+0x2f8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <HAL_GPIO_Init+0x1e8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a48      	ldr	r2, [pc, #288]	@ (800841c <HAL_GPIO_Init+0x2fc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d101      	bne.n	8008304 <HAL_GPIO_Init+0x1e4>
 8008300:	2305      	movs	r3, #5
 8008302:	e00a      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 8008304:	2306      	movs	r3, #6
 8008306:	e008      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 8008308:	2304      	movs	r3, #4
 800830a:	e006      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 800830c:	2303      	movs	r3, #3
 800830e:	e004      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 8008310:	2302      	movs	r3, #2
 8008312:	e002      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <HAL_GPIO_Init+0x1fa>
 8008318:	2300      	movs	r3, #0
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	f002 0203 	and.w	r2, r2, #3
 8008320:	0092      	lsls	r2, r2, #2
 8008322:	4093      	lsls	r3, r2
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800832a:	4937      	ldr	r1, [pc, #220]	@ (8008408 <HAL_GPIO_Init+0x2e8>)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	3302      	adds	r3, #2
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008338:	4b39      	ldr	r3, [pc, #228]	@ (8008420 <HAL_GPIO_Init+0x300>)
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	43db      	mvns	r3, r3
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4013      	ands	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800835c:	4a30      	ldr	r2, [pc, #192]	@ (8008420 <HAL_GPIO_Init+0x300>)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008362:	4b2f      	ldr	r3, [pc, #188]	@ (8008420 <HAL_GPIO_Init+0x300>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	43db      	mvns	r3, r3
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4013      	ands	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008386:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <HAL_GPIO_Init+0x300>)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800838c:	4b24      	ldr	r3, [pc, #144]	@ (8008420 <HAL_GPIO_Init+0x300>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	43db      	mvns	r3, r3
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4013      	ands	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008420 <HAL_GPIO_Init+0x300>)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80083b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <HAL_GPIO_Init+0x300>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	43db      	mvns	r3, r3
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4013      	ands	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80083da:	4a11      	ldr	r2, [pc, #68]	@ (8008420 <HAL_GPIO_Init+0x300>)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	3301      	adds	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f ae9d 	bne.w	8008130 <HAL_GPIO_Init+0x10>
  }
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	40021000 	.word	0x40021000
 8008408:	40010000 	.word	0x40010000
 800840c:	48000400 	.word	0x48000400
 8008410:	48000800 	.word	0x48000800
 8008414:	48000c00 	.word	0x48000c00
 8008418:	48001000 	.word	0x48001000
 800841c:	48001400 	.word	0x48001400
 8008420:	40010400 	.word	0x40010400

08008424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	887b      	ldrh	r3, [r7, #2]
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e001      	b.n	8008446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	807b      	strh	r3, [r7, #2]
 8008460:	4613      	mov	r3, r2
 8008462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008464:	787b      	ldrb	r3, [r7, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800846a:	887a      	ldrh	r2, [r7, #2]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008470:	e002      	b.n	8008478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008472:	887a      	ldrh	r2, [r7, #2]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008496:	887a      	ldrh	r2, [r7, #2]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4013      	ands	r3, r2
 800849c:	041a      	lsls	r2, r3, #16
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	43d9      	mvns	r1, r3
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	400b      	ands	r3, r1
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	619a      	str	r2, [r3, #24]
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80084c2:	4b08      	ldr	r3, [pc, #32]	@ (80084e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084c4:	695a      	ldr	r2, [r3, #20]
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d006      	beq.n	80084dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80084ce:	4a05      	ldr	r2, [pc, #20]	@ (80084e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa fc2a 	bl	8002d30 <HAL_GPIO_EXTI_Callback>
  }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40010400 	.word	0x40010400

080084e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e08d      	b.n	8008616 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fa fa54 	bl	80029bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2224      	movs	r2, #36	@ 0x24
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0201 	bic.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d107      	bne.n	8008562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	e006      	b.n	8008570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800856e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d108      	bne.n	800858a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008586:	605a      	str	r2, [r3, #4]
 8008588:	e007      	b.n	800859a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6812      	ldr	r2, [r2, #0]
 80085a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69d9      	ldr	r1, [r3, #28]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	4608      	mov	r0, r1
 800862a:	4611      	mov	r1, r2
 800862c:	461a      	mov	r2, r3
 800862e:	4603      	mov	r3, r0
 8008630:	817b      	strh	r3, [r7, #10]
 8008632:	460b      	mov	r3, r1
 8008634:	813b      	strh	r3, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b20      	cmp	r3, #32
 8008644:	f040 80f9 	bne.w	800883a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <HAL_I2C_Mem_Write+0x34>
 800864e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800865a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0ed      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_I2C_Mem_Write+0x4e>
 800866a:	2302      	movs	r3, #2
 800866c:	e0e6      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008676:	f7fd fc51 	bl	8005f1c <HAL_GetTick>
 800867a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2319      	movs	r3, #25
 8008682:	2201      	movs	r2, #1
 8008684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fac3 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0d1      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2221      	movs	r2, #33	@ 0x21
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2240      	movs	r2, #64	@ 0x40
 80086a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a3a      	ldr	r2, [r7, #32]
 80086b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80086b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086c0:	88f8      	ldrh	r0, [r7, #6]
 80086c2:	893a      	ldrh	r2, [r7, #8]
 80086c4:	8979      	ldrh	r1, [r7, #10]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4603      	mov	r3, r0
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f9d3 	bl	8008a7c <I2C_RequestMemoryWrite>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0a9      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2bff      	cmp	r3, #255	@ 0xff
 80086f0:	d90e      	bls.n	8008710 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	22ff      	movs	r2, #255	@ 0xff
 80086f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	8979      	ldrh	r1, [r7, #10]
 8008700:	2300      	movs	r3, #0
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fc47 	bl	8008f9c <I2C_TransferConfig>
 800870e:	e00f      	b.n	8008730 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871e:	b2da      	uxtb	r2, r3
 8008720:	8979      	ldrh	r1, [r7, #10]
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fc36 	bl	8008f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 fac6 	bl	8008cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e07b      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d034      	beq.n	80087e8 <HAL_I2C_Mem_Write+0x1c8>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d130      	bne.n	80087e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	2200      	movs	r2, #0
 800878e:	2180      	movs	r1, #128	@ 0x80
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fa3f 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e04d      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2bff      	cmp	r3, #255	@ 0xff
 80087a8:	d90e      	bls.n	80087c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	22ff      	movs	r2, #255	@ 0xff
 80087ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	8979      	ldrh	r1, [r7, #10]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fbeb 	bl	8008f9c <I2C_TransferConfig>
 80087c6:	e00f      	b.n	80087e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	8979      	ldrh	r1, [r7, #10]
 80087da:	2300      	movs	r3, #0
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 fbda 	bl	8008f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d19e      	bne.n	8008730 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 faac 	bl	8008d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e01a      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2220      	movs	r2, #32
 800880c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6859      	ldr	r1, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <HAL_I2C_Mem_Write+0x224>)
 800881a:	400b      	ands	r3, r1
 800881c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	fe00e800 	.word	0xfe00e800

08008848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af02      	add	r7, sp, #8
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	461a      	mov	r2, r3
 8008856:	4603      	mov	r3, r0
 8008858:	817b      	strh	r3, [r7, #10]
 800885a:	460b      	mov	r3, r1
 800885c:	813b      	strh	r3, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b20      	cmp	r3, #32
 800886c:	f040 80fd 	bne.w	8008a6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <HAL_I2C_Mem_Read+0x34>
 8008876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d105      	bne.n	8008888 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008882:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e0f1      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_I2C_Mem_Read+0x4e>
 8008892:	2302      	movs	r3, #2
 8008894:	e0ea      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800889e:	f7fd fb3d 	bl	8005f1c <HAL_GetTick>
 80088a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2319      	movs	r3, #25
 80088aa:	2201      	movs	r2, #1
 80088ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f9af 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0d5      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2222      	movs	r2, #34	@ 0x22
 80088c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a3a      	ldr	r2, [r7, #32]
 80088da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80088e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088e8:	88f8      	ldrh	r0, [r7, #6]
 80088ea:	893a      	ldrh	r2, [r7, #8]
 80088ec:	8979      	ldrh	r1, [r7, #10]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4603      	mov	r3, r0
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f913 	bl	8008b24 <I2C_RequestMemoryRead>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e0ad      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2bff      	cmp	r3, #255	@ 0xff
 8008918:	d90e      	bls.n	8008938 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	22ff      	movs	r2, #255	@ 0xff
 800891e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008924:	b2da      	uxtb	r2, r3
 8008926:	8979      	ldrh	r1, [r7, #10]
 8008928:	4b52      	ldr	r3, [pc, #328]	@ (8008a74 <HAL_I2C_Mem_Read+0x22c>)
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fb33 	bl	8008f9c <I2C_TransferConfig>
 8008936:	e00f      	b.n	8008958 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008946:	b2da      	uxtb	r2, r3
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a74 <HAL_I2C_Mem_Read+0x22c>)
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fb22 	bl	8008f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	2200      	movs	r2, #0
 8008960:	2104      	movs	r1, #4
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 f956 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e07c      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d034      	beq.n	8008a18 <HAL_I2C_Mem_Read+0x1d0>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d130      	bne.n	8008a18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	@ 0x80
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 f927 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e04d      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2bff      	cmp	r3, #255	@ 0xff
 80089d8:	d90e      	bls.n	80089f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	@ 0xff
 80089de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	8979      	ldrh	r1, [r7, #10]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fad3 	bl	8008f9c <I2C_TransferConfig>
 80089f6:	e00f      	b.n	8008a18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	8979      	ldrh	r1, [r7, #10]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fac2 	bl	8008f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d19a      	bne.n	8008958 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f994 	bl	8008d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e01a      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6859      	ldr	r1, [r3, #4]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <HAL_I2C_Mem_Read+0x230>)
 8008a4a:	400b      	ands	r3, r1
 8008a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e000      	b.n	8008a6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a6a:	2302      	movs	r3, #2
  }
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	80002400 	.word	0x80002400
 8008a78:	fe00e800 	.word	0xfe00e800

08008a7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	817b      	strh	r3, [r7, #10]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	813b      	strh	r3, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	8979      	ldrh	r1, [r7, #10]
 8008a9c:	4b20      	ldr	r3, [pc, #128]	@ (8008b20 <I2C_RequestMemoryWrite+0xa4>)
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 fa79 	bl	8008f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	69b9      	ldr	r1, [r7, #24]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f909 	bl	8008cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e02c      	b.n	8008b18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d105      	bne.n	8008ad0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ac4:	893b      	ldrh	r3, [r7, #8]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ace:	e015      	b.n	8008afc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ad0:	893b      	ldrh	r3, [r7, #8]
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	69b9      	ldr	r1, [r7, #24]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f8ef 	bl	8008cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e012      	b.n	8008b18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008af2:	893b      	ldrh	r3, [r7, #8]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2180      	movs	r1, #128	@ 0x80
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f884 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	80002000 	.word	0x80002000

08008b24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	817b      	strh	r3, [r7, #10]
 8008b36:	460b      	mov	r3, r1
 8008b38:	813b      	strh	r3, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	8979      	ldrh	r1, [r7, #10]
 8008b44:	4b20      	ldr	r3, [pc, #128]	@ (8008bc8 <I2C_RequestMemoryRead+0xa4>)
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 fa26 	bl	8008f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	69b9      	ldr	r1, [r7, #24]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f8b6 	bl	8008cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e02c      	b.n	8008bbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d105      	bne.n	8008b76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b6a:	893b      	ldrh	r3, [r7, #8]
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b74:	e015      	b.n	8008ba2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b76:	893b      	ldrh	r3, [r7, #8]
 8008b78:	0a1b      	lsrs	r3, r3, #8
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	69b9      	ldr	r1, [r7, #24]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f89c 	bl	8008cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e012      	b.n	8008bbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b98:	893b      	ldrh	r3, [r7, #8]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2140      	movs	r1, #64	@ 0x40
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f831 	bl	8008c14 <I2C_WaitOnFlagUntilTimeout>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e000      	b.n	8008bbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	80002000 	.word	0x80002000

08008bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d103      	bne.n	8008bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d007      	beq.n	8008c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699a      	ldr	r2, [r3, #24]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	619a      	str	r2, [r3, #24]
  }
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c24:	e03b      	b.n	8008c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f8d6 	bl	8008ddc <I2C_IsErrorOccurred>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e041      	b.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d02d      	beq.n	8008c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c42:	f7fd f96b 	bl	8005f1c <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d302      	bcc.n	8008c58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d122      	bne.n	8008c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4013      	ands	r3, r2
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	bf0c      	ite	eq
 8008c68:	2301      	moveq	r3, #1
 8008c6a:	2300      	movne	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d113      	bne.n	8008c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7a:	f043 0220 	orr.w	r2, r3, #32
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e00f      	b.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	bf0c      	ite	eq
 8008cae:	2301      	moveq	r3, #1
 8008cb0:	2300      	movne	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d0b4      	beq.n	8008c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cd2:	e033      	b.n	8008d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f87f 	bl	8008ddc <I2C_IsErrorOccurred>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e031      	b.n	8008d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d025      	beq.n	8008d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf0:	f7fd f914 	bl	8005f1c <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d302      	bcc.n	8008d06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d11a      	bne.n	8008d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d013      	beq.n	8008d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d18:	f043 0220 	orr.w	r2, r3, #32
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e007      	b.n	8008d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d1c4      	bne.n	8008cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d60:	e02f      	b.n	8008dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f838 	bl	8008ddc <I2C_IsErrorOccurred>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e02d      	b.n	8008dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d76:	f7fd f8d1 	bl	8005f1c <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d302      	bcc.n	8008d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11a      	bne.n	8008dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d013      	beq.n	8008dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e007      	b.n	8008dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d1c8      	bne.n	8008d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d068      	beq.n	8008eda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2210      	movs	r2, #16
 8008e0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e10:	e049      	b.n	8008ea6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d045      	beq.n	8008ea6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e1a:	f7fd f87f 	bl	8005f1c <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d302      	bcc.n	8008e30 <I2C_IsErrorOccurred+0x54>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d13a      	bne.n	8008ea6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e52:	d121      	bne.n	8008e98 <I2C_IsErrorOccurred+0xbc>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e5a:	d01d      	beq.n	8008e98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e5c:	7cfb      	ldrb	r3, [r7, #19]
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d01a      	beq.n	8008e98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e72:	f7fd f853 	bl	8005f1c <HAL_GetTick>
 8008e76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e78:	e00e      	b.n	8008e98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e7a:	f7fd f84f 	bl	8005f1c <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b19      	cmp	r3, #25
 8008e86:	d907      	bls.n	8008e98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	f043 0320 	orr.w	r3, r3, #32
 8008e8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008e96:	e006      	b.n	8008ea6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	d1e9      	bne.n	8008e7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d003      	beq.n	8008ebc <I2C_IsErrorOccurred+0xe0>
 8008eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0aa      	beq.n	8008e12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	f043 0304 	orr.w	r3, r3, #4
 8008ed2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	f043 0302 	orr.w	r3, r3, #2
 8008f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01c      	beq.n	8008f8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff fe3b 	bl	8008bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6859      	ldr	r1, [r3, #4]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <I2C_IsErrorOccurred+0x1bc>)
 8008f62:	400b      	ands	r3, r1
 8008f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3728      	adds	r7, #40	@ 0x28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	fe00e800 	.word	0xfe00e800

08008f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	817b      	strh	r3, [r7, #10]
 8008faa:	4613      	mov	r3, r2
 8008fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fae:	897b      	ldrh	r3, [r7, #10]
 8008fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fb4:	7a7b      	ldrb	r3, [r7, #9]
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	0d5b      	lsrs	r3, r3, #21
 8008fd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008fda:	4b08      	ldr	r3, [pc, #32]	@ (8008ffc <I2C_TransferConfig+0x60>)
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	ea02 0103 	and.w	r1, r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	03ff63ff 	.word	0x03ff63ff

08009000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b20      	cmp	r3, #32
 8009014:	d138      	bne.n	8009088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009020:	2302      	movs	r3, #2
 8009022:	e032      	b.n	800908a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	@ 0x24
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6819      	ldr	r1, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e000      	b.n	800908a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009088:	2302      	movs	r3, #2
  }
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d139      	bne.n	8009120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e033      	b.n	8009122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2224      	movs	r2, #36	@ 0x24
 80090c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0201 	bic.w	r2, r2, #1
 80090d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	e000      	b.n	8009122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009120:	2302      	movs	r3, #2
  }
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d141      	bne.n	80091c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800913e:	4b4b      	ldr	r3, [pc, #300]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800914a:	d131      	bne.n	80091b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800914c:	4b47      	ldr	r3, [pc, #284]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800914e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009152:	4a46      	ldr	r2, [pc, #280]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800915c:	4b43      	ldr	r3, [pc, #268]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009164:	4a41      	ldr	r2, [pc, #260]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800916a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800916c:	4b40      	ldr	r3, [pc, #256]	@ (8009270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2232      	movs	r2, #50	@ 0x32
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	4a3f      	ldr	r2, [pc, #252]	@ (8009274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	0c9b      	lsrs	r3, r3, #18
 800917e:	3301      	adds	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009182:	e002      	b.n	800918a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3b01      	subs	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800918a:	4b38      	ldr	r3, [pc, #224]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009196:	d102      	bne.n	800919e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f2      	bne.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800919e:	4b33      	ldr	r3, [pc, #204]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091aa:	d158      	bne.n	800925e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e057      	b.n	8009260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091b0:	4b2e      	ldr	r3, [pc, #184]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b6:	4a2d      	ldr	r2, [pc, #180]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80091c0:	e04d      	b.n	800925e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d141      	bne.n	800924e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80091ca:	4b28      	ldr	r3, [pc, #160]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80091d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091d6:	d131      	bne.n	800923c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091d8:	4b24      	ldr	r3, [pc, #144]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091de:	4a23      	ldr	r2, [pc, #140]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091e8:	4b20      	ldr	r3, [pc, #128]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80091f0:	4a1e      	ldr	r2, [pc, #120]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80091f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2232      	movs	r2, #50	@ 0x32
 80091fe:	fb02 f303 	mul.w	r3, r2, r3
 8009202:	4a1c      	ldr	r2, [pc, #112]	@ (8009274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009204:	fba2 2303 	umull	r2, r3, r2, r3
 8009208:	0c9b      	lsrs	r3, r3, #18
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800920e:	e002      	b.n	8009216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3b01      	subs	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009216:	4b15      	ldr	r3, [pc, #84]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800921e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009222:	d102      	bne.n	800922a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1f2      	bne.n	8009210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800922a:	4b10      	ldr	r3, [pc, #64]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009236:	d112      	bne.n	800925e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e011      	b.n	8009260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800923c:	4b0b      	ldr	r3, [pc, #44]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800923e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009242:	4a0a      	ldr	r2, [pc, #40]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800924c:	e007      	b.n	800925e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009256:	4a05      	ldr	r2, [pc, #20]	@ (800926c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800925c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	40007000 	.word	0x40007000
 8009270:	20000020 	.word	0x20000020
 8009274:	431bde83 	.word	0x431bde83

08009278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800927c:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4a04      	ldr	r2, [pc, #16]	@ (8009294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009286:	6093      	str	r3, [r2, #8]
}
 8009288:	bf00      	nop
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	40007000 	.word	0x40007000

08009298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e2fe      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d075      	beq.n	80093a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092b6:	4b97      	ldr	r3, [pc, #604]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f003 030c 	and.w	r3, r3, #12
 80092be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092c0:	4b94      	ldr	r3, [pc, #592]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b0c      	cmp	r3, #12
 80092ce:	d102      	bne.n	80092d6 <HAL_RCC_OscConfig+0x3e>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d002      	beq.n	80092dc <HAL_RCC_OscConfig+0x44>
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d10b      	bne.n	80092f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092dc:	4b8d      	ldr	r3, [pc, #564]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d05b      	beq.n	80093a0 <HAL_RCC_OscConfig+0x108>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d157      	bne.n	80093a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e2d9      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fc:	d106      	bne.n	800930c <HAL_RCC_OscConfig+0x74>
 80092fe:	4b85      	ldr	r3, [pc, #532]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a84      	ldr	r2, [pc, #528]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e01d      	b.n	8009348 <HAL_RCC_OscConfig+0xb0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009314:	d10c      	bne.n	8009330 <HAL_RCC_OscConfig+0x98>
 8009316:	4b7f      	ldr	r3, [pc, #508]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a7e      	ldr	r2, [pc, #504]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800931c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	4b7c      	ldr	r3, [pc, #496]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a7b      	ldr	r2, [pc, #492]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	e00b      	b.n	8009348 <HAL_RCC_OscConfig+0xb0>
 8009330:	4b78      	ldr	r3, [pc, #480]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a77      	ldr	r2, [pc, #476]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	4b75      	ldr	r3, [pc, #468]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a74      	ldr	r2, [pc, #464]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d013      	beq.n	8009378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7fc fde4 	bl	8005f1c <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009358:	f7fc fde0 	bl	8005f1c <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b64      	cmp	r3, #100	@ 0x64
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e29e      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800936a:	4b6a      	ldr	r3, [pc, #424]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0f0      	beq.n	8009358 <HAL_RCC_OscConfig+0xc0>
 8009376:	e014      	b.n	80093a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009378:	f7fc fdd0 	bl	8005f1c <HAL_GetTick>
 800937c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800937e:	e008      	b.n	8009392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009380:	f7fc fdcc 	bl	8005f1c <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b64      	cmp	r3, #100	@ 0x64
 800938c:	d901      	bls.n	8009392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e28a      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009392:	4b60      	ldr	r3, [pc, #384]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f0      	bne.n	8009380 <HAL_RCC_OscConfig+0xe8>
 800939e:	e000      	b.n	80093a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d075      	beq.n	800949a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093ae:	4b59      	ldr	r3, [pc, #356]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 030c 	and.w	r3, r3, #12
 80093b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093b8:	4b56      	ldr	r3, [pc, #344]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b0c      	cmp	r3, #12
 80093c6:	d102      	bne.n	80093ce <HAL_RCC_OscConfig+0x136>
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d002      	beq.n	80093d4 <HAL_RCC_OscConfig+0x13c>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d11f      	bne.n	8009414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093d4:	4b4f      	ldr	r3, [pc, #316]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_RCC_OscConfig+0x154>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e25d      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ec:	4b49      	ldr	r3, [pc, #292]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	061b      	lsls	r3, r3, #24
 80093fa:	4946      	ldr	r1, [pc, #280]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009400:	4b45      	ldr	r3, [pc, #276]	@ (8009518 <HAL_RCC_OscConfig+0x280>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4618      	mov	r0, r3
 8009406:	f7fa fe9b 	bl	8004140 <HAL_InitTick>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d043      	beq.n	8009498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e249      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d023      	beq.n	8009464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800941c:	4b3d      	ldr	r3, [pc, #244]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a3c      	ldr	r2, [pc, #240]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7fc fd78 	bl	8005f1c <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009430:	f7fc fd74 	bl	8005f1c <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e232      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009442:	4b34      	ldr	r3, [pc, #208]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f0      	beq.n	8009430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944e:	4b31      	ldr	r3, [pc, #196]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	061b      	lsls	r3, r3, #24
 800945c:	492d      	ldr	r1, [pc, #180]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800945e:	4313      	orrs	r3, r2
 8009460:	604b      	str	r3, [r1, #4]
 8009462:	e01a      	b.n	800949a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009464:	4b2b      	ldr	r3, [pc, #172]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a2a      	ldr	r2, [pc, #168]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800946a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800946e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009470:	f7fc fd54 	bl	8005f1c <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009478:	f7fc fd50 	bl	8005f1c <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e20e      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800948a:	4b22      	ldr	r3, [pc, #136]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1f0      	bne.n	8009478 <HAL_RCC_OscConfig+0x1e0>
 8009496:	e000      	b.n	800949a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d041      	beq.n	800952a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01c      	beq.n	80094e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ae:	4b19      	ldr	r3, [pc, #100]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80094b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094b4:	4a17      	ldr	r2, [pc, #92]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094be:	f7fc fd2d 	bl	8005f1c <HAL_GetTick>
 80094c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094c4:	e008      	b.n	80094d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094c6:	f7fc fd29 	bl	8005f1c <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e1e7      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80094da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0ef      	beq.n	80094c6 <HAL_RCC_OscConfig+0x22e>
 80094e6:	e020      	b.n	800952a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80094ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094ee:	4a09      	ldr	r2, [pc, #36]	@ (8009514 <HAL_RCC_OscConfig+0x27c>)
 80094f0:	f023 0301 	bic.w	r3, r3, #1
 80094f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f8:	f7fc fd10 	bl	8005f1c <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094fe:	e00d      	b.n	800951c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009500:	f7fc fd0c 	bl	8005f1c <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d906      	bls.n	800951c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e1ca      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
 8009512:	bf00      	nop
 8009514:	40021000 	.word	0x40021000
 8009518:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800951c:	4b8c      	ldr	r3, [pc, #560]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800951e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1ea      	bne.n	8009500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80a6 	beq.w	8009684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009538:	2300      	movs	r3, #0
 800953a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800953c:	4b84      	ldr	r3, [pc, #528]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800953e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_RCC_OscConfig+0x2b4>
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <HAL_RCC_OscConfig+0x2b6>
 800954c:	2300      	movs	r3, #0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00d      	beq.n	800956e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009552:	4b7f      	ldr	r3, [pc, #508]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009556:	4a7e      	ldr	r2, [pc, #504]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800955c:	6593      	str	r3, [r2, #88]	@ 0x58
 800955e:	4b7c      	ldr	r3, [pc, #496]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800956a:	2301      	movs	r3, #1
 800956c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800956e:	4b79      	ldr	r3, [pc, #484]	@ (8009754 <HAL_RCC_OscConfig+0x4bc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009576:	2b00      	cmp	r3, #0
 8009578:	d118      	bne.n	80095ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800957a:	4b76      	ldr	r3, [pc, #472]	@ (8009754 <HAL_RCC_OscConfig+0x4bc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a75      	ldr	r2, [pc, #468]	@ (8009754 <HAL_RCC_OscConfig+0x4bc>)
 8009580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009586:	f7fc fcc9 	bl	8005f1c <HAL_GetTick>
 800958a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800958e:	f7fc fcc5 	bl	8005f1c <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e183      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095a0:	4b6c      	ldr	r3, [pc, #432]	@ (8009754 <HAL_RCC_OscConfig+0x4bc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d108      	bne.n	80095c6 <HAL_RCC_OscConfig+0x32e>
 80095b4:	4b66      	ldr	r3, [pc, #408]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ba:	4a65      	ldr	r2, [pc, #404]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095bc:	f043 0301 	orr.w	r3, r3, #1
 80095c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095c4:	e024      	b.n	8009610 <HAL_RCC_OscConfig+0x378>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	2b05      	cmp	r3, #5
 80095cc:	d110      	bne.n	80095f0 <HAL_RCC_OscConfig+0x358>
 80095ce:	4b60      	ldr	r3, [pc, #384]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d4:	4a5e      	ldr	r2, [pc, #376]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095d6:	f043 0304 	orr.w	r3, r3, #4
 80095da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095de:	4b5c      	ldr	r3, [pc, #368]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e4:	4a5a      	ldr	r2, [pc, #360]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095e6:	f043 0301 	orr.w	r3, r3, #1
 80095ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095ee:	e00f      	b.n	8009610 <HAL_RCC_OscConfig+0x378>
 80095f0:	4b57      	ldr	r3, [pc, #348]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f6:	4a56      	ldr	r2, [pc, #344]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80095f8:	f023 0301 	bic.w	r3, r3, #1
 80095fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009600:	4b53      	ldr	r3, [pc, #332]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009606:	4a52      	ldr	r2, [pc, #328]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009608:	f023 0304 	bic.w	r3, r3, #4
 800960c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d016      	beq.n	8009646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009618:	f7fc fc80 	bl	8005f1c <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800961e:	e00a      	b.n	8009636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009620:	f7fc fc7c 	bl	8005f1c <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800962e:	4293      	cmp	r3, r2
 8009630:	d901      	bls.n	8009636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e138      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009636:	4b46      	ldr	r3, [pc, #280]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0ed      	beq.n	8009620 <HAL_RCC_OscConfig+0x388>
 8009644:	e015      	b.n	8009672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009646:	f7fc fc69 	bl	8005f1c <HAL_GetTick>
 800964a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800964c:	e00a      	b.n	8009664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800964e:	f7fc fc65 	bl	8005f1c <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965c:	4293      	cmp	r3, r2
 800965e:	d901      	bls.n	8009664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e121      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009664:	4b3a      	ldr	r3, [pc, #232]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1ed      	bne.n	800964e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009672:	7ffb      	ldrb	r3, [r7, #31]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d105      	bne.n	8009684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009678:	4b35      	ldr	r3, [pc, #212]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800967a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967c:	4a34      	ldr	r2, [pc, #208]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800967e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	d03c      	beq.n	800970a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d01c      	beq.n	80096d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009698:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800969a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800969e:	4a2c      	ldr	r2, [pc, #176]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096a8:	f7fc fc38 	bl	8005f1c <HAL_GetTick>
 80096ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80096ae:	e008      	b.n	80096c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096b0:	f7fc fc34 	bl	8005f1c <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e0f2      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80096c2:	4b23      	ldr	r3, [pc, #140]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80096c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0ef      	beq.n	80096b0 <HAL_RCC_OscConfig+0x418>
 80096d0:	e01b      	b.n	800970a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80096d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80096da:	f023 0301 	bic.w	r3, r3, #1
 80096de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096e2:	f7fc fc1b 	bl	8005f1c <HAL_GetTick>
 80096e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096e8:	e008      	b.n	80096fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096ea:	f7fc fc17 	bl	8005f1c <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d901      	bls.n	80096fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e0d5      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096fc:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 80096fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1ef      	bne.n	80096ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80c9 	beq.w	80098a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f003 030c 	and.w	r3, r3, #12
 800971c:	2b0c      	cmp	r3, #12
 800971e:	f000 8083 	beq.w	8009828 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d15e      	bne.n	80097e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800972a:	4b09      	ldr	r3, [pc, #36]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a08      	ldr	r2, [pc, #32]	@ (8009750 <HAL_RCC_OscConfig+0x4b8>)
 8009730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009736:	f7fc fbf1 	bl	8005f1c <HAL_GetTick>
 800973a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800973c:	e00c      	b.n	8009758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800973e:	f7fc fbed 	bl	8005f1c <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d905      	bls.n	8009758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e0ab      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
 8009750:	40021000 	.word	0x40021000
 8009754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009758:	4b55      	ldr	r3, [pc, #340]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1ec      	bne.n	800973e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009764:	4b52      	ldr	r3, [pc, #328]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	4b52      	ldr	r3, [pc, #328]	@ (80098b4 <HAL_RCC_OscConfig+0x61c>)
 800976a:	4013      	ands	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6a11      	ldr	r1, [r2, #32]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009774:	3a01      	subs	r2, #1
 8009776:	0112      	lsls	r2, r2, #4
 8009778:	4311      	orrs	r1, r2
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800977e:	0212      	lsls	r2, r2, #8
 8009780:	4311      	orrs	r1, r2
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009786:	0852      	lsrs	r2, r2, #1
 8009788:	3a01      	subs	r2, #1
 800978a:	0552      	lsls	r2, r2, #21
 800978c:	4311      	orrs	r1, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009792:	0852      	lsrs	r2, r2, #1
 8009794:	3a01      	subs	r2, #1
 8009796:	0652      	lsls	r2, r2, #25
 8009798:	4311      	orrs	r1, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800979e:	06d2      	lsls	r2, r2, #27
 80097a0:	430a      	orrs	r2, r1
 80097a2:	4943      	ldr	r1, [pc, #268]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097a8:	4b41      	ldr	r3, [pc, #260]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a40      	ldr	r2, [pc, #256]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80097b4:	4b3e      	ldr	r3, [pc, #248]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4a3d      	ldr	r2, [pc, #244]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c0:	f7fc fbac 	bl	8005f1c <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097c8:	f7fc fba8 	bl	8005f1c <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e066      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097da:	4b35      	ldr	r3, [pc, #212]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f0      	beq.n	80097c8 <HAL_RCC_OscConfig+0x530>
 80097e6:	e05e      	b.n	80098a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097e8:	4b31      	ldr	r3, [pc, #196]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a30      	ldr	r2, [pc, #192]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 80097ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f4:	f7fc fb92 	bl	8005f1c <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097fa:	e008      	b.n	800980e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097fc:	f7fc fb8e 	bl	8005f1c <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b02      	cmp	r3, #2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e04c      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800980e:	4b28      	ldr	r3, [pc, #160]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1f0      	bne.n	80097fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800981a:	4b25      	ldr	r3, [pc, #148]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	4924      	ldr	r1, [pc, #144]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 8009820:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <HAL_RCC_OscConfig+0x620>)
 8009822:	4013      	ands	r3, r2
 8009824:	60cb      	str	r3, [r1, #12]
 8009826:	e03e      	b.n	80098a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e039      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009834:	4b1e      	ldr	r3, [pc, #120]	@ (80098b0 <HAL_RCC_OscConfig+0x618>)
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f003 0203 	and.w	r2, r3, #3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	429a      	cmp	r2, r3
 8009846:	d12c      	bne.n	80098a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009852:	3b01      	subs	r3, #1
 8009854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009856:	429a      	cmp	r2, r3
 8009858:	d123      	bne.n	80098a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009866:	429a      	cmp	r2, r3
 8009868:	d11b      	bne.n	80098a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009876:	429a      	cmp	r2, r3
 8009878:	d113      	bne.n	80098a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	3b01      	subs	r3, #1
 8009888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800988a:	429a      	cmp	r2, r3
 800988c:	d109      	bne.n	80098a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009898:	085b      	lsrs	r3, r3, #1
 800989a:	3b01      	subs	r3, #1
 800989c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800989e:	429a      	cmp	r2, r3
 80098a0:	d001      	beq.n	80098a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40021000 	.word	0x40021000
 80098b4:	019f800c 	.word	0x019f800c
 80098b8:	feeefffc 	.word	0xfeeefffc

080098bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e11e      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098d4:	4b91      	ldr	r3, [pc, #580]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d910      	bls.n	8009904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098e2:	4b8e      	ldr	r3, [pc, #568]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f023 020f 	bic.w	r2, r3, #15
 80098ea:	498c      	ldr	r1, [pc, #560]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098f2:	4b8a      	ldr	r3, [pc, #552]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d001      	beq.n	8009904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e106      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d073      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d129      	bne.n	800996c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009918:	4b81      	ldr	r3, [pc, #516]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e0f4      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009928:	f000 f9ce 	bl	8009cc8 <RCC_GetSysClockFreqFromPLLSource>
 800992c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	4a7c      	ldr	r2, [pc, #496]	@ (8009b24 <HAL_RCC_ClockConfig+0x268>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d93f      	bls.n	80099b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009936:	4b7a      	ldr	r3, [pc, #488]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800994a:	2b00      	cmp	r3, #0
 800994c:	d033      	beq.n	80099b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009952:	2b00      	cmp	r3, #0
 8009954:	d12f      	bne.n	80099b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009956:	4b72      	ldr	r3, [pc, #456]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800995e:	4a70      	ldr	r2, [pc, #448]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009964:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	e024      	b.n	80099b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d107      	bne.n	8009984 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009974:	4b6a      	ldr	r3, [pc, #424]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d109      	bne.n	8009994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e0c6      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009984:	4b66      	ldr	r3, [pc, #408]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e0be      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009994:	f000 f8ce 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 8009998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	4a61      	ldr	r2, [pc, #388]	@ (8009b24 <HAL_RCC_ClockConfig+0x268>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d909      	bls.n	80099b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80099a2:	4b5f      	ldr	r3, [pc, #380]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099aa:	4a5d      	ldr	r2, [pc, #372]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80099b2:	2380      	movs	r3, #128	@ 0x80
 80099b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099b6:	4b5a      	ldr	r3, [pc, #360]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f023 0203 	bic.w	r2, r3, #3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4957      	ldr	r1, [pc, #348]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c8:	f7fc faa8 	bl	8005f1c <HAL_GetTick>
 80099cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ce:	e00a      	b.n	80099e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099d0:	f7fc faa4 	bl	8005f1c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099de:	4293      	cmp	r3, r2
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e095      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 020c 	and.w	r2, r3, #12
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d1eb      	bne.n	80099d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0302 	and.w	r3, r3, #2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d023      	beq.n	8009a4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a10:	4b43      	ldr	r3, [pc, #268]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4a42      	ldr	r2, [pc, #264]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009a1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0308 	and.w	r3, r3, #8
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009a28:	4b3d      	ldr	r3, [pc, #244]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009a30:	4a3b      	ldr	r2, [pc, #236]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a38:	4b39      	ldr	r3, [pc, #228]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4936      	ldr	r1, [pc, #216]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	608b      	str	r3, [r1, #8]
 8009a4a:	e008      	b.n	8009a5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2b80      	cmp	r3, #128	@ 0x80
 8009a50:	d105      	bne.n	8009a5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a52:	4b33      	ldr	r3, [pc, #204]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	4a32      	ldr	r2, [pc, #200]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009a58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 030f 	and.w	r3, r3, #15
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d21d      	bcs.n	8009aa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f023 020f 	bic.w	r2, r3, #15
 8009a74:	4929      	ldr	r1, [pc, #164]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009a7c:	f7fc fa4e 	bl	8005f1c <HAL_GetTick>
 8009a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a82:	e00a      	b.n	8009a9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a84:	f7fc fa4a 	bl	8005f1c <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d901      	bls.n	8009a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e03b      	b.n	8009b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a9a:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d1ed      	bne.n	8009a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4917      	ldr	r1, [pc, #92]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ad2:	4b13      	ldr	r3, [pc, #76]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	490f      	ldr	r1, [pc, #60]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ae6:	f000 f825 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 8009aea:	4602      	mov	r2, r0
 8009aec:	4b0c      	ldr	r3, [pc, #48]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	091b      	lsrs	r3, r3, #4
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	490c      	ldr	r1, [pc, #48]	@ (8009b28 <HAL_RCC_ClockConfig+0x26c>)
 8009af8:	5ccb      	ldrb	r3, [r1, r3]
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	fa22 f303 	lsr.w	r3, r2, r3
 8009b02:	4a0a      	ldr	r2, [pc, #40]	@ (8009b2c <HAL_RCC_ClockConfig+0x270>)
 8009b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009b06:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <HAL_RCC_ClockConfig+0x274>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fa fb18 	bl	8004140 <HAL_InitTick>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	40022000 	.word	0x40022000
 8009b20:	40021000 	.word	0x40021000
 8009b24:	04c4b400 	.word	0x04c4b400
 8009b28:	0801ae74 	.word	0x0801ae74
 8009b2c:	20000020 	.word	0x20000020
 8009b30:	20000028 	.word	0x20000028

08009b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 030c 	and.w	r3, r3, #12
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d102      	bne.n	8009b4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b46:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	e047      	b.n	8009bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b4c:	4b27      	ldr	r3, [pc, #156]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 030c 	and.w	r3, r3, #12
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d102      	bne.n	8009b5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b58:	4b25      	ldr	r3, [pc, #148]	@ (8009bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	e03e      	b.n	8009bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009b5e:	4b23      	ldr	r3, [pc, #140]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	2b0c      	cmp	r3, #12
 8009b68:	d136      	bne.n	8009bd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b6a:	4b20      	ldr	r3, [pc, #128]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b74:	4b1d      	ldr	r3, [pc, #116]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	091b      	lsrs	r3, r3, #4
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d10c      	bne.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b88:	4a19      	ldr	r2, [pc, #100]	@ (8009bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b90:	4a16      	ldr	r2, [pc, #88]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b92:	68d2      	ldr	r2, [r2, #12]
 8009b94:	0a12      	lsrs	r2, r2, #8
 8009b96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
 8009b9e:	617b      	str	r3, [r7, #20]
      break;
 8009ba0:	e00c      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ba2:	4a13      	ldr	r2, [pc, #76]	@ (8009bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009baa:	4a10      	ldr	r2, [pc, #64]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bac:	68d2      	ldr	r2, [r2, #12]
 8009bae:	0a12      	lsrs	r2, r2, #8
 8009bb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009bb4:	fb02 f303 	mul.w	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]
      break;
 8009bba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	0e5b      	lsrs	r3, r3, #25
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	e001      	b.n	8009bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009bdc:	693b      	ldr	r3, [r7, #16]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	40021000 	.word	0x40021000
 8009bf0:	00f42400 	.word	0x00f42400

08009bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bf8:	4b03      	ldr	r3, [pc, #12]	@ (8009c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000020 	.word	0x20000020

08009c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009c10:	f7ff fff0 	bl	8009bf4 <HAL_RCC_GetHCLKFreq>
 8009c14:	4602      	mov	r2, r0
 8009c16:	4b06      	ldr	r3, [pc, #24]	@ (8009c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	4904      	ldr	r1, [pc, #16]	@ (8009c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c22:	5ccb      	ldrb	r3, [r1, r3]
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40021000 	.word	0x40021000
 8009c34:	0801ae84 	.word	0x0801ae84

08009c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c3c:	f7ff ffda 	bl	8009bf4 <HAL_RCC_GetHCLKFreq>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b06      	ldr	r3, [pc, #24]	@ (8009c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	0adb      	lsrs	r3, r3, #11
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	4904      	ldr	r1, [pc, #16]	@ (8009c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c4e:	5ccb      	ldrb	r3, [r1, r3]
 8009c50:	f003 031f 	and.w	r3, r3, #31
 8009c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40021000 	.word	0x40021000
 8009c60:	0801ae84 	.word	0x0801ae84

08009c64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	220f      	movs	r2, #15
 8009c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009c74:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f003 0203 	and.w	r2, r3, #3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009c80:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009c98:	4b09      	ldr	r3, [pc, #36]	@ (8009cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	08db      	lsrs	r3, r3, #3
 8009c9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009ca6:	4b07      	ldr	r3, [pc, #28]	@ (8009cc4 <HAL_RCC_GetClockConfig+0x60>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 020f 	and.w	r2, r3, #15
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	601a      	str	r2, [r3, #0]
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40021000 	.word	0x40021000
 8009cc4:	40022000 	.word	0x40022000

08009cc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009cce:	4b1e      	ldr	r3, [pc, #120]	@ (8009d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	091b      	lsrs	r3, r3, #4
 8009cde:	f003 030f 	and.w	r3, r3, #15
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d10c      	bne.n	8009d06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cec:	4a17      	ldr	r2, [pc, #92]	@ (8009d4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf4:	4a14      	ldr	r2, [pc, #80]	@ (8009d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cf6:	68d2      	ldr	r2, [r2, #12]
 8009cf8:	0a12      	lsrs	r2, r2, #8
 8009cfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	617b      	str	r3, [r7, #20]
    break;
 8009d04:	e00c      	b.n	8009d20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d06:	4a11      	ldr	r2, [pc, #68]	@ (8009d4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d10:	68d2      	ldr	r2, [r2, #12]
 8009d12:	0a12      	lsrs	r2, r2, #8
 8009d14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009d18:	fb02 f303 	mul.w	r3, r2, r3
 8009d1c:	617b      	str	r3, [r7, #20]
    break;
 8009d1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d20:	4b09      	ldr	r3, [pc, #36]	@ (8009d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	0e5b      	lsrs	r3, r3, #25
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009d3a:	687b      	ldr	r3, [r7, #4]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	371c      	adds	r7, #28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	40021000 	.word	0x40021000
 8009d4c:	00f42400 	.word	0x00f42400

08009d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d58:	2300      	movs	r3, #0
 8009d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8098 	beq.w	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d72:	4b43      	ldr	r3, [pc, #268]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10d      	bne.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d7e:	4b40      	ldr	r3, [pc, #256]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d82:	4a3f      	ldr	r2, [pc, #252]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d96:	2301      	movs	r3, #1
 8009d98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a39      	ldr	r2, [pc, #228]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009da6:	f7fc f8b9 	bl	8005f1c <HAL_GetTick>
 8009daa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dac:	e009      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dae:	f7fc f8b5 	bl	8005f1c <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d902      	bls.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	74fb      	strb	r3, [r7, #19]
        break;
 8009dc0:	e005      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dc2:	4b30      	ldr	r3, [pc, #192]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0ef      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009dce:	7cfb      	ldrb	r3, [r7, #19]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d159      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d01e      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d019      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009df0:	4b23      	ldr	r3, [pc, #140]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dfc:	4b20      	ldr	r3, [pc, #128]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e02:	4a1f      	ldr	r2, [pc, #124]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e12:	4a1b      	ldr	r2, [pc, #108]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009e1c:	4a18      	ldr	r2, [pc, #96]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d016      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2e:	f7fc f875 	bl	8005f1c <HAL_GetTick>
 8009e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e34:	e00b      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e36:	f7fc f871 	bl	8005f1c <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d902      	bls.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8009e4c:	e006      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0ec      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009e5c:	7cfb      	ldrb	r3, [r7, #19]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e62:	4b07      	ldr	r3, [pc, #28]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e70:	4903      	ldr	r1, [pc, #12]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009e78:	e008      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e7a:	7cfb      	ldrb	r3, [r7, #19]
 8009e7c:	74bb      	strb	r3, [r7, #18]
 8009e7e:	e005      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009e80:	40021000 	.word	0x40021000
 8009e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e88:	7cfb      	ldrb	r3, [r7, #19]
 8009e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e8c:	7c7b      	ldrb	r3, [r7, #17]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d105      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e92:	4ba6      	ldr	r3, [pc, #664]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e96:	4aa5      	ldr	r2, [pc, #660]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb0:	f023 0203 	bic.w	r2, r3, #3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	499c      	ldr	r1, [pc, #624]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ecc:	4b97      	ldr	r3, [pc, #604]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed2:	f023 020c 	bic.w	r2, r3, #12
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	4994      	ldr	r1, [pc, #592]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009eee:	4b8f      	ldr	r3, [pc, #572]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ef4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	498b      	ldr	r1, [pc, #556]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009f10:	4b86      	ldr	r3, [pc, #536]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	4983      	ldr	r1, [pc, #524]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f20:	4313      	orrs	r3, r2
 8009f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0320 	and.w	r3, r3, #32
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f32:	4b7e      	ldr	r3, [pc, #504]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	497a      	ldr	r1, [pc, #488]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f54:	4b75      	ldr	r3, [pc, #468]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	4972      	ldr	r1, [pc, #456]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f76:	4b6d      	ldr	r3, [pc, #436]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	4969      	ldr	r1, [pc, #420]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f98:	4b64      	ldr	r3, [pc, #400]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	4961      	ldr	r1, [pc, #388]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fba:	4b5c      	ldr	r3, [pc, #368]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	4958      	ldr	r1, [pc, #352]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d015      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fdc:	4b53      	ldr	r3, [pc, #332]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	4950      	ldr	r1, [pc, #320]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ffa:	d105      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	4a4a      	ldr	r2, [pc, #296]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a006:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a010:	2b00      	cmp	r3, #0
 800a012:	d015      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a014:	4b45      	ldr	r3, [pc, #276]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a022:	4942      	ldr	r1, [pc, #264]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a024:	4313      	orrs	r3, r2
 800a026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a032:	d105      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a034:	4b3d      	ldr	r3, [pc, #244]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	4a3c      	ldr	r2, [pc, #240]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a03a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a03e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d015      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a04c:	4b37      	ldr	r3, [pc, #220]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a052:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05a:	4934      	ldr	r1, [pc, #208]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a066:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a06a:	d105      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a06c:	4b2f      	ldr	r3, [pc, #188]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4a2e      	ldr	r2, [pc, #184]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a076:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d015      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a084:	4b29      	ldr	r3, [pc, #164]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a08a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	4926      	ldr	r1, [pc, #152]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a094:	4313      	orrs	r3, r2
 800a096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a09e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0a2:	d105      	bne.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0a4:	4b21      	ldr	r3, [pc, #132]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a20      	ldr	r2, [pc, #128]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d015      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ca:	4918      	ldr	r1, [pc, #96]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0da:	d105      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0dc:	4b13      	ldr	r3, [pc, #76]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	4a12      	ldr	r2, [pc, #72]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d015      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a102:	490a      	ldr	r1, [pc, #40]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a104:	4313      	orrs	r3, r2
 800a106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a112:	d105      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4a04      	ldr	r2, [pc, #16]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a11a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a11e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a120:	7cbb      	ldrb	r3, [r7, #18]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	40021000 	.word	0x40021000

0800a130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e09d      	b.n	800a27e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d108      	bne.n	800a15c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a152:	d009      	beq.n	800a168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	61da      	str	r2, [r3, #28]
 800a15a:	e005      	b.n	800a168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7f9 f9e0 	bl	8003548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a19e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a1a8:	d902      	bls.n	800a1b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	e002      	b.n	800a1b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a1be:	d007      	beq.n	800a1d0 <HAL_SPI_Init+0xa0>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a1c8:	d002      	beq.n	800a1d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a212:	ea42 0103 	orr.w	r1, r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	f003 0204 	and.w	r2, r3, #4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a234:	f003 0310 	and.w	r3, r3, #16
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a24c:	ea42 0103 	orr.w	r1, r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a26c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b08a      	sub	sp, #40	@ 0x28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a294:	2301      	movs	r3, #1
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a298:	f7fb fe40 	bl	8005f1c <HAL_GetTick>
 800a29c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a2ac:	887b      	ldrh	r3, [r7, #2]
 800a2ae:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a2b0:	887b      	ldrh	r3, [r7, #2]
 800a2b2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2b4:	7ffb      	ldrb	r3, [r7, #31]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d00c      	beq.n	800a2d4 <HAL_SPI_TransmitReceive+0x4e>
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2c0:	d106      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x4a>
 800a2ca:	7ffb      	ldrb	r3, [r7, #31]
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d001      	beq.n	800a2d4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e1f3      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <HAL_SPI_TransmitReceive+0x60>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <HAL_SPI_TransmitReceive+0x60>
 800a2e0:	887b      	ldrh	r3, [r7, #2]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e1e8      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d101      	bne.n	800a2f8 <HAL_SPI_TransmitReceive+0x72>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e1e1      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d003      	beq.n	800a314 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2205      	movs	r2, #5
 800a310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	887a      	ldrh	r2, [r7, #2]
 800a324:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	887a      	ldrh	r2, [r7, #2]
 800a32c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	887a      	ldrh	r2, [r7, #2]
 800a33a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	887a      	ldrh	r2, [r7, #2]
 800a340:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a356:	d802      	bhi.n	800a35e <HAL_SPI_TransmitReceive+0xd8>
 800a358:	8abb      	ldrh	r3, [r7, #20]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d908      	bls.n	800a370 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a36c:	605a      	str	r2, [r3, #4]
 800a36e:	e007      	b.n	800a380 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a37e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38a:	2b40      	cmp	r3, #64	@ 0x40
 800a38c:	d007      	beq.n	800a39e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a39c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a3a6:	f240 8083 	bls.w	800a4b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_SPI_TransmitReceive+0x132>
 800a3b2:	8afb      	ldrh	r3, [r7, #22]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d16f      	bne.n	800a498 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3bc:	881a      	ldrh	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c8:	1c9a      	adds	r2, r3, #2
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3dc:	e05c      	b.n	800a498 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d11b      	bne.n	800a424 <HAL_SPI_TransmitReceive+0x19e>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d016      	beq.n	800a424 <HAL_SPI_TransmitReceive+0x19e>
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d113      	bne.n	800a424 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a400:	881a      	ldrh	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40c:	1c9a      	adds	r2, r3, #2
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d11c      	bne.n	800a46c <HAL_SPI_TransmitReceive+0x1e6>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d016      	beq.n	800a46c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a448:	b292      	uxth	r2, r2
 800a44a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a450:	1c9a      	adds	r2, r3, #2
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	3b01      	subs	r3, #1
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a468:	2301      	movs	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a46c:	f7fb fd56 	bl	8005f1c <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a478:	429a      	cmp	r2, r3
 800a47a:	d80d      	bhi.n	800a498 <HAL_SPI_TransmitReceive+0x212>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d009      	beq.n	800a498 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e111      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d19d      	bne.n	800a3de <HAL_SPI_TransmitReceive+0x158>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d197      	bne.n	800a3de <HAL_SPI_TransmitReceive+0x158>
 800a4ae:	e0e5      	b.n	800a67c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <HAL_SPI_TransmitReceive+0x23a>
 800a4b8:	8afb      	ldrh	r3, [r7, #22]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	f040 80d1 	bne.w	800a662 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d912      	bls.n	800a4f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ce:	881a      	ldrh	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4da:	1c9a      	adds	r2, r3, #2
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b02      	subs	r3, #2
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4ee:	e0b8      	b.n	800a662 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	7812      	ldrb	r2, [r2, #0]
 800a4fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a516:	e0a4      	b.n	800a662 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b02      	cmp	r3, #2
 800a524:	d134      	bne.n	800a590 <HAL_SPI_TransmitReceive+0x30a>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d02f      	beq.n	800a590 <HAL_SPI_TransmitReceive+0x30a>
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	2b01      	cmp	r3, #1
 800a534:	d12c      	bne.n	800a590 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d912      	bls.n	800a566 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a544:	881a      	ldrh	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a550:	1c9a      	adds	r2, r3, #2
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	3b02      	subs	r3, #2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a564:	e012      	b.n	800a58c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	330c      	adds	r3, #12
 800a570:	7812      	ldrb	r2, [r2, #0]
 800a572:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d148      	bne.n	800a630 <HAL_SPI_TransmitReceive+0x3aa>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d042      	beq.n	800a630 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d923      	bls.n	800a5fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c8:	1c9a      	adds	r2, r3, #2
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3b02      	subs	r3, #2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d81f      	bhi.n	800a62c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5fa:	605a      	str	r2, [r3, #4]
 800a5fc:	e016      	b.n	800a62c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f103 020c 	add.w	r2, r3, #12
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a620:	b29b      	uxth	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a62c:	2301      	movs	r3, #1
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a630:	f7fb fc74 	bl	8005f1c <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d803      	bhi.n	800a648 <HAL_SPI_TransmitReceive+0x3c2>
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a646:	d102      	bne.n	800a64e <HAL_SPI_TransmitReceive+0x3c8>
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e02c      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a666:	b29b      	uxth	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f47f af55 	bne.w	800a518 <HAL_SPI_TransmitReceive+0x292>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a674:	b29b      	uxth	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	f47f af4e 	bne.w	800a518 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a67c:	6a3a      	ldr	r2, [r7, #32]
 800a67e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f93d 	bl	800a900 <SPI_EndRxTxTransaction>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d008      	beq.n	800a69e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e00e      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e000      	b.n	800a6bc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
  }
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3728      	adds	r7, #40	@ 0x28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6d4:	f7fb fc22 	bl	8005f1c <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6dc:	1a9b      	subs	r3, r3, r2
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6e4:	f7fb fc1a 	bl	8005f1c <HAL_GetTick>
 800a6e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6ea:	4b39      	ldr	r3, [pc, #228]	@ (800a7d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	015b      	lsls	r3, r3, #5
 800a6f0:	0d1b      	lsrs	r3, r3, #20
 800a6f2:	69fa      	ldr	r2, [r7, #28]
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6fa:	e054      	b.n	800a7a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a702:	d050      	beq.n	800a7a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a704:	f7fb fc0a 	bl	8005f1c <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	429a      	cmp	r2, r3
 800a712:	d902      	bls.n	800a71a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d13d      	bne.n	800a796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a732:	d111      	bne.n	800a758 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a73c:	d004      	beq.n	800a748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a746:	d107      	bne.n	800a758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a760:	d10f      	bne.n	800a782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e017      	b.n	800a7c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	bf0c      	ite	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	2300      	movne	r3, #0
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d19b      	bne.n	800a6fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000020 	.word	0x20000020

0800a7d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	@ 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a7e6:	f7fb fb99 	bl	8005f1c <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	1a9b      	subs	r3, r3, r2
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a7f6:	f7fb fb91 	bl	8005f1c <HAL_GetTick>
 800a7fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	330c      	adds	r3, #12
 800a802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a804:	4b3d      	ldr	r3, [pc, #244]	@ (800a8fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	00da      	lsls	r2, r3, #3
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	0d1b      	lsrs	r3, r3, #20
 800a814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a816:	fb02 f303 	mul.w	r3, r2, r3
 800a81a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a81c:	e060      	b.n	800a8e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a824:	d107      	bne.n	800a836 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d104      	bne.n	800a836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d050      	beq.n	800a8e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a83e:	f7fb fb6d 	bl	8005f1c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d902      	bls.n	800a854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d13d      	bne.n	800a8d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a86c:	d111      	bne.n	800a892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a876:	d004      	beq.n	800a882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a880:	d107      	bne.n	800a892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89a:	d10f      	bne.n	800a8bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a8ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e010      	b.n	800a8f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d196      	bne.n	800a81e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3728      	adds	r7, #40	@ 0x28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000020 	.word	0x20000020

0800a900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff ff5b 	bl	800a7d4 <SPI_WaitFifoStateUntilTimeout>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a928:	f043 0220 	orr.w	r2, r3, #32
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e027      	b.n	800a984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2200      	movs	r2, #0
 800a93c:	2180      	movs	r1, #128	@ 0x80
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff fec0 	bl	800a6c4 <SPI_WaitFlagStateUntilTimeout>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94e:	f043 0220 	orr.w	r2, r3, #32
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e014      	b.n	800a984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2200      	movs	r2, #0
 800a962:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff ff34 	bl	800a7d4 <SPI_WaitFifoStateUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a976:	f043 0220 	orr.w	r2, r3, #32
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e000      	b.n	800a984 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e049      	b.n	800aa32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7fa fa14 	bl	8004de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	f001 fa0a 	bl	800bde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d001      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e04a      	b.n	800aaea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2202      	movs	r2, #2
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a21      	ldr	r2, [pc, #132]	@ (800aaf8 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d018      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x6c>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa7e:	d013      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x6c>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a1d      	ldr	r2, [pc, #116]	@ (800aafc <HAL_TIM_Base_Start_IT+0xc0>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d00e      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x6c>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ab00 <HAL_TIM_Base_Start_IT+0xc4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d009      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x6c>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1a      	ldr	r2, [pc, #104]	@ (800ab04 <HAL_TIM_Base_Start_IT+0xc8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d004      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x6c>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a19      	ldr	r2, [pc, #100]	@ (800ab08 <HAL_TIM_Base_Start_IT+0xcc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d115      	bne.n	800aad4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689a      	ldr	r2, [r3, #8]
 800aaae:	4b17      	ldr	r3, [pc, #92]	@ (800ab0c <HAL_TIM_Base_Start_IT+0xd0>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b06      	cmp	r3, #6
 800aab8:	d015      	beq.n	800aae6 <HAL_TIM_Base_Start_IT+0xaa>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac0:	d011      	beq.n	800aae6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0201 	orr.w	r2, r2, #1
 800aad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad2:	e008      	b.n	800aae6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0201 	orr.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	e000      	b.n	800aae8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40012c00 	.word	0x40012c00
 800aafc:	40000400 	.word	0x40000400
 800ab00:	40000800 	.word	0x40000800
 800ab04:	40013400 	.word	0x40013400
 800ab08:	40014000 	.word	0x40014000
 800ab0c:	00010007 	.word	0x00010007

0800ab10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e049      	b.n	800abb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f841 	bl	800abbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f001 f948 	bl	800bde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
	...

0800abd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <HAL_TIM_PWM_Start+0x24>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b01      	cmp	r3, #1
 800abee:	bf14      	ite	ne
 800abf0:	2301      	movne	r3, #1
 800abf2:	2300      	moveq	r3, #0
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	e03c      	b.n	800ac72 <HAL_TIM_PWM_Start+0x9e>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d109      	bne.n	800ac12 <HAL_TIM_PWM_Start+0x3e>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	bf14      	ite	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	2300      	moveq	r3, #0
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	e02f      	b.n	800ac72 <HAL_TIM_PWM_Start+0x9e>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d109      	bne.n	800ac2c <HAL_TIM_PWM_Start+0x58>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	bf14      	ite	ne
 800ac24:	2301      	movne	r3, #1
 800ac26:	2300      	moveq	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	e022      	b.n	800ac72 <HAL_TIM_PWM_Start+0x9e>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d109      	bne.n	800ac46 <HAL_TIM_PWM_Start+0x72>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	e015      	b.n	800ac72 <HAL_TIM_PWM_Start+0x9e>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b10      	cmp	r3, #16
 800ac4a:	d109      	bne.n	800ac60 <HAL_TIM_PWM_Start+0x8c>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	e008      	b.n	800ac72 <HAL_TIM_PWM_Start+0x9e>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	bf14      	ite	ne
 800ac6c:	2301      	movne	r3, #1
 800ac6e:	2300      	moveq	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e097      	b.n	800adaa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_PWM_Start+0xb6>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac88:	e023      	b.n	800acd2 <HAL_TIM_PWM_Start+0xfe>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b04      	cmp	r3, #4
 800ac8e:	d104      	bne.n	800ac9a <HAL_TIM_PWM_Start+0xc6>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac98:	e01b      	b.n	800acd2 <HAL_TIM_PWM_Start+0xfe>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b08      	cmp	r3, #8
 800ac9e:	d104      	bne.n	800acaa <HAL_TIM_PWM_Start+0xd6>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aca8:	e013      	b.n	800acd2 <HAL_TIM_PWM_Start+0xfe>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b0c      	cmp	r3, #12
 800acae:	d104      	bne.n	800acba <HAL_TIM_PWM_Start+0xe6>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acb8:	e00b      	b.n	800acd2 <HAL_TIM_PWM_Start+0xfe>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	d104      	bne.n	800acca <HAL_TIM_PWM_Start+0xf6>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acc8:	e003      	b.n	800acd2 <HAL_TIM_PWM_Start+0xfe>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2202      	movs	r2, #2
 800acce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2201      	movs	r2, #1
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	4618      	mov	r0, r3
 800acdc:	f001 fcb0 	bl	800c640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a33      	ldr	r2, [pc, #204]	@ (800adb4 <HAL_TIM_PWM_Start+0x1e0>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d013      	beq.n	800ad12 <HAL_TIM_PWM_Start+0x13e>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a32      	ldr	r2, [pc, #200]	@ (800adb8 <HAL_TIM_PWM_Start+0x1e4>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00e      	beq.n	800ad12 <HAL_TIM_PWM_Start+0x13e>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a30      	ldr	r2, [pc, #192]	@ (800adbc <HAL_TIM_PWM_Start+0x1e8>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d009      	beq.n	800ad12 <HAL_TIM_PWM_Start+0x13e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a2f      	ldr	r2, [pc, #188]	@ (800adc0 <HAL_TIM_PWM_Start+0x1ec>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d004      	beq.n	800ad12 <HAL_TIM_PWM_Start+0x13e>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a2d      	ldr	r2, [pc, #180]	@ (800adc4 <HAL_TIM_PWM_Start+0x1f0>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d101      	bne.n	800ad16 <HAL_TIM_PWM_Start+0x142>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <HAL_TIM_PWM_Start+0x144>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a20      	ldr	r2, [pc, #128]	@ (800adb4 <HAL_TIM_PWM_Start+0x1e0>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d018      	beq.n	800ad68 <HAL_TIM_PWM_Start+0x194>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad3e:	d013      	beq.n	800ad68 <HAL_TIM_PWM_Start+0x194>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a20      	ldr	r2, [pc, #128]	@ (800adc8 <HAL_TIM_PWM_Start+0x1f4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00e      	beq.n	800ad68 <HAL_TIM_PWM_Start+0x194>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a1f      	ldr	r2, [pc, #124]	@ (800adcc <HAL_TIM_PWM_Start+0x1f8>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d009      	beq.n	800ad68 <HAL_TIM_PWM_Start+0x194>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a17      	ldr	r2, [pc, #92]	@ (800adb8 <HAL_TIM_PWM_Start+0x1e4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <HAL_TIM_PWM_Start+0x194>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a16      	ldr	r2, [pc, #88]	@ (800adbc <HAL_TIM_PWM_Start+0x1e8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d115      	bne.n	800ad94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	4b18      	ldr	r3, [pc, #96]	@ (800add0 <HAL_TIM_PWM_Start+0x1fc>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b06      	cmp	r3, #6
 800ad78:	d015      	beq.n	800ada6 <HAL_TIM_PWM_Start+0x1d2>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad80:	d011      	beq.n	800ada6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f042 0201 	orr.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad92:	e008      	b.n	800ada6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e000      	b.n	800ada8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	40012c00 	.word	0x40012c00
 800adb8:	40013400 	.word	0x40013400
 800adbc:	40014000 	.word	0x40014000
 800adc0:	40014400 	.word	0x40014400
 800adc4:	40014800 	.word	0x40014800
 800adc8:	40000400 	.word	0x40000400
 800adcc:	40000800 	.word	0x40000800
 800add0:	00010007 	.word	0x00010007

0800add4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2200      	movs	r2, #0
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f001 fc2a 	bl	800c640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a3e      	ldr	r2, [pc, #248]	@ (800aeec <HAL_TIM_PWM_Stop+0x118>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d013      	beq.n	800ae1e <HAL_TIM_PWM_Stop+0x4a>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a3d      	ldr	r2, [pc, #244]	@ (800aef0 <HAL_TIM_PWM_Stop+0x11c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00e      	beq.n	800ae1e <HAL_TIM_PWM_Stop+0x4a>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a3b      	ldr	r2, [pc, #236]	@ (800aef4 <HAL_TIM_PWM_Stop+0x120>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d009      	beq.n	800ae1e <HAL_TIM_PWM_Stop+0x4a>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a3a      	ldr	r2, [pc, #232]	@ (800aef8 <HAL_TIM_PWM_Stop+0x124>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d004      	beq.n	800ae1e <HAL_TIM_PWM_Stop+0x4a>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a38      	ldr	r2, [pc, #224]	@ (800aefc <HAL_TIM_PWM_Stop+0x128>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d101      	bne.n	800ae22 <HAL_TIM_PWM_Stop+0x4e>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e000      	b.n	800ae24 <HAL_TIM_PWM_Stop+0x50>
 800ae22:	2300      	movs	r3, #0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d017      	beq.n	800ae58 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae32:	4013      	ands	r3, r2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10f      	bne.n	800ae58 <HAL_TIM_PWM_Stop+0x84>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6a1a      	ldr	r2, [r3, #32]
 800ae3e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ae42:	4013      	ands	r3, r2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d107      	bne.n	800ae58 <HAL_TIM_PWM_Stop+0x84>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6a1a      	ldr	r2, [r3, #32]
 800ae5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae62:	4013      	ands	r3, r2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10f      	bne.n	800ae88 <HAL_TIM_PWM_Stop+0xb4>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6a1a      	ldr	r2, [r3, #32]
 800ae6e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ae72:	4013      	ands	r3, r2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d107      	bne.n	800ae88 <HAL_TIM_PWM_Stop+0xb4>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0201 	bic.w	r2, r2, #1
 800ae86:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d104      	bne.n	800ae98 <HAL_TIM_PWM_Stop+0xc4>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae96:	e023      	b.n	800aee0 <HAL_TIM_PWM_Stop+0x10c>
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	d104      	bne.n	800aea8 <HAL_TIM_PWM_Stop+0xd4>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aea6:	e01b      	b.n	800aee0 <HAL_TIM_PWM_Stop+0x10c>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d104      	bne.n	800aeb8 <HAL_TIM_PWM_Stop+0xe4>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aeb6:	e013      	b.n	800aee0 <HAL_TIM_PWM_Stop+0x10c>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b0c      	cmp	r3, #12
 800aebc:	d104      	bne.n	800aec8 <HAL_TIM_PWM_Stop+0xf4>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aec6:	e00b      	b.n	800aee0 <HAL_TIM_PWM_Stop+0x10c>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d104      	bne.n	800aed8 <HAL_TIM_PWM_Stop+0x104>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aed6:	e003      	b.n	800aee0 <HAL_TIM_PWM_Stop+0x10c>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40012c00 	.word	0x40012c00
 800aef0:	40013400 	.word	0x40013400
 800aef4:	40014000 	.word	0x40014000
 800aef8:	40014400 	.word	0x40014400
 800aefc:	40014800 	.word	0x40014800

0800af00 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d109      	bne.n	800af2c <HAL_TIM_PWM_Start_DMA+0x2c>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b02      	cmp	r3, #2
 800af22:	bf0c      	ite	eq
 800af24:	2301      	moveq	r3, #1
 800af26:	2300      	movne	r3, #0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	e03c      	b.n	800afa6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d109      	bne.n	800af46 <HAL_TIM_PWM_Start_DMA+0x46>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	bf0c      	ite	eq
 800af3e:	2301      	moveq	r3, #1
 800af40:	2300      	movne	r3, #0
 800af42:	b2db      	uxtb	r3, r3
 800af44:	e02f      	b.n	800afa6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b08      	cmp	r3, #8
 800af4a:	d109      	bne.n	800af60 <HAL_TIM_PWM_Start_DMA+0x60>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b02      	cmp	r3, #2
 800af56:	bf0c      	ite	eq
 800af58:	2301      	moveq	r3, #1
 800af5a:	2300      	movne	r3, #0
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	e022      	b.n	800afa6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b0c      	cmp	r3, #12
 800af64:	d109      	bne.n	800af7a <HAL_TIM_PWM_Start_DMA+0x7a>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	bf0c      	ite	eq
 800af72:	2301      	moveq	r3, #1
 800af74:	2300      	movne	r3, #0
 800af76:	b2db      	uxtb	r3, r3
 800af78:	e015      	b.n	800afa6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b10      	cmp	r3, #16
 800af7e:	d109      	bne.n	800af94 <HAL_TIM_PWM_Start_DMA+0x94>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	e008      	b.n	800afa6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	bf0c      	ite	eq
 800afa0:	2301      	moveq	r3, #1
 800afa2:	2300      	movne	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800afaa:	2302      	movs	r3, #2
 800afac:	e1a6      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d109      	bne.n	800afc8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	bf0c      	ite	eq
 800afc0:	2301      	moveq	r3, #1
 800afc2:	2300      	movne	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	e03c      	b.n	800b042 <HAL_TIM_PWM_Start_DMA+0x142>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b04      	cmp	r3, #4
 800afcc:	d109      	bne.n	800afe2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	bf0c      	ite	eq
 800afda:	2301      	moveq	r3, #1
 800afdc:	2300      	movne	r3, #0
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	e02f      	b.n	800b042 <HAL_TIM_PWM_Start_DMA+0x142>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b08      	cmp	r3, #8
 800afe6:	d109      	bne.n	800affc <HAL_TIM_PWM_Start_DMA+0xfc>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	bf0c      	ite	eq
 800aff4:	2301      	moveq	r3, #1
 800aff6:	2300      	movne	r3, #0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	e022      	b.n	800b042 <HAL_TIM_PWM_Start_DMA+0x142>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b0c      	cmp	r3, #12
 800b000:	d109      	bne.n	800b016 <HAL_TIM_PWM_Start_DMA+0x116>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	bf0c      	ite	eq
 800b00e:	2301      	moveq	r3, #1
 800b010:	2300      	movne	r3, #0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	e015      	b.n	800b042 <HAL_TIM_PWM_Start_DMA+0x142>
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b10      	cmp	r3, #16
 800b01a:	d109      	bne.n	800b030 <HAL_TIM_PWM_Start_DMA+0x130>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b01      	cmp	r3, #1
 800b026:	bf0c      	ite	eq
 800b028:	2301      	moveq	r3, #1
 800b02a:	2300      	movne	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	e008      	b.n	800b042 <HAL_TIM_PWM_Start_DMA+0x142>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b01      	cmp	r3, #1
 800b03a:	bf0c      	ite	eq
 800b03c:	2301      	moveq	r3, #1
 800b03e:	2300      	movne	r3, #0
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d034      	beq.n	800b0b0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <HAL_TIM_PWM_Start_DMA+0x152>
 800b04c:	887b      	ldrh	r3, [r7, #2]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e152      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start_DMA+0x166>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b064:	e026      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b04      	cmp	r3, #4
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_PWM_Start_DMA+0x176>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b074:	e01e      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_PWM_Start_DMA+0x186>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b084:	e016      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b0c      	cmp	r3, #12
 800b08a:	d104      	bne.n	800b096 <HAL_TIM_PWM_Start_DMA+0x196>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b094:	e00e      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b10      	cmp	r3, #16
 800b09a:	d104      	bne.n	800b0a6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0a4:	e006      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0ae:	e001      	b.n	800b0b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e123      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b0c      	cmp	r3, #12
 800b0b8:	f200 80ae 	bhi.w	800b218 <HAL_TIM_PWM_Start_DMA+0x318>
 800b0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0f9 	.word	0x0800b0f9
 800b0c8:	0800b219 	.word	0x0800b219
 800b0cc:	0800b219 	.word	0x0800b219
 800b0d0:	0800b219 	.word	0x0800b219
 800b0d4:	0800b141 	.word	0x0800b141
 800b0d8:	0800b219 	.word	0x0800b219
 800b0dc:	0800b219 	.word	0x0800b219
 800b0e0:	0800b219 	.word	0x0800b219
 800b0e4:	0800b189 	.word	0x0800b189
 800b0e8:	0800b219 	.word	0x0800b219
 800b0ec:	0800b219 	.word	0x0800b219
 800b0f0:	0800b219 	.word	0x0800b219
 800b0f4:	0800b1d1 	.word	0x0800b1d1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fc:	4a81      	ldr	r2, [pc, #516]	@ (800b304 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b0fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b104:	4a80      	ldr	r2, [pc, #512]	@ (800b308 <HAL_TIM_PWM_Start_DMA+0x408>)
 800b106:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10c:	4a7f      	ldr	r2, [pc, #508]	@ (800b30c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b10e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3334      	adds	r3, #52	@ 0x34
 800b11c:	461a      	mov	r2, r3
 800b11e:	887b      	ldrh	r3, [r7, #2]
 800b120:	f7fc fd68 	bl	8007bf4 <HAL_DMA_Start_IT>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e0e6      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b13c:	60da      	str	r2, [r3, #12]
      break;
 800b13e:	e06e      	b.n	800b21e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	4a6f      	ldr	r2, [pc, #444]	@ (800b304 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b146:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14c:	4a6e      	ldr	r2, [pc, #440]	@ (800b308 <HAL_TIM_PWM_Start_DMA+0x408>)
 800b14e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b154:	4a6d      	ldr	r2, [pc, #436]	@ (800b30c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b156:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3338      	adds	r3, #56	@ 0x38
 800b164:	461a      	mov	r2, r3
 800b166:	887b      	ldrh	r3, [r7, #2]
 800b168:	f7fc fd44 	bl	8007bf4 <HAL_DMA_Start_IT>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e0c2      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b184:	60da      	str	r2, [r3, #12]
      break;
 800b186:	e04a      	b.n	800b21e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18c:	4a5d      	ldr	r2, [pc, #372]	@ (800b304 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b18e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b194:	4a5c      	ldr	r2, [pc, #368]	@ (800b308 <HAL_TIM_PWM_Start_DMA+0x408>)
 800b196:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19c:	4a5b      	ldr	r2, [pc, #364]	@ (800b30c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b19e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	333c      	adds	r3, #60	@ 0x3c
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	887b      	ldrh	r3, [r7, #2]
 800b1b0:	f7fc fd20 	bl	8007bf4 <HAL_DMA_Start_IT>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e09e      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1cc:	60da      	str	r2, [r3, #12]
      break;
 800b1ce:	e026      	b.n	800b21e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d4:	4a4b      	ldr	r2, [pc, #300]	@ (800b304 <HAL_TIM_PWM_Start_DMA+0x404>)
 800b1d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1dc:	4a4a      	ldr	r2, [pc, #296]	@ (800b308 <HAL_TIM_PWM_Start_DMA+0x408>)
 800b1de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e4:	4a49      	ldr	r2, [pc, #292]	@ (800b30c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800b1e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b1ec:	6879      	ldr	r1, [r7, #4]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3340      	adds	r3, #64	@ 0x40
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	887b      	ldrh	r3, [r7, #2]
 800b1f8:	f7fc fcfc 	bl	8007bf4 <HAL_DMA_Start_IT>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e07a      	b.n	800b2fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68da      	ldr	r2, [r3, #12]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b214:	60da      	str	r2, [r3, #12]
      break;
 800b216:	e002      	b.n	800b21e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	75fb      	strb	r3, [r7, #23]
      break;
 800b21c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d16a      	bne.n	800b2fa <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2201      	movs	r2, #1
 800b22a:	68b9      	ldr	r1, [r7, #8]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f001 fa07 	bl	800c640 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a36      	ldr	r2, [pc, #216]	@ (800b310 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d013      	beq.n	800b264 <HAL_TIM_PWM_Start_DMA+0x364>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a34      	ldr	r2, [pc, #208]	@ (800b314 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00e      	beq.n	800b264 <HAL_TIM_PWM_Start_DMA+0x364>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a33      	ldr	r2, [pc, #204]	@ (800b318 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d009      	beq.n	800b264 <HAL_TIM_PWM_Start_DMA+0x364>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a31      	ldr	r2, [pc, #196]	@ (800b31c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d004      	beq.n	800b264 <HAL_TIM_PWM_Start_DMA+0x364>
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a30      	ldr	r2, [pc, #192]	@ (800b320 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d101      	bne.n	800b268 <HAL_TIM_PWM_Start_DMA+0x368>
 800b264:	2301      	movs	r3, #1
 800b266:	e000      	b.n	800b26a <HAL_TIM_PWM_Start_DMA+0x36a>
 800b268:	2300      	movs	r3, #0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d007      	beq.n	800b27e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b27c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a23      	ldr	r2, [pc, #140]	@ (800b310 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d018      	beq.n	800b2ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b290:	d013      	beq.n	800b2ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a23      	ldr	r2, [pc, #140]	@ (800b324 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d00e      	beq.n	800b2ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a21      	ldr	r2, [pc, #132]	@ (800b328 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d009      	beq.n	800b2ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b314 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d004      	beq.n	800b2ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a18      	ldr	r2, [pc, #96]	@ (800b318 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d115      	bne.n	800b2e6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b32c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2b06      	cmp	r3, #6
 800b2ca:	d015      	beq.n	800b2f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2d2:	d011      	beq.n	800b2f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0201 	orr.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e4:	e008      	b.n	800b2f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f042 0201 	orr.w	r2, r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	e000      	b.n	800b2fa <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	0800bcd3 	.word	0x0800bcd3
 800b308:	0800bd7b 	.word	0x0800bd7b
 800b30c:	0800bc41 	.word	0x0800bc41
 800b310:	40012c00 	.word	0x40012c00
 800b314:	40013400 	.word	0x40013400
 800b318:	40014000 	.word	0x40014000
 800b31c:	40014400 	.word	0x40014400
 800b320:	40014800 	.word	0x40014800
 800b324:	40000400 	.word	0x40000400
 800b328:	40000800 	.word	0x40000800
 800b32c:	00010007 	.word	0x00010007

0800b330 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b0c      	cmp	r3, #12
 800b342:	d855      	bhi.n	800b3f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800b344:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800b346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34a:	bf00      	nop
 800b34c:	0800b381 	.word	0x0800b381
 800b350:	0800b3f1 	.word	0x0800b3f1
 800b354:	0800b3f1 	.word	0x0800b3f1
 800b358:	0800b3f1 	.word	0x0800b3f1
 800b35c:	0800b39d 	.word	0x0800b39d
 800b360:	0800b3f1 	.word	0x0800b3f1
 800b364:	0800b3f1 	.word	0x0800b3f1
 800b368:	0800b3f1 	.word	0x0800b3f1
 800b36c:	0800b3b9 	.word	0x0800b3b9
 800b370:	0800b3f1 	.word	0x0800b3f1
 800b374:	0800b3f1 	.word	0x0800b3f1
 800b378:	0800b3f1 	.word	0x0800b3f1
 800b37c:	0800b3d5 	.word	0x0800b3d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68da      	ldr	r2, [r3, #12]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b38e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b394:	4618      	mov	r0, r3
 800b396:	f7fc fd01 	bl	8007d9c <HAL_DMA_Abort_IT>
      break;
 800b39a:	e02c      	b.n	800b3f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fc fcf3 	bl	8007d9c <HAL_DMA_Abort_IT>
      break;
 800b3b6:	e01e      	b.n	800b3f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fc fce5 	bl	8007d9c <HAL_DMA_Abort_IT>
      break;
 800b3d2:	e010      	b.n	800b3f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b3e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fc fcd7 	bl	8007d9c <HAL_DMA_Abort_IT>
      break;
 800b3ee:	e002      	b.n	800b3f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f040 8081 	bne.w	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	4618      	mov	r0, r3
 800b408:	f001 f91a 	bl	800c640 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a3e      	ldr	r2, [pc, #248]	@ (800b50c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d013      	beq.n	800b43e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a3d      	ldr	r2, [pc, #244]	@ (800b510 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d00e      	beq.n	800b43e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a3b      	ldr	r2, [pc, #236]	@ (800b514 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d009      	beq.n	800b43e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a3a      	ldr	r2, [pc, #232]	@ (800b518 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d004      	beq.n	800b43e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a38      	ldr	r2, [pc, #224]	@ (800b51c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d101      	bne.n	800b442 <HAL_TIM_PWM_Stop_DMA+0x112>
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <HAL_TIM_PWM_Stop_DMA+0x114>
 800b442:	2300      	movs	r3, #0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d017      	beq.n	800b478 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6a1a      	ldr	r2, [r3, #32]
 800b44e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b452:	4013      	ands	r3, r2
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10f      	bne.n	800b478 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6a1a      	ldr	r2, [r3, #32]
 800b45e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b462:	4013      	ands	r3, r2
 800b464:	2b00      	cmp	r3, #0
 800b466:	d107      	bne.n	800b478 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b476:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6a1a      	ldr	r2, [r3, #32]
 800b47e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10f      	bne.n	800b4a8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6a1a      	ldr	r2, [r3, #32]
 800b48e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b492:	4013      	ands	r3, r2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d107      	bne.n	800b4a8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0201 	bic.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d104      	bne.n	800b4b8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4b6:	e023      	b.n	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d104      	bne.n	800b4c8 <HAL_TIM_PWM_Stop_DMA+0x198>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4c6:	e01b      	b.n	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b08      	cmp	r3, #8
 800b4cc:	d104      	bne.n	800b4d8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4d6:	e013      	b.n	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b0c      	cmp	r3, #12
 800b4dc:	d104      	bne.n	800b4e8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4e6:	e00b      	b.n	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b10      	cmp	r3, #16
 800b4ec:	d104      	bne.n	800b4f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4f6:	e003      	b.n	800b500 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40012c00 	.word	0x40012c00
 800b510:	40013400 	.word	0x40013400
 800b514:	40014000 	.word	0x40014000
 800b518:	40014400 	.word	0x40014400
 800b51c:	40014800 	.word	0x40014800

0800b520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d020      	beq.n	800b584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01b      	beq.n	800b584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0202 	mvn.w	r2, #2
 800b554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fb40 	bl	800bbf0 <HAL_TIM_IC_CaptureCallback>
 800b570:	e005      	b.n	800b57e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fb32 	bl	800bbdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7f7 fc7d 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d020      	beq.n	800b5d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01b      	beq.n	800b5d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f06f 0204 	mvn.w	r2, #4
 800b5a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fb1a 	bl	800bbf0 <HAL_TIM_IC_CaptureCallback>
 800b5bc:	e005      	b.n	800b5ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb0c 	bl	800bbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7f7 fc57 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d020      	beq.n	800b61c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f003 0308 	and.w	r3, r3, #8
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01b      	beq.n	800b61c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0208 	mvn.w	r2, #8
 800b5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 faf4 	bl	800bbf0 <HAL_TIM_IC_CaptureCallback>
 800b608:	e005      	b.n	800b616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fae6 	bl	800bbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7f7 fc31 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 0310 	and.w	r3, r3, #16
 800b622:	2b00      	cmp	r3, #0
 800b624:	d020      	beq.n	800b668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f003 0310 	and.w	r3, r3, #16
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01b      	beq.n	800b668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f06f 0210 	mvn.w	r2, #16
 800b638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2208      	movs	r2, #8
 800b63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 face 	bl	800bbf0 <HAL_TIM_IC_CaptureCallback>
 800b654:	e005      	b.n	800b662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fac0 	bl	800bbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7f7 fc0b 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00c      	beq.n	800b68c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d007      	beq.n	800b68c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0201 	mvn.w	r2, #1
 800b684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7f7 fddc 	bl	8003244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b692:	2b00      	cmp	r3, #0
 800b694:	d104      	bne.n	800b6a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00c      	beq.n	800b6ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b6b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f875 	bl	800c7a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00c      	beq.n	800b6de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d007      	beq.n	800b6de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 f86d 	bl	800c7b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00c      	beq.n	800b702 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d007      	beq.n	800b702 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fa8b 	bl	800bc18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00c      	beq.n	800b726 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	d007      	beq.n	800b726 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f06f 0220 	mvn.w	r2, #32
 800b71e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f001 f835 	bl	800c790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00c      	beq.n	800b74a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d007      	beq.n	800b74a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 f841 	bl	800c7cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00c      	beq.n	800b76e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 f839 	bl	800c7e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00c      	beq.n	800b792 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d007      	beq.n	800b792 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 f831 	bl	800c7f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00c      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f001 f829 	bl	800c808 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d101      	bne.n	800b7de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e0ff      	b.n	800b9de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b14      	cmp	r3, #20
 800b7ea:	f200 80f0 	bhi.w	800b9ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b849 	.word	0x0800b849
 800b7f8:	0800b9cf 	.word	0x0800b9cf
 800b7fc:	0800b9cf 	.word	0x0800b9cf
 800b800:	0800b9cf 	.word	0x0800b9cf
 800b804:	0800b889 	.word	0x0800b889
 800b808:	0800b9cf 	.word	0x0800b9cf
 800b80c:	0800b9cf 	.word	0x0800b9cf
 800b810:	0800b9cf 	.word	0x0800b9cf
 800b814:	0800b8cb 	.word	0x0800b8cb
 800b818:	0800b9cf 	.word	0x0800b9cf
 800b81c:	0800b9cf 	.word	0x0800b9cf
 800b820:	0800b9cf 	.word	0x0800b9cf
 800b824:	0800b90b 	.word	0x0800b90b
 800b828:	0800b9cf 	.word	0x0800b9cf
 800b82c:	0800b9cf 	.word	0x0800b9cf
 800b830:	0800b9cf 	.word	0x0800b9cf
 800b834:	0800b94d 	.word	0x0800b94d
 800b838:	0800b9cf 	.word	0x0800b9cf
 800b83c:	0800b9cf 	.word	0x0800b9cf
 800b840:	0800b9cf 	.word	0x0800b9cf
 800b844:	0800b98d 	.word	0x0800b98d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68b9      	ldr	r1, [r7, #8]
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 fb64 	bl	800bf1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	699a      	ldr	r2, [r3, #24]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0208 	orr.w	r2, r2, #8
 800b862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	699a      	ldr	r2, [r3, #24]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0204 	bic.w	r2, r2, #4
 800b872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6999      	ldr	r1, [r3, #24]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	691a      	ldr	r2, [r3, #16]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	619a      	str	r2, [r3, #24]
      break;
 800b886:	e0a5      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68b9      	ldr	r1, [r7, #8]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fbd4 	bl	800c03c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	699a      	ldr	r2, [r3, #24]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699a      	ldr	r2, [r3, #24]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6999      	ldr	r1, [r3, #24]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	021a      	lsls	r2, r3, #8
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	619a      	str	r2, [r3, #24]
      break;
 800b8c8:	e084      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68b9      	ldr	r1, [r7, #8]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 fc3d 	bl	800c150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	69da      	ldr	r2, [r3, #28]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f042 0208 	orr.w	r2, r2, #8
 800b8e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	69da      	ldr	r2, [r3, #28]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f022 0204 	bic.w	r2, r2, #4
 800b8f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69d9      	ldr	r1, [r3, #28]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	691a      	ldr	r2, [r3, #16]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	61da      	str	r2, [r3, #28]
      break;
 800b908:	e064      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68b9      	ldr	r1, [r7, #8]
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fca5 	bl	800c260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69da      	ldr	r2, [r3, #28]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	69da      	ldr	r2, [r3, #28]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69d9      	ldr	r1, [r3, #28]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	021a      	lsls	r2, r3, #8
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	61da      	str	r2, [r3, #28]
      break;
 800b94a:	e043      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	4618      	mov	r0, r3
 800b954:	f000 fd0e 	bl	800c374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0208 	orr.w	r2, r2, #8
 800b966:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 0204 	bic.w	r2, r2, #4
 800b976:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	691a      	ldr	r2, [r3, #16]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b98a:	e023      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68b9      	ldr	r1, [r7, #8]
 800b992:	4618      	mov	r0, r3
 800b994:	f000 fd52 	bl	800c43c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	021a      	lsls	r2, r3, #8
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b9cc:	e002      	b.n	800b9d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop

0800b9e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e0de      	b.n	800bbc2 <HAL_TIM_ConfigClockSource+0x1da>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ba22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ba26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a63      	ldr	r2, [pc, #396]	@ (800bbcc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	f000 80a9 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800ba44:	4a61      	ldr	r2, [pc, #388]	@ (800bbcc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	f200 80ae 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba4c:	4a60      	ldr	r2, [pc, #384]	@ (800bbd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	f000 80a1 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800ba54:	4a5e      	ldr	r2, [pc, #376]	@ (800bbd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	f200 80a6 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba5c:	4a5d      	ldr	r2, [pc, #372]	@ (800bbd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	f000 8099 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800ba64:	4a5b      	ldr	r2, [pc, #364]	@ (800bbd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	f200 809e 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba6c:	4a5a      	ldr	r2, [pc, #360]	@ (800bbd8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	f000 8091 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800ba74:	4a58      	ldr	r2, [pc, #352]	@ (800bbd8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	f200 8096 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba80:	f000 8089 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800ba84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba88:	f200 808e 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba90:	d03e      	beq.n	800bb10 <HAL_TIM_ConfigClockSource+0x128>
 800ba92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba96:	f200 8087 	bhi.w	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba9e:	f000 8086 	beq.w	800bbae <HAL_TIM_ConfigClockSource+0x1c6>
 800baa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baa6:	d87f      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800baa8:	2b70      	cmp	r3, #112	@ 0x70
 800baaa:	d01a      	beq.n	800bae2 <HAL_TIM_ConfigClockSource+0xfa>
 800baac:	2b70      	cmp	r3, #112	@ 0x70
 800baae:	d87b      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bab0:	2b60      	cmp	r3, #96	@ 0x60
 800bab2:	d050      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x16e>
 800bab4:	2b60      	cmp	r3, #96	@ 0x60
 800bab6:	d877      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bab8:	2b50      	cmp	r3, #80	@ 0x50
 800baba:	d03c      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x14e>
 800babc:	2b50      	cmp	r3, #80	@ 0x50
 800babe:	d873      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bac0:	2b40      	cmp	r3, #64	@ 0x40
 800bac2:	d058      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x18e>
 800bac4:	2b40      	cmp	r3, #64	@ 0x40
 800bac6:	d86f      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bac8:	2b30      	cmp	r3, #48	@ 0x30
 800baca:	d064      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800bacc:	2b30      	cmp	r3, #48	@ 0x30
 800bace:	d86b      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bad0:	2b20      	cmp	r3, #32
 800bad2:	d060      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800bad4:	2b20      	cmp	r3, #32
 800bad6:	d867      	bhi.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d05c      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800badc:	2b10      	cmp	r3, #16
 800bade:	d05a      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x1ae>
 800bae0:	e062      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800baf2:	f000 fd85 	bl	800c600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bb04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	609a      	str	r2, [r3, #8]
      break;
 800bb0e:	e04f      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb20:	f000 fd6e 	bl	800c600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689a      	ldr	r2, [r3, #8]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb32:	609a      	str	r2, [r3, #8]
      break;
 800bb34:	e03c      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb42:	461a      	mov	r2, r3
 800bb44:	f000 fce0 	bl	800c508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2150      	movs	r1, #80	@ 0x50
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fd39 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bb54:	e02c      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb62:	461a      	mov	r2, r3
 800bb64:	f000 fcff 	bl	800c566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2160      	movs	r1, #96	@ 0x60
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 fd29 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bb74:	e01c      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb82:	461a      	mov	r2, r3
 800bb84:	f000 fcc0 	bl	800c508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2140      	movs	r1, #64	@ 0x40
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 fd19 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bb94:	e00c      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	4610      	mov	r0, r2
 800bba2:	f000 fd10 	bl	800c5c6 <TIM_ITRx_SetConfig>
      break;
 800bba6:	e003      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbac:	e000      	b.n	800bbb0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800bbae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	00100070 	.word	0x00100070
 800bbd0:	00100040 	.word	0x00100040
 800bbd4:	00100030 	.word	0x00100030
 800bbd8:	00100020 	.word	0x00100020

0800bbdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d107      	bne.n	800bc68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc66:	e02a      	b.n	800bcbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d107      	bne.n	800bc82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2202      	movs	r2, #2
 800bc76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc80:	e01d      	b.n	800bcbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d107      	bne.n	800bc9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2204      	movs	r2, #4
 800bc90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc9a:	e010      	b.n	800bcbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d107      	bne.n	800bcb6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcb4:	e003      	b.n	800bcbe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff ffb4 	bl	800bc2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	771a      	strb	r2, [r3, #28]
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d10b      	bne.n	800bd02 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d136      	bne.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd00:	e031      	b.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d10b      	bne.n	800bd24 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d125      	bne.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd22:	e020      	b.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d10b      	bne.n	800bd46 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2204      	movs	r2, #4
 800bd32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d114      	bne.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd44:	e00f      	b.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d10a      	bne.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2208      	movs	r2, #8
 800bd54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7f7 f886 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	771a      	strb	r2, [r3, #28]
}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d103      	bne.n	800bd9a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2201      	movs	r2, #1
 800bd96:	771a      	strb	r2, [r3, #28]
 800bd98:	e019      	b.n	800bdce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d103      	bne.n	800bdac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2202      	movs	r2, #2
 800bda8:	771a      	strb	r2, [r3, #28]
 800bdaa:	e010      	b.n	800bdce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d103      	bne.n	800bdbe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2204      	movs	r2, #4
 800bdba:	771a      	strb	r2, [r3, #28]
 800bdbc:	e007      	b.n	800bdce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d102      	bne.n	800bdce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2208      	movs	r2, #8
 800bdcc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7ff ff18 	bl	800bc04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	771a      	strb	r2, [r3, #28]
}
 800bdda:	bf00      	nop
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a42      	ldr	r2, [pc, #264]	@ (800bf00 <TIM_Base_SetConfig+0x11c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00f      	beq.n	800be1c <TIM_Base_SetConfig+0x38>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be02:	d00b      	beq.n	800be1c <TIM_Base_SetConfig+0x38>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a3f      	ldr	r2, [pc, #252]	@ (800bf04 <TIM_Base_SetConfig+0x120>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d007      	beq.n	800be1c <TIM_Base_SetConfig+0x38>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a3e      	ldr	r2, [pc, #248]	@ (800bf08 <TIM_Base_SetConfig+0x124>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d003      	beq.n	800be1c <TIM_Base_SetConfig+0x38>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a3d      	ldr	r2, [pc, #244]	@ (800bf0c <TIM_Base_SetConfig+0x128>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d108      	bne.n	800be2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a33      	ldr	r2, [pc, #204]	@ (800bf00 <TIM_Base_SetConfig+0x11c>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d01b      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be3c:	d017      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a30      	ldr	r2, [pc, #192]	@ (800bf04 <TIM_Base_SetConfig+0x120>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d013      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a2f      	ldr	r2, [pc, #188]	@ (800bf08 <TIM_Base_SetConfig+0x124>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d00f      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a2e      	ldr	r2, [pc, #184]	@ (800bf0c <TIM_Base_SetConfig+0x128>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d00b      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a2d      	ldr	r2, [pc, #180]	@ (800bf10 <TIM_Base_SetConfig+0x12c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d007      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a2c      	ldr	r2, [pc, #176]	@ (800bf14 <TIM_Base_SetConfig+0x130>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d003      	beq.n	800be6e <TIM_Base_SetConfig+0x8a>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a2b      	ldr	r2, [pc, #172]	@ (800bf18 <TIM_Base_SetConfig+0x134>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d108      	bne.n	800be80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	4313      	orrs	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a16      	ldr	r2, [pc, #88]	@ (800bf00 <TIM_Base_SetConfig+0x11c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00f      	beq.n	800becc <TIM_Base_SetConfig+0xe8>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a17      	ldr	r2, [pc, #92]	@ (800bf0c <TIM_Base_SetConfig+0x128>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d00b      	beq.n	800becc <TIM_Base_SetConfig+0xe8>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a16      	ldr	r2, [pc, #88]	@ (800bf10 <TIM_Base_SetConfig+0x12c>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d007      	beq.n	800becc <TIM_Base_SetConfig+0xe8>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a15      	ldr	r2, [pc, #84]	@ (800bf14 <TIM_Base_SetConfig+0x130>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_Base_SetConfig+0xe8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a14      	ldr	r2, [pc, #80]	@ (800bf18 <TIM_Base_SetConfig+0x134>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d103      	bne.n	800bed4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	691a      	ldr	r2, [r3, #16]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d105      	bne.n	800bef2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	f023 0201 	bic.w	r2, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	611a      	str	r2, [r3, #16]
  }
}
 800bef2:	bf00      	nop
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	40012c00 	.word	0x40012c00
 800bf04:	40000400 	.word	0x40000400
 800bf08:	40000800 	.word	0x40000800
 800bf0c:	40013400 	.word	0x40013400
 800bf10:	40014000 	.word	0x40014000
 800bf14:	40014400 	.word	0x40014400
 800bf18:	40014800 	.word	0x40014800

0800bf1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	f023 0201 	bic.w	r2, r3, #1
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f023 0303 	bic.w	r3, r3, #3
 800bf56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f023 0302 	bic.w	r3, r3, #2
 800bf68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a2c      	ldr	r2, [pc, #176]	@ (800c028 <TIM_OC1_SetConfig+0x10c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d00f      	beq.n	800bf9c <TIM_OC1_SetConfig+0x80>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a2b      	ldr	r2, [pc, #172]	@ (800c02c <TIM_OC1_SetConfig+0x110>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d00b      	beq.n	800bf9c <TIM_OC1_SetConfig+0x80>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a2a      	ldr	r2, [pc, #168]	@ (800c030 <TIM_OC1_SetConfig+0x114>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d007      	beq.n	800bf9c <TIM_OC1_SetConfig+0x80>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a29      	ldr	r2, [pc, #164]	@ (800c034 <TIM_OC1_SetConfig+0x118>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d003      	beq.n	800bf9c <TIM_OC1_SetConfig+0x80>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a28      	ldr	r2, [pc, #160]	@ (800c038 <TIM_OC1_SetConfig+0x11c>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d10c      	bne.n	800bfb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f023 0308 	bic.w	r3, r3, #8
 800bfa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f023 0304 	bic.w	r3, r3, #4
 800bfb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a1b      	ldr	r2, [pc, #108]	@ (800c028 <TIM_OC1_SetConfig+0x10c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00f      	beq.n	800bfde <TIM_OC1_SetConfig+0xc2>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a1a      	ldr	r2, [pc, #104]	@ (800c02c <TIM_OC1_SetConfig+0x110>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00b      	beq.n	800bfde <TIM_OC1_SetConfig+0xc2>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a19      	ldr	r2, [pc, #100]	@ (800c030 <TIM_OC1_SetConfig+0x114>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d007      	beq.n	800bfde <TIM_OC1_SetConfig+0xc2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a18      	ldr	r2, [pc, #96]	@ (800c034 <TIM_OC1_SetConfig+0x118>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d003      	beq.n	800bfde <TIM_OC1_SetConfig+0xc2>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a17      	ldr	r2, [pc, #92]	@ (800c038 <TIM_OC1_SetConfig+0x11c>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d111      	bne.n	800c002 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bfec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	4313      	orrs	r3, r2
 800c000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	621a      	str	r2, [r3, #32]
}
 800c01c:	bf00      	nop
 800c01e:	371c      	adds	r7, #28
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	40012c00 	.word	0x40012c00
 800c02c:	40013400 	.word	0x40013400
 800c030:	40014000 	.word	0x40014000
 800c034:	40014400 	.word	0x40014400
 800c038:	40014800 	.word	0x40014800

0800c03c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	f023 0210 	bic.w	r2, r3, #16
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c06a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f023 0320 	bic.w	r3, r3, #32
 800c08a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a28      	ldr	r2, [pc, #160]	@ (800c13c <TIM_OC2_SetConfig+0x100>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d003      	beq.n	800c0a8 <TIM_OC2_SetConfig+0x6c>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a27      	ldr	r2, [pc, #156]	@ (800c140 <TIM_OC2_SetConfig+0x104>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d10d      	bne.n	800c0c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a1d      	ldr	r2, [pc, #116]	@ (800c13c <TIM_OC2_SetConfig+0x100>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00f      	beq.n	800c0ec <TIM_OC2_SetConfig+0xb0>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a1c      	ldr	r2, [pc, #112]	@ (800c140 <TIM_OC2_SetConfig+0x104>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00b      	beq.n	800c0ec <TIM_OC2_SetConfig+0xb0>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800c144 <TIM_OC2_SetConfig+0x108>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d007      	beq.n	800c0ec <TIM_OC2_SetConfig+0xb0>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a1a      	ldr	r2, [pc, #104]	@ (800c148 <TIM_OC2_SetConfig+0x10c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d003      	beq.n	800c0ec <TIM_OC2_SetConfig+0xb0>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a19      	ldr	r2, [pc, #100]	@ (800c14c <TIM_OC2_SetConfig+0x110>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d113      	bne.n	800c114 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	4313      	orrs	r3, r2
 800c106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	4313      	orrs	r3, r2
 800c112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	40012c00 	.word	0x40012c00
 800c140:	40013400 	.word	0x40013400
 800c144:	40014000 	.word	0x40014000
 800c148:	40014400 	.word	0x40014400
 800c14c:	40014800 	.word	0x40014800

0800c150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c17e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 0303 	bic.w	r3, r3, #3
 800c18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c19c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a27      	ldr	r2, [pc, #156]	@ (800c24c <TIM_OC3_SetConfig+0xfc>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d003      	beq.n	800c1ba <TIM_OC3_SetConfig+0x6a>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a26      	ldr	r2, [pc, #152]	@ (800c250 <TIM_OC3_SetConfig+0x100>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d10d      	bne.n	800c1d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	021b      	lsls	r3, r3, #8
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c24c <TIM_OC3_SetConfig+0xfc>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00f      	beq.n	800c1fe <TIM_OC3_SetConfig+0xae>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800c250 <TIM_OC3_SetConfig+0x100>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d00b      	beq.n	800c1fe <TIM_OC3_SetConfig+0xae>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a1a      	ldr	r2, [pc, #104]	@ (800c254 <TIM_OC3_SetConfig+0x104>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d007      	beq.n	800c1fe <TIM_OC3_SetConfig+0xae>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a19      	ldr	r2, [pc, #100]	@ (800c258 <TIM_OC3_SetConfig+0x108>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d003      	beq.n	800c1fe <TIM_OC3_SetConfig+0xae>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a18      	ldr	r2, [pc, #96]	@ (800c25c <TIM_OC3_SetConfig+0x10c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d113      	bne.n	800c226 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c20c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	4313      	orrs	r3, r2
 800c218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	4313      	orrs	r3, r2
 800c224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	693a      	ldr	r2, [r7, #16]
 800c22a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	621a      	str	r2, [r3, #32]
}
 800c240:	bf00      	nop
 800c242:	371c      	adds	r7, #28
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	40012c00 	.word	0x40012c00
 800c250:	40013400 	.word	0x40013400
 800c254:	40014000 	.word	0x40014000
 800c258:	40014400 	.word	0x40014400
 800c25c:	40014800 	.word	0x40014800

0800c260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c260:	b480      	push	{r7}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c28e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c2ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	031b      	lsls	r3, r3, #12
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a28      	ldr	r2, [pc, #160]	@ (800c360 <TIM_OC4_SetConfig+0x100>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d003      	beq.n	800c2cc <TIM_OC4_SetConfig+0x6c>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a27      	ldr	r2, [pc, #156]	@ (800c364 <TIM_OC4_SetConfig+0x104>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d10d      	bne.n	800c2e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	031b      	lsls	r3, r3, #12
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c360 <TIM_OC4_SetConfig+0x100>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d00f      	beq.n	800c310 <TIM_OC4_SetConfig+0xb0>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a1c      	ldr	r2, [pc, #112]	@ (800c364 <TIM_OC4_SetConfig+0x104>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d00b      	beq.n	800c310 <TIM_OC4_SetConfig+0xb0>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c368 <TIM_OC4_SetConfig+0x108>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d007      	beq.n	800c310 <TIM_OC4_SetConfig+0xb0>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a1a      	ldr	r2, [pc, #104]	@ (800c36c <TIM_OC4_SetConfig+0x10c>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d003      	beq.n	800c310 <TIM_OC4_SetConfig+0xb0>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a19      	ldr	r2, [pc, #100]	@ (800c370 <TIM_OC4_SetConfig+0x110>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d113      	bne.n	800c338 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c316:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c31e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	019b      	lsls	r3, r3, #6
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4313      	orrs	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	019b      	lsls	r3, r3, #6
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	4313      	orrs	r3, r2
 800c336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	621a      	str	r2, [r3, #32]
}
 800c352:	bf00      	nop
 800c354:	371c      	adds	r7, #28
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40012c00 	.word	0x40012c00
 800c364:	40013400 	.word	0x40013400
 800c368:	40014000 	.word	0x40014000
 800c36c:	40014400 	.word	0x40014400
 800c370:	40014800 	.word	0x40014800

0800c374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a1b      	ldr	r3, [r3, #32]
 800c388:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c3b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	041b      	lsls	r3, r3, #16
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a17      	ldr	r2, [pc, #92]	@ (800c428 <TIM_OC5_SetConfig+0xb4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00f      	beq.n	800c3ee <TIM_OC5_SetConfig+0x7a>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a16      	ldr	r2, [pc, #88]	@ (800c42c <TIM_OC5_SetConfig+0xb8>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d00b      	beq.n	800c3ee <TIM_OC5_SetConfig+0x7a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a15      	ldr	r2, [pc, #84]	@ (800c430 <TIM_OC5_SetConfig+0xbc>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d007      	beq.n	800c3ee <TIM_OC5_SetConfig+0x7a>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a14      	ldr	r2, [pc, #80]	@ (800c434 <TIM_OC5_SetConfig+0xc0>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d003      	beq.n	800c3ee <TIM_OC5_SetConfig+0x7a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a13      	ldr	r2, [pc, #76]	@ (800c438 <TIM_OC5_SetConfig+0xc4>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d109      	bne.n	800c402 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	021b      	lsls	r3, r3, #8
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	697a      	ldr	r2, [r7, #20]
 800c406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	621a      	str	r2, [r3, #32]
}
 800c41c:	bf00      	nop
 800c41e:	371c      	adds	r7, #28
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr
 800c428:	40012c00 	.word	0x40012c00
 800c42c:	40013400 	.word	0x40013400
 800c430:	40014000 	.word	0x40014000
 800c434:	40014400 	.word	0x40014400
 800c438:	40014800 	.word	0x40014800

0800c43c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b087      	sub	sp, #28
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c46a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	021b      	lsls	r3, r3, #8
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	051b      	lsls	r3, r3, #20
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a18      	ldr	r2, [pc, #96]	@ (800c4f4 <TIM_OC6_SetConfig+0xb8>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d00f      	beq.n	800c4b8 <TIM_OC6_SetConfig+0x7c>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a17      	ldr	r2, [pc, #92]	@ (800c4f8 <TIM_OC6_SetConfig+0xbc>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d00b      	beq.n	800c4b8 <TIM_OC6_SetConfig+0x7c>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a16      	ldr	r2, [pc, #88]	@ (800c4fc <TIM_OC6_SetConfig+0xc0>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d007      	beq.n	800c4b8 <TIM_OC6_SetConfig+0x7c>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a15      	ldr	r2, [pc, #84]	@ (800c500 <TIM_OC6_SetConfig+0xc4>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d003      	beq.n	800c4b8 <TIM_OC6_SetConfig+0x7c>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a14      	ldr	r2, [pc, #80]	@ (800c504 <TIM_OC6_SetConfig+0xc8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d109      	bne.n	800c4cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c4be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	029b      	lsls	r3, r3, #10
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	621a      	str	r2, [r3, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	40012c00 	.word	0x40012c00
 800c4f8:	40013400 	.word	0x40013400
 800c4fc:	40014000 	.word	0x40014000
 800c500:	40014400 	.word	0x40014400
 800c504:	40014800 	.word	0x40014800

0800c508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c508:	b480      	push	{r7}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	f023 0201 	bic.w	r2, r3, #1
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f023 030a 	bic.w	r3, r3, #10
 800c544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	621a      	str	r2, [r3, #32]
}
 800c55a:	bf00      	nop
 800c55c:	371c      	adds	r7, #28
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c566:	b480      	push	{r7}
 800c568:	b087      	sub	sp, #28
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	f023 0210 	bic.w	r2, r3, #16
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	031b      	lsls	r3, r3, #12
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c5a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	621a      	str	r2, [r3, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b085      	sub	sp, #20
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c5dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	f043 0307 	orr.w	r3, r3, #7
 800c5ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	609a      	str	r2, [r3, #8]
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c61a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	021a      	lsls	r2, r3, #8
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	431a      	orrs	r2, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	4313      	orrs	r3, r2
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	609a      	str	r2, [r3, #8]
}
 800c634:	bf00      	nop
 800c636:	371c      	adds	r7, #28
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f003 031f 	and.w	r3, r3, #31
 800c652:	2201      	movs	r2, #1
 800c654:	fa02 f303 	lsl.w	r3, r2, r3
 800c658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a1a      	ldr	r2, [r3, #32]
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a1a      	ldr	r2, [r3, #32]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	f003 031f 	and.w	r3, r3, #31
 800c672:	6879      	ldr	r1, [r7, #4]
 800c674:	fa01 f303 	lsl.w	r3, r1, r3
 800c678:	431a      	orrs	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	621a      	str	r2, [r3, #32]
}
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d101      	bne.n	800c6a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	e065      	b.n	800c770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d004      	beq.n	800c6d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d108      	bne.n	800c6ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c6de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c6f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a1b      	ldr	r2, [pc, #108]	@ (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d018      	beq.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c71a:	d013      	beq.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a18      	ldr	r2, [pc, #96]	@ (800c784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d00e      	beq.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a17      	ldr	r2, [pc, #92]	@ (800c788 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d009      	beq.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a12      	ldr	r2, [pc, #72]	@ (800c780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d004      	beq.n	800c744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a13      	ldr	r2, [pc, #76]	@ (800c78c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d10c      	bne.n	800c75e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c74a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	4313      	orrs	r3, r2
 800c754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	40012c00 	.word	0x40012c00
 800c780:	40013400 	.word	0x40013400
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40014000 	.word	0x40014000

0800c790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e042      	b.n	800c8b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c834:	2b00      	cmp	r3, #0
 800c836:	d106      	bne.n	800c846 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7f8 fc3f 	bl	80050c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2224      	movs	r2, #36	@ 0x24
 800c84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 0201 	bic.w	r2, r2, #1
 800c85c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f001 f8be 	bl	800d9e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fdef 	bl	800d450 <UART_SetConfig>
 800c872:	4603      	mov	r3, r0
 800c874:	2b01      	cmp	r3, #1
 800c876:	d101      	bne.n	800c87c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e01b      	b.n	800c8b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c88a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c89a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f042 0201 	orr.w	r2, r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 f93d 	bl	800db2c <UART_CheckIdleState>
 800c8b2:	4603      	mov	r3, r0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	@ 0x28
 800c8c0:	af02      	add	r7, sp, #8
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d17b      	bne.n	800c9ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <HAL_UART_Transmit+0x26>
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e074      	b.n	800c9d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2221      	movs	r2, #33	@ 0x21
 800c8f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8f6:	f7f9 fb11 	bl	8005f1c <HAL_GetTick>
 800c8fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	88fa      	ldrh	r2, [r7, #6]
 800c900:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	88fa      	ldrh	r2, [r7, #6]
 800c908:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c914:	d108      	bne.n	800c928 <HAL_UART_Transmit+0x6c>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d104      	bne.n	800c928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	61bb      	str	r3, [r7, #24]
 800c926:	e003      	b.n	800c930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c92c:	2300      	movs	r3, #0
 800c92e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c930:	e030      	b.n	800c994 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2200      	movs	r2, #0
 800c93a:	2180      	movs	r1, #128	@ 0x80
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f001 f99f 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d005      	beq.n	800c954 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e03d      	b.n	800c9d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10b      	bne.n	800c972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c968:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	3302      	adds	r3, #2
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	e007      	b.n	800c982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	3301      	adds	r3, #1
 800c980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c988:	b29b      	uxth	r3, r3
 800c98a:	3b01      	subs	r3, #1
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1c8      	bne.n	800c932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	2140      	movs	r1, #64	@ 0x40
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f001 f968 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2220      	movs	r2, #32
 800c9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e006      	b.n	800c9d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e000      	b.n	800c9d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c9ce:	2302      	movs	r3, #2
  }
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08a      	sub	sp, #40	@ 0x28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9ec:	2b20      	cmp	r3, #32
 800c9ee:	d167      	bne.n	800cac0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <HAL_UART_Transmit_DMA+0x24>
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e060      	b.n	800cac2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	88fa      	ldrh	r2, [r7, #6]
 800ca0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	88fa      	ldrh	r2, [r7, #6]
 800ca12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2221      	movs	r2, #33	@ 0x21
 800ca22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d028      	beq.n	800ca80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca32:	4a26      	ldr	r2, [pc, #152]	@ (800cacc <HAL_UART_Transmit_DMA+0xf4>)
 800ca34:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca3a:	4a25      	ldr	r2, [pc, #148]	@ (800cad0 <HAL_UART_Transmit_DMA+0xf8>)
 800ca3c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca42:	4a24      	ldr	r2, [pc, #144]	@ (800cad4 <HAL_UART_Transmit_DMA+0xfc>)
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca56:	4619      	mov	r1, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3328      	adds	r3, #40	@ 0x28
 800ca5e:	461a      	mov	r2, r3
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	f7fb f8c7 	bl	8007bf4 <HAL_DMA_Start_IT>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2210      	movs	r2, #16
 800ca70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e020      	b.n	800cac2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2240      	movs	r2, #64	@ 0x40
 800ca86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	e853 3f00 	ldrex	r3, [r3]
 800ca96:	613b      	str	r3, [r7, #16]
   return(result);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3308      	adds	r3, #8
 800caa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caa8:	623a      	str	r2, [r7, #32]
 800caaa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caac:	69f9      	ldr	r1, [r7, #28]
 800caae:	6a3a      	ldr	r2, [r7, #32]
 800cab0:	e841 2300 	strex	r3, r2, [r1]
 800cab4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1e5      	bne.n	800ca88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e000      	b.n	800cac2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cac0:	2302      	movs	r3, #2
  }
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	@ 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	0800dff7 	.word	0x0800dff7
 800cad0:	0800e091 	.word	0x0800e091
 800cad4:	0800e217 	.word	0x0800e217

0800cad8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08a      	sub	sp, #40	@ 0x28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	4613      	mov	r3, r2
 800cae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800caec:	2b20      	cmp	r3, #32
 800caee:	d137      	bne.n	800cb60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d002      	beq.n	800cafc <HAL_UART_Receive_DMA+0x24>
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e030      	b.n	800cb62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a18      	ldr	r2, [pc, #96]	@ (800cb6c <HAL_UART_Receive_DMA+0x94>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d01f      	beq.n	800cb50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d018      	beq.n	800cb50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	623b      	str	r3, [r7, #32]
 800cb3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	69f9      	ldr	r1, [r7, #28]
 800cb42:	6a3a      	ldr	r2, [r7, #32]
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e6      	bne.n	800cb1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb50:	88fb      	ldrh	r3, [r7, #6]
 800cb52:	461a      	mov	r2, r3
 800cb54:	68b9      	ldr	r1, [r7, #8]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f001 f900 	bl	800dd5c <UART_Start_Receive_DMA>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	e000      	b.n	800cb62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cb60:	2302      	movs	r3, #2
  }
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3728      	adds	r7, #40	@ 0x28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	40008000 	.word	0x40008000

0800cb70 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b0a0      	sub	sp, #128	@ 0x80
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cb86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb88:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800cb8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	461a      	mov	r2, r3
 800cb94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cb96:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb98:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cb9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e6      	bne.n	800cb78 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbb4:	e853 3f00 	ldrex	r3, [r3]
 800cbb8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbbc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800cbc0:	f023 0301 	bic.w	r3, r3, #1
 800cbc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cbce:	657a      	str	r2, [r7, #84]	@ 0x54
 800cbd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cbd6:	e841 2300 	strex	r3, r2, [r1]
 800cbda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cbdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1e3      	bne.n	800cbaa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d118      	bne.n	800cc1c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	f023 0310 	bic.w	r3, r3, #16
 800cbfe:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc08:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc10:	e841 2300 	strex	r3, r2, [r1]
 800cc14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e6      	bne.n	800cbea <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc26:	2b80      	cmp	r3, #128	@ 0x80
 800cc28:	d137      	bne.n	800cc9a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3308      	adds	r3, #8
 800cc30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	e853 3f00 	ldrex	r3, [r3]
 800cc38:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc40:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3308      	adds	r3, #8
 800cc48:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cc4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc52:	e841 2300 	strex	r3, r2, [r1]
 800cc56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1e5      	bne.n	800cc2a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d019      	beq.n	800cc9a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fb f839 	bl	8007cea <HAL_DMA_Abort>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fb f9a0 	bl	8007fc8 <HAL_DMA_GetError>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b20      	cmp	r3, #32
 800cc8c:	d105      	bne.n	800cc9a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2210      	movs	r2, #16
 800cc92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e073      	b.n	800cd82 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cca4:	2b40      	cmp	r3, #64	@ 0x40
 800cca6:	d13b      	bne.n	800cd20 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	e853 3f00 	ldrex	r3, [r3]
 800ccb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccc8:	61ba      	str	r2, [r7, #24]
 800ccca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cccc:	6979      	ldr	r1, [r7, #20]
 800ccce:	69ba      	ldr	r2, [r7, #24]
 800ccd0:	e841 2300 	strex	r3, r2, [r1]
 800ccd4:	613b      	str	r3, [r7, #16]
   return(result);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1e5      	bne.n	800cca8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d01c      	beq.n	800cd20 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccec:	2200      	movs	r2, #0
 800ccee:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fa fff7 	bl	8007cea <HAL_DMA_Abort>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00e      	beq.n	800cd20 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fb f95d 	bl	8007fc8 <HAL_DMA_GetError>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	d105      	bne.n	800cd20 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2210      	movs	r2, #16
 800cd18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e030      	b.n	800cd82 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	220f      	movs	r2, #15
 800cd36:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd40:	d107      	bne.n	800cd52 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	699a      	ldr	r2, [r3, #24]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0210 	orr.w	r2, r2, #16
 800cd50:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	699a      	ldr	r2, [r3, #24]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f042 0208 	orr.w	r2, r2, #8
 800cd60:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3780      	adds	r7, #128	@ 0x80
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b0ba      	sub	sp, #232	@ 0xe8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cdb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cdba:	4013      	ands	r3, r2
 800cdbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cdc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d11b      	bne.n	800ce00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdcc:	f003 0320 	and.w	r3, r3, #32
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d015      	beq.n	800ce00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdd8:	f003 0320 	and.w	r3, r3, #32
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d105      	bne.n	800cdec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cde0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cde4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d009      	beq.n	800ce00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 8300 	beq.w	800d3f6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	4798      	blx	r3
      }
      return;
 800cdfe:	e2fa      	b.n	800d3f6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 8123 	beq.w	800d050 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ce0e:	4b8d      	ldr	r3, [pc, #564]	@ (800d044 <HAL_UART_IRQHandler+0x2b8>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d106      	bne.n	800ce24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ce1a:	4b8b      	ldr	r3, [pc, #556]	@ (800d048 <HAL_UART_IRQHandler+0x2bc>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 8116 	beq.w	800d050 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d011      	beq.n	800ce54 <HAL_UART_IRQHandler+0xc8>
 800ce30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2201      	movs	r2, #1
 800ce42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce4a:	f043 0201 	orr.w	r2, r3, #1
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d011      	beq.n	800ce84 <HAL_UART_IRQHandler+0xf8>
 800ce60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2202      	movs	r2, #2
 800ce72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce7a:	f043 0204 	orr.w	r2, r3, #4
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d011      	beq.n	800ceb4 <HAL_UART_IRQHandler+0x128>
 800ce90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2204      	movs	r2, #4
 800cea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceaa:	f043 0202 	orr.w	r2, r3, #2
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ceb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb8:	f003 0308 	and.w	r3, r3, #8
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d017      	beq.n	800cef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d105      	bne.n	800ced8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cecc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ced0:	4b5c      	ldr	r3, [pc, #368]	@ (800d044 <HAL_UART_IRQHandler+0x2b8>)
 800ced2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00b      	beq.n	800cef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2208      	movs	r2, #8
 800cede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cee6:	f043 0208 	orr.w	r2, r3, #8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d012      	beq.n	800cf22 <HAL_UART_IRQHandler+0x196>
 800cefc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00c      	beq.n	800cf22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf18:	f043 0220 	orr.w	r2, r3, #32
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 8266 	beq.w	800d3fa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf32:	f003 0320 	and.w	r3, r3, #32
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d013      	beq.n	800cf62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf76:	2b40      	cmp	r3, #64	@ 0x40
 800cf78:	d005      	beq.n	800cf86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d054      	beq.n	800d030 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 ffcf 	bl	800df2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf96:	2b40      	cmp	r3, #64	@ 0x40
 800cf98:	d146      	bne.n	800d028 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfa8:	e853 3f00 	ldrex	r3, [r3]
 800cfac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cfb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfd6:	e841 2300 	strex	r3, r2, [r1]
 800cfda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1d9      	bne.n	800cf9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d017      	beq.n	800d020 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff6:	4a15      	ldr	r2, [pc, #84]	@ (800d04c <HAL_UART_IRQHandler+0x2c0>)
 800cff8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d000:	4618      	mov	r0, r3
 800d002:	f7fa fecb 	bl	8007d9c <HAL_DMA_Abort_IT>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d019      	beq.n	800d040 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d01a:	4610      	mov	r0, r2
 800d01c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d01e:	e00f      	b.n	800d040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f9ff 	bl	800d424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d026:	e00b      	b.n	800d040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f9fb 	bl	800d424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d02e:	e007      	b.n	800d040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f9f7 	bl	800d424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d03e:	e1dc      	b.n	800d3fa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d040:	bf00      	nop
    return;
 800d042:	e1da      	b.n	800d3fa <HAL_UART_IRQHandler+0x66e>
 800d044:	10000001 	.word	0x10000001
 800d048:	04000120 	.word	0x04000120
 800d04c:	0800e297 	.word	0x0800e297

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d054:	2b01      	cmp	r3, #1
 800d056:	f040 8170 	bne.w	800d33a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d05e:	f003 0310 	and.w	r3, r3, #16
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 8169 	beq.w	800d33a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d06c:	f003 0310 	and.w	r3, r3, #16
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 8162 	beq.w	800d33a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2210      	movs	r2, #16
 800d07c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d088:	2b40      	cmp	r3, #64	@ 0x40
 800d08a:	f040 80d8 	bne.w	800d23e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d09c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 80af 	beq.w	800d204 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d0ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	f080 80a7 	bcs.w	800d204 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 0320 	and.w	r3, r3, #32
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f040 8087 	bne.w	800d1e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0e0:	e853 3f00 	ldrex	r3, [r3]
 800d0e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d0e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d0fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d102:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d106:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d10a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d10e:	e841 2300 	strex	r3, r2, [r1]
 800d112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1da      	bne.n	800d0d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d12e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d130:	f023 0301 	bic.w	r3, r3, #1
 800d134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3308      	adds	r3, #8
 800d13e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d142:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d146:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d148:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d14a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d14e:	e841 2300 	strex	r3, r2, [r1]
 800d152:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1e1      	bne.n	800d11e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	3308      	adds	r3, #8
 800d160:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d164:	e853 3f00 	ldrex	r3, [r3]
 800d168:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d16c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3308      	adds	r3, #8
 800d17a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d17e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d180:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d182:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d184:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d186:	e841 2300 	strex	r3, r2, [r1]
 800d18a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d18c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1e3      	bne.n	800d15a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2220      	movs	r2, #32
 800d196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1a8:	e853 3f00 	ldrex	r3, [r3]
 800d1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1b0:	f023 0310 	bic.w	r3, r3, #16
 800d1b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1ca:	e841 2300 	strex	r3, r2, [r1]
 800d1ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1e4      	bne.n	800d1a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fa fd84 	bl	8007cea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f91b 	bl	800d438 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d202:	e0fc      	b.n	800d3fe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d20a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d20e:	429a      	cmp	r2, r3
 800d210:	f040 80f5 	bne.w	800d3fe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 0320 	and.w	r3, r3, #32
 800d222:	2b20      	cmp	r3, #32
 800d224:	f040 80eb 	bne.w	800d3fe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f8fe 	bl	800d438 <HAL_UARTEx_RxEventCallback>
      return;
 800d23c:	e0df      	b.n	800d3fe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d258:	b29b      	uxth	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 80d1 	beq.w	800d402 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800d260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 80cc 	beq.w	800d402 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d272:	e853 3f00 	ldrex	r3, [r3]
 800d276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d27a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d27e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d28c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d28e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e4      	bne.n	800d26a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	e853 3f00 	ldrex	r3, [r3]
 800d2ae:	623b      	str	r3, [r7, #32]
   return(result);
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2b6:	f023 0301 	bic.w	r3, r3, #1
 800d2ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d2c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d0:	e841 2300 	strex	r3, r2, [r1]
 800d2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1e1      	bne.n	800d2a0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	e853 3f00 	ldrex	r3, [r3]
 800d2fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f023 0310 	bic.w	r3, r3, #16
 800d304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	461a      	mov	r2, r3
 800d30e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d316:	69b9      	ldr	r1, [r7, #24]
 800d318:	69fa      	ldr	r2, [r7, #28]
 800d31a:	e841 2300 	strex	r3, r2, [r1]
 800d31e:	617b      	str	r3, [r7, #20]
   return(result);
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e4      	bne.n	800d2f0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2202      	movs	r2, #2
 800d32a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d32c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f880 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d338:	e063      	b.n	800d402 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d33e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00e      	beq.n	800d364 <HAL_UART_IRQHandler+0x5d8>
 800d346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d008      	beq.n	800d364 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d35a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 ffd7 	bl	800e310 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d362:	e051      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d014      	beq.n	800d39a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d37c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d384:	2b00      	cmp	r3, #0
 800d386:	d008      	beq.n	800d39a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d03a      	beq.n	800d406 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	4798      	blx	r3
    }
    return;
 800d398:	e035      	b.n	800d406 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <HAL_UART_IRQHandler+0x62e>
 800d3a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d003      	beq.n	800d3ba <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 ff81 	bl	800e2ba <UART_EndTransmit_IT>
    return;
 800d3b8:	e026      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d009      	beq.n	800d3da <HAL_UART_IRQHandler+0x64e>
 800d3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 ffb0 	bl	800e338 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3d8:	e016      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d010      	beq.n	800d408 <HAL_UART_IRQHandler+0x67c>
 800d3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	da0c      	bge.n	800d408 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 ff98 	bl	800e324 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3f4:	e008      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
      return;
 800d3f6:	bf00      	nop
 800d3f8:	e006      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
    return;
 800d3fa:	bf00      	nop
 800d3fc:	e004      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
      return;
 800d3fe:	bf00      	nop
 800d400:	e002      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
      return;
 800d402:	bf00      	nop
 800d404:	e000      	b.n	800d408 <HAL_UART_IRQHandler+0x67c>
    return;
 800d406:	bf00      	nop
  }
}
 800d408:	37e8      	adds	r7, #232	@ 0xe8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop

0800d410 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d454:	b08c      	sub	sp, #48	@ 0x30
 800d456:	af00      	add	r7, sp, #0
 800d458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	689a      	ldr	r2, [r3, #8]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	431a      	orrs	r2, r3
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	431a      	orrs	r2, r3
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	69db      	ldr	r3, [r3, #28]
 800d474:	4313      	orrs	r3, r2
 800d476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	4bab      	ldr	r3, [pc, #684]	@ (800d72c <UART_SetConfig+0x2dc>)
 800d480:	4013      	ands	r3, r2
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	6812      	ldr	r2, [r2, #0]
 800d486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d488:	430b      	orrs	r3, r1
 800d48a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	68da      	ldr	r2, [r3, #12]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	699b      	ldr	r3, [r3, #24]
 800d4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4aa0      	ldr	r2, [pc, #640]	@ (800d730 <UART_SetConfig+0x2e0>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d4c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	6812      	ldr	r2, [r2, #0]
 800d4ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4d0:	430b      	orrs	r3, r1
 800d4d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4da:	f023 010f 	bic.w	r1, r3, #15
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a91      	ldr	r2, [pc, #580]	@ (800d734 <UART_SetConfig+0x2e4>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d125      	bne.n	800d540 <UART_SetConfig+0xf0>
 800d4f4:	4b90      	ldr	r3, [pc, #576]	@ (800d738 <UART_SetConfig+0x2e8>)
 800d4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d81a      	bhi.n	800d538 <UART_SetConfig+0xe8>
 800d502:	a201      	add	r2, pc, #4	@ (adr r2, 800d508 <UART_SetConfig+0xb8>)
 800d504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d529 	.word	0x0800d529
 800d510:	0800d521 	.word	0x0800d521
 800d514:	0800d531 	.word	0x0800d531
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d51e:	e0d6      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d520:	2302      	movs	r3, #2
 800d522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d526:	e0d2      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d528:	2304      	movs	r3, #4
 800d52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d52e:	e0ce      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d530:	2308      	movs	r3, #8
 800d532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d536:	e0ca      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d538:	2310      	movs	r3, #16
 800d53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d53e:	e0c6      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a7d      	ldr	r2, [pc, #500]	@ (800d73c <UART_SetConfig+0x2ec>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d138      	bne.n	800d5bc <UART_SetConfig+0x16c>
 800d54a:	4b7b      	ldr	r3, [pc, #492]	@ (800d738 <UART_SetConfig+0x2e8>)
 800d54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d550:	f003 030c 	and.w	r3, r3, #12
 800d554:	2b0c      	cmp	r3, #12
 800d556:	d82d      	bhi.n	800d5b4 <UART_SetConfig+0x164>
 800d558:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <UART_SetConfig+0x110>)
 800d55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55e:	bf00      	nop
 800d560:	0800d595 	.word	0x0800d595
 800d564:	0800d5b5 	.word	0x0800d5b5
 800d568:	0800d5b5 	.word	0x0800d5b5
 800d56c:	0800d5b5 	.word	0x0800d5b5
 800d570:	0800d5a5 	.word	0x0800d5a5
 800d574:	0800d5b5 	.word	0x0800d5b5
 800d578:	0800d5b5 	.word	0x0800d5b5
 800d57c:	0800d5b5 	.word	0x0800d5b5
 800d580:	0800d59d 	.word	0x0800d59d
 800d584:	0800d5b5 	.word	0x0800d5b5
 800d588:	0800d5b5 	.word	0x0800d5b5
 800d58c:	0800d5b5 	.word	0x0800d5b5
 800d590:	0800d5ad 	.word	0x0800d5ad
 800d594:	2300      	movs	r3, #0
 800d596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d59a:	e098      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d59c:	2302      	movs	r3, #2
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5a2:	e094      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5a4:	2304      	movs	r3, #4
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5aa:	e090      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5ac:	2308      	movs	r3, #8
 800d5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5b2:	e08c      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5b4:	2310      	movs	r3, #16
 800d5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5ba:	e088      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a5f      	ldr	r2, [pc, #380]	@ (800d740 <UART_SetConfig+0x2f0>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d125      	bne.n	800d612 <UART_SetConfig+0x1c2>
 800d5c6:	4b5c      	ldr	r3, [pc, #368]	@ (800d738 <UART_SetConfig+0x2e8>)
 800d5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d5d0:	2b30      	cmp	r3, #48	@ 0x30
 800d5d2:	d016      	beq.n	800d602 <UART_SetConfig+0x1b2>
 800d5d4:	2b30      	cmp	r3, #48	@ 0x30
 800d5d6:	d818      	bhi.n	800d60a <UART_SetConfig+0x1ba>
 800d5d8:	2b20      	cmp	r3, #32
 800d5da:	d00a      	beq.n	800d5f2 <UART_SetConfig+0x1a2>
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d814      	bhi.n	800d60a <UART_SetConfig+0x1ba>
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d002      	beq.n	800d5ea <UART_SetConfig+0x19a>
 800d5e4:	2b10      	cmp	r3, #16
 800d5e6:	d008      	beq.n	800d5fa <UART_SetConfig+0x1aa>
 800d5e8:	e00f      	b.n	800d60a <UART_SetConfig+0x1ba>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5f0:	e06d      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5f8:	e069      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d5fa:	2304      	movs	r3, #4
 800d5fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d600:	e065      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d602:	2308      	movs	r3, #8
 800d604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d608:	e061      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d60a:	2310      	movs	r3, #16
 800d60c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d610:	e05d      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a4b      	ldr	r2, [pc, #300]	@ (800d744 <UART_SetConfig+0x2f4>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d125      	bne.n	800d668 <UART_SetConfig+0x218>
 800d61c:	4b46      	ldr	r3, [pc, #280]	@ (800d738 <UART_SetConfig+0x2e8>)
 800d61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d622:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d626:	2bc0      	cmp	r3, #192	@ 0xc0
 800d628:	d016      	beq.n	800d658 <UART_SetConfig+0x208>
 800d62a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d62c:	d818      	bhi.n	800d660 <UART_SetConfig+0x210>
 800d62e:	2b80      	cmp	r3, #128	@ 0x80
 800d630:	d00a      	beq.n	800d648 <UART_SetConfig+0x1f8>
 800d632:	2b80      	cmp	r3, #128	@ 0x80
 800d634:	d814      	bhi.n	800d660 <UART_SetConfig+0x210>
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <UART_SetConfig+0x1f0>
 800d63a:	2b40      	cmp	r3, #64	@ 0x40
 800d63c:	d008      	beq.n	800d650 <UART_SetConfig+0x200>
 800d63e:	e00f      	b.n	800d660 <UART_SetConfig+0x210>
 800d640:	2300      	movs	r3, #0
 800d642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d646:	e042      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d648:	2302      	movs	r3, #2
 800d64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d64e:	e03e      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d650:	2304      	movs	r3, #4
 800d652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d656:	e03a      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d658:	2308      	movs	r3, #8
 800d65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d65e:	e036      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d660:	2310      	movs	r3, #16
 800d662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d666:	e032      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a30      	ldr	r2, [pc, #192]	@ (800d730 <UART_SetConfig+0x2e0>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d12a      	bne.n	800d6c8 <UART_SetConfig+0x278>
 800d672:	4b31      	ldr	r3, [pc, #196]	@ (800d738 <UART_SetConfig+0x2e8>)
 800d674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d678:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d67c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d680:	d01a      	beq.n	800d6b8 <UART_SetConfig+0x268>
 800d682:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d686:	d81b      	bhi.n	800d6c0 <UART_SetConfig+0x270>
 800d688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d68c:	d00c      	beq.n	800d6a8 <UART_SetConfig+0x258>
 800d68e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d692:	d815      	bhi.n	800d6c0 <UART_SetConfig+0x270>
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <UART_SetConfig+0x250>
 800d698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d69c:	d008      	beq.n	800d6b0 <UART_SetConfig+0x260>
 800d69e:	e00f      	b.n	800d6c0 <UART_SetConfig+0x270>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6a6:	e012      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6ae:	e00e      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d6b0:	2304      	movs	r3, #4
 800d6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6b6:	e00a      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d6b8:	2308      	movs	r3, #8
 800d6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6be:	e006      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d6c0:	2310      	movs	r3, #16
 800d6c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6c6:	e002      	b.n	800d6ce <UART_SetConfig+0x27e>
 800d6c8:	2310      	movs	r3, #16
 800d6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a17      	ldr	r2, [pc, #92]	@ (800d730 <UART_SetConfig+0x2e0>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	f040 80a8 	bne.w	800d82a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d6de:	2b08      	cmp	r3, #8
 800d6e0:	d834      	bhi.n	800d74c <UART_SetConfig+0x2fc>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <UART_SetConfig+0x298>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d70d 	.word	0x0800d70d
 800d6ec:	0800d74d 	.word	0x0800d74d
 800d6f0:	0800d715 	.word	0x0800d715
 800d6f4:	0800d74d 	.word	0x0800d74d
 800d6f8:	0800d71b 	.word	0x0800d71b
 800d6fc:	0800d74d 	.word	0x0800d74d
 800d700:	0800d74d 	.word	0x0800d74d
 800d704:	0800d74d 	.word	0x0800d74d
 800d708:	0800d723 	.word	0x0800d723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d70c:	f7fc fa7e 	bl	8009c0c <HAL_RCC_GetPCLK1Freq>
 800d710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d712:	e021      	b.n	800d758 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d714:	4b0c      	ldr	r3, [pc, #48]	@ (800d748 <UART_SetConfig+0x2f8>)
 800d716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d718:	e01e      	b.n	800d758 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d71a:	f7fc fa0b 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 800d71e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d720:	e01a      	b.n	800d758 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d728:	e016      	b.n	800d758 <UART_SetConfig+0x308>
 800d72a:	bf00      	nop
 800d72c:	cfff69f3 	.word	0xcfff69f3
 800d730:	40008000 	.word	0x40008000
 800d734:	40013800 	.word	0x40013800
 800d738:	40021000 	.word	0x40021000
 800d73c:	40004400 	.word	0x40004400
 800d740:	40004800 	.word	0x40004800
 800d744:	40004c00 	.word	0x40004c00
 800d748:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d756:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 812a 	beq.w	800d9b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d764:	4a9e      	ldr	r2, [pc, #632]	@ (800d9e0 <UART_SetConfig+0x590>)
 800d766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d772:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	4613      	mov	r3, r2
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	4413      	add	r3, r2
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	429a      	cmp	r2, r3
 800d782:	d305      	bcc.n	800d790 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d903      	bls.n	800d798 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d796:	e10d      	b.n	800d9b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	2200      	movs	r2, #0
 800d79c:	60bb      	str	r3, [r7, #8]
 800d79e:	60fa      	str	r2, [r7, #12]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a4:	4a8e      	ldr	r2, [pc, #568]	@ (800d9e0 <UART_SetConfig+0x590>)
 800d7a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	603b      	str	r3, [r7, #0]
 800d7b0:	607a      	str	r2, [r7, #4]
 800d7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7ba:	f7f3 fa8d 	bl	8000cd8 <__aeabi_uldivmod>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f04f 0200 	mov.w	r2, #0
 800d7ca:	f04f 0300 	mov.w	r3, #0
 800d7ce:	020b      	lsls	r3, r1, #8
 800d7d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7d4:	0202      	lsls	r2, r0, #8
 800d7d6:	6979      	ldr	r1, [r7, #20]
 800d7d8:	6849      	ldr	r1, [r1, #4]
 800d7da:	0849      	lsrs	r1, r1, #1
 800d7dc:	2000      	movs	r0, #0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	eb12 0804 	adds.w	r8, r2, r4
 800d7e6:	eb43 0905 	adc.w	r9, r3, r5
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	469a      	mov	sl, r3
 800d7f2:	4693      	mov	fp, r2
 800d7f4:	4652      	mov	r2, sl
 800d7f6:	465b      	mov	r3, fp
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	4649      	mov	r1, r9
 800d7fc:	f7f3 fa6c 	bl	8000cd8 <__aeabi_uldivmod>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4613      	mov	r3, r2
 800d806:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d80e:	d308      	bcc.n	800d822 <UART_SetConfig+0x3d2>
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d816:	d204      	bcs.n	800d822 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6a3a      	ldr	r2, [r7, #32]
 800d81e:	60da      	str	r2, [r3, #12]
 800d820:	e0c8      	b.n	800d9b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d828:	e0c4      	b.n	800d9b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d832:	d167      	bne.n	800d904 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d838:	2b08      	cmp	r3, #8
 800d83a:	d828      	bhi.n	800d88e <UART_SetConfig+0x43e>
 800d83c:	a201      	add	r2, pc, #4	@ (adr r2, 800d844 <UART_SetConfig+0x3f4>)
 800d83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d842:	bf00      	nop
 800d844:	0800d869 	.word	0x0800d869
 800d848:	0800d871 	.word	0x0800d871
 800d84c:	0800d879 	.word	0x0800d879
 800d850:	0800d88f 	.word	0x0800d88f
 800d854:	0800d87f 	.word	0x0800d87f
 800d858:	0800d88f 	.word	0x0800d88f
 800d85c:	0800d88f 	.word	0x0800d88f
 800d860:	0800d88f 	.word	0x0800d88f
 800d864:	0800d887 	.word	0x0800d887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d868:	f7fc f9d0 	bl	8009c0c <HAL_RCC_GetPCLK1Freq>
 800d86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d86e:	e014      	b.n	800d89a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d870:	f7fc f9e2 	bl	8009c38 <HAL_RCC_GetPCLK2Freq>
 800d874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d876:	e010      	b.n	800d89a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d878:	4b5a      	ldr	r3, [pc, #360]	@ (800d9e4 <UART_SetConfig+0x594>)
 800d87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d87c:	e00d      	b.n	800d89a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d87e:	f7fc f959 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 800d882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d884:	e009      	b.n	800d89a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d88c:	e005      	b.n	800d89a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 8089 	beq.w	800d9b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8a6:	4a4e      	ldr	r2, [pc, #312]	@ (800d9e0 <UART_SetConfig+0x590>)
 800d8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b4:	005a      	lsls	r2, r3, #1
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	085b      	lsrs	r3, r3, #1
 800d8bc:	441a      	add	r2, r3
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	2b0f      	cmp	r3, #15
 800d8cc:	d916      	bls.n	800d8fc <UART_SetConfig+0x4ac>
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8d4:	d212      	bcs.n	800d8fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	f023 030f 	bic.w	r3, r3, #15
 800d8de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	085b      	lsrs	r3, r3, #1
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	8bfb      	ldrh	r3, [r7, #30]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	8bfa      	ldrh	r2, [r7, #30]
 800d8f8:	60da      	str	r2, [r3, #12]
 800d8fa:	e05b      	b.n	800d9b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d902:	e057      	b.n	800d9b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d904:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d908:	2b08      	cmp	r3, #8
 800d90a:	d828      	bhi.n	800d95e <UART_SetConfig+0x50e>
 800d90c:	a201      	add	r2, pc, #4	@ (adr r2, 800d914 <UART_SetConfig+0x4c4>)
 800d90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d912:	bf00      	nop
 800d914:	0800d939 	.word	0x0800d939
 800d918:	0800d941 	.word	0x0800d941
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	0800d95f 	.word	0x0800d95f
 800d924:	0800d94f 	.word	0x0800d94f
 800d928:	0800d95f 	.word	0x0800d95f
 800d92c:	0800d95f 	.word	0x0800d95f
 800d930:	0800d95f 	.word	0x0800d95f
 800d934:	0800d957 	.word	0x0800d957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d938:	f7fc f968 	bl	8009c0c <HAL_RCC_GetPCLK1Freq>
 800d93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d93e:	e014      	b.n	800d96a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d940:	f7fc f97a 	bl	8009c38 <HAL_RCC_GetPCLK2Freq>
 800d944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d946:	e010      	b.n	800d96a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d948:	4b26      	ldr	r3, [pc, #152]	@ (800d9e4 <UART_SetConfig+0x594>)
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d94c:	e00d      	b.n	800d96a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d94e:	f7fc f8f1 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 800d952:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d954:	e009      	b.n	800d96a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d95a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d95c:	e005      	b.n	800d96a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d968:	bf00      	nop
    }

    if (pclk != 0U)
 800d96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d021      	beq.n	800d9b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d974:	4a1a      	ldr	r2, [pc, #104]	@ (800d9e0 <UART_SetConfig+0x590>)
 800d976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d97a:	461a      	mov	r2, r3
 800d97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	085b      	lsrs	r3, r3, #1
 800d988:	441a      	add	r2, r3
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	2b0f      	cmp	r3, #15
 800d998:	d909      	bls.n	800d9ae <UART_SetConfig+0x55e>
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a0:	d205      	bcs.n	800d9ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60da      	str	r2, [r3, #12]
 800d9ac:	e002      	b.n	800d9b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d9d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3730      	adds	r7, #48	@ 0x30
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9de:	bf00      	nop
 800d9e0:	0801ae8c 	.word	0x0801ae8c
 800d9e4:	00f42400 	.word	0x00f42400

0800d9e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00a      	beq.n	800da12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	430a      	orrs	r2, r1
 800da10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00a      	beq.n	800da56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5a:	f003 0304 	and.w	r3, r3, #4
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00a      	beq.n	800da78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	430a      	orrs	r2, r1
 800da76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7c:	f003 0310 	and.w	r3, r3, #16
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01a      	beq.n	800dafe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dae6:	d10a      	bne.n	800dafe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	430a      	orrs	r2, r1
 800dafc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	430a      	orrs	r2, r1
 800db1e:	605a      	str	r2, [r3, #4]
  }
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b098      	sub	sp, #96	@ 0x60
 800db30:	af02      	add	r7, sp, #8
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db3c:	f7f8 f9ee 	bl	8005f1c <HAL_GetTick>
 800db40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0308 	and.w	r3, r3, #8
 800db4c:	2b08      	cmp	r3, #8
 800db4e:	d12f      	bne.n	800dbb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db58:	2200      	movs	r2, #0
 800db5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f88e 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d022      	beq.n	800dbb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db72:	e853 3f00 	ldrex	r3, [r3]
 800db76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	461a      	mov	r2, r3
 800db86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db88:	647b      	str	r3, [r7, #68]	@ 0x44
 800db8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e6      	bne.n	800db6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2220      	movs	r2, #32
 800dba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e063      	b.n	800dc78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d149      	bne.n	800dc52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f857 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d03c      	beq.n	800dc52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	e853 3f00 	ldrex	r3, [r3]
 800dbe4:	623b      	str	r3, [r7, #32]
   return(result);
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbfe:	e841 2300 	strex	r3, r2, [r1]
 800dc02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1e6      	bne.n	800dbd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f023 0301 	bic.w	r3, r3, #1
 800dc20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3308      	adds	r3, #8
 800dc28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2a:	61fa      	str	r2, [r7, #28]
 800dc2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2e:	69b9      	ldr	r1, [r7, #24]
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	e841 2300 	strex	r3, r2, [r1]
 800dc36:	617b      	str	r3, [r7, #20]
   return(result);
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1e5      	bne.n	800dc0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2220      	movs	r2, #32
 800dc42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	e012      	b.n	800dc78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2220      	movs	r2, #32
 800dc5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3758      	adds	r7, #88	@ 0x58
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc90:	e04f      	b.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc98:	d04b      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc9a:	f7f8 f93f 	bl	8005f1c <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d302      	bcc.n	800dcb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e04e      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d037      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b80      	cmp	r3, #128	@ 0x80
 800dcc6:	d034      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	2b40      	cmp	r3, #64	@ 0x40
 800dccc:	d031      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	69db      	ldr	r3, [r3, #28]
 800dcd4:	f003 0308 	and.w	r3, r3, #8
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d110      	bne.n	800dcfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2208      	movs	r2, #8
 800dce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 f920 	bl	800df2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2208      	movs	r2, #8
 800dcee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e029      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd0c:	d111      	bne.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f906 	bl	800df2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2220      	movs	r2, #32
 800dd22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	e00f      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	69da      	ldr	r2, [r3, #28]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	bf0c      	ite	eq
 800dd42:	2301      	moveq	r3, #1
 800dd44:	2300      	movne	r3, #0
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	461a      	mov	r2, r3
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d0a0      	beq.n	800dc92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b096      	sub	sp, #88	@ 0x58
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	4613      	mov	r3, r2
 800dd68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	88fa      	ldrh	r2, [r7, #6]
 800dd74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2222      	movs	r2, #34	@ 0x22
 800dd84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d02d      	beq.n	800ddee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd98:	4a40      	ldr	r2, [pc, #256]	@ (800de9c <UART_Start_Receive_DMA+0x140>)
 800dd9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda2:	4a3f      	ldr	r2, [pc, #252]	@ (800dea0 <UART_Start_Receive_DMA+0x144>)
 800dda4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddac:	4a3d      	ldr	r2, [pc, #244]	@ (800dea4 <UART_Start_Receive_DMA+0x148>)
 800ddae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3324      	adds	r3, #36	@ 0x24
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddcc:	461a      	mov	r2, r3
 800ddce:	88fb      	ldrh	r3, [r7, #6]
 800ddd0:	f7f9 ff10 	bl	8007bf4 <HAL_DMA_Start_IT>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d009      	beq.n	800ddee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2210      	movs	r2, #16
 800ddde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2220      	movs	r2, #32
 800dde6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e051      	b.n	800de92 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d018      	beq.n	800de28 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfe:	e853 3f00 	ldrex	r3, [r3]
 800de02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	461a      	mov	r2, r3
 800de12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de16:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800de1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de1c:	e841 2300 	strex	r3, r2, [r1]
 800de20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800de22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1e6      	bne.n	800ddf6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3308      	adds	r3, #8
 800de2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de32:	e853 3f00 	ldrex	r3, [r3]
 800de36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3a:	f043 0301 	orr.w	r3, r3, #1
 800de3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3308      	adds	r3, #8
 800de46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de48:	637a      	str	r2, [r7, #52]	@ 0x34
 800de4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de50:	e841 2300 	strex	r3, r2, [r1]
 800de54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800de56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e5      	bne.n	800de28 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3308      	adds	r3, #8
 800de62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	e853 3f00 	ldrex	r3, [r3]
 800de6a:	613b      	str	r3, [r7, #16]
   return(result);
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	3308      	adds	r3, #8
 800de7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de7c:	623a      	str	r2, [r7, #32]
 800de7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de80:	69f9      	ldr	r1, [r7, #28]
 800de82:	6a3a      	ldr	r2, [r7, #32]
 800de84:	e841 2300 	strex	r3, r2, [r1]
 800de88:	61bb      	str	r3, [r7, #24]
   return(result);
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e5      	bne.n	800de5c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3758      	adds	r7, #88	@ 0x58
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	0800e0ad 	.word	0x0800e0ad
 800dea0:	0800e1d9 	.word	0x0800e1d9
 800dea4:	0800e217 	.word	0x0800e217

0800dea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b08f      	sub	sp, #60	@ 0x3c
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	e853 3f00 	ldrex	r3, [r3]
 800debc:	61fb      	str	r3, [r7, #28]
   return(result);
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dec4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ded0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ded4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ded6:	e841 2300 	strex	r3, r2, [r1]
 800deda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e6      	bne.n	800deb0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3308      	adds	r3, #8
 800dee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	60bb      	str	r3, [r7, #8]
   return(result);
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800def8:	633b      	str	r3, [r7, #48]	@ 0x30
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df02:	61ba      	str	r2, [r7, #24]
 800df04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df06:	6979      	ldr	r1, [r7, #20]
 800df08:	69ba      	ldr	r2, [r7, #24]
 800df0a:	e841 2300 	strex	r3, r2, [r1]
 800df0e:	613b      	str	r3, [r7, #16]
   return(result);
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e5      	bne.n	800dee2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2220      	movs	r2, #32
 800df1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800df1e:	bf00      	nop
 800df20:	373c      	adds	r7, #60	@ 0x3c
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df2a:	b480      	push	{r7}
 800df2c:	b095      	sub	sp, #84	@ 0x54
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df3a:	e853 3f00 	ldrex	r3, [r3]
 800df3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	461a      	mov	r2, r3
 800df4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df50:	643b      	str	r3, [r7, #64]	@ 0x40
 800df52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df58:	e841 2300 	strex	r3, r2, [r1]
 800df5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1e6      	bne.n	800df32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3308      	adds	r3, #8
 800df6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	e853 3f00 	ldrex	r3, [r3]
 800df72:	61fb      	str	r3, [r7, #28]
   return(result);
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df7a:	f023 0301 	bic.w	r3, r3, #1
 800df7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3308      	adds	r3, #8
 800df86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e3      	bne.n	800df64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d118      	bne.n	800dfd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	e853 3f00 	ldrex	r3, [r3]
 800dfb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	f023 0310 	bic.w	r3, r3, #16
 800dfb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfc2:	61bb      	str	r3, [r7, #24]
 800dfc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc6:	6979      	ldr	r1, [r7, #20]
 800dfc8:	69ba      	ldr	r2, [r7, #24]
 800dfca:	e841 2300 	strex	r3, r2, [r1]
 800dfce:	613b      	str	r3, [r7, #16]
   return(result);
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1e6      	bne.n	800dfa4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2220      	movs	r2, #32
 800dfda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dfea:	bf00      	nop
 800dfec:	3754      	adds	r7, #84	@ 0x54
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b090      	sub	sp, #64	@ 0x40
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e002:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 0320 	and.w	r3, r3, #32
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d137      	bne.n	800e082 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e014:	2200      	movs	r2, #0
 800e016:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3308      	adds	r3, #8
 800e020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e024:	e853 3f00 	ldrex	r3, [r3]
 800e028:	623b      	str	r3, [r7, #32]
   return(result);
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e030:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3308      	adds	r3, #8
 800e038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e03a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e03c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e042:	e841 2300 	strex	r3, r2, [r1]
 800e046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e5      	bne.n	800e01a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	e853 3f00 	ldrex	r3, [r3]
 800e05a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e062:	637b      	str	r3, [r7, #52]	@ 0x34
 800e064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	461a      	mov	r2, r3
 800e06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06c:	61fb      	str	r3, [r7, #28]
 800e06e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e070:	69b9      	ldr	r1, [r7, #24]
 800e072:	69fa      	ldr	r2, [r7, #28]
 800e074:	e841 2300 	strex	r3, r2, [r1]
 800e078:	617b      	str	r3, [r7, #20]
   return(result);
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e6      	bne.n	800e04e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e080:	e002      	b.n	800e088 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e082:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e084:	f7f7 fa00 	bl	8005488 <HAL_UART_TxCpltCallback>
}
 800e088:	bf00      	nop
 800e08a:	3740      	adds	r7, #64	@ 0x40
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e09c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff f9b6 	bl	800d410 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0a4:	bf00      	nop
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b09c      	sub	sp, #112	@ 0x70
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f003 0320 	and.w	r3, r3, #32
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d171      	bne.n	800e1ac <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e0c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0d8:	e853 3f00 	ldrex	r3, [r3]
 800e0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e0de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e0e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e0ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e0f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e0f6:	e841 2300 	strex	r3, r2, [r1]
 800e0fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1e6      	bne.n	800e0d0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3308      	adds	r3, #8
 800e108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	e853 3f00 	ldrex	r3, [r3]
 800e110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e114:	f023 0301 	bic.w	r3, r3, #1
 800e118:	667b      	str	r3, [r7, #100]	@ 0x64
 800e11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3308      	adds	r3, #8
 800e120:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e122:	647a      	str	r2, [r7, #68]	@ 0x44
 800e124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e12a:	e841 2300 	strex	r3, r2, [r1]
 800e12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1e5      	bne.n	800e102 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	3308      	adds	r3, #8
 800e13c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e140:	e853 3f00 	ldrex	r3, [r3]
 800e144:	623b      	str	r3, [r7, #32]
   return(result);
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e14c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e14e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3308      	adds	r3, #8
 800e154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e156:	633a      	str	r2, [r7, #48]	@ 0x30
 800e158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e15c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e15e:	e841 2300 	strex	r3, r2, [r1]
 800e162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1e5      	bne.n	800e136 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e176:	2b01      	cmp	r3, #1
 800e178:	d118      	bne.n	800e1ac <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	e853 3f00 	ldrex	r3, [r3]
 800e186:	60fb      	str	r3, [r7, #12]
   return(result);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f023 0310 	bic.w	r3, r3, #16
 800e18e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	461a      	mov	r2, r3
 800e196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e198:	61fb      	str	r3, [r7, #28]
 800e19a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19c:	69b9      	ldr	r1, [r7, #24]
 800e19e:	69fa      	ldr	r2, [r7, #28]
 800e1a0:	e841 2300 	strex	r3, r2, [r1]
 800e1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1e6      	bne.n	800e17a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d107      	bne.n	800e1ca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e1c4:	f7ff f938 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1c8:	e002      	b.n	800e1d0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e1ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e1cc:	f7f7 f8c8 	bl	8005360 <HAL_UART_RxCpltCallback>
}
 800e1d0:	bf00      	nop
 800e1d2:	3770      	adds	r7, #112	@ 0x70
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d109      	bne.n	800e208 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1fa:	085b      	lsrs	r3, r3, #1
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	4619      	mov	r1, r3
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff f919 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e206:	e002      	b.n	800e20e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7f7 f905 	bl	8005418 <HAL_UART_RxHalfCpltCallback>
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b086      	sub	sp, #24
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e222:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e22a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e232:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e23e:	2b80      	cmp	r3, #128	@ 0x80
 800e240:	d109      	bne.n	800e256 <UART_DMAError+0x40>
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	2b21      	cmp	r3, #33	@ 0x21
 800e246:	d106      	bne.n	800e256 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e250:	6978      	ldr	r0, [r7, #20]
 800e252:	f7ff fe29 	bl	800dea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e260:	2b40      	cmp	r3, #64	@ 0x40
 800e262:	d109      	bne.n	800e278 <UART_DMAError+0x62>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b22      	cmp	r3, #34	@ 0x22
 800e268:	d106      	bne.n	800e278 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2200      	movs	r2, #0
 800e26e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e272:	6978      	ldr	r0, [r7, #20]
 800e274:	f7ff fe59 	bl	800df2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e27e:	f043 0210 	orr.w	r2, r3, #16
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e288:	6978      	ldr	r0, [r7, #20]
 800e28a:	f7ff f8cb 	bl	800d424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e28e:	bf00      	nop
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b084      	sub	sp, #16
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f7ff f8b9 	bl	800d424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2b2:	bf00      	nop
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b088      	sub	sp, #32
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2d6:	61fb      	str	r3, [r7, #28]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	61bb      	str	r3, [r7, #24]
 800e2e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6979      	ldr	r1, [r7, #20]
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e6      	bne.n	800e2c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2220      	movs	r2, #32
 800e2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7f7 f8c0 	bl	8005488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e308:	bf00      	nop
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d101      	bne.n	800e362 <HAL_UARTEx_DisableFifoMode+0x16>
 800e35e:	2302      	movs	r3, #2
 800e360:	e027      	b.n	800e3b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2201      	movs	r2, #1
 800e366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2224      	movs	r2, #36	@ 0x24
 800e36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f022 0201 	bic.w	r2, r2, #1
 800e388:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e390:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2220      	movs	r2, #32
 800e3a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e02d      	b.n	800e432 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2224      	movs	r2, #36	@ 0x24
 800e3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f022 0201 	bic.w	r2, r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	430a      	orrs	r2, r1
 800e410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f850 	bl	800e4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b084      	sub	sp, #16
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d101      	bne.n	800e452 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e44e:	2302      	movs	r3, #2
 800e450:	e02d      	b.n	800e4ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2224      	movs	r2, #36	@ 0x24
 800e45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f022 0201 	bic.w	r2, r2, #1
 800e478:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	430a      	orrs	r2, r1
 800e48c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f812 	bl	800e4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2220      	movs	r2, #32
 800e4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
	...

0800e4b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d108      	bne.n	800e4da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4d8:	e031      	b.n	800e53e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4da:	2308      	movs	r3, #8
 800e4dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4de:	2308      	movs	r3, #8
 800e4e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	0e5b      	lsrs	r3, r3, #25
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	f003 0307 	and.w	r3, r3, #7
 800e4f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	0f5b      	lsrs	r3, r3, #29
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0307 	and.w	r3, r3, #7
 800e500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e502:	7bbb      	ldrb	r3, [r7, #14]
 800e504:	7b3a      	ldrb	r2, [r7, #12]
 800e506:	4911      	ldr	r1, [pc, #68]	@ (800e54c <UARTEx_SetNbDataToProcess+0x94>)
 800e508:	5c8a      	ldrb	r2, [r1, r2]
 800e50a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e50e:	7b3a      	ldrb	r2, [r7, #12]
 800e510:	490f      	ldr	r1, [pc, #60]	@ (800e550 <UARTEx_SetNbDataToProcess+0x98>)
 800e512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e514:	fb93 f3f2 	sdiv	r3, r3, r2
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e520:	7bfb      	ldrb	r3, [r7, #15]
 800e522:	7b7a      	ldrb	r2, [r7, #13]
 800e524:	4909      	ldr	r1, [pc, #36]	@ (800e54c <UARTEx_SetNbDataToProcess+0x94>)
 800e526:	5c8a      	ldrb	r2, [r1, r2]
 800e528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e52c:	7b7a      	ldrb	r2, [r7, #13]
 800e52e:	4908      	ldr	r1, [pc, #32]	@ (800e550 <UARTEx_SetNbDataToProcess+0x98>)
 800e530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e532:	fb93 f3f2 	sdiv	r3, r3, r2
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e53e:	bf00      	nop
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	0801aea4 	.word	0x0801aea4
 800e550:	0801aeac 	.word	0x0801aeac

0800e554 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800e558:	4907      	ldr	r1, [pc, #28]	@ (800e578 <MX_FATFS_Init+0x24>)
 800e55a:	4808      	ldr	r0, [pc, #32]	@ (800e57c <MX_FATFS_Init+0x28>)
 800e55c:	f002 fe24 	bl	80111a8 <FATFS_LinkDriver>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d002      	beq.n	800e56c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800e566:	f04f 33ff 	mov.w	r3, #4294967295
 800e56a:	e003      	b.n	800e574 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800e56c:	4b04      	ldr	r3, [pc, #16]	@ (800e580 <MX_FATFS_Init+0x2c>)
 800e56e:	2201      	movs	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800e572:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800e574:	4618      	mov	r0, r3
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20001b14 	.word	0x20001b14
 800e57c:	20000030 	.word	0x20000030
 800e580:	20001b18 	.word	0x20001b18

0800e584 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e584:	b480      	push	{r7}
 800e586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e588:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f7 f913 	bl	80057cc <USER_SPI_initialize>
 800e5a6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f7 f9f1 	bl	80059a4 <USER_SPI_status>
 800e5c2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60b9      	str	r1, [r7, #8]
 800e5d4:	607a      	str	r2, [r7, #4]
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800e5dc:	7bf8      	ldrb	r0, [r7, #15]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	68b9      	ldr	r1, [r7, #8]
 800e5e4:	f7f7 f9f4 	bl	80059d0 <USER_SPI_read>
 800e5e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	603b      	str	r3, [r7, #0]
 800e5fe:	4603      	mov	r3, r0
 800e600:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800e602:	7bf8      	ldrb	r0, [r7, #15]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	68b9      	ldr	r1, [r7, #8]
 800e60a:	f7f7 fa47 	bl	8005a9c <USER_SPI_write>
 800e60e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	603a      	str	r2, [r7, #0]
 800e622:	71fb      	strb	r3, [r7, #7]
 800e624:	460b      	mov	r3, r1
 800e626:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800e628:	79b9      	ldrb	r1, [r7, #6]
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	4618      	mov	r0, r3
 800e630:	f7f7 fab0 	bl	8005b94 <USER_SPI_ioctl>
 800e634:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e636:	4618      	mov	r0, r3
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	4a08      	ldr	r2, [pc, #32]	@ (800e670 <disk_status+0x30>)
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4413      	add	r3, r2
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	79fa      	ldrb	r2, [r7, #7]
 800e658:	4905      	ldr	r1, [pc, #20]	@ (800e670 <disk_status+0x30>)
 800e65a:	440a      	add	r2, r1
 800e65c:	7a12      	ldrb	r2, [r2, #8]
 800e65e:	4610      	mov	r0, r2
 800e660:	4798      	blx	r3
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e666:	7bfb      	ldrb	r3, [r7, #15]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	20001b44 	.word	0x20001b44

0800e674 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	4a0d      	ldr	r2, [pc, #52]	@ (800e6bc <disk_initialize+0x48>)
 800e686:	5cd3      	ldrb	r3, [r2, r3]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d111      	bne.n	800e6b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	4a0b      	ldr	r2, [pc, #44]	@ (800e6bc <disk_initialize+0x48>)
 800e690:	2101      	movs	r1, #1
 800e692:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	4a09      	ldr	r2, [pc, #36]	@ (800e6bc <disk_initialize+0x48>)
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	79fa      	ldrb	r2, [r7, #7]
 800e6a2:	4906      	ldr	r1, [pc, #24]	@ (800e6bc <disk_initialize+0x48>)
 800e6a4:	440a      	add	r2, r1
 800e6a6:	7a12      	ldrb	r2, [r2, #8]
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	4798      	blx	r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20001b44 	.word	0x20001b44

0800e6c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60b9      	str	r1, [r7, #8]
 800e6c8:	607a      	str	r2, [r7, #4]
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e6fc <disk_read+0x3c>)
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4413      	add	r3, r2
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	689c      	ldr	r4, [r3, #8]
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
 800e6de:	4a07      	ldr	r2, [pc, #28]	@ (800e6fc <disk_read+0x3c>)
 800e6e0:	4413      	add	r3, r2
 800e6e2:	7a18      	ldrb	r0, [r3, #8]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	47a0      	blx	r4
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd90      	pop	{r4, r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20001b44 	.word	0x20001b44

0800e700 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e700:	b590      	push	{r4, r7, lr}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	607a      	str	r2, [r7, #4]
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	4a0a      	ldr	r2, [pc, #40]	@ (800e73c <disk_write+0x3c>)
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4413      	add	r3, r2
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	68dc      	ldr	r4, [r3, #12]
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	4a07      	ldr	r2, [pc, #28]	@ (800e73c <disk_write+0x3c>)
 800e720:	4413      	add	r3, r2
 800e722:	7a18      	ldrb	r0, [r3, #8]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	68b9      	ldr	r1, [r7, #8]
 800e72a:	47a0      	blx	r4
 800e72c:	4603      	mov	r3, r0
 800e72e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
}
 800e732:	4618      	mov	r0, r3
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	bd90      	pop	{r4, r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20001b44 	.word	0x20001b44

0800e740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	603a      	str	r2, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
 800e74c:	460b      	mov	r3, r1
 800e74e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	4a09      	ldr	r2, [pc, #36]	@ (800e778 <disk_ioctl+0x38>)
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	79fa      	ldrb	r2, [r7, #7]
 800e75e:	4906      	ldr	r1, [pc, #24]	@ (800e778 <disk_ioctl+0x38>)
 800e760:	440a      	add	r2, r1
 800e762:	7a10      	ldrb	r0, [r2, #8]
 800e764:	79b9      	ldrb	r1, [r7, #6]
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4798      	blx	r3
 800e76a:	4603      	mov	r3, r0
 800e76c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20001b44 	.word	0x20001b44

0800e77c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3301      	adds	r3, #1
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e78c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	b21a      	sxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	b21b      	sxth	r3, r3
 800e79a:	4313      	orrs	r3, r2
 800e79c:	b21b      	sxth	r3, r3
 800e79e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e7a0:	89fb      	ldrh	r3, [r7, #14]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3714      	adds	r7, #20
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b085      	sub	sp, #20
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3303      	adds	r3, #3
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	021b      	lsls	r3, r3, #8
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	3202      	adds	r2, #2
 800e7c6:	7812      	ldrb	r2, [r2, #0]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	021b      	lsls	r3, r3, #8
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	3201      	adds	r2, #1
 800e7d4:	7812      	ldrb	r2, [r2, #0]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	021b      	lsls	r3, r3, #8
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	7812      	ldrb	r2, [r2, #0]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]
	return rv;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	607a      	str	r2, [r7, #4]
 800e806:	887a      	ldrh	r2, [r7, #2]
 800e808:	b2d2      	uxtb	r2, r2
 800e80a:	701a      	strb	r2, [r3, #0]
 800e80c:	887b      	ldrh	r3, [r7, #2]
 800e80e:	0a1b      	lsrs	r3, r3, #8
 800e810:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	1c5a      	adds	r2, r3, #1
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	887a      	ldrh	r2, [r7, #2]
 800e81a:	b2d2      	uxtb	r2, r2
 800e81c:	701a      	strb	r2, [r3, #0]
}
 800e81e:	bf00      	nop
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e82a:	b480      	push	{r7}
 800e82c:	b083      	sub	sp, #12
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	607a      	str	r2, [r7, #4]
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	b2d2      	uxtb	r2, r2
 800e83e:	701a      	strb	r2, [r3, #0]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	b2d2      	uxtb	r2, r2
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	0a1b      	lsrs	r3, r3, #8
 800e856:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	607a      	str	r2, [r7, #4]
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	b2d2      	uxtb	r2, r2
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	0a1b      	lsrs	r3, r3, #8
 800e868:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	b2d2      	uxtb	r2, r2
 800e874:	701a      	strb	r2, [r3, #0]
}
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e882:	b480      	push	{r7}
 800e884:	b087      	sub	sp, #28
 800e886:	af00      	add	r7, sp, #0
 800e888:	60f8      	str	r0, [r7, #12]
 800e88a:	60b9      	str	r1, [r7, #8]
 800e88c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00d      	beq.n	800e8b8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	1c53      	adds	r3, r2, #1
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	1c59      	adds	r1, r3, #1
 800e8a6:	6179      	str	r1, [r7, #20]
 800e8a8:	7812      	ldrb	r2, [r2, #0]
 800e8aa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	607b      	str	r3, [r7, #4]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f1      	bne.n	800e89c <mem_cpy+0x1a>
	}
}
 800e8b8:	bf00      	nop
 800e8ba:	371c      	adds	r7, #28
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e8c4:	b480      	push	{r7}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	1c5a      	adds	r2, r3, #1
 800e8d8:	617a      	str	r2, [r7, #20]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	b2d2      	uxtb	r2, r2
 800e8de:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3b01      	subs	r3, #1
 800e8e4:	607b      	str	r3, [r7, #4]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1f3      	bne.n	800e8d4 <mem_set+0x10>
}
 800e8ec:	bf00      	nop
 800e8ee:	bf00      	nop
 800e8f0:	371c      	adds	r7, #28
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e8fa:	b480      	push	{r7}
 800e8fc:	b089      	sub	sp, #36	@ 0x24
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	60f8      	str	r0, [r7, #12]
 800e902:	60b9      	str	r1, [r7, #8]
 800e904:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	61fb      	str	r3, [r7, #28]
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	61fa      	str	r2, [r7, #28]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	4619      	mov	r1, r3
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	61ba      	str	r2, [r7, #24]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	1acb      	subs	r3, r1, r3
 800e926:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	607b      	str	r3, [r7, #4]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <mem_cmp+0x40>
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0eb      	beq.n	800e912 <mem_cmp+0x18>

	return r;
 800e93a:	697b      	ldr	r3, [r7, #20]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3724      	adds	r7, #36	@ 0x24
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e952:	e002      	b.n	800e95a <chk_chr+0x12>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3301      	adds	r3, #1
 800e958:	607b      	str	r3, [r7, #4]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <chk_chr+0x26>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d1f2      	bne.n	800e954 <chk_chr+0xc>
	return *str;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	781b      	ldrb	r3, [r3, #0]
}
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d009      	beq.n	800e9a0 <lock_fs+0x22>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	4618      	mov	r0, r3
 800e992:	f002 fc42 	bl	801121a <ff_req_grant>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <lock_fs+0x22>
 800e99c:	2301      	movs	r3, #1
 800e99e:	e000      	b.n	800e9a2 <lock_fs+0x24>
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00d      	beq.n	800e9d8 <unlock_fs+0x2e>
 800e9bc:	78fb      	ldrb	r3, [r7, #3]
 800e9be:	2b0c      	cmp	r3, #12
 800e9c0:	d00a      	beq.n	800e9d8 <unlock_fs+0x2e>
 800e9c2:	78fb      	ldrb	r3, [r7, #3]
 800e9c4:	2b0b      	cmp	r3, #11
 800e9c6:	d007      	beq.n	800e9d8 <unlock_fs+0x2e>
 800e9c8:	78fb      	ldrb	r3, [r7, #3]
 800e9ca:	2b0f      	cmp	r3, #15
 800e9cc:	d004      	beq.n	800e9d8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f002 fc36 	bl	8011244 <ff_rel_grant>
	}
}
 800e9d8:	bf00      	nop
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60bb      	str	r3, [r7, #8]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e029      	b.n	800ea48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e9f4:	4a27      	ldr	r2, [pc, #156]	@ (800ea94 <chk_lock+0xb4>)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	4413      	add	r3, r2
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01d      	beq.n	800ea3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea02:	4a24      	ldr	r2, [pc, #144]	@ (800ea94 <chk_lock+0xb4>)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	011b      	lsls	r3, r3, #4
 800ea08:	4413      	add	r3, r2
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d116      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ea14:	4a1f      	ldr	r2, [pc, #124]	@ (800ea94 <chk_lock+0xb4>)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	011b      	lsls	r3, r3, #4
 800ea1a:	4413      	add	r3, r2
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d10c      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea28:	4a1a      	ldr	r2, [pc, #104]	@ (800ea94 <chk_lock+0xb4>)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	011b      	lsls	r3, r3, #4
 800ea2e:	4413      	add	r3, r2
 800ea30:	3308      	adds	r3, #8
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d102      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea3c:	e007      	b.n	800ea4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	3301      	adds	r3, #1
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d9d2      	bls.n	800e9f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d109      	bne.n	800ea68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <chk_lock+0x80>
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d101      	bne.n	800ea64 <chk_lock+0x84>
 800ea60:	2300      	movs	r3, #0
 800ea62:	e010      	b.n	800ea86 <chk_lock+0xa6>
 800ea64:	2312      	movs	r3, #18
 800ea66:	e00e      	b.n	800ea86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d108      	bne.n	800ea80 <chk_lock+0xa0>
 800ea6e:	4a09      	ldr	r2, [pc, #36]	@ (800ea94 <chk_lock+0xb4>)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	4413      	add	r3, r2
 800ea76:	330c      	adds	r3, #12
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea7e:	d101      	bne.n	800ea84 <chk_lock+0xa4>
 800ea80:	2310      	movs	r3, #16
 800ea82:	e000      	b.n	800ea86 <chk_lock+0xa6>
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20001b24 	.word	0x20001b24

0800ea98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	e002      	b.n	800eaaa <enq_lock+0x12>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d806      	bhi.n	800eabe <enq_lock+0x26>
 800eab0:	4a09      	ldr	r2, [pc, #36]	@ (800ead8 <enq_lock+0x40>)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	011b      	lsls	r3, r3, #4
 800eab6:	4413      	add	r3, r2
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1f2      	bne.n	800eaa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	bf14      	ite	ne
 800eac4:	2301      	movne	r3, #1
 800eac6:	2300      	moveq	r3, #0
 800eac8:	b2db      	uxtb	r3, r3
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	20001b24 	.word	0x20001b24

0800eadc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eae6:	2300      	movs	r3, #0
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e01f      	b.n	800eb2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eaec:	4a41      	ldr	r2, [pc, #260]	@ (800ebf4 <inc_lock+0x118>)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	011b      	lsls	r3, r3, #4
 800eaf2:	4413      	add	r3, r2
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d113      	bne.n	800eb26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eafe:	4a3d      	ldr	r2, [pc, #244]	@ (800ebf4 <inc_lock+0x118>)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	011b      	lsls	r3, r3, #4
 800eb04:	4413      	add	r3, r2
 800eb06:	3304      	adds	r3, #4
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d109      	bne.n	800eb26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eb12:	4a38      	ldr	r2, [pc, #224]	@ (800ebf4 <inc_lock+0x118>)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	011b      	lsls	r3, r3, #4
 800eb18:	4413      	add	r3, r2
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d006      	beq.n	800eb34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d9dc      	bls.n	800eaec <inc_lock+0x10>
 800eb32:	e000      	b.n	800eb36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eb34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d132      	bne.n	800eba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
 800eb40:	e002      	b.n	800eb48 <inc_lock+0x6c>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3301      	adds	r3, #1
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d806      	bhi.n	800eb5c <inc_lock+0x80>
 800eb4e:	4a29      	ldr	r2, [pc, #164]	@ (800ebf4 <inc_lock+0x118>)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	011b      	lsls	r3, r3, #4
 800eb54:	4413      	add	r3, r2
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1f2      	bne.n	800eb42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d101      	bne.n	800eb66 <inc_lock+0x8a>
 800eb62:	2300      	movs	r3, #0
 800eb64:	e040      	b.n	800ebe8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	4922      	ldr	r1, [pc, #136]	@ (800ebf4 <inc_lock+0x118>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	011b      	lsls	r3, r3, #4
 800eb70:	440b      	add	r3, r1
 800eb72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	689a      	ldr	r2, [r3, #8]
 800eb78:	491e      	ldr	r1, [pc, #120]	@ (800ebf4 <inc_lock+0x118>)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	440b      	add	r3, r1
 800eb80:	3304      	adds	r3, #4
 800eb82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	695a      	ldr	r2, [r3, #20]
 800eb88:	491a      	ldr	r1, [pc, #104]	@ (800ebf4 <inc_lock+0x118>)
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	440b      	add	r3, r1
 800eb90:	3308      	adds	r3, #8
 800eb92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb94:	4a17      	ldr	r2, [pc, #92]	@ (800ebf4 <inc_lock+0x118>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	011b      	lsls	r3, r3, #4
 800eb9a:	4413      	add	r3, r2
 800eb9c:	330c      	adds	r3, #12
 800eb9e:	2200      	movs	r2, #0
 800eba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <inc_lock+0xe0>
 800eba8:	4a12      	ldr	r2, [pc, #72]	@ (800ebf4 <inc_lock+0x118>)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	011b      	lsls	r3, r3, #4
 800ebae:	4413      	add	r3, r2
 800ebb0:	330c      	adds	r3, #12
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <inc_lock+0xe0>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e015      	b.n	800ebe8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d108      	bne.n	800ebd4 <inc_lock+0xf8>
 800ebc2:	4a0c      	ldr	r2, [pc, #48]	@ (800ebf4 <inc_lock+0x118>)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	4413      	add	r3, r2
 800ebca:	330c      	adds	r3, #12
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	e001      	b.n	800ebd8 <inc_lock+0xfc>
 800ebd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ebd8:	4906      	ldr	r1, [pc, #24]	@ (800ebf4 <inc_lock+0x118>)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	011b      	lsls	r3, r3, #4
 800ebde:	440b      	add	r3, r1
 800ebe0:	330c      	adds	r3, #12
 800ebe2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3301      	adds	r3, #1
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20001b24 	.word	0x20001b24

0800ebf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	607b      	str	r3, [r7, #4]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d825      	bhi.n	800ec58 <dec_lock+0x60>
		n = Files[i].ctr;
 800ec0c:	4a17      	ldr	r2, [pc, #92]	@ (800ec6c <dec_lock+0x74>)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	011b      	lsls	r3, r3, #4
 800ec12:	4413      	add	r3, r2
 800ec14:	330c      	adds	r3, #12
 800ec16:	881b      	ldrh	r3, [r3, #0]
 800ec18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ec1a:	89fb      	ldrh	r3, [r7, #14]
 800ec1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec20:	d101      	bne.n	800ec26 <dec_lock+0x2e>
 800ec22:	2300      	movs	r3, #0
 800ec24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ec26:	89fb      	ldrh	r3, [r7, #14]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <dec_lock+0x3a>
 800ec2c:	89fb      	ldrh	r3, [r7, #14]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ec32:	4a0e      	ldr	r2, [pc, #56]	@ (800ec6c <dec_lock+0x74>)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	011b      	lsls	r3, r3, #4
 800ec38:	4413      	add	r3, r2
 800ec3a:	330c      	adds	r3, #12
 800ec3c:	89fa      	ldrh	r2, [r7, #14]
 800ec3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ec40:	89fb      	ldrh	r3, [r7, #14]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d105      	bne.n	800ec52 <dec_lock+0x5a>
 800ec46:	4a09      	ldr	r2, [pc, #36]	@ (800ec6c <dec_lock+0x74>)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	011b      	lsls	r3, r3, #4
 800ec4c:	4413      	add	r3, r2
 800ec4e:	2200      	movs	r2, #0
 800ec50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	737b      	strb	r3, [r7, #13]
 800ec56:	e001      	b.n	800ec5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ec58:	2302      	movs	r3, #2
 800ec5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ec5c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3714      	adds	r7, #20
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	20001b24 	.word	0x20001b24

0800ec70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	e010      	b.n	800eca0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec7e:	4a0d      	ldr	r2, [pc, #52]	@ (800ecb4 <clear_lock+0x44>)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	011b      	lsls	r3, r3, #4
 800ec84:	4413      	add	r3, r2
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d105      	bne.n	800ec9a <clear_lock+0x2a>
 800ec8e:	4a09      	ldr	r2, [pc, #36]	@ (800ecb4 <clear_lock+0x44>)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	011b      	lsls	r3, r3, #4
 800ec94:	4413      	add	r3, r2
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d9eb      	bls.n	800ec7e <clear_lock+0xe>
	}
}
 800eca6:	bf00      	nop
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	20001b24 	.word	0x20001b24

0800ecb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	78db      	ldrb	r3, [r3, #3]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d034      	beq.n	800ed36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	7858      	ldrb	r0, [r3, #1]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ecdc:	2301      	movs	r3, #1
 800ecde:	697a      	ldr	r2, [r7, #20]
 800ece0:	f7ff fd0e 	bl	800e700 <disk_write>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ecea:	2301      	movs	r3, #1
 800ecec:	73fb      	strb	r3, [r7, #15]
 800ecee:	e022      	b.n	800ed36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	1ad2      	subs	r2, r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d217      	bcs.n	800ed36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	789b      	ldrb	r3, [r3, #2]
 800ed0a:	613b      	str	r3, [r7, #16]
 800ed0c:	e010      	b.n	800ed30 <sync_window+0x78>
					wsect += fs->fsize;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	69db      	ldr	r3, [r3, #28]
 800ed12:	697a      	ldr	r2, [r7, #20]
 800ed14:	4413      	add	r3, r2
 800ed16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7858      	ldrb	r0, [r3, #1]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ed22:	2301      	movs	r3, #1
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	f7ff fceb 	bl	800e700 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	613b      	str	r3, [r7, #16]
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d8eb      	bhi.n	800ed0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3718      	adds	r7, #24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d01b      	beq.n	800ed90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7ff ffad 	bl	800ecb8 <sync_window>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed62:	7bfb      	ldrb	r3, [r7, #15]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d113      	bne.n	800ed90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7858      	ldrb	r0, [r3, #1]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ed72:	2301      	movs	r3, #1
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	f7ff fca3 	bl	800e6c0 <disk_read>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d004      	beq.n	800ed8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed80:	f04f 33ff 	mov.w	r3, #4294967295
 800ed84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff ff87 	bl	800ecb8 <sync_window>
 800edaa:	4603      	mov	r3, r0
 800edac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800edae:	7bfb      	ldrb	r3, [r7, #15]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d158      	bne.n	800ee66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d148      	bne.n	800ee4e <sync_fs+0xb2>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	791b      	ldrb	r3, [r3, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d144      	bne.n	800ee4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3334      	adds	r3, #52	@ 0x34
 800edc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edcc:	2100      	movs	r1, #0
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff fd78 	bl	800e8c4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3334      	adds	r3, #52	@ 0x34
 800edd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eddc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff fd07 	bl	800e7f4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	3334      	adds	r3, #52	@ 0x34
 800edea:	4921      	ldr	r1, [pc, #132]	@ (800ee70 <sync_fs+0xd4>)
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff fd1c 	bl	800e82a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	3334      	adds	r3, #52	@ 0x34
 800edf6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800edfa:	491e      	ldr	r1, [pc, #120]	@ (800ee74 <sync_fs+0xd8>)
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fd14 	bl	800e82a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3334      	adds	r3, #52	@ 0x34
 800ee06:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4610      	mov	r0, r2
 800ee12:	f7ff fd0a 	bl	800e82a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3334      	adds	r3, #52	@ 0x34
 800ee1a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7ff fd00 	bl	800e82a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	1c5a      	adds	r2, r3, #1
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	7858      	ldrb	r0, [r3, #1]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee42:	2301      	movs	r3, #1
 800ee44:	f7ff fc5c 	bl	800e700 <disk_write>
			fs->fsi_flag = 0;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	785b      	ldrb	r3, [r3, #1]
 800ee52:	2200      	movs	r2, #0
 800ee54:	2100      	movs	r1, #0
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7ff fc72 	bl	800e740 <disk_ioctl>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <sync_fs+0xca>
 800ee62:	2301      	movs	r3, #1
 800ee64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	41615252 	.word	0x41615252
 800ee74:	61417272 	.word	0x61417272

0800ee78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	3b02      	subs	r3, #2
 800ee86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	3b02      	subs	r3, #2
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d301      	bcc.n	800ee98 <clust2sect+0x20>
 800ee94:	2300      	movs	r3, #0
 800ee96:	e008      	b.n	800eeaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	895b      	ldrh	r3, [r3, #10]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	fb03 f202 	mul.w	r2, r3, r2
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea8:	4413      	add	r3, r2
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	370c      	adds	r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b086      	sub	sp, #24
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d904      	bls.n	800eed6 <get_fat+0x20>
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d302      	bcc.n	800eedc <get_fat+0x26>
		val = 1;	/* Internal error */
 800eed6:	2301      	movs	r3, #1
 800eed8:	617b      	str	r3, [r7, #20]
 800eeda:	e08e      	b.n	800effa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eedc:	f04f 33ff 	mov.w	r3, #4294967295
 800eee0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d061      	beq.n	800efae <get_fat+0xf8>
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	dc7b      	bgt.n	800efe6 <get_fat+0x130>
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d002      	beq.n	800eef8 <get_fat+0x42>
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d041      	beq.n	800ef7a <get_fat+0xc4>
 800eef6:	e076      	b.n	800efe6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	085b      	lsrs	r3, r3, #1
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	4413      	add	r3, r2
 800ef04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	0a5b      	lsrs	r3, r3, #9
 800ef0e:	4413      	add	r3, r2
 800ef10:	4619      	mov	r1, r3
 800ef12:	6938      	ldr	r0, [r7, #16]
 800ef14:	f7ff ff14 	bl	800ed40 <move_window>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d166      	bne.n	800efec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	1c5a      	adds	r2, r3, #1
 800ef22:	60fa      	str	r2, [r7, #12]
 800ef24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ef30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	0a5b      	lsrs	r3, r3, #9
 800ef3a:	4413      	add	r3, r2
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6938      	ldr	r0, [r7, #16]
 800ef40:	f7ff fefe 	bl	800ed40 <move_window>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d152      	bne.n	800eff0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef50:	693a      	ldr	r2, [r7, #16]
 800ef52:	4413      	add	r3, r2
 800ef54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ef58:	021b      	lsls	r3, r3, #8
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <get_fat+0xba>
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	091b      	lsrs	r3, r3, #4
 800ef6e:	e002      	b.n	800ef76 <get_fat+0xc0>
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef76:	617b      	str	r3, [r7, #20]
			break;
 800ef78:	e03f      	b.n	800effa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	0a1b      	lsrs	r3, r3, #8
 800ef82:	4413      	add	r3, r2
 800ef84:	4619      	mov	r1, r3
 800ef86:	6938      	ldr	r0, [r7, #16]
 800ef88:	f7ff feda 	bl	800ed40 <move_window>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d130      	bne.n	800eff4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	005b      	lsls	r3, r3, #1
 800ef9c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800efa0:	4413      	add	r3, r2
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7ff fbea 	bl	800e77c <ld_word>
 800efa8:	4603      	mov	r3, r0
 800efaa:	617b      	str	r3, [r7, #20]
			break;
 800efac:	e025      	b.n	800effa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	09db      	lsrs	r3, r3, #7
 800efb6:	4413      	add	r3, r2
 800efb8:	4619      	mov	r1, r3
 800efba:	6938      	ldr	r0, [r7, #16]
 800efbc:	f7ff fec0 	bl	800ed40 <move_window>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d118      	bne.n	800eff8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800efd4:	4413      	add	r3, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fbe9 	bl	800e7ae <ld_dword>
 800efdc:	4603      	mov	r3, r0
 800efde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800efe2:	617b      	str	r3, [r7, #20]
			break;
 800efe4:	e009      	b.n	800effa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800efe6:	2301      	movs	r3, #1
 800efe8:	617b      	str	r3, [r7, #20]
 800efea:	e006      	b.n	800effa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efec:	bf00      	nop
 800efee:	e004      	b.n	800effa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eff0:	bf00      	nop
 800eff2:	e002      	b.n	800effa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eff4:	bf00      	nop
 800eff6:	e000      	b.n	800effa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eff8:	bf00      	nop
		}
	}

	return val;
 800effa:	697b      	ldr	r3, [r7, #20]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f004:	b590      	push	{r4, r7, lr}
 800f006:	b089      	sub	sp, #36	@ 0x24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f010:	2302      	movs	r3, #2
 800f012:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2b01      	cmp	r3, #1
 800f018:	f240 80d9 	bls.w	800f1ce <put_fat+0x1ca>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	699b      	ldr	r3, [r3, #24]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	429a      	cmp	r2, r3
 800f024:	f080 80d3 	bcs.w	800f1ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	f000 8096 	beq.w	800f15e <put_fat+0x15a>
 800f032:	2b03      	cmp	r3, #3
 800f034:	f300 80cb 	bgt.w	800f1ce <put_fat+0x1ca>
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d002      	beq.n	800f042 <put_fat+0x3e>
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d06e      	beq.n	800f11e <put_fat+0x11a>
 800f040:	e0c5      	b.n	800f1ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	61bb      	str	r3, [r7, #24]
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	085b      	lsrs	r3, r3, #1
 800f04a:	69ba      	ldr	r2, [r7, #24]
 800f04c:	4413      	add	r3, r2
 800f04e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	0a5b      	lsrs	r3, r3, #9
 800f058:	4413      	add	r3, r2
 800f05a:	4619      	mov	r1, r3
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fe6f 	bl	800ed40 <move_window>
 800f062:	4603      	mov	r3, r0
 800f064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f066:	7ffb      	ldrb	r3, [r7, #31]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f040 80a9 	bne.w	800f1c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	1c59      	adds	r1, r3, #1
 800f078:	61b9      	str	r1, [r7, #24]
 800f07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f07e:	4413      	add	r3, r2
 800f080:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00d      	beq.n	800f0a8 <put_fat+0xa4>
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	b25b      	sxtb	r3, r3
 800f092:	f003 030f 	and.w	r3, r3, #15
 800f096:	b25a      	sxtb	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	b25b      	sxtb	r3, r3
 800f09c:	011b      	lsls	r3, r3, #4
 800f09e:	b25b      	sxtb	r3, r3
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	b25b      	sxtb	r3, r3
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	e001      	b.n	800f0ac <put_fat+0xa8>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	0a5b      	lsrs	r3, r3, #9
 800f0be:	4413      	add	r3, r2
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff fe3c 	bl	800ed40 <move_window>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0cc:	7ffb      	ldrb	r3, [r7, #31]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d178      	bne.n	800f1c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0de:	4413      	add	r3, r2
 800f0e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d003      	beq.n	800f0f4 <put_fat+0xf0>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	091b      	lsrs	r3, r3, #4
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	e00e      	b.n	800f112 <put_fat+0x10e>
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	b25b      	sxtb	r3, r3
 800f0fa:	f023 030f 	bic.w	r3, r3, #15
 800f0fe:	b25a      	sxtb	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	0a1b      	lsrs	r3, r3, #8
 800f104:	b25b      	sxtb	r3, r3
 800f106:	f003 030f 	and.w	r3, r3, #15
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	4313      	orrs	r3, r2
 800f10e:	b25b      	sxtb	r3, r3
 800f110:	b2db      	uxtb	r3, r3
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	70da      	strb	r2, [r3, #3]
			break;
 800f11c:	e057      	b.n	800f1ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	0a1b      	lsrs	r3, r3, #8
 800f126:	4413      	add	r3, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f7ff fe08 	bl	800ed40 <move_window>
 800f130:	4603      	mov	r3, r0
 800f132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f134:	7ffb      	ldrb	r3, [r7, #31]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d146      	bne.n	800f1c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	005b      	lsls	r3, r3, #1
 800f144:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f148:	4413      	add	r3, r2
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	b292      	uxth	r2, r2
 800f14e:	4611      	mov	r1, r2
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff fb4f 	bl	800e7f4 <st_word>
			fs->wflag = 1;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2201      	movs	r2, #1
 800f15a:	70da      	strb	r2, [r3, #3]
			break;
 800f15c:	e037      	b.n	800f1ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	09db      	lsrs	r3, r3, #7
 800f166:	4413      	add	r3, r2
 800f168:	4619      	mov	r1, r3
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f7ff fde8 	bl	800ed40 <move_window>
 800f170:	4603      	mov	r3, r0
 800f172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f174:	7ffb      	ldrb	r3, [r7, #31]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d128      	bne.n	800f1cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f18e:	4413      	add	r3, r2
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fb0c 	bl	800e7ae <ld_dword>
 800f196:	4603      	mov	r3, r0
 800f198:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f19c:	4323      	orrs	r3, r4
 800f19e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f1ae:	4413      	add	r3, r2
 800f1b0:	6879      	ldr	r1, [r7, #4]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff fb39 	bl	800e82a <st_dword>
			fs->wflag = 1;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	70da      	strb	r2, [r3, #3]
			break;
 800f1be:	e006      	b.n	800f1ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f1c0:	bf00      	nop
 800f1c2:	e004      	b.n	800f1ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f1c4:	bf00      	nop
 800f1c6:	e002      	b.n	800f1ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f1c8:	bf00      	nop
 800f1ca:	e000      	b.n	800f1ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f1cc:	bf00      	nop
		}
	}
	return res;
 800f1ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3724      	adds	r7, #36	@ 0x24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd90      	pop	{r4, r7, pc}

0800f1d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b088      	sub	sp, #32
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d904      	bls.n	800f1fe <remove_chain+0x26>
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	68ba      	ldr	r2, [r7, #8]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d301      	bcc.n	800f202 <remove_chain+0x2a>
 800f1fe:	2302      	movs	r3, #2
 800f200:	e04b      	b.n	800f29a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00c      	beq.n	800f222 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f208:	f04f 32ff 	mov.w	r2, #4294967295
 800f20c:	6879      	ldr	r1, [r7, #4]
 800f20e:	69b8      	ldr	r0, [r7, #24]
 800f210:	f7ff fef8 	bl	800f004 <put_fat>
 800f214:	4603      	mov	r3, r0
 800f216:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f218:	7ffb      	ldrb	r3, [r7, #31]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <remove_chain+0x4a>
 800f21e:	7ffb      	ldrb	r3, [r7, #31]
 800f220:	e03b      	b.n	800f29a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7ff fe46 	bl	800eeb6 <get_fat>
 800f22a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d031      	beq.n	800f296 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d101      	bne.n	800f23c <remove_chain+0x64>
 800f238:	2302      	movs	r3, #2
 800f23a:	e02e      	b.n	800f29a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f242:	d101      	bne.n	800f248 <remove_chain+0x70>
 800f244:	2301      	movs	r3, #1
 800f246:	e028      	b.n	800f29a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f248:	2200      	movs	r2, #0
 800f24a:	68b9      	ldr	r1, [r7, #8]
 800f24c:	69b8      	ldr	r0, [r7, #24]
 800f24e:	f7ff fed9 	bl	800f004 <put_fat>
 800f252:	4603      	mov	r3, r0
 800f254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f256:	7ffb      	ldrb	r3, [r7, #31]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <remove_chain+0x88>
 800f25c:	7ffb      	ldrb	r3, [r7, #31]
 800f25e:	e01c      	b.n	800f29a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	695a      	ldr	r2, [r3, #20]
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	3b02      	subs	r3, #2
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d20b      	bcs.n	800f286 <remove_chain+0xae>
			fs->free_clst++;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	791b      	ldrb	r3, [r3, #4]
 800f27c:	f043 0301 	orr.w	r3, r3, #1
 800f280:	b2da      	uxtb	r2, r3
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	699b      	ldr	r3, [r3, #24]
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	429a      	cmp	r2, r3
 800f292:	d3c6      	bcc.n	800f222 <remove_chain+0x4a>
 800f294:	e000      	b.n	800f298 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f296:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3720      	adds	r7, #32
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b088      	sub	sp, #32
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10d      	bne.n	800f2d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d004      	beq.n	800f2ce <create_chain+0x2c>
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	69ba      	ldr	r2, [r7, #24]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d31b      	bcc.n	800f306 <create_chain+0x64>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	61bb      	str	r3, [r7, #24]
 800f2d2:	e018      	b.n	800f306 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fded 	bl	800eeb6 <get_fat>
 800f2dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d801      	bhi.n	800f2e8 <create_chain+0x46>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e070      	b.n	800f3ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ee:	d101      	bne.n	800f2f4 <create_chain+0x52>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	e06a      	b.n	800f3ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d201      	bcs.n	800f302 <create_chain+0x60>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	e063      	b.n	800f3ca <create_chain+0x128>
		scl = clst;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	3301      	adds	r3, #1
 800f30e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	699b      	ldr	r3, [r3, #24]
 800f314:	69fa      	ldr	r2, [r7, #28]
 800f316:	429a      	cmp	r2, r3
 800f318:	d307      	bcc.n	800f32a <create_chain+0x88>
				ncl = 2;
 800f31a:	2302      	movs	r3, #2
 800f31c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f31e:	69fa      	ldr	r2, [r7, #28]
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	429a      	cmp	r2, r3
 800f324:	d901      	bls.n	800f32a <create_chain+0x88>
 800f326:	2300      	movs	r3, #0
 800f328:	e04f      	b.n	800f3ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f32a:	69f9      	ldr	r1, [r7, #28]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff fdc2 	bl	800eeb6 <get_fat>
 800f332:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00e      	beq.n	800f358 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d003      	beq.n	800f348 <create_chain+0xa6>
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f346:	d101      	bne.n	800f34c <create_chain+0xaa>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	e03e      	b.n	800f3ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f34c:	69fa      	ldr	r2, [r7, #28]
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	429a      	cmp	r2, r3
 800f352:	d1da      	bne.n	800f30a <create_chain+0x68>
 800f354:	2300      	movs	r3, #0
 800f356:	e038      	b.n	800f3ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f358:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f35a:	f04f 32ff 	mov.w	r2, #4294967295
 800f35e:	69f9      	ldr	r1, [r7, #28]
 800f360:	6938      	ldr	r0, [r7, #16]
 800f362:	f7ff fe4f 	bl	800f004 <put_fat>
 800f366:	4603      	mov	r3, r0
 800f368:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d109      	bne.n	800f384 <create_chain+0xe2>
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f376:	69fa      	ldr	r2, [r7, #28]
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6938      	ldr	r0, [r7, #16]
 800f37c:	f7ff fe42 	bl	800f004 <put_fat>
 800f380:	4603      	mov	r3, r0
 800f382:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f384:	7dfb      	ldrb	r3, [r7, #23]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d116      	bne.n	800f3b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	69fa      	ldr	r2, [r7, #28]
 800f38e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	695a      	ldr	r2, [r3, #20]
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	3b02      	subs	r3, #2
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d804      	bhi.n	800f3a8 <create_chain+0x106>
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	695b      	ldr	r3, [r3, #20]
 800f3a2:	1e5a      	subs	r2, r3, #1
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	791b      	ldrb	r3, [r3, #4]
 800f3ac:	f043 0301 	orr.w	r3, r3, #1
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	711a      	strb	r2, [r3, #4]
 800f3b6:	e007      	b.n	800f3c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d102      	bne.n	800f3c4 <create_chain+0x122>
 800f3be:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c2:	e000      	b.n	800f3c6 <create_chain+0x124>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f3c8:	69fb      	ldr	r3, [r7, #28]
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3720      	adds	r7, #32
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f3d2:	b480      	push	{r7}
 800f3d4:	b087      	sub	sp, #28
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	0a5b      	lsrs	r3, r3, #9
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	8952      	ldrh	r2, [r2, #10]
 800f3f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	1d1a      	adds	r2, r3, #4
 800f3fc:	613a      	str	r2, [r7, #16]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d101      	bne.n	800f40c <clmt_clust+0x3a>
 800f408:	2300      	movs	r3, #0
 800f40a:	e010      	b.n	800f42e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	429a      	cmp	r2, r3
 800f412:	d307      	bcc.n	800f424 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	3304      	adds	r3, #4
 800f420:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f422:	e7e9      	b.n	800f3f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f424:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	4413      	add	r3, r2
}
 800f42e:	4618      	mov	r0, r3
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr

0800f43a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b086      	sub	sp, #24
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f450:	d204      	bcs.n	800f45c <dir_sdi+0x22>
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	f003 031f 	and.w	r3, r3, #31
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f45c:	2302      	movs	r3, #2
 800f45e:	e063      	b.n	800f528 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	683a      	ldr	r2, [r7, #0]
 800f464:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d106      	bne.n	800f480 <dir_sdi+0x46>
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b02      	cmp	r3, #2
 800f478:	d902      	bls.n	800f480 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10c      	bne.n	800f4a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	095b      	lsrs	r3, r3, #5
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	8912      	ldrh	r2, [r2, #8]
 800f48e:	4293      	cmp	r3, r2
 800f490:	d301      	bcc.n	800f496 <dir_sdi+0x5c>
 800f492:	2302      	movs	r3, #2
 800f494:	e048      	b.n	800f528 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	61da      	str	r2, [r3, #28]
 800f49e:	e029      	b.n	800f4f4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	895b      	ldrh	r3, [r3, #10]
 800f4a4:	025b      	lsls	r3, r3, #9
 800f4a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4a8:	e019      	b.n	800f4de <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6979      	ldr	r1, [r7, #20]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff fd01 	bl	800eeb6 <get_fat>
 800f4b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4bc:	d101      	bne.n	800f4c2 <dir_sdi+0x88>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e032      	b.n	800f528 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d904      	bls.n	800f4d2 <dir_sdi+0x98>
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	697a      	ldr	r2, [r7, #20]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d301      	bcc.n	800f4d6 <dir_sdi+0x9c>
 800f4d2:	2302      	movs	r3, #2
 800f4d4:	e028      	b.n	800f528 <dir_sdi+0xee>
			ofs -= csz;
 800f4d6:	683a      	ldr	r2, [r7, #0]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d2e1      	bcs.n	800f4aa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f4e6:	6979      	ldr	r1, [r7, #20]
 800f4e8:	6938      	ldr	r0, [r7, #16]
 800f4ea:	f7ff fcc5 	bl	800ee78 <clust2sect>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <dir_sdi+0xcc>
 800f502:	2302      	movs	r3, #2
 800f504:	e010      	b.n	800f528 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	69da      	ldr	r2, [r3, #28]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	0a5b      	lsrs	r3, r3, #9
 800f50e:	441a      	add	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f520:	441a      	add	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	695b      	ldr	r3, [r3, #20]
 800f544:	3320      	adds	r3, #32
 800f546:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d003      	beq.n	800f558 <dir_next+0x28>
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f556:	d301      	bcc.n	800f55c <dir_next+0x2c>
 800f558:	2304      	movs	r3, #4
 800f55a:	e0aa      	b.n	800f6b2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f562:	2b00      	cmp	r3, #0
 800f564:	f040 8098 	bne.w	800f698 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10b      	bne.n	800f592 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	095b      	lsrs	r3, r3, #5
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	8912      	ldrh	r2, [r2, #8]
 800f582:	4293      	cmp	r3, r2
 800f584:	f0c0 8088 	bcc.w	800f698 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	61da      	str	r2, [r3, #28]
 800f58e:	2304      	movs	r3, #4
 800f590:	e08f      	b.n	800f6b2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	0a5b      	lsrs	r3, r3, #9
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	8952      	ldrh	r2, [r2, #10]
 800f59a:	3a01      	subs	r2, #1
 800f59c:	4013      	ands	r3, r2
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d17a      	bne.n	800f698 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	f7ff fc83 	bl	800eeb6 <get_fat>
 800f5b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d801      	bhi.n	800f5bc <dir_next+0x8c>
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	e07a      	b.n	800f6b2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	d101      	bne.n	800f5c8 <dir_next+0x98>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e074      	b.n	800f6b2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	697a      	ldr	r2, [r7, #20]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d358      	bcc.n	800f684 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d104      	bne.n	800f5e2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	61da      	str	r2, [r3, #28]
 800f5de:	2304      	movs	r3, #4
 800f5e0:	e067      	b.n	800f6b2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	f7ff fe59 	bl	800f2a2 <create_chain>
 800f5f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <dir_next+0xcc>
 800f5f8:	2307      	movs	r3, #7
 800f5fa:	e05a      	b.n	800f6b2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <dir_next+0xd6>
 800f602:	2302      	movs	r3, #2
 800f604:	e055      	b.n	800f6b2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60c:	d101      	bne.n	800f612 <dir_next+0xe2>
 800f60e:	2301      	movs	r3, #1
 800f610:	e04f      	b.n	800f6b2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f7ff fb50 	bl	800ecb8 <sync_window>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <dir_next+0xf2>
 800f61e:	2301      	movs	r3, #1
 800f620:	e047      	b.n	800f6b2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3334      	adds	r3, #52	@ 0x34
 800f626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f62a:	2100      	movs	r1, #0
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7ff f949 	bl	800e8c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f632:	2300      	movs	r3, #0
 800f634:	613b      	str	r3, [r7, #16]
 800f636:	6979      	ldr	r1, [r7, #20]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7ff fc1d 	bl	800ee78 <clust2sect>
 800f63e:	4602      	mov	r2, r0
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	631a      	str	r2, [r3, #48]	@ 0x30
 800f644:	e012      	b.n	800f66c <dir_next+0x13c>
						fs->wflag = 1;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2201      	movs	r2, #1
 800f64a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7ff fb33 	bl	800ecb8 <sync_window>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <dir_next+0x12c>
 800f658:	2301      	movs	r3, #1
 800f65a:	e02a      	b.n	800f6b2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	3301      	adds	r3, #1
 800f660:	613b      	str	r3, [r7, #16]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	895b      	ldrh	r3, [r3, #10]
 800f670:	461a      	mov	r2, r3
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	4293      	cmp	r3, r2
 800f676:	d3e6      	bcc.n	800f646 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	1ad2      	subs	r2, r2, r3
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	697a      	ldr	r2, [r7, #20]
 800f688:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f68a:	6979      	ldr	r1, [r7, #20]
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f7ff fbf3 	bl	800ee78 <clust2sect>
 800f692:	4602      	mov	r2, r0
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6aa:	441a      	add	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b086      	sub	sp, #24
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff feb4 	bl	800f43a <dir_sdi>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f6d6:	7dfb      	ldrb	r3, [r7, #23]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d12b      	bne.n	800f734 <dir_alloc+0x7a>
		n = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	69db      	ldr	r3, [r3, #28]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff fb2a 	bl	800ed40 <move_window>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f6f0:	7dfb      	ldrb	r3, [r7, #23]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d11d      	bne.n	800f732 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2be5      	cmp	r3, #229	@ 0xe5
 800f6fe:	d004      	beq.n	800f70a <dir_alloc+0x50>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a1b      	ldr	r3, [r3, #32]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d107      	bne.n	800f71a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	3301      	adds	r3, #1
 800f70e:	613b      	str	r3, [r7, #16]
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d102      	bne.n	800f71e <dir_alloc+0x64>
 800f718:	e00c      	b.n	800f734 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f71a:	2300      	movs	r3, #0
 800f71c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f71e:	2101      	movs	r1, #1
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff ff05 	bl	800f530 <dir_next>
 800f726:	4603      	mov	r3, r0
 800f728:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f72a:	7dfb      	ldrb	r3, [r7, #23]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d0d7      	beq.n	800f6e0 <dir_alloc+0x26>
 800f730:	e000      	b.n	800f734 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f732:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	2b04      	cmp	r3, #4
 800f738:	d101      	bne.n	800f73e <dir_alloc+0x84>
 800f73a:	2307      	movs	r3, #7
 800f73c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	331a      	adds	r3, #26
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff f810 	bl	800e77c <ld_word>
 800f75c:	4603      	mov	r3, r0
 800f75e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b03      	cmp	r3, #3
 800f766:	d109      	bne.n	800f77c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	3314      	adds	r3, #20
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff f805 	bl	800e77c <ld_word>
 800f772:	4603      	mov	r3, r0
 800f774:	041b      	lsls	r3, r3, #16
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	4313      	orrs	r3, r2
 800f77a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f77c:	68fb      	ldr	r3, [r7, #12]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b084      	sub	sp, #16
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	60b9      	str	r1, [r7, #8]
 800f790:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	331a      	adds	r3, #26
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	b292      	uxth	r2, r2
 800f79a:	4611      	mov	r1, r2
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7ff f829 	bl	800e7f4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d109      	bne.n	800f7be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f103 0214 	add.w	r2, r3, #20
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	0c1b      	lsrs	r3, r3, #16
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	f7ff f81b 	bl	800e7f4 <st_word>
	}
}
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b086      	sub	sp, #24
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7ff fe2f 	bl	800f43a <dir_sdi>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <dir_find+0x24>
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	e03e      	b.n	800f868 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6938      	ldr	r0, [r7, #16]
 800f7f2:	f7ff faa5 	bl	800ed40 <move_window>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d12f      	bne.n	800f860 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f808:	7bfb      	ldrb	r3, [r7, #15]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d102      	bne.n	800f814 <dir_find+0x4e>
 800f80e:	2304      	movs	r3, #4
 800f810:	75fb      	strb	r3, [r7, #23]
 800f812:	e028      	b.n	800f866 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	330b      	adds	r3, #11
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f820:	b2da      	uxtb	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	330b      	adds	r3, #11
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f003 0308 	and.w	r3, r3, #8
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10a      	bne.n	800f84c <dir_find+0x86>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a18      	ldr	r0, [r3, #32]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3324      	adds	r3, #36	@ 0x24
 800f83e:	220b      	movs	r2, #11
 800f840:	4619      	mov	r1, r3
 800f842:	f7ff f85a 	bl	800e8fa <mem_cmp>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00b      	beq.n	800f864 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f84c:	2100      	movs	r1, #0
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff fe6e 	bl	800f530 <dir_next>
 800f854:	4603      	mov	r3, r0
 800f856:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f858:	7dfb      	ldrb	r3, [r7, #23]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0c5      	beq.n	800f7ea <dir_find+0x24>
 800f85e:	e002      	b.n	800f866 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f860:	bf00      	nop
 800f862:	e000      	b.n	800f866 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f864:	bf00      	nop

	return res;
 800f866:	7dfb      	ldrb	r3, [r7, #23]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3718      	adds	r7, #24
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f87e:	2101      	movs	r1, #1
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff ff1a 	bl	800f6ba <dir_alloc>
 800f886:	4603      	mov	r3, r0
 800f888:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d11c      	bne.n	800f8ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	69db      	ldr	r3, [r3, #28]
 800f894:	4619      	mov	r1, r3
 800f896:	68b8      	ldr	r0, [r7, #8]
 800f898:	f7ff fa52 	bl	800ed40 <move_window>
 800f89c:	4603      	mov	r3, r0
 800f89e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d111      	bne.n	800f8ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	2220      	movs	r2, #32
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7ff f808 	bl	800e8c4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a18      	ldr	r0, [r3, #32]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	3324      	adds	r3, #36	@ 0x24
 800f8bc:	220b      	movs	r2, #11
 800f8be:	4619      	mov	r1, r3
 800f8c0:	f7fe ffdf 	bl	800e882 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	60fb      	str	r3, [r7, #12]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	3324      	adds	r3, #36	@ 0x24
 800f8e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f8ea:	220b      	movs	r2, #11
 800f8ec:	2120      	movs	r1, #32
 800f8ee:	68b8      	ldr	r0, [r7, #8]
 800f8f0:	f7fe ffe8 	bl	800e8c4 <mem_set>
	si = i = 0; ni = 8;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	613b      	str	r3, [r7, #16]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	61fb      	str	r3, [r7, #28]
 800f8fc:	2308      	movs	r3, #8
 800f8fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	61fa      	str	r2, [r7, #28]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	4413      	add	r3, r2
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f90e:	7efb      	ldrb	r3, [r7, #27]
 800f910:	2b20      	cmp	r3, #32
 800f912:	d94e      	bls.n	800f9b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f914:	7efb      	ldrb	r3, [r7, #27]
 800f916:	2b2f      	cmp	r3, #47	@ 0x2f
 800f918:	d006      	beq.n	800f928 <create_name+0x54>
 800f91a:	7efb      	ldrb	r3, [r7, #27]
 800f91c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f91e:	d110      	bne.n	800f942 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f920:	e002      	b.n	800f928 <create_name+0x54>
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	3301      	adds	r3, #1
 800f926:	61fb      	str	r3, [r7, #28]
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	4413      	add	r3, r2
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2b2f      	cmp	r3, #47	@ 0x2f
 800f932:	d0f6      	beq.n	800f922 <create_name+0x4e>
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f93e:	d0f0      	beq.n	800f922 <create_name+0x4e>
			break;
 800f940:	e038      	b.n	800f9b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f942:	7efb      	ldrb	r3, [r7, #27]
 800f944:	2b2e      	cmp	r3, #46	@ 0x2e
 800f946:	d003      	beq.n	800f950 <create_name+0x7c>
 800f948:	693a      	ldr	r2, [r7, #16]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d30c      	bcc.n	800f96a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b0b      	cmp	r3, #11
 800f954:	d002      	beq.n	800f95c <create_name+0x88>
 800f956:	7efb      	ldrb	r3, [r7, #27]
 800f958:	2b2e      	cmp	r3, #46	@ 0x2e
 800f95a:	d001      	beq.n	800f960 <create_name+0x8c>
 800f95c:	2306      	movs	r3, #6
 800f95e:	e044      	b.n	800f9ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f960:	2308      	movs	r3, #8
 800f962:	613b      	str	r3, [r7, #16]
 800f964:	230b      	movs	r3, #11
 800f966:	617b      	str	r3, [r7, #20]
			continue;
 800f968:	e022      	b.n	800f9b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f96a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	da04      	bge.n	800f97c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f972:	7efb      	ldrb	r3, [r7, #27]
 800f974:	3b80      	subs	r3, #128	@ 0x80
 800f976:	4a1f      	ldr	r2, [pc, #124]	@ (800f9f4 <create_name+0x120>)
 800f978:	5cd3      	ldrb	r3, [r2, r3]
 800f97a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f97c:	7efb      	ldrb	r3, [r7, #27]
 800f97e:	4619      	mov	r1, r3
 800f980:	481d      	ldr	r0, [pc, #116]	@ (800f9f8 <create_name+0x124>)
 800f982:	f7fe ffe1 	bl	800e948 <chk_chr>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <create_name+0xbc>
 800f98c:	2306      	movs	r3, #6
 800f98e:	e02c      	b.n	800f9ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f990:	7efb      	ldrb	r3, [r7, #27]
 800f992:	2b60      	cmp	r3, #96	@ 0x60
 800f994:	d905      	bls.n	800f9a2 <create_name+0xce>
 800f996:	7efb      	ldrb	r3, [r7, #27]
 800f998:	2b7a      	cmp	r3, #122	@ 0x7a
 800f99a:	d802      	bhi.n	800f9a2 <create_name+0xce>
 800f99c:	7efb      	ldrb	r3, [r7, #27]
 800f99e:	3b20      	subs	r3, #32
 800f9a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	613a      	str	r2, [r7, #16]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	7efa      	ldrb	r2, [r7, #27]
 800f9ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f9b0:	e7a6      	b.n	800f900 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	441a      	add	r2, r3
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d101      	bne.n	800f9c8 <create_name+0xf4>
 800f9c4:	2306      	movs	r3, #6
 800f9c6:	e010      	b.n	800f9ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	2be5      	cmp	r3, #229	@ 0xe5
 800f9ce:	d102      	bne.n	800f9d6 <create_name+0x102>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2205      	movs	r2, #5
 800f9d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f9d6:	7efb      	ldrb	r3, [r7, #27]
 800f9d8:	2b20      	cmp	r3, #32
 800f9da:	d801      	bhi.n	800f9e0 <create_name+0x10c>
 800f9dc:	2204      	movs	r2, #4
 800f9de:	e000      	b.n	800f9e2 <create_name+0x10e>
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	330b      	adds	r3, #11
 800f9e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f9e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3720      	adds	r7, #32
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0801aeb4 	.word	0x0801aeb4
 800f9f8:	08018efc 	.word	0x08018efc

0800f9fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fa10:	e002      	b.n	800fa18 <follow_path+0x1c>
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	603b      	str	r3, [r7, #0]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa1e:	d0f8      	beq.n	800fa12 <follow_path+0x16>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b5c      	cmp	r3, #92	@ 0x5c
 800fa26:	d0f4      	beq.n	800fa12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	2b1f      	cmp	r3, #31
 800fa34:	d80a      	bhi.n	800fa4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2280      	movs	r2, #128	@ 0x80
 800fa3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fa3e:	2100      	movs	r1, #0
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff fcfa 	bl	800f43a <dir_sdi>
 800fa46:	4603      	mov	r3, r0
 800fa48:	75fb      	strb	r3, [r7, #23]
 800fa4a:	e043      	b.n	800fad4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa4c:	463b      	mov	r3, r7
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff ff3f 	bl	800f8d4 <create_name>
 800fa56:	4603      	mov	r3, r0
 800fa58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d134      	bne.n	800faca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff feb0 	bl	800f7c6 <dir_find>
 800fa66:	4603      	mov	r3, r0
 800fa68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fa70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00a      	beq.n	800fa8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa78:	7dfb      	ldrb	r3, [r7, #23]
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	d127      	bne.n	800face <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa7e:	7afb      	ldrb	r3, [r7, #11]
 800fa80:	f003 0304 	and.w	r3, r3, #4
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d122      	bne.n	800face <follow_path+0xd2>
 800fa88:	2305      	movs	r3, #5
 800fa8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fa8c:	e01f      	b.n	800face <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa8e:	7afb      	ldrb	r3, [r7, #11]
 800fa90:	f003 0304 	and.w	r3, r3, #4
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d11c      	bne.n	800fad2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	799b      	ldrb	r3, [r3, #6]
 800fa9c:	f003 0310 	and.w	r3, r3, #16
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800faa4:	2305      	movs	r3, #5
 800faa6:	75fb      	strb	r3, [r7, #23]
 800faa8:	e014      	b.n	800fad4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fab8:	4413      	add	r3, r2
 800faba:	4619      	mov	r1, r3
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f7ff fe43 	bl	800f748 <ld_clust>
 800fac2:	4602      	mov	r2, r0
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fac8:	e7c0      	b.n	800fa4c <follow_path+0x50>
			if (res != FR_OK) break;
 800faca:	bf00      	nop
 800facc:	e002      	b.n	800fad4 <follow_path+0xd8>
				break;
 800face:	bf00      	nop
 800fad0:	e000      	b.n	800fad4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fad2:	bf00      	nop
			}
		}
	}

	return res;
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fade:	b480      	push	{r7}
 800fae0:	b087      	sub	sp, #28
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fae6:	f04f 33ff 	mov.w	r3, #4294967295
 800faea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d031      	beq.n	800fb58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	617b      	str	r3, [r7, #20]
 800fafa:	e002      	b.n	800fb02 <get_ldnumber+0x24>
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	3301      	adds	r3, #1
 800fb00:	617b      	str	r3, [r7, #20]
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	2b20      	cmp	r3, #32
 800fb08:	d903      	bls.n	800fb12 <get_ldnumber+0x34>
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	2b3a      	cmp	r3, #58	@ 0x3a
 800fb10:	d1f4      	bne.n	800fafc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b3a      	cmp	r3, #58	@ 0x3a
 800fb18:	d11c      	bne.n	800fb54 <get_ldnumber+0x76>
			tp = *path;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	1c5a      	adds	r2, r3, #1
 800fb24:	60fa      	str	r2, [r7, #12]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	3b30      	subs	r3, #48	@ 0x30
 800fb2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	2b09      	cmp	r3, #9
 800fb30:	d80e      	bhi.n	800fb50 <get_ldnumber+0x72>
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d10a      	bne.n	800fb50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d107      	bne.n	800fb50 <get_ldnumber+0x72>
					vol = (int)i;
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	3301      	adds	r3, #1
 800fb48:	617b      	str	r3, [r7, #20]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	e002      	b.n	800fb5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb58:	693b      	ldr	r3, [r7, #16]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
	...

0800fb68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	70da      	strb	r2, [r3, #3]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb7e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff f8dc 	bl	800ed40 <move_window>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <check_fs+0x2a>
 800fb8e:	2304      	movs	r3, #4
 800fb90:	e038      	b.n	800fc04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3334      	adds	r3, #52	@ 0x34
 800fb96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fe fdee 	bl	800e77c <ld_word>
 800fba0:	4603      	mov	r3, r0
 800fba2:	461a      	mov	r2, r3
 800fba4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d001      	beq.n	800fbb0 <check_fs+0x48>
 800fbac:	2303      	movs	r3, #3
 800fbae:	e029      	b.n	800fc04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbb6:	2be9      	cmp	r3, #233	@ 0xe9
 800fbb8:	d009      	beq.n	800fbce <check_fs+0x66>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbc0:	2beb      	cmp	r3, #235	@ 0xeb
 800fbc2:	d11e      	bne.n	800fc02 <check_fs+0x9a>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800fbca:	2b90      	cmp	r3, #144	@ 0x90
 800fbcc:	d119      	bne.n	800fc02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3334      	adds	r3, #52	@ 0x34
 800fbd2:	3336      	adds	r3, #54	@ 0x36
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fe fdea 	bl	800e7ae <ld_dword>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	@ (800fc0c <check_fs+0xa4>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d101      	bne.n	800fbea <check_fs+0x82>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e00c      	b.n	800fc04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	3334      	adds	r3, #52	@ 0x34
 800fbee:	3352      	adds	r3, #82	@ 0x52
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe fddc 	bl	800e7ae <ld_dword>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4a05      	ldr	r2, [pc, #20]	@ (800fc10 <check_fs+0xa8>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d101      	bne.n	800fc02 <check_fs+0x9a>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e000      	b.n	800fc04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fc02:	2302      	movs	r3, #2
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	00544146 	.word	0x00544146
 800fc10:	33544146 	.word	0x33544146

0800fc14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b096      	sub	sp, #88	@ 0x58
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7ff ff58 	bl	800fade <get_ldnumber>
 800fc2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	da01      	bge.n	800fc3a <find_volume+0x26>
 800fc36:	230b      	movs	r3, #11
 800fc38:	e235      	b.n	80100a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc3a:	4aa5      	ldr	r2, [pc, #660]	@ (800fed0 <find_volume+0x2bc>)
 800fc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <find_volume+0x3a>
 800fc4a:	230c      	movs	r3, #12
 800fc4c:	e22b      	b.n	80100a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800fc4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fc50:	f7fe fe95 	bl	800e97e <lock_fs>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <find_volume+0x4a>
 800fc5a:	230f      	movs	r3, #15
 800fc5c:	e223      	b.n	80100a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	f023 0301 	bic.w	r3, r3, #1
 800fc6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d01a      	beq.n	800fcaa <find_volume+0x96>
		stat = disk_status(fs->drv);
 800fc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc76:	785b      	ldrb	r3, [r3, #1]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fe fce1 	bl	800e640 <disk_status>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fc84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc88:	f003 0301 	and.w	r3, r3, #1
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d10c      	bne.n	800fcaa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d007      	beq.n	800fca6 <find_volume+0x92>
 800fc96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc9a:	f003 0304 	and.w	r3, r3, #4
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800fca2:	230a      	movs	r3, #10
 800fca4:	e1ff      	b.n	80100a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800fca6:	2300      	movs	r3, #0
 800fca8:	e1fd      	b.n	80100a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcba:	785b      	ldrb	r3, [r3, #1]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fe fcd9 	bl	800e674 <disk_initialize>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fccc:	f003 0301 	and.w	r3, r3, #1
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d001      	beq.n	800fcd8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fcd4:	2303      	movs	r3, #3
 800fcd6:	e1e6      	b.n	80100a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fcd8:	79fb      	ldrb	r3, [r7, #7]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d007      	beq.n	800fcee <find_volume+0xda>
 800fcde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fce2:	f003 0304 	and.w	r3, r3, #4
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800fcea:	230a      	movs	r3, #10
 800fcec:	e1db      	b.n	80100a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fcf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fcf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fcf6:	f7ff ff37 	bl	800fb68 <check_fs>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fd00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d149      	bne.n	800fd9c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd08:	2300      	movs	r3, #0
 800fd0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd0c:	e01e      	b.n	800fd4c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd16:	011b      	lsls	r3, r3, #4
 800fd18:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fd1c:	4413      	add	r3, r2
 800fd1e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd22:	3304      	adds	r3, #4
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d006      	beq.n	800fd38 <find_volume+0x124>
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fd3d 	bl	800e7ae <ld_dword>
 800fd34:	4602      	mov	r2, r0
 800fd36:	e000      	b.n	800fd3a <find_volume+0x126>
 800fd38:	2200      	movs	r2, #0
 800fd3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	3358      	adds	r3, #88	@ 0x58
 800fd40:	443b      	add	r3, r7
 800fd42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd48:	3301      	adds	r3, #1
 800fd4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d9dd      	bls.n	800fd0e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fd52:	2300      	movs	r3, #0
 800fd54:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <find_volume+0x14e>
 800fd5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fd62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	3358      	adds	r3, #88	@ 0x58
 800fd68:	443b      	add	r3, r7
 800fd6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fd6e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d005      	beq.n	800fd82 <find_volume+0x16e>
 800fd76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fd78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd7a:	f7ff fef5 	bl	800fb68 <check_fs>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	e000      	b.n	800fd84 <find_volume+0x170>
 800fd82:	2303      	movs	r3, #3
 800fd84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d905      	bls.n	800fd9c <find_volume+0x188>
 800fd90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd92:	3301      	adds	r3, #1
 800fd94:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d9e2      	bls.n	800fd62 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fda0:	2b04      	cmp	r3, #4
 800fda2:	d101      	bne.n	800fda8 <find_volume+0x194>
 800fda4:	2301      	movs	r3, #1
 800fda6:	e17e      	b.n	80100a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fda8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d901      	bls.n	800fdb4 <find_volume+0x1a0>
 800fdb0:	230d      	movs	r3, #13
 800fdb2:	e178      	b.n	80100a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb6:	3334      	adds	r3, #52	@ 0x34
 800fdb8:	330b      	adds	r3, #11
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fcde 	bl	800e77c <ld_word>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fdc6:	d001      	beq.n	800fdcc <find_volume+0x1b8>
 800fdc8:	230d      	movs	r3, #13
 800fdca:	e16c      	b.n	80100a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdce:	3334      	adds	r3, #52	@ 0x34
 800fdd0:	3316      	adds	r3, #22
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fcd2 	bl	800e77c <ld_word>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d106      	bne.n	800fdf0 <find_volume+0x1dc>
 800fde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde4:	3334      	adds	r3, #52	@ 0x34
 800fde6:	3324      	adds	r3, #36	@ 0x24
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fe fce0 	bl	800e7ae <ld_dword>
 800fdee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fdf4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fe00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe02:	789b      	ldrb	r3, [r3, #2]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d005      	beq.n	800fe14 <find_volume+0x200>
 800fe08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0a:	789b      	ldrb	r3, [r3, #2]
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	d001      	beq.n	800fe14 <find_volume+0x200>
 800fe10:	230d      	movs	r3, #13
 800fe12:	e148      	b.n	80100a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fe14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe16:	789b      	ldrb	r3, [r3, #2]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe1c:	fb02 f303 	mul.w	r3, r2, r3
 800fe20:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fe22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe28:	461a      	mov	r2, r3
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe30:	895b      	ldrh	r3, [r3, #10]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d008      	beq.n	800fe48 <find_volume+0x234>
 800fe36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe38:	895b      	ldrh	r3, [r3, #10]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe3e:	895b      	ldrh	r3, [r3, #10]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	4013      	ands	r3, r2
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <find_volume+0x238>
 800fe48:	230d      	movs	r3, #13
 800fe4a:	e12c      	b.n	80100a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe4e:	3334      	adds	r3, #52	@ 0x34
 800fe50:	3311      	adds	r3, #17
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe fc92 	bl	800e77c <ld_word>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fe60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	f003 030f 	and.w	r3, r3, #15
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d001      	beq.n	800fe72 <find_volume+0x25e>
 800fe6e:	230d      	movs	r3, #13
 800fe70:	e119      	b.n	80100a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe74:	3334      	adds	r3, #52	@ 0x34
 800fe76:	3313      	adds	r3, #19
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe fc7f 	bl	800e77c <ld_word>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d106      	bne.n	800fe96 <find_volume+0x282>
 800fe88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe8a:	3334      	adds	r3, #52	@ 0x34
 800fe8c:	3320      	adds	r3, #32
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe fc8d 	bl	800e7ae <ld_dword>
 800fe94:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe98:	3334      	adds	r3, #52	@ 0x34
 800fe9a:	330e      	adds	r3, #14
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fe fc6d 	bl	800e77c <ld_word>
 800fea2:	4603      	mov	r3, r0
 800fea4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fea6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <find_volume+0x29c>
 800feac:	230d      	movs	r3, #13
 800feae:	e0fa      	b.n	80100a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800feb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800feb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800feb4:	4413      	add	r3, r2
 800feb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800feb8:	8912      	ldrh	r2, [r2, #8]
 800feba:	0912      	lsrs	r2, r2, #4
 800febc:	b292      	uxth	r2, r2
 800febe:	4413      	add	r3, r2
 800fec0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d204      	bcs.n	800fed4 <find_volume+0x2c0>
 800feca:	230d      	movs	r3, #13
 800fecc:	e0eb      	b.n	80100a6 <find_volume+0x492>
 800fece:	bf00      	nop
 800fed0:	20001b1c 	.word	0x20001b1c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fedc:	8952      	ldrh	r2, [r2, #10]
 800fede:	fbb3 f3f2 	udiv	r3, r3, r2
 800fee2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d101      	bne.n	800feee <find_volume+0x2da>
 800feea:	230d      	movs	r3, #13
 800feec:	e0db      	b.n	80100a6 <find_volume+0x492>
		fmt = FS_FAT32;
 800feee:	2303      	movs	r3, #3
 800fef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d802      	bhi.n	800ff04 <find_volume+0x2f0>
 800fefe:	2302      	movs	r3, #2
 800ff00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ff04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff06:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d802      	bhi.n	800ff14 <find_volume+0x300>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ff14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff16:	1c9a      	adds	r2, r3, #2
 800ff18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ff20:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ff22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ff24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff26:	441a      	add	r2, r3
 800ff28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff2a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ff2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ff2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff30:	441a      	add	r2, r3
 800ff32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff34:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800ff36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	d11e      	bne.n	800ff7c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff40:	3334      	adds	r3, #52	@ 0x34
 800ff42:	332a      	adds	r3, #42	@ 0x2a
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fe fc19 	bl	800e77c <ld_word>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <find_volume+0x340>
 800ff50:	230d      	movs	r3, #13
 800ff52:	e0a8      	b.n	80100a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ff54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff56:	891b      	ldrh	r3, [r3, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <find_volume+0x34c>
 800ff5c:	230d      	movs	r3, #13
 800ff5e:	e0a2      	b.n	80100a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff62:	3334      	adds	r3, #52	@ 0x34
 800ff64:	332c      	adds	r3, #44	@ 0x2c
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fe fc21 	bl	800e7ae <ld_dword>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff70:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff74:	699b      	ldr	r3, [r3, #24]
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff7a:	e01f      	b.n	800ffbc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff7e:	891b      	ldrh	r3, [r3, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <find_volume+0x374>
 800ff84:	230d      	movs	r3, #13
 800ff86:	e08e      	b.n	80100a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff8e:	441a      	add	r2, r3
 800ff90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff92:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d103      	bne.n	800ffa4 <find_volume+0x390>
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff9e:	699b      	ldr	r3, [r3, #24]
 800ffa0:	005b      	lsls	r3, r3, #1
 800ffa2:	e00a      	b.n	800ffba <find_volume+0x3a6>
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa6:	699a      	ldr	r2, [r3, #24]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	4413      	add	r3, r2
 800ffae:	085a      	lsrs	r2, r3, #1
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ffba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffbe:	69da      	ldr	r2, [r3, #28]
 800ffc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffc2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ffc6:	0a5b      	lsrs	r3, r3, #9
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d201      	bcs.n	800ffd0 <find_volume+0x3bc>
 800ffcc:	230d      	movs	r3, #13
 800ffce:	e06a      	b.n	80100a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd6:	615a      	str	r2, [r3, #20]
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffda:	695a      	ldr	r2, [r3, #20]
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffde:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe2:	2280      	movs	r2, #128	@ 0x80
 800ffe4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ffe6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ffea:	2b03      	cmp	r3, #3
 800ffec:	d149      	bne.n	8010082 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ffee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff0:	3334      	adds	r3, #52	@ 0x34
 800fff2:	3330      	adds	r3, #48	@ 0x30
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe fbc1 	bl	800e77c <ld_word>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d140      	bne.n	8010082 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010002:	3301      	adds	r3, #1
 8010004:	4619      	mov	r1, r3
 8010006:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010008:	f7fe fe9a 	bl	800ed40 <move_window>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d137      	bne.n	8010082 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010014:	2200      	movs	r2, #0
 8010016:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801001a:	3334      	adds	r3, #52	@ 0x34
 801001c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fbab 	bl	800e77c <ld_word>
 8010026:	4603      	mov	r3, r0
 8010028:	461a      	mov	r2, r3
 801002a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801002e:	429a      	cmp	r2, r3
 8010030:	d127      	bne.n	8010082 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010034:	3334      	adds	r3, #52	@ 0x34
 8010036:	4618      	mov	r0, r3
 8010038:	f7fe fbb9 	bl	800e7ae <ld_dword>
 801003c:	4603      	mov	r3, r0
 801003e:	4a1c      	ldr	r2, [pc, #112]	@ (80100b0 <find_volume+0x49c>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d11e      	bne.n	8010082 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010046:	3334      	adds	r3, #52	@ 0x34
 8010048:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fbae 	bl	800e7ae <ld_dword>
 8010052:	4603      	mov	r3, r0
 8010054:	4a17      	ldr	r2, [pc, #92]	@ (80100b4 <find_volume+0x4a0>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d113      	bne.n	8010082 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801005a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801005c:	3334      	adds	r3, #52	@ 0x34
 801005e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fba3 	bl	800e7ae <ld_dword>
 8010068:	4602      	mov	r2, r0
 801006a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801006c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801006e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010070:	3334      	adds	r3, #52	@ 0x34
 8010072:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010076:	4618      	mov	r0, r3
 8010078:	f7fe fb99 	bl	800e7ae <ld_dword>
 801007c:	4602      	mov	r2, r0
 801007e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010080:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010084:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010088:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801008a:	4b0b      	ldr	r3, [pc, #44]	@ (80100b8 <find_volume+0x4a4>)
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	3301      	adds	r3, #1
 8010090:	b29a      	uxth	r2, r3
 8010092:	4b09      	ldr	r3, [pc, #36]	@ (80100b8 <find_volume+0x4a4>)
 8010094:	801a      	strh	r2, [r3, #0]
 8010096:	4b08      	ldr	r3, [pc, #32]	@ (80100b8 <find_volume+0x4a4>)
 8010098:	881a      	ldrh	r2, [r3, #0]
 801009a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801009e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80100a0:	f7fe fde6 	bl	800ec70 <clear_lock>
#endif
	return FR_OK;
 80100a4:	2300      	movs	r3, #0
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3758      	adds	r7, #88	@ 0x58
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	41615252 	.word	0x41615252
 80100b4:	61417272 	.word	0x61417272
 80100b8:	20001b20 	.word	0x20001b20

080100bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80100c6:	2309      	movs	r3, #9
 80100c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d02e      	beq.n	801012e <validate+0x72>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d02a      	beq.n	801012e <validate+0x72>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d025      	beq.n	801012e <validate+0x72>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	889a      	ldrh	r2, [r3, #4]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	88db      	ldrh	r3, [r3, #6]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d11e      	bne.n	801012e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fc42 	bl	800e97e <lock_fs>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d014      	beq.n	801012a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	785b      	ldrb	r3, [r3, #1]
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fa9a 	bl	800e640 <disk_status>
 801010c:	4603      	mov	r3, r0
 801010e:	f003 0301 	and.w	r3, r3, #1
 8010112:	2b00      	cmp	r3, #0
 8010114:	d102      	bne.n	801011c <validate+0x60>
				res = FR_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	73fb      	strb	r3, [r7, #15]
 801011a:	e008      	b.n	801012e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2100      	movs	r1, #0
 8010122:	4618      	mov	r0, r3
 8010124:	f7fe fc41 	bl	800e9aa <unlock_fs>
 8010128:	e001      	b.n	801012e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801012a:	230f      	movs	r3, #15
 801012c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801012e:	7bfb      	ldrb	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d102      	bne.n	801013a <validate+0x7e>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	e000      	b.n	801013c <validate+0x80>
 801013a:	2300      	movs	r3, #0
 801013c:	683a      	ldr	r2, [r7, #0]
 801013e:	6013      	str	r3, [r2, #0]
	return res;
 8010140:	7bfb      	ldrb	r3, [r7, #15]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
	...

0801014c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b088      	sub	sp, #32
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	4613      	mov	r3, r2
 8010158:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801015e:	f107 0310 	add.w	r3, r7, #16
 8010162:	4618      	mov	r0, r3
 8010164:	f7ff fcbb 	bl	800fade <get_ldnumber>
 8010168:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	2b00      	cmp	r3, #0
 801016e:	da01      	bge.n	8010174 <f_mount+0x28>
 8010170:	230b      	movs	r3, #11
 8010172:	e048      	b.n	8010206 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010174:	4a26      	ldr	r2, [pc, #152]	@ (8010210 <f_mount+0xc4>)
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801017c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00f      	beq.n	80101a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010184:	69b8      	ldr	r0, [r7, #24]
 8010186:	f7fe fd73 	bl	800ec70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	4618      	mov	r0, r3
 8010190:	f001 f837 	bl	8011202 <ff_del_syncobj>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d101      	bne.n	801019e <f_mount+0x52>
 801019a:	2302      	movs	r3, #2
 801019c:	e033      	b.n	8010206 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	2200      	movs	r2, #0
 80101a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00f      	beq.n	80101ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	330c      	adds	r3, #12
 80101b8:	4619      	mov	r1, r3
 80101ba:	4610      	mov	r0, r2
 80101bc:	f001 f803 	bl	80111c6 <ff_cre_syncobj>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d101      	bne.n	80101ca <f_mount+0x7e>
 80101c6:	2302      	movs	r3, #2
 80101c8:	e01d      	b.n	8010206 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	4910      	ldr	r1, [pc, #64]	@ (8010210 <f_mount+0xc4>)
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d002      	beq.n	80101e0 <f_mount+0x94>
 80101da:	79fb      	ldrb	r3, [r7, #7]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d001      	beq.n	80101e4 <f_mount+0x98>
 80101e0:	2300      	movs	r3, #0
 80101e2:	e010      	b.n	8010206 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80101e4:	f107 010c 	add.w	r1, r7, #12
 80101e8:	f107 0308 	add.w	r3, r7, #8
 80101ec:	2200      	movs	r2, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff fd10 	bl	800fc14 <find_volume>
 80101f4:	4603      	mov	r3, r0
 80101f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	7dfa      	ldrb	r2, [r7, #23]
 80101fc:	4611      	mov	r1, r2
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fbd3 	bl	800e9aa <unlock_fs>
 8010204:	7dfb      	ldrb	r3, [r7, #23]
}
 8010206:	4618      	mov	r0, r3
 8010208:	3720      	adds	r7, #32
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	20001b1c 	.word	0x20001b1c

08010214 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b098      	sub	sp, #96	@ 0x60
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	4613      	mov	r3, r2
 8010220:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <f_open+0x18>
 8010228:	2309      	movs	r3, #9
 801022a:	e1b0      	b.n	801058e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801022c:	79fb      	ldrb	r3, [r7, #7]
 801022e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010232:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010234:	79fa      	ldrb	r2, [r7, #7]
 8010236:	f107 0110 	add.w	r1, r7, #16
 801023a:	f107 0308 	add.w	r3, r7, #8
 801023e:	4618      	mov	r0, r3
 8010240:	f7ff fce8 	bl	800fc14 <find_volume>
 8010244:	4603      	mov	r3, r0
 8010246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801024a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801024e:	2b00      	cmp	r3, #0
 8010250:	f040 818d 	bne.w	801056e <f_open+0x35a>
		dj.obj.fs = fs;
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010258:	68ba      	ldr	r2, [r7, #8]
 801025a:	f107 0314 	add.w	r3, r7, #20
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fbcb 	bl	800f9fc <follow_path>
 8010266:	4603      	mov	r3, r0
 8010268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801026c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010270:	2b00      	cmp	r3, #0
 8010272:	d118      	bne.n	80102a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010274:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010278:	b25b      	sxtb	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	da03      	bge.n	8010286 <f_open+0x72>
				res = FR_INVALID_NAME;
 801027e:	2306      	movs	r3, #6
 8010280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010284:	e00f      	b.n	80102a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010286:	79fb      	ldrb	r3, [r7, #7]
 8010288:	2b01      	cmp	r3, #1
 801028a:	bf8c      	ite	hi
 801028c:	2301      	movhi	r3, #1
 801028e:	2300      	movls	r3, #0
 8010290:	b2db      	uxtb	r3, r3
 8010292:	461a      	mov	r2, r3
 8010294:	f107 0314 	add.w	r3, r7, #20
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fba0 	bl	800e9e0 <chk_lock>
 80102a0:	4603      	mov	r3, r0
 80102a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	f003 031c 	and.w	r3, r3, #28
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d07f      	beq.n	80103b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80102b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d017      	beq.n	80102e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80102b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d10e      	bne.n	80102de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80102c0:	f7fe fbea 	bl	800ea98 <enq_lock>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d006      	beq.n	80102d8 <f_open+0xc4>
 80102ca:	f107 0314 	add.w	r3, r7, #20
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff face 	bl	800f870 <dir_register>
 80102d4:	4603      	mov	r3, r0
 80102d6:	e000      	b.n	80102da <f_open+0xc6>
 80102d8:	2312      	movs	r3, #18
 80102da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	f043 0308 	orr.w	r3, r3, #8
 80102e4:	71fb      	strb	r3, [r7, #7]
 80102e6:	e010      	b.n	801030a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80102e8:	7ebb      	ldrb	r3, [r7, #26]
 80102ea:	f003 0311 	and.w	r3, r3, #17
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <f_open+0xe6>
					res = FR_DENIED;
 80102f2:	2307      	movs	r3, #7
 80102f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80102f8:	e007      	b.n	801030a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80102fa:	79fb      	ldrb	r3, [r7, #7]
 80102fc:	f003 0304 	and.w	r3, r3, #4
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <f_open+0xf6>
 8010304:	2308      	movs	r3, #8
 8010306:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801030a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801030e:	2b00      	cmp	r3, #0
 8010310:	d168      	bne.n	80103e4 <f_open+0x1d0>
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	f003 0308 	and.w	r3, r3, #8
 8010318:	2b00      	cmp	r3, #0
 801031a:	d063      	beq.n	80103e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 801031c:	f7fe f932 	bl	800e584 <get_fattime>
 8010320:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010324:	330e      	adds	r3, #14
 8010326:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe fa7e 	bl	800e82a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801032e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010330:	3316      	adds	r3, #22
 8010332:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe fa78 	bl	800e82a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801033a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801033c:	330b      	adds	r3, #11
 801033e:	2220      	movs	r2, #32
 8010340:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010346:	4611      	mov	r1, r2
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff f9fd 	bl	800f748 <ld_clust>
 801034e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010354:	2200      	movs	r2, #0
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff fa15 	bl	800f786 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801035c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801035e:	331c      	adds	r3, #28
 8010360:	2100      	movs	r1, #0
 8010362:	4618      	mov	r0, r3
 8010364:	f7fe fa61 	bl	800e82a <st_dword>
					fs->wflag = 1;
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	2201      	movs	r2, #1
 801036c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801036e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010370:	2b00      	cmp	r3, #0
 8010372:	d037      	beq.n	80103e4 <f_open+0x1d0>
						dw = fs->winsect;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010378:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801037a:	f107 0314 	add.w	r3, r7, #20
 801037e:	2200      	movs	r2, #0
 8010380:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010382:	4618      	mov	r0, r3
 8010384:	f7fe ff28 	bl	800f1d8 <remove_chain>
 8010388:	4603      	mov	r3, r0
 801038a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801038e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010392:	2b00      	cmp	r3, #0
 8010394:	d126      	bne.n	80103e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801039a:	4618      	mov	r0, r3
 801039c:	f7fe fcd0 	bl	800ed40 <move_window>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80103aa:	3a01      	subs	r2, #1
 80103ac:	611a      	str	r2, [r3, #16]
 80103ae:	e019      	b.n	80103e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80103b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d115      	bne.n	80103e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80103b8:	7ebb      	ldrb	r3, [r7, #26]
 80103ba:	f003 0310 	and.w	r3, r3, #16
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80103c2:	2304      	movs	r3, #4
 80103c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80103c8:	e00c      	b.n	80103e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80103ca:	79fb      	ldrb	r3, [r7, #7]
 80103cc:	f003 0302 	and.w	r3, r3, #2
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d007      	beq.n	80103e4 <f_open+0x1d0>
 80103d4:	7ebb      	ldrb	r3, [r7, #26]
 80103d6:	f003 0301 	and.w	r3, r3, #1
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d002      	beq.n	80103e4 <f_open+0x1d0>
						res = FR_DENIED;
 80103de:	2307      	movs	r3, #7
 80103e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80103e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d126      	bne.n	801043a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80103ec:	79fb      	ldrb	r3, [r7, #7]
 80103ee:	f003 0308 	and.w	r3, r3, #8
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d003      	beq.n	80103fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	2b01      	cmp	r3, #1
 8010410:	bf8c      	ite	hi
 8010412:	2301      	movhi	r3, #1
 8010414:	2300      	movls	r3, #0
 8010416:	b2db      	uxtb	r3, r3
 8010418:	461a      	mov	r2, r3
 801041a:	f107 0314 	add.w	r3, r7, #20
 801041e:	4611      	mov	r1, r2
 8010420:	4618      	mov	r0, r3
 8010422:	f7fe fb5b 	bl	800eadc <inc_lock>
 8010426:	4602      	mov	r2, r0
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d102      	bne.n	801043a <f_open+0x226>
 8010434:	2302      	movs	r3, #2
 8010436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801043a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801043e:	2b00      	cmp	r3, #0
 8010440:	f040 8095 	bne.w	801056e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f7ff f97c 	bl	800f748 <ld_clust>
 8010450:	4602      	mov	r2, r0
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010458:	331c      	adds	r3, #28
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe f9a7 	bl	800e7ae <ld_dword>
 8010460:	4602      	mov	r2, r0
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801046c:	693a      	ldr	r2, [r7, #16]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	88da      	ldrh	r2, [r3, #6]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	79fa      	ldrb	r2, [r7, #7]
 801047e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2200      	movs	r2, #0
 801048a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3330      	adds	r3, #48	@ 0x30
 8010496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801049a:	2100      	movs	r1, #0
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe fa11 	bl	800e8c4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80104a2:	79fb      	ldrb	r3, [r7, #7]
 80104a4:	f003 0320 	and.w	r3, r3, #32
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d060      	beq.n	801056e <f_open+0x35a>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d05c      	beq.n	801056e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	68da      	ldr	r2, [r3, #12]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	895b      	ldrh	r3, [r3, #10]
 80104c0:	025b      	lsls	r3, r3, #9
 80104c2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80104d0:	e016      	b.n	8010500 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe fced 	bl	800eeb6 <get_fat>
 80104dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80104de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d802      	bhi.n	80104ea <f_open+0x2d6>
 80104e4:	2302      	movs	r3, #2
 80104e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80104ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f0:	d102      	bne.n	80104f8 <f_open+0x2e4>
 80104f2:	2301      	movs	r3, #1
 80104f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80104f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104fc:	1ad3      	subs	r3, r2, r3
 80104fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8010500:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010504:	2b00      	cmp	r3, #0
 8010506:	d103      	bne.n	8010510 <f_open+0x2fc>
 8010508:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801050a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801050c:	429a      	cmp	r2, r3
 801050e:	d8e0      	bhi.n	80104d2 <f_open+0x2be>
				}
				fp->clust = clst;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010514:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010516:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801051a:	2b00      	cmp	r3, #0
 801051c:	d127      	bne.n	801056e <f_open+0x35a>
 801051e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010524:	2b00      	cmp	r3, #0
 8010526:	d022      	beq.n	801056e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801052c:	4618      	mov	r0, r3
 801052e:	f7fe fca3 	bl	800ee78 <clust2sect>
 8010532:	6478      	str	r0, [r7, #68]	@ 0x44
 8010534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <f_open+0x32e>
						res = FR_INT_ERR;
 801053a:	2302      	movs	r3, #2
 801053c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010540:	e015      	b.n	801056e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010544:	0a5a      	lsrs	r2, r3, #9
 8010546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010548:	441a      	add	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	7858      	ldrb	r0, [r3, #1]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6a1a      	ldr	r2, [r3, #32]
 801055c:	2301      	movs	r3, #1
 801055e:	f7fe f8af 	bl	800e6c0 <disk_read>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <f_open+0x35a>
 8010568:	2301      	movs	r3, #1
 801056a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801056e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010572:	2b00      	cmp	r3, #0
 8010574:	d002      	beq.n	801057c <f_open+0x368>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2200      	movs	r2, #0
 801057a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8010582:	4611      	mov	r1, r2
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe fa10 	bl	800e9aa <unlock_fs>
 801058a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801058e:	4618      	mov	r0, r3
 8010590:	3760      	adds	r7, #96	@ 0x60
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b08c      	sub	sp, #48	@ 0x30
 801059a:	af00      	add	r7, sp, #0
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	607a      	str	r2, [r7, #4]
 80105a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f107 0210 	add.w	r2, r7, #16
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff fd80 	bl	80100bc <validate>
 80105bc:	4603      	mov	r3, r0
 80105be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80105c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d107      	bne.n	80105da <f_write+0x44>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	7d5b      	ldrb	r3, [r3, #21]
 80105ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80105d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d009      	beq.n	80105ee <f_write+0x58>
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80105e0:	4611      	mov	r1, r2
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe f9e1 	bl	800e9aa <unlock_fs>
 80105e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105ec:	e173      	b.n	80108d6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	7d1b      	ldrb	r3, [r3, #20]
 80105f2:	f003 0302 	and.w	r3, r3, #2
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d106      	bne.n	8010608 <f_write+0x72>
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	2107      	movs	r1, #7
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe f9d3 	bl	800e9aa <unlock_fs>
 8010604:	2307      	movs	r3, #7
 8010606:	e166      	b.n	80108d6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	699a      	ldr	r2, [r3, #24]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	441a      	add	r2, r3
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	699b      	ldr	r3, [r3, #24]
 8010614:	429a      	cmp	r2, r3
 8010616:	f080 814b 	bcs.w	80108b0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	43db      	mvns	r3, r3
 8010620:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010622:	e145      	b.n	80108b0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	699b      	ldr	r3, [r3, #24]
 8010628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801062c:	2b00      	cmp	r3, #0
 801062e:	f040 8101 	bne.w	8010834 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	0a5b      	lsrs	r3, r3, #9
 8010638:	693a      	ldr	r2, [r7, #16]
 801063a:	8952      	ldrh	r2, [r2, #10]
 801063c:	3a01      	subs	r2, #1
 801063e:	4013      	ands	r3, r2
 8010640:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d14d      	bne.n	80106e4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10c      	bne.n	801066a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010658:	2b00      	cmp	r3, #0
 801065a:	d11a      	bne.n	8010692 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2100      	movs	r1, #0
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe fe1e 	bl	800f2a2 <create_chain>
 8010666:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010668:	e013      	b.n	8010692 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801066e:	2b00      	cmp	r3, #0
 8010670:	d007      	beq.n	8010682 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	4619      	mov	r1, r3
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f7fe feaa 	bl	800f3d2 <clmt_clust>
 801067e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010680:	e007      	b.n	8010692 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	69db      	ldr	r3, [r3, #28]
 8010688:	4619      	mov	r1, r3
 801068a:	4610      	mov	r0, r2
 801068c:	f7fe fe09 	bl	800f2a2 <create_chain>
 8010690:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010694:	2b00      	cmp	r3, #0
 8010696:	f000 8110 	beq.w	80108ba <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069c:	2b01      	cmp	r3, #1
 801069e:	d109      	bne.n	80106b4 <f_write+0x11e>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2202      	movs	r2, #2
 80106a4:	755a      	strb	r2, [r3, #21]
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2102      	movs	r1, #2
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fe f97d 	bl	800e9aa <unlock_fs>
 80106b0:	2302      	movs	r3, #2
 80106b2:	e110      	b.n	80108d6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ba:	d109      	bne.n	80106d0 <f_write+0x13a>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2201      	movs	r2, #1
 80106c0:	755a      	strb	r2, [r3, #21]
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	2101      	movs	r1, #1
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fe f96f 	bl	800e9aa <unlock_fs>
 80106cc:	2301      	movs	r3, #1
 80106ce:	e102      	b.n	80108d6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	689b      	ldr	r3, [r3, #8]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d102      	bne.n	80106e4 <f_write+0x14e>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	b25b      	sxtb	r3, r3
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	da1d      	bge.n	801072a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	7858      	ldrb	r0, [r3, #1]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6a1a      	ldr	r2, [r3, #32]
 80106fc:	2301      	movs	r3, #1
 80106fe:	f7fd ffff 	bl	800e700 <disk_write>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d009      	beq.n	801071c <f_write+0x186>
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2201      	movs	r2, #1
 801070c:	755a      	strb	r2, [r3, #21]
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	2101      	movs	r1, #1
 8010712:	4618      	mov	r0, r3
 8010714:	f7fe f949 	bl	800e9aa <unlock_fs>
 8010718:	2301      	movs	r3, #1
 801071a:	e0dc      	b.n	80108d6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	7d1b      	ldrb	r3, [r3, #20]
 8010720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010724:	b2da      	uxtb	r2, r3
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801072a:	693a      	ldr	r2, [r7, #16]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	69db      	ldr	r3, [r3, #28]
 8010730:	4619      	mov	r1, r3
 8010732:	4610      	mov	r0, r2
 8010734:	f7fe fba0 	bl	800ee78 <clust2sect>
 8010738:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d109      	bne.n	8010754 <f_write+0x1be>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2202      	movs	r2, #2
 8010744:	755a      	strb	r2, [r3, #21]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2102      	movs	r1, #2
 801074a:	4618      	mov	r0, r3
 801074c:	f7fe f92d 	bl	800e9aa <unlock_fs>
 8010750:	2302      	movs	r3, #2
 8010752:	e0c0      	b.n	80108d6 <f_write+0x340>
			sect += csect;
 8010754:	697a      	ldr	r2, [r7, #20]
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	4413      	add	r3, r2
 801075a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	0a5b      	lsrs	r3, r3, #9
 8010760:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d041      	beq.n	80107ec <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010768:	69ba      	ldr	r2, [r7, #24]
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	4413      	add	r3, r2
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	8952      	ldrh	r2, [r2, #10]
 8010772:	4293      	cmp	r3, r2
 8010774:	d905      	bls.n	8010782 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	895b      	ldrh	r3, [r3, #10]
 801077a:	461a      	mov	r2, r3
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	7858      	ldrb	r0, [r3, #1]
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	69f9      	ldr	r1, [r7, #28]
 801078c:	f7fd ffb8 	bl	800e700 <disk_write>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d009      	beq.n	80107aa <f_write+0x214>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2201      	movs	r2, #1
 801079a:	755a      	strb	r2, [r3, #21]
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	2101      	movs	r1, #1
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe f902 	bl	800e9aa <unlock_fs>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e095      	b.n	80108d6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6a1a      	ldr	r2, [r3, #32]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	6a3a      	ldr	r2, [r7, #32]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d915      	bls.n	80107e4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6a1a      	ldr	r2, [r3, #32]
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	025b      	lsls	r3, r3, #9
 80107c8:	69fa      	ldr	r2, [r7, #28]
 80107ca:	4413      	add	r3, r2
 80107cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107d0:	4619      	mov	r1, r3
 80107d2:	f7fe f856 	bl	800e882 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	7d1b      	ldrb	r3, [r3, #20]
 80107da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	025b      	lsls	r3, r3, #9
 80107e8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80107ea:	e044      	b.n	8010876 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6a1b      	ldr	r3, [r3, #32]
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d01b      	beq.n	801082e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	699a      	ldr	r2, [r3, #24]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80107fe:	429a      	cmp	r2, r3
 8010800:	d215      	bcs.n	801082e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	7858      	ldrb	r0, [r3, #1]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801080c:	2301      	movs	r3, #1
 801080e:	697a      	ldr	r2, [r7, #20]
 8010810:	f7fd ff56 	bl	800e6c0 <disk_read>
 8010814:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010816:	2b00      	cmp	r3, #0
 8010818:	d009      	beq.n	801082e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2201      	movs	r2, #1
 801081e:	755a      	strb	r2, [r3, #21]
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	2101      	movs	r1, #1
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe f8c0 	bl	800e9aa <unlock_fs>
 801082a:	2301      	movs	r3, #1
 801082c:	e053      	b.n	80108d6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	697a      	ldr	r2, [r7, #20]
 8010832:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	699b      	ldr	r3, [r3, #24]
 8010838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801083c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010840:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	429a      	cmp	r2, r3
 8010848:	d901      	bls.n	801084e <f_write+0x2b8>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	699b      	ldr	r3, [r3, #24]
 8010858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801085c:	4413      	add	r3, r2
 801085e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010860:	69f9      	ldr	r1, [r7, #28]
 8010862:	4618      	mov	r0, r3
 8010864:	f7fe f80d 	bl	800e882 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
 801086c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010870:	b2da      	uxtb	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010876:	69fa      	ldr	r2, [r7, #28]
 8010878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801087a:	4413      	add	r3, r2
 801087c:	61fb      	str	r3, [r7, #28]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	699a      	ldr	r2, [r3, #24]
 8010882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010884:	441a      	add	r2, r3
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	619a      	str	r2, [r3, #24]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	68da      	ldr	r2, [r3, #12]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	699b      	ldr	r3, [r3, #24]
 8010892:	429a      	cmp	r2, r3
 8010894:	bf38      	it	cc
 8010896:	461a      	movcc	r2, r3
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	60da      	str	r2, [r3, #12]
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108a2:	441a      	add	r2, r3
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	601a      	str	r2, [r3, #0]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f47f aeb6 	bne.w	8010624 <f_write+0x8e>
 80108b8:	e000      	b.n	80108bc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80108ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	7d1b      	ldrb	r3, [r3, #20]
 80108c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108c4:	b2da      	uxtb	r2, r3
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	2100      	movs	r1, #0
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fe f86b 	bl	800e9aa <unlock_fs>
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3730      	adds	r7, #48	@ 0x30
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b086      	sub	sp, #24
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f107 0208 	add.w	r2, r7, #8
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff fbe4 	bl	80100bc <validate>
 80108f4:	4603      	mov	r3, r0
 80108f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108f8:	7dfb      	ldrb	r3, [r7, #23]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d16d      	bne.n	80109da <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	7d1b      	ldrb	r3, [r3, #20]
 8010902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d067      	beq.n	80109da <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	7d1b      	ldrb	r3, [r3, #20]
 801090e:	b25b      	sxtb	r3, r3
 8010910:	2b00      	cmp	r3, #0
 8010912:	da1a      	bge.n	801094a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	7858      	ldrb	r0, [r3, #1]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a1a      	ldr	r2, [r3, #32]
 8010922:	2301      	movs	r3, #1
 8010924:	f7fd feec 	bl	800e700 <disk_write>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d006      	beq.n	801093c <f_sync+0x5e>
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2101      	movs	r1, #1
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe f839 	bl	800e9aa <unlock_fs>
 8010938:	2301      	movs	r3, #1
 801093a:	e055      	b.n	80109e8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	7d1b      	ldrb	r3, [r3, #20]
 8010940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010944:	b2da      	uxtb	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801094a:	f7fd fe1b 	bl	800e584 <get_fattime>
 801094e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010956:	4619      	mov	r1, r3
 8010958:	4610      	mov	r0, r2
 801095a:	f7fe f9f1 	bl	800ed40 <move_window>
 801095e:	4603      	mov	r3, r0
 8010960:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010962:	7dfb      	ldrb	r3, [r7, #23]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d138      	bne.n	80109da <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801096c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	330b      	adds	r3, #11
 8010972:	781a      	ldrb	r2, [r3, #0]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	330b      	adds	r3, #11
 8010978:	f042 0220 	orr.w	r2, r2, #32
 801097c:	b2d2      	uxtb	r2, r2
 801097e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6818      	ldr	r0, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	461a      	mov	r2, r3
 801098a:	68f9      	ldr	r1, [r7, #12]
 801098c:	f7fe fefb 	bl	800f786 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f103 021c 	add.w	r2, r3, #28
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	4619      	mov	r1, r3
 801099c:	4610      	mov	r0, r2
 801099e:	f7fd ff44 	bl	800e82a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	3316      	adds	r3, #22
 80109a6:	6939      	ldr	r1, [r7, #16]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fd ff3e 	bl	800e82a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3312      	adds	r3, #18
 80109b2:	2100      	movs	r1, #0
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fd ff1d 	bl	800e7f4 <st_word>
					fs->wflag = 1;
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	2201      	movs	r2, #1
 80109be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe f9ea 	bl	800ed9c <sync_fs>
 80109c8:	4603      	mov	r3, r0
 80109ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	7d1b      	ldrb	r3, [r3, #20]
 80109d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	7dfa      	ldrb	r2, [r7, #23]
 80109de:	4611      	mov	r1, r2
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fd ffe2 	bl	800e9aa <unlock_fs>
 80109e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ff70 	bl	80108de <f_sync>
 80109fe:	4603      	mov	r3, r0
 8010a00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d11d      	bne.n	8010a44 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f107 0208 	add.w	r2, r7, #8
 8010a0e:	4611      	mov	r1, r2
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff fb53 	bl	80100bc <validate>
 8010a16:	4603      	mov	r3, r0
 8010a18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a1a:	7bfb      	ldrb	r3, [r7, #15]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d111      	bne.n	8010a44 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe f8e7 	bl	800ebf8 <dec_lock>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010a2e:	7bfb      	ldrb	r3, [r7, #15]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2100      	movs	r1, #0
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fd ffb3 	bl	800e9aa <unlock_fs>
#endif
		}
	}
	return res;
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b090      	sub	sp, #64	@ 0x40
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f107 0208 	add.w	r2, r7, #8
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ff fb2b 	bl	80100bc <validate>
 8010a66:	4603      	mov	r3, r0
 8010a68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010a6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d103      	bne.n	8010a7c <f_lseek+0x2e>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	7d5b      	ldrb	r3, [r3, #21]
 8010a78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010a7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <f_lseek+0x4a>
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010a8a:	4611      	mov	r1, r2
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fd ff8c 	bl	800e9aa <unlock_fs>
 8010a92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a96:	e229      	b.n	8010eec <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f000 80ea 	beq.w	8010c76 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa8:	d164      	bne.n	8010b74 <f_lseek+0x126>
			tbl = fp->cltbl;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aae:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab2:	1d1a      	adds	r2, r3, #4
 8010ab4:	627a      	str	r2, [r7, #36]	@ 0x24
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	617b      	str	r3, [r7, #20]
 8010aba:	2302      	movs	r3, #2
 8010abc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d044      	beq.n	8010b54 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010acc:	613b      	str	r3, [r7, #16]
 8010ace:	2300      	movs	r3, #0
 8010ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ada:	60fb      	str	r3, [r7, #12]
 8010adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ade:	3301      	adds	r3, #1
 8010ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe f9e5 	bl	800eeb6 <get_fat>
 8010aec:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d809      	bhi.n	8010b08 <f_lseek+0xba>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2202      	movs	r2, #2
 8010af8:	755a      	strb	r2, [r3, #21]
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2102      	movs	r1, #2
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fd ff53 	bl	800e9aa <unlock_fs>
 8010b04:	2302      	movs	r3, #2
 8010b06:	e1f1      	b.n	8010eec <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0e:	d109      	bne.n	8010b24 <f_lseek+0xd6>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	755a      	strb	r2, [r3, #21]
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2101      	movs	r1, #1
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fd ff45 	bl	800e9aa <unlock_fs>
 8010b20:	2301      	movs	r3, #1
 8010b22:	e1e3      	b.n	8010eec <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	3301      	adds	r3, #1
 8010b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d0d4      	beq.n	8010ad8 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d809      	bhi.n	8010b4a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b38:	1d1a      	adds	r2, r3, #4
 8010b3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b3e:	601a      	str	r2, [r3, #0]
 8010b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b42:	1d1a      	adds	r2, r3, #4
 8010b44:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b46:	693a      	ldr	r2, [r7, #16]
 8010b48:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	699b      	ldr	r3, [r3, #24]
 8010b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d3ba      	bcc.n	8010aca <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b5a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d803      	bhi.n	8010b6c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]
 8010b6a:	e1b6      	b.n	8010eda <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b6c:	2311      	movs	r3, #17
 8010b6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010b72:	e1b2      	b.n	8010eda <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d902      	bls.n	8010b84 <f_lseek+0x136>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	683a      	ldr	r2, [r7, #0]
 8010b88:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 81a4 	beq.w	8010eda <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	4619      	mov	r1, r3
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7fe fc1a 	bl	800f3d2 <clmt_clust>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	69db      	ldr	r3, [r3, #28]
 8010baa:	4619      	mov	r1, r3
 8010bac:	4610      	mov	r0, r2
 8010bae:	f7fe f963 	bl	800ee78 <clust2sect>
 8010bb2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d109      	bne.n	8010bce <f_lseek+0x180>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2202      	movs	r2, #2
 8010bbe:	755a      	strb	r2, [r3, #21]
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	2102      	movs	r1, #2
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fd fef0 	bl	800e9aa <unlock_fs>
 8010bca:	2302      	movs	r3, #2
 8010bcc:	e18e      	b.n	8010eec <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	0a5b      	lsrs	r3, r3, #9
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	8952      	ldrh	r2, [r2, #10]
 8010bd8:	3a01      	subs	r2, #1
 8010bda:	4013      	ands	r3, r2
 8010bdc:	69ba      	ldr	r2, [r7, #24]
 8010bde:	4413      	add	r3, r2
 8010be0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	f000 8175 	beq.w	8010eda <f_lseek+0x48c>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a1b      	ldr	r3, [r3, #32]
 8010bf4:	69ba      	ldr	r2, [r7, #24]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	f000 816f 	beq.w	8010eda <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	da1d      	bge.n	8010c42 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	7858      	ldrb	r0, [r3, #1]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a1a      	ldr	r2, [r3, #32]
 8010c14:	2301      	movs	r3, #1
 8010c16:	f7fd fd73 	bl	800e700 <disk_write>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d009      	beq.n	8010c34 <f_lseek+0x1e6>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2201      	movs	r2, #1
 8010c24:	755a      	strb	r2, [r3, #21]
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2101      	movs	r1, #1
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fd febd 	bl	800e9aa <unlock_fs>
 8010c30:	2301      	movs	r3, #1
 8010c32:	e15b      	b.n	8010eec <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	7d1b      	ldrb	r3, [r3, #20]
 8010c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	7858      	ldrb	r0, [r3, #1]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	69ba      	ldr	r2, [r7, #24]
 8010c50:	f7fd fd36 	bl	800e6c0 <disk_read>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d009      	beq.n	8010c6e <f_lseek+0x220>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	755a      	strb	r2, [r3, #21]
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	2101      	movs	r1, #1
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fd fea0 	bl	800e9aa <unlock_fs>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e13e      	b.n	8010eec <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	69ba      	ldr	r2, [r7, #24]
 8010c72:	621a      	str	r2, [r3, #32]
 8010c74:	e131      	b.n	8010eda <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d908      	bls.n	8010c92 <f_lseek+0x244>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	7d1b      	ldrb	r3, [r3, #20]
 8010c84:	f003 0302 	and.w	r3, r3, #2
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ca0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 80c0 	beq.w	8010e2a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	895b      	ldrh	r3, [r3, #10]
 8010cae:	025b      	lsls	r3, r3, #9
 8010cb0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d01b      	beq.n	8010cf0 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	1e5a      	subs	r2, r3, #1
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	1e59      	subs	r1, r3, #1
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d30f      	bcc.n	8010cf0 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	1e5a      	subs	r2, r3, #1
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	425b      	negs	r3, r3
 8010cd8:	401a      	ands	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	699b      	ldr	r3, [r3, #24]
 8010ce2:	683a      	ldr	r2, [r7, #0]
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	69db      	ldr	r3, [r3, #28]
 8010cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cee:	e02c      	b.n	8010d4a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d123      	bne.n	8010d44 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2100      	movs	r1, #0
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fe face 	bl	800f2a2 <create_chain>
 8010d06:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d109      	bne.n	8010d22 <f_lseek+0x2d4>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2202      	movs	r2, #2
 8010d12:	755a      	strb	r2, [r3, #21]
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2102      	movs	r1, #2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fd fe46 	bl	800e9aa <unlock_fs>
 8010d1e:	2302      	movs	r3, #2
 8010d20:	e0e4      	b.n	8010eec <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d28:	d109      	bne.n	8010d3e <f_lseek+0x2f0>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	755a      	strb	r2, [r3, #21]
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2101      	movs	r1, #1
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fd fe38 	bl	800e9aa <unlock_fs>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e0d6      	b.n	8010eec <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d42:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d48:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d06c      	beq.n	8010e2a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010d50:	e044      	b.n	8010ddc <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	1ad3      	subs	r3, r2, r3
 8010d58:	603b      	str	r3, [r7, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	699a      	ldr	r2, [r3, #24]
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	441a      	add	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7d1b      	ldrb	r3, [r3, #20]
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00b      	beq.n	8010d8a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fe fa93 	bl	800f2a2 <create_chain>
 8010d7c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d108      	bne.n	8010d96 <f_lseek+0x348>
							ofs = 0; break;
 8010d84:	2300      	movs	r3, #0
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	e02c      	b.n	8010de4 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fe f891 	bl	800eeb6 <get_fat>
 8010d94:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9c:	d109      	bne.n	8010db2 <f_lseek+0x364>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	755a      	strb	r2, [r3, #21]
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	2101      	movs	r1, #1
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fdfe 	bl	800e9aa <unlock_fs>
 8010dae:	2301      	movs	r3, #1
 8010db0:	e09c      	b.n	8010eec <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d904      	bls.n	8010dc2 <f_lseek+0x374>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d309      	bcc.n	8010dd6 <f_lseek+0x388>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2202      	movs	r2, #2
 8010dc6:	755a      	strb	r2, [r3, #21]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	2102      	movs	r1, #2
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fd fdec 	bl	800e9aa <unlock_fs>
 8010dd2:	2302      	movs	r3, #2
 8010dd4:	e08a      	b.n	8010eec <f_lseek+0x49e>
					fp->clust = clst;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dda:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d8b6      	bhi.n	8010d52 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	699a      	ldr	r2, [r3, #24]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	441a      	add	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d017      	beq.n	8010e2a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe f83a 	bl	800ee78 <clust2sect>
 8010e04:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <f_lseek+0x3d2>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2202      	movs	r2, #2
 8010e10:	755a      	strb	r2, [r3, #21]
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	2102      	movs	r1, #2
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fd fdc7 	bl	800e9aa <unlock_fs>
 8010e1c:	2302      	movs	r3, #2
 8010e1e:	e065      	b.n	8010eec <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	0a5b      	lsrs	r3, r3, #9
 8010e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e26:	4413      	add	r3, r2
 8010e28:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d90a      	bls.n	8010e4c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	699a      	ldr	r2, [r3, #24]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	7d1b      	ldrb	r3, [r3, #20]
 8010e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e46:	b2da      	uxtb	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	699b      	ldr	r3, [r3, #24]
 8010e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d040      	beq.n	8010eda <f_lseek+0x48c>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a1b      	ldr	r3, [r3, #32]
 8010e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d03b      	beq.n	8010eda <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	7d1b      	ldrb	r3, [r3, #20]
 8010e66:	b25b      	sxtb	r3, r3
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	da1d      	bge.n	8010ea8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	7858      	ldrb	r0, [r3, #1]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a1a      	ldr	r2, [r3, #32]
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	f7fd fc40 	bl	800e700 <disk_write>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d009      	beq.n	8010e9a <f_lseek+0x44c>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	755a      	strb	r2, [r3, #21]
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2101      	movs	r1, #1
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fd fd8a 	bl	800e9aa <unlock_fs>
 8010e96:	2301      	movs	r3, #1
 8010e98:	e028      	b.n	8010eec <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	7d1b      	ldrb	r3, [r3, #20]
 8010e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	7858      	ldrb	r0, [r3, #1]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010eb6:	f7fd fc03 	bl	800e6c0 <disk_read>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d009      	beq.n	8010ed4 <f_lseek+0x486>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	755a      	strb	r2, [r3, #21]
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	2101      	movs	r1, #1
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fd fd6d 	bl	800e9aa <unlock_fs>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e00b      	b.n	8010eec <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ed8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010ee0:	4611      	mov	r1, r2
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fd fd61 	bl	800e9aa <unlock_fs>
 8010ee8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3740      	adds	r7, #64	@ 0x40
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b096      	sub	sp, #88	@ 0x58
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010efc:	f107 0108 	add.w	r1, r7, #8
 8010f00:	1d3b      	adds	r3, r7, #4
 8010f02:	2202      	movs	r2, #2
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fe fe85 	bl	800fc14 <find_volume>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010f14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f040 80ec 	bne.w	80110f6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	f107 030c 	add.w	r3, r7, #12
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fe fd68 	bl	800f9fc <follow_path>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010f32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d102      	bne.n	8010f40 <f_mkdir+0x4c>
 8010f3a:	2308      	movs	r3, #8
 8010f3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010f40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f44:	2b04      	cmp	r3, #4
 8010f46:	f040 80d6 	bne.w	80110f6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010f4a:	f107 030c 	add.w	r3, r7, #12
 8010f4e:	2100      	movs	r1, #0
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fe f9a6 	bl	800f2a2 <create_chain>
 8010f56:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	895b      	ldrh	r3, [r3, #10]
 8010f5c:	025b      	lsls	r3, r3, #9
 8010f5e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010f60:	2300      	movs	r3, #0
 8010f62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d102      	bne.n	8010f72 <f_mkdir+0x7e>
 8010f6c:	2307      	movs	r3, #7
 8010f6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d102      	bne.n	8010f7e <f_mkdir+0x8a>
 8010f78:	2302      	movs	r3, #2
 8010f7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f84:	d102      	bne.n	8010f8c <f_mkdir+0x98>
 8010f86:	2301      	movs	r3, #1
 8010f88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d106      	bne.n	8010fa2 <f_mkdir+0xae>
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fd fe8e 	bl	800ecb8 <sync_window>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8010fa2:	f7fd faef 	bl	800e584 <get_fattime>
 8010fa6:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d16a      	bne.n	8011086 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7fd ff5f 	bl	800ee78 <clust2sect>
 8010fba:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	3334      	adds	r3, #52	@ 0x34
 8010fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8010fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010fca:	f7fd fc7b 	bl	800e8c4 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010fce:	220b      	movs	r2, #11
 8010fd0:	2120      	movs	r1, #32
 8010fd2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010fd4:	f7fd fc76 	bl	800e8c4 <mem_set>
					dir[DIR_Name] = '.';
 8010fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fda:	222e      	movs	r2, #46	@ 0x2e
 8010fdc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe0:	330b      	adds	r3, #11
 8010fe2:	2210      	movs	r2, #16
 8010fe4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe8:	3316      	adds	r3, #22
 8010fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fd fc1c 	bl	800e82a <st_dword>
					st_clust(fs, dir, dcl);
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe fbc4 	bl	800f786 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011000:	3320      	adds	r3, #32
 8011002:	2220      	movs	r2, #32
 8011004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011006:	4618      	mov	r0, r3
 8011008:	f7fd fc3b 	bl	800e882 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801100c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801100e:	3321      	adds	r3, #33	@ 0x21
 8011010:	222e      	movs	r2, #46	@ 0x2e
 8011012:	701a      	strb	r2, [r3, #0]
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b03      	cmp	r3, #3
 801101e:	d106      	bne.n	801102e <f_mkdir+0x13a>
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011026:	429a      	cmp	r2, r3
 8011028:	d101      	bne.n	801102e <f_mkdir+0x13a>
 801102a:	2300      	movs	r3, #0
 801102c:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801102e:	68b8      	ldr	r0, [r7, #8]
 8011030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011032:	3320      	adds	r3, #32
 8011034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011036:	4619      	mov	r1, r3
 8011038:	f7fe fba5 	bl	800f786 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	895b      	ldrh	r3, [r3, #10]
 8011040:	653b      	str	r3, [r7, #80]	@ 0x50
 8011042:	e01b      	b.n	801107c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8011044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011046:	1c5a      	adds	r2, r3, #1
 8011048:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	2201      	movs	r2, #1
 8011052:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	4618      	mov	r0, r3
 8011058:	f7fd fe2e 	bl	800ecb8 <sync_window>
 801105c:	4603      	mov	r3, r0
 801105e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8011062:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011066:	2b00      	cmp	r3, #0
 8011068:	d10c      	bne.n	8011084 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801106a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801106e:	2100      	movs	r1, #0
 8011070:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011072:	f7fd fc27 	bl	800e8c4 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011078:	3b01      	subs	r3, #1
 801107a:	653b      	str	r3, [r7, #80]	@ 0x50
 801107c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1e0      	bne.n	8011044 <f_mkdir+0x150>
 8011082:	e000      	b.n	8011086 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8011084:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011086:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801108a:	2b00      	cmp	r3, #0
 801108c:	d107      	bne.n	801109e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801108e:	f107 030c 	add.w	r3, r7, #12
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe fbec 	bl	800f870 <dir_register>
 8011098:	4603      	mov	r3, r0
 801109a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801109e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d120      	bne.n	80110e8 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80110a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80110aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ac:	3316      	adds	r3, #22
 80110ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fd fbba 	bl	800e82a <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80110ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe fb62 	bl	800f786 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80110c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c4:	330b      	adds	r3, #11
 80110c6:	2210      	movs	r2, #16
 80110c8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2201      	movs	r2, #1
 80110ce:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80110d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10e      	bne.n	80110f6 <f_mkdir+0x202>
					res = sync_fs(fs);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fd fe5e 	bl	800ed9c <sync_fs>
 80110e0:	4603      	mov	r3, r0
 80110e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80110e6:	e006      	b.n	80110f6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80110e8:	f107 030c 	add.w	r3, r7, #12
 80110ec:	2200      	movs	r2, #0
 80110ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fe f871 	bl	800f1d8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80110fc:	4611      	mov	r1, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fd fc53 	bl	800e9aa <unlock_fs>
 8011104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8011108:	4618      	mov	r0, r3
 801110a:	3758      	adds	r7, #88	@ 0x58
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011110:	b480      	push	{r7}
 8011112:	b087      	sub	sp, #28
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	4613      	mov	r3, r2
 801111c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801111e:	2301      	movs	r3, #1
 8011120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011126:	4b1f      	ldr	r3, [pc, #124]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011128:	7a5b      	ldrb	r3, [r3, #9]
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d131      	bne.n	8011194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011130:	4b1c      	ldr	r3, [pc, #112]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011132:	7a5b      	ldrb	r3, [r3, #9]
 8011134:	b2db      	uxtb	r3, r3
 8011136:	461a      	mov	r2, r3
 8011138:	4b1a      	ldr	r3, [pc, #104]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 801113a:	2100      	movs	r1, #0
 801113c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801113e:	4b19      	ldr	r3, [pc, #100]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011140:	7a5b      	ldrb	r3, [r3, #9]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	4a17      	ldr	r2, [pc, #92]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801114e:	4b15      	ldr	r3, [pc, #84]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011150:	7a5b      	ldrb	r3, [r3, #9]
 8011152:	b2db      	uxtb	r3, r3
 8011154:	461a      	mov	r2, r3
 8011156:	4b13      	ldr	r3, [pc, #76]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011158:	4413      	add	r3, r2
 801115a:	79fa      	ldrb	r2, [r7, #7]
 801115c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801115e:	4b11      	ldr	r3, [pc, #68]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 8011160:	7a5b      	ldrb	r3, [r3, #9]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	b2d1      	uxtb	r1, r2
 8011168:	4a0e      	ldr	r2, [pc, #56]	@ (80111a4 <FATFS_LinkDriverEx+0x94>)
 801116a:	7251      	strb	r1, [r2, #9]
 801116c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801116e:	7dbb      	ldrb	r3, [r7, #22]
 8011170:	3330      	adds	r3, #48	@ 0x30
 8011172:	b2da      	uxtb	r2, r3
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	3301      	adds	r3, #1
 801117c:	223a      	movs	r2, #58	@ 0x3a
 801117e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	3302      	adds	r3, #2
 8011184:	222f      	movs	r2, #47	@ 0x2f
 8011186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	3303      	adds	r3, #3
 801118c:	2200      	movs	r2, #0
 801118e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011190:	2300      	movs	r3, #0
 8011192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011194:	7dfb      	ldrb	r3, [r7, #23]
}
 8011196:	4618      	mov	r0, r3
 8011198:	371c      	adds	r7, #28
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20001b44 	.word	0x20001b44

080111a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111b2:	2200      	movs	r2, #0
 80111b4:	6839      	ldr	r1, [r7, #0]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7ff ffaa 	bl	8011110 <FATFS_LinkDriverEx>
 80111bc:	4603      	mov	r3, r0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b084      	sub	sp, #16
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	4603      	mov	r3, r0
 80111ce:	6039      	str	r1, [r7, #0]
 80111d0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80111d2:	2300      	movs	r3, #0
 80111d4:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80111d6:	f107 0308 	add.w	r3, r7, #8
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 f925 	bl	801142c <osSemaphoreCreate>
 80111e2:	4602      	mov	r2, r0
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	bf14      	ite	ne
 80111f0:	2301      	movne	r3, #1
 80111f2:	2300      	moveq	r3, #0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	60fb      	str	r3, [r7, #12]

    return ret;
 80111f8:	68fb      	ldr	r3, [r7, #12]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f9b0 	bl	8011570 <osSemaphoreDelete>
#endif
    return 1;
 8011210:	2301      	movs	r3, #1
}
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011222:	2300      	movs	r3, #0
 8011224:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011226:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 f91c 	bl	8011468 <osSemaphoreWait>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011236:	2301      	movs	r3, #1
 8011238:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801123a:	68fb      	ldr	r3, [r7, #12]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3710      	adds	r7, #16
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 f959 	bl	8011504 <osSemaphoreRelease>
#endif
}
 8011252:	bf00      	nop
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801125a:	b480      	push	{r7}
 801125c:	b085      	sub	sp, #20
 801125e:	af00      	add	r7, sp, #0
 8011260:	4603      	mov	r3, r0
 8011262:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011264:	2300      	movs	r3, #0
 8011266:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801126c:	2b84      	cmp	r3, #132	@ 0x84
 801126e:	d005      	beq.n	801127c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011270:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	3303      	adds	r3, #3
 801127a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801127c:	68fb      	ldr	r3, [r7, #12]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3714      	adds	r7, #20
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr

0801128a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801128a:	b480      	push	{r7}
 801128c:	b083      	sub	sp, #12
 801128e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011290:	f3ef 8305 	mrs	r3, IPSR
 8011294:	607b      	str	r3, [r7, #4]
  return(result);
 8011296:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011298:	2b00      	cmp	r3, #0
 801129a:	bf14      	ite	ne
 801129c:	2301      	movne	r3, #1
 801129e:	2300      	moveq	r3, #0
 80112a0:	b2db      	uxtb	r3, r3
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80112b2:	f001 fa57 	bl	8012764 <vTaskStartScheduler>
  
  return osOK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	bd80      	pop	{r7, pc}

080112bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	b087      	sub	sp, #28
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685c      	ldr	r4, [r3, #4]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112d2:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff ffbd 	bl	801125a <makeFreeRtosPriority>
 80112e0:	4602      	mov	r2, r0
 80112e2:	f107 030c 	add.w	r3, r7, #12
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	9200      	str	r2, [sp, #0]
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	4632      	mov	r2, r6
 80112ee:	4629      	mov	r1, r5
 80112f0:	4620      	mov	r0, r4
 80112f2:	f000 ff99 	bl	8012228 <xTaskCreate>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d001      	beq.n	8011300 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80112fc:	2300      	movs	r3, #0
 80112fe:	e000      	b.n	8011302 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011300:	68fb      	ldr	r3, [r7, #12]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801130a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b082      	sub	sp, #8
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8011312:	2001      	movs	r0, #1
 8011314:	f000 fada 	bl	80118cc <xQueueCreateMutex>
 8011318:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801131a:	4618      	mov	r0, r3
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
	...

08011324 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801132e:	2300      	movs	r3, #0
 8011330:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <osMutexWait+0x18>
    return osErrorParameter;
 8011338:	2380      	movs	r3, #128	@ 0x80
 801133a:	e03a      	b.n	80113b2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 801133c:	2300      	movs	r3, #0
 801133e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011346:	d103      	bne.n	8011350 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011348:	f04f 33ff 	mov.w	r3, #4294967295
 801134c:	60fb      	str	r3, [r7, #12]
 801134e:	e009      	b.n	8011364 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d006      	beq.n	8011364 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d101      	bne.n	8011364 <osMutexWait+0x40>
      ticks = 1;
 8011360:	2301      	movs	r3, #1
 8011362:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011364:	f7ff ff91 	bl	801128a <inHandlerMode>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d017      	beq.n	801139e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801136e:	f107 0308 	add.w	r3, r7, #8
 8011372:	461a      	mov	r2, r3
 8011374:	2100      	movs	r1, #0
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fd62 	bl	8011e40 <xQueueReceiveFromISR>
 801137c:	4603      	mov	r3, r0
 801137e:	2b01      	cmp	r3, #1
 8011380:	d001      	beq.n	8011386 <osMutexWait+0x62>
      return osErrorOS;
 8011382:	23ff      	movs	r3, #255	@ 0xff
 8011384:	e015      	b.n	80113b2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d011      	beq.n	80113b0 <osMutexWait+0x8c>
 801138c:	4b0b      	ldr	r3, [pc, #44]	@ (80113bc <osMutexWait+0x98>)
 801138e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011392:	601a      	str	r2, [r3, #0]
 8011394:	f3bf 8f4f 	dsb	sy
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	e008      	b.n	80113b0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801139e:	68f9      	ldr	r1, [r7, #12]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 fc3d 	bl	8011c20 <xQueueSemaphoreTake>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d001      	beq.n	80113b0 <osMutexWait+0x8c>
    return osErrorOS;
 80113ac:	23ff      	movs	r3, #255	@ 0xff
 80113ae:	e000      	b.n	80113b2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	e000ed04 	.word	0xe000ed04

080113c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80113cc:	2300      	movs	r3, #0
 80113ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80113d0:	f7ff ff5b 	bl	801128a <inHandlerMode>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d016      	beq.n	8011408 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80113da:	f107 0308 	add.w	r3, r7, #8
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f000 fb8d 	bl	8011b00 <xQueueGiveFromISR>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d001      	beq.n	80113f0 <osMutexRelease+0x30>
      return osErrorOS;
 80113ec:	23ff      	movs	r3, #255	@ 0xff
 80113ee:	e017      	b.n	8011420 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d013      	beq.n	801141e <osMutexRelease+0x5e>
 80113f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011428 <osMutexRelease+0x68>)
 80113f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	e00a      	b.n	801141e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011408:	2300      	movs	r3, #0
 801140a:	2200      	movs	r2, #0
 801140c:	2100      	movs	r1, #0
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fa74 	bl	80118fc <xQueueGenericSend>
 8011414:	4603      	mov	r3, r0
 8011416:	2b01      	cmp	r3, #1
 8011418:	d001      	beq.n	801141e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801141a:	23ff      	movs	r3, #255	@ 0xff
 801141c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801141e:	68fb      	ldr	r3, [r7, #12]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	e000ed04 	.word	0xe000ed04

0801142c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d110      	bne.n	801145e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801143c:	2203      	movs	r2, #3
 801143e:	2100      	movs	r1, #0
 8011440:	2001      	movs	r0, #1
 8011442:	f000 f9d3 	bl	80117ec <xQueueGenericCreate>
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d005      	beq.n	801145a <osSemaphoreCreate+0x2e>
 801144e:	2300      	movs	r3, #0
 8011450:	2200      	movs	r2, #0
 8011452:	2100      	movs	r1, #0
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f000 fa51 	bl	80118fc <xQueueGenericSend>
    return sema;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	e000      	b.n	8011460 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 801145e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011460:	4618      	mov	r0, r3
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011472:	2300      	movs	r3, #0
 8011474:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d101      	bne.n	8011480 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801147c:	2380      	movs	r3, #128	@ 0x80
 801147e:	e03a      	b.n	80114f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011480:	2300      	movs	r3, #0
 8011482:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148a:	d103      	bne.n	8011494 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801148c:	f04f 33ff 	mov.w	r3, #4294967295
 8011490:	60fb      	str	r3, [r7, #12]
 8011492:	e009      	b.n	80114a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80114a4:	2301      	movs	r3, #1
 80114a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80114a8:	f7ff feef 	bl	801128a <inHandlerMode>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d017      	beq.n	80114e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80114b2:	f107 0308 	add.w	r3, r7, #8
 80114b6:	461a      	mov	r2, r3
 80114b8:	2100      	movs	r1, #0
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 fcc0 	bl	8011e40 <xQueueReceiveFromISR>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d001      	beq.n	80114ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80114c6:	23ff      	movs	r3, #255	@ 0xff
 80114c8:	e015      	b.n	80114f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d011      	beq.n	80114f4 <osSemaphoreWait+0x8c>
 80114d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011500 <osSemaphoreWait+0x98>)
 80114d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114d6:	601a      	str	r2, [r3, #0]
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	f3bf 8f6f 	isb	sy
 80114e0:	e008      	b.n	80114f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80114e2:	68f9      	ldr	r1, [r7, #12]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fb9b 	bl	8011c20 <xQueueSemaphoreTake>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d001      	beq.n	80114f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80114f0:	23ff      	movs	r3, #255	@ 0xff
 80114f2:	e000      	b.n	80114f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	e000ed04 	.word	0xe000ed04

08011504 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801150c:	2300      	movs	r3, #0
 801150e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011510:	2300      	movs	r3, #0
 8011512:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011514:	f7ff feb9 	bl	801128a <inHandlerMode>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d016      	beq.n	801154c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801151e:	f107 0308 	add.w	r3, r7, #8
 8011522:	4619      	mov	r1, r3
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f000 faeb 	bl	8011b00 <xQueueGiveFromISR>
 801152a:	4603      	mov	r3, r0
 801152c:	2b01      	cmp	r3, #1
 801152e:	d001      	beq.n	8011534 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011530:	23ff      	movs	r3, #255	@ 0xff
 8011532:	e017      	b.n	8011564 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d013      	beq.n	8011562 <osSemaphoreRelease+0x5e>
 801153a:	4b0c      	ldr	r3, [pc, #48]	@ (801156c <osSemaphoreRelease+0x68>)
 801153c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	f3bf 8f4f 	dsb	sy
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	e00a      	b.n	8011562 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801154c:	2300      	movs	r3, #0
 801154e:	2200      	movs	r2, #0
 8011550:	2100      	movs	r1, #0
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 f9d2 	bl	80118fc <xQueueGenericSend>
 8011558:	4603      	mov	r3, r0
 801155a:	2b01      	cmp	r3, #1
 801155c:	d001      	beq.n	8011562 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801155e:	23ff      	movs	r3, #255	@ 0xff
 8011560:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011562:	68fb      	ldr	r3, [r7, #12]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	e000ed04 	.word	0xe000ed04

08011570 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011578:	f7ff fe87 	bl	801128a <inHandlerMode>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011582:	2382      	movs	r3, #130	@ 0x82
 8011584:	e003      	b.n	801158e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fcdc 	bl	8011f44 <vQueueDelete>

  return osOK; 
 801158c:	2300      	movs	r3, #0
}
 801158e:	4618      	mov	r0, r3
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b082      	sub	sp, #8
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f001 f84c 	bl	801263c <vTaskSuspend>
  
  return osOK;
 80115a4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80115ae:	b480      	push	{r7}
 80115b0:	b083      	sub	sp, #12
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f103 0208 	add.w	r2, r3, #8
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f04f 32ff 	mov.w	r2, #4294967295
 80115c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f103 0208 	add.w	r2, r3, #8
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f103 0208 	add.w	r2, r3, #8
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80115e2:	bf00      	nop
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80115fc:	bf00      	nop
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	689a      	ldr	r2, [r3, #8]
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	683a      	ldr	r2, [r7, #0]
 801162c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	683a      	ldr	r2, [r7, #0]
 8011632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
}
 8011644:	bf00      	nop
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011666:	d103      	bne.n	8011670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	e00c      	b.n	801168a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	3308      	adds	r3, #8
 8011674:	60fb      	str	r3, [r7, #12]
 8011676:	e002      	b.n	801167e <vListInsert+0x2e>
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	60fb      	str	r3, [r7, #12]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	429a      	cmp	r2, r3
 8011688:	d2f6      	bcs.n	8011678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	601a      	str	r2, [r3, #0]
}
 80116b6:	bf00      	nop
 80116b8:	3714      	adds	r7, #20
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr

080116c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80116c2:	b480      	push	{r7}
 80116c4:	b085      	sub	sp, #20
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	691b      	ldr	r3, [r3, #16]
 80116ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	6892      	ldr	r2, [r2, #8]
 80116d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	6852      	ldr	r2, [r2, #4]
 80116e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d103      	bne.n	80116f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	689a      	ldr	r2, [r3, #8]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	1e5a      	subs	r2, r3, #1
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
}
 801170a:	4618      	mov	r0, r3
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
	...

08011718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10b      	bne.n	8011744 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801172c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801173e:	bf00      	nop
 8011740:	bf00      	nop
 8011742:	e7fd      	b.n	8011740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011744:	f001 ff98 	bl	8013678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011750:	68f9      	ldr	r1, [r7, #12]
 8011752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011754:	fb01 f303 	mul.w	r3, r1, r3
 8011758:	441a      	add	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2200      	movs	r2, #0
 8011762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011774:	3b01      	subs	r3, #1
 8011776:	68f9      	ldr	r1, [r7, #12]
 8011778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801177a:	fb01 f303 	mul.w	r3, r1, r3
 801177e:	441a      	add	r2, r3
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	22ff      	movs	r2, #255	@ 0xff
 8011788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	22ff      	movs	r2, #255	@ 0xff
 8011790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d114      	bne.n	80117c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d01a      	beq.n	80117d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3310      	adds	r3, #16
 80117a6:	4618      	mov	r0, r3
 80117a8:	f001 fa2e 	bl	8012c08 <xTaskRemoveFromEventList>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d012      	beq.n	80117d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80117b2:	4b0d      	ldr	r3, [pc, #52]	@ (80117e8 <xQueueGenericReset+0xd0>)
 80117b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117b8:	601a      	str	r2, [r3, #0]
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	e009      	b.n	80117d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	3310      	adds	r3, #16
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fef0 	bl	80115ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	3324      	adds	r3, #36	@ 0x24
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff feeb 	bl	80115ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80117d8:	f001 ff80 	bl	80136dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80117dc:	2301      	movs	r3, #1
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	e000ed04 	.word	0xe000ed04

080117ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b08a      	sub	sp, #40	@ 0x28
 80117f0:	af02      	add	r7, sp, #8
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	4613      	mov	r3, r2
 80117f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d10b      	bne.n	8011818 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011804:	f383 8811 	msr	BASEPRI, r3
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	f3bf 8f4f 	dsb	sy
 8011810:	613b      	str	r3, [r7, #16]
}
 8011812:	bf00      	nop
 8011814:	bf00      	nop
 8011816:	e7fd      	b.n	8011814 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	68ba      	ldr	r2, [r7, #8]
 801181c:	fb02 f303 	mul.w	r3, r2, r3
 8011820:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	3348      	adds	r3, #72	@ 0x48
 8011826:	4618      	mov	r0, r3
 8011828:	f002 f848 	bl	80138bc <pvPortMalloc>
 801182c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801182e:	69bb      	ldr	r3, [r7, #24]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d00d      	beq.n	8011850 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	3348      	adds	r3, #72	@ 0x48
 801183c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801183e:	79fa      	ldrb	r2, [r7, #7]
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	4613      	mov	r3, r2
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	f000 f805 	bl	801185a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011850:	69bb      	ldr	r3, [r7, #24]
	}
 8011852:	4618      	mov	r0, r3
 8011854:	3720      	adds	r7, #32
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801185a:	b580      	push	{r7, lr}
 801185c:	b084      	sub	sp, #16
 801185e:	af00      	add	r7, sp, #0
 8011860:	60f8      	str	r0, [r7, #12]
 8011862:	60b9      	str	r1, [r7, #8]
 8011864:	607a      	str	r2, [r7, #4]
 8011866:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d103      	bne.n	8011876 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	69ba      	ldr	r2, [r7, #24]
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	e002      	b.n	801187c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011888:	2101      	movs	r1, #1
 801188a:	69b8      	ldr	r0, [r7, #24]
 801188c:	f7ff ff44 	bl	8011718 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011890:	bf00      	nop
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00e      	beq.n	80118c4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2200      	movs	r2, #0
 80118b6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118b8:	2300      	movs	r3, #0
 80118ba:	2200      	movs	r2, #0
 80118bc:	2100      	movs	r1, #0
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 f81c 	bl	80118fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80118c4:	bf00      	nop
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	4603      	mov	r3, r0
 80118d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80118d6:	2301      	movs	r3, #1
 80118d8:	617b      	str	r3, [r7, #20]
 80118da:	2300      	movs	r3, #0
 80118dc:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80118de:	79fb      	ldrb	r3, [r7, #7]
 80118e0:	461a      	mov	r2, r3
 80118e2:	6939      	ldr	r1, [r7, #16]
 80118e4:	6978      	ldr	r0, [r7, #20]
 80118e6:	f7ff ff81 	bl	80117ec <xQueueGenericCreate>
 80118ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f7ff ffd3 	bl	8011898 <prvInitialiseMutex>

		return xNewQueue;
 80118f2:	68fb      	ldr	r3, [r7, #12]
	}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08e      	sub	sp, #56	@ 0x38
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801190a:	2300      	movs	r3, #0
 801190c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10b      	bne.n	8011930 <xQueueGenericSend+0x34>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801192a:	bf00      	nop
 801192c:	bf00      	nop
 801192e:	e7fd      	b.n	801192c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d103      	bne.n	801193e <xQueueGenericSend+0x42>
 8011936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801193a:	2b00      	cmp	r3, #0
 801193c:	d101      	bne.n	8011942 <xQueueGenericSend+0x46>
 801193e:	2301      	movs	r3, #1
 8011940:	e000      	b.n	8011944 <xQueueGenericSend+0x48>
 8011942:	2300      	movs	r3, #0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d10b      	bne.n	8011960 <xQueueGenericSend+0x64>
	__asm volatile
 8011948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801194c:	f383 8811 	msr	BASEPRI, r3
 8011950:	f3bf 8f6f 	isb	sy
 8011954:	f3bf 8f4f 	dsb	sy
 8011958:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801195a:	bf00      	nop
 801195c:	bf00      	nop
 801195e:	e7fd      	b.n	801195c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	2b02      	cmp	r3, #2
 8011964:	d103      	bne.n	801196e <xQueueGenericSend+0x72>
 8011966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801196a:	2b01      	cmp	r3, #1
 801196c:	d101      	bne.n	8011972 <xQueueGenericSend+0x76>
 801196e:	2301      	movs	r3, #1
 8011970:	e000      	b.n	8011974 <xQueueGenericSend+0x78>
 8011972:	2300      	movs	r3, #0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10b      	bne.n	8011990 <xQueueGenericSend+0x94>
	__asm volatile
 8011978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197c:	f383 8811 	msr	BASEPRI, r3
 8011980:	f3bf 8f6f 	isb	sy
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	623b      	str	r3, [r7, #32]
}
 801198a:	bf00      	nop
 801198c:	bf00      	nop
 801198e:	e7fd      	b.n	801198c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011990:	f001 fb18 	bl	8012fc4 <xTaskGetSchedulerState>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d102      	bne.n	80119a0 <xQueueGenericSend+0xa4>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d101      	bne.n	80119a4 <xQueueGenericSend+0xa8>
 80119a0:	2301      	movs	r3, #1
 80119a2:	e000      	b.n	80119a6 <xQueueGenericSend+0xaa>
 80119a4:	2300      	movs	r3, #0
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d10b      	bne.n	80119c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80119aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119ae:	f383 8811 	msr	BASEPRI, r3
 80119b2:	f3bf 8f6f 	isb	sy
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	61fb      	str	r3, [r7, #28]
}
 80119bc:	bf00      	nop
 80119be:	bf00      	nop
 80119c0:	e7fd      	b.n	80119be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119c2:	f001 fe59 	bl	8013678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80119c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d302      	bcc.n	80119d8 <xQueueGenericSend+0xdc>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d129      	bne.n	8011a2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80119d8:	683a      	ldr	r2, [r7, #0]
 80119da:	68b9      	ldr	r1, [r7, #8]
 80119dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119de:	f000 fae8 	bl	8011fb2 <prvCopyDataToQueue>
 80119e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d010      	beq.n	8011a0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ee:	3324      	adds	r3, #36	@ 0x24
 80119f0:	4618      	mov	r0, r3
 80119f2:	f001 f909 	bl	8012c08 <xTaskRemoveFromEventList>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d013      	beq.n	8011a24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80119fc:	4b3f      	ldr	r3, [pc, #252]	@ (8011afc <xQueueGenericSend+0x200>)
 80119fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	f3bf 8f6f 	isb	sy
 8011a0c:	e00a      	b.n	8011a24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d007      	beq.n	8011a24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a14:	4b39      	ldr	r3, [pc, #228]	@ (8011afc <xQueueGenericSend+0x200>)
 8011a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a1a:	601a      	str	r2, [r3, #0]
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011a24:	f001 fe5a 	bl	80136dc <vPortExitCritical>
				return pdPASS;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e063      	b.n	8011af4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d103      	bne.n	8011a3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a32:	f001 fe53 	bl	80136dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011a36:	2300      	movs	r3, #0
 8011a38:	e05c      	b.n	8011af4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d106      	bne.n	8011a4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a40:	f107 0314 	add.w	r3, r7, #20
 8011a44:	4618      	mov	r0, r3
 8011a46:	f001 f943 	bl	8012cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a4e:	f001 fe45 	bl	80136dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a52:	f000 fed9 	bl	8012808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a56:	f001 fe0f 	bl	8013678 <vPortEnterCritical>
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011a60:	b25b      	sxtb	r3, r3
 8011a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a66:	d103      	bne.n	8011a70 <xQueueGenericSend+0x174>
 8011a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a76:	b25b      	sxtb	r3, r3
 8011a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a7c:	d103      	bne.n	8011a86 <xQueueGenericSend+0x18a>
 8011a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a80:	2200      	movs	r2, #0
 8011a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a86:	f001 fe29 	bl	80136dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a8a:	1d3a      	adds	r2, r7, #4
 8011a8c:	f107 0314 	add.w	r3, r7, #20
 8011a90:	4611      	mov	r1, r2
 8011a92:	4618      	mov	r0, r3
 8011a94:	f001 f932 	bl	8012cfc <xTaskCheckForTimeOut>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d124      	bne.n	8011ae8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011aa0:	f000 fb7f 	bl	80121a2 <prvIsQueueFull>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d018      	beq.n	8011adc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aac:	3310      	adds	r3, #16
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f001 f882 	bl	8012bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011aba:	f000 fb0a 	bl	80120d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011abe:	f000 feb1 	bl	8012824 <xTaskResumeAll>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f47f af7c 	bne.w	80119c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011aca:	4b0c      	ldr	r3, [pc, #48]	@ (8011afc <xQueueGenericSend+0x200>)
 8011acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	e772      	b.n	80119c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ade:	f000 faf8 	bl	80120d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ae2:	f000 fe9f 	bl	8012824 <xTaskResumeAll>
 8011ae6:	e76c      	b.n	80119c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011aea:	f000 faf2 	bl	80120d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011aee:	f000 fe99 	bl	8012824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011af2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3738      	adds	r7, #56	@ 0x38
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	e000ed04 	.word	0xe000ed04

08011b00 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b08e      	sub	sp, #56	@ 0x38
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d10b      	bne.n	8011b2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	623b      	str	r3, [r7, #32]
}
 8011b26:	bf00      	nop
 8011b28:	bf00      	nop
 8011b2a:	e7fd      	b.n	8011b28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d00b      	beq.n	8011b4c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	61fb      	str	r3, [r7, #28]
}
 8011b46:	bf00      	nop
 8011b48:	bf00      	nop
 8011b4a:	e7fd      	b.n	8011b48 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d103      	bne.n	8011b5c <xQueueGiveFromISR+0x5c>
 8011b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b56:	689b      	ldr	r3, [r3, #8]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <xQueueGiveFromISR+0x60>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <xQueueGiveFromISR+0x62>
 8011b60:	2300      	movs	r3, #0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10b      	bne.n	8011b7e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	61bb      	str	r3, [r7, #24]
}
 8011b78:	bf00      	nop
 8011b7a:	bf00      	nop
 8011b7c:	e7fd      	b.n	8011b7a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b7e:	f001 fe5b 	bl	8013838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011b82:	f3ef 8211 	mrs	r2, BASEPRI
 8011b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	617a      	str	r2, [r7, #20]
 8011b98:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011b9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d22b      	bcs.n	8011c06 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bba:	1c5a      	adds	r2, r3, #1
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc8:	d112      	bne.n	8011bf0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d016      	beq.n	8011c00 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd4:	3324      	adds	r3, #36	@ 0x24
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f001 f816 	bl	8012c08 <xTaskRemoveFromEventList>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00e      	beq.n	8011c00 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00b      	beq.n	8011c00 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	2201      	movs	r2, #1
 8011bec:	601a      	str	r2, [r3, #0]
 8011bee:	e007      	b.n	8011c00 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	b25a      	sxtb	r2, r3
 8011bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011c00:	2301      	movs	r3, #1
 8011c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c04:	e001      	b.n	8011c0a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3738      	adds	r7, #56	@ 0x38
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b08e      	sub	sp, #56	@ 0x38
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011c32:	2300      	movs	r3, #0
 8011c34:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d10b      	bne.n	8011c54 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	623b      	str	r3, [r7, #32]
}
 8011c4e:	bf00      	nop
 8011c50:	bf00      	nop
 8011c52:	e7fd      	b.n	8011c50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00b      	beq.n	8011c74 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c60:	f383 8811 	msr	BASEPRI, r3
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	61fb      	str	r3, [r7, #28]
}
 8011c6e:	bf00      	nop
 8011c70:	bf00      	nop
 8011c72:	e7fd      	b.n	8011c70 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c74:	f001 f9a6 	bl	8012fc4 <xTaskGetSchedulerState>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d102      	bne.n	8011c84 <xQueueSemaphoreTake+0x64>
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <xQueueSemaphoreTake+0x68>
 8011c84:	2301      	movs	r3, #1
 8011c86:	e000      	b.n	8011c8a <xQueueSemaphoreTake+0x6a>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10b      	bne.n	8011ca6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	61bb      	str	r3, [r7, #24]
}
 8011ca0:	bf00      	nop
 8011ca2:	bf00      	nop
 8011ca4:	e7fd      	b.n	8011ca2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ca6:	f001 fce7 	bl	8013678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d024      	beq.n	8011d00 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb8:	1e5a      	subs	r2, r3, #1
 8011cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cbc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d104      	bne.n	8011cd0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011cc6:	f001 fb29 	bl	801331c <pvTaskIncrementMutexHeldCount>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00f      	beq.n	8011cf8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cda:	3310      	adds	r3, #16
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f000 ff93 	bl	8012c08 <xTaskRemoveFromEventList>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d007      	beq.n	8011cf8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ce8:	4b54      	ldr	r3, [pc, #336]	@ (8011e3c <xQueueSemaphoreTake+0x21c>)
 8011cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cee:	601a      	str	r2, [r3, #0]
 8011cf0:	f3bf 8f4f 	dsb	sy
 8011cf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011cf8:	f001 fcf0 	bl	80136dc <vPortExitCritical>
				return pdPASS;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e098      	b.n	8011e32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d112      	bne.n	8011d2c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00b      	beq.n	8011d24 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	617b      	str	r3, [r7, #20]
}
 8011d1e:	bf00      	nop
 8011d20:	bf00      	nop
 8011d22:	e7fd      	b.n	8011d20 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011d24:	f001 fcda 	bl	80136dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	e082      	b.n	8011e32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d106      	bne.n	8011d40 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d32:	f107 030c 	add.w	r3, r7, #12
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 ffca 	bl	8012cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d40:	f001 fccc 	bl	80136dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d44:	f000 fd60 	bl	8012808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d48:	f001 fc96 	bl	8013678 <vPortEnterCritical>
 8011d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011d52:	b25b      	sxtb	r3, r3
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d103      	bne.n	8011d62 <xQueueSemaphoreTake+0x142>
 8011d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011d68:	b25b      	sxtb	r3, r3
 8011d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d6e:	d103      	bne.n	8011d78 <xQueueSemaphoreTake+0x158>
 8011d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011d78:	f001 fcb0 	bl	80136dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011d7c:	463a      	mov	r2, r7
 8011d7e:	f107 030c 	add.w	r3, r7, #12
 8011d82:	4611      	mov	r1, r2
 8011d84:	4618      	mov	r0, r3
 8011d86:	f000 ffb9 	bl	8012cfc <xTaskCheckForTimeOut>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d132      	bne.n	8011df6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d92:	f000 f9f0 	bl	8012176 <prvIsQueueEmpty>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d026      	beq.n	8011dea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d109      	bne.n	8011db8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011da4:	f001 fc68 	bl	8013678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f001 f927 	bl	8013000 <xTaskPriorityInherit>
 8011db2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011db4:	f001 fc92 	bl	80136dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dba:	3324      	adds	r3, #36	@ 0x24
 8011dbc:	683a      	ldr	r2, [r7, #0]
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f000 fefb 	bl	8012bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011dc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011dc8:	f000 f983 	bl	80120d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011dcc:	f000 fd2a 	bl	8012824 <xTaskResumeAll>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f47f af67 	bne.w	8011ca6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011dd8:	4b18      	ldr	r3, [pc, #96]	@ (8011e3c <xQueueSemaphoreTake+0x21c>)
 8011dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011dde:	601a      	str	r2, [r3, #0]
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	f3bf 8f6f 	isb	sy
 8011de8:	e75d      	b.n	8011ca6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011dea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011dec:	f000 f971 	bl	80120d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011df0:	f000 fd18 	bl	8012824 <xTaskResumeAll>
 8011df4:	e757      	b.n	8011ca6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011df8:	f000 f96b 	bl	80120d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011dfc:	f000 fd12 	bl	8012824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e02:	f000 f9b8 	bl	8012176 <prvIsQueueEmpty>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f43f af4c 	beq.w	8011ca6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00d      	beq.n	8011e30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011e14:	f001 fc30 	bl	8013678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e1a:	f000 f8b2 	bl	8011f82 <prvGetDisinheritPriorityAfterTimeout>
 8011e1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e26:	4618      	mov	r0, r3
 8011e28:	f001 f9e8 	bl	80131fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011e2c:	f001 fc56 	bl	80136dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3738      	adds	r7, #56	@ 0x38
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	e000ed04 	.word	0xe000ed04

08011e40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b08e      	sub	sp, #56	@ 0x38
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10b      	bne.n	8011e6e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	623b      	str	r3, [r7, #32]
}
 8011e68:	bf00      	nop
 8011e6a:	bf00      	nop
 8011e6c:	e7fd      	b.n	8011e6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d103      	bne.n	8011e7c <xQueueReceiveFromISR+0x3c>
 8011e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <xQueueReceiveFromISR+0x40>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e000      	b.n	8011e82 <xQueueReceiveFromISR+0x42>
 8011e80:	2300      	movs	r3, #0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d10b      	bne.n	8011e9e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8011e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e8a:	f383 8811 	msr	BASEPRI, r3
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	61fb      	str	r3, [r7, #28]
}
 8011e98:	bf00      	nop
 8011e9a:	bf00      	nop
 8011e9c:	e7fd      	b.n	8011e9a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e9e:	f001 fccb 	bl	8013838 <vPortValidateInterruptPriority>
	__asm volatile
 8011ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8011ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eaa:	f383 8811 	msr	BASEPRI, r3
 8011eae:	f3bf 8f6f 	isb	sy
 8011eb2:	f3bf 8f4f 	dsb	sy
 8011eb6:	61ba      	str	r2, [r7, #24]
 8011eb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011eba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d02f      	beq.n	8011f2a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ed4:	68b9      	ldr	r1, [r7, #8]
 8011ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ed8:	f000 f8d5 	bl	8012086 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ede:	1e5a      	subs	r2, r3, #1
 8011ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eec:	d112      	bne.n	8011f14 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef0:	691b      	ldr	r3, [r3, #16]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d016      	beq.n	8011f24 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef8:	3310      	adds	r3, #16
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fe84 	bl	8012c08 <xTaskRemoveFromEventList>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d00e      	beq.n	8011f24 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00b      	beq.n	8011f24 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2201      	movs	r2, #1
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	e007      	b.n	8011f24 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f18:	3301      	adds	r3, #1
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	b25a      	sxtb	r2, r3
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011f24:	2301      	movs	r3, #1
 8011f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f28:	e001      	b.n	8011f2e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	f383 8811 	msr	BASEPRI, r3
}
 8011f38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3738      	adds	r7, #56	@ 0x38
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d10b      	bne.n	8011f6e <vQueueDelete+0x2a>
	__asm volatile
 8011f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f5a:	f383 8811 	msr	BASEPRI, r3
 8011f5e:	f3bf 8f6f 	isb	sy
 8011f62:	f3bf 8f4f 	dsb	sy
 8011f66:	60bb      	str	r3, [r7, #8]
}
 8011f68:	bf00      	nop
 8011f6a:	bf00      	nop
 8011f6c:	e7fd      	b.n	8011f6a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f000 f930 	bl	80121d4 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f001 fd6f 	bl	8013a58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011f7a:	bf00      	nop
 8011f7c:	3710      	adds	r7, #16
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}

08011f82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011f82:	b480      	push	{r7}
 8011f84:	b085      	sub	sp, #20
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d006      	beq.n	8011fa0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f1c3 0307 	rsb	r3, r3, #7
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	e001      	b.n	8011fa4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
	}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3714      	adds	r7, #20
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr

08011fb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b086      	sub	sp, #24
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	60f8      	str	r0, [r7, #12]
 8011fba:	60b9      	str	r1, [r7, #8]
 8011fbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d10d      	bne.n	8011fec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d14d      	bne.n	8012074 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f001 f885 	bl	80130ec <xTaskPriorityDisinherit>
 8011fe2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	609a      	str	r2, [r3, #8]
 8011fea:	e043      	b.n	8012074 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d119      	bne.n	8012026 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6858      	ldr	r0, [r3, #4]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	68b9      	ldr	r1, [r7, #8]
 8011ffe:	f002 feea 	bl	8014dd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	685a      	ldr	r2, [r3, #4]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801200a:	441a      	add	r2, r3
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	685a      	ldr	r2, [r3, #4]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	429a      	cmp	r2, r3
 801201a:	d32b      	bcc.n	8012074 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	605a      	str	r2, [r3, #4]
 8012024:	e026      	b.n	8012074 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	68d8      	ldr	r0, [r3, #12]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801202e:	461a      	mov	r2, r3
 8012030:	68b9      	ldr	r1, [r7, #8]
 8012032:	f002 fed0 	bl	8014dd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	68da      	ldr	r2, [r3, #12]
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801203e:	425b      	negs	r3, r3
 8012040:	441a      	add	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	68da      	ldr	r2, [r3, #12]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	429a      	cmp	r2, r3
 8012050:	d207      	bcs.n	8012062 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801205a:	425b      	negs	r3, r3
 801205c:	441a      	add	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d105      	bne.n	8012074 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d002      	beq.n	8012074 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	3b01      	subs	r3, #1
 8012072:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	1c5a      	adds	r2, r3, #1
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801207c:	697b      	ldr	r3, [r7, #20]
}
 801207e:	4618      	mov	r0, r3
 8012080:	3718      	adds	r7, #24
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b082      	sub	sp, #8
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
 801208e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012094:	2b00      	cmp	r3, #0
 8012096:	d018      	beq.n	80120ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	68da      	ldr	r2, [r3, #12]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120a0:	441a      	add	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	68da      	ldr	r2, [r3, #12]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d303      	bcc.n	80120ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	68d9      	ldr	r1, [r3, #12]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120c2:	461a      	mov	r2, r3
 80120c4:	6838      	ldr	r0, [r7, #0]
 80120c6:	f002 fe86 	bl	8014dd6 <memcpy>
	}
}
 80120ca:	bf00      	nop
 80120cc:	3708      	adds	r7, #8
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b084      	sub	sp, #16
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80120da:	f001 facd 	bl	8013678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80120e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120e6:	e011      	b.n	801210c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d012      	beq.n	8012116 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3324      	adds	r3, #36	@ 0x24
 80120f4:	4618      	mov	r0, r3
 80120f6:	f000 fd87 	bl	8012c08 <xTaskRemoveFromEventList>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d001      	beq.n	8012104 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012100:	f000 fe60 	bl	8012dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012104:	7bfb      	ldrb	r3, [r7, #15]
 8012106:	3b01      	subs	r3, #1
 8012108:	b2db      	uxtb	r3, r3
 801210a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801210c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012110:	2b00      	cmp	r3, #0
 8012112:	dce9      	bgt.n	80120e8 <prvUnlockQueue+0x16>
 8012114:	e000      	b.n	8012118 <prvUnlockQueue+0x46>
					break;
 8012116:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	22ff      	movs	r2, #255	@ 0xff
 801211c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012120:	f001 fadc 	bl	80136dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012124:	f001 faa8 	bl	8013678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801212e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012130:	e011      	b.n	8012156 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	691b      	ldr	r3, [r3, #16]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d012      	beq.n	8012160 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	3310      	adds	r3, #16
 801213e:	4618      	mov	r0, r3
 8012140:	f000 fd62 	bl	8012c08 <xTaskRemoveFromEventList>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d001      	beq.n	801214e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801214a:	f000 fe3b 	bl	8012dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801214e:	7bbb      	ldrb	r3, [r7, #14]
 8012150:	3b01      	subs	r3, #1
 8012152:	b2db      	uxtb	r3, r3
 8012154:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801215a:	2b00      	cmp	r3, #0
 801215c:	dce9      	bgt.n	8012132 <prvUnlockQueue+0x60>
 801215e:	e000      	b.n	8012162 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012160:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	22ff      	movs	r2, #255	@ 0xff
 8012166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801216a:	f001 fab7 	bl	80136dc <vPortExitCritical>
}
 801216e:	bf00      	nop
 8012170:	3710      	adds	r7, #16
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}

08012176 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b084      	sub	sp, #16
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801217e:	f001 fa7b 	bl	8013678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012186:	2b00      	cmp	r3, #0
 8012188:	d102      	bne.n	8012190 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801218a:	2301      	movs	r3, #1
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	e001      	b.n	8012194 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012190:	2300      	movs	r3, #0
 8012192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012194:	f001 faa2 	bl	80136dc <vPortExitCritical>

	return xReturn;
 8012198:	68fb      	ldr	r3, [r7, #12]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b084      	sub	sp, #16
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121aa:	f001 fa65 	bl	8013678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d102      	bne.n	80121c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121ba:	2301      	movs	r3, #1
 80121bc:	60fb      	str	r3, [r7, #12]
 80121be:	e001      	b.n	80121c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121c0:	2300      	movs	r3, #0
 80121c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121c4:	f001 fa8a 	bl	80136dc <vPortExitCritical>

	return xReturn;
 80121c8:	68fb      	ldr	r3, [r7, #12]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
	...

080121d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80121d4:	b480      	push	{r7}
 80121d6:	b085      	sub	sp, #20
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121dc:	2300      	movs	r3, #0
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	e016      	b.n	8012210 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80121e2:	4a10      	ldr	r2, [pc, #64]	@ (8012224 <vQueueUnregisterQueue+0x50>)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	4413      	add	r3, r2
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d10b      	bne.n	801220a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80121f2:	4a0c      	ldr	r2, [pc, #48]	@ (8012224 <vQueueUnregisterQueue+0x50>)
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2100      	movs	r1, #0
 80121f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80121fc:	4a09      	ldr	r2, [pc, #36]	@ (8012224 <vQueueUnregisterQueue+0x50>)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	4413      	add	r3, r2
 8012204:	2200      	movs	r2, #0
 8012206:	605a      	str	r2, [r3, #4]
				break;
 8012208:	e006      	b.n	8012218 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	3301      	adds	r3, #1
 801220e:	60fb      	str	r3, [r7, #12]
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2b07      	cmp	r3, #7
 8012214:	d9e5      	bls.n	80121e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012216:	bf00      	nop
 8012218:	bf00      	nop
 801221a:	3714      	adds	r7, #20
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr
 8012224:	20001b50 	.word	0x20001b50

08012228 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012228:	b580      	push	{r7, lr}
 801222a:	b08c      	sub	sp, #48	@ 0x30
 801222c:	af04      	add	r7, sp, #16
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	4613      	mov	r3, r2
 8012236:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012238:	88fb      	ldrh	r3, [r7, #6]
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4618      	mov	r0, r3
 801223e:	f001 fb3d 	bl	80138bc <pvPortMalloc>
 8012242:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00e      	beq.n	8012268 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801224a:	20a0      	movs	r0, #160	@ 0xa0
 801224c:	f001 fb36 	bl	80138bc <pvPortMalloc>
 8012250:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	697a      	ldr	r2, [r7, #20]
 801225c:	631a      	str	r2, [r3, #48]	@ 0x30
 801225e:	e005      	b.n	801226c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012260:	6978      	ldr	r0, [r7, #20]
 8012262:	f001 fbf9 	bl	8013a58 <vPortFree>
 8012266:	e001      	b.n	801226c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012268:	2300      	movs	r3, #0
 801226a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d013      	beq.n	801229a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012272:	88fa      	ldrh	r2, [r7, #6]
 8012274:	2300      	movs	r3, #0
 8012276:	9303      	str	r3, [sp, #12]
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	9302      	str	r3, [sp, #8]
 801227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801227e:	9301      	str	r3, [sp, #4]
 8012280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012282:	9300      	str	r3, [sp, #0]
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	68b9      	ldr	r1, [r7, #8]
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	f000 f80f 	bl	80122ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801228e:	69f8      	ldr	r0, [r7, #28]
 8012290:	f000 f8b4 	bl	80123fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012294:	2301      	movs	r3, #1
 8012296:	61bb      	str	r3, [r7, #24]
 8012298:	e002      	b.n	80122a0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801229a:	f04f 33ff 	mov.w	r3, #4294967295
 801229e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80122a0:	69bb      	ldr	r3, [r7, #24]
	}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3720      	adds	r7, #32
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
	...

080122ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b088      	sub	sp, #32
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	607a      	str	r2, [r7, #4]
 80122b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80122ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	461a      	mov	r2, r3
 80122c4:	21a5      	movs	r1, #165	@ 0xa5
 80122c6:	f002 fca8 	bl	8014c1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80122ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80122d4:	3b01      	subs	r3, #1
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	4413      	add	r3, r2
 80122da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	f023 0307 	bic.w	r3, r3, #7
 80122e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	f003 0307 	and.w	r3, r3, #7
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00b      	beq.n	8012306 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80122ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	617b      	str	r3, [r7, #20]
}
 8012300:	bf00      	nop
 8012302:	bf00      	nop
 8012304:	e7fd      	b.n	8012302 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d01f      	beq.n	801234c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801230c:	2300      	movs	r3, #0
 801230e:	61fb      	str	r3, [r7, #28]
 8012310:	e012      	b.n	8012338 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012312:	68ba      	ldr	r2, [r7, #8]
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	4413      	add	r3, r2
 8012318:	7819      	ldrb	r1, [r3, #0]
 801231a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	4413      	add	r3, r2
 8012320:	3334      	adds	r3, #52	@ 0x34
 8012322:	460a      	mov	r2, r1
 8012324:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	4413      	add	r3, r2
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d006      	beq.n	8012340 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	3301      	adds	r3, #1
 8012336:	61fb      	str	r3, [r7, #28]
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	2b0f      	cmp	r3, #15
 801233c:	d9e9      	bls.n	8012312 <prvInitialiseNewTask+0x66>
 801233e:	e000      	b.n	8012342 <prvInitialiseNewTask+0x96>
			{
				break;
 8012340:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012344:	2200      	movs	r2, #0
 8012346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801234a:	e003      	b.n	8012354 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801234c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234e:	2200      	movs	r2, #0
 8012350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012356:	2b06      	cmp	r3, #6
 8012358:	d901      	bls.n	801235e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801235a:	2306      	movs	r3, #6
 801235c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012362:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012368:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	2200      	movs	r2, #0
 801236e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012372:	3304      	adds	r3, #4
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff f93a 	bl	80115ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801237c:	3318      	adds	r3, #24
 801237e:	4618      	mov	r0, r3
 8012380:	f7ff f935 	bl	80115ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801238c:	f1c3 0207 	rsb	r2, r3, #7
 8012390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012398:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801239c:	2200      	movs	r2, #0
 801239e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80123a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a4:	2200      	movs	r2, #0
 80123a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80123aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ac:	334c      	adds	r3, #76	@ 0x4c
 80123ae:	224c      	movs	r2, #76	@ 0x4c
 80123b0:	2100      	movs	r1, #0
 80123b2:	4618      	mov	r0, r3
 80123b4:	f002 fc31 	bl	8014c1a <memset>
 80123b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ba:	4a0d      	ldr	r2, [pc, #52]	@ (80123f0 <prvInitialiseNewTask+0x144>)
 80123bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80123be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c0:	4a0c      	ldr	r2, [pc, #48]	@ (80123f4 <prvInitialiseNewTask+0x148>)
 80123c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80123c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c6:	4a0c      	ldr	r2, [pc, #48]	@ (80123f8 <prvInitialiseNewTask+0x14c>)
 80123c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	68f9      	ldr	r1, [r7, #12]
 80123ce:	69b8      	ldr	r0, [r7, #24]
 80123d0:	f001 f81e 	bl	8013410 <pxPortInitialiseStack>
 80123d4:	4602      	mov	r2, r0
 80123d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80123da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d002      	beq.n	80123e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80123e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123e6:	bf00      	nop
 80123e8:	3720      	adds	r7, #32
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	20004bc4 	.word	0x20004bc4
 80123f4:	20004c2c 	.word	0x20004c2c
 80123f8:	20004c94 	.word	0x20004c94

080123fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012404:	f001 f938 	bl	8013678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012408:	4b2a      	ldr	r3, [pc, #168]	@ (80124b4 <prvAddNewTaskToReadyList+0xb8>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	3301      	adds	r3, #1
 801240e:	4a29      	ldr	r2, [pc, #164]	@ (80124b4 <prvAddNewTaskToReadyList+0xb8>)
 8012410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012412:	4b29      	ldr	r3, [pc, #164]	@ (80124b8 <prvAddNewTaskToReadyList+0xbc>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d109      	bne.n	801242e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801241a:	4a27      	ldr	r2, [pc, #156]	@ (80124b8 <prvAddNewTaskToReadyList+0xbc>)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012420:	4b24      	ldr	r3, [pc, #144]	@ (80124b4 <prvAddNewTaskToReadyList+0xb8>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d110      	bne.n	801244a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012428:	f000 fcf0 	bl	8012e0c <prvInitialiseTaskLists>
 801242c:	e00d      	b.n	801244a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801242e:	4b23      	ldr	r3, [pc, #140]	@ (80124bc <prvAddNewTaskToReadyList+0xc0>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d109      	bne.n	801244a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012436:	4b20      	ldr	r3, [pc, #128]	@ (80124b8 <prvAddNewTaskToReadyList+0xbc>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012440:	429a      	cmp	r2, r3
 8012442:	d802      	bhi.n	801244a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012444:	4a1c      	ldr	r2, [pc, #112]	@ (80124b8 <prvAddNewTaskToReadyList+0xbc>)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801244a:	4b1d      	ldr	r3, [pc, #116]	@ (80124c0 <prvAddNewTaskToReadyList+0xc4>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	3301      	adds	r3, #1
 8012450:	4a1b      	ldr	r2, [pc, #108]	@ (80124c0 <prvAddNewTaskToReadyList+0xc4>)
 8012452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012458:	2201      	movs	r2, #1
 801245a:	409a      	lsls	r2, r3
 801245c:	4b19      	ldr	r3, [pc, #100]	@ (80124c4 <prvAddNewTaskToReadyList+0xc8>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4313      	orrs	r3, r2
 8012462:	4a18      	ldr	r2, [pc, #96]	@ (80124c4 <prvAddNewTaskToReadyList+0xc8>)
 8012464:	6013      	str	r3, [r2, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801246a:	4613      	mov	r3, r2
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	4413      	add	r3, r2
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	4a15      	ldr	r2, [pc, #84]	@ (80124c8 <prvAddNewTaskToReadyList+0xcc>)
 8012474:	441a      	add	r2, r3
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3304      	adds	r3, #4
 801247a:	4619      	mov	r1, r3
 801247c:	4610      	mov	r0, r2
 801247e:	f7ff f8c3 	bl	8011608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012482:	f001 f92b 	bl	80136dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012486:	4b0d      	ldr	r3, [pc, #52]	@ (80124bc <prvAddNewTaskToReadyList+0xc0>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00e      	beq.n	80124ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801248e:	4b0a      	ldr	r3, [pc, #40]	@ (80124b8 <prvAddNewTaskToReadyList+0xbc>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012498:	429a      	cmp	r2, r3
 801249a:	d207      	bcs.n	80124ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801249c:	4b0b      	ldr	r3, [pc, #44]	@ (80124cc <prvAddNewTaskToReadyList+0xd0>)
 801249e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124a2:	601a      	str	r2, [r3, #0]
 80124a4:	f3bf 8f4f 	dsb	sy
 80124a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124ac:	bf00      	nop
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20001c90 	.word	0x20001c90
 80124b8:	20001b90 	.word	0x20001b90
 80124bc:	20001c9c 	.word	0x20001c9c
 80124c0:	20001cac 	.word	0x20001cac
 80124c4:	20001c98 	.word	0x20001c98
 80124c8:	20001b94 	.word	0x20001b94
 80124cc:	e000ed04 	.word	0xe000ed04

080124d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08a      	sub	sp, #40	@ 0x28
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80124da:	2300      	movs	r3, #0
 80124dc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10b      	bne.n	80124fc <vTaskDelayUntil+0x2c>
	__asm volatile
 80124e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	617b      	str	r3, [r7, #20]
}
 80124f6:	bf00      	nop
 80124f8:	bf00      	nop
 80124fa:	e7fd      	b.n	80124f8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10b      	bne.n	801251a <vTaskDelayUntil+0x4a>
	__asm volatile
 8012502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012506:	f383 8811 	msr	BASEPRI, r3
 801250a:	f3bf 8f6f 	isb	sy
 801250e:	f3bf 8f4f 	dsb	sy
 8012512:	613b      	str	r3, [r7, #16]
}
 8012514:	bf00      	nop
 8012516:	bf00      	nop
 8012518:	e7fd      	b.n	8012516 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801251a:	4b2a      	ldr	r3, [pc, #168]	@ (80125c4 <vTaskDelayUntil+0xf4>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <vTaskDelayUntil+0x6a>
	__asm volatile
 8012522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012526:	f383 8811 	msr	BASEPRI, r3
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	60fb      	str	r3, [r7, #12]
}
 8012534:	bf00      	nop
 8012536:	bf00      	nop
 8012538:	e7fd      	b.n	8012536 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801253a:	f000 f965 	bl	8012808 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801253e:	4b22      	ldr	r3, [pc, #136]	@ (80125c8 <vTaskDelayUntil+0xf8>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	4413      	add	r3, r2
 801254c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	6a3a      	ldr	r2, [r7, #32]
 8012554:	429a      	cmp	r2, r3
 8012556:	d20b      	bcs.n	8012570 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	69fa      	ldr	r2, [r7, #28]
 801255e:	429a      	cmp	r2, r3
 8012560:	d211      	bcs.n	8012586 <vTaskDelayUntil+0xb6>
 8012562:	69fa      	ldr	r2, [r7, #28]
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	429a      	cmp	r2, r3
 8012568:	d90d      	bls.n	8012586 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801256a:	2301      	movs	r3, #1
 801256c:	627b      	str	r3, [r7, #36]	@ 0x24
 801256e:	e00a      	b.n	8012586 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	69fa      	ldr	r2, [r7, #28]
 8012576:	429a      	cmp	r2, r3
 8012578:	d303      	bcc.n	8012582 <vTaskDelayUntil+0xb2>
 801257a:	69fa      	ldr	r2, [r7, #28]
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	429a      	cmp	r2, r3
 8012580:	d901      	bls.n	8012586 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8012582:	2301      	movs	r3, #1
 8012584:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	69fa      	ldr	r2, [r7, #28]
 801258a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258e:	2b00      	cmp	r3, #0
 8012590:	d006      	beq.n	80125a0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012592:	69fa      	ldr	r2, [r7, #28]
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	2100      	movs	r1, #0
 801259a:	4618      	mov	r0, r3
 801259c:	f000 fed2 	bl	8013344 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80125a0:	f000 f940 	bl	8012824 <xTaskResumeAll>
 80125a4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d107      	bne.n	80125bc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80125ac:	4b07      	ldr	r3, [pc, #28]	@ (80125cc <vTaskDelayUntil+0xfc>)
 80125ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125b2:	601a      	str	r2, [r3, #0]
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125bc:	bf00      	nop
 80125be:	3728      	adds	r7, #40	@ 0x28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	20001cb8 	.word	0x20001cb8
 80125c8:	20001c94 	.word	0x20001c94
 80125cc:	e000ed04 	.word	0xe000ed04

080125d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80125d8:	2300      	movs	r3, #0
 80125da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d018      	beq.n	8012614 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80125e2:	4b14      	ldr	r3, [pc, #80]	@ (8012634 <vTaskDelay+0x64>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00b      	beq.n	8012602 <vTaskDelay+0x32>
	__asm volatile
 80125ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	60bb      	str	r3, [r7, #8]
}
 80125fc:	bf00      	nop
 80125fe:	bf00      	nop
 8012600:	e7fd      	b.n	80125fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012602:	f000 f901 	bl	8012808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012606:	2100      	movs	r1, #0
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 fe9b 	bl	8013344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801260e:	f000 f909 	bl	8012824 <xTaskResumeAll>
 8012612:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d107      	bne.n	801262a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801261a:	4b07      	ldr	r3, [pc, #28]	@ (8012638 <vTaskDelay+0x68>)
 801261c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012620:	601a      	str	r2, [r3, #0]
 8012622:	f3bf 8f4f 	dsb	sy
 8012626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801262a:	bf00      	nop
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	20001cb8 	.word	0x20001cb8
 8012638:	e000ed04 	.word	0xe000ed04

0801263c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012644:	f001 f818 	bl	8013678 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d102      	bne.n	8012654 <vTaskSuspend+0x18>
 801264e:	4b3d      	ldr	r3, [pc, #244]	@ (8012744 <vTaskSuspend+0x108>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	e000      	b.n	8012656 <vTaskSuspend+0x1a>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	3304      	adds	r3, #4
 801265c:	4618      	mov	r0, r3
 801265e:	f7ff f830 	bl	80116c2 <uxListRemove>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d115      	bne.n	8012694 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801266c:	4936      	ldr	r1, [pc, #216]	@ (8012748 <vTaskSuspend+0x10c>)
 801266e:	4613      	mov	r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	4413      	add	r3, r2
 8012674:	009b      	lsls	r3, r3, #2
 8012676:	440b      	add	r3, r1
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10a      	bne.n	8012694 <vTaskSuspend+0x58>
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012682:	2201      	movs	r2, #1
 8012684:	fa02 f303 	lsl.w	r3, r2, r3
 8012688:	43da      	mvns	r2, r3
 801268a:	4b30      	ldr	r3, [pc, #192]	@ (801274c <vTaskSuspend+0x110>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	4013      	ands	r3, r2
 8012690:	4a2e      	ldr	r2, [pc, #184]	@ (801274c <vTaskSuspend+0x110>)
 8012692:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012698:	2b00      	cmp	r3, #0
 801269a:	d004      	beq.n	80126a6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	3318      	adds	r3, #24
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7ff f80e 	bl	80116c2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	3304      	adds	r3, #4
 80126aa:	4619      	mov	r1, r3
 80126ac:	4828      	ldr	r0, [pc, #160]	@ (8012750 <vTaskSuspend+0x114>)
 80126ae:	f7fe ffab 	bl	8011608 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d103      	bne.n	80126c6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80126c6:	f001 f809 	bl	80136dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80126ca:	4b22      	ldr	r3, [pc, #136]	@ (8012754 <vTaskSuspend+0x118>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d005      	beq.n	80126de <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80126d2:	f000 ffd1 	bl	8013678 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80126d6:	f000 fc55 	bl	8012f84 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80126da:	f000 ffff 	bl	80136dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80126de:	4b19      	ldr	r3, [pc, #100]	@ (8012744 <vTaskSuspend+0x108>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d128      	bne.n	801273a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80126e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012754 <vTaskSuspend+0x118>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d018      	beq.n	8012722 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80126f0:	4b19      	ldr	r3, [pc, #100]	@ (8012758 <vTaskSuspend+0x11c>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d00b      	beq.n	8012710 <vTaskSuspend+0xd4>
	__asm volatile
 80126f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126fc:	f383 8811 	msr	BASEPRI, r3
 8012700:	f3bf 8f6f 	isb	sy
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	60bb      	str	r3, [r7, #8]
}
 801270a:	bf00      	nop
 801270c:	bf00      	nop
 801270e:	e7fd      	b.n	801270c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012710:	4b12      	ldr	r3, [pc, #72]	@ (801275c <vTaskSuspend+0x120>)
 8012712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012720:	e00b      	b.n	801273a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012722:	4b0b      	ldr	r3, [pc, #44]	@ (8012750 <vTaskSuspend+0x114>)
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	4b0e      	ldr	r3, [pc, #56]	@ (8012760 <vTaskSuspend+0x124>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	429a      	cmp	r2, r3
 801272c:	d103      	bne.n	8012736 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801272e:	4b05      	ldr	r3, [pc, #20]	@ (8012744 <vTaskSuspend+0x108>)
 8012730:	2200      	movs	r2, #0
 8012732:	601a      	str	r2, [r3, #0]
	}
 8012734:	e001      	b.n	801273a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012736:	f000 f9dd 	bl	8012af4 <vTaskSwitchContext>
	}
 801273a:	bf00      	nop
 801273c:	3710      	adds	r7, #16
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	20001b90 	.word	0x20001b90
 8012748:	20001b94 	.word	0x20001b94
 801274c:	20001c98 	.word	0x20001c98
 8012750:	20001c7c 	.word	0x20001c7c
 8012754:	20001c9c 	.word	0x20001c9c
 8012758:	20001cb8 	.word	0x20001cb8
 801275c:	e000ed04 	.word	0xe000ed04
 8012760:	20001c90 	.word	0x20001c90

08012764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801276a:	4b1f      	ldr	r3, [pc, #124]	@ (80127e8 <vTaskStartScheduler+0x84>)
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	2300      	movs	r3, #0
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	2300      	movs	r3, #0
 8012774:	2280      	movs	r2, #128	@ 0x80
 8012776:	491d      	ldr	r1, [pc, #116]	@ (80127ec <vTaskStartScheduler+0x88>)
 8012778:	481d      	ldr	r0, [pc, #116]	@ (80127f0 <vTaskStartScheduler+0x8c>)
 801277a:	f7ff fd55 	bl	8012228 <xTaskCreate>
 801277e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d11b      	bne.n	80127be <vTaskStartScheduler+0x5a>
	__asm volatile
 8012786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801278a:	f383 8811 	msr	BASEPRI, r3
 801278e:	f3bf 8f6f 	isb	sy
 8012792:	f3bf 8f4f 	dsb	sy
 8012796:	60bb      	str	r3, [r7, #8]
}
 8012798:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801279a:	4b16      	ldr	r3, [pc, #88]	@ (80127f4 <vTaskStartScheduler+0x90>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	334c      	adds	r3, #76	@ 0x4c
 80127a0:	4a15      	ldr	r2, [pc, #84]	@ (80127f8 <vTaskStartScheduler+0x94>)
 80127a2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127a4:	4b15      	ldr	r3, [pc, #84]	@ (80127fc <vTaskStartScheduler+0x98>)
 80127a6:	f04f 32ff 	mov.w	r2, #4294967295
 80127aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127ac:	4b14      	ldr	r3, [pc, #80]	@ (8012800 <vTaskStartScheduler+0x9c>)
 80127ae:	2201      	movs	r2, #1
 80127b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80127b2:	4b14      	ldr	r3, [pc, #80]	@ (8012804 <vTaskStartScheduler+0xa0>)
 80127b4:	2200      	movs	r2, #0
 80127b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127b8:	f000 feba 	bl	8013530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127bc:	e00f      	b.n	80127de <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c4:	d10b      	bne.n	80127de <vTaskStartScheduler+0x7a>
	__asm volatile
 80127c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127ca:	f383 8811 	msr	BASEPRI, r3
 80127ce:	f3bf 8f6f 	isb	sy
 80127d2:	f3bf 8f4f 	dsb	sy
 80127d6:	607b      	str	r3, [r7, #4]
}
 80127d8:	bf00      	nop
 80127da:	bf00      	nop
 80127dc:	e7fd      	b.n	80127da <vTaskStartScheduler+0x76>
}
 80127de:	bf00      	nop
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	20001cb4 	.word	0x20001cb4
 80127ec:	08018f40 	.word	0x08018f40
 80127f0:	08012ddd 	.word	0x08012ddd
 80127f4:	20001b90 	.word	0x20001b90
 80127f8:	20000054 	.word	0x20000054
 80127fc:	20001cb0 	.word	0x20001cb0
 8012800:	20001c9c 	.word	0x20001c9c
 8012804:	20001c94 	.word	0x20001c94

08012808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012808:	b480      	push	{r7}
 801280a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801280c:	4b04      	ldr	r3, [pc, #16]	@ (8012820 <vTaskSuspendAll+0x18>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	3301      	adds	r3, #1
 8012812:	4a03      	ldr	r2, [pc, #12]	@ (8012820 <vTaskSuspendAll+0x18>)
 8012814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012816:	bf00      	nop
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr
 8012820:	20001cb8 	.word	0x20001cb8

08012824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801282a:	2300      	movs	r3, #0
 801282c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801282e:	2300      	movs	r3, #0
 8012830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012832:	4b42      	ldr	r3, [pc, #264]	@ (801293c <xTaskResumeAll+0x118>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10b      	bne.n	8012852 <xTaskResumeAll+0x2e>
	__asm volatile
 801283a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	603b      	str	r3, [r7, #0]
}
 801284c:	bf00      	nop
 801284e:	bf00      	nop
 8012850:	e7fd      	b.n	801284e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012852:	f000 ff11 	bl	8013678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012856:	4b39      	ldr	r3, [pc, #228]	@ (801293c <xTaskResumeAll+0x118>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	3b01      	subs	r3, #1
 801285c:	4a37      	ldr	r2, [pc, #220]	@ (801293c <xTaskResumeAll+0x118>)
 801285e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012860:	4b36      	ldr	r3, [pc, #216]	@ (801293c <xTaskResumeAll+0x118>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d161      	bne.n	801292c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012868:	4b35      	ldr	r3, [pc, #212]	@ (8012940 <xTaskResumeAll+0x11c>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d05d      	beq.n	801292c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012870:	e02e      	b.n	80128d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012872:	4b34      	ldr	r3, [pc, #208]	@ (8012944 <xTaskResumeAll+0x120>)
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	3318      	adds	r3, #24
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe ff1f 	bl	80116c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	3304      	adds	r3, #4
 8012888:	4618      	mov	r0, r3
 801288a:	f7fe ff1a 	bl	80116c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012892:	2201      	movs	r2, #1
 8012894:	409a      	lsls	r2, r3
 8012896:	4b2c      	ldr	r3, [pc, #176]	@ (8012948 <xTaskResumeAll+0x124>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4313      	orrs	r3, r2
 801289c:	4a2a      	ldr	r2, [pc, #168]	@ (8012948 <xTaskResumeAll+0x124>)
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128a4:	4613      	mov	r3, r2
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4a27      	ldr	r2, [pc, #156]	@ (801294c <xTaskResumeAll+0x128>)
 80128ae:	441a      	add	r2, r3
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	3304      	adds	r3, #4
 80128b4:	4619      	mov	r1, r3
 80128b6:	4610      	mov	r0, r2
 80128b8:	f7fe fea6 	bl	8011608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128c0:	4b23      	ldr	r3, [pc, #140]	@ (8012950 <xTaskResumeAll+0x12c>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d302      	bcc.n	80128d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80128ca:	4b22      	ldr	r3, [pc, #136]	@ (8012954 <xTaskResumeAll+0x130>)
 80128cc:	2201      	movs	r2, #1
 80128ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128d0:	4b1c      	ldr	r3, [pc, #112]	@ (8012944 <xTaskResumeAll+0x120>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1cc      	bne.n	8012872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80128de:	f000 fb51 	bl	8012f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80128e2:	4b1d      	ldr	r3, [pc, #116]	@ (8012958 <xTaskResumeAll+0x134>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d010      	beq.n	8012910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80128ee:	f000 f847 	bl	8012980 <xTaskIncrementTick>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d002      	beq.n	80128fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80128f8:	4b16      	ldr	r3, [pc, #88]	@ (8012954 <xTaskResumeAll+0x130>)
 80128fa:	2201      	movs	r2, #1
 80128fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3b01      	subs	r3, #1
 8012902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1f1      	bne.n	80128ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801290a:	4b13      	ldr	r3, [pc, #76]	@ (8012958 <xTaskResumeAll+0x134>)
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012910:	4b10      	ldr	r3, [pc, #64]	@ (8012954 <xTaskResumeAll+0x130>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d009      	beq.n	801292c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012918:	2301      	movs	r3, #1
 801291a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801291c:	4b0f      	ldr	r3, [pc, #60]	@ (801295c <xTaskResumeAll+0x138>)
 801291e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	f3bf 8f4f 	dsb	sy
 8012928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801292c:	f000 fed6 	bl	80136dc <vPortExitCritical>

	return xAlreadyYielded;
 8012930:	68bb      	ldr	r3, [r7, #8]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	20001cb8 	.word	0x20001cb8
 8012940:	20001c90 	.word	0x20001c90
 8012944:	20001c50 	.word	0x20001c50
 8012948:	20001c98 	.word	0x20001c98
 801294c:	20001b94 	.word	0x20001b94
 8012950:	20001b90 	.word	0x20001b90
 8012954:	20001ca4 	.word	0x20001ca4
 8012958:	20001ca0 	.word	0x20001ca0
 801295c:	e000ed04 	.word	0xe000ed04

08012960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012966:	4b05      	ldr	r3, [pc, #20]	@ (801297c <xTaskGetTickCount+0x1c>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801296c:	687b      	ldr	r3, [r7, #4]
}
 801296e:	4618      	mov	r0, r3
 8012970:	370c      	adds	r7, #12
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	20001c94 	.word	0x20001c94

08012980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012986:	2300      	movs	r3, #0
 8012988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801298a:	4b4f      	ldr	r3, [pc, #316]	@ (8012ac8 <xTaskIncrementTick+0x148>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	f040 808f 	bne.w	8012ab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012994:	4b4d      	ldr	r3, [pc, #308]	@ (8012acc <xTaskIncrementTick+0x14c>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3301      	adds	r3, #1
 801299a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801299c:	4a4b      	ldr	r2, [pc, #300]	@ (8012acc <xTaskIncrementTick+0x14c>)
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d121      	bne.n	80129ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80129a8:	4b49      	ldr	r3, [pc, #292]	@ (8012ad0 <xTaskIncrementTick+0x150>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00b      	beq.n	80129ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80129b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	603b      	str	r3, [r7, #0]
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop
 80129c8:	e7fd      	b.n	80129c6 <xTaskIncrementTick+0x46>
 80129ca:	4b41      	ldr	r3, [pc, #260]	@ (8012ad0 <xTaskIncrementTick+0x150>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	4b40      	ldr	r3, [pc, #256]	@ (8012ad4 <xTaskIncrementTick+0x154>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a3e      	ldr	r2, [pc, #248]	@ (8012ad0 <xTaskIncrementTick+0x150>)
 80129d6:	6013      	str	r3, [r2, #0]
 80129d8:	4a3e      	ldr	r2, [pc, #248]	@ (8012ad4 <xTaskIncrementTick+0x154>)
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	6013      	str	r3, [r2, #0]
 80129de:	4b3e      	ldr	r3, [pc, #248]	@ (8012ad8 <xTaskIncrementTick+0x158>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	3301      	adds	r3, #1
 80129e4:	4a3c      	ldr	r2, [pc, #240]	@ (8012ad8 <xTaskIncrementTick+0x158>)
 80129e6:	6013      	str	r3, [r2, #0]
 80129e8:	f000 facc 	bl	8012f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80129ec:	4b3b      	ldr	r3, [pc, #236]	@ (8012adc <xTaskIncrementTick+0x15c>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	693a      	ldr	r2, [r7, #16]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d348      	bcc.n	8012a88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129f6:	4b36      	ldr	r3, [pc, #216]	@ (8012ad0 <xTaskIncrementTick+0x150>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d104      	bne.n	8012a0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a00:	4b36      	ldr	r3, [pc, #216]	@ (8012adc <xTaskIncrementTick+0x15c>)
 8012a02:	f04f 32ff 	mov.w	r2, #4294967295
 8012a06:	601a      	str	r2, [r3, #0]
					break;
 8012a08:	e03e      	b.n	8012a88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a0a:	4b31      	ldr	r3, [pc, #196]	@ (8012ad0 <xTaskIncrementTick+0x150>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a1a:	693a      	ldr	r2, [r7, #16]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d203      	bcs.n	8012a2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a22:	4a2e      	ldr	r2, [pc, #184]	@ (8012adc <xTaskIncrementTick+0x15c>)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012a28:	e02e      	b.n	8012a88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7fe fe47 	bl	80116c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d004      	beq.n	8012a46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	3318      	adds	r3, #24
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7fe fe3e 	bl	80116c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	409a      	lsls	r2, r3
 8012a4e:	4b24      	ldr	r3, [pc, #144]	@ (8012ae0 <xTaskIncrementTick+0x160>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4313      	orrs	r3, r2
 8012a54:	4a22      	ldr	r2, [pc, #136]	@ (8012ae0 <xTaskIncrementTick+0x160>)
 8012a56:	6013      	str	r3, [r2, #0]
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	4a1f      	ldr	r2, [pc, #124]	@ (8012ae4 <xTaskIncrementTick+0x164>)
 8012a66:	441a      	add	r2, r3
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	4610      	mov	r0, r2
 8012a70:	f7fe fdca 	bl	8011608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a78:	4b1b      	ldr	r3, [pc, #108]	@ (8012ae8 <xTaskIncrementTick+0x168>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d3b9      	bcc.n	80129f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012a82:	2301      	movs	r3, #1
 8012a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a86:	e7b6      	b.n	80129f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012a88:	4b17      	ldr	r3, [pc, #92]	@ (8012ae8 <xTaskIncrementTick+0x168>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a8e:	4915      	ldr	r1, [pc, #84]	@ (8012ae4 <xTaskIncrementTick+0x164>)
 8012a90:	4613      	mov	r3, r2
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	4413      	add	r3, r2
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	440b      	add	r3, r1
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d901      	bls.n	8012aa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012aa4:	4b11      	ldr	r3, [pc, #68]	@ (8012aec <xTaskIncrementTick+0x16c>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d007      	beq.n	8012abc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012aac:	2301      	movs	r3, #1
 8012aae:	617b      	str	r3, [r7, #20]
 8012ab0:	e004      	b.n	8012abc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8012af0 <xTaskIncrementTick+0x170>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8012af0 <xTaskIncrementTick+0x170>)
 8012aba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012abc:	697b      	ldr	r3, [r7, #20]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3718      	adds	r7, #24
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	20001cb8 	.word	0x20001cb8
 8012acc:	20001c94 	.word	0x20001c94
 8012ad0:	20001c48 	.word	0x20001c48
 8012ad4:	20001c4c 	.word	0x20001c4c
 8012ad8:	20001ca8 	.word	0x20001ca8
 8012adc:	20001cb0 	.word	0x20001cb0
 8012ae0:	20001c98 	.word	0x20001c98
 8012ae4:	20001b94 	.word	0x20001b94
 8012ae8:	20001b90 	.word	0x20001b90
 8012aec:	20001ca4 	.word	0x20001ca4
 8012af0:	20001ca0 	.word	0x20001ca0

08012af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012af4:	b480      	push	{r7}
 8012af6:	b087      	sub	sp, #28
 8012af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012afa:	4b2a      	ldr	r3, [pc, #168]	@ (8012ba4 <vTaskSwitchContext+0xb0>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d003      	beq.n	8012b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b02:	4b29      	ldr	r3, [pc, #164]	@ (8012ba8 <vTaskSwitchContext+0xb4>)
 8012b04:	2201      	movs	r2, #1
 8012b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b08:	e045      	b.n	8012b96 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8012b0a:	4b27      	ldr	r3, [pc, #156]	@ (8012ba8 <vTaskSwitchContext+0xb4>)
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b10:	4b26      	ldr	r3, [pc, #152]	@ (8012bac <vTaskSwitchContext+0xb8>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	fab3 f383 	clz	r3, r3
 8012b1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012b1e:	7afb      	ldrb	r3, [r7, #11]
 8012b20:	f1c3 031f 	rsb	r3, r3, #31
 8012b24:	617b      	str	r3, [r7, #20]
 8012b26:	4922      	ldr	r1, [pc, #136]	@ (8012bb0 <vTaskSwitchContext+0xbc>)
 8012b28:	697a      	ldr	r2, [r7, #20]
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	4413      	add	r3, r2
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	440b      	add	r3, r1
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d10b      	bne.n	8012b52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8012b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b3e:	f383 8811 	msr	BASEPRI, r3
 8012b42:	f3bf 8f6f 	isb	sy
 8012b46:	f3bf 8f4f 	dsb	sy
 8012b4a:	607b      	str	r3, [r7, #4]
}
 8012b4c:	bf00      	nop
 8012b4e:	bf00      	nop
 8012b50:	e7fd      	b.n	8012b4e <vTaskSwitchContext+0x5a>
 8012b52:	697a      	ldr	r2, [r7, #20]
 8012b54:	4613      	mov	r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	4413      	add	r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	4a14      	ldr	r2, [pc, #80]	@ (8012bb0 <vTaskSwitchContext+0xbc>)
 8012b5e:	4413      	add	r3, r2
 8012b60:	613b      	str	r3, [r7, #16]
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	685a      	ldr	r2, [r3, #4]
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	605a      	str	r2, [r3, #4]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	685a      	ldr	r2, [r3, #4]
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	3308      	adds	r3, #8
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d104      	bne.n	8012b82 <vTaskSwitchContext+0x8e>
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	685a      	ldr	r2, [r3, #4]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	605a      	str	r2, [r3, #4]
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	4a0a      	ldr	r2, [pc, #40]	@ (8012bb4 <vTaskSwitchContext+0xc0>)
 8012b8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012b8c:	4b09      	ldr	r3, [pc, #36]	@ (8012bb4 <vTaskSwitchContext+0xc0>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	334c      	adds	r3, #76	@ 0x4c
 8012b92:	4a09      	ldr	r2, [pc, #36]	@ (8012bb8 <vTaskSwitchContext+0xc4>)
 8012b94:	6013      	str	r3, [r2, #0]
}
 8012b96:	bf00      	nop
 8012b98:	371c      	adds	r7, #28
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	20001cb8 	.word	0x20001cb8
 8012ba8:	20001ca4 	.word	0x20001ca4
 8012bac:	20001c98 	.word	0x20001c98
 8012bb0:	20001b94 	.word	0x20001b94
 8012bb4:	20001b90 	.word	0x20001b90
 8012bb8:	20000054 	.word	0x20000054

08012bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10b      	bne.n	8012be4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	60fb      	str	r3, [r7, #12]
}
 8012bde:	bf00      	nop
 8012be0:	bf00      	nop
 8012be2:	e7fd      	b.n	8012be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012be4:	4b07      	ldr	r3, [pc, #28]	@ (8012c04 <vTaskPlaceOnEventList+0x48>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	3318      	adds	r3, #24
 8012bea:	4619      	mov	r1, r3
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7fe fd2f 	bl	8011650 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012bf2:	2101      	movs	r1, #1
 8012bf4:	6838      	ldr	r0, [r7, #0]
 8012bf6:	f000 fba5 	bl	8013344 <prvAddCurrentTaskToDelayedList>
}
 8012bfa:	bf00      	nop
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20001b90 	.word	0x20001b90

08012c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b086      	sub	sp, #24
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d10b      	bne.n	8012c36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c22:	f383 8811 	msr	BASEPRI, r3
 8012c26:	f3bf 8f6f 	isb	sy
 8012c2a:	f3bf 8f4f 	dsb	sy
 8012c2e:	60fb      	str	r3, [r7, #12]
}
 8012c30:	bf00      	nop
 8012c32:	bf00      	nop
 8012c34:	e7fd      	b.n	8012c32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	3318      	adds	r3, #24
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe fd41 	bl	80116c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c40:	4b1d      	ldr	r3, [pc, #116]	@ (8012cb8 <xTaskRemoveFromEventList+0xb0>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d11c      	bne.n	8012c82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	3304      	adds	r3, #4
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7fe fd38 	bl	80116c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c56:	2201      	movs	r2, #1
 8012c58:	409a      	lsls	r2, r3
 8012c5a:	4b18      	ldr	r3, [pc, #96]	@ (8012cbc <xTaskRemoveFromEventList+0xb4>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	4a16      	ldr	r2, [pc, #88]	@ (8012cbc <xTaskRemoveFromEventList+0xb4>)
 8012c62:	6013      	str	r3, [r2, #0]
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c68:	4613      	mov	r3, r2
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	4413      	add	r3, r2
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4a13      	ldr	r2, [pc, #76]	@ (8012cc0 <xTaskRemoveFromEventList+0xb8>)
 8012c72:	441a      	add	r2, r3
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	3304      	adds	r3, #4
 8012c78:	4619      	mov	r1, r3
 8012c7a:	4610      	mov	r0, r2
 8012c7c:	f7fe fcc4 	bl	8011608 <vListInsertEnd>
 8012c80:	e005      	b.n	8012c8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	3318      	adds	r3, #24
 8012c86:	4619      	mov	r1, r3
 8012c88:	480e      	ldr	r0, [pc, #56]	@ (8012cc4 <xTaskRemoveFromEventList+0xbc>)
 8012c8a:	f7fe fcbd 	bl	8011608 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c92:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc8 <xTaskRemoveFromEventList+0xc0>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d905      	bls.n	8012ca8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8012ccc <xTaskRemoveFromEventList+0xc4>)
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	601a      	str	r2, [r3, #0]
 8012ca6:	e001      	b.n	8012cac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012cac:	697b      	ldr	r3, [r7, #20]
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3718      	adds	r7, #24
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	20001cb8 	.word	0x20001cb8
 8012cbc:	20001c98 	.word	0x20001c98
 8012cc0:	20001b94 	.word	0x20001b94
 8012cc4:	20001c50 	.word	0x20001c50
 8012cc8:	20001b90 	.word	0x20001b90
 8012ccc:	20001ca4 	.word	0x20001ca4

08012cd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012cd8:	4b06      	ldr	r3, [pc, #24]	@ (8012cf4 <vTaskInternalSetTimeOutState+0x24>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ce0:	4b05      	ldr	r3, [pc, #20]	@ (8012cf8 <vTaskInternalSetTimeOutState+0x28>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	605a      	str	r2, [r3, #4]
}
 8012ce8:	bf00      	nop
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr
 8012cf4:	20001ca8 	.word	0x20001ca8
 8012cf8:	20001c94 	.word	0x20001c94

08012cfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b088      	sub	sp, #32
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10b      	bne.n	8012d24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d10:	f383 8811 	msr	BASEPRI, r3
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	613b      	str	r3, [r7, #16]
}
 8012d1e:	bf00      	nop
 8012d20:	bf00      	nop
 8012d22:	e7fd      	b.n	8012d20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10b      	bne.n	8012d42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d2e:	f383 8811 	msr	BASEPRI, r3
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	60fb      	str	r3, [r7, #12]
}
 8012d3c:	bf00      	nop
 8012d3e:	bf00      	nop
 8012d40:	e7fd      	b.n	8012d3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012d42:	f000 fc99 	bl	8013678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012d46:	4b1d      	ldr	r3, [pc, #116]	@ (8012dbc <xTaskCheckForTimeOut+0xc0>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	69ba      	ldr	r2, [r7, #24]
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5e:	d102      	bne.n	8012d66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012d60:	2300      	movs	r3, #0
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	e023      	b.n	8012dae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	4b15      	ldr	r3, [pc, #84]	@ (8012dc0 <xTaskCheckForTimeOut+0xc4>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d007      	beq.n	8012d82 <xTaskCheckForTimeOut+0x86>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	69ba      	ldr	r2, [r7, #24]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d302      	bcc.n	8012d82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	61fb      	str	r3, [r7, #28]
 8012d80:	e015      	b.n	8012dae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d20b      	bcs.n	8012da4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	1ad2      	subs	r2, r2, r3
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f7ff ff99 	bl	8012cd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	61fb      	str	r3, [r7, #28]
 8012da2:	e004      	b.n	8012dae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	2200      	movs	r2, #0
 8012da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012daa:	2301      	movs	r3, #1
 8012dac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012dae:	f000 fc95 	bl	80136dc <vPortExitCritical>

	return xReturn;
 8012db2:	69fb      	ldr	r3, [r7, #28]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3720      	adds	r7, #32
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	20001c94 	.word	0x20001c94
 8012dc0:	20001ca8 	.word	0x20001ca8

08012dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012dc8:	4b03      	ldr	r3, [pc, #12]	@ (8012dd8 <vTaskMissedYield+0x14>)
 8012dca:	2201      	movs	r2, #1
 8012dcc:	601a      	str	r2, [r3, #0]
}
 8012dce:	bf00      	nop
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	20001ca4 	.word	0x20001ca4

08012ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012de4:	f000 f852 	bl	8012e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012de8:	4b06      	ldr	r3, [pc, #24]	@ (8012e04 <prvIdleTask+0x28>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d9f9      	bls.n	8012de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012df0:	4b05      	ldr	r3, [pc, #20]	@ (8012e08 <prvIdleTask+0x2c>)
 8012df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	f3bf 8f4f 	dsb	sy
 8012dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e00:	e7f0      	b.n	8012de4 <prvIdleTask+0x8>
 8012e02:	bf00      	nop
 8012e04:	20001b94 	.word	0x20001b94
 8012e08:	e000ed04 	.word	0xe000ed04

08012e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e12:	2300      	movs	r3, #0
 8012e14:	607b      	str	r3, [r7, #4]
 8012e16:	e00c      	b.n	8012e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	4413      	add	r3, r2
 8012e20:	009b      	lsls	r3, r3, #2
 8012e22:	4a12      	ldr	r2, [pc, #72]	@ (8012e6c <prvInitialiseTaskLists+0x60>)
 8012e24:	4413      	add	r3, r2
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fe fbc1 	bl	80115ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	607b      	str	r3, [r7, #4]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b06      	cmp	r3, #6
 8012e36:	d9ef      	bls.n	8012e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012e38:	480d      	ldr	r0, [pc, #52]	@ (8012e70 <prvInitialiseTaskLists+0x64>)
 8012e3a:	f7fe fbb8 	bl	80115ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012e3e:	480d      	ldr	r0, [pc, #52]	@ (8012e74 <prvInitialiseTaskLists+0x68>)
 8012e40:	f7fe fbb5 	bl	80115ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012e44:	480c      	ldr	r0, [pc, #48]	@ (8012e78 <prvInitialiseTaskLists+0x6c>)
 8012e46:	f7fe fbb2 	bl	80115ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012e4a:	480c      	ldr	r0, [pc, #48]	@ (8012e7c <prvInitialiseTaskLists+0x70>)
 8012e4c:	f7fe fbaf 	bl	80115ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012e50:	480b      	ldr	r0, [pc, #44]	@ (8012e80 <prvInitialiseTaskLists+0x74>)
 8012e52:	f7fe fbac 	bl	80115ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012e56:	4b0b      	ldr	r3, [pc, #44]	@ (8012e84 <prvInitialiseTaskLists+0x78>)
 8012e58:	4a05      	ldr	r2, [pc, #20]	@ (8012e70 <prvInitialiseTaskLists+0x64>)
 8012e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8012e88 <prvInitialiseTaskLists+0x7c>)
 8012e5e:	4a05      	ldr	r2, [pc, #20]	@ (8012e74 <prvInitialiseTaskLists+0x68>)
 8012e60:	601a      	str	r2, [r3, #0]
}
 8012e62:	bf00      	nop
 8012e64:	3708      	adds	r7, #8
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	20001b94 	.word	0x20001b94
 8012e70:	20001c20 	.word	0x20001c20
 8012e74:	20001c34 	.word	0x20001c34
 8012e78:	20001c50 	.word	0x20001c50
 8012e7c:	20001c64 	.word	0x20001c64
 8012e80:	20001c7c 	.word	0x20001c7c
 8012e84:	20001c48 	.word	0x20001c48
 8012e88:	20001c4c 	.word	0x20001c4c

08012e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e92:	e019      	b.n	8012ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012e94:	f000 fbf0 	bl	8013678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e98:	4b10      	ldr	r3, [pc, #64]	@ (8012edc <prvCheckTasksWaitingTermination+0x50>)
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3304      	adds	r3, #4
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7fe fc0c 	bl	80116c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8012ee0 <prvCheckTasksWaitingTermination+0x54>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	3b01      	subs	r3, #1
 8012eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8012ee0 <prvCheckTasksWaitingTermination+0x54>)
 8012eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8012ee4 <prvCheckTasksWaitingTermination+0x58>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	4a0a      	ldr	r2, [pc, #40]	@ (8012ee4 <prvCheckTasksWaitingTermination+0x58>)
 8012ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012ebe:	f000 fc0d 	bl	80136dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f000 f848 	bl	8012f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ec8:	4b06      	ldr	r3, [pc, #24]	@ (8012ee4 <prvCheckTasksWaitingTermination+0x58>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1e1      	bne.n	8012e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ed0:	bf00      	nop
 8012ed2:	bf00      	nop
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	bf00      	nop
 8012edc:	20001c64 	.word	0x20001c64
 8012ee0:	20001c90 	.word	0x20001c90
 8012ee4:	20001c78 	.word	0x20001c78

08012ee8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012ef4:	e005      	b.n	8012f02 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	3301      	adds	r3, #1
 8012f00:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	2ba5      	cmp	r3, #165	@ 0xa5
 8012f08:	d0f5      	beq.n	8012ef6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	089b      	lsrs	r3, r3, #2
 8012f0e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	b29b      	uxth	r3, r3
	}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b086      	sub	sp, #24
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d102      	bne.n	8012f34 <uxTaskGetStackHighWaterMark+0x14>
 8012f2e:	4b09      	ldr	r3, [pc, #36]	@ (8012f54 <uxTaskGetStackHighWaterMark+0x34>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	e000      	b.n	8012f36 <uxTaskGetStackHighWaterMark+0x16>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f3c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8012f3e:	6938      	ldr	r0, [r7, #16]
 8012f40:	f7ff ffd2 	bl	8012ee8 <prvTaskCheckFreeStackSpace>
 8012f44:	4603      	mov	r3, r0
 8012f46:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8012f48:	68fb      	ldr	r3, [r7, #12]
	}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3718      	adds	r7, #24
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20001b90 	.word	0x20001b90

08012f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	334c      	adds	r3, #76	@ 0x4c
 8012f64:	4618      	mov	r0, r3
 8012f66:	f001 fe75 	bl	8014c54 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f000 fd72 	bl	8013a58 <vPortFree>
			vPortFree( pxTCB );
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 fd6f 	bl	8013a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f7a:	bf00      	nop
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
	...

08012f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012fbc <prvResetNextTaskUnblockTime+0x38>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d104      	bne.n	8012f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012f94:	4b0a      	ldr	r3, [pc, #40]	@ (8012fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8012f96:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012f9c:	e008      	b.n	8012fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f9e:	4b07      	ldr	r3, [pc, #28]	@ (8012fbc <prvResetNextTaskUnblockTime+0x38>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	4a04      	ldr	r2, [pc, #16]	@ (8012fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8012fae:	6013      	str	r3, [r2, #0]
}
 8012fb0:	bf00      	nop
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	20001c48 	.word	0x20001c48
 8012fc0:	20001cb0 	.word	0x20001cb0

08012fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012fca:	4b0b      	ldr	r3, [pc, #44]	@ (8012ff8 <xTaskGetSchedulerState+0x34>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d102      	bne.n	8012fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	607b      	str	r3, [r7, #4]
 8012fd6:	e008      	b.n	8012fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fd8:	4b08      	ldr	r3, [pc, #32]	@ (8012ffc <xTaskGetSchedulerState+0x38>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012fe0:	2302      	movs	r3, #2
 8012fe2:	607b      	str	r3, [r7, #4]
 8012fe4:	e001      	b.n	8012fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012fea:	687b      	ldr	r3, [r7, #4]
	}
 8012fec:	4618      	mov	r0, r3
 8012fee:	370c      	adds	r7, #12
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr
 8012ff8:	20001c9c 	.word	0x20001c9c
 8012ffc:	20001cb8 	.word	0x20001cb8

08013000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801300c:	2300      	movs	r3, #0
 801300e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d05e      	beq.n	80130d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801301a:	4b31      	ldr	r3, [pc, #196]	@ (80130e0 <xTaskPriorityInherit+0xe0>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013020:	429a      	cmp	r2, r3
 8013022:	d24e      	bcs.n	80130c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	699b      	ldr	r3, [r3, #24]
 8013028:	2b00      	cmp	r3, #0
 801302a:	db06      	blt.n	801303a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801302c:	4b2c      	ldr	r3, [pc, #176]	@ (80130e0 <xTaskPriorityInherit+0xe0>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013032:	f1c3 0207 	rsb	r2, r3, #7
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	6959      	ldr	r1, [r3, #20]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013042:	4613      	mov	r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4413      	add	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4a26      	ldr	r2, [pc, #152]	@ (80130e4 <xTaskPriorityInherit+0xe4>)
 801304c:	4413      	add	r3, r2
 801304e:	4299      	cmp	r1, r3
 8013050:	d12f      	bne.n	80130b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	3304      	adds	r3, #4
 8013056:	4618      	mov	r0, r3
 8013058:	f7fe fb33 	bl	80116c2 <uxListRemove>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d10a      	bne.n	8013078 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013066:	2201      	movs	r2, #1
 8013068:	fa02 f303 	lsl.w	r3, r2, r3
 801306c:	43da      	mvns	r2, r3
 801306e:	4b1e      	ldr	r3, [pc, #120]	@ (80130e8 <xTaskPriorityInherit+0xe8>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4013      	ands	r3, r2
 8013074:	4a1c      	ldr	r2, [pc, #112]	@ (80130e8 <xTaskPriorityInherit+0xe8>)
 8013076:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013078:	4b19      	ldr	r3, [pc, #100]	@ (80130e0 <xTaskPriorityInherit+0xe0>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013086:	2201      	movs	r2, #1
 8013088:	409a      	lsls	r2, r3
 801308a:	4b17      	ldr	r3, [pc, #92]	@ (80130e8 <xTaskPriorityInherit+0xe8>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	4313      	orrs	r3, r2
 8013090:	4a15      	ldr	r2, [pc, #84]	@ (80130e8 <xTaskPriorityInherit+0xe8>)
 8013092:	6013      	str	r3, [r2, #0]
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013098:	4613      	mov	r3, r2
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	4413      	add	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4a10      	ldr	r2, [pc, #64]	@ (80130e4 <xTaskPriorityInherit+0xe4>)
 80130a2:	441a      	add	r2, r3
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	3304      	adds	r3, #4
 80130a8:	4619      	mov	r1, r3
 80130aa:	4610      	mov	r0, r2
 80130ac:	f7fe faac 	bl	8011608 <vListInsertEnd>
 80130b0:	e004      	b.n	80130bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80130b2:	4b0b      	ldr	r3, [pc, #44]	@ (80130e0 <xTaskPriorityInherit+0xe0>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80130bc:	2301      	movs	r3, #1
 80130be:	60fb      	str	r3, [r7, #12]
 80130c0:	e008      	b.n	80130d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80130c6:	4b06      	ldr	r3, [pc, #24]	@ (80130e0 <xTaskPriorityInherit+0xe0>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d201      	bcs.n	80130d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80130d0:	2301      	movs	r3, #1
 80130d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80130d4:	68fb      	ldr	r3, [r7, #12]
	}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3710      	adds	r7, #16
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	20001b90 	.word	0x20001b90
 80130e4:	20001b94 	.word	0x20001b94
 80130e8:	20001c98 	.word	0x20001c98

080130ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80130f8:	2300      	movs	r3, #0
 80130fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d070      	beq.n	80131e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013102:	4b3b      	ldr	r3, [pc, #236]	@ (80131f0 <xTaskPriorityDisinherit+0x104>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	693a      	ldr	r2, [r7, #16]
 8013108:	429a      	cmp	r2, r3
 801310a:	d00b      	beq.n	8013124 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013110:	f383 8811 	msr	BASEPRI, r3
 8013114:	f3bf 8f6f 	isb	sy
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	60fb      	str	r3, [r7, #12]
}
 801311e:	bf00      	nop
 8013120:	bf00      	nop
 8013122:	e7fd      	b.n	8013120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013128:	2b00      	cmp	r3, #0
 801312a:	d10b      	bne.n	8013144 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013130:	f383 8811 	msr	BASEPRI, r3
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	f3bf 8f4f 	dsb	sy
 801313c:	60bb      	str	r3, [r7, #8]
}
 801313e:	bf00      	nop
 8013140:	bf00      	nop
 8013142:	e7fd      	b.n	8013140 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013148:	1e5a      	subs	r2, r3, #1
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013156:	429a      	cmp	r2, r3
 8013158:	d044      	beq.n	80131e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801315e:	2b00      	cmp	r3, #0
 8013160:	d140      	bne.n	80131e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	3304      	adds	r3, #4
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe faab 	bl	80116c2 <uxListRemove>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d115      	bne.n	801319e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013176:	491f      	ldr	r1, [pc, #124]	@ (80131f4 <xTaskPriorityDisinherit+0x108>)
 8013178:	4613      	mov	r3, r2
 801317a:	009b      	lsls	r3, r3, #2
 801317c:	4413      	add	r3, r2
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	440b      	add	r3, r1
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d10a      	bne.n	801319e <xTaskPriorityDisinherit+0xb2>
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801318c:	2201      	movs	r2, #1
 801318e:	fa02 f303 	lsl.w	r3, r2, r3
 8013192:	43da      	mvns	r2, r3
 8013194:	4b18      	ldr	r3, [pc, #96]	@ (80131f8 <xTaskPriorityDisinherit+0x10c>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4013      	ands	r3, r2
 801319a:	4a17      	ldr	r2, [pc, #92]	@ (80131f8 <xTaskPriorityDisinherit+0x10c>)
 801319c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131aa:	f1c3 0207 	rsb	r2, r3, #7
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b6:	2201      	movs	r2, #1
 80131b8:	409a      	lsls	r2, r3
 80131ba:	4b0f      	ldr	r3, [pc, #60]	@ (80131f8 <xTaskPriorityDisinherit+0x10c>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4313      	orrs	r3, r2
 80131c0:	4a0d      	ldr	r2, [pc, #52]	@ (80131f8 <xTaskPriorityDisinherit+0x10c>)
 80131c2:	6013      	str	r3, [r2, #0]
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c8:	4613      	mov	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	4a08      	ldr	r2, [pc, #32]	@ (80131f4 <xTaskPriorityDisinherit+0x108>)
 80131d2:	441a      	add	r2, r3
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	3304      	adds	r3, #4
 80131d8:	4619      	mov	r1, r3
 80131da:	4610      	mov	r0, r2
 80131dc:	f7fe fa14 	bl	8011608 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80131e0:	2301      	movs	r3, #1
 80131e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80131e4:	697b      	ldr	r3, [r7, #20]
	}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3718      	adds	r7, #24
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	20001b90 	.word	0x20001b90
 80131f4:	20001b94 	.word	0x20001b94
 80131f8:	20001c98 	.word	0x20001c98

080131fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801320a:	2301      	movs	r3, #1
 801320c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d079      	beq.n	8013308 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013218:	2b00      	cmp	r3, #0
 801321a:	d10b      	bne.n	8013234 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801321c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013220:	f383 8811 	msr	BASEPRI, r3
 8013224:	f3bf 8f6f 	isb	sy
 8013228:	f3bf 8f4f 	dsb	sy
 801322c:	60fb      	str	r3, [r7, #12]
}
 801322e:	bf00      	nop
 8013230:	bf00      	nop
 8013232:	e7fd      	b.n	8013230 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013238:	683a      	ldr	r2, [r7, #0]
 801323a:	429a      	cmp	r2, r3
 801323c:	d902      	bls.n	8013244 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	61fb      	str	r3, [r7, #28]
 8013242:	e002      	b.n	801324a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013248:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801324e:	69fa      	ldr	r2, [r7, #28]
 8013250:	429a      	cmp	r2, r3
 8013252:	d059      	beq.n	8013308 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013258:	697a      	ldr	r2, [r7, #20]
 801325a:	429a      	cmp	r2, r3
 801325c:	d154      	bne.n	8013308 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801325e:	4b2c      	ldr	r3, [pc, #176]	@ (8013310 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	69ba      	ldr	r2, [r7, #24]
 8013264:	429a      	cmp	r2, r3
 8013266:	d10b      	bne.n	8013280 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8013268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326c:	f383 8811 	msr	BASEPRI, r3
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	60bb      	str	r3, [r7, #8]
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013284:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	69fa      	ldr	r2, [r7, #28]
 801328a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	699b      	ldr	r3, [r3, #24]
 8013290:	2b00      	cmp	r3, #0
 8013292:	db04      	blt.n	801329e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	f1c3 0207 	rsb	r2, r3, #7
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	6959      	ldr	r1, [r3, #20]
 80132a2:	693a      	ldr	r2, [r7, #16]
 80132a4:	4613      	mov	r3, r2
 80132a6:	009b      	lsls	r3, r3, #2
 80132a8:	4413      	add	r3, r2
 80132aa:	009b      	lsls	r3, r3, #2
 80132ac:	4a19      	ldr	r2, [pc, #100]	@ (8013314 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80132ae:	4413      	add	r3, r2
 80132b0:	4299      	cmp	r1, r3
 80132b2:	d129      	bne.n	8013308 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	3304      	adds	r3, #4
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fe fa02 	bl	80116c2 <uxListRemove>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d10a      	bne.n	80132da <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132c8:	2201      	movs	r2, #1
 80132ca:	fa02 f303 	lsl.w	r3, r2, r3
 80132ce:	43da      	mvns	r2, r3
 80132d0:	4b11      	ldr	r3, [pc, #68]	@ (8013318 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	4013      	ands	r3, r2
 80132d6:	4a10      	ldr	r2, [pc, #64]	@ (8013318 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80132d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80132da:	69bb      	ldr	r3, [r7, #24]
 80132dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132de:	2201      	movs	r2, #1
 80132e0:	409a      	lsls	r2, r3
 80132e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013318 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	4313      	orrs	r3, r2
 80132e8:	4a0b      	ldr	r2, [pc, #44]	@ (8013318 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80132ea:	6013      	str	r3, [r2, #0]
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132f0:	4613      	mov	r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	4413      	add	r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	4a06      	ldr	r2, [pc, #24]	@ (8013314 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80132fa:	441a      	add	r2, r3
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	3304      	adds	r3, #4
 8013300:	4619      	mov	r1, r3
 8013302:	4610      	mov	r0, r2
 8013304:	f7fe f980 	bl	8011608 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013308:	bf00      	nop
 801330a:	3720      	adds	r7, #32
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	20001b90 	.word	0x20001b90
 8013314:	20001b94 	.word	0x20001b94
 8013318:	20001c98 	.word	0x20001c98

0801331c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801331c:	b480      	push	{r7}
 801331e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013320:	4b07      	ldr	r3, [pc, #28]	@ (8013340 <pvTaskIncrementMutexHeldCount+0x24>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d004      	beq.n	8013332 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013328:	4b05      	ldr	r3, [pc, #20]	@ (8013340 <pvTaskIncrementMutexHeldCount+0x24>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801332e:	3201      	adds	r2, #1
 8013330:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8013332:	4b03      	ldr	r3, [pc, #12]	@ (8013340 <pvTaskIncrementMutexHeldCount+0x24>)
 8013334:	681b      	ldr	r3, [r3, #0]
	}
 8013336:	4618      	mov	r0, r3
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr
 8013340:	20001b90 	.word	0x20001b90

08013344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801334e:	4b29      	ldr	r3, [pc, #164]	@ (80133f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013354:	4b28      	ldr	r3, [pc, #160]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	3304      	adds	r3, #4
 801335a:	4618      	mov	r0, r3
 801335c:	f7fe f9b1 	bl	80116c2 <uxListRemove>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d10b      	bne.n	801337e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013366:	4b24      	ldr	r3, [pc, #144]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801336c:	2201      	movs	r2, #1
 801336e:	fa02 f303 	lsl.w	r3, r2, r3
 8013372:	43da      	mvns	r2, r3
 8013374:	4b21      	ldr	r3, [pc, #132]	@ (80133fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	4013      	ands	r3, r2
 801337a:	4a20      	ldr	r2, [pc, #128]	@ (80133fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801337c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013384:	d10a      	bne.n	801339c <prvAddCurrentTaskToDelayedList+0x58>
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d007      	beq.n	801339c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801338c:	4b1a      	ldr	r3, [pc, #104]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	3304      	adds	r3, #4
 8013392:	4619      	mov	r1, r3
 8013394:	481a      	ldr	r0, [pc, #104]	@ (8013400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013396:	f7fe f937 	bl	8011608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801339a:	e026      	b.n	80133ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801339c:	68fa      	ldr	r2, [r7, #12]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4413      	add	r3, r2
 80133a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80133a4:	4b14      	ldr	r3, [pc, #80]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	68ba      	ldr	r2, [r7, #8]
 80133aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d209      	bcs.n	80133c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80133b4:	4b13      	ldr	r3, [pc, #76]	@ (8013404 <prvAddCurrentTaskToDelayedList+0xc0>)
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	4b0f      	ldr	r3, [pc, #60]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	3304      	adds	r3, #4
 80133be:	4619      	mov	r1, r3
 80133c0:	4610      	mov	r0, r2
 80133c2:	f7fe f945 	bl	8011650 <vListInsert>
}
 80133c6:	e010      	b.n	80133ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80133c8:	4b0f      	ldr	r3, [pc, #60]	@ (8013408 <prvAddCurrentTaskToDelayedList+0xc4>)
 80133ca:	681a      	ldr	r2, [r3, #0]
 80133cc:	4b0a      	ldr	r3, [pc, #40]	@ (80133f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	3304      	adds	r3, #4
 80133d2:	4619      	mov	r1, r3
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7fe f93b 	bl	8011650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80133da:	4b0c      	ldr	r3, [pc, #48]	@ (801340c <prvAddCurrentTaskToDelayedList+0xc8>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d202      	bcs.n	80133ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80133e4:	4a09      	ldr	r2, [pc, #36]	@ (801340c <prvAddCurrentTaskToDelayedList+0xc8>)
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	6013      	str	r3, [r2, #0]
}
 80133ea:	bf00      	nop
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	20001c94 	.word	0x20001c94
 80133f8:	20001b90 	.word	0x20001b90
 80133fc:	20001c98 	.word	0x20001c98
 8013400:	20001c7c 	.word	0x20001c7c
 8013404:	20001c4c 	.word	0x20001c4c
 8013408:	20001c48 	.word	0x20001c48
 801340c:	20001cb0 	.word	0x20001cb0

08013410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013410:	b480      	push	{r7}
 8013412:	b085      	sub	sp, #20
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	3b04      	subs	r3, #4
 8013420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	3b04      	subs	r3, #4
 801342e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	f023 0201 	bic.w	r2, r3, #1
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	3b04      	subs	r3, #4
 801343e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013440:	4a0c      	ldr	r2, [pc, #48]	@ (8013474 <pxPortInitialiseStack+0x64>)
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	3b14      	subs	r3, #20
 801344a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801344c:	687a      	ldr	r2, [r7, #4]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	3b04      	subs	r3, #4
 8013456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f06f 0202 	mvn.w	r2, #2
 801345e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	3b20      	subs	r3, #32
 8013464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013466:	68fb      	ldr	r3, [r7, #12]
}
 8013468:	4618      	mov	r0, r3
 801346a:	3714      	adds	r7, #20
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr
 8013474:	08013479 	.word	0x08013479

08013478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013482:	4b13      	ldr	r3, [pc, #76]	@ (80134d0 <prvTaskExitError+0x58>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801348a:	d00b      	beq.n	80134a4 <prvTaskExitError+0x2c>
	__asm volatile
 801348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013490:	f383 8811 	msr	BASEPRI, r3
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	f3bf 8f4f 	dsb	sy
 801349c:	60fb      	str	r3, [r7, #12]
}
 801349e:	bf00      	nop
 80134a0:	bf00      	nop
 80134a2:	e7fd      	b.n	80134a0 <prvTaskExitError+0x28>
	__asm volatile
 80134a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a8:	f383 8811 	msr	BASEPRI, r3
 80134ac:	f3bf 8f6f 	isb	sy
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	60bb      	str	r3, [r7, #8]
}
 80134b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80134b8:	bf00      	nop
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d0fc      	beq.n	80134ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80134c0:	bf00      	nop
 80134c2:	bf00      	nop
 80134c4:	3714      	adds	r7, #20
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop
 80134d0:	20000044 	.word	0x20000044
	...

080134e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80134e0:	4b07      	ldr	r3, [pc, #28]	@ (8013500 <pxCurrentTCBConst2>)
 80134e2:	6819      	ldr	r1, [r3, #0]
 80134e4:	6808      	ldr	r0, [r1, #0]
 80134e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ea:	f380 8809 	msr	PSP, r0
 80134ee:	f3bf 8f6f 	isb	sy
 80134f2:	f04f 0000 	mov.w	r0, #0
 80134f6:	f380 8811 	msr	BASEPRI, r0
 80134fa:	4770      	bx	lr
 80134fc:	f3af 8000 	nop.w

08013500 <pxCurrentTCBConst2>:
 8013500:	20001b90 	.word	0x20001b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013504:	bf00      	nop
 8013506:	bf00      	nop

08013508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013508:	4808      	ldr	r0, [pc, #32]	@ (801352c <prvPortStartFirstTask+0x24>)
 801350a:	6800      	ldr	r0, [r0, #0]
 801350c:	6800      	ldr	r0, [r0, #0]
 801350e:	f380 8808 	msr	MSP, r0
 8013512:	f04f 0000 	mov.w	r0, #0
 8013516:	f380 8814 	msr	CONTROL, r0
 801351a:	b662      	cpsie	i
 801351c:	b661      	cpsie	f
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	f3bf 8f6f 	isb	sy
 8013526:	df00      	svc	0
 8013528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801352a:	bf00      	nop
 801352c:	e000ed08 	.word	0xe000ed08

08013530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013536:	4b47      	ldr	r3, [pc, #284]	@ (8013654 <xPortStartScheduler+0x124>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4a47      	ldr	r2, [pc, #284]	@ (8013658 <xPortStartScheduler+0x128>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d10b      	bne.n	8013558 <xPortStartScheduler+0x28>
	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	60fb      	str	r3, [r7, #12]
}
 8013552:	bf00      	nop
 8013554:	bf00      	nop
 8013556:	e7fd      	b.n	8013554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013558:	4b3e      	ldr	r3, [pc, #248]	@ (8013654 <xPortStartScheduler+0x124>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a3f      	ldr	r2, [pc, #252]	@ (801365c <xPortStartScheduler+0x12c>)
 801355e:	4293      	cmp	r3, r2
 8013560:	d10b      	bne.n	801357a <xPortStartScheduler+0x4a>
	__asm volatile
 8013562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013566:	f383 8811 	msr	BASEPRI, r3
 801356a:	f3bf 8f6f 	isb	sy
 801356e:	f3bf 8f4f 	dsb	sy
 8013572:	613b      	str	r3, [r7, #16]
}
 8013574:	bf00      	nop
 8013576:	bf00      	nop
 8013578:	e7fd      	b.n	8013576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801357a:	4b39      	ldr	r3, [pc, #228]	@ (8013660 <xPortStartScheduler+0x130>)
 801357c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	b2db      	uxtb	r3, r3
 8013584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	22ff      	movs	r2, #255	@ 0xff
 801358a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	b2db      	uxtb	r3, r3
 8013592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013594:	78fb      	ldrb	r3, [r7, #3]
 8013596:	b2db      	uxtb	r3, r3
 8013598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801359c:	b2da      	uxtb	r2, r3
 801359e:	4b31      	ldr	r3, [pc, #196]	@ (8013664 <xPortStartScheduler+0x134>)
 80135a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80135a2:	4b31      	ldr	r3, [pc, #196]	@ (8013668 <xPortStartScheduler+0x138>)
 80135a4:	2207      	movs	r2, #7
 80135a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80135a8:	e009      	b.n	80135be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80135aa:	4b2f      	ldr	r3, [pc, #188]	@ (8013668 <xPortStartScheduler+0x138>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	3b01      	subs	r3, #1
 80135b0:	4a2d      	ldr	r2, [pc, #180]	@ (8013668 <xPortStartScheduler+0x138>)
 80135b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80135b4:	78fb      	ldrb	r3, [r7, #3]
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80135be:	78fb      	ldrb	r3, [r7, #3]
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135c6:	2b80      	cmp	r3, #128	@ 0x80
 80135c8:	d0ef      	beq.n	80135aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80135ca:	4b27      	ldr	r3, [pc, #156]	@ (8013668 <xPortStartScheduler+0x138>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f1c3 0307 	rsb	r3, r3, #7
 80135d2:	2b04      	cmp	r3, #4
 80135d4:	d00b      	beq.n	80135ee <xPortStartScheduler+0xbe>
	__asm volatile
 80135d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	60bb      	str	r3, [r7, #8]
}
 80135e8:	bf00      	nop
 80135ea:	bf00      	nop
 80135ec:	e7fd      	b.n	80135ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80135ee:	4b1e      	ldr	r3, [pc, #120]	@ (8013668 <xPortStartScheduler+0x138>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	021b      	lsls	r3, r3, #8
 80135f4:	4a1c      	ldr	r2, [pc, #112]	@ (8013668 <xPortStartScheduler+0x138>)
 80135f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80135f8:	4b1b      	ldr	r3, [pc, #108]	@ (8013668 <xPortStartScheduler+0x138>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013600:	4a19      	ldr	r2, [pc, #100]	@ (8013668 <xPortStartScheduler+0x138>)
 8013602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	b2da      	uxtb	r2, r3
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801360c:	4b17      	ldr	r3, [pc, #92]	@ (801366c <xPortStartScheduler+0x13c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4a16      	ldr	r2, [pc, #88]	@ (801366c <xPortStartScheduler+0x13c>)
 8013612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013618:	4b14      	ldr	r3, [pc, #80]	@ (801366c <xPortStartScheduler+0x13c>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4a13      	ldr	r2, [pc, #76]	@ (801366c <xPortStartScheduler+0x13c>)
 801361e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013624:	f000 f8da 	bl	80137dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013628:	4b11      	ldr	r3, [pc, #68]	@ (8013670 <xPortStartScheduler+0x140>)
 801362a:	2200      	movs	r2, #0
 801362c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801362e:	f000 f8f9 	bl	8013824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013632:	4b10      	ldr	r3, [pc, #64]	@ (8013674 <xPortStartScheduler+0x144>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	4a0f      	ldr	r2, [pc, #60]	@ (8013674 <xPortStartScheduler+0x144>)
 8013638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801363c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801363e:	f7ff ff63 	bl	8013508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013642:	f7ff fa57 	bl	8012af4 <vTaskSwitchContext>
	prvTaskExitError();
 8013646:	f7ff ff17 	bl	8013478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801364a:	2300      	movs	r3, #0
}
 801364c:	4618      	mov	r0, r3
 801364e:	3718      	adds	r7, #24
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	e000ed00 	.word	0xe000ed00
 8013658:	410fc271 	.word	0x410fc271
 801365c:	410fc270 	.word	0x410fc270
 8013660:	e000e400 	.word	0xe000e400
 8013664:	20001cbc 	.word	0x20001cbc
 8013668:	20001cc0 	.word	0x20001cc0
 801366c:	e000ed20 	.word	0xe000ed20
 8013670:	20000044 	.word	0x20000044
 8013674:	e000ef34 	.word	0xe000ef34

08013678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
	__asm volatile
 801367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	607b      	str	r3, [r7, #4]
}
 8013690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013692:	4b10      	ldr	r3, [pc, #64]	@ (80136d4 <vPortEnterCritical+0x5c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	3301      	adds	r3, #1
 8013698:	4a0e      	ldr	r2, [pc, #56]	@ (80136d4 <vPortEnterCritical+0x5c>)
 801369a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801369c:	4b0d      	ldr	r3, [pc, #52]	@ (80136d4 <vPortEnterCritical+0x5c>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d110      	bne.n	80136c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80136a4:	4b0c      	ldr	r3, [pc, #48]	@ (80136d8 <vPortEnterCritical+0x60>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00b      	beq.n	80136c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80136ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b2:	f383 8811 	msr	BASEPRI, r3
 80136b6:	f3bf 8f6f 	isb	sy
 80136ba:	f3bf 8f4f 	dsb	sy
 80136be:	603b      	str	r3, [r7, #0]
}
 80136c0:	bf00      	nop
 80136c2:	bf00      	nop
 80136c4:	e7fd      	b.n	80136c2 <vPortEnterCritical+0x4a>
	}
}
 80136c6:	bf00      	nop
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	20000044 	.word	0x20000044
 80136d8:	e000ed04 	.word	0xe000ed04

080136dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80136e2:	4b12      	ldr	r3, [pc, #72]	@ (801372c <vPortExitCritical+0x50>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d10b      	bne.n	8013702 <vPortExitCritical+0x26>
	__asm volatile
 80136ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ee:	f383 8811 	msr	BASEPRI, r3
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	f3bf 8f4f 	dsb	sy
 80136fa:	607b      	str	r3, [r7, #4]
}
 80136fc:	bf00      	nop
 80136fe:	bf00      	nop
 8013700:	e7fd      	b.n	80136fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013702:	4b0a      	ldr	r3, [pc, #40]	@ (801372c <vPortExitCritical+0x50>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	3b01      	subs	r3, #1
 8013708:	4a08      	ldr	r2, [pc, #32]	@ (801372c <vPortExitCritical+0x50>)
 801370a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801370c:	4b07      	ldr	r3, [pc, #28]	@ (801372c <vPortExitCritical+0x50>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d105      	bne.n	8013720 <vPortExitCritical+0x44>
 8013714:	2300      	movs	r3, #0
 8013716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	f383 8811 	msr	BASEPRI, r3
}
 801371e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013720:	bf00      	nop
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	20000044 	.word	0x20000044

08013730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013730:	f3ef 8009 	mrs	r0, PSP
 8013734:	f3bf 8f6f 	isb	sy
 8013738:	4b15      	ldr	r3, [pc, #84]	@ (8013790 <pxCurrentTCBConst>)
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	f01e 0f10 	tst.w	lr, #16
 8013740:	bf08      	it	eq
 8013742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801374a:	6010      	str	r0, [r2, #0]
 801374c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013754:	f380 8811 	msr	BASEPRI, r0
 8013758:	f3bf 8f4f 	dsb	sy
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f7ff f9c8 	bl	8012af4 <vTaskSwitchContext>
 8013764:	f04f 0000 	mov.w	r0, #0
 8013768:	f380 8811 	msr	BASEPRI, r0
 801376c:	bc09      	pop	{r0, r3}
 801376e:	6819      	ldr	r1, [r3, #0]
 8013770:	6808      	ldr	r0, [r1, #0]
 8013772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013776:	f01e 0f10 	tst.w	lr, #16
 801377a:	bf08      	it	eq
 801377c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013780:	f380 8809 	msr	PSP, r0
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	f3af 8000 	nop.w

08013790 <pxCurrentTCBConst>:
 8013790:	20001b90 	.word	0x20001b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013794:	bf00      	nop
 8013796:	bf00      	nop

08013798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
	__asm volatile
 801379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	607b      	str	r3, [r7, #4]
}
 80137b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80137b2:	f7ff f8e5 	bl	8012980 <xTaskIncrementTick>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d003      	beq.n	80137c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80137bc:	4b06      	ldr	r3, [pc, #24]	@ (80137d8 <SysTick_Handler+0x40>)
 80137be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137c2:	601a      	str	r2, [r3, #0]
 80137c4:	2300      	movs	r3, #0
 80137c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	f383 8811 	msr	BASEPRI, r3
}
 80137ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80137d0:	bf00      	nop
 80137d2:	3708      	adds	r7, #8
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	e000ed04 	.word	0xe000ed04

080137dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80137dc:	b480      	push	{r7}
 80137de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80137e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013810 <vPortSetupTimerInterrupt+0x34>)
 80137e2:	2200      	movs	r2, #0
 80137e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80137e6:	4b0b      	ldr	r3, [pc, #44]	@ (8013814 <vPortSetupTimerInterrupt+0x38>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80137ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013818 <vPortSetupTimerInterrupt+0x3c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a0a      	ldr	r2, [pc, #40]	@ (801381c <vPortSetupTimerInterrupt+0x40>)
 80137f2:	fba2 2303 	umull	r2, r3, r2, r3
 80137f6:	099b      	lsrs	r3, r3, #6
 80137f8:	4a09      	ldr	r2, [pc, #36]	@ (8013820 <vPortSetupTimerInterrupt+0x44>)
 80137fa:	3b01      	subs	r3, #1
 80137fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80137fe:	4b04      	ldr	r3, [pc, #16]	@ (8013810 <vPortSetupTimerInterrupt+0x34>)
 8013800:	2207      	movs	r2, #7
 8013802:	601a      	str	r2, [r3, #0]
}
 8013804:	bf00      	nop
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	e000e010 	.word	0xe000e010
 8013814:	e000e018 	.word	0xe000e018
 8013818:	20000020 	.word	0x20000020
 801381c:	10624dd3 	.word	0x10624dd3
 8013820:	e000e014 	.word	0xe000e014

08013824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013834 <vPortEnableVFP+0x10>
 8013828:	6801      	ldr	r1, [r0, #0]
 801382a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801382e:	6001      	str	r1, [r0, #0]
 8013830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013832:	bf00      	nop
 8013834:	e000ed88 	.word	0xe000ed88

08013838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013838:	b480      	push	{r7}
 801383a:	b085      	sub	sp, #20
 801383c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801383e:	f3ef 8305 	mrs	r3, IPSR
 8013842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2b0f      	cmp	r3, #15
 8013848:	d915      	bls.n	8013876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801384a:	4a18      	ldr	r2, [pc, #96]	@ (80138ac <vPortValidateInterruptPriority+0x74>)
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	4413      	add	r3, r2
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013854:	4b16      	ldr	r3, [pc, #88]	@ (80138b0 <vPortValidateInterruptPriority+0x78>)
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	7afa      	ldrb	r2, [r7, #11]
 801385a:	429a      	cmp	r2, r3
 801385c:	d20b      	bcs.n	8013876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013862:	f383 8811 	msr	BASEPRI, r3
 8013866:	f3bf 8f6f 	isb	sy
 801386a:	f3bf 8f4f 	dsb	sy
 801386e:	607b      	str	r3, [r7, #4]
}
 8013870:	bf00      	nop
 8013872:	bf00      	nop
 8013874:	e7fd      	b.n	8013872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013876:	4b0f      	ldr	r3, [pc, #60]	@ (80138b4 <vPortValidateInterruptPriority+0x7c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801387e:	4b0e      	ldr	r3, [pc, #56]	@ (80138b8 <vPortValidateInterruptPriority+0x80>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	429a      	cmp	r2, r3
 8013884:	d90b      	bls.n	801389e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801388a:	f383 8811 	msr	BASEPRI, r3
 801388e:	f3bf 8f6f 	isb	sy
 8013892:	f3bf 8f4f 	dsb	sy
 8013896:	603b      	str	r3, [r7, #0]
}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	e7fd      	b.n	801389a <vPortValidateInterruptPriority+0x62>
	}
 801389e:	bf00      	nop
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	e000e3f0 	.word	0xe000e3f0
 80138b0:	20001cbc 	.word	0x20001cbc
 80138b4:	e000ed0c 	.word	0xe000ed0c
 80138b8:	20001cc0 	.word	0x20001cc0

080138bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b08a      	sub	sp, #40	@ 0x28
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80138c4:	2300      	movs	r3, #0
 80138c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80138c8:	f7fe ff9e 	bl	8012808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80138cc:	4b5c      	ldr	r3, [pc, #368]	@ (8013a40 <pvPortMalloc+0x184>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d101      	bne.n	80138d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80138d4:	f000 f924 	bl	8013b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80138d8:	4b5a      	ldr	r3, [pc, #360]	@ (8013a44 <pvPortMalloc+0x188>)
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4013      	ands	r3, r2
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f040 8095 	bne.w	8013a10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d01e      	beq.n	801392a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80138ec:	2208      	movs	r2, #8
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4413      	add	r3, r2
 80138f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f003 0307 	and.w	r3, r3, #7
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d015      	beq.n	801392a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f023 0307 	bic.w	r3, r3, #7
 8013904:	3308      	adds	r3, #8
 8013906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f003 0307 	and.w	r3, r3, #7
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00b      	beq.n	801392a <pvPortMalloc+0x6e>
	__asm volatile
 8013912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	617b      	str	r3, [r7, #20]
}
 8013924:	bf00      	nop
 8013926:	bf00      	nop
 8013928:	e7fd      	b.n	8013926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d06f      	beq.n	8013a10 <pvPortMalloc+0x154>
 8013930:	4b45      	ldr	r3, [pc, #276]	@ (8013a48 <pvPortMalloc+0x18c>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	429a      	cmp	r2, r3
 8013938:	d86a      	bhi.n	8013a10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801393a:	4b44      	ldr	r3, [pc, #272]	@ (8013a4c <pvPortMalloc+0x190>)
 801393c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801393e:	4b43      	ldr	r3, [pc, #268]	@ (8013a4c <pvPortMalloc+0x190>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013944:	e004      	b.n	8013950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	687a      	ldr	r2, [r7, #4]
 8013956:	429a      	cmp	r2, r3
 8013958:	d903      	bls.n	8013962 <pvPortMalloc+0xa6>
 801395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d1f1      	bne.n	8013946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013962:	4b37      	ldr	r3, [pc, #220]	@ (8013a40 <pvPortMalloc+0x184>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013968:	429a      	cmp	r2, r3
 801396a:	d051      	beq.n	8013a10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801396c:	6a3b      	ldr	r3, [r7, #32]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2208      	movs	r2, #8
 8013972:	4413      	add	r3, r2
 8013974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	1ad2      	subs	r2, r2, r3
 8013986:	2308      	movs	r3, #8
 8013988:	005b      	lsls	r3, r3, #1
 801398a:	429a      	cmp	r2, r3
 801398c:	d920      	bls.n	80139d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4413      	add	r3, r2
 8013994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	f003 0307 	and.w	r3, r3, #7
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00b      	beq.n	80139b8 <pvPortMalloc+0xfc>
	__asm volatile
 80139a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a4:	f383 8811 	msr	BASEPRI, r3
 80139a8:	f3bf 8f6f 	isb	sy
 80139ac:	f3bf 8f4f 	dsb	sy
 80139b0:	613b      	str	r3, [r7, #16]
}
 80139b2:	bf00      	nop
 80139b4:	bf00      	nop
 80139b6:	e7fd      	b.n	80139b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80139b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ba:	685a      	ldr	r2, [r3, #4]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	1ad2      	subs	r2, r2, r3
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80139c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c6:	687a      	ldr	r2, [r7, #4]
 80139c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80139ca:	69b8      	ldr	r0, [r7, #24]
 80139cc:	f000 f90a 	bl	8013be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80139d0:	4b1d      	ldr	r3, [pc, #116]	@ (8013a48 <pvPortMalloc+0x18c>)
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	1ad3      	subs	r3, r2, r3
 80139da:	4a1b      	ldr	r2, [pc, #108]	@ (8013a48 <pvPortMalloc+0x18c>)
 80139dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80139de:	4b1a      	ldr	r3, [pc, #104]	@ (8013a48 <pvPortMalloc+0x18c>)
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	4b1b      	ldr	r3, [pc, #108]	@ (8013a50 <pvPortMalloc+0x194>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d203      	bcs.n	80139f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80139ea:	4b17      	ldr	r3, [pc, #92]	@ (8013a48 <pvPortMalloc+0x18c>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	4a18      	ldr	r2, [pc, #96]	@ (8013a50 <pvPortMalloc+0x194>)
 80139f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80139f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	4b13      	ldr	r3, [pc, #76]	@ (8013a44 <pvPortMalloc+0x188>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	431a      	orrs	r2, r3
 80139fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a02:	2200      	movs	r2, #0
 8013a04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013a06:	4b13      	ldr	r3, [pc, #76]	@ (8013a54 <pvPortMalloc+0x198>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	4a11      	ldr	r2, [pc, #68]	@ (8013a54 <pvPortMalloc+0x198>)
 8013a0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013a10:	f7fe ff08 	bl	8012824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	f003 0307 	and.w	r3, r3, #7
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00b      	beq.n	8013a36 <pvPortMalloc+0x17a>
	__asm volatile
 8013a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	60fb      	str	r3, [r7, #12]
}
 8013a30:	bf00      	nop
 8013a32:	bf00      	nop
 8013a34:	e7fd      	b.n	8013a32 <pvPortMalloc+0x176>
	return pvReturn;
 8013a36:	69fb      	ldr	r3, [r7, #28]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3728      	adds	r7, #40	@ 0x28
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20004bac 	.word	0x20004bac
 8013a44:	20004bc0 	.word	0x20004bc0
 8013a48:	20004bb0 	.word	0x20004bb0
 8013a4c:	20004ba4 	.word	0x20004ba4
 8013a50:	20004bb4 	.word	0x20004bb4
 8013a54:	20004bb8 	.word	0x20004bb8

08013a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b086      	sub	sp, #24
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d04f      	beq.n	8013b0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013a6a:	2308      	movs	r3, #8
 8013a6c:	425b      	negs	r3, r3
 8013a6e:	697a      	ldr	r2, [r7, #20]
 8013a70:	4413      	add	r3, r2
 8013a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	685a      	ldr	r2, [r3, #4]
 8013a7c:	4b25      	ldr	r3, [pc, #148]	@ (8013b14 <vPortFree+0xbc>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4013      	ands	r3, r2
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d10b      	bne.n	8013a9e <vPortFree+0x46>
	__asm volatile
 8013a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a8a:	f383 8811 	msr	BASEPRI, r3
 8013a8e:	f3bf 8f6f 	isb	sy
 8013a92:	f3bf 8f4f 	dsb	sy
 8013a96:	60fb      	str	r3, [r7, #12]
}
 8013a98:	bf00      	nop
 8013a9a:	bf00      	nop
 8013a9c:	e7fd      	b.n	8013a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d00b      	beq.n	8013abe <vPortFree+0x66>
	__asm volatile
 8013aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aaa:	f383 8811 	msr	BASEPRI, r3
 8013aae:	f3bf 8f6f 	isb	sy
 8013ab2:	f3bf 8f4f 	dsb	sy
 8013ab6:	60bb      	str	r3, [r7, #8]
}
 8013ab8:	bf00      	nop
 8013aba:	bf00      	nop
 8013abc:	e7fd      	b.n	8013aba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	685a      	ldr	r2, [r3, #4]
 8013ac2:	4b14      	ldr	r3, [pc, #80]	@ (8013b14 <vPortFree+0xbc>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d01e      	beq.n	8013b0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d11a      	bne.n	8013b0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	685a      	ldr	r2, [r3, #4]
 8013ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8013b14 <vPortFree+0xbc>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	43db      	mvns	r3, r3
 8013ade:	401a      	ands	r2, r3
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ae4:	f7fe fe90 	bl	8012808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	685a      	ldr	r2, [r3, #4]
 8013aec:	4b0a      	ldr	r3, [pc, #40]	@ (8013b18 <vPortFree+0xc0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4413      	add	r3, r2
 8013af2:	4a09      	ldr	r2, [pc, #36]	@ (8013b18 <vPortFree+0xc0>)
 8013af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013af6:	6938      	ldr	r0, [r7, #16]
 8013af8:	f000 f874 	bl	8013be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013afc:	4b07      	ldr	r3, [pc, #28]	@ (8013b1c <vPortFree+0xc4>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	3301      	adds	r3, #1
 8013b02:	4a06      	ldr	r2, [pc, #24]	@ (8013b1c <vPortFree+0xc4>)
 8013b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013b06:	f7fe fe8d 	bl	8012824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013b0a:	bf00      	nop
 8013b0c:	3718      	adds	r7, #24
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	20004bc0 	.word	0x20004bc0
 8013b18:	20004bb0 	.word	0x20004bb0
 8013b1c:	20004bbc 	.word	0x20004bbc

08013b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013b20:	b480      	push	{r7}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013b26:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8013b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013b2c:	4b27      	ldr	r3, [pc, #156]	@ (8013bcc <prvHeapInit+0xac>)
 8013b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f003 0307 	and.w	r3, r3, #7
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00c      	beq.n	8013b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	3307      	adds	r3, #7
 8013b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f023 0307 	bic.w	r3, r3, #7
 8013b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013b48:	68ba      	ldr	r2, [r7, #8]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8013bcc <prvHeapInit+0xac>)
 8013b50:	4413      	add	r3, r2
 8013b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013b58:	4a1d      	ldr	r2, [pc, #116]	@ (8013bd0 <prvHeapInit+0xb0>)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8013bd0 <prvHeapInit+0xb0>)
 8013b60:	2200      	movs	r2, #0
 8013b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	4413      	add	r3, r2
 8013b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013b6c:	2208      	movs	r2, #8
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	1a9b      	subs	r3, r3, r2
 8013b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f023 0307 	bic.w	r3, r3, #7
 8013b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	4a15      	ldr	r2, [pc, #84]	@ (8013bd4 <prvHeapInit+0xb4>)
 8013b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013b82:	4b14      	ldr	r3, [pc, #80]	@ (8013bd4 <prvHeapInit+0xb4>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2200      	movs	r2, #0
 8013b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013b8a:	4b12      	ldr	r3, [pc, #72]	@ (8013bd4 <prvHeapInit+0xb4>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	1ad2      	subs	r2, r2, r3
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8013bd4 <prvHeapInit+0xb4>)
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	4a0a      	ldr	r2, [pc, #40]	@ (8013bd8 <prvHeapInit+0xb8>)
 8013bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	4a09      	ldr	r2, [pc, #36]	@ (8013bdc <prvHeapInit+0xbc>)
 8013bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013bb8:	4b09      	ldr	r3, [pc, #36]	@ (8013be0 <prvHeapInit+0xc0>)
 8013bba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013bbe:	601a      	str	r2, [r3, #0]
}
 8013bc0:	bf00      	nop
 8013bc2:	3714      	adds	r7, #20
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr
 8013bcc:	20001cc4 	.word	0x20001cc4
 8013bd0:	20004ba4 	.word	0x20004ba4
 8013bd4:	20004bac 	.word	0x20004bac
 8013bd8:	20004bb4 	.word	0x20004bb4
 8013bdc:	20004bb0 	.word	0x20004bb0
 8013be0:	20004bc0 	.word	0x20004bc0

08013be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013be4:	b480      	push	{r7}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013bec:	4b28      	ldr	r3, [pc, #160]	@ (8013c90 <prvInsertBlockIntoFreeList+0xac>)
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	e002      	b.n	8013bf8 <prvInsertBlockIntoFreeList+0x14>
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d8f7      	bhi.n	8013bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	4413      	add	r3, r2
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d108      	bne.n	8013c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	685a      	ldr	r2, [r3, #4]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	441a      	add	r2, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	68ba      	ldr	r2, [r7, #8]
 8013c30:	441a      	add	r2, r3
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d118      	bne.n	8013c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	4b15      	ldr	r3, [pc, #84]	@ (8013c94 <prvInsertBlockIntoFreeList+0xb0>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d00d      	beq.n	8013c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	441a      	add	r2, r3
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	601a      	str	r2, [r3, #0]
 8013c60:	e008      	b.n	8013c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013c62:	4b0c      	ldr	r3, [pc, #48]	@ (8013c94 <prvInsertBlockIntoFreeList+0xb0>)
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	601a      	str	r2, [r3, #0]
 8013c6a:	e003      	b.n	8013c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d002      	beq.n	8013c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c82:	bf00      	nop
 8013c84:	3714      	adds	r7, #20
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	20004ba4 	.word	0x20004ba4
 8013c94:	20004bac 	.word	0x20004bac

08013c98 <__cvt>:
 8013c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c9c:	ec57 6b10 	vmov	r6, r7, d0
 8013ca0:	2f00      	cmp	r7, #0
 8013ca2:	460c      	mov	r4, r1
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	463b      	mov	r3, r7
 8013ca8:	bfbb      	ittet	lt
 8013caa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013cae:	461f      	movlt	r7, r3
 8013cb0:	2300      	movge	r3, #0
 8013cb2:	232d      	movlt	r3, #45	@ 0x2d
 8013cb4:	700b      	strb	r3, [r1, #0]
 8013cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013cbc:	4691      	mov	r9, r2
 8013cbe:	f023 0820 	bic.w	r8, r3, #32
 8013cc2:	bfbc      	itt	lt
 8013cc4:	4632      	movlt	r2, r6
 8013cc6:	4616      	movlt	r6, r2
 8013cc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013ccc:	d005      	beq.n	8013cda <__cvt+0x42>
 8013cce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013cd2:	d100      	bne.n	8013cd6 <__cvt+0x3e>
 8013cd4:	3401      	adds	r4, #1
 8013cd6:	2102      	movs	r1, #2
 8013cd8:	e000      	b.n	8013cdc <__cvt+0x44>
 8013cda:	2103      	movs	r1, #3
 8013cdc:	ab03      	add	r3, sp, #12
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	ab02      	add	r3, sp, #8
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	ec47 6b10 	vmov	d0, r6, r7
 8013ce8:	4653      	mov	r3, sl
 8013cea:	4622      	mov	r2, r4
 8013cec:	f001 f910 	bl	8014f10 <_dtoa_r>
 8013cf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	d119      	bne.n	8013d2c <__cvt+0x94>
 8013cf8:	f019 0f01 	tst.w	r9, #1
 8013cfc:	d00e      	beq.n	8013d1c <__cvt+0x84>
 8013cfe:	eb00 0904 	add.w	r9, r0, r4
 8013d02:	2200      	movs	r2, #0
 8013d04:	2300      	movs	r3, #0
 8013d06:	4630      	mov	r0, r6
 8013d08:	4639      	mov	r1, r7
 8013d0a:	f7ec ff05 	bl	8000b18 <__aeabi_dcmpeq>
 8013d0e:	b108      	cbz	r0, 8013d14 <__cvt+0x7c>
 8013d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8013d14:	2230      	movs	r2, #48	@ 0x30
 8013d16:	9b03      	ldr	r3, [sp, #12]
 8013d18:	454b      	cmp	r3, r9
 8013d1a:	d31e      	bcc.n	8013d5a <__cvt+0xc2>
 8013d1c:	9b03      	ldr	r3, [sp, #12]
 8013d1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d20:	1b5b      	subs	r3, r3, r5
 8013d22:	4628      	mov	r0, r5
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	b004      	add	sp, #16
 8013d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013d30:	eb00 0904 	add.w	r9, r0, r4
 8013d34:	d1e5      	bne.n	8013d02 <__cvt+0x6a>
 8013d36:	7803      	ldrb	r3, [r0, #0]
 8013d38:	2b30      	cmp	r3, #48	@ 0x30
 8013d3a:	d10a      	bne.n	8013d52 <__cvt+0xba>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	2300      	movs	r3, #0
 8013d40:	4630      	mov	r0, r6
 8013d42:	4639      	mov	r1, r7
 8013d44:	f7ec fee8 	bl	8000b18 <__aeabi_dcmpeq>
 8013d48:	b918      	cbnz	r0, 8013d52 <__cvt+0xba>
 8013d4a:	f1c4 0401 	rsb	r4, r4, #1
 8013d4e:	f8ca 4000 	str.w	r4, [sl]
 8013d52:	f8da 3000 	ldr.w	r3, [sl]
 8013d56:	4499      	add	r9, r3
 8013d58:	e7d3      	b.n	8013d02 <__cvt+0x6a>
 8013d5a:	1c59      	adds	r1, r3, #1
 8013d5c:	9103      	str	r1, [sp, #12]
 8013d5e:	701a      	strb	r2, [r3, #0]
 8013d60:	e7d9      	b.n	8013d16 <__cvt+0x7e>

08013d62 <__exponent>:
 8013d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d64:	2900      	cmp	r1, #0
 8013d66:	bfba      	itte	lt
 8013d68:	4249      	neglt	r1, r1
 8013d6a:	232d      	movlt	r3, #45	@ 0x2d
 8013d6c:	232b      	movge	r3, #43	@ 0x2b
 8013d6e:	2909      	cmp	r1, #9
 8013d70:	7002      	strb	r2, [r0, #0]
 8013d72:	7043      	strb	r3, [r0, #1]
 8013d74:	dd29      	ble.n	8013dca <__exponent+0x68>
 8013d76:	f10d 0307 	add.w	r3, sp, #7
 8013d7a:	461d      	mov	r5, r3
 8013d7c:	270a      	movs	r7, #10
 8013d7e:	461a      	mov	r2, r3
 8013d80:	fbb1 f6f7 	udiv	r6, r1, r7
 8013d84:	fb07 1416 	mls	r4, r7, r6, r1
 8013d88:	3430      	adds	r4, #48	@ 0x30
 8013d8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013d8e:	460c      	mov	r4, r1
 8013d90:	2c63      	cmp	r4, #99	@ 0x63
 8013d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8013d96:	4631      	mov	r1, r6
 8013d98:	dcf1      	bgt.n	8013d7e <__exponent+0x1c>
 8013d9a:	3130      	adds	r1, #48	@ 0x30
 8013d9c:	1e94      	subs	r4, r2, #2
 8013d9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013da2:	1c41      	adds	r1, r0, #1
 8013da4:	4623      	mov	r3, r4
 8013da6:	42ab      	cmp	r3, r5
 8013da8:	d30a      	bcc.n	8013dc0 <__exponent+0x5e>
 8013daa:	f10d 0309 	add.w	r3, sp, #9
 8013dae:	1a9b      	subs	r3, r3, r2
 8013db0:	42ac      	cmp	r4, r5
 8013db2:	bf88      	it	hi
 8013db4:	2300      	movhi	r3, #0
 8013db6:	3302      	adds	r3, #2
 8013db8:	4403      	add	r3, r0
 8013dba:	1a18      	subs	r0, r3, r0
 8013dbc:	b003      	add	sp, #12
 8013dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013dc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013dc8:	e7ed      	b.n	8013da6 <__exponent+0x44>
 8013dca:	2330      	movs	r3, #48	@ 0x30
 8013dcc:	3130      	adds	r1, #48	@ 0x30
 8013dce:	7083      	strb	r3, [r0, #2]
 8013dd0:	70c1      	strb	r1, [r0, #3]
 8013dd2:	1d03      	adds	r3, r0, #4
 8013dd4:	e7f1      	b.n	8013dba <__exponent+0x58>
	...

08013dd8 <_printf_float>:
 8013dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ddc:	b08d      	sub	sp, #52	@ 0x34
 8013dde:	460c      	mov	r4, r1
 8013de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013de4:	4616      	mov	r6, r2
 8013de6:	461f      	mov	r7, r3
 8013de8:	4605      	mov	r5, r0
 8013dea:	f000 ff1f 	bl	8014c2c <_localeconv_r>
 8013dee:	6803      	ldr	r3, [r0, #0]
 8013df0:	9304      	str	r3, [sp, #16]
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ec fa64 	bl	80002c0 <strlen>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8013dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8013e00:	9005      	str	r0, [sp, #20]
 8013e02:	3307      	adds	r3, #7
 8013e04:	f023 0307 	bic.w	r3, r3, #7
 8013e08:	f103 0208 	add.w	r2, r3, #8
 8013e0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013e10:	f8d4 b000 	ldr.w	fp, [r4]
 8013e14:	f8c8 2000 	str.w	r2, [r8]
 8013e18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013e20:	9307      	str	r3, [sp, #28]
 8013e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8013e26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80140a0 <_printf_float+0x2c8>)
 8013e30:	f04f 32ff 	mov.w	r2, #4294967295
 8013e34:	f7ec fea2 	bl	8000b7c <__aeabi_dcmpun>
 8013e38:	bb70      	cbnz	r0, 8013e98 <_printf_float+0xc0>
 8013e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e3e:	4b98      	ldr	r3, [pc, #608]	@ (80140a0 <_printf_float+0x2c8>)
 8013e40:	f04f 32ff 	mov.w	r2, #4294967295
 8013e44:	f7ec fe7c 	bl	8000b40 <__aeabi_dcmple>
 8013e48:	bb30      	cbnz	r0, 8013e98 <_printf_float+0xc0>
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	4640      	mov	r0, r8
 8013e50:	4649      	mov	r1, r9
 8013e52:	f7ec fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8013e56:	b110      	cbz	r0, 8013e5e <_printf_float+0x86>
 8013e58:	232d      	movs	r3, #45	@ 0x2d
 8013e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e5e:	4a91      	ldr	r2, [pc, #580]	@ (80140a4 <_printf_float+0x2cc>)
 8013e60:	4b91      	ldr	r3, [pc, #580]	@ (80140a8 <_printf_float+0x2d0>)
 8013e62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013e66:	bf8c      	ite	hi
 8013e68:	4690      	movhi	r8, r2
 8013e6a:	4698      	movls	r8, r3
 8013e6c:	2303      	movs	r3, #3
 8013e6e:	6123      	str	r3, [r4, #16]
 8013e70:	f02b 0304 	bic.w	r3, fp, #4
 8013e74:	6023      	str	r3, [r4, #0]
 8013e76:	f04f 0900 	mov.w	r9, #0
 8013e7a:	9700      	str	r7, [sp, #0]
 8013e7c:	4633      	mov	r3, r6
 8013e7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013e80:	4621      	mov	r1, r4
 8013e82:	4628      	mov	r0, r5
 8013e84:	f000 f9d2 	bl	801422c <_printf_common>
 8013e88:	3001      	adds	r0, #1
 8013e8a:	f040 808d 	bne.w	8013fa8 <_printf_float+0x1d0>
 8013e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e92:	b00d      	add	sp, #52	@ 0x34
 8013e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e98:	4642      	mov	r2, r8
 8013e9a:	464b      	mov	r3, r9
 8013e9c:	4640      	mov	r0, r8
 8013e9e:	4649      	mov	r1, r9
 8013ea0:	f7ec fe6c 	bl	8000b7c <__aeabi_dcmpun>
 8013ea4:	b140      	cbz	r0, 8013eb8 <_printf_float+0xe0>
 8013ea6:	464b      	mov	r3, r9
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	bfbc      	itt	lt
 8013eac:	232d      	movlt	r3, #45	@ 0x2d
 8013eae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80140ac <_printf_float+0x2d4>)
 8013eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80140b0 <_printf_float+0x2d8>)
 8013eb6:	e7d4      	b.n	8013e62 <_printf_float+0x8a>
 8013eb8:	6863      	ldr	r3, [r4, #4]
 8013eba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013ebe:	9206      	str	r2, [sp, #24]
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	d13b      	bne.n	8013f3c <_printf_float+0x164>
 8013ec4:	2306      	movs	r3, #6
 8013ec6:	6063      	str	r3, [r4, #4]
 8013ec8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013ecc:	2300      	movs	r3, #0
 8013ece:	6022      	str	r2, [r4, #0]
 8013ed0:	9303      	str	r3, [sp, #12]
 8013ed2:	ab0a      	add	r3, sp, #40	@ 0x28
 8013ed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013ed8:	ab09      	add	r3, sp, #36	@ 0x24
 8013eda:	9300      	str	r3, [sp, #0]
 8013edc:	6861      	ldr	r1, [r4, #4]
 8013ede:	ec49 8b10 	vmov	d0, r8, r9
 8013ee2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f7ff fed6 	bl	8013c98 <__cvt>
 8013eec:	9b06      	ldr	r3, [sp, #24]
 8013eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ef0:	2b47      	cmp	r3, #71	@ 0x47
 8013ef2:	4680      	mov	r8, r0
 8013ef4:	d129      	bne.n	8013f4a <_printf_float+0x172>
 8013ef6:	1cc8      	adds	r0, r1, #3
 8013ef8:	db02      	blt.n	8013f00 <_printf_float+0x128>
 8013efa:	6863      	ldr	r3, [r4, #4]
 8013efc:	4299      	cmp	r1, r3
 8013efe:	dd41      	ble.n	8013f84 <_printf_float+0x1ac>
 8013f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8013f04:	fa5f fa8a 	uxtb.w	sl, sl
 8013f08:	3901      	subs	r1, #1
 8013f0a:	4652      	mov	r2, sl
 8013f0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013f10:	9109      	str	r1, [sp, #36]	@ 0x24
 8013f12:	f7ff ff26 	bl	8013d62 <__exponent>
 8013f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f18:	1813      	adds	r3, r2, r0
 8013f1a:	2a01      	cmp	r2, #1
 8013f1c:	4681      	mov	r9, r0
 8013f1e:	6123      	str	r3, [r4, #16]
 8013f20:	dc02      	bgt.n	8013f28 <_printf_float+0x150>
 8013f22:	6822      	ldr	r2, [r4, #0]
 8013f24:	07d2      	lsls	r2, r2, #31
 8013f26:	d501      	bpl.n	8013f2c <_printf_float+0x154>
 8013f28:	3301      	adds	r3, #1
 8013f2a:	6123      	str	r3, [r4, #16]
 8013f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d0a2      	beq.n	8013e7a <_printf_float+0xa2>
 8013f34:	232d      	movs	r3, #45	@ 0x2d
 8013f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f3a:	e79e      	b.n	8013e7a <_printf_float+0xa2>
 8013f3c:	9a06      	ldr	r2, [sp, #24]
 8013f3e:	2a47      	cmp	r2, #71	@ 0x47
 8013f40:	d1c2      	bne.n	8013ec8 <_printf_float+0xf0>
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d1c0      	bne.n	8013ec8 <_printf_float+0xf0>
 8013f46:	2301      	movs	r3, #1
 8013f48:	e7bd      	b.n	8013ec6 <_printf_float+0xee>
 8013f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013f4e:	d9db      	bls.n	8013f08 <_printf_float+0x130>
 8013f50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013f54:	d118      	bne.n	8013f88 <_printf_float+0x1b0>
 8013f56:	2900      	cmp	r1, #0
 8013f58:	6863      	ldr	r3, [r4, #4]
 8013f5a:	dd0b      	ble.n	8013f74 <_printf_float+0x19c>
 8013f5c:	6121      	str	r1, [r4, #16]
 8013f5e:	b913      	cbnz	r3, 8013f66 <_printf_float+0x18e>
 8013f60:	6822      	ldr	r2, [r4, #0]
 8013f62:	07d0      	lsls	r0, r2, #31
 8013f64:	d502      	bpl.n	8013f6c <_printf_float+0x194>
 8013f66:	3301      	adds	r3, #1
 8013f68:	440b      	add	r3, r1
 8013f6a:	6123      	str	r3, [r4, #16]
 8013f6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013f6e:	f04f 0900 	mov.w	r9, #0
 8013f72:	e7db      	b.n	8013f2c <_printf_float+0x154>
 8013f74:	b913      	cbnz	r3, 8013f7c <_printf_float+0x1a4>
 8013f76:	6822      	ldr	r2, [r4, #0]
 8013f78:	07d2      	lsls	r2, r2, #31
 8013f7a:	d501      	bpl.n	8013f80 <_printf_float+0x1a8>
 8013f7c:	3302      	adds	r3, #2
 8013f7e:	e7f4      	b.n	8013f6a <_printf_float+0x192>
 8013f80:	2301      	movs	r3, #1
 8013f82:	e7f2      	b.n	8013f6a <_printf_float+0x192>
 8013f84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f8a:	4299      	cmp	r1, r3
 8013f8c:	db05      	blt.n	8013f9a <_printf_float+0x1c2>
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	6121      	str	r1, [r4, #16]
 8013f92:	07d8      	lsls	r0, r3, #31
 8013f94:	d5ea      	bpl.n	8013f6c <_printf_float+0x194>
 8013f96:	1c4b      	adds	r3, r1, #1
 8013f98:	e7e7      	b.n	8013f6a <_printf_float+0x192>
 8013f9a:	2900      	cmp	r1, #0
 8013f9c:	bfd4      	ite	le
 8013f9e:	f1c1 0202 	rsble	r2, r1, #2
 8013fa2:	2201      	movgt	r2, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	e7e0      	b.n	8013f6a <_printf_float+0x192>
 8013fa8:	6823      	ldr	r3, [r4, #0]
 8013faa:	055a      	lsls	r2, r3, #21
 8013fac:	d407      	bmi.n	8013fbe <_printf_float+0x1e6>
 8013fae:	6923      	ldr	r3, [r4, #16]
 8013fb0:	4642      	mov	r2, r8
 8013fb2:	4631      	mov	r1, r6
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	47b8      	blx	r7
 8013fb8:	3001      	adds	r0, #1
 8013fba:	d12b      	bne.n	8014014 <_printf_float+0x23c>
 8013fbc:	e767      	b.n	8013e8e <_printf_float+0xb6>
 8013fbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013fc2:	f240 80dd 	bls.w	8014180 <_printf_float+0x3a8>
 8013fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013fca:	2200      	movs	r2, #0
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f7ec fda3 	bl	8000b18 <__aeabi_dcmpeq>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d033      	beq.n	801403e <_printf_float+0x266>
 8013fd6:	4a37      	ldr	r2, [pc, #220]	@ (80140b4 <_printf_float+0x2dc>)
 8013fd8:	2301      	movs	r3, #1
 8013fda:	4631      	mov	r1, r6
 8013fdc:	4628      	mov	r0, r5
 8013fde:	47b8      	blx	r7
 8013fe0:	3001      	adds	r0, #1
 8013fe2:	f43f af54 	beq.w	8013e8e <_printf_float+0xb6>
 8013fe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013fea:	4543      	cmp	r3, r8
 8013fec:	db02      	blt.n	8013ff4 <_printf_float+0x21c>
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	07d8      	lsls	r0, r3, #31
 8013ff2:	d50f      	bpl.n	8014014 <_printf_float+0x23c>
 8013ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ff8:	4631      	mov	r1, r6
 8013ffa:	4628      	mov	r0, r5
 8013ffc:	47b8      	blx	r7
 8013ffe:	3001      	adds	r0, #1
 8014000:	f43f af45 	beq.w	8013e8e <_printf_float+0xb6>
 8014004:	f04f 0900 	mov.w	r9, #0
 8014008:	f108 38ff 	add.w	r8, r8, #4294967295
 801400c:	f104 0a1a 	add.w	sl, r4, #26
 8014010:	45c8      	cmp	r8, r9
 8014012:	dc09      	bgt.n	8014028 <_printf_float+0x250>
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	079b      	lsls	r3, r3, #30
 8014018:	f100 8103 	bmi.w	8014222 <_printf_float+0x44a>
 801401c:	68e0      	ldr	r0, [r4, #12]
 801401e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014020:	4298      	cmp	r0, r3
 8014022:	bfb8      	it	lt
 8014024:	4618      	movlt	r0, r3
 8014026:	e734      	b.n	8013e92 <_printf_float+0xba>
 8014028:	2301      	movs	r3, #1
 801402a:	4652      	mov	r2, sl
 801402c:	4631      	mov	r1, r6
 801402e:	4628      	mov	r0, r5
 8014030:	47b8      	blx	r7
 8014032:	3001      	adds	r0, #1
 8014034:	f43f af2b 	beq.w	8013e8e <_printf_float+0xb6>
 8014038:	f109 0901 	add.w	r9, r9, #1
 801403c:	e7e8      	b.n	8014010 <_printf_float+0x238>
 801403e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014040:	2b00      	cmp	r3, #0
 8014042:	dc39      	bgt.n	80140b8 <_printf_float+0x2e0>
 8014044:	4a1b      	ldr	r2, [pc, #108]	@ (80140b4 <_printf_float+0x2dc>)
 8014046:	2301      	movs	r3, #1
 8014048:	4631      	mov	r1, r6
 801404a:	4628      	mov	r0, r5
 801404c:	47b8      	blx	r7
 801404e:	3001      	adds	r0, #1
 8014050:	f43f af1d 	beq.w	8013e8e <_printf_float+0xb6>
 8014054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014058:	ea59 0303 	orrs.w	r3, r9, r3
 801405c:	d102      	bne.n	8014064 <_printf_float+0x28c>
 801405e:	6823      	ldr	r3, [r4, #0]
 8014060:	07d9      	lsls	r1, r3, #31
 8014062:	d5d7      	bpl.n	8014014 <_printf_float+0x23c>
 8014064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014068:	4631      	mov	r1, r6
 801406a:	4628      	mov	r0, r5
 801406c:	47b8      	blx	r7
 801406e:	3001      	adds	r0, #1
 8014070:	f43f af0d 	beq.w	8013e8e <_printf_float+0xb6>
 8014074:	f04f 0a00 	mov.w	sl, #0
 8014078:	f104 0b1a 	add.w	fp, r4, #26
 801407c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801407e:	425b      	negs	r3, r3
 8014080:	4553      	cmp	r3, sl
 8014082:	dc01      	bgt.n	8014088 <_printf_float+0x2b0>
 8014084:	464b      	mov	r3, r9
 8014086:	e793      	b.n	8013fb0 <_printf_float+0x1d8>
 8014088:	2301      	movs	r3, #1
 801408a:	465a      	mov	r2, fp
 801408c:	4631      	mov	r1, r6
 801408e:	4628      	mov	r0, r5
 8014090:	47b8      	blx	r7
 8014092:	3001      	adds	r0, #1
 8014094:	f43f aefb 	beq.w	8013e8e <_printf_float+0xb6>
 8014098:	f10a 0a01 	add.w	sl, sl, #1
 801409c:	e7ee      	b.n	801407c <_printf_float+0x2a4>
 801409e:	bf00      	nop
 80140a0:	7fefffff 	.word	0x7fefffff
 80140a4:	0801af38 	.word	0x0801af38
 80140a8:	0801af34 	.word	0x0801af34
 80140ac:	0801af40 	.word	0x0801af40
 80140b0:	0801af3c 	.word	0x0801af3c
 80140b4:	0801af44 	.word	0x0801af44
 80140b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80140ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80140be:	4553      	cmp	r3, sl
 80140c0:	bfa8      	it	ge
 80140c2:	4653      	movge	r3, sl
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	4699      	mov	r9, r3
 80140c8:	dc36      	bgt.n	8014138 <_printf_float+0x360>
 80140ca:	f04f 0b00 	mov.w	fp, #0
 80140ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140d2:	f104 021a 	add.w	r2, r4, #26
 80140d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80140d8:	9306      	str	r3, [sp, #24]
 80140da:	eba3 0309 	sub.w	r3, r3, r9
 80140de:	455b      	cmp	r3, fp
 80140e0:	dc31      	bgt.n	8014146 <_printf_float+0x36e>
 80140e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140e4:	459a      	cmp	sl, r3
 80140e6:	dc3a      	bgt.n	801415e <_printf_float+0x386>
 80140e8:	6823      	ldr	r3, [r4, #0]
 80140ea:	07da      	lsls	r2, r3, #31
 80140ec:	d437      	bmi.n	801415e <_printf_float+0x386>
 80140ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140f0:	ebaa 0903 	sub.w	r9, sl, r3
 80140f4:	9b06      	ldr	r3, [sp, #24]
 80140f6:	ebaa 0303 	sub.w	r3, sl, r3
 80140fa:	4599      	cmp	r9, r3
 80140fc:	bfa8      	it	ge
 80140fe:	4699      	movge	r9, r3
 8014100:	f1b9 0f00 	cmp.w	r9, #0
 8014104:	dc33      	bgt.n	801416e <_printf_float+0x396>
 8014106:	f04f 0800 	mov.w	r8, #0
 801410a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801410e:	f104 0b1a 	add.w	fp, r4, #26
 8014112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014114:	ebaa 0303 	sub.w	r3, sl, r3
 8014118:	eba3 0309 	sub.w	r3, r3, r9
 801411c:	4543      	cmp	r3, r8
 801411e:	f77f af79 	ble.w	8014014 <_printf_float+0x23c>
 8014122:	2301      	movs	r3, #1
 8014124:	465a      	mov	r2, fp
 8014126:	4631      	mov	r1, r6
 8014128:	4628      	mov	r0, r5
 801412a:	47b8      	blx	r7
 801412c:	3001      	adds	r0, #1
 801412e:	f43f aeae 	beq.w	8013e8e <_printf_float+0xb6>
 8014132:	f108 0801 	add.w	r8, r8, #1
 8014136:	e7ec      	b.n	8014112 <_printf_float+0x33a>
 8014138:	4642      	mov	r2, r8
 801413a:	4631      	mov	r1, r6
 801413c:	4628      	mov	r0, r5
 801413e:	47b8      	blx	r7
 8014140:	3001      	adds	r0, #1
 8014142:	d1c2      	bne.n	80140ca <_printf_float+0x2f2>
 8014144:	e6a3      	b.n	8013e8e <_printf_float+0xb6>
 8014146:	2301      	movs	r3, #1
 8014148:	4631      	mov	r1, r6
 801414a:	4628      	mov	r0, r5
 801414c:	9206      	str	r2, [sp, #24]
 801414e:	47b8      	blx	r7
 8014150:	3001      	adds	r0, #1
 8014152:	f43f ae9c 	beq.w	8013e8e <_printf_float+0xb6>
 8014156:	9a06      	ldr	r2, [sp, #24]
 8014158:	f10b 0b01 	add.w	fp, fp, #1
 801415c:	e7bb      	b.n	80140d6 <_printf_float+0x2fe>
 801415e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014162:	4631      	mov	r1, r6
 8014164:	4628      	mov	r0, r5
 8014166:	47b8      	blx	r7
 8014168:	3001      	adds	r0, #1
 801416a:	d1c0      	bne.n	80140ee <_printf_float+0x316>
 801416c:	e68f      	b.n	8013e8e <_printf_float+0xb6>
 801416e:	9a06      	ldr	r2, [sp, #24]
 8014170:	464b      	mov	r3, r9
 8014172:	4442      	add	r2, r8
 8014174:	4631      	mov	r1, r6
 8014176:	4628      	mov	r0, r5
 8014178:	47b8      	blx	r7
 801417a:	3001      	adds	r0, #1
 801417c:	d1c3      	bne.n	8014106 <_printf_float+0x32e>
 801417e:	e686      	b.n	8013e8e <_printf_float+0xb6>
 8014180:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014184:	f1ba 0f01 	cmp.w	sl, #1
 8014188:	dc01      	bgt.n	801418e <_printf_float+0x3b6>
 801418a:	07db      	lsls	r3, r3, #31
 801418c:	d536      	bpl.n	80141fc <_printf_float+0x424>
 801418e:	2301      	movs	r3, #1
 8014190:	4642      	mov	r2, r8
 8014192:	4631      	mov	r1, r6
 8014194:	4628      	mov	r0, r5
 8014196:	47b8      	blx	r7
 8014198:	3001      	adds	r0, #1
 801419a:	f43f ae78 	beq.w	8013e8e <_printf_float+0xb6>
 801419e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141a2:	4631      	mov	r1, r6
 80141a4:	4628      	mov	r0, r5
 80141a6:	47b8      	blx	r7
 80141a8:	3001      	adds	r0, #1
 80141aa:	f43f ae70 	beq.w	8013e8e <_printf_float+0xb6>
 80141ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80141b2:	2200      	movs	r2, #0
 80141b4:	2300      	movs	r3, #0
 80141b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80141ba:	f7ec fcad 	bl	8000b18 <__aeabi_dcmpeq>
 80141be:	b9c0      	cbnz	r0, 80141f2 <_printf_float+0x41a>
 80141c0:	4653      	mov	r3, sl
 80141c2:	f108 0201 	add.w	r2, r8, #1
 80141c6:	4631      	mov	r1, r6
 80141c8:	4628      	mov	r0, r5
 80141ca:	47b8      	blx	r7
 80141cc:	3001      	adds	r0, #1
 80141ce:	d10c      	bne.n	80141ea <_printf_float+0x412>
 80141d0:	e65d      	b.n	8013e8e <_printf_float+0xb6>
 80141d2:	2301      	movs	r3, #1
 80141d4:	465a      	mov	r2, fp
 80141d6:	4631      	mov	r1, r6
 80141d8:	4628      	mov	r0, r5
 80141da:	47b8      	blx	r7
 80141dc:	3001      	adds	r0, #1
 80141de:	f43f ae56 	beq.w	8013e8e <_printf_float+0xb6>
 80141e2:	f108 0801 	add.w	r8, r8, #1
 80141e6:	45d0      	cmp	r8, sl
 80141e8:	dbf3      	blt.n	80141d2 <_printf_float+0x3fa>
 80141ea:	464b      	mov	r3, r9
 80141ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80141f0:	e6df      	b.n	8013fb2 <_printf_float+0x1da>
 80141f2:	f04f 0800 	mov.w	r8, #0
 80141f6:	f104 0b1a 	add.w	fp, r4, #26
 80141fa:	e7f4      	b.n	80141e6 <_printf_float+0x40e>
 80141fc:	2301      	movs	r3, #1
 80141fe:	4642      	mov	r2, r8
 8014200:	e7e1      	b.n	80141c6 <_printf_float+0x3ee>
 8014202:	2301      	movs	r3, #1
 8014204:	464a      	mov	r2, r9
 8014206:	4631      	mov	r1, r6
 8014208:	4628      	mov	r0, r5
 801420a:	47b8      	blx	r7
 801420c:	3001      	adds	r0, #1
 801420e:	f43f ae3e 	beq.w	8013e8e <_printf_float+0xb6>
 8014212:	f108 0801 	add.w	r8, r8, #1
 8014216:	68e3      	ldr	r3, [r4, #12]
 8014218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801421a:	1a5b      	subs	r3, r3, r1
 801421c:	4543      	cmp	r3, r8
 801421e:	dcf0      	bgt.n	8014202 <_printf_float+0x42a>
 8014220:	e6fc      	b.n	801401c <_printf_float+0x244>
 8014222:	f04f 0800 	mov.w	r8, #0
 8014226:	f104 0919 	add.w	r9, r4, #25
 801422a:	e7f4      	b.n	8014216 <_printf_float+0x43e>

0801422c <_printf_common>:
 801422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014230:	4616      	mov	r6, r2
 8014232:	4698      	mov	r8, r3
 8014234:	688a      	ldr	r2, [r1, #8]
 8014236:	690b      	ldr	r3, [r1, #16]
 8014238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801423c:	4293      	cmp	r3, r2
 801423e:	bfb8      	it	lt
 8014240:	4613      	movlt	r3, r2
 8014242:	6033      	str	r3, [r6, #0]
 8014244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014248:	4607      	mov	r7, r0
 801424a:	460c      	mov	r4, r1
 801424c:	b10a      	cbz	r2, 8014252 <_printf_common+0x26>
 801424e:	3301      	adds	r3, #1
 8014250:	6033      	str	r3, [r6, #0]
 8014252:	6823      	ldr	r3, [r4, #0]
 8014254:	0699      	lsls	r1, r3, #26
 8014256:	bf42      	ittt	mi
 8014258:	6833      	ldrmi	r3, [r6, #0]
 801425a:	3302      	addmi	r3, #2
 801425c:	6033      	strmi	r3, [r6, #0]
 801425e:	6825      	ldr	r5, [r4, #0]
 8014260:	f015 0506 	ands.w	r5, r5, #6
 8014264:	d106      	bne.n	8014274 <_printf_common+0x48>
 8014266:	f104 0a19 	add.w	sl, r4, #25
 801426a:	68e3      	ldr	r3, [r4, #12]
 801426c:	6832      	ldr	r2, [r6, #0]
 801426e:	1a9b      	subs	r3, r3, r2
 8014270:	42ab      	cmp	r3, r5
 8014272:	dc26      	bgt.n	80142c2 <_printf_common+0x96>
 8014274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014278:	6822      	ldr	r2, [r4, #0]
 801427a:	3b00      	subs	r3, #0
 801427c:	bf18      	it	ne
 801427e:	2301      	movne	r3, #1
 8014280:	0692      	lsls	r2, r2, #26
 8014282:	d42b      	bmi.n	80142dc <_printf_common+0xb0>
 8014284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014288:	4641      	mov	r1, r8
 801428a:	4638      	mov	r0, r7
 801428c:	47c8      	blx	r9
 801428e:	3001      	adds	r0, #1
 8014290:	d01e      	beq.n	80142d0 <_printf_common+0xa4>
 8014292:	6823      	ldr	r3, [r4, #0]
 8014294:	6922      	ldr	r2, [r4, #16]
 8014296:	f003 0306 	and.w	r3, r3, #6
 801429a:	2b04      	cmp	r3, #4
 801429c:	bf02      	ittt	eq
 801429e:	68e5      	ldreq	r5, [r4, #12]
 80142a0:	6833      	ldreq	r3, [r6, #0]
 80142a2:	1aed      	subeq	r5, r5, r3
 80142a4:	68a3      	ldr	r3, [r4, #8]
 80142a6:	bf0c      	ite	eq
 80142a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142ac:	2500      	movne	r5, #0
 80142ae:	4293      	cmp	r3, r2
 80142b0:	bfc4      	itt	gt
 80142b2:	1a9b      	subgt	r3, r3, r2
 80142b4:	18ed      	addgt	r5, r5, r3
 80142b6:	2600      	movs	r6, #0
 80142b8:	341a      	adds	r4, #26
 80142ba:	42b5      	cmp	r5, r6
 80142bc:	d11a      	bne.n	80142f4 <_printf_common+0xc8>
 80142be:	2000      	movs	r0, #0
 80142c0:	e008      	b.n	80142d4 <_printf_common+0xa8>
 80142c2:	2301      	movs	r3, #1
 80142c4:	4652      	mov	r2, sl
 80142c6:	4641      	mov	r1, r8
 80142c8:	4638      	mov	r0, r7
 80142ca:	47c8      	blx	r9
 80142cc:	3001      	adds	r0, #1
 80142ce:	d103      	bne.n	80142d8 <_printf_common+0xac>
 80142d0:	f04f 30ff 	mov.w	r0, #4294967295
 80142d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d8:	3501      	adds	r5, #1
 80142da:	e7c6      	b.n	801426a <_printf_common+0x3e>
 80142dc:	18e1      	adds	r1, r4, r3
 80142de:	1c5a      	adds	r2, r3, #1
 80142e0:	2030      	movs	r0, #48	@ 0x30
 80142e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80142e6:	4422      	add	r2, r4
 80142e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80142ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80142f0:	3302      	adds	r3, #2
 80142f2:	e7c7      	b.n	8014284 <_printf_common+0x58>
 80142f4:	2301      	movs	r3, #1
 80142f6:	4622      	mov	r2, r4
 80142f8:	4641      	mov	r1, r8
 80142fa:	4638      	mov	r0, r7
 80142fc:	47c8      	blx	r9
 80142fe:	3001      	adds	r0, #1
 8014300:	d0e6      	beq.n	80142d0 <_printf_common+0xa4>
 8014302:	3601      	adds	r6, #1
 8014304:	e7d9      	b.n	80142ba <_printf_common+0x8e>
	...

08014308 <_printf_i>:
 8014308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801430c:	7e0f      	ldrb	r7, [r1, #24]
 801430e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014310:	2f78      	cmp	r7, #120	@ 0x78
 8014312:	4691      	mov	r9, r2
 8014314:	4680      	mov	r8, r0
 8014316:	460c      	mov	r4, r1
 8014318:	469a      	mov	sl, r3
 801431a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801431e:	d807      	bhi.n	8014330 <_printf_i+0x28>
 8014320:	2f62      	cmp	r7, #98	@ 0x62
 8014322:	d80a      	bhi.n	801433a <_printf_i+0x32>
 8014324:	2f00      	cmp	r7, #0
 8014326:	f000 80d1 	beq.w	80144cc <_printf_i+0x1c4>
 801432a:	2f58      	cmp	r7, #88	@ 0x58
 801432c:	f000 80b8 	beq.w	80144a0 <_printf_i+0x198>
 8014330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014338:	e03a      	b.n	80143b0 <_printf_i+0xa8>
 801433a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801433e:	2b15      	cmp	r3, #21
 8014340:	d8f6      	bhi.n	8014330 <_printf_i+0x28>
 8014342:	a101      	add	r1, pc, #4	@ (adr r1, 8014348 <_printf_i+0x40>)
 8014344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014348:	080143a1 	.word	0x080143a1
 801434c:	080143b5 	.word	0x080143b5
 8014350:	08014331 	.word	0x08014331
 8014354:	08014331 	.word	0x08014331
 8014358:	08014331 	.word	0x08014331
 801435c:	08014331 	.word	0x08014331
 8014360:	080143b5 	.word	0x080143b5
 8014364:	08014331 	.word	0x08014331
 8014368:	08014331 	.word	0x08014331
 801436c:	08014331 	.word	0x08014331
 8014370:	08014331 	.word	0x08014331
 8014374:	080144b3 	.word	0x080144b3
 8014378:	080143df 	.word	0x080143df
 801437c:	0801446d 	.word	0x0801446d
 8014380:	08014331 	.word	0x08014331
 8014384:	08014331 	.word	0x08014331
 8014388:	080144d5 	.word	0x080144d5
 801438c:	08014331 	.word	0x08014331
 8014390:	080143df 	.word	0x080143df
 8014394:	08014331 	.word	0x08014331
 8014398:	08014331 	.word	0x08014331
 801439c:	08014475 	.word	0x08014475
 80143a0:	6833      	ldr	r3, [r6, #0]
 80143a2:	1d1a      	adds	r2, r3, #4
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	6032      	str	r2, [r6, #0]
 80143a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80143ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80143b0:	2301      	movs	r3, #1
 80143b2:	e09c      	b.n	80144ee <_printf_i+0x1e6>
 80143b4:	6833      	ldr	r3, [r6, #0]
 80143b6:	6820      	ldr	r0, [r4, #0]
 80143b8:	1d19      	adds	r1, r3, #4
 80143ba:	6031      	str	r1, [r6, #0]
 80143bc:	0606      	lsls	r6, r0, #24
 80143be:	d501      	bpl.n	80143c4 <_printf_i+0xbc>
 80143c0:	681d      	ldr	r5, [r3, #0]
 80143c2:	e003      	b.n	80143cc <_printf_i+0xc4>
 80143c4:	0645      	lsls	r5, r0, #25
 80143c6:	d5fb      	bpl.n	80143c0 <_printf_i+0xb8>
 80143c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80143cc:	2d00      	cmp	r5, #0
 80143ce:	da03      	bge.n	80143d8 <_printf_i+0xd0>
 80143d0:	232d      	movs	r3, #45	@ 0x2d
 80143d2:	426d      	negs	r5, r5
 80143d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143d8:	4858      	ldr	r0, [pc, #352]	@ (801453c <_printf_i+0x234>)
 80143da:	230a      	movs	r3, #10
 80143dc:	e011      	b.n	8014402 <_printf_i+0xfa>
 80143de:	6821      	ldr	r1, [r4, #0]
 80143e0:	6833      	ldr	r3, [r6, #0]
 80143e2:	0608      	lsls	r0, r1, #24
 80143e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80143e8:	d402      	bmi.n	80143f0 <_printf_i+0xe8>
 80143ea:	0649      	lsls	r1, r1, #25
 80143ec:	bf48      	it	mi
 80143ee:	b2ad      	uxthmi	r5, r5
 80143f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80143f2:	4852      	ldr	r0, [pc, #328]	@ (801453c <_printf_i+0x234>)
 80143f4:	6033      	str	r3, [r6, #0]
 80143f6:	bf14      	ite	ne
 80143f8:	230a      	movne	r3, #10
 80143fa:	2308      	moveq	r3, #8
 80143fc:	2100      	movs	r1, #0
 80143fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014402:	6866      	ldr	r6, [r4, #4]
 8014404:	60a6      	str	r6, [r4, #8]
 8014406:	2e00      	cmp	r6, #0
 8014408:	db05      	blt.n	8014416 <_printf_i+0x10e>
 801440a:	6821      	ldr	r1, [r4, #0]
 801440c:	432e      	orrs	r6, r5
 801440e:	f021 0104 	bic.w	r1, r1, #4
 8014412:	6021      	str	r1, [r4, #0]
 8014414:	d04b      	beq.n	80144ae <_printf_i+0x1a6>
 8014416:	4616      	mov	r6, r2
 8014418:	fbb5 f1f3 	udiv	r1, r5, r3
 801441c:	fb03 5711 	mls	r7, r3, r1, r5
 8014420:	5dc7      	ldrb	r7, [r0, r7]
 8014422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014426:	462f      	mov	r7, r5
 8014428:	42bb      	cmp	r3, r7
 801442a:	460d      	mov	r5, r1
 801442c:	d9f4      	bls.n	8014418 <_printf_i+0x110>
 801442e:	2b08      	cmp	r3, #8
 8014430:	d10b      	bne.n	801444a <_printf_i+0x142>
 8014432:	6823      	ldr	r3, [r4, #0]
 8014434:	07df      	lsls	r7, r3, #31
 8014436:	d508      	bpl.n	801444a <_printf_i+0x142>
 8014438:	6923      	ldr	r3, [r4, #16]
 801443a:	6861      	ldr	r1, [r4, #4]
 801443c:	4299      	cmp	r1, r3
 801443e:	bfde      	ittt	le
 8014440:	2330      	movle	r3, #48	@ 0x30
 8014442:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014446:	f106 36ff 	addle.w	r6, r6, #4294967295
 801444a:	1b92      	subs	r2, r2, r6
 801444c:	6122      	str	r2, [r4, #16]
 801444e:	f8cd a000 	str.w	sl, [sp]
 8014452:	464b      	mov	r3, r9
 8014454:	aa03      	add	r2, sp, #12
 8014456:	4621      	mov	r1, r4
 8014458:	4640      	mov	r0, r8
 801445a:	f7ff fee7 	bl	801422c <_printf_common>
 801445e:	3001      	adds	r0, #1
 8014460:	d14a      	bne.n	80144f8 <_printf_i+0x1f0>
 8014462:	f04f 30ff 	mov.w	r0, #4294967295
 8014466:	b004      	add	sp, #16
 8014468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801446c:	6823      	ldr	r3, [r4, #0]
 801446e:	f043 0320 	orr.w	r3, r3, #32
 8014472:	6023      	str	r3, [r4, #0]
 8014474:	4832      	ldr	r0, [pc, #200]	@ (8014540 <_printf_i+0x238>)
 8014476:	2778      	movs	r7, #120	@ 0x78
 8014478:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801447c:	6823      	ldr	r3, [r4, #0]
 801447e:	6831      	ldr	r1, [r6, #0]
 8014480:	061f      	lsls	r7, r3, #24
 8014482:	f851 5b04 	ldr.w	r5, [r1], #4
 8014486:	d402      	bmi.n	801448e <_printf_i+0x186>
 8014488:	065f      	lsls	r7, r3, #25
 801448a:	bf48      	it	mi
 801448c:	b2ad      	uxthmi	r5, r5
 801448e:	6031      	str	r1, [r6, #0]
 8014490:	07d9      	lsls	r1, r3, #31
 8014492:	bf44      	itt	mi
 8014494:	f043 0320 	orrmi.w	r3, r3, #32
 8014498:	6023      	strmi	r3, [r4, #0]
 801449a:	b11d      	cbz	r5, 80144a4 <_printf_i+0x19c>
 801449c:	2310      	movs	r3, #16
 801449e:	e7ad      	b.n	80143fc <_printf_i+0xf4>
 80144a0:	4826      	ldr	r0, [pc, #152]	@ (801453c <_printf_i+0x234>)
 80144a2:	e7e9      	b.n	8014478 <_printf_i+0x170>
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	f023 0320 	bic.w	r3, r3, #32
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	e7f6      	b.n	801449c <_printf_i+0x194>
 80144ae:	4616      	mov	r6, r2
 80144b0:	e7bd      	b.n	801442e <_printf_i+0x126>
 80144b2:	6833      	ldr	r3, [r6, #0]
 80144b4:	6825      	ldr	r5, [r4, #0]
 80144b6:	6961      	ldr	r1, [r4, #20]
 80144b8:	1d18      	adds	r0, r3, #4
 80144ba:	6030      	str	r0, [r6, #0]
 80144bc:	062e      	lsls	r6, r5, #24
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	d501      	bpl.n	80144c6 <_printf_i+0x1be>
 80144c2:	6019      	str	r1, [r3, #0]
 80144c4:	e002      	b.n	80144cc <_printf_i+0x1c4>
 80144c6:	0668      	lsls	r0, r5, #25
 80144c8:	d5fb      	bpl.n	80144c2 <_printf_i+0x1ba>
 80144ca:	8019      	strh	r1, [r3, #0]
 80144cc:	2300      	movs	r3, #0
 80144ce:	6123      	str	r3, [r4, #16]
 80144d0:	4616      	mov	r6, r2
 80144d2:	e7bc      	b.n	801444e <_printf_i+0x146>
 80144d4:	6833      	ldr	r3, [r6, #0]
 80144d6:	1d1a      	adds	r2, r3, #4
 80144d8:	6032      	str	r2, [r6, #0]
 80144da:	681e      	ldr	r6, [r3, #0]
 80144dc:	6862      	ldr	r2, [r4, #4]
 80144de:	2100      	movs	r1, #0
 80144e0:	4630      	mov	r0, r6
 80144e2:	f7eb fe9d 	bl	8000220 <memchr>
 80144e6:	b108      	cbz	r0, 80144ec <_printf_i+0x1e4>
 80144e8:	1b80      	subs	r0, r0, r6
 80144ea:	6060      	str	r0, [r4, #4]
 80144ec:	6863      	ldr	r3, [r4, #4]
 80144ee:	6123      	str	r3, [r4, #16]
 80144f0:	2300      	movs	r3, #0
 80144f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80144f6:	e7aa      	b.n	801444e <_printf_i+0x146>
 80144f8:	6923      	ldr	r3, [r4, #16]
 80144fa:	4632      	mov	r2, r6
 80144fc:	4649      	mov	r1, r9
 80144fe:	4640      	mov	r0, r8
 8014500:	47d0      	blx	sl
 8014502:	3001      	adds	r0, #1
 8014504:	d0ad      	beq.n	8014462 <_printf_i+0x15a>
 8014506:	6823      	ldr	r3, [r4, #0]
 8014508:	079b      	lsls	r3, r3, #30
 801450a:	d413      	bmi.n	8014534 <_printf_i+0x22c>
 801450c:	68e0      	ldr	r0, [r4, #12]
 801450e:	9b03      	ldr	r3, [sp, #12]
 8014510:	4298      	cmp	r0, r3
 8014512:	bfb8      	it	lt
 8014514:	4618      	movlt	r0, r3
 8014516:	e7a6      	b.n	8014466 <_printf_i+0x15e>
 8014518:	2301      	movs	r3, #1
 801451a:	4632      	mov	r2, r6
 801451c:	4649      	mov	r1, r9
 801451e:	4640      	mov	r0, r8
 8014520:	47d0      	blx	sl
 8014522:	3001      	adds	r0, #1
 8014524:	d09d      	beq.n	8014462 <_printf_i+0x15a>
 8014526:	3501      	adds	r5, #1
 8014528:	68e3      	ldr	r3, [r4, #12]
 801452a:	9903      	ldr	r1, [sp, #12]
 801452c:	1a5b      	subs	r3, r3, r1
 801452e:	42ab      	cmp	r3, r5
 8014530:	dcf2      	bgt.n	8014518 <_printf_i+0x210>
 8014532:	e7eb      	b.n	801450c <_printf_i+0x204>
 8014534:	2500      	movs	r5, #0
 8014536:	f104 0619 	add.w	r6, r4, #25
 801453a:	e7f5      	b.n	8014528 <_printf_i+0x220>
 801453c:	0801af46 	.word	0x0801af46
 8014540:	0801af57 	.word	0x0801af57

08014544 <_scanf_float>:
 8014544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014548:	b087      	sub	sp, #28
 801454a:	4691      	mov	r9, r2
 801454c:	9303      	str	r3, [sp, #12]
 801454e:	688b      	ldr	r3, [r1, #8]
 8014550:	1e5a      	subs	r2, r3, #1
 8014552:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014556:	bf81      	itttt	hi
 8014558:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801455c:	eb03 0b05 	addhi.w	fp, r3, r5
 8014560:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014564:	608b      	strhi	r3, [r1, #8]
 8014566:	680b      	ldr	r3, [r1, #0]
 8014568:	460a      	mov	r2, r1
 801456a:	f04f 0500 	mov.w	r5, #0
 801456e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014572:	f842 3b1c 	str.w	r3, [r2], #28
 8014576:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801457a:	4680      	mov	r8, r0
 801457c:	460c      	mov	r4, r1
 801457e:	bf98      	it	ls
 8014580:	f04f 0b00 	movls.w	fp, #0
 8014584:	9201      	str	r2, [sp, #4]
 8014586:	4616      	mov	r6, r2
 8014588:	46aa      	mov	sl, r5
 801458a:	462f      	mov	r7, r5
 801458c:	9502      	str	r5, [sp, #8]
 801458e:	68a2      	ldr	r2, [r4, #8]
 8014590:	b15a      	cbz	r2, 80145aa <_scanf_float+0x66>
 8014592:	f8d9 3000 	ldr.w	r3, [r9]
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	2b4e      	cmp	r3, #78	@ 0x4e
 801459a:	d863      	bhi.n	8014664 <_scanf_float+0x120>
 801459c:	2b40      	cmp	r3, #64	@ 0x40
 801459e:	d83b      	bhi.n	8014618 <_scanf_float+0xd4>
 80145a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80145a4:	b2c8      	uxtb	r0, r1
 80145a6:	280e      	cmp	r0, #14
 80145a8:	d939      	bls.n	801461e <_scanf_float+0xda>
 80145aa:	b11f      	cbz	r7, 80145b4 <_scanf_float+0x70>
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80145b2:	6023      	str	r3, [r4, #0]
 80145b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80145b8:	f1ba 0f01 	cmp.w	sl, #1
 80145bc:	f200 8114 	bhi.w	80147e8 <_scanf_float+0x2a4>
 80145c0:	9b01      	ldr	r3, [sp, #4]
 80145c2:	429e      	cmp	r6, r3
 80145c4:	f200 8105 	bhi.w	80147d2 <_scanf_float+0x28e>
 80145c8:	2001      	movs	r0, #1
 80145ca:	b007      	add	sp, #28
 80145cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80145d4:	2a0d      	cmp	r2, #13
 80145d6:	d8e8      	bhi.n	80145aa <_scanf_float+0x66>
 80145d8:	a101      	add	r1, pc, #4	@ (adr r1, 80145e0 <_scanf_float+0x9c>)
 80145da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80145de:	bf00      	nop
 80145e0:	08014729 	.word	0x08014729
 80145e4:	080145ab 	.word	0x080145ab
 80145e8:	080145ab 	.word	0x080145ab
 80145ec:	080145ab 	.word	0x080145ab
 80145f0:	08014785 	.word	0x08014785
 80145f4:	0801475f 	.word	0x0801475f
 80145f8:	080145ab 	.word	0x080145ab
 80145fc:	080145ab 	.word	0x080145ab
 8014600:	08014737 	.word	0x08014737
 8014604:	080145ab 	.word	0x080145ab
 8014608:	080145ab 	.word	0x080145ab
 801460c:	080145ab 	.word	0x080145ab
 8014610:	080145ab 	.word	0x080145ab
 8014614:	080146f3 	.word	0x080146f3
 8014618:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801461c:	e7da      	b.n	80145d4 <_scanf_float+0x90>
 801461e:	290e      	cmp	r1, #14
 8014620:	d8c3      	bhi.n	80145aa <_scanf_float+0x66>
 8014622:	a001      	add	r0, pc, #4	@ (adr r0, 8014628 <_scanf_float+0xe4>)
 8014624:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014628:	080146e3 	.word	0x080146e3
 801462c:	080145ab 	.word	0x080145ab
 8014630:	080146e3 	.word	0x080146e3
 8014634:	08014773 	.word	0x08014773
 8014638:	080145ab 	.word	0x080145ab
 801463c:	08014685 	.word	0x08014685
 8014640:	080146c9 	.word	0x080146c9
 8014644:	080146c9 	.word	0x080146c9
 8014648:	080146c9 	.word	0x080146c9
 801464c:	080146c9 	.word	0x080146c9
 8014650:	080146c9 	.word	0x080146c9
 8014654:	080146c9 	.word	0x080146c9
 8014658:	080146c9 	.word	0x080146c9
 801465c:	080146c9 	.word	0x080146c9
 8014660:	080146c9 	.word	0x080146c9
 8014664:	2b6e      	cmp	r3, #110	@ 0x6e
 8014666:	d809      	bhi.n	801467c <_scanf_float+0x138>
 8014668:	2b60      	cmp	r3, #96	@ 0x60
 801466a:	d8b1      	bhi.n	80145d0 <_scanf_float+0x8c>
 801466c:	2b54      	cmp	r3, #84	@ 0x54
 801466e:	d07b      	beq.n	8014768 <_scanf_float+0x224>
 8014670:	2b59      	cmp	r3, #89	@ 0x59
 8014672:	d19a      	bne.n	80145aa <_scanf_float+0x66>
 8014674:	2d07      	cmp	r5, #7
 8014676:	d198      	bne.n	80145aa <_scanf_float+0x66>
 8014678:	2508      	movs	r5, #8
 801467a:	e02f      	b.n	80146dc <_scanf_float+0x198>
 801467c:	2b74      	cmp	r3, #116	@ 0x74
 801467e:	d073      	beq.n	8014768 <_scanf_float+0x224>
 8014680:	2b79      	cmp	r3, #121	@ 0x79
 8014682:	e7f6      	b.n	8014672 <_scanf_float+0x12e>
 8014684:	6821      	ldr	r1, [r4, #0]
 8014686:	05c8      	lsls	r0, r1, #23
 8014688:	d51e      	bpl.n	80146c8 <_scanf_float+0x184>
 801468a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801468e:	6021      	str	r1, [r4, #0]
 8014690:	3701      	adds	r7, #1
 8014692:	f1bb 0f00 	cmp.w	fp, #0
 8014696:	d003      	beq.n	80146a0 <_scanf_float+0x15c>
 8014698:	3201      	adds	r2, #1
 801469a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801469e:	60a2      	str	r2, [r4, #8]
 80146a0:	68a3      	ldr	r3, [r4, #8]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	60a3      	str	r3, [r4, #8]
 80146a6:	6923      	ldr	r3, [r4, #16]
 80146a8:	3301      	adds	r3, #1
 80146aa:	6123      	str	r3, [r4, #16]
 80146ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80146b0:	3b01      	subs	r3, #1
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80146b8:	f340 8082 	ble.w	80147c0 <_scanf_float+0x27c>
 80146bc:	f8d9 3000 	ldr.w	r3, [r9]
 80146c0:	3301      	adds	r3, #1
 80146c2:	f8c9 3000 	str.w	r3, [r9]
 80146c6:	e762      	b.n	801458e <_scanf_float+0x4a>
 80146c8:	eb1a 0105 	adds.w	r1, sl, r5
 80146cc:	f47f af6d 	bne.w	80145aa <_scanf_float+0x66>
 80146d0:	6822      	ldr	r2, [r4, #0]
 80146d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80146d6:	6022      	str	r2, [r4, #0]
 80146d8:	460d      	mov	r5, r1
 80146da:	468a      	mov	sl, r1
 80146dc:	f806 3b01 	strb.w	r3, [r6], #1
 80146e0:	e7de      	b.n	80146a0 <_scanf_float+0x15c>
 80146e2:	6822      	ldr	r2, [r4, #0]
 80146e4:	0610      	lsls	r0, r2, #24
 80146e6:	f57f af60 	bpl.w	80145aa <_scanf_float+0x66>
 80146ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80146ee:	6022      	str	r2, [r4, #0]
 80146f0:	e7f4      	b.n	80146dc <_scanf_float+0x198>
 80146f2:	f1ba 0f00 	cmp.w	sl, #0
 80146f6:	d10c      	bne.n	8014712 <_scanf_float+0x1ce>
 80146f8:	b977      	cbnz	r7, 8014718 <_scanf_float+0x1d4>
 80146fa:	6822      	ldr	r2, [r4, #0]
 80146fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014700:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014704:	d108      	bne.n	8014718 <_scanf_float+0x1d4>
 8014706:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801470a:	6022      	str	r2, [r4, #0]
 801470c:	f04f 0a01 	mov.w	sl, #1
 8014710:	e7e4      	b.n	80146dc <_scanf_float+0x198>
 8014712:	f1ba 0f02 	cmp.w	sl, #2
 8014716:	d050      	beq.n	80147ba <_scanf_float+0x276>
 8014718:	2d01      	cmp	r5, #1
 801471a:	d002      	beq.n	8014722 <_scanf_float+0x1de>
 801471c:	2d04      	cmp	r5, #4
 801471e:	f47f af44 	bne.w	80145aa <_scanf_float+0x66>
 8014722:	3501      	adds	r5, #1
 8014724:	b2ed      	uxtb	r5, r5
 8014726:	e7d9      	b.n	80146dc <_scanf_float+0x198>
 8014728:	f1ba 0f01 	cmp.w	sl, #1
 801472c:	f47f af3d 	bne.w	80145aa <_scanf_float+0x66>
 8014730:	f04f 0a02 	mov.w	sl, #2
 8014734:	e7d2      	b.n	80146dc <_scanf_float+0x198>
 8014736:	b975      	cbnz	r5, 8014756 <_scanf_float+0x212>
 8014738:	2f00      	cmp	r7, #0
 801473a:	f47f af37 	bne.w	80145ac <_scanf_float+0x68>
 801473e:	6822      	ldr	r2, [r4, #0]
 8014740:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014744:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014748:	f040 8103 	bne.w	8014952 <_scanf_float+0x40e>
 801474c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014750:	6022      	str	r2, [r4, #0]
 8014752:	2501      	movs	r5, #1
 8014754:	e7c2      	b.n	80146dc <_scanf_float+0x198>
 8014756:	2d03      	cmp	r5, #3
 8014758:	d0e3      	beq.n	8014722 <_scanf_float+0x1de>
 801475a:	2d05      	cmp	r5, #5
 801475c:	e7df      	b.n	801471e <_scanf_float+0x1da>
 801475e:	2d02      	cmp	r5, #2
 8014760:	f47f af23 	bne.w	80145aa <_scanf_float+0x66>
 8014764:	2503      	movs	r5, #3
 8014766:	e7b9      	b.n	80146dc <_scanf_float+0x198>
 8014768:	2d06      	cmp	r5, #6
 801476a:	f47f af1e 	bne.w	80145aa <_scanf_float+0x66>
 801476e:	2507      	movs	r5, #7
 8014770:	e7b4      	b.n	80146dc <_scanf_float+0x198>
 8014772:	6822      	ldr	r2, [r4, #0]
 8014774:	0591      	lsls	r1, r2, #22
 8014776:	f57f af18 	bpl.w	80145aa <_scanf_float+0x66>
 801477a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801477e:	6022      	str	r2, [r4, #0]
 8014780:	9702      	str	r7, [sp, #8]
 8014782:	e7ab      	b.n	80146dc <_scanf_float+0x198>
 8014784:	6822      	ldr	r2, [r4, #0]
 8014786:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801478a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801478e:	d005      	beq.n	801479c <_scanf_float+0x258>
 8014790:	0550      	lsls	r0, r2, #21
 8014792:	f57f af0a 	bpl.w	80145aa <_scanf_float+0x66>
 8014796:	2f00      	cmp	r7, #0
 8014798:	f000 80db 	beq.w	8014952 <_scanf_float+0x40e>
 801479c:	0591      	lsls	r1, r2, #22
 801479e:	bf58      	it	pl
 80147a0:	9902      	ldrpl	r1, [sp, #8]
 80147a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80147a6:	bf58      	it	pl
 80147a8:	1a79      	subpl	r1, r7, r1
 80147aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80147ae:	bf58      	it	pl
 80147b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80147b4:	6022      	str	r2, [r4, #0]
 80147b6:	2700      	movs	r7, #0
 80147b8:	e790      	b.n	80146dc <_scanf_float+0x198>
 80147ba:	f04f 0a03 	mov.w	sl, #3
 80147be:	e78d      	b.n	80146dc <_scanf_float+0x198>
 80147c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80147c4:	4649      	mov	r1, r9
 80147c6:	4640      	mov	r0, r8
 80147c8:	4798      	blx	r3
 80147ca:	2800      	cmp	r0, #0
 80147cc:	f43f aedf 	beq.w	801458e <_scanf_float+0x4a>
 80147d0:	e6eb      	b.n	80145aa <_scanf_float+0x66>
 80147d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80147d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80147da:	464a      	mov	r2, r9
 80147dc:	4640      	mov	r0, r8
 80147de:	4798      	blx	r3
 80147e0:	6923      	ldr	r3, [r4, #16]
 80147e2:	3b01      	subs	r3, #1
 80147e4:	6123      	str	r3, [r4, #16]
 80147e6:	e6eb      	b.n	80145c0 <_scanf_float+0x7c>
 80147e8:	1e6b      	subs	r3, r5, #1
 80147ea:	2b06      	cmp	r3, #6
 80147ec:	d824      	bhi.n	8014838 <_scanf_float+0x2f4>
 80147ee:	2d02      	cmp	r5, #2
 80147f0:	d836      	bhi.n	8014860 <_scanf_float+0x31c>
 80147f2:	9b01      	ldr	r3, [sp, #4]
 80147f4:	429e      	cmp	r6, r3
 80147f6:	f67f aee7 	bls.w	80145c8 <_scanf_float+0x84>
 80147fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80147fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014802:	464a      	mov	r2, r9
 8014804:	4640      	mov	r0, r8
 8014806:	4798      	blx	r3
 8014808:	6923      	ldr	r3, [r4, #16]
 801480a:	3b01      	subs	r3, #1
 801480c:	6123      	str	r3, [r4, #16]
 801480e:	e7f0      	b.n	80147f2 <_scanf_float+0x2ae>
 8014810:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014814:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014818:	464a      	mov	r2, r9
 801481a:	4640      	mov	r0, r8
 801481c:	4798      	blx	r3
 801481e:	6923      	ldr	r3, [r4, #16]
 8014820:	3b01      	subs	r3, #1
 8014822:	6123      	str	r3, [r4, #16]
 8014824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014828:	fa5f fa8a 	uxtb.w	sl, sl
 801482c:	f1ba 0f02 	cmp.w	sl, #2
 8014830:	d1ee      	bne.n	8014810 <_scanf_float+0x2cc>
 8014832:	3d03      	subs	r5, #3
 8014834:	b2ed      	uxtb	r5, r5
 8014836:	1b76      	subs	r6, r6, r5
 8014838:	6823      	ldr	r3, [r4, #0]
 801483a:	05da      	lsls	r2, r3, #23
 801483c:	d530      	bpl.n	80148a0 <_scanf_float+0x35c>
 801483e:	055b      	lsls	r3, r3, #21
 8014840:	d511      	bpl.n	8014866 <_scanf_float+0x322>
 8014842:	9b01      	ldr	r3, [sp, #4]
 8014844:	429e      	cmp	r6, r3
 8014846:	f67f aebf 	bls.w	80145c8 <_scanf_float+0x84>
 801484a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801484e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014852:	464a      	mov	r2, r9
 8014854:	4640      	mov	r0, r8
 8014856:	4798      	blx	r3
 8014858:	6923      	ldr	r3, [r4, #16]
 801485a:	3b01      	subs	r3, #1
 801485c:	6123      	str	r3, [r4, #16]
 801485e:	e7f0      	b.n	8014842 <_scanf_float+0x2fe>
 8014860:	46aa      	mov	sl, r5
 8014862:	46b3      	mov	fp, r6
 8014864:	e7de      	b.n	8014824 <_scanf_float+0x2e0>
 8014866:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801486a:	6923      	ldr	r3, [r4, #16]
 801486c:	2965      	cmp	r1, #101	@ 0x65
 801486e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014872:	f106 35ff 	add.w	r5, r6, #4294967295
 8014876:	6123      	str	r3, [r4, #16]
 8014878:	d00c      	beq.n	8014894 <_scanf_float+0x350>
 801487a:	2945      	cmp	r1, #69	@ 0x45
 801487c:	d00a      	beq.n	8014894 <_scanf_float+0x350>
 801487e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014882:	464a      	mov	r2, r9
 8014884:	4640      	mov	r0, r8
 8014886:	4798      	blx	r3
 8014888:	6923      	ldr	r3, [r4, #16]
 801488a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801488e:	3b01      	subs	r3, #1
 8014890:	1eb5      	subs	r5, r6, #2
 8014892:	6123      	str	r3, [r4, #16]
 8014894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014898:	464a      	mov	r2, r9
 801489a:	4640      	mov	r0, r8
 801489c:	4798      	blx	r3
 801489e:	462e      	mov	r6, r5
 80148a0:	6822      	ldr	r2, [r4, #0]
 80148a2:	f012 0210 	ands.w	r2, r2, #16
 80148a6:	d001      	beq.n	80148ac <_scanf_float+0x368>
 80148a8:	2000      	movs	r0, #0
 80148aa:	e68e      	b.n	80145ca <_scanf_float+0x86>
 80148ac:	7032      	strb	r2, [r6, #0]
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80148b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80148b8:	d125      	bne.n	8014906 <_scanf_float+0x3c2>
 80148ba:	9b02      	ldr	r3, [sp, #8]
 80148bc:	429f      	cmp	r7, r3
 80148be:	d00a      	beq.n	80148d6 <_scanf_float+0x392>
 80148c0:	1bda      	subs	r2, r3, r7
 80148c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80148c6:	429e      	cmp	r6, r3
 80148c8:	bf28      	it	cs
 80148ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80148ce:	4922      	ldr	r1, [pc, #136]	@ (8014958 <_scanf_float+0x414>)
 80148d0:	4630      	mov	r0, r6
 80148d2:	f000 f93d 	bl	8014b50 <siprintf>
 80148d6:	9901      	ldr	r1, [sp, #4]
 80148d8:	2200      	movs	r2, #0
 80148da:	4640      	mov	r0, r8
 80148dc:	f002 fc94 	bl	8017208 <_strtod_r>
 80148e0:	9b03      	ldr	r3, [sp, #12]
 80148e2:	6821      	ldr	r1, [r4, #0]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	f011 0f02 	tst.w	r1, #2
 80148ea:	ec57 6b10 	vmov	r6, r7, d0
 80148ee:	f103 0204 	add.w	r2, r3, #4
 80148f2:	d015      	beq.n	8014920 <_scanf_float+0x3dc>
 80148f4:	9903      	ldr	r1, [sp, #12]
 80148f6:	600a      	str	r2, [r1, #0]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	e9c3 6700 	strd	r6, r7, [r3]
 80148fe:	68e3      	ldr	r3, [r4, #12]
 8014900:	3301      	adds	r3, #1
 8014902:	60e3      	str	r3, [r4, #12]
 8014904:	e7d0      	b.n	80148a8 <_scanf_float+0x364>
 8014906:	9b04      	ldr	r3, [sp, #16]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d0e4      	beq.n	80148d6 <_scanf_float+0x392>
 801490c:	9905      	ldr	r1, [sp, #20]
 801490e:	230a      	movs	r3, #10
 8014910:	3101      	adds	r1, #1
 8014912:	4640      	mov	r0, r8
 8014914:	f002 fcf8 	bl	8017308 <_strtol_r>
 8014918:	9b04      	ldr	r3, [sp, #16]
 801491a:	9e05      	ldr	r6, [sp, #20]
 801491c:	1ac2      	subs	r2, r0, r3
 801491e:	e7d0      	b.n	80148c2 <_scanf_float+0x37e>
 8014920:	f011 0f04 	tst.w	r1, #4
 8014924:	9903      	ldr	r1, [sp, #12]
 8014926:	600a      	str	r2, [r1, #0]
 8014928:	d1e6      	bne.n	80148f8 <_scanf_float+0x3b4>
 801492a:	681d      	ldr	r5, [r3, #0]
 801492c:	4632      	mov	r2, r6
 801492e:	463b      	mov	r3, r7
 8014930:	4630      	mov	r0, r6
 8014932:	4639      	mov	r1, r7
 8014934:	f7ec f922 	bl	8000b7c <__aeabi_dcmpun>
 8014938:	b128      	cbz	r0, 8014946 <_scanf_float+0x402>
 801493a:	4808      	ldr	r0, [pc, #32]	@ (801495c <_scanf_float+0x418>)
 801493c:	f000 fa5a 	bl	8014df4 <nanf>
 8014940:	ed85 0a00 	vstr	s0, [r5]
 8014944:	e7db      	b.n	80148fe <_scanf_float+0x3ba>
 8014946:	4630      	mov	r0, r6
 8014948:	4639      	mov	r1, r7
 801494a:	f7ec f975 	bl	8000c38 <__aeabi_d2f>
 801494e:	6028      	str	r0, [r5, #0]
 8014950:	e7d5      	b.n	80148fe <_scanf_float+0x3ba>
 8014952:	2700      	movs	r7, #0
 8014954:	e62e      	b.n	80145b4 <_scanf_float+0x70>
 8014956:	bf00      	nop
 8014958:	0801af68 	.word	0x0801af68
 801495c:	0801b0a9 	.word	0x0801b0a9

08014960 <std>:
 8014960:	2300      	movs	r3, #0
 8014962:	b510      	push	{r4, lr}
 8014964:	4604      	mov	r4, r0
 8014966:	e9c0 3300 	strd	r3, r3, [r0]
 801496a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801496e:	6083      	str	r3, [r0, #8]
 8014970:	8181      	strh	r1, [r0, #12]
 8014972:	6643      	str	r3, [r0, #100]	@ 0x64
 8014974:	81c2      	strh	r2, [r0, #14]
 8014976:	6183      	str	r3, [r0, #24]
 8014978:	4619      	mov	r1, r3
 801497a:	2208      	movs	r2, #8
 801497c:	305c      	adds	r0, #92	@ 0x5c
 801497e:	f000 f94c 	bl	8014c1a <memset>
 8014982:	4b0d      	ldr	r3, [pc, #52]	@ (80149b8 <std+0x58>)
 8014984:	6263      	str	r3, [r4, #36]	@ 0x24
 8014986:	4b0d      	ldr	r3, [pc, #52]	@ (80149bc <std+0x5c>)
 8014988:	62a3      	str	r3, [r4, #40]	@ 0x28
 801498a:	4b0d      	ldr	r3, [pc, #52]	@ (80149c0 <std+0x60>)
 801498c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801498e:	4b0d      	ldr	r3, [pc, #52]	@ (80149c4 <std+0x64>)
 8014990:	6323      	str	r3, [r4, #48]	@ 0x30
 8014992:	4b0d      	ldr	r3, [pc, #52]	@ (80149c8 <std+0x68>)
 8014994:	6224      	str	r4, [r4, #32]
 8014996:	429c      	cmp	r4, r3
 8014998:	d006      	beq.n	80149a8 <std+0x48>
 801499a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801499e:	4294      	cmp	r4, r2
 80149a0:	d002      	beq.n	80149a8 <std+0x48>
 80149a2:	33d0      	adds	r3, #208	@ 0xd0
 80149a4:	429c      	cmp	r4, r3
 80149a6:	d105      	bne.n	80149b4 <std+0x54>
 80149a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80149ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149b0:	f000 ba0e 	b.w	8014dd0 <__retarget_lock_init_recursive>
 80149b4:	bd10      	pop	{r4, pc}
 80149b6:	bf00      	nop
 80149b8:	08014b95 	.word	0x08014b95
 80149bc:	08014bb7 	.word	0x08014bb7
 80149c0:	08014bef 	.word	0x08014bef
 80149c4:	08014c13 	.word	0x08014c13
 80149c8:	20004bc4 	.word	0x20004bc4

080149cc <stdio_exit_handler>:
 80149cc:	4a02      	ldr	r2, [pc, #8]	@ (80149d8 <stdio_exit_handler+0xc>)
 80149ce:	4903      	ldr	r1, [pc, #12]	@ (80149dc <stdio_exit_handler+0x10>)
 80149d0:	4803      	ldr	r0, [pc, #12]	@ (80149e0 <stdio_exit_handler+0x14>)
 80149d2:	f000 b869 	b.w	8014aa8 <_fwalk_sglue>
 80149d6:	bf00      	nop
 80149d8:	20000048 	.word	0x20000048
 80149dc:	080176c5 	.word	0x080176c5
 80149e0:	20000058 	.word	0x20000058

080149e4 <cleanup_stdio>:
 80149e4:	6841      	ldr	r1, [r0, #4]
 80149e6:	4b0c      	ldr	r3, [pc, #48]	@ (8014a18 <cleanup_stdio+0x34>)
 80149e8:	4299      	cmp	r1, r3
 80149ea:	b510      	push	{r4, lr}
 80149ec:	4604      	mov	r4, r0
 80149ee:	d001      	beq.n	80149f4 <cleanup_stdio+0x10>
 80149f0:	f002 fe68 	bl	80176c4 <_fflush_r>
 80149f4:	68a1      	ldr	r1, [r4, #8]
 80149f6:	4b09      	ldr	r3, [pc, #36]	@ (8014a1c <cleanup_stdio+0x38>)
 80149f8:	4299      	cmp	r1, r3
 80149fa:	d002      	beq.n	8014a02 <cleanup_stdio+0x1e>
 80149fc:	4620      	mov	r0, r4
 80149fe:	f002 fe61 	bl	80176c4 <_fflush_r>
 8014a02:	68e1      	ldr	r1, [r4, #12]
 8014a04:	4b06      	ldr	r3, [pc, #24]	@ (8014a20 <cleanup_stdio+0x3c>)
 8014a06:	4299      	cmp	r1, r3
 8014a08:	d004      	beq.n	8014a14 <cleanup_stdio+0x30>
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a10:	f002 be58 	b.w	80176c4 <_fflush_r>
 8014a14:	bd10      	pop	{r4, pc}
 8014a16:	bf00      	nop
 8014a18:	20004bc4 	.word	0x20004bc4
 8014a1c:	20004c2c 	.word	0x20004c2c
 8014a20:	20004c94 	.word	0x20004c94

08014a24 <global_stdio_init.part.0>:
 8014a24:	b510      	push	{r4, lr}
 8014a26:	4b0b      	ldr	r3, [pc, #44]	@ (8014a54 <global_stdio_init.part.0+0x30>)
 8014a28:	4c0b      	ldr	r4, [pc, #44]	@ (8014a58 <global_stdio_init.part.0+0x34>)
 8014a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8014a5c <global_stdio_init.part.0+0x38>)
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	4620      	mov	r0, r4
 8014a30:	2200      	movs	r2, #0
 8014a32:	2104      	movs	r1, #4
 8014a34:	f7ff ff94 	bl	8014960 <std>
 8014a38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014a3c:	2201      	movs	r2, #1
 8014a3e:	2109      	movs	r1, #9
 8014a40:	f7ff ff8e 	bl	8014960 <std>
 8014a44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014a48:	2202      	movs	r2, #2
 8014a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a4e:	2112      	movs	r1, #18
 8014a50:	f7ff bf86 	b.w	8014960 <std>
 8014a54:	20004cfc 	.word	0x20004cfc
 8014a58:	20004bc4 	.word	0x20004bc4
 8014a5c:	080149cd 	.word	0x080149cd

08014a60 <__sfp_lock_acquire>:
 8014a60:	4801      	ldr	r0, [pc, #4]	@ (8014a68 <__sfp_lock_acquire+0x8>)
 8014a62:	f000 b9b6 	b.w	8014dd2 <__retarget_lock_acquire_recursive>
 8014a66:	bf00      	nop
 8014a68:	20004d05 	.word	0x20004d05

08014a6c <__sfp_lock_release>:
 8014a6c:	4801      	ldr	r0, [pc, #4]	@ (8014a74 <__sfp_lock_release+0x8>)
 8014a6e:	f000 b9b1 	b.w	8014dd4 <__retarget_lock_release_recursive>
 8014a72:	bf00      	nop
 8014a74:	20004d05 	.word	0x20004d05

08014a78 <__sinit>:
 8014a78:	b510      	push	{r4, lr}
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	f7ff fff0 	bl	8014a60 <__sfp_lock_acquire>
 8014a80:	6a23      	ldr	r3, [r4, #32]
 8014a82:	b11b      	cbz	r3, 8014a8c <__sinit+0x14>
 8014a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a88:	f7ff bff0 	b.w	8014a6c <__sfp_lock_release>
 8014a8c:	4b04      	ldr	r3, [pc, #16]	@ (8014aa0 <__sinit+0x28>)
 8014a8e:	6223      	str	r3, [r4, #32]
 8014a90:	4b04      	ldr	r3, [pc, #16]	@ (8014aa4 <__sinit+0x2c>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d1f5      	bne.n	8014a84 <__sinit+0xc>
 8014a98:	f7ff ffc4 	bl	8014a24 <global_stdio_init.part.0>
 8014a9c:	e7f2      	b.n	8014a84 <__sinit+0xc>
 8014a9e:	bf00      	nop
 8014aa0:	080149e5 	.word	0x080149e5
 8014aa4:	20004cfc 	.word	0x20004cfc

08014aa8 <_fwalk_sglue>:
 8014aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014aac:	4607      	mov	r7, r0
 8014aae:	4688      	mov	r8, r1
 8014ab0:	4614      	mov	r4, r2
 8014ab2:	2600      	movs	r6, #0
 8014ab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ab8:	f1b9 0901 	subs.w	r9, r9, #1
 8014abc:	d505      	bpl.n	8014aca <_fwalk_sglue+0x22>
 8014abe:	6824      	ldr	r4, [r4, #0]
 8014ac0:	2c00      	cmp	r4, #0
 8014ac2:	d1f7      	bne.n	8014ab4 <_fwalk_sglue+0xc>
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aca:	89ab      	ldrh	r3, [r5, #12]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d907      	bls.n	8014ae0 <_fwalk_sglue+0x38>
 8014ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	d003      	beq.n	8014ae0 <_fwalk_sglue+0x38>
 8014ad8:	4629      	mov	r1, r5
 8014ada:	4638      	mov	r0, r7
 8014adc:	47c0      	blx	r8
 8014ade:	4306      	orrs	r6, r0
 8014ae0:	3568      	adds	r5, #104	@ 0x68
 8014ae2:	e7e9      	b.n	8014ab8 <_fwalk_sglue+0x10>

08014ae4 <sniprintf>:
 8014ae4:	b40c      	push	{r2, r3}
 8014ae6:	b530      	push	{r4, r5, lr}
 8014ae8:	4b18      	ldr	r3, [pc, #96]	@ (8014b4c <sniprintf+0x68>)
 8014aea:	1e0c      	subs	r4, r1, #0
 8014aec:	681d      	ldr	r5, [r3, #0]
 8014aee:	b09d      	sub	sp, #116	@ 0x74
 8014af0:	da08      	bge.n	8014b04 <sniprintf+0x20>
 8014af2:	238b      	movs	r3, #139	@ 0x8b
 8014af4:	602b      	str	r3, [r5, #0]
 8014af6:	f04f 30ff 	mov.w	r0, #4294967295
 8014afa:	b01d      	add	sp, #116	@ 0x74
 8014afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b00:	b002      	add	sp, #8
 8014b02:	4770      	bx	lr
 8014b04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014b08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b0c:	f04f 0300 	mov.w	r3, #0
 8014b10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014b12:	bf14      	ite	ne
 8014b14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b18:	4623      	moveq	r3, r4
 8014b1a:	9304      	str	r3, [sp, #16]
 8014b1c:	9307      	str	r3, [sp, #28]
 8014b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014b22:	9002      	str	r0, [sp, #8]
 8014b24:	9006      	str	r0, [sp, #24]
 8014b26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014b2c:	ab21      	add	r3, sp, #132	@ 0x84
 8014b2e:	a902      	add	r1, sp, #8
 8014b30:	4628      	mov	r0, r5
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	f002 fc46 	bl	80173c4 <_svfiprintf_r>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	bfbc      	itt	lt
 8014b3c:	238b      	movlt	r3, #139	@ 0x8b
 8014b3e:	602b      	strlt	r3, [r5, #0]
 8014b40:	2c00      	cmp	r4, #0
 8014b42:	d0da      	beq.n	8014afa <sniprintf+0x16>
 8014b44:	9b02      	ldr	r3, [sp, #8]
 8014b46:	2200      	movs	r2, #0
 8014b48:	701a      	strb	r2, [r3, #0]
 8014b4a:	e7d6      	b.n	8014afa <sniprintf+0x16>
 8014b4c:	20000054 	.word	0x20000054

08014b50 <siprintf>:
 8014b50:	b40e      	push	{r1, r2, r3}
 8014b52:	b510      	push	{r4, lr}
 8014b54:	b09d      	sub	sp, #116	@ 0x74
 8014b56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014b58:	9002      	str	r0, [sp, #8]
 8014b5a:	9006      	str	r0, [sp, #24]
 8014b5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b60:	480a      	ldr	r0, [pc, #40]	@ (8014b8c <siprintf+0x3c>)
 8014b62:	9107      	str	r1, [sp, #28]
 8014b64:	9104      	str	r1, [sp, #16]
 8014b66:	490a      	ldr	r1, [pc, #40]	@ (8014b90 <siprintf+0x40>)
 8014b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b6c:	9105      	str	r1, [sp, #20]
 8014b6e:	2400      	movs	r4, #0
 8014b70:	a902      	add	r1, sp, #8
 8014b72:	6800      	ldr	r0, [r0, #0]
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014b78:	f002 fc24 	bl	80173c4 <_svfiprintf_r>
 8014b7c:	9b02      	ldr	r3, [sp, #8]
 8014b7e:	701c      	strb	r4, [r3, #0]
 8014b80:	b01d      	add	sp, #116	@ 0x74
 8014b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b86:	b003      	add	sp, #12
 8014b88:	4770      	bx	lr
 8014b8a:	bf00      	nop
 8014b8c:	20000054 	.word	0x20000054
 8014b90:	ffff0208 	.word	0xffff0208

08014b94 <__sread>:
 8014b94:	b510      	push	{r4, lr}
 8014b96:	460c      	mov	r4, r1
 8014b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b9c:	f000 f8ca 	bl	8014d34 <_read_r>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	bfab      	itete	ge
 8014ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ba8:	181b      	addge	r3, r3, r0
 8014baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014bae:	bfac      	ite	ge
 8014bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014bb2:	81a3      	strhlt	r3, [r4, #12]
 8014bb4:	bd10      	pop	{r4, pc}

08014bb6 <__swrite>:
 8014bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bba:	461f      	mov	r7, r3
 8014bbc:	898b      	ldrh	r3, [r1, #12]
 8014bbe:	05db      	lsls	r3, r3, #23
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	4616      	mov	r6, r2
 8014bc6:	d505      	bpl.n	8014bd4 <__swrite+0x1e>
 8014bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bcc:	2302      	movs	r3, #2
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f000 f89e 	bl	8014d10 <_lseek_r>
 8014bd4:	89a3      	ldrh	r3, [r4, #12]
 8014bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014bde:	81a3      	strh	r3, [r4, #12]
 8014be0:	4632      	mov	r2, r6
 8014be2:	463b      	mov	r3, r7
 8014be4:	4628      	mov	r0, r5
 8014be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bea:	f000 b8b5 	b.w	8014d58 <_write_r>

08014bee <__sseek>:
 8014bee:	b510      	push	{r4, lr}
 8014bf0:	460c      	mov	r4, r1
 8014bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bf6:	f000 f88b 	bl	8014d10 <_lseek_r>
 8014bfa:	1c43      	adds	r3, r0, #1
 8014bfc:	89a3      	ldrh	r3, [r4, #12]
 8014bfe:	bf15      	itete	ne
 8014c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c0a:	81a3      	strheq	r3, [r4, #12]
 8014c0c:	bf18      	it	ne
 8014c0e:	81a3      	strhne	r3, [r4, #12]
 8014c10:	bd10      	pop	{r4, pc}

08014c12 <__sclose>:
 8014c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c16:	f000 b80d 	b.w	8014c34 <_close_r>

08014c1a <memset>:
 8014c1a:	4402      	add	r2, r0
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d100      	bne.n	8014c24 <memset+0xa>
 8014c22:	4770      	bx	lr
 8014c24:	f803 1b01 	strb.w	r1, [r3], #1
 8014c28:	e7f9      	b.n	8014c1e <memset+0x4>
	...

08014c2c <_localeconv_r>:
 8014c2c:	4800      	ldr	r0, [pc, #0]	@ (8014c30 <_localeconv_r+0x4>)
 8014c2e:	4770      	bx	lr
 8014c30:	20000194 	.word	0x20000194

08014c34 <_close_r>:
 8014c34:	b538      	push	{r3, r4, r5, lr}
 8014c36:	4d06      	ldr	r5, [pc, #24]	@ (8014c50 <_close_r+0x1c>)
 8014c38:	2300      	movs	r3, #0
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	4608      	mov	r0, r1
 8014c3e:	602b      	str	r3, [r5, #0]
 8014c40:	f7ef fc36 	bl	80044b0 <_close>
 8014c44:	1c43      	adds	r3, r0, #1
 8014c46:	d102      	bne.n	8014c4e <_close_r+0x1a>
 8014c48:	682b      	ldr	r3, [r5, #0]
 8014c4a:	b103      	cbz	r3, 8014c4e <_close_r+0x1a>
 8014c4c:	6023      	str	r3, [r4, #0]
 8014c4e:	bd38      	pop	{r3, r4, r5, pc}
 8014c50:	20004d00 	.word	0x20004d00

08014c54 <_reclaim_reent>:
 8014c54:	4b2d      	ldr	r3, [pc, #180]	@ (8014d0c <_reclaim_reent+0xb8>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4283      	cmp	r3, r0
 8014c5a:	b570      	push	{r4, r5, r6, lr}
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	d053      	beq.n	8014d08 <_reclaim_reent+0xb4>
 8014c60:	69c3      	ldr	r3, [r0, #28]
 8014c62:	b31b      	cbz	r3, 8014cac <_reclaim_reent+0x58>
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	b163      	cbz	r3, 8014c82 <_reclaim_reent+0x2e>
 8014c68:	2500      	movs	r5, #0
 8014c6a:	69e3      	ldr	r3, [r4, #28]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	5959      	ldr	r1, [r3, r5]
 8014c70:	b9b1      	cbnz	r1, 8014ca0 <_reclaim_reent+0x4c>
 8014c72:	3504      	adds	r5, #4
 8014c74:	2d80      	cmp	r5, #128	@ 0x80
 8014c76:	d1f8      	bne.n	8014c6a <_reclaim_reent+0x16>
 8014c78:	69e3      	ldr	r3, [r4, #28]
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	68d9      	ldr	r1, [r3, #12]
 8014c7e:	f000 ff17 	bl	8015ab0 <_free_r>
 8014c82:	69e3      	ldr	r3, [r4, #28]
 8014c84:	6819      	ldr	r1, [r3, #0]
 8014c86:	b111      	cbz	r1, 8014c8e <_reclaim_reent+0x3a>
 8014c88:	4620      	mov	r0, r4
 8014c8a:	f000 ff11 	bl	8015ab0 <_free_r>
 8014c8e:	69e3      	ldr	r3, [r4, #28]
 8014c90:	689d      	ldr	r5, [r3, #8]
 8014c92:	b15d      	cbz	r5, 8014cac <_reclaim_reent+0x58>
 8014c94:	4629      	mov	r1, r5
 8014c96:	4620      	mov	r0, r4
 8014c98:	682d      	ldr	r5, [r5, #0]
 8014c9a:	f000 ff09 	bl	8015ab0 <_free_r>
 8014c9e:	e7f8      	b.n	8014c92 <_reclaim_reent+0x3e>
 8014ca0:	680e      	ldr	r6, [r1, #0]
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f000 ff04 	bl	8015ab0 <_free_r>
 8014ca8:	4631      	mov	r1, r6
 8014caa:	e7e1      	b.n	8014c70 <_reclaim_reent+0x1c>
 8014cac:	6961      	ldr	r1, [r4, #20]
 8014cae:	b111      	cbz	r1, 8014cb6 <_reclaim_reent+0x62>
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	f000 fefd 	bl	8015ab0 <_free_r>
 8014cb6:	69e1      	ldr	r1, [r4, #28]
 8014cb8:	b111      	cbz	r1, 8014cc0 <_reclaim_reent+0x6c>
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f000 fef8 	bl	8015ab0 <_free_r>
 8014cc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014cc2:	b111      	cbz	r1, 8014cca <_reclaim_reent+0x76>
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f000 fef3 	bl	8015ab0 <_free_r>
 8014cca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ccc:	b111      	cbz	r1, 8014cd4 <_reclaim_reent+0x80>
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f000 feee 	bl	8015ab0 <_free_r>
 8014cd4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014cd6:	b111      	cbz	r1, 8014cde <_reclaim_reent+0x8a>
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f000 fee9 	bl	8015ab0 <_free_r>
 8014cde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014ce0:	b111      	cbz	r1, 8014ce8 <_reclaim_reent+0x94>
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	f000 fee4 	bl	8015ab0 <_free_r>
 8014ce8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014cea:	b111      	cbz	r1, 8014cf2 <_reclaim_reent+0x9e>
 8014cec:	4620      	mov	r0, r4
 8014cee:	f000 fedf 	bl	8015ab0 <_free_r>
 8014cf2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014cf4:	b111      	cbz	r1, 8014cfc <_reclaim_reent+0xa8>
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f000 feda 	bl	8015ab0 <_free_r>
 8014cfc:	6a23      	ldr	r3, [r4, #32]
 8014cfe:	b11b      	cbz	r3, 8014d08 <_reclaim_reent+0xb4>
 8014d00:	4620      	mov	r0, r4
 8014d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d06:	4718      	bx	r3
 8014d08:	bd70      	pop	{r4, r5, r6, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20000054 	.word	0x20000054

08014d10 <_lseek_r>:
 8014d10:	b538      	push	{r3, r4, r5, lr}
 8014d12:	4d07      	ldr	r5, [pc, #28]	@ (8014d30 <_lseek_r+0x20>)
 8014d14:	4604      	mov	r4, r0
 8014d16:	4608      	mov	r0, r1
 8014d18:	4611      	mov	r1, r2
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	602a      	str	r2, [r5, #0]
 8014d1e:	461a      	mov	r2, r3
 8014d20:	f7ef fbed 	bl	80044fe <_lseek>
 8014d24:	1c43      	adds	r3, r0, #1
 8014d26:	d102      	bne.n	8014d2e <_lseek_r+0x1e>
 8014d28:	682b      	ldr	r3, [r5, #0]
 8014d2a:	b103      	cbz	r3, 8014d2e <_lseek_r+0x1e>
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	bd38      	pop	{r3, r4, r5, pc}
 8014d30:	20004d00 	.word	0x20004d00

08014d34 <_read_r>:
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	4d07      	ldr	r5, [pc, #28]	@ (8014d54 <_read_r+0x20>)
 8014d38:	4604      	mov	r4, r0
 8014d3a:	4608      	mov	r0, r1
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	2200      	movs	r2, #0
 8014d40:	602a      	str	r2, [r5, #0]
 8014d42:	461a      	mov	r2, r3
 8014d44:	f7ef fb7b 	bl	800443e <_read>
 8014d48:	1c43      	adds	r3, r0, #1
 8014d4a:	d102      	bne.n	8014d52 <_read_r+0x1e>
 8014d4c:	682b      	ldr	r3, [r5, #0]
 8014d4e:	b103      	cbz	r3, 8014d52 <_read_r+0x1e>
 8014d50:	6023      	str	r3, [r4, #0]
 8014d52:	bd38      	pop	{r3, r4, r5, pc}
 8014d54:	20004d00 	.word	0x20004d00

08014d58 <_write_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4d07      	ldr	r5, [pc, #28]	@ (8014d78 <_write_r+0x20>)
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	4608      	mov	r0, r1
 8014d60:	4611      	mov	r1, r2
 8014d62:	2200      	movs	r2, #0
 8014d64:	602a      	str	r2, [r5, #0]
 8014d66:	461a      	mov	r2, r3
 8014d68:	f7ef fb86 	bl	8004478 <_write>
 8014d6c:	1c43      	adds	r3, r0, #1
 8014d6e:	d102      	bne.n	8014d76 <_write_r+0x1e>
 8014d70:	682b      	ldr	r3, [r5, #0]
 8014d72:	b103      	cbz	r3, 8014d76 <_write_r+0x1e>
 8014d74:	6023      	str	r3, [r4, #0]
 8014d76:	bd38      	pop	{r3, r4, r5, pc}
 8014d78:	20004d00 	.word	0x20004d00

08014d7c <__errno>:
 8014d7c:	4b01      	ldr	r3, [pc, #4]	@ (8014d84 <__errno+0x8>)
 8014d7e:	6818      	ldr	r0, [r3, #0]
 8014d80:	4770      	bx	lr
 8014d82:	bf00      	nop
 8014d84:	20000054 	.word	0x20000054

08014d88 <__libc_init_array>:
 8014d88:	b570      	push	{r4, r5, r6, lr}
 8014d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8014dc0 <__libc_init_array+0x38>)
 8014d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8014dc4 <__libc_init_array+0x3c>)
 8014d8e:	1b64      	subs	r4, r4, r5
 8014d90:	10a4      	asrs	r4, r4, #2
 8014d92:	2600      	movs	r6, #0
 8014d94:	42a6      	cmp	r6, r4
 8014d96:	d109      	bne.n	8014dac <__libc_init_array+0x24>
 8014d98:	4d0b      	ldr	r5, [pc, #44]	@ (8014dc8 <__libc_init_array+0x40>)
 8014d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8014dcc <__libc_init_array+0x44>)
 8014d9c:	f003 ff3c 	bl	8018c18 <_init>
 8014da0:	1b64      	subs	r4, r4, r5
 8014da2:	10a4      	asrs	r4, r4, #2
 8014da4:	2600      	movs	r6, #0
 8014da6:	42a6      	cmp	r6, r4
 8014da8:	d105      	bne.n	8014db6 <__libc_init_array+0x2e>
 8014daa:	bd70      	pop	{r4, r5, r6, pc}
 8014dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8014db0:	4798      	blx	r3
 8014db2:	3601      	adds	r6, #1
 8014db4:	e7ee      	b.n	8014d94 <__libc_init_array+0xc>
 8014db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dba:	4798      	blx	r3
 8014dbc:	3601      	adds	r6, #1
 8014dbe:	e7f2      	b.n	8014da6 <__libc_init_array+0x1e>
 8014dc0:	0801b37c 	.word	0x0801b37c
 8014dc4:	0801b37c 	.word	0x0801b37c
 8014dc8:	0801b37c 	.word	0x0801b37c
 8014dcc:	0801b380 	.word	0x0801b380

08014dd0 <__retarget_lock_init_recursive>:
 8014dd0:	4770      	bx	lr

08014dd2 <__retarget_lock_acquire_recursive>:
 8014dd2:	4770      	bx	lr

08014dd4 <__retarget_lock_release_recursive>:
 8014dd4:	4770      	bx	lr

08014dd6 <memcpy>:
 8014dd6:	440a      	add	r2, r1
 8014dd8:	4291      	cmp	r1, r2
 8014dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8014dde:	d100      	bne.n	8014de2 <memcpy+0xc>
 8014de0:	4770      	bx	lr
 8014de2:	b510      	push	{r4, lr}
 8014de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dec:	4291      	cmp	r1, r2
 8014dee:	d1f9      	bne.n	8014de4 <memcpy+0xe>
 8014df0:	bd10      	pop	{r4, pc}
	...

08014df4 <nanf>:
 8014df4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014dfc <nanf+0x8>
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	7fc00000 	.word	0x7fc00000

08014e00 <quorem>:
 8014e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	6903      	ldr	r3, [r0, #16]
 8014e06:	690c      	ldr	r4, [r1, #16]
 8014e08:	42a3      	cmp	r3, r4
 8014e0a:	4607      	mov	r7, r0
 8014e0c:	db7e      	blt.n	8014f0c <quorem+0x10c>
 8014e0e:	3c01      	subs	r4, #1
 8014e10:	f101 0814 	add.w	r8, r1, #20
 8014e14:	00a3      	lsls	r3, r4, #2
 8014e16:	f100 0514 	add.w	r5, r0, #20
 8014e1a:	9300      	str	r3, [sp, #0]
 8014e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e20:	9301      	str	r3, [sp, #4]
 8014e22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e32:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e36:	d32e      	bcc.n	8014e96 <quorem+0x96>
 8014e38:	f04f 0a00 	mov.w	sl, #0
 8014e3c:	46c4      	mov	ip, r8
 8014e3e:	46ae      	mov	lr, r5
 8014e40:	46d3      	mov	fp, sl
 8014e42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e46:	b298      	uxth	r0, r3
 8014e48:	fb06 a000 	mla	r0, r6, r0, sl
 8014e4c:	0c02      	lsrs	r2, r0, #16
 8014e4e:	0c1b      	lsrs	r3, r3, #16
 8014e50:	fb06 2303 	mla	r3, r6, r3, r2
 8014e54:	f8de 2000 	ldr.w	r2, [lr]
 8014e58:	b280      	uxth	r0, r0
 8014e5a:	b292      	uxth	r2, r2
 8014e5c:	1a12      	subs	r2, r2, r0
 8014e5e:	445a      	add	r2, fp
 8014e60:	f8de 0000 	ldr.w	r0, [lr]
 8014e64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014e6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014e72:	b292      	uxth	r2, r2
 8014e74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014e78:	45e1      	cmp	r9, ip
 8014e7a:	f84e 2b04 	str.w	r2, [lr], #4
 8014e7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014e82:	d2de      	bcs.n	8014e42 <quorem+0x42>
 8014e84:	9b00      	ldr	r3, [sp, #0]
 8014e86:	58eb      	ldr	r3, [r5, r3]
 8014e88:	b92b      	cbnz	r3, 8014e96 <quorem+0x96>
 8014e8a:	9b01      	ldr	r3, [sp, #4]
 8014e8c:	3b04      	subs	r3, #4
 8014e8e:	429d      	cmp	r5, r3
 8014e90:	461a      	mov	r2, r3
 8014e92:	d32f      	bcc.n	8014ef4 <quorem+0xf4>
 8014e94:	613c      	str	r4, [r7, #16]
 8014e96:	4638      	mov	r0, r7
 8014e98:	f001 f9c6 	bl	8016228 <__mcmp>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	db25      	blt.n	8014eec <quorem+0xec>
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ea8:	f8d1 c000 	ldr.w	ip, [r1]
 8014eac:	fa1f fe82 	uxth.w	lr, r2
 8014eb0:	fa1f f38c 	uxth.w	r3, ip
 8014eb4:	eba3 030e 	sub.w	r3, r3, lr
 8014eb8:	4403      	add	r3, r0
 8014eba:	0c12      	lsrs	r2, r2, #16
 8014ebc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ec0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014eca:	45c1      	cmp	r9, r8
 8014ecc:	f841 3b04 	str.w	r3, [r1], #4
 8014ed0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014ed4:	d2e6      	bcs.n	8014ea4 <quorem+0xa4>
 8014ed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ede:	b922      	cbnz	r2, 8014eea <quorem+0xea>
 8014ee0:	3b04      	subs	r3, #4
 8014ee2:	429d      	cmp	r5, r3
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	d30b      	bcc.n	8014f00 <quorem+0x100>
 8014ee8:	613c      	str	r4, [r7, #16]
 8014eea:	3601      	adds	r6, #1
 8014eec:	4630      	mov	r0, r6
 8014eee:	b003      	add	sp, #12
 8014ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	6812      	ldr	r2, [r2, #0]
 8014ef6:	3b04      	subs	r3, #4
 8014ef8:	2a00      	cmp	r2, #0
 8014efa:	d1cb      	bne.n	8014e94 <quorem+0x94>
 8014efc:	3c01      	subs	r4, #1
 8014efe:	e7c6      	b.n	8014e8e <quorem+0x8e>
 8014f00:	6812      	ldr	r2, [r2, #0]
 8014f02:	3b04      	subs	r3, #4
 8014f04:	2a00      	cmp	r2, #0
 8014f06:	d1ef      	bne.n	8014ee8 <quorem+0xe8>
 8014f08:	3c01      	subs	r4, #1
 8014f0a:	e7ea      	b.n	8014ee2 <quorem+0xe2>
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	e7ee      	b.n	8014eee <quorem+0xee>

08014f10 <_dtoa_r>:
 8014f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f14:	69c7      	ldr	r7, [r0, #28]
 8014f16:	b097      	sub	sp, #92	@ 0x5c
 8014f18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014f1c:	ec55 4b10 	vmov	r4, r5, d0
 8014f20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014f22:	9107      	str	r1, [sp, #28]
 8014f24:	4681      	mov	r9, r0
 8014f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8014f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8014f2a:	b97f      	cbnz	r7, 8014f4c <_dtoa_r+0x3c>
 8014f2c:	2010      	movs	r0, #16
 8014f2e:	f000 fe09 	bl	8015b44 <malloc>
 8014f32:	4602      	mov	r2, r0
 8014f34:	f8c9 001c 	str.w	r0, [r9, #28]
 8014f38:	b920      	cbnz	r0, 8014f44 <_dtoa_r+0x34>
 8014f3a:	4ba9      	ldr	r3, [pc, #676]	@ (80151e0 <_dtoa_r+0x2d0>)
 8014f3c:	21ef      	movs	r1, #239	@ 0xef
 8014f3e:	48a9      	ldr	r0, [pc, #676]	@ (80151e4 <_dtoa_r+0x2d4>)
 8014f40:	f002 fc2e 	bl	80177a0 <__assert_func>
 8014f44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014f48:	6007      	str	r7, [r0, #0]
 8014f4a:	60c7      	str	r7, [r0, #12]
 8014f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f50:	6819      	ldr	r1, [r3, #0]
 8014f52:	b159      	cbz	r1, 8014f6c <_dtoa_r+0x5c>
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	604a      	str	r2, [r1, #4]
 8014f58:	2301      	movs	r3, #1
 8014f5a:	4093      	lsls	r3, r2
 8014f5c:	608b      	str	r3, [r1, #8]
 8014f5e:	4648      	mov	r0, r9
 8014f60:	f000 fee6 	bl	8015d30 <_Bfree>
 8014f64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	601a      	str	r2, [r3, #0]
 8014f6c:	1e2b      	subs	r3, r5, #0
 8014f6e:	bfb9      	ittee	lt
 8014f70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014f74:	9305      	strlt	r3, [sp, #20]
 8014f76:	2300      	movge	r3, #0
 8014f78:	6033      	strge	r3, [r6, #0]
 8014f7a:	9f05      	ldr	r7, [sp, #20]
 8014f7c:	4b9a      	ldr	r3, [pc, #616]	@ (80151e8 <_dtoa_r+0x2d8>)
 8014f7e:	bfbc      	itt	lt
 8014f80:	2201      	movlt	r2, #1
 8014f82:	6032      	strlt	r2, [r6, #0]
 8014f84:	43bb      	bics	r3, r7
 8014f86:	d112      	bne.n	8014fae <_dtoa_r+0x9e>
 8014f88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014f8e:	6013      	str	r3, [r2, #0]
 8014f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f94:	4323      	orrs	r3, r4
 8014f96:	f000 855a 	beq.w	8015a4e <_dtoa_r+0xb3e>
 8014f9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014f9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80151fc <_dtoa_r+0x2ec>
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f000 855c 	beq.w	8015a5e <_dtoa_r+0xb4e>
 8014fa6:	f10a 0303 	add.w	r3, sl, #3
 8014faa:	f000 bd56 	b.w	8015a5a <_dtoa_r+0xb4a>
 8014fae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	ec51 0b17 	vmov	r0, r1, d7
 8014fb8:	2300      	movs	r3, #0
 8014fba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014fbe:	f7eb fdab 	bl	8000b18 <__aeabi_dcmpeq>
 8014fc2:	4680      	mov	r8, r0
 8014fc4:	b158      	cbz	r0, 8014fde <_dtoa_r+0xce>
 8014fc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014fc8:	2301      	movs	r3, #1
 8014fca:	6013      	str	r3, [r2, #0]
 8014fcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014fce:	b113      	cbz	r3, 8014fd6 <_dtoa_r+0xc6>
 8014fd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014fd2:	4b86      	ldr	r3, [pc, #536]	@ (80151ec <_dtoa_r+0x2dc>)
 8014fd4:	6013      	str	r3, [r2, #0]
 8014fd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015200 <_dtoa_r+0x2f0>
 8014fda:	f000 bd40 	b.w	8015a5e <_dtoa_r+0xb4e>
 8014fde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014fe2:	aa14      	add	r2, sp, #80	@ 0x50
 8014fe4:	a915      	add	r1, sp, #84	@ 0x54
 8014fe6:	4648      	mov	r0, r9
 8014fe8:	f001 fa3e 	bl	8016468 <__d2b>
 8014fec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014ff0:	9002      	str	r0, [sp, #8]
 8014ff2:	2e00      	cmp	r6, #0
 8014ff4:	d078      	beq.n	80150e8 <_dtoa_r+0x1d8>
 8014ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ff8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801500c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015010:	4619      	mov	r1, r3
 8015012:	2200      	movs	r2, #0
 8015014:	4b76      	ldr	r3, [pc, #472]	@ (80151f0 <_dtoa_r+0x2e0>)
 8015016:	f7eb f95f 	bl	80002d8 <__aeabi_dsub>
 801501a:	a36b      	add	r3, pc, #428	@ (adr r3, 80151c8 <_dtoa_r+0x2b8>)
 801501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015020:	f7eb fb12 	bl	8000648 <__aeabi_dmul>
 8015024:	a36a      	add	r3, pc, #424	@ (adr r3, 80151d0 <_dtoa_r+0x2c0>)
 8015026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502a:	f7eb f957 	bl	80002dc <__adddf3>
 801502e:	4604      	mov	r4, r0
 8015030:	4630      	mov	r0, r6
 8015032:	460d      	mov	r5, r1
 8015034:	f7eb fa9e 	bl	8000574 <__aeabi_i2d>
 8015038:	a367      	add	r3, pc, #412	@ (adr r3, 80151d8 <_dtoa_r+0x2c8>)
 801503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503e:	f7eb fb03 	bl	8000648 <__aeabi_dmul>
 8015042:	4602      	mov	r2, r0
 8015044:	460b      	mov	r3, r1
 8015046:	4620      	mov	r0, r4
 8015048:	4629      	mov	r1, r5
 801504a:	f7eb f947 	bl	80002dc <__adddf3>
 801504e:	4604      	mov	r4, r0
 8015050:	460d      	mov	r5, r1
 8015052:	f7eb fda9 	bl	8000ba8 <__aeabi_d2iz>
 8015056:	2200      	movs	r2, #0
 8015058:	4607      	mov	r7, r0
 801505a:	2300      	movs	r3, #0
 801505c:	4620      	mov	r0, r4
 801505e:	4629      	mov	r1, r5
 8015060:	f7eb fd64 	bl	8000b2c <__aeabi_dcmplt>
 8015064:	b140      	cbz	r0, 8015078 <_dtoa_r+0x168>
 8015066:	4638      	mov	r0, r7
 8015068:	f7eb fa84 	bl	8000574 <__aeabi_i2d>
 801506c:	4622      	mov	r2, r4
 801506e:	462b      	mov	r3, r5
 8015070:	f7eb fd52 	bl	8000b18 <__aeabi_dcmpeq>
 8015074:	b900      	cbnz	r0, 8015078 <_dtoa_r+0x168>
 8015076:	3f01      	subs	r7, #1
 8015078:	2f16      	cmp	r7, #22
 801507a:	d852      	bhi.n	8015122 <_dtoa_r+0x212>
 801507c:	4b5d      	ldr	r3, [pc, #372]	@ (80151f4 <_dtoa_r+0x2e4>)
 801507e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801508a:	f7eb fd4f 	bl	8000b2c <__aeabi_dcmplt>
 801508e:	2800      	cmp	r0, #0
 8015090:	d049      	beq.n	8015126 <_dtoa_r+0x216>
 8015092:	3f01      	subs	r7, #1
 8015094:	2300      	movs	r3, #0
 8015096:	9310      	str	r3, [sp, #64]	@ 0x40
 8015098:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801509a:	1b9b      	subs	r3, r3, r6
 801509c:	1e5a      	subs	r2, r3, #1
 801509e:	bf45      	ittet	mi
 80150a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80150a4:	9300      	strmi	r3, [sp, #0]
 80150a6:	2300      	movpl	r3, #0
 80150a8:	2300      	movmi	r3, #0
 80150aa:	9206      	str	r2, [sp, #24]
 80150ac:	bf54      	ite	pl
 80150ae:	9300      	strpl	r3, [sp, #0]
 80150b0:	9306      	strmi	r3, [sp, #24]
 80150b2:	2f00      	cmp	r7, #0
 80150b4:	db39      	blt.n	801512a <_dtoa_r+0x21a>
 80150b6:	9b06      	ldr	r3, [sp, #24]
 80150b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80150ba:	443b      	add	r3, r7
 80150bc:	9306      	str	r3, [sp, #24]
 80150be:	2300      	movs	r3, #0
 80150c0:	9308      	str	r3, [sp, #32]
 80150c2:	9b07      	ldr	r3, [sp, #28]
 80150c4:	2b09      	cmp	r3, #9
 80150c6:	d863      	bhi.n	8015190 <_dtoa_r+0x280>
 80150c8:	2b05      	cmp	r3, #5
 80150ca:	bfc4      	itt	gt
 80150cc:	3b04      	subgt	r3, #4
 80150ce:	9307      	strgt	r3, [sp, #28]
 80150d0:	9b07      	ldr	r3, [sp, #28]
 80150d2:	f1a3 0302 	sub.w	r3, r3, #2
 80150d6:	bfcc      	ite	gt
 80150d8:	2400      	movgt	r4, #0
 80150da:	2401      	movle	r4, #1
 80150dc:	2b03      	cmp	r3, #3
 80150de:	d863      	bhi.n	80151a8 <_dtoa_r+0x298>
 80150e0:	e8df f003 	tbb	[pc, r3]
 80150e4:	2b375452 	.word	0x2b375452
 80150e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80150ec:	441e      	add	r6, r3
 80150ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80150f2:	2b20      	cmp	r3, #32
 80150f4:	bfc1      	itttt	gt
 80150f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80150fa:	409f      	lslgt	r7, r3
 80150fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015100:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015104:	bfd6      	itet	le
 8015106:	f1c3 0320 	rsble	r3, r3, #32
 801510a:	ea47 0003 	orrgt.w	r0, r7, r3
 801510e:	fa04 f003 	lslle.w	r0, r4, r3
 8015112:	f7eb fa1f 	bl	8000554 <__aeabi_ui2d>
 8015116:	2201      	movs	r2, #1
 8015118:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801511c:	3e01      	subs	r6, #1
 801511e:	9212      	str	r2, [sp, #72]	@ 0x48
 8015120:	e776      	b.n	8015010 <_dtoa_r+0x100>
 8015122:	2301      	movs	r3, #1
 8015124:	e7b7      	b.n	8015096 <_dtoa_r+0x186>
 8015126:	9010      	str	r0, [sp, #64]	@ 0x40
 8015128:	e7b6      	b.n	8015098 <_dtoa_r+0x188>
 801512a:	9b00      	ldr	r3, [sp, #0]
 801512c:	1bdb      	subs	r3, r3, r7
 801512e:	9300      	str	r3, [sp, #0]
 8015130:	427b      	negs	r3, r7
 8015132:	9308      	str	r3, [sp, #32]
 8015134:	2300      	movs	r3, #0
 8015136:	930d      	str	r3, [sp, #52]	@ 0x34
 8015138:	e7c3      	b.n	80150c2 <_dtoa_r+0x1b2>
 801513a:	2301      	movs	r3, #1
 801513c:	9309      	str	r3, [sp, #36]	@ 0x24
 801513e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015140:	eb07 0b03 	add.w	fp, r7, r3
 8015144:	f10b 0301 	add.w	r3, fp, #1
 8015148:	2b01      	cmp	r3, #1
 801514a:	9303      	str	r3, [sp, #12]
 801514c:	bfb8      	it	lt
 801514e:	2301      	movlt	r3, #1
 8015150:	e006      	b.n	8015160 <_dtoa_r+0x250>
 8015152:	2301      	movs	r3, #1
 8015154:	9309      	str	r3, [sp, #36]	@ 0x24
 8015156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015158:	2b00      	cmp	r3, #0
 801515a:	dd28      	ble.n	80151ae <_dtoa_r+0x29e>
 801515c:	469b      	mov	fp, r3
 801515e:	9303      	str	r3, [sp, #12]
 8015160:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8015164:	2100      	movs	r1, #0
 8015166:	2204      	movs	r2, #4
 8015168:	f102 0514 	add.w	r5, r2, #20
 801516c:	429d      	cmp	r5, r3
 801516e:	d926      	bls.n	80151be <_dtoa_r+0x2ae>
 8015170:	6041      	str	r1, [r0, #4]
 8015172:	4648      	mov	r0, r9
 8015174:	f000 fd9c 	bl	8015cb0 <_Balloc>
 8015178:	4682      	mov	sl, r0
 801517a:	2800      	cmp	r0, #0
 801517c:	d142      	bne.n	8015204 <_dtoa_r+0x2f4>
 801517e:	4b1e      	ldr	r3, [pc, #120]	@ (80151f8 <_dtoa_r+0x2e8>)
 8015180:	4602      	mov	r2, r0
 8015182:	f240 11af 	movw	r1, #431	@ 0x1af
 8015186:	e6da      	b.n	8014f3e <_dtoa_r+0x2e>
 8015188:	2300      	movs	r3, #0
 801518a:	e7e3      	b.n	8015154 <_dtoa_r+0x244>
 801518c:	2300      	movs	r3, #0
 801518e:	e7d5      	b.n	801513c <_dtoa_r+0x22c>
 8015190:	2401      	movs	r4, #1
 8015192:	2300      	movs	r3, #0
 8015194:	9307      	str	r3, [sp, #28]
 8015196:	9409      	str	r4, [sp, #36]	@ 0x24
 8015198:	f04f 3bff 	mov.w	fp, #4294967295
 801519c:	2200      	movs	r2, #0
 801519e:	f8cd b00c 	str.w	fp, [sp, #12]
 80151a2:	2312      	movs	r3, #18
 80151a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80151a6:	e7db      	b.n	8015160 <_dtoa_r+0x250>
 80151a8:	2301      	movs	r3, #1
 80151aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80151ac:	e7f4      	b.n	8015198 <_dtoa_r+0x288>
 80151ae:	f04f 0b01 	mov.w	fp, #1
 80151b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80151b6:	465b      	mov	r3, fp
 80151b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80151bc:	e7d0      	b.n	8015160 <_dtoa_r+0x250>
 80151be:	3101      	adds	r1, #1
 80151c0:	0052      	lsls	r2, r2, #1
 80151c2:	e7d1      	b.n	8015168 <_dtoa_r+0x258>
 80151c4:	f3af 8000 	nop.w
 80151c8:	636f4361 	.word	0x636f4361
 80151cc:	3fd287a7 	.word	0x3fd287a7
 80151d0:	8b60c8b3 	.word	0x8b60c8b3
 80151d4:	3fc68a28 	.word	0x3fc68a28
 80151d8:	509f79fb 	.word	0x509f79fb
 80151dc:	3fd34413 	.word	0x3fd34413
 80151e0:	0801af7a 	.word	0x0801af7a
 80151e4:	0801af91 	.word	0x0801af91
 80151e8:	7ff00000 	.word	0x7ff00000
 80151ec:	0801af45 	.word	0x0801af45
 80151f0:	3ff80000 	.word	0x3ff80000
 80151f4:	0801b140 	.word	0x0801b140
 80151f8:	0801afe9 	.word	0x0801afe9
 80151fc:	0801af76 	.word	0x0801af76
 8015200:	0801af44 	.word	0x0801af44
 8015204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015208:	6018      	str	r0, [r3, #0]
 801520a:	9b03      	ldr	r3, [sp, #12]
 801520c:	2b0e      	cmp	r3, #14
 801520e:	f200 80a1 	bhi.w	8015354 <_dtoa_r+0x444>
 8015212:	2c00      	cmp	r4, #0
 8015214:	f000 809e 	beq.w	8015354 <_dtoa_r+0x444>
 8015218:	2f00      	cmp	r7, #0
 801521a:	dd33      	ble.n	8015284 <_dtoa_r+0x374>
 801521c:	4b9c      	ldr	r3, [pc, #624]	@ (8015490 <_dtoa_r+0x580>)
 801521e:	f007 020f 	and.w	r2, r7, #15
 8015222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015226:	ed93 7b00 	vldr	d7, [r3]
 801522a:	05f8      	lsls	r0, r7, #23
 801522c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015234:	d516      	bpl.n	8015264 <_dtoa_r+0x354>
 8015236:	4b97      	ldr	r3, [pc, #604]	@ (8015494 <_dtoa_r+0x584>)
 8015238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801523c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015240:	f7eb fb2c 	bl	800089c <__aeabi_ddiv>
 8015244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015248:	f004 040f 	and.w	r4, r4, #15
 801524c:	2603      	movs	r6, #3
 801524e:	4d91      	ldr	r5, [pc, #580]	@ (8015494 <_dtoa_r+0x584>)
 8015250:	b954      	cbnz	r4, 8015268 <_dtoa_r+0x358>
 8015252:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801525a:	f7eb fb1f 	bl	800089c <__aeabi_ddiv>
 801525e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015262:	e028      	b.n	80152b6 <_dtoa_r+0x3a6>
 8015264:	2602      	movs	r6, #2
 8015266:	e7f2      	b.n	801524e <_dtoa_r+0x33e>
 8015268:	07e1      	lsls	r1, r4, #31
 801526a:	d508      	bpl.n	801527e <_dtoa_r+0x36e>
 801526c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015274:	f7eb f9e8 	bl	8000648 <__aeabi_dmul>
 8015278:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801527c:	3601      	adds	r6, #1
 801527e:	1064      	asrs	r4, r4, #1
 8015280:	3508      	adds	r5, #8
 8015282:	e7e5      	b.n	8015250 <_dtoa_r+0x340>
 8015284:	f000 80af 	beq.w	80153e6 <_dtoa_r+0x4d6>
 8015288:	427c      	negs	r4, r7
 801528a:	4b81      	ldr	r3, [pc, #516]	@ (8015490 <_dtoa_r+0x580>)
 801528c:	4d81      	ldr	r5, [pc, #516]	@ (8015494 <_dtoa_r+0x584>)
 801528e:	f004 020f 	and.w	r2, r4, #15
 8015292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801529e:	f7eb f9d3 	bl	8000648 <__aeabi_dmul>
 80152a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152a6:	1124      	asrs	r4, r4, #4
 80152a8:	2300      	movs	r3, #0
 80152aa:	2602      	movs	r6, #2
 80152ac:	2c00      	cmp	r4, #0
 80152ae:	f040 808f 	bne.w	80153d0 <_dtoa_r+0x4c0>
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d1d3      	bne.n	801525e <_dtoa_r+0x34e>
 80152b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80152b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f000 8094 	beq.w	80153ea <_dtoa_r+0x4da>
 80152c2:	4b75      	ldr	r3, [pc, #468]	@ (8015498 <_dtoa_r+0x588>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	4620      	mov	r0, r4
 80152c8:	4629      	mov	r1, r5
 80152ca:	f7eb fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80152ce:	2800      	cmp	r0, #0
 80152d0:	f000 808b 	beq.w	80153ea <_dtoa_r+0x4da>
 80152d4:	9b03      	ldr	r3, [sp, #12]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	f000 8087 	beq.w	80153ea <_dtoa_r+0x4da>
 80152dc:	f1bb 0f00 	cmp.w	fp, #0
 80152e0:	dd34      	ble.n	801534c <_dtoa_r+0x43c>
 80152e2:	4620      	mov	r0, r4
 80152e4:	4b6d      	ldr	r3, [pc, #436]	@ (801549c <_dtoa_r+0x58c>)
 80152e6:	2200      	movs	r2, #0
 80152e8:	4629      	mov	r1, r5
 80152ea:	f7eb f9ad 	bl	8000648 <__aeabi_dmul>
 80152ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80152f6:	3601      	adds	r6, #1
 80152f8:	465c      	mov	r4, fp
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7eb f93a 	bl	8000574 <__aeabi_i2d>
 8015300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015304:	f7eb f9a0 	bl	8000648 <__aeabi_dmul>
 8015308:	4b65      	ldr	r3, [pc, #404]	@ (80154a0 <_dtoa_r+0x590>)
 801530a:	2200      	movs	r2, #0
 801530c:	f7ea ffe6 	bl	80002dc <__adddf3>
 8015310:	4605      	mov	r5, r0
 8015312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015316:	2c00      	cmp	r4, #0
 8015318:	d16a      	bne.n	80153f0 <_dtoa_r+0x4e0>
 801531a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801531e:	4b61      	ldr	r3, [pc, #388]	@ (80154a4 <_dtoa_r+0x594>)
 8015320:	2200      	movs	r2, #0
 8015322:	f7ea ffd9 	bl	80002d8 <__aeabi_dsub>
 8015326:	4602      	mov	r2, r0
 8015328:	460b      	mov	r3, r1
 801532a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801532e:	462a      	mov	r2, r5
 8015330:	4633      	mov	r3, r6
 8015332:	f7eb fc19 	bl	8000b68 <__aeabi_dcmpgt>
 8015336:	2800      	cmp	r0, #0
 8015338:	f040 8298 	bne.w	801586c <_dtoa_r+0x95c>
 801533c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015340:	462a      	mov	r2, r5
 8015342:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015346:	f7eb fbf1 	bl	8000b2c <__aeabi_dcmplt>
 801534a:	bb38      	cbnz	r0, 801539c <_dtoa_r+0x48c>
 801534c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015356:	2b00      	cmp	r3, #0
 8015358:	f2c0 8157 	blt.w	801560a <_dtoa_r+0x6fa>
 801535c:	2f0e      	cmp	r7, #14
 801535e:	f300 8154 	bgt.w	801560a <_dtoa_r+0x6fa>
 8015362:	4b4b      	ldr	r3, [pc, #300]	@ (8015490 <_dtoa_r+0x580>)
 8015364:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015368:	ed93 7b00 	vldr	d7, [r3]
 801536c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801536e:	2b00      	cmp	r3, #0
 8015370:	ed8d 7b00 	vstr	d7, [sp]
 8015374:	f280 80e5 	bge.w	8015542 <_dtoa_r+0x632>
 8015378:	9b03      	ldr	r3, [sp, #12]
 801537a:	2b00      	cmp	r3, #0
 801537c:	f300 80e1 	bgt.w	8015542 <_dtoa_r+0x632>
 8015380:	d10c      	bne.n	801539c <_dtoa_r+0x48c>
 8015382:	4b48      	ldr	r3, [pc, #288]	@ (80154a4 <_dtoa_r+0x594>)
 8015384:	2200      	movs	r2, #0
 8015386:	ec51 0b17 	vmov	r0, r1, d7
 801538a:	f7eb f95d 	bl	8000648 <__aeabi_dmul>
 801538e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015392:	f7eb fbdf 	bl	8000b54 <__aeabi_dcmpge>
 8015396:	2800      	cmp	r0, #0
 8015398:	f000 8266 	beq.w	8015868 <_dtoa_r+0x958>
 801539c:	2400      	movs	r4, #0
 801539e:	4625      	mov	r5, r4
 80153a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153a2:	4656      	mov	r6, sl
 80153a4:	ea6f 0803 	mvn.w	r8, r3
 80153a8:	2700      	movs	r7, #0
 80153aa:	4621      	mov	r1, r4
 80153ac:	4648      	mov	r0, r9
 80153ae:	f000 fcbf 	bl	8015d30 <_Bfree>
 80153b2:	2d00      	cmp	r5, #0
 80153b4:	f000 80bd 	beq.w	8015532 <_dtoa_r+0x622>
 80153b8:	b12f      	cbz	r7, 80153c6 <_dtoa_r+0x4b6>
 80153ba:	42af      	cmp	r7, r5
 80153bc:	d003      	beq.n	80153c6 <_dtoa_r+0x4b6>
 80153be:	4639      	mov	r1, r7
 80153c0:	4648      	mov	r0, r9
 80153c2:	f000 fcb5 	bl	8015d30 <_Bfree>
 80153c6:	4629      	mov	r1, r5
 80153c8:	4648      	mov	r0, r9
 80153ca:	f000 fcb1 	bl	8015d30 <_Bfree>
 80153ce:	e0b0      	b.n	8015532 <_dtoa_r+0x622>
 80153d0:	07e2      	lsls	r2, r4, #31
 80153d2:	d505      	bpl.n	80153e0 <_dtoa_r+0x4d0>
 80153d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80153d8:	f7eb f936 	bl	8000648 <__aeabi_dmul>
 80153dc:	3601      	adds	r6, #1
 80153de:	2301      	movs	r3, #1
 80153e0:	1064      	asrs	r4, r4, #1
 80153e2:	3508      	adds	r5, #8
 80153e4:	e762      	b.n	80152ac <_dtoa_r+0x39c>
 80153e6:	2602      	movs	r6, #2
 80153e8:	e765      	b.n	80152b6 <_dtoa_r+0x3a6>
 80153ea:	9c03      	ldr	r4, [sp, #12]
 80153ec:	46b8      	mov	r8, r7
 80153ee:	e784      	b.n	80152fa <_dtoa_r+0x3ea>
 80153f0:	4b27      	ldr	r3, [pc, #156]	@ (8015490 <_dtoa_r+0x580>)
 80153f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80153f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80153fc:	4454      	add	r4, sl
 80153fe:	2900      	cmp	r1, #0
 8015400:	d054      	beq.n	80154ac <_dtoa_r+0x59c>
 8015402:	4929      	ldr	r1, [pc, #164]	@ (80154a8 <_dtoa_r+0x598>)
 8015404:	2000      	movs	r0, #0
 8015406:	f7eb fa49 	bl	800089c <__aeabi_ddiv>
 801540a:	4633      	mov	r3, r6
 801540c:	462a      	mov	r2, r5
 801540e:	f7ea ff63 	bl	80002d8 <__aeabi_dsub>
 8015412:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015416:	4656      	mov	r6, sl
 8015418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801541c:	f7eb fbc4 	bl	8000ba8 <__aeabi_d2iz>
 8015420:	4605      	mov	r5, r0
 8015422:	f7eb f8a7 	bl	8000574 <__aeabi_i2d>
 8015426:	4602      	mov	r2, r0
 8015428:	460b      	mov	r3, r1
 801542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801542e:	f7ea ff53 	bl	80002d8 <__aeabi_dsub>
 8015432:	3530      	adds	r5, #48	@ 0x30
 8015434:	4602      	mov	r2, r0
 8015436:	460b      	mov	r3, r1
 8015438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801543c:	f806 5b01 	strb.w	r5, [r6], #1
 8015440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015444:	f7eb fb72 	bl	8000b2c <__aeabi_dcmplt>
 8015448:	2800      	cmp	r0, #0
 801544a:	d172      	bne.n	8015532 <_dtoa_r+0x622>
 801544c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015450:	4911      	ldr	r1, [pc, #68]	@ (8015498 <_dtoa_r+0x588>)
 8015452:	2000      	movs	r0, #0
 8015454:	f7ea ff40 	bl	80002d8 <__aeabi_dsub>
 8015458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801545c:	f7eb fb66 	bl	8000b2c <__aeabi_dcmplt>
 8015460:	2800      	cmp	r0, #0
 8015462:	f040 80b4 	bne.w	80155ce <_dtoa_r+0x6be>
 8015466:	42a6      	cmp	r6, r4
 8015468:	f43f af70 	beq.w	801534c <_dtoa_r+0x43c>
 801546c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015470:	4b0a      	ldr	r3, [pc, #40]	@ (801549c <_dtoa_r+0x58c>)
 8015472:	2200      	movs	r2, #0
 8015474:	f7eb f8e8 	bl	8000648 <__aeabi_dmul>
 8015478:	4b08      	ldr	r3, [pc, #32]	@ (801549c <_dtoa_r+0x58c>)
 801547a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801547e:	2200      	movs	r2, #0
 8015480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015484:	f7eb f8e0 	bl	8000648 <__aeabi_dmul>
 8015488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801548c:	e7c4      	b.n	8015418 <_dtoa_r+0x508>
 801548e:	bf00      	nop
 8015490:	0801b140 	.word	0x0801b140
 8015494:	0801b118 	.word	0x0801b118
 8015498:	3ff00000 	.word	0x3ff00000
 801549c:	40240000 	.word	0x40240000
 80154a0:	401c0000 	.word	0x401c0000
 80154a4:	40140000 	.word	0x40140000
 80154a8:	3fe00000 	.word	0x3fe00000
 80154ac:	4631      	mov	r1, r6
 80154ae:	4628      	mov	r0, r5
 80154b0:	f7eb f8ca 	bl	8000648 <__aeabi_dmul>
 80154b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80154b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80154ba:	4656      	mov	r6, sl
 80154bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154c0:	f7eb fb72 	bl	8000ba8 <__aeabi_d2iz>
 80154c4:	4605      	mov	r5, r0
 80154c6:	f7eb f855 	bl	8000574 <__aeabi_i2d>
 80154ca:	4602      	mov	r2, r0
 80154cc:	460b      	mov	r3, r1
 80154ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154d2:	f7ea ff01 	bl	80002d8 <__aeabi_dsub>
 80154d6:	3530      	adds	r5, #48	@ 0x30
 80154d8:	f806 5b01 	strb.w	r5, [r6], #1
 80154dc:	4602      	mov	r2, r0
 80154de:	460b      	mov	r3, r1
 80154e0:	42a6      	cmp	r6, r4
 80154e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80154e6:	f04f 0200 	mov.w	r2, #0
 80154ea:	d124      	bne.n	8015536 <_dtoa_r+0x626>
 80154ec:	4baf      	ldr	r3, [pc, #700]	@ (80157ac <_dtoa_r+0x89c>)
 80154ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80154f2:	f7ea fef3 	bl	80002dc <__adddf3>
 80154f6:	4602      	mov	r2, r0
 80154f8:	460b      	mov	r3, r1
 80154fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154fe:	f7eb fb33 	bl	8000b68 <__aeabi_dcmpgt>
 8015502:	2800      	cmp	r0, #0
 8015504:	d163      	bne.n	80155ce <_dtoa_r+0x6be>
 8015506:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801550a:	49a8      	ldr	r1, [pc, #672]	@ (80157ac <_dtoa_r+0x89c>)
 801550c:	2000      	movs	r0, #0
 801550e:	f7ea fee3 	bl	80002d8 <__aeabi_dsub>
 8015512:	4602      	mov	r2, r0
 8015514:	460b      	mov	r3, r1
 8015516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801551a:	f7eb fb07 	bl	8000b2c <__aeabi_dcmplt>
 801551e:	2800      	cmp	r0, #0
 8015520:	f43f af14 	beq.w	801534c <_dtoa_r+0x43c>
 8015524:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015526:	1e73      	subs	r3, r6, #1
 8015528:	9313      	str	r3, [sp, #76]	@ 0x4c
 801552a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801552e:	2b30      	cmp	r3, #48	@ 0x30
 8015530:	d0f8      	beq.n	8015524 <_dtoa_r+0x614>
 8015532:	4647      	mov	r7, r8
 8015534:	e03b      	b.n	80155ae <_dtoa_r+0x69e>
 8015536:	4b9e      	ldr	r3, [pc, #632]	@ (80157b0 <_dtoa_r+0x8a0>)
 8015538:	f7eb f886 	bl	8000648 <__aeabi_dmul>
 801553c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015540:	e7bc      	b.n	80154bc <_dtoa_r+0x5ac>
 8015542:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015546:	4656      	mov	r6, sl
 8015548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801554c:	4620      	mov	r0, r4
 801554e:	4629      	mov	r1, r5
 8015550:	f7eb f9a4 	bl	800089c <__aeabi_ddiv>
 8015554:	f7eb fb28 	bl	8000ba8 <__aeabi_d2iz>
 8015558:	4680      	mov	r8, r0
 801555a:	f7eb f80b 	bl	8000574 <__aeabi_i2d>
 801555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015562:	f7eb f871 	bl	8000648 <__aeabi_dmul>
 8015566:	4602      	mov	r2, r0
 8015568:	460b      	mov	r3, r1
 801556a:	4620      	mov	r0, r4
 801556c:	4629      	mov	r1, r5
 801556e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015572:	f7ea feb1 	bl	80002d8 <__aeabi_dsub>
 8015576:	f806 4b01 	strb.w	r4, [r6], #1
 801557a:	9d03      	ldr	r5, [sp, #12]
 801557c:	eba6 040a 	sub.w	r4, r6, sl
 8015580:	42a5      	cmp	r5, r4
 8015582:	4602      	mov	r2, r0
 8015584:	460b      	mov	r3, r1
 8015586:	d133      	bne.n	80155f0 <_dtoa_r+0x6e0>
 8015588:	f7ea fea8 	bl	80002dc <__adddf3>
 801558c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015590:	4604      	mov	r4, r0
 8015592:	460d      	mov	r5, r1
 8015594:	f7eb fae8 	bl	8000b68 <__aeabi_dcmpgt>
 8015598:	b9c0      	cbnz	r0, 80155cc <_dtoa_r+0x6bc>
 801559a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801559e:	4620      	mov	r0, r4
 80155a0:	4629      	mov	r1, r5
 80155a2:	f7eb fab9 	bl	8000b18 <__aeabi_dcmpeq>
 80155a6:	b110      	cbz	r0, 80155ae <_dtoa_r+0x69e>
 80155a8:	f018 0f01 	tst.w	r8, #1
 80155ac:	d10e      	bne.n	80155cc <_dtoa_r+0x6bc>
 80155ae:	9902      	ldr	r1, [sp, #8]
 80155b0:	4648      	mov	r0, r9
 80155b2:	f000 fbbd 	bl	8015d30 <_Bfree>
 80155b6:	2300      	movs	r3, #0
 80155b8:	7033      	strb	r3, [r6, #0]
 80155ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80155bc:	3701      	adds	r7, #1
 80155be:	601f      	str	r7, [r3, #0]
 80155c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f000 824b 	beq.w	8015a5e <_dtoa_r+0xb4e>
 80155c8:	601e      	str	r6, [r3, #0]
 80155ca:	e248      	b.n	8015a5e <_dtoa_r+0xb4e>
 80155cc:	46b8      	mov	r8, r7
 80155ce:	4633      	mov	r3, r6
 80155d0:	461e      	mov	r6, r3
 80155d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80155d6:	2a39      	cmp	r2, #57	@ 0x39
 80155d8:	d106      	bne.n	80155e8 <_dtoa_r+0x6d8>
 80155da:	459a      	cmp	sl, r3
 80155dc:	d1f8      	bne.n	80155d0 <_dtoa_r+0x6c0>
 80155de:	2230      	movs	r2, #48	@ 0x30
 80155e0:	f108 0801 	add.w	r8, r8, #1
 80155e4:	f88a 2000 	strb.w	r2, [sl]
 80155e8:	781a      	ldrb	r2, [r3, #0]
 80155ea:	3201      	adds	r2, #1
 80155ec:	701a      	strb	r2, [r3, #0]
 80155ee:	e7a0      	b.n	8015532 <_dtoa_r+0x622>
 80155f0:	4b6f      	ldr	r3, [pc, #444]	@ (80157b0 <_dtoa_r+0x8a0>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	f7eb f828 	bl	8000648 <__aeabi_dmul>
 80155f8:	2200      	movs	r2, #0
 80155fa:	2300      	movs	r3, #0
 80155fc:	4604      	mov	r4, r0
 80155fe:	460d      	mov	r5, r1
 8015600:	f7eb fa8a 	bl	8000b18 <__aeabi_dcmpeq>
 8015604:	2800      	cmp	r0, #0
 8015606:	d09f      	beq.n	8015548 <_dtoa_r+0x638>
 8015608:	e7d1      	b.n	80155ae <_dtoa_r+0x69e>
 801560a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801560c:	2a00      	cmp	r2, #0
 801560e:	f000 80ea 	beq.w	80157e6 <_dtoa_r+0x8d6>
 8015612:	9a07      	ldr	r2, [sp, #28]
 8015614:	2a01      	cmp	r2, #1
 8015616:	f300 80cd 	bgt.w	80157b4 <_dtoa_r+0x8a4>
 801561a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801561c:	2a00      	cmp	r2, #0
 801561e:	f000 80c1 	beq.w	80157a4 <_dtoa_r+0x894>
 8015622:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015626:	9c08      	ldr	r4, [sp, #32]
 8015628:	9e00      	ldr	r6, [sp, #0]
 801562a:	9a00      	ldr	r2, [sp, #0]
 801562c:	441a      	add	r2, r3
 801562e:	9200      	str	r2, [sp, #0]
 8015630:	9a06      	ldr	r2, [sp, #24]
 8015632:	2101      	movs	r1, #1
 8015634:	441a      	add	r2, r3
 8015636:	4648      	mov	r0, r9
 8015638:	9206      	str	r2, [sp, #24]
 801563a:	f000 fc77 	bl	8015f2c <__i2b>
 801563e:	4605      	mov	r5, r0
 8015640:	b166      	cbz	r6, 801565c <_dtoa_r+0x74c>
 8015642:	9b06      	ldr	r3, [sp, #24]
 8015644:	2b00      	cmp	r3, #0
 8015646:	dd09      	ble.n	801565c <_dtoa_r+0x74c>
 8015648:	42b3      	cmp	r3, r6
 801564a:	9a00      	ldr	r2, [sp, #0]
 801564c:	bfa8      	it	ge
 801564e:	4633      	movge	r3, r6
 8015650:	1ad2      	subs	r2, r2, r3
 8015652:	9200      	str	r2, [sp, #0]
 8015654:	9a06      	ldr	r2, [sp, #24]
 8015656:	1af6      	subs	r6, r6, r3
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	9306      	str	r3, [sp, #24]
 801565c:	9b08      	ldr	r3, [sp, #32]
 801565e:	b30b      	cbz	r3, 80156a4 <_dtoa_r+0x794>
 8015660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015662:	2b00      	cmp	r3, #0
 8015664:	f000 80c6 	beq.w	80157f4 <_dtoa_r+0x8e4>
 8015668:	2c00      	cmp	r4, #0
 801566a:	f000 80c0 	beq.w	80157ee <_dtoa_r+0x8de>
 801566e:	4629      	mov	r1, r5
 8015670:	4622      	mov	r2, r4
 8015672:	4648      	mov	r0, r9
 8015674:	f000 fd12 	bl	801609c <__pow5mult>
 8015678:	9a02      	ldr	r2, [sp, #8]
 801567a:	4601      	mov	r1, r0
 801567c:	4605      	mov	r5, r0
 801567e:	4648      	mov	r0, r9
 8015680:	f000 fc6a 	bl	8015f58 <__multiply>
 8015684:	9902      	ldr	r1, [sp, #8]
 8015686:	4680      	mov	r8, r0
 8015688:	4648      	mov	r0, r9
 801568a:	f000 fb51 	bl	8015d30 <_Bfree>
 801568e:	9b08      	ldr	r3, [sp, #32]
 8015690:	1b1b      	subs	r3, r3, r4
 8015692:	9308      	str	r3, [sp, #32]
 8015694:	f000 80b1 	beq.w	80157fa <_dtoa_r+0x8ea>
 8015698:	9a08      	ldr	r2, [sp, #32]
 801569a:	4641      	mov	r1, r8
 801569c:	4648      	mov	r0, r9
 801569e:	f000 fcfd 	bl	801609c <__pow5mult>
 80156a2:	9002      	str	r0, [sp, #8]
 80156a4:	2101      	movs	r1, #1
 80156a6:	4648      	mov	r0, r9
 80156a8:	f000 fc40 	bl	8015f2c <__i2b>
 80156ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156ae:	4604      	mov	r4, r0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f000 81d8 	beq.w	8015a66 <_dtoa_r+0xb56>
 80156b6:	461a      	mov	r2, r3
 80156b8:	4601      	mov	r1, r0
 80156ba:	4648      	mov	r0, r9
 80156bc:	f000 fcee 	bl	801609c <__pow5mult>
 80156c0:	9b07      	ldr	r3, [sp, #28]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	4604      	mov	r4, r0
 80156c6:	f300 809f 	bgt.w	8015808 <_dtoa_r+0x8f8>
 80156ca:	9b04      	ldr	r3, [sp, #16]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	f040 8097 	bne.w	8015800 <_dtoa_r+0x8f0>
 80156d2:	9b05      	ldr	r3, [sp, #20]
 80156d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f040 8093 	bne.w	8015804 <_dtoa_r+0x8f4>
 80156de:	9b05      	ldr	r3, [sp, #20]
 80156e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80156e4:	0d1b      	lsrs	r3, r3, #20
 80156e6:	051b      	lsls	r3, r3, #20
 80156e8:	b133      	cbz	r3, 80156f8 <_dtoa_r+0x7e8>
 80156ea:	9b00      	ldr	r3, [sp, #0]
 80156ec:	3301      	adds	r3, #1
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	9b06      	ldr	r3, [sp, #24]
 80156f2:	3301      	adds	r3, #1
 80156f4:	9306      	str	r3, [sp, #24]
 80156f6:	2301      	movs	r3, #1
 80156f8:	9308      	str	r3, [sp, #32]
 80156fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f000 81b8 	beq.w	8015a72 <_dtoa_r+0xb62>
 8015702:	6923      	ldr	r3, [r4, #16]
 8015704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015708:	6918      	ldr	r0, [r3, #16]
 801570a:	f000 fbc3 	bl	8015e94 <__hi0bits>
 801570e:	f1c0 0020 	rsb	r0, r0, #32
 8015712:	9b06      	ldr	r3, [sp, #24]
 8015714:	4418      	add	r0, r3
 8015716:	f010 001f 	ands.w	r0, r0, #31
 801571a:	f000 8082 	beq.w	8015822 <_dtoa_r+0x912>
 801571e:	f1c0 0320 	rsb	r3, r0, #32
 8015722:	2b04      	cmp	r3, #4
 8015724:	dd73      	ble.n	801580e <_dtoa_r+0x8fe>
 8015726:	9b00      	ldr	r3, [sp, #0]
 8015728:	f1c0 001c 	rsb	r0, r0, #28
 801572c:	4403      	add	r3, r0
 801572e:	9300      	str	r3, [sp, #0]
 8015730:	9b06      	ldr	r3, [sp, #24]
 8015732:	4403      	add	r3, r0
 8015734:	4406      	add	r6, r0
 8015736:	9306      	str	r3, [sp, #24]
 8015738:	9b00      	ldr	r3, [sp, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	dd05      	ble.n	801574a <_dtoa_r+0x83a>
 801573e:	9902      	ldr	r1, [sp, #8]
 8015740:	461a      	mov	r2, r3
 8015742:	4648      	mov	r0, r9
 8015744:	f000 fd04 	bl	8016150 <__lshift>
 8015748:	9002      	str	r0, [sp, #8]
 801574a:	9b06      	ldr	r3, [sp, #24]
 801574c:	2b00      	cmp	r3, #0
 801574e:	dd05      	ble.n	801575c <_dtoa_r+0x84c>
 8015750:	4621      	mov	r1, r4
 8015752:	461a      	mov	r2, r3
 8015754:	4648      	mov	r0, r9
 8015756:	f000 fcfb 	bl	8016150 <__lshift>
 801575a:	4604      	mov	r4, r0
 801575c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801575e:	2b00      	cmp	r3, #0
 8015760:	d061      	beq.n	8015826 <_dtoa_r+0x916>
 8015762:	9802      	ldr	r0, [sp, #8]
 8015764:	4621      	mov	r1, r4
 8015766:	f000 fd5f 	bl	8016228 <__mcmp>
 801576a:	2800      	cmp	r0, #0
 801576c:	da5b      	bge.n	8015826 <_dtoa_r+0x916>
 801576e:	2300      	movs	r3, #0
 8015770:	9902      	ldr	r1, [sp, #8]
 8015772:	220a      	movs	r2, #10
 8015774:	4648      	mov	r0, r9
 8015776:	f000 fafd 	bl	8015d74 <__multadd>
 801577a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801577c:	9002      	str	r0, [sp, #8]
 801577e:	f107 38ff 	add.w	r8, r7, #4294967295
 8015782:	2b00      	cmp	r3, #0
 8015784:	f000 8177 	beq.w	8015a76 <_dtoa_r+0xb66>
 8015788:	4629      	mov	r1, r5
 801578a:	2300      	movs	r3, #0
 801578c:	220a      	movs	r2, #10
 801578e:	4648      	mov	r0, r9
 8015790:	f000 faf0 	bl	8015d74 <__multadd>
 8015794:	f1bb 0f00 	cmp.w	fp, #0
 8015798:	4605      	mov	r5, r0
 801579a:	dc6f      	bgt.n	801587c <_dtoa_r+0x96c>
 801579c:	9b07      	ldr	r3, [sp, #28]
 801579e:	2b02      	cmp	r3, #2
 80157a0:	dc49      	bgt.n	8015836 <_dtoa_r+0x926>
 80157a2:	e06b      	b.n	801587c <_dtoa_r+0x96c>
 80157a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80157a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80157aa:	e73c      	b.n	8015626 <_dtoa_r+0x716>
 80157ac:	3fe00000 	.word	0x3fe00000
 80157b0:	40240000 	.word	0x40240000
 80157b4:	9b03      	ldr	r3, [sp, #12]
 80157b6:	1e5c      	subs	r4, r3, #1
 80157b8:	9b08      	ldr	r3, [sp, #32]
 80157ba:	42a3      	cmp	r3, r4
 80157bc:	db09      	blt.n	80157d2 <_dtoa_r+0x8c2>
 80157be:	1b1c      	subs	r4, r3, r4
 80157c0:	9b03      	ldr	r3, [sp, #12]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f6bf af30 	bge.w	8015628 <_dtoa_r+0x718>
 80157c8:	9b00      	ldr	r3, [sp, #0]
 80157ca:	9a03      	ldr	r2, [sp, #12]
 80157cc:	1a9e      	subs	r6, r3, r2
 80157ce:	2300      	movs	r3, #0
 80157d0:	e72b      	b.n	801562a <_dtoa_r+0x71a>
 80157d2:	9b08      	ldr	r3, [sp, #32]
 80157d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80157d6:	9408      	str	r4, [sp, #32]
 80157d8:	1ae3      	subs	r3, r4, r3
 80157da:	441a      	add	r2, r3
 80157dc:	9e00      	ldr	r6, [sp, #0]
 80157de:	9b03      	ldr	r3, [sp, #12]
 80157e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80157e2:	2400      	movs	r4, #0
 80157e4:	e721      	b.n	801562a <_dtoa_r+0x71a>
 80157e6:	9c08      	ldr	r4, [sp, #32]
 80157e8:	9e00      	ldr	r6, [sp, #0]
 80157ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80157ec:	e728      	b.n	8015640 <_dtoa_r+0x730>
 80157ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80157f2:	e751      	b.n	8015698 <_dtoa_r+0x788>
 80157f4:	9a08      	ldr	r2, [sp, #32]
 80157f6:	9902      	ldr	r1, [sp, #8]
 80157f8:	e750      	b.n	801569c <_dtoa_r+0x78c>
 80157fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80157fe:	e751      	b.n	80156a4 <_dtoa_r+0x794>
 8015800:	2300      	movs	r3, #0
 8015802:	e779      	b.n	80156f8 <_dtoa_r+0x7e8>
 8015804:	9b04      	ldr	r3, [sp, #16]
 8015806:	e777      	b.n	80156f8 <_dtoa_r+0x7e8>
 8015808:	2300      	movs	r3, #0
 801580a:	9308      	str	r3, [sp, #32]
 801580c:	e779      	b.n	8015702 <_dtoa_r+0x7f2>
 801580e:	d093      	beq.n	8015738 <_dtoa_r+0x828>
 8015810:	9a00      	ldr	r2, [sp, #0]
 8015812:	331c      	adds	r3, #28
 8015814:	441a      	add	r2, r3
 8015816:	9200      	str	r2, [sp, #0]
 8015818:	9a06      	ldr	r2, [sp, #24]
 801581a:	441a      	add	r2, r3
 801581c:	441e      	add	r6, r3
 801581e:	9206      	str	r2, [sp, #24]
 8015820:	e78a      	b.n	8015738 <_dtoa_r+0x828>
 8015822:	4603      	mov	r3, r0
 8015824:	e7f4      	b.n	8015810 <_dtoa_r+0x900>
 8015826:	9b03      	ldr	r3, [sp, #12]
 8015828:	2b00      	cmp	r3, #0
 801582a:	46b8      	mov	r8, r7
 801582c:	dc20      	bgt.n	8015870 <_dtoa_r+0x960>
 801582e:	469b      	mov	fp, r3
 8015830:	9b07      	ldr	r3, [sp, #28]
 8015832:	2b02      	cmp	r3, #2
 8015834:	dd1e      	ble.n	8015874 <_dtoa_r+0x964>
 8015836:	f1bb 0f00 	cmp.w	fp, #0
 801583a:	f47f adb1 	bne.w	80153a0 <_dtoa_r+0x490>
 801583e:	4621      	mov	r1, r4
 8015840:	465b      	mov	r3, fp
 8015842:	2205      	movs	r2, #5
 8015844:	4648      	mov	r0, r9
 8015846:	f000 fa95 	bl	8015d74 <__multadd>
 801584a:	4601      	mov	r1, r0
 801584c:	4604      	mov	r4, r0
 801584e:	9802      	ldr	r0, [sp, #8]
 8015850:	f000 fcea 	bl	8016228 <__mcmp>
 8015854:	2800      	cmp	r0, #0
 8015856:	f77f ada3 	ble.w	80153a0 <_dtoa_r+0x490>
 801585a:	4656      	mov	r6, sl
 801585c:	2331      	movs	r3, #49	@ 0x31
 801585e:	f806 3b01 	strb.w	r3, [r6], #1
 8015862:	f108 0801 	add.w	r8, r8, #1
 8015866:	e59f      	b.n	80153a8 <_dtoa_r+0x498>
 8015868:	9c03      	ldr	r4, [sp, #12]
 801586a:	46b8      	mov	r8, r7
 801586c:	4625      	mov	r5, r4
 801586e:	e7f4      	b.n	801585a <_dtoa_r+0x94a>
 8015870:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015876:	2b00      	cmp	r3, #0
 8015878:	f000 8101 	beq.w	8015a7e <_dtoa_r+0xb6e>
 801587c:	2e00      	cmp	r6, #0
 801587e:	dd05      	ble.n	801588c <_dtoa_r+0x97c>
 8015880:	4629      	mov	r1, r5
 8015882:	4632      	mov	r2, r6
 8015884:	4648      	mov	r0, r9
 8015886:	f000 fc63 	bl	8016150 <__lshift>
 801588a:	4605      	mov	r5, r0
 801588c:	9b08      	ldr	r3, [sp, #32]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d05c      	beq.n	801594c <_dtoa_r+0xa3c>
 8015892:	6869      	ldr	r1, [r5, #4]
 8015894:	4648      	mov	r0, r9
 8015896:	f000 fa0b 	bl	8015cb0 <_Balloc>
 801589a:	4606      	mov	r6, r0
 801589c:	b928      	cbnz	r0, 80158aa <_dtoa_r+0x99a>
 801589e:	4b82      	ldr	r3, [pc, #520]	@ (8015aa8 <_dtoa_r+0xb98>)
 80158a0:	4602      	mov	r2, r0
 80158a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80158a6:	f7ff bb4a 	b.w	8014f3e <_dtoa_r+0x2e>
 80158aa:	692a      	ldr	r2, [r5, #16]
 80158ac:	3202      	adds	r2, #2
 80158ae:	0092      	lsls	r2, r2, #2
 80158b0:	f105 010c 	add.w	r1, r5, #12
 80158b4:	300c      	adds	r0, #12
 80158b6:	f7ff fa8e 	bl	8014dd6 <memcpy>
 80158ba:	2201      	movs	r2, #1
 80158bc:	4631      	mov	r1, r6
 80158be:	4648      	mov	r0, r9
 80158c0:	f000 fc46 	bl	8016150 <__lshift>
 80158c4:	f10a 0301 	add.w	r3, sl, #1
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	eb0a 030b 	add.w	r3, sl, fp
 80158ce:	9308      	str	r3, [sp, #32]
 80158d0:	9b04      	ldr	r3, [sp, #16]
 80158d2:	f003 0301 	and.w	r3, r3, #1
 80158d6:	462f      	mov	r7, r5
 80158d8:	9306      	str	r3, [sp, #24]
 80158da:	4605      	mov	r5, r0
 80158dc:	9b00      	ldr	r3, [sp, #0]
 80158de:	9802      	ldr	r0, [sp, #8]
 80158e0:	4621      	mov	r1, r4
 80158e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80158e6:	f7ff fa8b 	bl	8014e00 <quorem>
 80158ea:	4603      	mov	r3, r0
 80158ec:	3330      	adds	r3, #48	@ 0x30
 80158ee:	9003      	str	r0, [sp, #12]
 80158f0:	4639      	mov	r1, r7
 80158f2:	9802      	ldr	r0, [sp, #8]
 80158f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80158f6:	f000 fc97 	bl	8016228 <__mcmp>
 80158fa:	462a      	mov	r2, r5
 80158fc:	9004      	str	r0, [sp, #16]
 80158fe:	4621      	mov	r1, r4
 8015900:	4648      	mov	r0, r9
 8015902:	f000 fcad 	bl	8016260 <__mdiff>
 8015906:	68c2      	ldr	r2, [r0, #12]
 8015908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801590a:	4606      	mov	r6, r0
 801590c:	bb02      	cbnz	r2, 8015950 <_dtoa_r+0xa40>
 801590e:	4601      	mov	r1, r0
 8015910:	9802      	ldr	r0, [sp, #8]
 8015912:	f000 fc89 	bl	8016228 <__mcmp>
 8015916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015918:	4602      	mov	r2, r0
 801591a:	4631      	mov	r1, r6
 801591c:	4648      	mov	r0, r9
 801591e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015920:	9309      	str	r3, [sp, #36]	@ 0x24
 8015922:	f000 fa05 	bl	8015d30 <_Bfree>
 8015926:	9b07      	ldr	r3, [sp, #28]
 8015928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801592a:	9e00      	ldr	r6, [sp, #0]
 801592c:	ea42 0103 	orr.w	r1, r2, r3
 8015930:	9b06      	ldr	r3, [sp, #24]
 8015932:	4319      	orrs	r1, r3
 8015934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015936:	d10d      	bne.n	8015954 <_dtoa_r+0xa44>
 8015938:	2b39      	cmp	r3, #57	@ 0x39
 801593a:	d027      	beq.n	801598c <_dtoa_r+0xa7c>
 801593c:	9a04      	ldr	r2, [sp, #16]
 801593e:	2a00      	cmp	r2, #0
 8015940:	dd01      	ble.n	8015946 <_dtoa_r+0xa36>
 8015942:	9b03      	ldr	r3, [sp, #12]
 8015944:	3331      	adds	r3, #49	@ 0x31
 8015946:	f88b 3000 	strb.w	r3, [fp]
 801594a:	e52e      	b.n	80153aa <_dtoa_r+0x49a>
 801594c:	4628      	mov	r0, r5
 801594e:	e7b9      	b.n	80158c4 <_dtoa_r+0x9b4>
 8015950:	2201      	movs	r2, #1
 8015952:	e7e2      	b.n	801591a <_dtoa_r+0xa0a>
 8015954:	9904      	ldr	r1, [sp, #16]
 8015956:	2900      	cmp	r1, #0
 8015958:	db04      	blt.n	8015964 <_dtoa_r+0xa54>
 801595a:	9807      	ldr	r0, [sp, #28]
 801595c:	4301      	orrs	r1, r0
 801595e:	9806      	ldr	r0, [sp, #24]
 8015960:	4301      	orrs	r1, r0
 8015962:	d120      	bne.n	80159a6 <_dtoa_r+0xa96>
 8015964:	2a00      	cmp	r2, #0
 8015966:	ddee      	ble.n	8015946 <_dtoa_r+0xa36>
 8015968:	9902      	ldr	r1, [sp, #8]
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	2201      	movs	r2, #1
 801596e:	4648      	mov	r0, r9
 8015970:	f000 fbee 	bl	8016150 <__lshift>
 8015974:	4621      	mov	r1, r4
 8015976:	9002      	str	r0, [sp, #8]
 8015978:	f000 fc56 	bl	8016228 <__mcmp>
 801597c:	2800      	cmp	r0, #0
 801597e:	9b00      	ldr	r3, [sp, #0]
 8015980:	dc02      	bgt.n	8015988 <_dtoa_r+0xa78>
 8015982:	d1e0      	bne.n	8015946 <_dtoa_r+0xa36>
 8015984:	07da      	lsls	r2, r3, #31
 8015986:	d5de      	bpl.n	8015946 <_dtoa_r+0xa36>
 8015988:	2b39      	cmp	r3, #57	@ 0x39
 801598a:	d1da      	bne.n	8015942 <_dtoa_r+0xa32>
 801598c:	2339      	movs	r3, #57	@ 0x39
 801598e:	f88b 3000 	strb.w	r3, [fp]
 8015992:	4633      	mov	r3, r6
 8015994:	461e      	mov	r6, r3
 8015996:	3b01      	subs	r3, #1
 8015998:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801599c:	2a39      	cmp	r2, #57	@ 0x39
 801599e:	d04e      	beq.n	8015a3e <_dtoa_r+0xb2e>
 80159a0:	3201      	adds	r2, #1
 80159a2:	701a      	strb	r2, [r3, #0]
 80159a4:	e501      	b.n	80153aa <_dtoa_r+0x49a>
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	dd03      	ble.n	80159b2 <_dtoa_r+0xaa2>
 80159aa:	2b39      	cmp	r3, #57	@ 0x39
 80159ac:	d0ee      	beq.n	801598c <_dtoa_r+0xa7c>
 80159ae:	3301      	adds	r3, #1
 80159b0:	e7c9      	b.n	8015946 <_dtoa_r+0xa36>
 80159b2:	9a00      	ldr	r2, [sp, #0]
 80159b4:	9908      	ldr	r1, [sp, #32]
 80159b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80159ba:	428a      	cmp	r2, r1
 80159bc:	d028      	beq.n	8015a10 <_dtoa_r+0xb00>
 80159be:	9902      	ldr	r1, [sp, #8]
 80159c0:	2300      	movs	r3, #0
 80159c2:	220a      	movs	r2, #10
 80159c4:	4648      	mov	r0, r9
 80159c6:	f000 f9d5 	bl	8015d74 <__multadd>
 80159ca:	42af      	cmp	r7, r5
 80159cc:	9002      	str	r0, [sp, #8]
 80159ce:	f04f 0300 	mov.w	r3, #0
 80159d2:	f04f 020a 	mov.w	r2, #10
 80159d6:	4639      	mov	r1, r7
 80159d8:	4648      	mov	r0, r9
 80159da:	d107      	bne.n	80159ec <_dtoa_r+0xadc>
 80159dc:	f000 f9ca 	bl	8015d74 <__multadd>
 80159e0:	4607      	mov	r7, r0
 80159e2:	4605      	mov	r5, r0
 80159e4:	9b00      	ldr	r3, [sp, #0]
 80159e6:	3301      	adds	r3, #1
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	e777      	b.n	80158dc <_dtoa_r+0x9cc>
 80159ec:	f000 f9c2 	bl	8015d74 <__multadd>
 80159f0:	4629      	mov	r1, r5
 80159f2:	4607      	mov	r7, r0
 80159f4:	2300      	movs	r3, #0
 80159f6:	220a      	movs	r2, #10
 80159f8:	4648      	mov	r0, r9
 80159fa:	f000 f9bb 	bl	8015d74 <__multadd>
 80159fe:	4605      	mov	r5, r0
 8015a00:	e7f0      	b.n	80159e4 <_dtoa_r+0xad4>
 8015a02:	f1bb 0f00 	cmp.w	fp, #0
 8015a06:	bfcc      	ite	gt
 8015a08:	465e      	movgt	r6, fp
 8015a0a:	2601      	movle	r6, #1
 8015a0c:	4456      	add	r6, sl
 8015a0e:	2700      	movs	r7, #0
 8015a10:	9902      	ldr	r1, [sp, #8]
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	2201      	movs	r2, #1
 8015a16:	4648      	mov	r0, r9
 8015a18:	f000 fb9a 	bl	8016150 <__lshift>
 8015a1c:	4621      	mov	r1, r4
 8015a1e:	9002      	str	r0, [sp, #8]
 8015a20:	f000 fc02 	bl	8016228 <__mcmp>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	dcb4      	bgt.n	8015992 <_dtoa_r+0xa82>
 8015a28:	d102      	bne.n	8015a30 <_dtoa_r+0xb20>
 8015a2a:	9b00      	ldr	r3, [sp, #0]
 8015a2c:	07db      	lsls	r3, r3, #31
 8015a2e:	d4b0      	bmi.n	8015992 <_dtoa_r+0xa82>
 8015a30:	4633      	mov	r3, r6
 8015a32:	461e      	mov	r6, r3
 8015a34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a38:	2a30      	cmp	r2, #48	@ 0x30
 8015a3a:	d0fa      	beq.n	8015a32 <_dtoa_r+0xb22>
 8015a3c:	e4b5      	b.n	80153aa <_dtoa_r+0x49a>
 8015a3e:	459a      	cmp	sl, r3
 8015a40:	d1a8      	bne.n	8015994 <_dtoa_r+0xa84>
 8015a42:	2331      	movs	r3, #49	@ 0x31
 8015a44:	f108 0801 	add.w	r8, r8, #1
 8015a48:	f88a 3000 	strb.w	r3, [sl]
 8015a4c:	e4ad      	b.n	80153aa <_dtoa_r+0x49a>
 8015a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015aac <_dtoa_r+0xb9c>
 8015a54:	b11b      	cbz	r3, 8015a5e <_dtoa_r+0xb4e>
 8015a56:	f10a 0308 	add.w	r3, sl, #8
 8015a5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015a5c:	6013      	str	r3, [r2, #0]
 8015a5e:	4650      	mov	r0, sl
 8015a60:	b017      	add	sp, #92	@ 0x5c
 8015a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a66:	9b07      	ldr	r3, [sp, #28]
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	f77f ae2e 	ble.w	80156ca <_dtoa_r+0x7ba>
 8015a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a70:	9308      	str	r3, [sp, #32]
 8015a72:	2001      	movs	r0, #1
 8015a74:	e64d      	b.n	8015712 <_dtoa_r+0x802>
 8015a76:	f1bb 0f00 	cmp.w	fp, #0
 8015a7a:	f77f aed9 	ble.w	8015830 <_dtoa_r+0x920>
 8015a7e:	4656      	mov	r6, sl
 8015a80:	9802      	ldr	r0, [sp, #8]
 8015a82:	4621      	mov	r1, r4
 8015a84:	f7ff f9bc 	bl	8014e00 <quorem>
 8015a88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8015a90:	eba6 020a 	sub.w	r2, r6, sl
 8015a94:	4593      	cmp	fp, r2
 8015a96:	ddb4      	ble.n	8015a02 <_dtoa_r+0xaf2>
 8015a98:	9902      	ldr	r1, [sp, #8]
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	220a      	movs	r2, #10
 8015a9e:	4648      	mov	r0, r9
 8015aa0:	f000 f968 	bl	8015d74 <__multadd>
 8015aa4:	9002      	str	r0, [sp, #8]
 8015aa6:	e7eb      	b.n	8015a80 <_dtoa_r+0xb70>
 8015aa8:	0801afe9 	.word	0x0801afe9
 8015aac:	0801af6d 	.word	0x0801af6d

08015ab0 <_free_r>:
 8015ab0:	b538      	push	{r3, r4, r5, lr}
 8015ab2:	4605      	mov	r5, r0
 8015ab4:	2900      	cmp	r1, #0
 8015ab6:	d041      	beq.n	8015b3c <_free_r+0x8c>
 8015ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015abc:	1f0c      	subs	r4, r1, #4
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	bfb8      	it	lt
 8015ac2:	18e4      	addlt	r4, r4, r3
 8015ac4:	f000 f8e8 	bl	8015c98 <__malloc_lock>
 8015ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8015b40 <_free_r+0x90>)
 8015aca:	6813      	ldr	r3, [r2, #0]
 8015acc:	b933      	cbnz	r3, 8015adc <_free_r+0x2c>
 8015ace:	6063      	str	r3, [r4, #4]
 8015ad0:	6014      	str	r4, [r2, #0]
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ad8:	f000 b8e4 	b.w	8015ca4 <__malloc_unlock>
 8015adc:	42a3      	cmp	r3, r4
 8015ade:	d908      	bls.n	8015af2 <_free_r+0x42>
 8015ae0:	6820      	ldr	r0, [r4, #0]
 8015ae2:	1821      	adds	r1, r4, r0
 8015ae4:	428b      	cmp	r3, r1
 8015ae6:	bf01      	itttt	eq
 8015ae8:	6819      	ldreq	r1, [r3, #0]
 8015aea:	685b      	ldreq	r3, [r3, #4]
 8015aec:	1809      	addeq	r1, r1, r0
 8015aee:	6021      	streq	r1, [r4, #0]
 8015af0:	e7ed      	b.n	8015ace <_free_r+0x1e>
 8015af2:	461a      	mov	r2, r3
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	b10b      	cbz	r3, 8015afc <_free_r+0x4c>
 8015af8:	42a3      	cmp	r3, r4
 8015afa:	d9fa      	bls.n	8015af2 <_free_r+0x42>
 8015afc:	6811      	ldr	r1, [r2, #0]
 8015afe:	1850      	adds	r0, r2, r1
 8015b00:	42a0      	cmp	r0, r4
 8015b02:	d10b      	bne.n	8015b1c <_free_r+0x6c>
 8015b04:	6820      	ldr	r0, [r4, #0]
 8015b06:	4401      	add	r1, r0
 8015b08:	1850      	adds	r0, r2, r1
 8015b0a:	4283      	cmp	r3, r0
 8015b0c:	6011      	str	r1, [r2, #0]
 8015b0e:	d1e0      	bne.n	8015ad2 <_free_r+0x22>
 8015b10:	6818      	ldr	r0, [r3, #0]
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	6053      	str	r3, [r2, #4]
 8015b16:	4408      	add	r0, r1
 8015b18:	6010      	str	r0, [r2, #0]
 8015b1a:	e7da      	b.n	8015ad2 <_free_r+0x22>
 8015b1c:	d902      	bls.n	8015b24 <_free_r+0x74>
 8015b1e:	230c      	movs	r3, #12
 8015b20:	602b      	str	r3, [r5, #0]
 8015b22:	e7d6      	b.n	8015ad2 <_free_r+0x22>
 8015b24:	6820      	ldr	r0, [r4, #0]
 8015b26:	1821      	adds	r1, r4, r0
 8015b28:	428b      	cmp	r3, r1
 8015b2a:	bf04      	itt	eq
 8015b2c:	6819      	ldreq	r1, [r3, #0]
 8015b2e:	685b      	ldreq	r3, [r3, #4]
 8015b30:	6063      	str	r3, [r4, #4]
 8015b32:	bf04      	itt	eq
 8015b34:	1809      	addeq	r1, r1, r0
 8015b36:	6021      	streq	r1, [r4, #0]
 8015b38:	6054      	str	r4, [r2, #4]
 8015b3a:	e7ca      	b.n	8015ad2 <_free_r+0x22>
 8015b3c:	bd38      	pop	{r3, r4, r5, pc}
 8015b3e:	bf00      	nop
 8015b40:	20004d0c 	.word	0x20004d0c

08015b44 <malloc>:
 8015b44:	4b02      	ldr	r3, [pc, #8]	@ (8015b50 <malloc+0xc>)
 8015b46:	4601      	mov	r1, r0
 8015b48:	6818      	ldr	r0, [r3, #0]
 8015b4a:	f000 b825 	b.w	8015b98 <_malloc_r>
 8015b4e:	bf00      	nop
 8015b50:	20000054 	.word	0x20000054

08015b54 <sbrk_aligned>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	4e0f      	ldr	r6, [pc, #60]	@ (8015b94 <sbrk_aligned+0x40>)
 8015b58:	460c      	mov	r4, r1
 8015b5a:	6831      	ldr	r1, [r6, #0]
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	b911      	cbnz	r1, 8015b66 <sbrk_aligned+0x12>
 8015b60:	f001 fe04 	bl	801776c <_sbrk_r>
 8015b64:	6030      	str	r0, [r6, #0]
 8015b66:	4621      	mov	r1, r4
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f001 fdff 	bl	801776c <_sbrk_r>
 8015b6e:	1c43      	adds	r3, r0, #1
 8015b70:	d103      	bne.n	8015b7a <sbrk_aligned+0x26>
 8015b72:	f04f 34ff 	mov.w	r4, #4294967295
 8015b76:	4620      	mov	r0, r4
 8015b78:	bd70      	pop	{r4, r5, r6, pc}
 8015b7a:	1cc4      	adds	r4, r0, #3
 8015b7c:	f024 0403 	bic.w	r4, r4, #3
 8015b80:	42a0      	cmp	r0, r4
 8015b82:	d0f8      	beq.n	8015b76 <sbrk_aligned+0x22>
 8015b84:	1a21      	subs	r1, r4, r0
 8015b86:	4628      	mov	r0, r5
 8015b88:	f001 fdf0 	bl	801776c <_sbrk_r>
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	d1f2      	bne.n	8015b76 <sbrk_aligned+0x22>
 8015b90:	e7ef      	b.n	8015b72 <sbrk_aligned+0x1e>
 8015b92:	bf00      	nop
 8015b94:	20004d08 	.word	0x20004d08

08015b98 <_malloc_r>:
 8015b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b9c:	1ccd      	adds	r5, r1, #3
 8015b9e:	f025 0503 	bic.w	r5, r5, #3
 8015ba2:	3508      	adds	r5, #8
 8015ba4:	2d0c      	cmp	r5, #12
 8015ba6:	bf38      	it	cc
 8015ba8:	250c      	movcc	r5, #12
 8015baa:	2d00      	cmp	r5, #0
 8015bac:	4606      	mov	r6, r0
 8015bae:	db01      	blt.n	8015bb4 <_malloc_r+0x1c>
 8015bb0:	42a9      	cmp	r1, r5
 8015bb2:	d904      	bls.n	8015bbe <_malloc_r+0x26>
 8015bb4:	230c      	movs	r3, #12
 8015bb6:	6033      	str	r3, [r6, #0]
 8015bb8:	2000      	movs	r0, #0
 8015bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c94 <_malloc_r+0xfc>
 8015bc2:	f000 f869 	bl	8015c98 <__malloc_lock>
 8015bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8015bca:	461c      	mov	r4, r3
 8015bcc:	bb44      	cbnz	r4, 8015c20 <_malloc_r+0x88>
 8015bce:	4629      	mov	r1, r5
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f7ff ffbf 	bl	8015b54 <sbrk_aligned>
 8015bd6:	1c43      	adds	r3, r0, #1
 8015bd8:	4604      	mov	r4, r0
 8015bda:	d158      	bne.n	8015c8e <_malloc_r+0xf6>
 8015bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8015be0:	4627      	mov	r7, r4
 8015be2:	2f00      	cmp	r7, #0
 8015be4:	d143      	bne.n	8015c6e <_malloc_r+0xd6>
 8015be6:	2c00      	cmp	r4, #0
 8015be8:	d04b      	beq.n	8015c82 <_malloc_r+0xea>
 8015bea:	6823      	ldr	r3, [r4, #0]
 8015bec:	4639      	mov	r1, r7
 8015bee:	4630      	mov	r0, r6
 8015bf0:	eb04 0903 	add.w	r9, r4, r3
 8015bf4:	f001 fdba 	bl	801776c <_sbrk_r>
 8015bf8:	4581      	cmp	r9, r0
 8015bfa:	d142      	bne.n	8015c82 <_malloc_r+0xea>
 8015bfc:	6821      	ldr	r1, [r4, #0]
 8015bfe:	1a6d      	subs	r5, r5, r1
 8015c00:	4629      	mov	r1, r5
 8015c02:	4630      	mov	r0, r6
 8015c04:	f7ff ffa6 	bl	8015b54 <sbrk_aligned>
 8015c08:	3001      	adds	r0, #1
 8015c0a:	d03a      	beq.n	8015c82 <_malloc_r+0xea>
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	442b      	add	r3, r5
 8015c10:	6023      	str	r3, [r4, #0]
 8015c12:	f8d8 3000 	ldr.w	r3, [r8]
 8015c16:	685a      	ldr	r2, [r3, #4]
 8015c18:	bb62      	cbnz	r2, 8015c74 <_malloc_r+0xdc>
 8015c1a:	f8c8 7000 	str.w	r7, [r8]
 8015c1e:	e00f      	b.n	8015c40 <_malloc_r+0xa8>
 8015c20:	6822      	ldr	r2, [r4, #0]
 8015c22:	1b52      	subs	r2, r2, r5
 8015c24:	d420      	bmi.n	8015c68 <_malloc_r+0xd0>
 8015c26:	2a0b      	cmp	r2, #11
 8015c28:	d917      	bls.n	8015c5a <_malloc_r+0xc2>
 8015c2a:	1961      	adds	r1, r4, r5
 8015c2c:	42a3      	cmp	r3, r4
 8015c2e:	6025      	str	r5, [r4, #0]
 8015c30:	bf18      	it	ne
 8015c32:	6059      	strne	r1, [r3, #4]
 8015c34:	6863      	ldr	r3, [r4, #4]
 8015c36:	bf08      	it	eq
 8015c38:	f8c8 1000 	streq.w	r1, [r8]
 8015c3c:	5162      	str	r2, [r4, r5]
 8015c3e:	604b      	str	r3, [r1, #4]
 8015c40:	4630      	mov	r0, r6
 8015c42:	f000 f82f 	bl	8015ca4 <__malloc_unlock>
 8015c46:	f104 000b 	add.w	r0, r4, #11
 8015c4a:	1d23      	adds	r3, r4, #4
 8015c4c:	f020 0007 	bic.w	r0, r0, #7
 8015c50:	1ac2      	subs	r2, r0, r3
 8015c52:	bf1c      	itt	ne
 8015c54:	1a1b      	subne	r3, r3, r0
 8015c56:	50a3      	strne	r3, [r4, r2]
 8015c58:	e7af      	b.n	8015bba <_malloc_r+0x22>
 8015c5a:	6862      	ldr	r2, [r4, #4]
 8015c5c:	42a3      	cmp	r3, r4
 8015c5e:	bf0c      	ite	eq
 8015c60:	f8c8 2000 	streq.w	r2, [r8]
 8015c64:	605a      	strne	r2, [r3, #4]
 8015c66:	e7eb      	b.n	8015c40 <_malloc_r+0xa8>
 8015c68:	4623      	mov	r3, r4
 8015c6a:	6864      	ldr	r4, [r4, #4]
 8015c6c:	e7ae      	b.n	8015bcc <_malloc_r+0x34>
 8015c6e:	463c      	mov	r4, r7
 8015c70:	687f      	ldr	r7, [r7, #4]
 8015c72:	e7b6      	b.n	8015be2 <_malloc_r+0x4a>
 8015c74:	461a      	mov	r2, r3
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	42a3      	cmp	r3, r4
 8015c7a:	d1fb      	bne.n	8015c74 <_malloc_r+0xdc>
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	6053      	str	r3, [r2, #4]
 8015c80:	e7de      	b.n	8015c40 <_malloc_r+0xa8>
 8015c82:	230c      	movs	r3, #12
 8015c84:	6033      	str	r3, [r6, #0]
 8015c86:	4630      	mov	r0, r6
 8015c88:	f000 f80c 	bl	8015ca4 <__malloc_unlock>
 8015c8c:	e794      	b.n	8015bb8 <_malloc_r+0x20>
 8015c8e:	6005      	str	r5, [r0, #0]
 8015c90:	e7d6      	b.n	8015c40 <_malloc_r+0xa8>
 8015c92:	bf00      	nop
 8015c94:	20004d0c 	.word	0x20004d0c

08015c98 <__malloc_lock>:
 8015c98:	4801      	ldr	r0, [pc, #4]	@ (8015ca0 <__malloc_lock+0x8>)
 8015c9a:	f7ff b89a 	b.w	8014dd2 <__retarget_lock_acquire_recursive>
 8015c9e:	bf00      	nop
 8015ca0:	20004d04 	.word	0x20004d04

08015ca4 <__malloc_unlock>:
 8015ca4:	4801      	ldr	r0, [pc, #4]	@ (8015cac <__malloc_unlock+0x8>)
 8015ca6:	f7ff b895 	b.w	8014dd4 <__retarget_lock_release_recursive>
 8015caa:	bf00      	nop
 8015cac:	20004d04 	.word	0x20004d04

08015cb0 <_Balloc>:
 8015cb0:	b570      	push	{r4, r5, r6, lr}
 8015cb2:	69c6      	ldr	r6, [r0, #28]
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	460d      	mov	r5, r1
 8015cb8:	b976      	cbnz	r6, 8015cd8 <_Balloc+0x28>
 8015cba:	2010      	movs	r0, #16
 8015cbc:	f7ff ff42 	bl	8015b44 <malloc>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	61e0      	str	r0, [r4, #28]
 8015cc4:	b920      	cbnz	r0, 8015cd0 <_Balloc+0x20>
 8015cc6:	4b18      	ldr	r3, [pc, #96]	@ (8015d28 <_Balloc+0x78>)
 8015cc8:	4818      	ldr	r0, [pc, #96]	@ (8015d2c <_Balloc+0x7c>)
 8015cca:	216b      	movs	r1, #107	@ 0x6b
 8015ccc:	f001 fd68 	bl	80177a0 <__assert_func>
 8015cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015cd4:	6006      	str	r6, [r0, #0]
 8015cd6:	60c6      	str	r6, [r0, #12]
 8015cd8:	69e6      	ldr	r6, [r4, #28]
 8015cda:	68f3      	ldr	r3, [r6, #12]
 8015cdc:	b183      	cbz	r3, 8015d00 <_Balloc+0x50>
 8015cde:	69e3      	ldr	r3, [r4, #28]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ce6:	b9b8      	cbnz	r0, 8015d18 <_Balloc+0x68>
 8015ce8:	2101      	movs	r1, #1
 8015cea:	fa01 f605 	lsl.w	r6, r1, r5
 8015cee:	1d72      	adds	r2, r6, #5
 8015cf0:	0092      	lsls	r2, r2, #2
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f001 fd72 	bl	80177dc <_calloc_r>
 8015cf8:	b160      	cbz	r0, 8015d14 <_Balloc+0x64>
 8015cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015cfe:	e00e      	b.n	8015d1e <_Balloc+0x6e>
 8015d00:	2221      	movs	r2, #33	@ 0x21
 8015d02:	2104      	movs	r1, #4
 8015d04:	4620      	mov	r0, r4
 8015d06:	f001 fd69 	bl	80177dc <_calloc_r>
 8015d0a:	69e3      	ldr	r3, [r4, #28]
 8015d0c:	60f0      	str	r0, [r6, #12]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d1e4      	bne.n	8015cde <_Balloc+0x2e>
 8015d14:	2000      	movs	r0, #0
 8015d16:	bd70      	pop	{r4, r5, r6, pc}
 8015d18:	6802      	ldr	r2, [r0, #0]
 8015d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d1e:	2300      	movs	r3, #0
 8015d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d24:	e7f7      	b.n	8015d16 <_Balloc+0x66>
 8015d26:	bf00      	nop
 8015d28:	0801af7a 	.word	0x0801af7a
 8015d2c:	0801affa 	.word	0x0801affa

08015d30 <_Bfree>:
 8015d30:	b570      	push	{r4, r5, r6, lr}
 8015d32:	69c6      	ldr	r6, [r0, #28]
 8015d34:	4605      	mov	r5, r0
 8015d36:	460c      	mov	r4, r1
 8015d38:	b976      	cbnz	r6, 8015d58 <_Bfree+0x28>
 8015d3a:	2010      	movs	r0, #16
 8015d3c:	f7ff ff02 	bl	8015b44 <malloc>
 8015d40:	4602      	mov	r2, r0
 8015d42:	61e8      	str	r0, [r5, #28]
 8015d44:	b920      	cbnz	r0, 8015d50 <_Bfree+0x20>
 8015d46:	4b09      	ldr	r3, [pc, #36]	@ (8015d6c <_Bfree+0x3c>)
 8015d48:	4809      	ldr	r0, [pc, #36]	@ (8015d70 <_Bfree+0x40>)
 8015d4a:	218f      	movs	r1, #143	@ 0x8f
 8015d4c:	f001 fd28 	bl	80177a0 <__assert_func>
 8015d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d54:	6006      	str	r6, [r0, #0]
 8015d56:	60c6      	str	r6, [r0, #12]
 8015d58:	b13c      	cbz	r4, 8015d6a <_Bfree+0x3a>
 8015d5a:	69eb      	ldr	r3, [r5, #28]
 8015d5c:	6862      	ldr	r2, [r4, #4]
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d64:	6021      	str	r1, [r4, #0]
 8015d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	0801af7a 	.word	0x0801af7a
 8015d70:	0801affa 	.word	0x0801affa

08015d74 <__multadd>:
 8015d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d78:	690d      	ldr	r5, [r1, #16]
 8015d7a:	4607      	mov	r7, r0
 8015d7c:	460c      	mov	r4, r1
 8015d7e:	461e      	mov	r6, r3
 8015d80:	f101 0c14 	add.w	ip, r1, #20
 8015d84:	2000      	movs	r0, #0
 8015d86:	f8dc 3000 	ldr.w	r3, [ip]
 8015d8a:	b299      	uxth	r1, r3
 8015d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8015d90:	0c1e      	lsrs	r6, r3, #16
 8015d92:	0c0b      	lsrs	r3, r1, #16
 8015d94:	fb02 3306 	mla	r3, r2, r6, r3
 8015d98:	b289      	uxth	r1, r1
 8015d9a:	3001      	adds	r0, #1
 8015d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015da0:	4285      	cmp	r5, r0
 8015da2:	f84c 1b04 	str.w	r1, [ip], #4
 8015da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015daa:	dcec      	bgt.n	8015d86 <__multadd+0x12>
 8015dac:	b30e      	cbz	r6, 8015df2 <__multadd+0x7e>
 8015dae:	68a3      	ldr	r3, [r4, #8]
 8015db0:	42ab      	cmp	r3, r5
 8015db2:	dc19      	bgt.n	8015de8 <__multadd+0x74>
 8015db4:	6861      	ldr	r1, [r4, #4]
 8015db6:	4638      	mov	r0, r7
 8015db8:	3101      	adds	r1, #1
 8015dba:	f7ff ff79 	bl	8015cb0 <_Balloc>
 8015dbe:	4680      	mov	r8, r0
 8015dc0:	b928      	cbnz	r0, 8015dce <__multadd+0x5a>
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8015df8 <__multadd+0x84>)
 8015dc6:	480d      	ldr	r0, [pc, #52]	@ (8015dfc <__multadd+0x88>)
 8015dc8:	21ba      	movs	r1, #186	@ 0xba
 8015dca:	f001 fce9 	bl	80177a0 <__assert_func>
 8015dce:	6922      	ldr	r2, [r4, #16]
 8015dd0:	3202      	adds	r2, #2
 8015dd2:	f104 010c 	add.w	r1, r4, #12
 8015dd6:	0092      	lsls	r2, r2, #2
 8015dd8:	300c      	adds	r0, #12
 8015dda:	f7fe fffc 	bl	8014dd6 <memcpy>
 8015dde:	4621      	mov	r1, r4
 8015de0:	4638      	mov	r0, r7
 8015de2:	f7ff ffa5 	bl	8015d30 <_Bfree>
 8015de6:	4644      	mov	r4, r8
 8015de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015dec:	3501      	adds	r5, #1
 8015dee:	615e      	str	r6, [r3, #20]
 8015df0:	6125      	str	r5, [r4, #16]
 8015df2:	4620      	mov	r0, r4
 8015df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df8:	0801afe9 	.word	0x0801afe9
 8015dfc:	0801affa 	.word	0x0801affa

08015e00 <__s2b>:
 8015e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e04:	460c      	mov	r4, r1
 8015e06:	4615      	mov	r5, r2
 8015e08:	461f      	mov	r7, r3
 8015e0a:	2209      	movs	r2, #9
 8015e0c:	3308      	adds	r3, #8
 8015e0e:	4606      	mov	r6, r0
 8015e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e14:	2100      	movs	r1, #0
 8015e16:	2201      	movs	r2, #1
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	db09      	blt.n	8015e30 <__s2b+0x30>
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	f7ff ff47 	bl	8015cb0 <_Balloc>
 8015e22:	b940      	cbnz	r0, 8015e36 <__s2b+0x36>
 8015e24:	4602      	mov	r2, r0
 8015e26:	4b19      	ldr	r3, [pc, #100]	@ (8015e8c <__s2b+0x8c>)
 8015e28:	4819      	ldr	r0, [pc, #100]	@ (8015e90 <__s2b+0x90>)
 8015e2a:	21d3      	movs	r1, #211	@ 0xd3
 8015e2c:	f001 fcb8 	bl	80177a0 <__assert_func>
 8015e30:	0052      	lsls	r2, r2, #1
 8015e32:	3101      	adds	r1, #1
 8015e34:	e7f0      	b.n	8015e18 <__s2b+0x18>
 8015e36:	9b08      	ldr	r3, [sp, #32]
 8015e38:	6143      	str	r3, [r0, #20]
 8015e3a:	2d09      	cmp	r5, #9
 8015e3c:	f04f 0301 	mov.w	r3, #1
 8015e40:	6103      	str	r3, [r0, #16]
 8015e42:	dd16      	ble.n	8015e72 <__s2b+0x72>
 8015e44:	f104 0909 	add.w	r9, r4, #9
 8015e48:	46c8      	mov	r8, r9
 8015e4a:	442c      	add	r4, r5
 8015e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015e50:	4601      	mov	r1, r0
 8015e52:	3b30      	subs	r3, #48	@ 0x30
 8015e54:	220a      	movs	r2, #10
 8015e56:	4630      	mov	r0, r6
 8015e58:	f7ff ff8c 	bl	8015d74 <__multadd>
 8015e5c:	45a0      	cmp	r8, r4
 8015e5e:	d1f5      	bne.n	8015e4c <__s2b+0x4c>
 8015e60:	f1a5 0408 	sub.w	r4, r5, #8
 8015e64:	444c      	add	r4, r9
 8015e66:	1b2d      	subs	r5, r5, r4
 8015e68:	1963      	adds	r3, r4, r5
 8015e6a:	42bb      	cmp	r3, r7
 8015e6c:	db04      	blt.n	8015e78 <__s2b+0x78>
 8015e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e72:	340a      	adds	r4, #10
 8015e74:	2509      	movs	r5, #9
 8015e76:	e7f6      	b.n	8015e66 <__s2b+0x66>
 8015e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015e7c:	4601      	mov	r1, r0
 8015e7e:	3b30      	subs	r3, #48	@ 0x30
 8015e80:	220a      	movs	r2, #10
 8015e82:	4630      	mov	r0, r6
 8015e84:	f7ff ff76 	bl	8015d74 <__multadd>
 8015e88:	e7ee      	b.n	8015e68 <__s2b+0x68>
 8015e8a:	bf00      	nop
 8015e8c:	0801afe9 	.word	0x0801afe9
 8015e90:	0801affa 	.word	0x0801affa

08015e94 <__hi0bits>:
 8015e94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015e98:	4603      	mov	r3, r0
 8015e9a:	bf36      	itet	cc
 8015e9c:	0403      	lslcc	r3, r0, #16
 8015e9e:	2000      	movcs	r0, #0
 8015ea0:	2010      	movcc	r0, #16
 8015ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015ea6:	bf3c      	itt	cc
 8015ea8:	021b      	lslcc	r3, r3, #8
 8015eaa:	3008      	addcc	r0, #8
 8015eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015eb0:	bf3c      	itt	cc
 8015eb2:	011b      	lslcc	r3, r3, #4
 8015eb4:	3004      	addcc	r0, #4
 8015eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015eba:	bf3c      	itt	cc
 8015ebc:	009b      	lslcc	r3, r3, #2
 8015ebe:	3002      	addcc	r0, #2
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	db05      	blt.n	8015ed0 <__hi0bits+0x3c>
 8015ec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015ec8:	f100 0001 	add.w	r0, r0, #1
 8015ecc:	bf08      	it	eq
 8015ece:	2020      	moveq	r0, #32
 8015ed0:	4770      	bx	lr

08015ed2 <__lo0bits>:
 8015ed2:	6803      	ldr	r3, [r0, #0]
 8015ed4:	4602      	mov	r2, r0
 8015ed6:	f013 0007 	ands.w	r0, r3, #7
 8015eda:	d00b      	beq.n	8015ef4 <__lo0bits+0x22>
 8015edc:	07d9      	lsls	r1, r3, #31
 8015ede:	d421      	bmi.n	8015f24 <__lo0bits+0x52>
 8015ee0:	0798      	lsls	r0, r3, #30
 8015ee2:	bf49      	itett	mi
 8015ee4:	085b      	lsrmi	r3, r3, #1
 8015ee6:	089b      	lsrpl	r3, r3, #2
 8015ee8:	2001      	movmi	r0, #1
 8015eea:	6013      	strmi	r3, [r2, #0]
 8015eec:	bf5c      	itt	pl
 8015eee:	6013      	strpl	r3, [r2, #0]
 8015ef0:	2002      	movpl	r0, #2
 8015ef2:	4770      	bx	lr
 8015ef4:	b299      	uxth	r1, r3
 8015ef6:	b909      	cbnz	r1, 8015efc <__lo0bits+0x2a>
 8015ef8:	0c1b      	lsrs	r3, r3, #16
 8015efa:	2010      	movs	r0, #16
 8015efc:	b2d9      	uxtb	r1, r3
 8015efe:	b909      	cbnz	r1, 8015f04 <__lo0bits+0x32>
 8015f00:	3008      	adds	r0, #8
 8015f02:	0a1b      	lsrs	r3, r3, #8
 8015f04:	0719      	lsls	r1, r3, #28
 8015f06:	bf04      	itt	eq
 8015f08:	091b      	lsreq	r3, r3, #4
 8015f0a:	3004      	addeq	r0, #4
 8015f0c:	0799      	lsls	r1, r3, #30
 8015f0e:	bf04      	itt	eq
 8015f10:	089b      	lsreq	r3, r3, #2
 8015f12:	3002      	addeq	r0, #2
 8015f14:	07d9      	lsls	r1, r3, #31
 8015f16:	d403      	bmi.n	8015f20 <__lo0bits+0x4e>
 8015f18:	085b      	lsrs	r3, r3, #1
 8015f1a:	f100 0001 	add.w	r0, r0, #1
 8015f1e:	d003      	beq.n	8015f28 <__lo0bits+0x56>
 8015f20:	6013      	str	r3, [r2, #0]
 8015f22:	4770      	bx	lr
 8015f24:	2000      	movs	r0, #0
 8015f26:	4770      	bx	lr
 8015f28:	2020      	movs	r0, #32
 8015f2a:	4770      	bx	lr

08015f2c <__i2b>:
 8015f2c:	b510      	push	{r4, lr}
 8015f2e:	460c      	mov	r4, r1
 8015f30:	2101      	movs	r1, #1
 8015f32:	f7ff febd 	bl	8015cb0 <_Balloc>
 8015f36:	4602      	mov	r2, r0
 8015f38:	b928      	cbnz	r0, 8015f46 <__i2b+0x1a>
 8015f3a:	4b05      	ldr	r3, [pc, #20]	@ (8015f50 <__i2b+0x24>)
 8015f3c:	4805      	ldr	r0, [pc, #20]	@ (8015f54 <__i2b+0x28>)
 8015f3e:	f240 1145 	movw	r1, #325	@ 0x145
 8015f42:	f001 fc2d 	bl	80177a0 <__assert_func>
 8015f46:	2301      	movs	r3, #1
 8015f48:	6144      	str	r4, [r0, #20]
 8015f4a:	6103      	str	r3, [r0, #16]
 8015f4c:	bd10      	pop	{r4, pc}
 8015f4e:	bf00      	nop
 8015f50:	0801afe9 	.word	0x0801afe9
 8015f54:	0801affa 	.word	0x0801affa

08015f58 <__multiply>:
 8015f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5c:	4617      	mov	r7, r2
 8015f5e:	690a      	ldr	r2, [r1, #16]
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	bfa8      	it	ge
 8015f66:	463b      	movge	r3, r7
 8015f68:	4689      	mov	r9, r1
 8015f6a:	bfa4      	itt	ge
 8015f6c:	460f      	movge	r7, r1
 8015f6e:	4699      	movge	r9, r3
 8015f70:	693d      	ldr	r5, [r7, #16]
 8015f72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	6879      	ldr	r1, [r7, #4]
 8015f7a:	eb05 060a 	add.w	r6, r5, sl
 8015f7e:	42b3      	cmp	r3, r6
 8015f80:	b085      	sub	sp, #20
 8015f82:	bfb8      	it	lt
 8015f84:	3101      	addlt	r1, #1
 8015f86:	f7ff fe93 	bl	8015cb0 <_Balloc>
 8015f8a:	b930      	cbnz	r0, 8015f9a <__multiply+0x42>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	4b41      	ldr	r3, [pc, #260]	@ (8016094 <__multiply+0x13c>)
 8015f90:	4841      	ldr	r0, [pc, #260]	@ (8016098 <__multiply+0x140>)
 8015f92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015f96:	f001 fc03 	bl	80177a0 <__assert_func>
 8015f9a:	f100 0414 	add.w	r4, r0, #20
 8015f9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015fa2:	4623      	mov	r3, r4
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	4573      	cmp	r3, lr
 8015fa8:	d320      	bcc.n	8015fec <__multiply+0x94>
 8015faa:	f107 0814 	add.w	r8, r7, #20
 8015fae:	f109 0114 	add.w	r1, r9, #20
 8015fb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015fb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015fba:	9302      	str	r3, [sp, #8]
 8015fbc:	1beb      	subs	r3, r5, r7
 8015fbe:	3b15      	subs	r3, #21
 8015fc0:	f023 0303 	bic.w	r3, r3, #3
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	3715      	adds	r7, #21
 8015fc8:	42bd      	cmp	r5, r7
 8015fca:	bf38      	it	cc
 8015fcc:	2304      	movcc	r3, #4
 8015fce:	9301      	str	r3, [sp, #4]
 8015fd0:	9b02      	ldr	r3, [sp, #8]
 8015fd2:	9103      	str	r1, [sp, #12]
 8015fd4:	428b      	cmp	r3, r1
 8015fd6:	d80c      	bhi.n	8015ff2 <__multiply+0x9a>
 8015fd8:	2e00      	cmp	r6, #0
 8015fda:	dd03      	ble.n	8015fe4 <__multiply+0x8c>
 8015fdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d055      	beq.n	8016090 <__multiply+0x138>
 8015fe4:	6106      	str	r6, [r0, #16]
 8015fe6:	b005      	add	sp, #20
 8015fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fec:	f843 2b04 	str.w	r2, [r3], #4
 8015ff0:	e7d9      	b.n	8015fa6 <__multiply+0x4e>
 8015ff2:	f8b1 a000 	ldrh.w	sl, [r1]
 8015ff6:	f1ba 0f00 	cmp.w	sl, #0
 8015ffa:	d01f      	beq.n	801603c <__multiply+0xe4>
 8015ffc:	46c4      	mov	ip, r8
 8015ffe:	46a1      	mov	r9, r4
 8016000:	2700      	movs	r7, #0
 8016002:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016006:	f8d9 3000 	ldr.w	r3, [r9]
 801600a:	fa1f fb82 	uxth.w	fp, r2
 801600e:	b29b      	uxth	r3, r3
 8016010:	fb0a 330b 	mla	r3, sl, fp, r3
 8016014:	443b      	add	r3, r7
 8016016:	f8d9 7000 	ldr.w	r7, [r9]
 801601a:	0c12      	lsrs	r2, r2, #16
 801601c:	0c3f      	lsrs	r7, r7, #16
 801601e:	fb0a 7202 	mla	r2, sl, r2, r7
 8016022:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016026:	b29b      	uxth	r3, r3
 8016028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801602c:	4565      	cmp	r5, ip
 801602e:	f849 3b04 	str.w	r3, [r9], #4
 8016032:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016036:	d8e4      	bhi.n	8016002 <__multiply+0xaa>
 8016038:	9b01      	ldr	r3, [sp, #4]
 801603a:	50e7      	str	r7, [r4, r3]
 801603c:	9b03      	ldr	r3, [sp, #12]
 801603e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016042:	3104      	adds	r1, #4
 8016044:	f1b9 0f00 	cmp.w	r9, #0
 8016048:	d020      	beq.n	801608c <__multiply+0x134>
 801604a:	6823      	ldr	r3, [r4, #0]
 801604c:	4647      	mov	r7, r8
 801604e:	46a4      	mov	ip, r4
 8016050:	f04f 0a00 	mov.w	sl, #0
 8016054:	f8b7 b000 	ldrh.w	fp, [r7]
 8016058:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801605c:	fb09 220b 	mla	r2, r9, fp, r2
 8016060:	4452      	add	r2, sl
 8016062:	b29b      	uxth	r3, r3
 8016064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016068:	f84c 3b04 	str.w	r3, [ip], #4
 801606c:	f857 3b04 	ldr.w	r3, [r7], #4
 8016070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016074:	f8bc 3000 	ldrh.w	r3, [ip]
 8016078:	fb09 330a 	mla	r3, r9, sl, r3
 801607c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016080:	42bd      	cmp	r5, r7
 8016082:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016086:	d8e5      	bhi.n	8016054 <__multiply+0xfc>
 8016088:	9a01      	ldr	r2, [sp, #4]
 801608a:	50a3      	str	r3, [r4, r2]
 801608c:	3404      	adds	r4, #4
 801608e:	e79f      	b.n	8015fd0 <__multiply+0x78>
 8016090:	3e01      	subs	r6, #1
 8016092:	e7a1      	b.n	8015fd8 <__multiply+0x80>
 8016094:	0801afe9 	.word	0x0801afe9
 8016098:	0801affa 	.word	0x0801affa

0801609c <__pow5mult>:
 801609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a0:	4615      	mov	r5, r2
 80160a2:	f012 0203 	ands.w	r2, r2, #3
 80160a6:	4607      	mov	r7, r0
 80160a8:	460e      	mov	r6, r1
 80160aa:	d007      	beq.n	80160bc <__pow5mult+0x20>
 80160ac:	4c25      	ldr	r4, [pc, #148]	@ (8016144 <__pow5mult+0xa8>)
 80160ae:	3a01      	subs	r2, #1
 80160b0:	2300      	movs	r3, #0
 80160b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160b6:	f7ff fe5d 	bl	8015d74 <__multadd>
 80160ba:	4606      	mov	r6, r0
 80160bc:	10ad      	asrs	r5, r5, #2
 80160be:	d03d      	beq.n	801613c <__pow5mult+0xa0>
 80160c0:	69fc      	ldr	r4, [r7, #28]
 80160c2:	b97c      	cbnz	r4, 80160e4 <__pow5mult+0x48>
 80160c4:	2010      	movs	r0, #16
 80160c6:	f7ff fd3d 	bl	8015b44 <malloc>
 80160ca:	4602      	mov	r2, r0
 80160cc:	61f8      	str	r0, [r7, #28]
 80160ce:	b928      	cbnz	r0, 80160dc <__pow5mult+0x40>
 80160d0:	4b1d      	ldr	r3, [pc, #116]	@ (8016148 <__pow5mult+0xac>)
 80160d2:	481e      	ldr	r0, [pc, #120]	@ (801614c <__pow5mult+0xb0>)
 80160d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80160d8:	f001 fb62 	bl	80177a0 <__assert_func>
 80160dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80160e0:	6004      	str	r4, [r0, #0]
 80160e2:	60c4      	str	r4, [r0, #12]
 80160e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80160e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80160ec:	b94c      	cbnz	r4, 8016102 <__pow5mult+0x66>
 80160ee:	f240 2171 	movw	r1, #625	@ 0x271
 80160f2:	4638      	mov	r0, r7
 80160f4:	f7ff ff1a 	bl	8015f2c <__i2b>
 80160f8:	2300      	movs	r3, #0
 80160fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80160fe:	4604      	mov	r4, r0
 8016100:	6003      	str	r3, [r0, #0]
 8016102:	f04f 0900 	mov.w	r9, #0
 8016106:	07eb      	lsls	r3, r5, #31
 8016108:	d50a      	bpl.n	8016120 <__pow5mult+0x84>
 801610a:	4631      	mov	r1, r6
 801610c:	4622      	mov	r2, r4
 801610e:	4638      	mov	r0, r7
 8016110:	f7ff ff22 	bl	8015f58 <__multiply>
 8016114:	4631      	mov	r1, r6
 8016116:	4680      	mov	r8, r0
 8016118:	4638      	mov	r0, r7
 801611a:	f7ff fe09 	bl	8015d30 <_Bfree>
 801611e:	4646      	mov	r6, r8
 8016120:	106d      	asrs	r5, r5, #1
 8016122:	d00b      	beq.n	801613c <__pow5mult+0xa0>
 8016124:	6820      	ldr	r0, [r4, #0]
 8016126:	b938      	cbnz	r0, 8016138 <__pow5mult+0x9c>
 8016128:	4622      	mov	r2, r4
 801612a:	4621      	mov	r1, r4
 801612c:	4638      	mov	r0, r7
 801612e:	f7ff ff13 	bl	8015f58 <__multiply>
 8016132:	6020      	str	r0, [r4, #0]
 8016134:	f8c0 9000 	str.w	r9, [r0]
 8016138:	4604      	mov	r4, r0
 801613a:	e7e4      	b.n	8016106 <__pow5mult+0x6a>
 801613c:	4630      	mov	r0, r6
 801613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016142:	bf00      	nop
 8016144:	0801b10c 	.word	0x0801b10c
 8016148:	0801af7a 	.word	0x0801af7a
 801614c:	0801affa 	.word	0x0801affa

08016150 <__lshift>:
 8016150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016154:	460c      	mov	r4, r1
 8016156:	6849      	ldr	r1, [r1, #4]
 8016158:	6923      	ldr	r3, [r4, #16]
 801615a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801615e:	68a3      	ldr	r3, [r4, #8]
 8016160:	4607      	mov	r7, r0
 8016162:	4691      	mov	r9, r2
 8016164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016168:	f108 0601 	add.w	r6, r8, #1
 801616c:	42b3      	cmp	r3, r6
 801616e:	db0b      	blt.n	8016188 <__lshift+0x38>
 8016170:	4638      	mov	r0, r7
 8016172:	f7ff fd9d 	bl	8015cb0 <_Balloc>
 8016176:	4605      	mov	r5, r0
 8016178:	b948      	cbnz	r0, 801618e <__lshift+0x3e>
 801617a:	4602      	mov	r2, r0
 801617c:	4b28      	ldr	r3, [pc, #160]	@ (8016220 <__lshift+0xd0>)
 801617e:	4829      	ldr	r0, [pc, #164]	@ (8016224 <__lshift+0xd4>)
 8016180:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016184:	f001 fb0c 	bl	80177a0 <__assert_func>
 8016188:	3101      	adds	r1, #1
 801618a:	005b      	lsls	r3, r3, #1
 801618c:	e7ee      	b.n	801616c <__lshift+0x1c>
 801618e:	2300      	movs	r3, #0
 8016190:	f100 0114 	add.w	r1, r0, #20
 8016194:	f100 0210 	add.w	r2, r0, #16
 8016198:	4618      	mov	r0, r3
 801619a:	4553      	cmp	r3, sl
 801619c:	db33      	blt.n	8016206 <__lshift+0xb6>
 801619e:	6920      	ldr	r0, [r4, #16]
 80161a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161a4:	f104 0314 	add.w	r3, r4, #20
 80161a8:	f019 091f 	ands.w	r9, r9, #31
 80161ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80161b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80161b4:	d02b      	beq.n	801620e <__lshift+0xbe>
 80161b6:	f1c9 0e20 	rsb	lr, r9, #32
 80161ba:	468a      	mov	sl, r1
 80161bc:	2200      	movs	r2, #0
 80161be:	6818      	ldr	r0, [r3, #0]
 80161c0:	fa00 f009 	lsl.w	r0, r0, r9
 80161c4:	4310      	orrs	r0, r2
 80161c6:	f84a 0b04 	str.w	r0, [sl], #4
 80161ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ce:	459c      	cmp	ip, r3
 80161d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80161d4:	d8f3      	bhi.n	80161be <__lshift+0x6e>
 80161d6:	ebac 0304 	sub.w	r3, ip, r4
 80161da:	3b15      	subs	r3, #21
 80161dc:	f023 0303 	bic.w	r3, r3, #3
 80161e0:	3304      	adds	r3, #4
 80161e2:	f104 0015 	add.w	r0, r4, #21
 80161e6:	4560      	cmp	r0, ip
 80161e8:	bf88      	it	hi
 80161ea:	2304      	movhi	r3, #4
 80161ec:	50ca      	str	r2, [r1, r3]
 80161ee:	b10a      	cbz	r2, 80161f4 <__lshift+0xa4>
 80161f0:	f108 0602 	add.w	r6, r8, #2
 80161f4:	3e01      	subs	r6, #1
 80161f6:	4638      	mov	r0, r7
 80161f8:	612e      	str	r6, [r5, #16]
 80161fa:	4621      	mov	r1, r4
 80161fc:	f7ff fd98 	bl	8015d30 <_Bfree>
 8016200:	4628      	mov	r0, r5
 8016202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016206:	f842 0f04 	str.w	r0, [r2, #4]!
 801620a:	3301      	adds	r3, #1
 801620c:	e7c5      	b.n	801619a <__lshift+0x4a>
 801620e:	3904      	subs	r1, #4
 8016210:	f853 2b04 	ldr.w	r2, [r3], #4
 8016214:	f841 2f04 	str.w	r2, [r1, #4]!
 8016218:	459c      	cmp	ip, r3
 801621a:	d8f9      	bhi.n	8016210 <__lshift+0xc0>
 801621c:	e7ea      	b.n	80161f4 <__lshift+0xa4>
 801621e:	bf00      	nop
 8016220:	0801afe9 	.word	0x0801afe9
 8016224:	0801affa 	.word	0x0801affa

08016228 <__mcmp>:
 8016228:	690a      	ldr	r2, [r1, #16]
 801622a:	4603      	mov	r3, r0
 801622c:	6900      	ldr	r0, [r0, #16]
 801622e:	1a80      	subs	r0, r0, r2
 8016230:	b530      	push	{r4, r5, lr}
 8016232:	d10e      	bne.n	8016252 <__mcmp+0x2a>
 8016234:	3314      	adds	r3, #20
 8016236:	3114      	adds	r1, #20
 8016238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801623c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016248:	4295      	cmp	r5, r2
 801624a:	d003      	beq.n	8016254 <__mcmp+0x2c>
 801624c:	d205      	bcs.n	801625a <__mcmp+0x32>
 801624e:	f04f 30ff 	mov.w	r0, #4294967295
 8016252:	bd30      	pop	{r4, r5, pc}
 8016254:	42a3      	cmp	r3, r4
 8016256:	d3f3      	bcc.n	8016240 <__mcmp+0x18>
 8016258:	e7fb      	b.n	8016252 <__mcmp+0x2a>
 801625a:	2001      	movs	r0, #1
 801625c:	e7f9      	b.n	8016252 <__mcmp+0x2a>
	...

08016260 <__mdiff>:
 8016260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	4689      	mov	r9, r1
 8016266:	4606      	mov	r6, r0
 8016268:	4611      	mov	r1, r2
 801626a:	4648      	mov	r0, r9
 801626c:	4614      	mov	r4, r2
 801626e:	f7ff ffdb 	bl	8016228 <__mcmp>
 8016272:	1e05      	subs	r5, r0, #0
 8016274:	d112      	bne.n	801629c <__mdiff+0x3c>
 8016276:	4629      	mov	r1, r5
 8016278:	4630      	mov	r0, r6
 801627a:	f7ff fd19 	bl	8015cb0 <_Balloc>
 801627e:	4602      	mov	r2, r0
 8016280:	b928      	cbnz	r0, 801628e <__mdiff+0x2e>
 8016282:	4b3f      	ldr	r3, [pc, #252]	@ (8016380 <__mdiff+0x120>)
 8016284:	f240 2137 	movw	r1, #567	@ 0x237
 8016288:	483e      	ldr	r0, [pc, #248]	@ (8016384 <__mdiff+0x124>)
 801628a:	f001 fa89 	bl	80177a0 <__assert_func>
 801628e:	2301      	movs	r3, #1
 8016290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016294:	4610      	mov	r0, r2
 8016296:	b003      	add	sp, #12
 8016298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629c:	bfbc      	itt	lt
 801629e:	464b      	movlt	r3, r9
 80162a0:	46a1      	movlt	r9, r4
 80162a2:	4630      	mov	r0, r6
 80162a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80162a8:	bfba      	itte	lt
 80162aa:	461c      	movlt	r4, r3
 80162ac:	2501      	movlt	r5, #1
 80162ae:	2500      	movge	r5, #0
 80162b0:	f7ff fcfe 	bl	8015cb0 <_Balloc>
 80162b4:	4602      	mov	r2, r0
 80162b6:	b918      	cbnz	r0, 80162c0 <__mdiff+0x60>
 80162b8:	4b31      	ldr	r3, [pc, #196]	@ (8016380 <__mdiff+0x120>)
 80162ba:	f240 2145 	movw	r1, #581	@ 0x245
 80162be:	e7e3      	b.n	8016288 <__mdiff+0x28>
 80162c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80162c4:	6926      	ldr	r6, [r4, #16]
 80162c6:	60c5      	str	r5, [r0, #12]
 80162c8:	f109 0310 	add.w	r3, r9, #16
 80162cc:	f109 0514 	add.w	r5, r9, #20
 80162d0:	f104 0e14 	add.w	lr, r4, #20
 80162d4:	f100 0b14 	add.w	fp, r0, #20
 80162d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80162dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	46d9      	mov	r9, fp
 80162e4:	f04f 0c00 	mov.w	ip, #0
 80162e8:	9b01      	ldr	r3, [sp, #4]
 80162ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80162ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80162f2:	9301      	str	r3, [sp, #4]
 80162f4:	fa1f f38a 	uxth.w	r3, sl
 80162f8:	4619      	mov	r1, r3
 80162fa:	b283      	uxth	r3, r0
 80162fc:	1acb      	subs	r3, r1, r3
 80162fe:	0c00      	lsrs	r0, r0, #16
 8016300:	4463      	add	r3, ip
 8016302:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016306:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801630a:	b29b      	uxth	r3, r3
 801630c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016310:	4576      	cmp	r6, lr
 8016312:	f849 3b04 	str.w	r3, [r9], #4
 8016316:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801631a:	d8e5      	bhi.n	80162e8 <__mdiff+0x88>
 801631c:	1b33      	subs	r3, r6, r4
 801631e:	3b15      	subs	r3, #21
 8016320:	f023 0303 	bic.w	r3, r3, #3
 8016324:	3415      	adds	r4, #21
 8016326:	3304      	adds	r3, #4
 8016328:	42a6      	cmp	r6, r4
 801632a:	bf38      	it	cc
 801632c:	2304      	movcc	r3, #4
 801632e:	441d      	add	r5, r3
 8016330:	445b      	add	r3, fp
 8016332:	461e      	mov	r6, r3
 8016334:	462c      	mov	r4, r5
 8016336:	4544      	cmp	r4, r8
 8016338:	d30e      	bcc.n	8016358 <__mdiff+0xf8>
 801633a:	f108 0103 	add.w	r1, r8, #3
 801633e:	1b49      	subs	r1, r1, r5
 8016340:	f021 0103 	bic.w	r1, r1, #3
 8016344:	3d03      	subs	r5, #3
 8016346:	45a8      	cmp	r8, r5
 8016348:	bf38      	it	cc
 801634a:	2100      	movcc	r1, #0
 801634c:	440b      	add	r3, r1
 801634e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016352:	b191      	cbz	r1, 801637a <__mdiff+0x11a>
 8016354:	6117      	str	r7, [r2, #16]
 8016356:	e79d      	b.n	8016294 <__mdiff+0x34>
 8016358:	f854 1b04 	ldr.w	r1, [r4], #4
 801635c:	46e6      	mov	lr, ip
 801635e:	0c08      	lsrs	r0, r1, #16
 8016360:	fa1c fc81 	uxtah	ip, ip, r1
 8016364:	4471      	add	r1, lr
 8016366:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801636a:	b289      	uxth	r1, r1
 801636c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016370:	f846 1b04 	str.w	r1, [r6], #4
 8016374:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016378:	e7dd      	b.n	8016336 <__mdiff+0xd6>
 801637a:	3f01      	subs	r7, #1
 801637c:	e7e7      	b.n	801634e <__mdiff+0xee>
 801637e:	bf00      	nop
 8016380:	0801afe9 	.word	0x0801afe9
 8016384:	0801affa 	.word	0x0801affa

08016388 <__ulp>:
 8016388:	b082      	sub	sp, #8
 801638a:	ed8d 0b00 	vstr	d0, [sp]
 801638e:	9a01      	ldr	r2, [sp, #4]
 8016390:	4b0f      	ldr	r3, [pc, #60]	@ (80163d0 <__ulp+0x48>)
 8016392:	4013      	ands	r3, r2
 8016394:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016398:	2b00      	cmp	r3, #0
 801639a:	dc08      	bgt.n	80163ae <__ulp+0x26>
 801639c:	425b      	negs	r3, r3
 801639e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80163a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80163a6:	da04      	bge.n	80163b2 <__ulp+0x2a>
 80163a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80163ac:	4113      	asrs	r3, r2
 80163ae:	2200      	movs	r2, #0
 80163b0:	e008      	b.n	80163c4 <__ulp+0x3c>
 80163b2:	f1a2 0314 	sub.w	r3, r2, #20
 80163b6:	2b1e      	cmp	r3, #30
 80163b8:	bfda      	itte	le
 80163ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80163be:	40da      	lsrle	r2, r3
 80163c0:	2201      	movgt	r2, #1
 80163c2:	2300      	movs	r3, #0
 80163c4:	4619      	mov	r1, r3
 80163c6:	4610      	mov	r0, r2
 80163c8:	ec41 0b10 	vmov	d0, r0, r1
 80163cc:	b002      	add	sp, #8
 80163ce:	4770      	bx	lr
 80163d0:	7ff00000 	.word	0x7ff00000

080163d4 <__b2d>:
 80163d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d8:	6906      	ldr	r6, [r0, #16]
 80163da:	f100 0814 	add.w	r8, r0, #20
 80163de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80163e2:	1f37      	subs	r7, r6, #4
 80163e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80163e8:	4610      	mov	r0, r2
 80163ea:	f7ff fd53 	bl	8015e94 <__hi0bits>
 80163ee:	f1c0 0320 	rsb	r3, r0, #32
 80163f2:	280a      	cmp	r0, #10
 80163f4:	600b      	str	r3, [r1, #0]
 80163f6:	491b      	ldr	r1, [pc, #108]	@ (8016464 <__b2d+0x90>)
 80163f8:	dc15      	bgt.n	8016426 <__b2d+0x52>
 80163fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80163fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8016402:	45b8      	cmp	r8, r7
 8016404:	ea43 0501 	orr.w	r5, r3, r1
 8016408:	bf34      	ite	cc
 801640a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801640e:	2300      	movcs	r3, #0
 8016410:	3015      	adds	r0, #21
 8016412:	fa02 f000 	lsl.w	r0, r2, r0
 8016416:	fa23 f30c 	lsr.w	r3, r3, ip
 801641a:	4303      	orrs	r3, r0
 801641c:	461c      	mov	r4, r3
 801641e:	ec45 4b10 	vmov	d0, r4, r5
 8016422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016426:	45b8      	cmp	r8, r7
 8016428:	bf3a      	itte	cc
 801642a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801642e:	f1a6 0708 	subcc.w	r7, r6, #8
 8016432:	2300      	movcs	r3, #0
 8016434:	380b      	subs	r0, #11
 8016436:	d012      	beq.n	801645e <__b2d+0x8a>
 8016438:	f1c0 0120 	rsb	r1, r0, #32
 801643c:	fa23 f401 	lsr.w	r4, r3, r1
 8016440:	4082      	lsls	r2, r0
 8016442:	4322      	orrs	r2, r4
 8016444:	4547      	cmp	r7, r8
 8016446:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801644a:	bf8c      	ite	hi
 801644c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016450:	2200      	movls	r2, #0
 8016452:	4083      	lsls	r3, r0
 8016454:	40ca      	lsrs	r2, r1
 8016456:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801645a:	4313      	orrs	r3, r2
 801645c:	e7de      	b.n	801641c <__b2d+0x48>
 801645e:	ea42 0501 	orr.w	r5, r2, r1
 8016462:	e7db      	b.n	801641c <__b2d+0x48>
 8016464:	3ff00000 	.word	0x3ff00000

08016468 <__d2b>:
 8016468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801646c:	460f      	mov	r7, r1
 801646e:	2101      	movs	r1, #1
 8016470:	ec59 8b10 	vmov	r8, r9, d0
 8016474:	4616      	mov	r6, r2
 8016476:	f7ff fc1b 	bl	8015cb0 <_Balloc>
 801647a:	4604      	mov	r4, r0
 801647c:	b930      	cbnz	r0, 801648c <__d2b+0x24>
 801647e:	4602      	mov	r2, r0
 8016480:	4b23      	ldr	r3, [pc, #140]	@ (8016510 <__d2b+0xa8>)
 8016482:	4824      	ldr	r0, [pc, #144]	@ (8016514 <__d2b+0xac>)
 8016484:	f240 310f 	movw	r1, #783	@ 0x30f
 8016488:	f001 f98a 	bl	80177a0 <__assert_func>
 801648c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016494:	b10d      	cbz	r5, 801649a <__d2b+0x32>
 8016496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801649a:	9301      	str	r3, [sp, #4]
 801649c:	f1b8 0300 	subs.w	r3, r8, #0
 80164a0:	d023      	beq.n	80164ea <__d2b+0x82>
 80164a2:	4668      	mov	r0, sp
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	f7ff fd14 	bl	8015ed2 <__lo0bits>
 80164aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80164ae:	b1d0      	cbz	r0, 80164e6 <__d2b+0x7e>
 80164b0:	f1c0 0320 	rsb	r3, r0, #32
 80164b4:	fa02 f303 	lsl.w	r3, r2, r3
 80164b8:	430b      	orrs	r3, r1
 80164ba:	40c2      	lsrs	r2, r0
 80164bc:	6163      	str	r3, [r4, #20]
 80164be:	9201      	str	r2, [sp, #4]
 80164c0:	9b01      	ldr	r3, [sp, #4]
 80164c2:	61a3      	str	r3, [r4, #24]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	bf0c      	ite	eq
 80164c8:	2201      	moveq	r2, #1
 80164ca:	2202      	movne	r2, #2
 80164cc:	6122      	str	r2, [r4, #16]
 80164ce:	b1a5      	cbz	r5, 80164fa <__d2b+0x92>
 80164d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80164d4:	4405      	add	r5, r0
 80164d6:	603d      	str	r5, [r7, #0]
 80164d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80164dc:	6030      	str	r0, [r6, #0]
 80164de:	4620      	mov	r0, r4
 80164e0:	b003      	add	sp, #12
 80164e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164e6:	6161      	str	r1, [r4, #20]
 80164e8:	e7ea      	b.n	80164c0 <__d2b+0x58>
 80164ea:	a801      	add	r0, sp, #4
 80164ec:	f7ff fcf1 	bl	8015ed2 <__lo0bits>
 80164f0:	9b01      	ldr	r3, [sp, #4]
 80164f2:	6163      	str	r3, [r4, #20]
 80164f4:	3020      	adds	r0, #32
 80164f6:	2201      	movs	r2, #1
 80164f8:	e7e8      	b.n	80164cc <__d2b+0x64>
 80164fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80164fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016502:	6038      	str	r0, [r7, #0]
 8016504:	6918      	ldr	r0, [r3, #16]
 8016506:	f7ff fcc5 	bl	8015e94 <__hi0bits>
 801650a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801650e:	e7e5      	b.n	80164dc <__d2b+0x74>
 8016510:	0801afe9 	.word	0x0801afe9
 8016514:	0801affa 	.word	0x0801affa

08016518 <__ratio>:
 8016518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651c:	b085      	sub	sp, #20
 801651e:	e9cd 1000 	strd	r1, r0, [sp]
 8016522:	a902      	add	r1, sp, #8
 8016524:	f7ff ff56 	bl	80163d4 <__b2d>
 8016528:	9800      	ldr	r0, [sp, #0]
 801652a:	a903      	add	r1, sp, #12
 801652c:	ec55 4b10 	vmov	r4, r5, d0
 8016530:	f7ff ff50 	bl	80163d4 <__b2d>
 8016534:	9b01      	ldr	r3, [sp, #4]
 8016536:	6919      	ldr	r1, [r3, #16]
 8016538:	9b00      	ldr	r3, [sp, #0]
 801653a:	691b      	ldr	r3, [r3, #16]
 801653c:	1ac9      	subs	r1, r1, r3
 801653e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016542:	1a9b      	subs	r3, r3, r2
 8016544:	ec5b ab10 	vmov	sl, fp, d0
 8016548:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801654c:	2b00      	cmp	r3, #0
 801654e:	bfce      	itee	gt
 8016550:	462a      	movgt	r2, r5
 8016552:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016556:	465a      	movle	r2, fp
 8016558:	462f      	mov	r7, r5
 801655a:	46d9      	mov	r9, fp
 801655c:	bfcc      	ite	gt
 801655e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016562:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016566:	464b      	mov	r3, r9
 8016568:	4652      	mov	r2, sl
 801656a:	4620      	mov	r0, r4
 801656c:	4639      	mov	r1, r7
 801656e:	f7ea f995 	bl	800089c <__aeabi_ddiv>
 8016572:	ec41 0b10 	vmov	d0, r0, r1
 8016576:	b005      	add	sp, #20
 8016578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801657c <__copybits>:
 801657c:	3901      	subs	r1, #1
 801657e:	b570      	push	{r4, r5, r6, lr}
 8016580:	1149      	asrs	r1, r1, #5
 8016582:	6914      	ldr	r4, [r2, #16]
 8016584:	3101      	adds	r1, #1
 8016586:	f102 0314 	add.w	r3, r2, #20
 801658a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801658e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016592:	1f05      	subs	r5, r0, #4
 8016594:	42a3      	cmp	r3, r4
 8016596:	d30c      	bcc.n	80165b2 <__copybits+0x36>
 8016598:	1aa3      	subs	r3, r4, r2
 801659a:	3b11      	subs	r3, #17
 801659c:	f023 0303 	bic.w	r3, r3, #3
 80165a0:	3211      	adds	r2, #17
 80165a2:	42a2      	cmp	r2, r4
 80165a4:	bf88      	it	hi
 80165a6:	2300      	movhi	r3, #0
 80165a8:	4418      	add	r0, r3
 80165aa:	2300      	movs	r3, #0
 80165ac:	4288      	cmp	r0, r1
 80165ae:	d305      	bcc.n	80165bc <__copybits+0x40>
 80165b0:	bd70      	pop	{r4, r5, r6, pc}
 80165b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80165b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80165ba:	e7eb      	b.n	8016594 <__copybits+0x18>
 80165bc:	f840 3b04 	str.w	r3, [r0], #4
 80165c0:	e7f4      	b.n	80165ac <__copybits+0x30>

080165c2 <__any_on>:
 80165c2:	f100 0214 	add.w	r2, r0, #20
 80165c6:	6900      	ldr	r0, [r0, #16]
 80165c8:	114b      	asrs	r3, r1, #5
 80165ca:	4298      	cmp	r0, r3
 80165cc:	b510      	push	{r4, lr}
 80165ce:	db11      	blt.n	80165f4 <__any_on+0x32>
 80165d0:	dd0a      	ble.n	80165e8 <__any_on+0x26>
 80165d2:	f011 011f 	ands.w	r1, r1, #31
 80165d6:	d007      	beq.n	80165e8 <__any_on+0x26>
 80165d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80165dc:	fa24 f001 	lsr.w	r0, r4, r1
 80165e0:	fa00 f101 	lsl.w	r1, r0, r1
 80165e4:	428c      	cmp	r4, r1
 80165e6:	d10b      	bne.n	8016600 <__any_on+0x3e>
 80165e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80165ec:	4293      	cmp	r3, r2
 80165ee:	d803      	bhi.n	80165f8 <__any_on+0x36>
 80165f0:	2000      	movs	r0, #0
 80165f2:	bd10      	pop	{r4, pc}
 80165f4:	4603      	mov	r3, r0
 80165f6:	e7f7      	b.n	80165e8 <__any_on+0x26>
 80165f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80165fc:	2900      	cmp	r1, #0
 80165fe:	d0f5      	beq.n	80165ec <__any_on+0x2a>
 8016600:	2001      	movs	r0, #1
 8016602:	e7f6      	b.n	80165f2 <__any_on+0x30>

08016604 <sulp>:
 8016604:	b570      	push	{r4, r5, r6, lr}
 8016606:	4604      	mov	r4, r0
 8016608:	460d      	mov	r5, r1
 801660a:	ec45 4b10 	vmov	d0, r4, r5
 801660e:	4616      	mov	r6, r2
 8016610:	f7ff feba 	bl	8016388 <__ulp>
 8016614:	ec51 0b10 	vmov	r0, r1, d0
 8016618:	b17e      	cbz	r6, 801663a <sulp+0x36>
 801661a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801661e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016622:	2b00      	cmp	r3, #0
 8016624:	dd09      	ble.n	801663a <sulp+0x36>
 8016626:	051b      	lsls	r3, r3, #20
 8016628:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801662c:	2400      	movs	r4, #0
 801662e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016632:	4622      	mov	r2, r4
 8016634:	462b      	mov	r3, r5
 8016636:	f7ea f807 	bl	8000648 <__aeabi_dmul>
 801663a:	ec41 0b10 	vmov	d0, r0, r1
 801663e:	bd70      	pop	{r4, r5, r6, pc}

08016640 <_strtod_l>:
 8016640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016644:	b09f      	sub	sp, #124	@ 0x7c
 8016646:	460c      	mov	r4, r1
 8016648:	9217      	str	r2, [sp, #92]	@ 0x5c
 801664a:	2200      	movs	r2, #0
 801664c:	921a      	str	r2, [sp, #104]	@ 0x68
 801664e:	9005      	str	r0, [sp, #20]
 8016650:	f04f 0a00 	mov.w	sl, #0
 8016654:	f04f 0b00 	mov.w	fp, #0
 8016658:	460a      	mov	r2, r1
 801665a:	9219      	str	r2, [sp, #100]	@ 0x64
 801665c:	7811      	ldrb	r1, [r2, #0]
 801665e:	292b      	cmp	r1, #43	@ 0x2b
 8016660:	d04a      	beq.n	80166f8 <_strtod_l+0xb8>
 8016662:	d838      	bhi.n	80166d6 <_strtod_l+0x96>
 8016664:	290d      	cmp	r1, #13
 8016666:	d832      	bhi.n	80166ce <_strtod_l+0x8e>
 8016668:	2908      	cmp	r1, #8
 801666a:	d832      	bhi.n	80166d2 <_strtod_l+0x92>
 801666c:	2900      	cmp	r1, #0
 801666e:	d03b      	beq.n	80166e8 <_strtod_l+0xa8>
 8016670:	2200      	movs	r2, #0
 8016672:	920e      	str	r2, [sp, #56]	@ 0x38
 8016674:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016676:	782a      	ldrb	r2, [r5, #0]
 8016678:	2a30      	cmp	r2, #48	@ 0x30
 801667a:	f040 80b2 	bne.w	80167e2 <_strtod_l+0x1a2>
 801667e:	786a      	ldrb	r2, [r5, #1]
 8016680:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016684:	2a58      	cmp	r2, #88	@ 0x58
 8016686:	d16e      	bne.n	8016766 <_strtod_l+0x126>
 8016688:	9302      	str	r3, [sp, #8]
 801668a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801668c:	9301      	str	r3, [sp, #4]
 801668e:	ab1a      	add	r3, sp, #104	@ 0x68
 8016690:	9300      	str	r3, [sp, #0]
 8016692:	4a8f      	ldr	r2, [pc, #572]	@ (80168d0 <_strtod_l+0x290>)
 8016694:	9805      	ldr	r0, [sp, #20]
 8016696:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016698:	a919      	add	r1, sp, #100	@ 0x64
 801669a:	f001 f91b 	bl	80178d4 <__gethex>
 801669e:	f010 060f 	ands.w	r6, r0, #15
 80166a2:	4604      	mov	r4, r0
 80166a4:	d005      	beq.n	80166b2 <_strtod_l+0x72>
 80166a6:	2e06      	cmp	r6, #6
 80166a8:	d128      	bne.n	80166fc <_strtod_l+0xbc>
 80166aa:	3501      	adds	r5, #1
 80166ac:	2300      	movs	r3, #0
 80166ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80166b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80166b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	f040 858e 	bne.w	80171d6 <_strtod_l+0xb96>
 80166ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166bc:	b1cb      	cbz	r3, 80166f2 <_strtod_l+0xb2>
 80166be:	4652      	mov	r2, sl
 80166c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80166c4:	ec43 2b10 	vmov	d0, r2, r3
 80166c8:	b01f      	add	sp, #124	@ 0x7c
 80166ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ce:	2920      	cmp	r1, #32
 80166d0:	d1ce      	bne.n	8016670 <_strtod_l+0x30>
 80166d2:	3201      	adds	r2, #1
 80166d4:	e7c1      	b.n	801665a <_strtod_l+0x1a>
 80166d6:	292d      	cmp	r1, #45	@ 0x2d
 80166d8:	d1ca      	bne.n	8016670 <_strtod_l+0x30>
 80166da:	2101      	movs	r1, #1
 80166dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80166de:	1c51      	adds	r1, r2, #1
 80166e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80166e2:	7852      	ldrb	r2, [r2, #1]
 80166e4:	2a00      	cmp	r2, #0
 80166e6:	d1c5      	bne.n	8016674 <_strtod_l+0x34>
 80166e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f040 8570 	bne.w	80171d2 <_strtod_l+0xb92>
 80166f2:	4652      	mov	r2, sl
 80166f4:	465b      	mov	r3, fp
 80166f6:	e7e5      	b.n	80166c4 <_strtod_l+0x84>
 80166f8:	2100      	movs	r1, #0
 80166fa:	e7ef      	b.n	80166dc <_strtod_l+0x9c>
 80166fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80166fe:	b13a      	cbz	r2, 8016710 <_strtod_l+0xd0>
 8016700:	2135      	movs	r1, #53	@ 0x35
 8016702:	a81c      	add	r0, sp, #112	@ 0x70
 8016704:	f7ff ff3a 	bl	801657c <__copybits>
 8016708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801670a:	9805      	ldr	r0, [sp, #20]
 801670c:	f7ff fb10 	bl	8015d30 <_Bfree>
 8016710:	3e01      	subs	r6, #1
 8016712:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016714:	2e04      	cmp	r6, #4
 8016716:	d806      	bhi.n	8016726 <_strtod_l+0xe6>
 8016718:	e8df f006 	tbb	[pc, r6]
 801671c:	201d0314 	.word	0x201d0314
 8016720:	14          	.byte	0x14
 8016721:	00          	.byte	0x00
 8016722:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016726:	05e1      	lsls	r1, r4, #23
 8016728:	bf48      	it	mi
 801672a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801672e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016732:	0d1b      	lsrs	r3, r3, #20
 8016734:	051b      	lsls	r3, r3, #20
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1bb      	bne.n	80166b2 <_strtod_l+0x72>
 801673a:	f7fe fb1f 	bl	8014d7c <__errno>
 801673e:	2322      	movs	r3, #34	@ 0x22
 8016740:	6003      	str	r3, [r0, #0]
 8016742:	e7b6      	b.n	80166b2 <_strtod_l+0x72>
 8016744:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016748:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801674c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016750:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016754:	e7e7      	b.n	8016726 <_strtod_l+0xe6>
 8016756:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80168d8 <_strtod_l+0x298>
 801675a:	e7e4      	b.n	8016726 <_strtod_l+0xe6>
 801675c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016760:	f04f 3aff 	mov.w	sl, #4294967295
 8016764:	e7df      	b.n	8016726 <_strtod_l+0xe6>
 8016766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016768:	1c5a      	adds	r2, r3, #1
 801676a:	9219      	str	r2, [sp, #100]	@ 0x64
 801676c:	785b      	ldrb	r3, [r3, #1]
 801676e:	2b30      	cmp	r3, #48	@ 0x30
 8016770:	d0f9      	beq.n	8016766 <_strtod_l+0x126>
 8016772:	2b00      	cmp	r3, #0
 8016774:	d09d      	beq.n	80166b2 <_strtod_l+0x72>
 8016776:	2301      	movs	r3, #1
 8016778:	2700      	movs	r7, #0
 801677a:	9308      	str	r3, [sp, #32]
 801677c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801677e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016780:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016782:	46b9      	mov	r9, r7
 8016784:	220a      	movs	r2, #10
 8016786:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016788:	7805      	ldrb	r5, [r0, #0]
 801678a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801678e:	b2d9      	uxtb	r1, r3
 8016790:	2909      	cmp	r1, #9
 8016792:	d928      	bls.n	80167e6 <_strtod_l+0x1a6>
 8016794:	494f      	ldr	r1, [pc, #316]	@ (80168d4 <_strtod_l+0x294>)
 8016796:	2201      	movs	r2, #1
 8016798:	f000 ffd6 	bl	8017748 <strncmp>
 801679c:	2800      	cmp	r0, #0
 801679e:	d032      	beq.n	8016806 <_strtod_l+0x1c6>
 80167a0:	2000      	movs	r0, #0
 80167a2:	462a      	mov	r2, r5
 80167a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80167a6:	464d      	mov	r5, r9
 80167a8:	4603      	mov	r3, r0
 80167aa:	2a65      	cmp	r2, #101	@ 0x65
 80167ac:	d001      	beq.n	80167b2 <_strtod_l+0x172>
 80167ae:	2a45      	cmp	r2, #69	@ 0x45
 80167b0:	d114      	bne.n	80167dc <_strtod_l+0x19c>
 80167b2:	b91d      	cbnz	r5, 80167bc <_strtod_l+0x17c>
 80167b4:	9a08      	ldr	r2, [sp, #32]
 80167b6:	4302      	orrs	r2, r0
 80167b8:	d096      	beq.n	80166e8 <_strtod_l+0xa8>
 80167ba:	2500      	movs	r5, #0
 80167bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80167be:	1c62      	adds	r2, r4, #1
 80167c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80167c2:	7862      	ldrb	r2, [r4, #1]
 80167c4:	2a2b      	cmp	r2, #43	@ 0x2b
 80167c6:	d07a      	beq.n	80168be <_strtod_l+0x27e>
 80167c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80167ca:	d07e      	beq.n	80168ca <_strtod_l+0x28a>
 80167cc:	f04f 0c00 	mov.w	ip, #0
 80167d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80167d4:	2909      	cmp	r1, #9
 80167d6:	f240 8085 	bls.w	80168e4 <_strtod_l+0x2a4>
 80167da:	9419      	str	r4, [sp, #100]	@ 0x64
 80167dc:	f04f 0800 	mov.w	r8, #0
 80167e0:	e0a5      	b.n	801692e <_strtod_l+0x2ee>
 80167e2:	2300      	movs	r3, #0
 80167e4:	e7c8      	b.n	8016778 <_strtod_l+0x138>
 80167e6:	f1b9 0f08 	cmp.w	r9, #8
 80167ea:	bfd8      	it	le
 80167ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80167ee:	f100 0001 	add.w	r0, r0, #1
 80167f2:	bfda      	itte	le
 80167f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80167f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80167fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80167fe:	f109 0901 	add.w	r9, r9, #1
 8016802:	9019      	str	r0, [sp, #100]	@ 0x64
 8016804:	e7bf      	b.n	8016786 <_strtod_l+0x146>
 8016806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016808:	1c5a      	adds	r2, r3, #1
 801680a:	9219      	str	r2, [sp, #100]	@ 0x64
 801680c:	785a      	ldrb	r2, [r3, #1]
 801680e:	f1b9 0f00 	cmp.w	r9, #0
 8016812:	d03b      	beq.n	801688c <_strtod_l+0x24c>
 8016814:	900a      	str	r0, [sp, #40]	@ 0x28
 8016816:	464d      	mov	r5, r9
 8016818:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801681c:	2b09      	cmp	r3, #9
 801681e:	d912      	bls.n	8016846 <_strtod_l+0x206>
 8016820:	2301      	movs	r3, #1
 8016822:	e7c2      	b.n	80167aa <_strtod_l+0x16a>
 8016824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016826:	1c5a      	adds	r2, r3, #1
 8016828:	9219      	str	r2, [sp, #100]	@ 0x64
 801682a:	785a      	ldrb	r2, [r3, #1]
 801682c:	3001      	adds	r0, #1
 801682e:	2a30      	cmp	r2, #48	@ 0x30
 8016830:	d0f8      	beq.n	8016824 <_strtod_l+0x1e4>
 8016832:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016836:	2b08      	cmp	r3, #8
 8016838:	f200 84d2 	bhi.w	80171e0 <_strtod_l+0xba0>
 801683c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801683e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016840:	2000      	movs	r0, #0
 8016842:	930c      	str	r3, [sp, #48]	@ 0x30
 8016844:	4605      	mov	r5, r0
 8016846:	3a30      	subs	r2, #48	@ 0x30
 8016848:	f100 0301 	add.w	r3, r0, #1
 801684c:	d018      	beq.n	8016880 <_strtod_l+0x240>
 801684e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016850:	4419      	add	r1, r3
 8016852:	910a      	str	r1, [sp, #40]	@ 0x28
 8016854:	462e      	mov	r6, r5
 8016856:	f04f 0e0a 	mov.w	lr, #10
 801685a:	1c71      	adds	r1, r6, #1
 801685c:	eba1 0c05 	sub.w	ip, r1, r5
 8016860:	4563      	cmp	r3, ip
 8016862:	dc15      	bgt.n	8016890 <_strtod_l+0x250>
 8016864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016868:	182b      	adds	r3, r5, r0
 801686a:	2b08      	cmp	r3, #8
 801686c:	f105 0501 	add.w	r5, r5, #1
 8016870:	4405      	add	r5, r0
 8016872:	dc1a      	bgt.n	80168aa <_strtod_l+0x26a>
 8016874:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016876:	230a      	movs	r3, #10
 8016878:	fb03 2301 	mla	r3, r3, r1, r2
 801687c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801687e:	2300      	movs	r3, #0
 8016880:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016882:	1c51      	adds	r1, r2, #1
 8016884:	9119      	str	r1, [sp, #100]	@ 0x64
 8016886:	7852      	ldrb	r2, [r2, #1]
 8016888:	4618      	mov	r0, r3
 801688a:	e7c5      	b.n	8016818 <_strtod_l+0x1d8>
 801688c:	4648      	mov	r0, r9
 801688e:	e7ce      	b.n	801682e <_strtod_l+0x1ee>
 8016890:	2e08      	cmp	r6, #8
 8016892:	dc05      	bgt.n	80168a0 <_strtod_l+0x260>
 8016894:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016896:	fb0e f606 	mul.w	r6, lr, r6
 801689a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801689c:	460e      	mov	r6, r1
 801689e:	e7dc      	b.n	801685a <_strtod_l+0x21a>
 80168a0:	2910      	cmp	r1, #16
 80168a2:	bfd8      	it	le
 80168a4:	fb0e f707 	mulle.w	r7, lr, r7
 80168a8:	e7f8      	b.n	801689c <_strtod_l+0x25c>
 80168aa:	2b0f      	cmp	r3, #15
 80168ac:	bfdc      	itt	le
 80168ae:	230a      	movle	r3, #10
 80168b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80168b4:	e7e3      	b.n	801687e <_strtod_l+0x23e>
 80168b6:	2300      	movs	r3, #0
 80168b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80168ba:	2301      	movs	r3, #1
 80168bc:	e77a      	b.n	80167b4 <_strtod_l+0x174>
 80168be:	f04f 0c00 	mov.w	ip, #0
 80168c2:	1ca2      	adds	r2, r4, #2
 80168c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80168c6:	78a2      	ldrb	r2, [r4, #2]
 80168c8:	e782      	b.n	80167d0 <_strtod_l+0x190>
 80168ca:	f04f 0c01 	mov.w	ip, #1
 80168ce:	e7f8      	b.n	80168c2 <_strtod_l+0x282>
 80168d0:	0801b21c 	.word	0x0801b21c
 80168d4:	0801b053 	.word	0x0801b053
 80168d8:	7ff00000 	.word	0x7ff00000
 80168dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168de:	1c51      	adds	r1, r2, #1
 80168e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80168e2:	7852      	ldrb	r2, [r2, #1]
 80168e4:	2a30      	cmp	r2, #48	@ 0x30
 80168e6:	d0f9      	beq.n	80168dc <_strtod_l+0x29c>
 80168e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80168ec:	2908      	cmp	r1, #8
 80168ee:	f63f af75 	bhi.w	80167dc <_strtod_l+0x19c>
 80168f2:	3a30      	subs	r2, #48	@ 0x30
 80168f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80168f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80168fa:	f04f 080a 	mov.w	r8, #10
 80168fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016900:	1c56      	adds	r6, r2, #1
 8016902:	9619      	str	r6, [sp, #100]	@ 0x64
 8016904:	7852      	ldrb	r2, [r2, #1]
 8016906:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801690a:	f1be 0f09 	cmp.w	lr, #9
 801690e:	d939      	bls.n	8016984 <_strtod_l+0x344>
 8016910:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016912:	1a76      	subs	r6, r6, r1
 8016914:	2e08      	cmp	r6, #8
 8016916:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801691a:	dc03      	bgt.n	8016924 <_strtod_l+0x2e4>
 801691c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801691e:	4588      	cmp	r8, r1
 8016920:	bfa8      	it	ge
 8016922:	4688      	movge	r8, r1
 8016924:	f1bc 0f00 	cmp.w	ip, #0
 8016928:	d001      	beq.n	801692e <_strtod_l+0x2ee>
 801692a:	f1c8 0800 	rsb	r8, r8, #0
 801692e:	2d00      	cmp	r5, #0
 8016930:	d14e      	bne.n	80169d0 <_strtod_l+0x390>
 8016932:	9908      	ldr	r1, [sp, #32]
 8016934:	4308      	orrs	r0, r1
 8016936:	f47f aebc 	bne.w	80166b2 <_strtod_l+0x72>
 801693a:	2b00      	cmp	r3, #0
 801693c:	f47f aed4 	bne.w	80166e8 <_strtod_l+0xa8>
 8016940:	2a69      	cmp	r2, #105	@ 0x69
 8016942:	d028      	beq.n	8016996 <_strtod_l+0x356>
 8016944:	dc25      	bgt.n	8016992 <_strtod_l+0x352>
 8016946:	2a49      	cmp	r2, #73	@ 0x49
 8016948:	d025      	beq.n	8016996 <_strtod_l+0x356>
 801694a:	2a4e      	cmp	r2, #78	@ 0x4e
 801694c:	f47f aecc 	bne.w	80166e8 <_strtod_l+0xa8>
 8016950:	499a      	ldr	r1, [pc, #616]	@ (8016bbc <_strtod_l+0x57c>)
 8016952:	a819      	add	r0, sp, #100	@ 0x64
 8016954:	f001 f9e0 	bl	8017d18 <__match>
 8016958:	2800      	cmp	r0, #0
 801695a:	f43f aec5 	beq.w	80166e8 <_strtod_l+0xa8>
 801695e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	2b28      	cmp	r3, #40	@ 0x28
 8016964:	d12e      	bne.n	80169c4 <_strtod_l+0x384>
 8016966:	4996      	ldr	r1, [pc, #600]	@ (8016bc0 <_strtod_l+0x580>)
 8016968:	aa1c      	add	r2, sp, #112	@ 0x70
 801696a:	a819      	add	r0, sp, #100	@ 0x64
 801696c:	f001 f9e8 	bl	8017d40 <__hexnan>
 8016970:	2805      	cmp	r0, #5
 8016972:	d127      	bne.n	80169c4 <_strtod_l+0x384>
 8016974:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016976:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801697a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801697e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016982:	e696      	b.n	80166b2 <_strtod_l+0x72>
 8016984:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016986:	fb08 2101 	mla	r1, r8, r1, r2
 801698a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801698e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016990:	e7b5      	b.n	80168fe <_strtod_l+0x2be>
 8016992:	2a6e      	cmp	r2, #110	@ 0x6e
 8016994:	e7da      	b.n	801694c <_strtod_l+0x30c>
 8016996:	498b      	ldr	r1, [pc, #556]	@ (8016bc4 <_strtod_l+0x584>)
 8016998:	a819      	add	r0, sp, #100	@ 0x64
 801699a:	f001 f9bd 	bl	8017d18 <__match>
 801699e:	2800      	cmp	r0, #0
 80169a0:	f43f aea2 	beq.w	80166e8 <_strtod_l+0xa8>
 80169a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169a6:	4988      	ldr	r1, [pc, #544]	@ (8016bc8 <_strtod_l+0x588>)
 80169a8:	3b01      	subs	r3, #1
 80169aa:	a819      	add	r0, sp, #100	@ 0x64
 80169ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80169ae:	f001 f9b3 	bl	8017d18 <__match>
 80169b2:	b910      	cbnz	r0, 80169ba <_strtod_l+0x37a>
 80169b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169b6:	3301      	adds	r3, #1
 80169b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80169ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016bd8 <_strtod_l+0x598>
 80169be:	f04f 0a00 	mov.w	sl, #0
 80169c2:	e676      	b.n	80166b2 <_strtod_l+0x72>
 80169c4:	4881      	ldr	r0, [pc, #516]	@ (8016bcc <_strtod_l+0x58c>)
 80169c6:	f000 fee3 	bl	8017790 <nan>
 80169ca:	ec5b ab10 	vmov	sl, fp, d0
 80169ce:	e670      	b.n	80166b2 <_strtod_l+0x72>
 80169d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80169d4:	eba8 0303 	sub.w	r3, r8, r3
 80169d8:	f1b9 0f00 	cmp.w	r9, #0
 80169dc:	bf08      	it	eq
 80169de:	46a9      	moveq	r9, r5
 80169e0:	2d10      	cmp	r5, #16
 80169e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80169e4:	462c      	mov	r4, r5
 80169e6:	bfa8      	it	ge
 80169e8:	2410      	movge	r4, #16
 80169ea:	f7e9 fdb3 	bl	8000554 <__aeabi_ui2d>
 80169ee:	2d09      	cmp	r5, #9
 80169f0:	4682      	mov	sl, r0
 80169f2:	468b      	mov	fp, r1
 80169f4:	dc13      	bgt.n	8016a1e <_strtod_l+0x3de>
 80169f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	f43f ae5a 	beq.w	80166b2 <_strtod_l+0x72>
 80169fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a00:	dd78      	ble.n	8016af4 <_strtod_l+0x4b4>
 8016a02:	2b16      	cmp	r3, #22
 8016a04:	dc5f      	bgt.n	8016ac6 <_strtod_l+0x486>
 8016a06:	4972      	ldr	r1, [pc, #456]	@ (8016bd0 <_strtod_l+0x590>)
 8016a08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a10:	4652      	mov	r2, sl
 8016a12:	465b      	mov	r3, fp
 8016a14:	f7e9 fe18 	bl	8000648 <__aeabi_dmul>
 8016a18:	4682      	mov	sl, r0
 8016a1a:	468b      	mov	fp, r1
 8016a1c:	e649      	b.n	80166b2 <_strtod_l+0x72>
 8016a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8016bd0 <_strtod_l+0x590>)
 8016a20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016a28:	f7e9 fe0e 	bl	8000648 <__aeabi_dmul>
 8016a2c:	4682      	mov	sl, r0
 8016a2e:	4638      	mov	r0, r7
 8016a30:	468b      	mov	fp, r1
 8016a32:	f7e9 fd8f 	bl	8000554 <__aeabi_ui2d>
 8016a36:	4602      	mov	r2, r0
 8016a38:	460b      	mov	r3, r1
 8016a3a:	4650      	mov	r0, sl
 8016a3c:	4659      	mov	r1, fp
 8016a3e:	f7e9 fc4d 	bl	80002dc <__adddf3>
 8016a42:	2d0f      	cmp	r5, #15
 8016a44:	4682      	mov	sl, r0
 8016a46:	468b      	mov	fp, r1
 8016a48:	ddd5      	ble.n	80169f6 <_strtod_l+0x3b6>
 8016a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a4c:	1b2c      	subs	r4, r5, r4
 8016a4e:	441c      	add	r4, r3
 8016a50:	2c00      	cmp	r4, #0
 8016a52:	f340 8093 	ble.w	8016b7c <_strtod_l+0x53c>
 8016a56:	f014 030f 	ands.w	r3, r4, #15
 8016a5a:	d00a      	beq.n	8016a72 <_strtod_l+0x432>
 8016a5c:	495c      	ldr	r1, [pc, #368]	@ (8016bd0 <_strtod_l+0x590>)
 8016a5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a62:	4652      	mov	r2, sl
 8016a64:	465b      	mov	r3, fp
 8016a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a6a:	f7e9 fded 	bl	8000648 <__aeabi_dmul>
 8016a6e:	4682      	mov	sl, r0
 8016a70:	468b      	mov	fp, r1
 8016a72:	f034 040f 	bics.w	r4, r4, #15
 8016a76:	d073      	beq.n	8016b60 <_strtod_l+0x520>
 8016a78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016a7c:	dd49      	ble.n	8016b12 <_strtod_l+0x4d2>
 8016a7e:	2400      	movs	r4, #0
 8016a80:	46a0      	mov	r8, r4
 8016a82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016a84:	46a1      	mov	r9, r4
 8016a86:	9a05      	ldr	r2, [sp, #20]
 8016a88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016bd8 <_strtod_l+0x598>
 8016a8c:	2322      	movs	r3, #34	@ 0x22
 8016a8e:	6013      	str	r3, [r2, #0]
 8016a90:	f04f 0a00 	mov.w	sl, #0
 8016a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	f43f ae0b 	beq.w	80166b2 <_strtod_l+0x72>
 8016a9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a9e:	9805      	ldr	r0, [sp, #20]
 8016aa0:	f7ff f946 	bl	8015d30 <_Bfree>
 8016aa4:	9805      	ldr	r0, [sp, #20]
 8016aa6:	4649      	mov	r1, r9
 8016aa8:	f7ff f942 	bl	8015d30 <_Bfree>
 8016aac:	9805      	ldr	r0, [sp, #20]
 8016aae:	4641      	mov	r1, r8
 8016ab0:	f7ff f93e 	bl	8015d30 <_Bfree>
 8016ab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016ab6:	9805      	ldr	r0, [sp, #20]
 8016ab8:	f7ff f93a 	bl	8015d30 <_Bfree>
 8016abc:	9805      	ldr	r0, [sp, #20]
 8016abe:	4621      	mov	r1, r4
 8016ac0:	f7ff f936 	bl	8015d30 <_Bfree>
 8016ac4:	e5f5      	b.n	80166b2 <_strtod_l+0x72>
 8016ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ac8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016acc:	4293      	cmp	r3, r2
 8016ace:	dbbc      	blt.n	8016a4a <_strtod_l+0x40a>
 8016ad0:	4c3f      	ldr	r4, [pc, #252]	@ (8016bd0 <_strtod_l+0x590>)
 8016ad2:	f1c5 050f 	rsb	r5, r5, #15
 8016ad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016ada:	4652      	mov	r2, sl
 8016adc:	465b      	mov	r3, fp
 8016ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ae2:	f7e9 fdb1 	bl	8000648 <__aeabi_dmul>
 8016ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ae8:	1b5d      	subs	r5, r3, r5
 8016aea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016aee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016af2:	e78f      	b.n	8016a14 <_strtod_l+0x3d4>
 8016af4:	3316      	adds	r3, #22
 8016af6:	dba8      	blt.n	8016a4a <_strtod_l+0x40a>
 8016af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016afa:	eba3 0808 	sub.w	r8, r3, r8
 8016afe:	4b34      	ldr	r3, [pc, #208]	@ (8016bd0 <_strtod_l+0x590>)
 8016b00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016b04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016b08:	4650      	mov	r0, sl
 8016b0a:	4659      	mov	r1, fp
 8016b0c:	f7e9 fec6 	bl	800089c <__aeabi_ddiv>
 8016b10:	e782      	b.n	8016a18 <_strtod_l+0x3d8>
 8016b12:	2300      	movs	r3, #0
 8016b14:	4f2f      	ldr	r7, [pc, #188]	@ (8016bd4 <_strtod_l+0x594>)
 8016b16:	1124      	asrs	r4, r4, #4
 8016b18:	4650      	mov	r0, sl
 8016b1a:	4659      	mov	r1, fp
 8016b1c:	461e      	mov	r6, r3
 8016b1e:	2c01      	cmp	r4, #1
 8016b20:	dc21      	bgt.n	8016b66 <_strtod_l+0x526>
 8016b22:	b10b      	cbz	r3, 8016b28 <_strtod_l+0x4e8>
 8016b24:	4682      	mov	sl, r0
 8016b26:	468b      	mov	fp, r1
 8016b28:	492a      	ldr	r1, [pc, #168]	@ (8016bd4 <_strtod_l+0x594>)
 8016b2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016b2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016b32:	4652      	mov	r2, sl
 8016b34:	465b      	mov	r3, fp
 8016b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b3a:	f7e9 fd85 	bl	8000648 <__aeabi_dmul>
 8016b3e:	4b26      	ldr	r3, [pc, #152]	@ (8016bd8 <_strtod_l+0x598>)
 8016b40:	460a      	mov	r2, r1
 8016b42:	400b      	ands	r3, r1
 8016b44:	4925      	ldr	r1, [pc, #148]	@ (8016bdc <_strtod_l+0x59c>)
 8016b46:	428b      	cmp	r3, r1
 8016b48:	4682      	mov	sl, r0
 8016b4a:	d898      	bhi.n	8016a7e <_strtod_l+0x43e>
 8016b4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016b50:	428b      	cmp	r3, r1
 8016b52:	bf86      	itte	hi
 8016b54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016be0 <_strtod_l+0x5a0>
 8016b58:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016b60:	2300      	movs	r3, #0
 8016b62:	9308      	str	r3, [sp, #32]
 8016b64:	e076      	b.n	8016c54 <_strtod_l+0x614>
 8016b66:	07e2      	lsls	r2, r4, #31
 8016b68:	d504      	bpl.n	8016b74 <_strtod_l+0x534>
 8016b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b6e:	f7e9 fd6b 	bl	8000648 <__aeabi_dmul>
 8016b72:	2301      	movs	r3, #1
 8016b74:	3601      	adds	r6, #1
 8016b76:	1064      	asrs	r4, r4, #1
 8016b78:	3708      	adds	r7, #8
 8016b7a:	e7d0      	b.n	8016b1e <_strtod_l+0x4de>
 8016b7c:	d0f0      	beq.n	8016b60 <_strtod_l+0x520>
 8016b7e:	4264      	negs	r4, r4
 8016b80:	f014 020f 	ands.w	r2, r4, #15
 8016b84:	d00a      	beq.n	8016b9c <_strtod_l+0x55c>
 8016b86:	4b12      	ldr	r3, [pc, #72]	@ (8016bd0 <_strtod_l+0x590>)
 8016b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b8c:	4650      	mov	r0, sl
 8016b8e:	4659      	mov	r1, fp
 8016b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b94:	f7e9 fe82 	bl	800089c <__aeabi_ddiv>
 8016b98:	4682      	mov	sl, r0
 8016b9a:	468b      	mov	fp, r1
 8016b9c:	1124      	asrs	r4, r4, #4
 8016b9e:	d0df      	beq.n	8016b60 <_strtod_l+0x520>
 8016ba0:	2c1f      	cmp	r4, #31
 8016ba2:	dd1f      	ble.n	8016be4 <_strtod_l+0x5a4>
 8016ba4:	2400      	movs	r4, #0
 8016ba6:	46a0      	mov	r8, r4
 8016ba8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016baa:	46a1      	mov	r9, r4
 8016bac:	9a05      	ldr	r2, [sp, #20]
 8016bae:	2322      	movs	r3, #34	@ 0x22
 8016bb0:	f04f 0a00 	mov.w	sl, #0
 8016bb4:	f04f 0b00 	mov.w	fp, #0
 8016bb8:	6013      	str	r3, [r2, #0]
 8016bba:	e76b      	b.n	8016a94 <_strtod_l+0x454>
 8016bbc:	0801af41 	.word	0x0801af41
 8016bc0:	0801b208 	.word	0x0801b208
 8016bc4:	0801af39 	.word	0x0801af39
 8016bc8:	0801af70 	.word	0x0801af70
 8016bcc:	0801b0a9 	.word	0x0801b0a9
 8016bd0:	0801b140 	.word	0x0801b140
 8016bd4:	0801b118 	.word	0x0801b118
 8016bd8:	7ff00000 	.word	0x7ff00000
 8016bdc:	7ca00000 	.word	0x7ca00000
 8016be0:	7fefffff 	.word	0x7fefffff
 8016be4:	f014 0310 	ands.w	r3, r4, #16
 8016be8:	bf18      	it	ne
 8016bea:	236a      	movne	r3, #106	@ 0x6a
 8016bec:	4ea9      	ldr	r6, [pc, #676]	@ (8016e94 <_strtod_l+0x854>)
 8016bee:	9308      	str	r3, [sp, #32]
 8016bf0:	4650      	mov	r0, sl
 8016bf2:	4659      	mov	r1, fp
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	07e7      	lsls	r7, r4, #31
 8016bf8:	d504      	bpl.n	8016c04 <_strtod_l+0x5c4>
 8016bfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016bfe:	f7e9 fd23 	bl	8000648 <__aeabi_dmul>
 8016c02:	2301      	movs	r3, #1
 8016c04:	1064      	asrs	r4, r4, #1
 8016c06:	f106 0608 	add.w	r6, r6, #8
 8016c0a:	d1f4      	bne.n	8016bf6 <_strtod_l+0x5b6>
 8016c0c:	b10b      	cbz	r3, 8016c12 <_strtod_l+0x5d2>
 8016c0e:	4682      	mov	sl, r0
 8016c10:	468b      	mov	fp, r1
 8016c12:	9b08      	ldr	r3, [sp, #32]
 8016c14:	b1b3      	cbz	r3, 8016c44 <_strtod_l+0x604>
 8016c16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016c1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	4659      	mov	r1, fp
 8016c22:	dd0f      	ble.n	8016c44 <_strtod_l+0x604>
 8016c24:	2b1f      	cmp	r3, #31
 8016c26:	dd56      	ble.n	8016cd6 <_strtod_l+0x696>
 8016c28:	2b34      	cmp	r3, #52	@ 0x34
 8016c2a:	bfde      	ittt	le
 8016c2c:	f04f 33ff 	movle.w	r3, #4294967295
 8016c30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016c34:	4093      	lslle	r3, r2
 8016c36:	f04f 0a00 	mov.w	sl, #0
 8016c3a:	bfcc      	ite	gt
 8016c3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016c40:	ea03 0b01 	andle.w	fp, r3, r1
 8016c44:	2200      	movs	r2, #0
 8016c46:	2300      	movs	r3, #0
 8016c48:	4650      	mov	r0, sl
 8016c4a:	4659      	mov	r1, fp
 8016c4c:	f7e9 ff64 	bl	8000b18 <__aeabi_dcmpeq>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d1a7      	bne.n	8016ba4 <_strtod_l+0x564>
 8016c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c56:	9300      	str	r3, [sp, #0]
 8016c58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c5a:	9805      	ldr	r0, [sp, #20]
 8016c5c:	462b      	mov	r3, r5
 8016c5e:	464a      	mov	r2, r9
 8016c60:	f7ff f8ce 	bl	8015e00 <__s2b>
 8016c64:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016c66:	2800      	cmp	r0, #0
 8016c68:	f43f af09 	beq.w	8016a7e <_strtod_l+0x43e>
 8016c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c70:	2a00      	cmp	r2, #0
 8016c72:	eba3 0308 	sub.w	r3, r3, r8
 8016c76:	bfa8      	it	ge
 8016c78:	2300      	movge	r3, #0
 8016c7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8016c7c:	2400      	movs	r4, #0
 8016c7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c82:	9316      	str	r3, [sp, #88]	@ 0x58
 8016c84:	46a0      	mov	r8, r4
 8016c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c88:	9805      	ldr	r0, [sp, #20]
 8016c8a:	6859      	ldr	r1, [r3, #4]
 8016c8c:	f7ff f810 	bl	8015cb0 <_Balloc>
 8016c90:	4681      	mov	r9, r0
 8016c92:	2800      	cmp	r0, #0
 8016c94:	f43f aef7 	beq.w	8016a86 <_strtod_l+0x446>
 8016c98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c9a:	691a      	ldr	r2, [r3, #16]
 8016c9c:	3202      	adds	r2, #2
 8016c9e:	f103 010c 	add.w	r1, r3, #12
 8016ca2:	0092      	lsls	r2, r2, #2
 8016ca4:	300c      	adds	r0, #12
 8016ca6:	f7fe f896 	bl	8014dd6 <memcpy>
 8016caa:	ec4b ab10 	vmov	d0, sl, fp
 8016cae:	9805      	ldr	r0, [sp, #20]
 8016cb0:	aa1c      	add	r2, sp, #112	@ 0x70
 8016cb2:	a91b      	add	r1, sp, #108	@ 0x6c
 8016cb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016cb8:	f7ff fbd6 	bl	8016468 <__d2b>
 8016cbc:	901a      	str	r0, [sp, #104]	@ 0x68
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	f43f aee1 	beq.w	8016a86 <_strtod_l+0x446>
 8016cc4:	9805      	ldr	r0, [sp, #20]
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	f7ff f930 	bl	8015f2c <__i2b>
 8016ccc:	4680      	mov	r8, r0
 8016cce:	b948      	cbnz	r0, 8016ce4 <_strtod_l+0x6a4>
 8016cd0:	f04f 0800 	mov.w	r8, #0
 8016cd4:	e6d7      	b.n	8016a86 <_strtod_l+0x446>
 8016cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016cda:	fa02 f303 	lsl.w	r3, r2, r3
 8016cde:	ea03 0a0a 	and.w	sl, r3, sl
 8016ce2:	e7af      	b.n	8016c44 <_strtod_l+0x604>
 8016ce4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016ce6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016ce8:	2d00      	cmp	r5, #0
 8016cea:	bfab      	itete	ge
 8016cec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016cee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016cf0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016cf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016cf4:	bfac      	ite	ge
 8016cf6:	18ef      	addge	r7, r5, r3
 8016cf8:	1b5e      	sublt	r6, r3, r5
 8016cfa:	9b08      	ldr	r3, [sp, #32]
 8016cfc:	1aed      	subs	r5, r5, r3
 8016cfe:	4415      	add	r5, r2
 8016d00:	4b65      	ldr	r3, [pc, #404]	@ (8016e98 <_strtod_l+0x858>)
 8016d02:	3d01      	subs	r5, #1
 8016d04:	429d      	cmp	r5, r3
 8016d06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016d0a:	da50      	bge.n	8016dae <_strtod_l+0x76e>
 8016d0c:	1b5b      	subs	r3, r3, r5
 8016d0e:	2b1f      	cmp	r3, #31
 8016d10:	eba2 0203 	sub.w	r2, r2, r3
 8016d14:	f04f 0101 	mov.w	r1, #1
 8016d18:	dc3d      	bgt.n	8016d96 <_strtod_l+0x756>
 8016d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8016d1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016d20:	2300      	movs	r3, #0
 8016d22:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d24:	18bd      	adds	r5, r7, r2
 8016d26:	9b08      	ldr	r3, [sp, #32]
 8016d28:	42af      	cmp	r7, r5
 8016d2a:	4416      	add	r6, r2
 8016d2c:	441e      	add	r6, r3
 8016d2e:	463b      	mov	r3, r7
 8016d30:	bfa8      	it	ge
 8016d32:	462b      	movge	r3, r5
 8016d34:	42b3      	cmp	r3, r6
 8016d36:	bfa8      	it	ge
 8016d38:	4633      	movge	r3, r6
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	bfc2      	ittt	gt
 8016d3e:	1aed      	subgt	r5, r5, r3
 8016d40:	1af6      	subgt	r6, r6, r3
 8016d42:	1aff      	subgt	r7, r7, r3
 8016d44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	dd16      	ble.n	8016d78 <_strtod_l+0x738>
 8016d4a:	4641      	mov	r1, r8
 8016d4c:	9805      	ldr	r0, [sp, #20]
 8016d4e:	461a      	mov	r2, r3
 8016d50:	f7ff f9a4 	bl	801609c <__pow5mult>
 8016d54:	4680      	mov	r8, r0
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d0ba      	beq.n	8016cd0 <_strtod_l+0x690>
 8016d5a:	4601      	mov	r1, r0
 8016d5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016d5e:	9805      	ldr	r0, [sp, #20]
 8016d60:	f7ff f8fa 	bl	8015f58 <__multiply>
 8016d64:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d66:	2800      	cmp	r0, #0
 8016d68:	f43f ae8d 	beq.w	8016a86 <_strtod_l+0x446>
 8016d6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d6e:	9805      	ldr	r0, [sp, #20]
 8016d70:	f7fe ffde 	bl	8015d30 <_Bfree>
 8016d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d76:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d78:	2d00      	cmp	r5, #0
 8016d7a:	dc1d      	bgt.n	8016db8 <_strtod_l+0x778>
 8016d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	dd23      	ble.n	8016dca <_strtod_l+0x78a>
 8016d82:	4649      	mov	r1, r9
 8016d84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016d86:	9805      	ldr	r0, [sp, #20]
 8016d88:	f7ff f988 	bl	801609c <__pow5mult>
 8016d8c:	4681      	mov	r9, r0
 8016d8e:	b9e0      	cbnz	r0, 8016dca <_strtod_l+0x78a>
 8016d90:	f04f 0900 	mov.w	r9, #0
 8016d94:	e677      	b.n	8016a86 <_strtod_l+0x446>
 8016d96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016d9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016d9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016da2:	35e2      	adds	r5, #226	@ 0xe2
 8016da4:	fa01 f305 	lsl.w	r3, r1, r5
 8016da8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016daa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016dac:	e7ba      	b.n	8016d24 <_strtod_l+0x6e4>
 8016dae:	2300      	movs	r3, #0
 8016db0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016db2:	2301      	movs	r3, #1
 8016db4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016db6:	e7b5      	b.n	8016d24 <_strtod_l+0x6e4>
 8016db8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016dba:	9805      	ldr	r0, [sp, #20]
 8016dbc:	462a      	mov	r2, r5
 8016dbe:	f7ff f9c7 	bl	8016150 <__lshift>
 8016dc2:	901a      	str	r0, [sp, #104]	@ 0x68
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d1d9      	bne.n	8016d7c <_strtod_l+0x73c>
 8016dc8:	e65d      	b.n	8016a86 <_strtod_l+0x446>
 8016dca:	2e00      	cmp	r6, #0
 8016dcc:	dd07      	ble.n	8016dde <_strtod_l+0x79e>
 8016dce:	4649      	mov	r1, r9
 8016dd0:	9805      	ldr	r0, [sp, #20]
 8016dd2:	4632      	mov	r2, r6
 8016dd4:	f7ff f9bc 	bl	8016150 <__lshift>
 8016dd8:	4681      	mov	r9, r0
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	d0d8      	beq.n	8016d90 <_strtod_l+0x750>
 8016dde:	2f00      	cmp	r7, #0
 8016de0:	dd08      	ble.n	8016df4 <_strtod_l+0x7b4>
 8016de2:	4641      	mov	r1, r8
 8016de4:	9805      	ldr	r0, [sp, #20]
 8016de6:	463a      	mov	r2, r7
 8016de8:	f7ff f9b2 	bl	8016150 <__lshift>
 8016dec:	4680      	mov	r8, r0
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f43f ae49 	beq.w	8016a86 <_strtod_l+0x446>
 8016df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016df6:	9805      	ldr	r0, [sp, #20]
 8016df8:	464a      	mov	r2, r9
 8016dfa:	f7ff fa31 	bl	8016260 <__mdiff>
 8016dfe:	4604      	mov	r4, r0
 8016e00:	2800      	cmp	r0, #0
 8016e02:	f43f ae40 	beq.w	8016a86 <_strtod_l+0x446>
 8016e06:	68c3      	ldr	r3, [r0, #12]
 8016e08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	60c3      	str	r3, [r0, #12]
 8016e0e:	4641      	mov	r1, r8
 8016e10:	f7ff fa0a 	bl	8016228 <__mcmp>
 8016e14:	2800      	cmp	r0, #0
 8016e16:	da45      	bge.n	8016ea4 <_strtod_l+0x864>
 8016e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e1a:	ea53 030a 	orrs.w	r3, r3, sl
 8016e1e:	d16b      	bne.n	8016ef8 <_strtod_l+0x8b8>
 8016e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d167      	bne.n	8016ef8 <_strtod_l+0x8b8>
 8016e28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e2c:	0d1b      	lsrs	r3, r3, #20
 8016e2e:	051b      	lsls	r3, r3, #20
 8016e30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016e34:	d960      	bls.n	8016ef8 <_strtod_l+0x8b8>
 8016e36:	6963      	ldr	r3, [r4, #20]
 8016e38:	b913      	cbnz	r3, 8016e40 <_strtod_l+0x800>
 8016e3a:	6923      	ldr	r3, [r4, #16]
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	dd5b      	ble.n	8016ef8 <_strtod_l+0x8b8>
 8016e40:	4621      	mov	r1, r4
 8016e42:	2201      	movs	r2, #1
 8016e44:	9805      	ldr	r0, [sp, #20]
 8016e46:	f7ff f983 	bl	8016150 <__lshift>
 8016e4a:	4641      	mov	r1, r8
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	f7ff f9eb 	bl	8016228 <__mcmp>
 8016e52:	2800      	cmp	r0, #0
 8016e54:	dd50      	ble.n	8016ef8 <_strtod_l+0x8b8>
 8016e56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e5a:	9a08      	ldr	r2, [sp, #32]
 8016e5c:	0d1b      	lsrs	r3, r3, #20
 8016e5e:	051b      	lsls	r3, r3, #20
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	d06a      	beq.n	8016f3a <_strtod_l+0x8fa>
 8016e64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016e68:	d867      	bhi.n	8016f3a <_strtod_l+0x8fa>
 8016e6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016e6e:	f67f ae9d 	bls.w	8016bac <_strtod_l+0x56c>
 8016e72:	4b0a      	ldr	r3, [pc, #40]	@ (8016e9c <_strtod_l+0x85c>)
 8016e74:	4650      	mov	r0, sl
 8016e76:	4659      	mov	r1, fp
 8016e78:	2200      	movs	r2, #0
 8016e7a:	f7e9 fbe5 	bl	8000648 <__aeabi_dmul>
 8016e7e:	4b08      	ldr	r3, [pc, #32]	@ (8016ea0 <_strtod_l+0x860>)
 8016e80:	400b      	ands	r3, r1
 8016e82:	4682      	mov	sl, r0
 8016e84:	468b      	mov	fp, r1
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	f47f ae08 	bne.w	8016a9c <_strtod_l+0x45c>
 8016e8c:	9a05      	ldr	r2, [sp, #20]
 8016e8e:	2322      	movs	r3, #34	@ 0x22
 8016e90:	6013      	str	r3, [r2, #0]
 8016e92:	e603      	b.n	8016a9c <_strtod_l+0x45c>
 8016e94:	0801b230 	.word	0x0801b230
 8016e98:	fffffc02 	.word	0xfffffc02
 8016e9c:	39500000 	.word	0x39500000
 8016ea0:	7ff00000 	.word	0x7ff00000
 8016ea4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016ea8:	d165      	bne.n	8016f76 <_strtod_l+0x936>
 8016eaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016eac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016eb0:	b35a      	cbz	r2, 8016f0a <_strtod_l+0x8ca>
 8016eb2:	4a9f      	ldr	r2, [pc, #636]	@ (8017130 <_strtod_l+0xaf0>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d12b      	bne.n	8016f10 <_strtod_l+0x8d0>
 8016eb8:	9b08      	ldr	r3, [sp, #32]
 8016eba:	4651      	mov	r1, sl
 8016ebc:	b303      	cbz	r3, 8016f00 <_strtod_l+0x8c0>
 8016ebe:	4b9d      	ldr	r3, [pc, #628]	@ (8017134 <_strtod_l+0xaf4>)
 8016ec0:	465a      	mov	r2, fp
 8016ec2:	4013      	ands	r3, r2
 8016ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8016ecc:	d81b      	bhi.n	8016f06 <_strtod_l+0x8c6>
 8016ece:	0d1b      	lsrs	r3, r3, #20
 8016ed0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ed8:	4299      	cmp	r1, r3
 8016eda:	d119      	bne.n	8016f10 <_strtod_l+0x8d0>
 8016edc:	4b96      	ldr	r3, [pc, #600]	@ (8017138 <_strtod_l+0xaf8>)
 8016ede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d102      	bne.n	8016eea <_strtod_l+0x8aa>
 8016ee4:	3101      	adds	r1, #1
 8016ee6:	f43f adce 	beq.w	8016a86 <_strtod_l+0x446>
 8016eea:	4b92      	ldr	r3, [pc, #584]	@ (8017134 <_strtod_l+0xaf4>)
 8016eec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016eee:	401a      	ands	r2, r3
 8016ef0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016ef4:	f04f 0a00 	mov.w	sl, #0
 8016ef8:	9b08      	ldr	r3, [sp, #32]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d1b9      	bne.n	8016e72 <_strtod_l+0x832>
 8016efe:	e5cd      	b.n	8016a9c <_strtod_l+0x45c>
 8016f00:	f04f 33ff 	mov.w	r3, #4294967295
 8016f04:	e7e8      	b.n	8016ed8 <_strtod_l+0x898>
 8016f06:	4613      	mov	r3, r2
 8016f08:	e7e6      	b.n	8016ed8 <_strtod_l+0x898>
 8016f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8016f0e:	d0a2      	beq.n	8016e56 <_strtod_l+0x816>
 8016f10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f12:	b1db      	cbz	r3, 8016f4c <_strtod_l+0x90c>
 8016f14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f16:	4213      	tst	r3, r2
 8016f18:	d0ee      	beq.n	8016ef8 <_strtod_l+0x8b8>
 8016f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f1c:	9a08      	ldr	r2, [sp, #32]
 8016f1e:	4650      	mov	r0, sl
 8016f20:	4659      	mov	r1, fp
 8016f22:	b1bb      	cbz	r3, 8016f54 <_strtod_l+0x914>
 8016f24:	f7ff fb6e 	bl	8016604 <sulp>
 8016f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f2c:	ec53 2b10 	vmov	r2, r3, d0
 8016f30:	f7e9 f9d4 	bl	80002dc <__adddf3>
 8016f34:	4682      	mov	sl, r0
 8016f36:	468b      	mov	fp, r1
 8016f38:	e7de      	b.n	8016ef8 <_strtod_l+0x8b8>
 8016f3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016f3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f46:	f04f 3aff 	mov.w	sl, #4294967295
 8016f4a:	e7d5      	b.n	8016ef8 <_strtod_l+0x8b8>
 8016f4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016f4e:	ea13 0f0a 	tst.w	r3, sl
 8016f52:	e7e1      	b.n	8016f18 <_strtod_l+0x8d8>
 8016f54:	f7ff fb56 	bl	8016604 <sulp>
 8016f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f5c:	ec53 2b10 	vmov	r2, r3, d0
 8016f60:	f7e9 f9ba 	bl	80002d8 <__aeabi_dsub>
 8016f64:	2200      	movs	r2, #0
 8016f66:	2300      	movs	r3, #0
 8016f68:	4682      	mov	sl, r0
 8016f6a:	468b      	mov	fp, r1
 8016f6c:	f7e9 fdd4 	bl	8000b18 <__aeabi_dcmpeq>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d0c1      	beq.n	8016ef8 <_strtod_l+0x8b8>
 8016f74:	e61a      	b.n	8016bac <_strtod_l+0x56c>
 8016f76:	4641      	mov	r1, r8
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f7ff facd 	bl	8016518 <__ratio>
 8016f7e:	ec57 6b10 	vmov	r6, r7, d0
 8016f82:	2200      	movs	r2, #0
 8016f84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016f88:	4630      	mov	r0, r6
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	f7e9 fdd8 	bl	8000b40 <__aeabi_dcmple>
 8016f90:	2800      	cmp	r0, #0
 8016f92:	d06f      	beq.n	8017074 <_strtod_l+0xa34>
 8016f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d17a      	bne.n	8017090 <_strtod_l+0xa50>
 8016f9a:	f1ba 0f00 	cmp.w	sl, #0
 8016f9e:	d158      	bne.n	8017052 <_strtod_l+0xa12>
 8016fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d15a      	bne.n	8017060 <_strtod_l+0xa20>
 8016faa:	4b64      	ldr	r3, [pc, #400]	@ (801713c <_strtod_l+0xafc>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	4630      	mov	r0, r6
 8016fb0:	4639      	mov	r1, r7
 8016fb2:	f7e9 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d159      	bne.n	801706e <_strtod_l+0xa2e>
 8016fba:	4630      	mov	r0, r6
 8016fbc:	4639      	mov	r1, r7
 8016fbe:	4b60      	ldr	r3, [pc, #384]	@ (8017140 <_strtod_l+0xb00>)
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	f7e9 fb41 	bl	8000648 <__aeabi_dmul>
 8016fc6:	4606      	mov	r6, r0
 8016fc8:	460f      	mov	r7, r1
 8016fca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016fce:	9606      	str	r6, [sp, #24]
 8016fd0:	9307      	str	r3, [sp, #28]
 8016fd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016fd6:	4d57      	ldr	r5, [pc, #348]	@ (8017134 <_strtod_l+0xaf4>)
 8016fd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fde:	401d      	ands	r5, r3
 8016fe0:	4b58      	ldr	r3, [pc, #352]	@ (8017144 <_strtod_l+0xb04>)
 8016fe2:	429d      	cmp	r5, r3
 8016fe4:	f040 80b2 	bne.w	801714c <_strtod_l+0xb0c>
 8016fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016fee:	ec4b ab10 	vmov	d0, sl, fp
 8016ff2:	f7ff f9c9 	bl	8016388 <__ulp>
 8016ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ffa:	ec51 0b10 	vmov	r0, r1, d0
 8016ffe:	f7e9 fb23 	bl	8000648 <__aeabi_dmul>
 8017002:	4652      	mov	r2, sl
 8017004:	465b      	mov	r3, fp
 8017006:	f7e9 f969 	bl	80002dc <__adddf3>
 801700a:	460b      	mov	r3, r1
 801700c:	4949      	ldr	r1, [pc, #292]	@ (8017134 <_strtod_l+0xaf4>)
 801700e:	4a4e      	ldr	r2, [pc, #312]	@ (8017148 <_strtod_l+0xb08>)
 8017010:	4019      	ands	r1, r3
 8017012:	4291      	cmp	r1, r2
 8017014:	4682      	mov	sl, r0
 8017016:	d942      	bls.n	801709e <_strtod_l+0xa5e>
 8017018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801701a:	4b47      	ldr	r3, [pc, #284]	@ (8017138 <_strtod_l+0xaf8>)
 801701c:	429a      	cmp	r2, r3
 801701e:	d103      	bne.n	8017028 <_strtod_l+0x9e8>
 8017020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017022:	3301      	adds	r3, #1
 8017024:	f43f ad2f 	beq.w	8016a86 <_strtod_l+0x446>
 8017028:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017138 <_strtod_l+0xaf8>
 801702c:	f04f 3aff 	mov.w	sl, #4294967295
 8017030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017032:	9805      	ldr	r0, [sp, #20]
 8017034:	f7fe fe7c 	bl	8015d30 <_Bfree>
 8017038:	9805      	ldr	r0, [sp, #20]
 801703a:	4649      	mov	r1, r9
 801703c:	f7fe fe78 	bl	8015d30 <_Bfree>
 8017040:	9805      	ldr	r0, [sp, #20]
 8017042:	4641      	mov	r1, r8
 8017044:	f7fe fe74 	bl	8015d30 <_Bfree>
 8017048:	9805      	ldr	r0, [sp, #20]
 801704a:	4621      	mov	r1, r4
 801704c:	f7fe fe70 	bl	8015d30 <_Bfree>
 8017050:	e619      	b.n	8016c86 <_strtod_l+0x646>
 8017052:	f1ba 0f01 	cmp.w	sl, #1
 8017056:	d103      	bne.n	8017060 <_strtod_l+0xa20>
 8017058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801705a:	2b00      	cmp	r3, #0
 801705c:	f43f ada6 	beq.w	8016bac <_strtod_l+0x56c>
 8017060:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017110 <_strtod_l+0xad0>
 8017064:	4f35      	ldr	r7, [pc, #212]	@ (801713c <_strtod_l+0xafc>)
 8017066:	ed8d 7b06 	vstr	d7, [sp, #24]
 801706a:	2600      	movs	r6, #0
 801706c:	e7b1      	b.n	8016fd2 <_strtod_l+0x992>
 801706e:	4f34      	ldr	r7, [pc, #208]	@ (8017140 <_strtod_l+0xb00>)
 8017070:	2600      	movs	r6, #0
 8017072:	e7aa      	b.n	8016fca <_strtod_l+0x98a>
 8017074:	4b32      	ldr	r3, [pc, #200]	@ (8017140 <_strtod_l+0xb00>)
 8017076:	4630      	mov	r0, r6
 8017078:	4639      	mov	r1, r7
 801707a:	2200      	movs	r2, #0
 801707c:	f7e9 fae4 	bl	8000648 <__aeabi_dmul>
 8017080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017082:	4606      	mov	r6, r0
 8017084:	460f      	mov	r7, r1
 8017086:	2b00      	cmp	r3, #0
 8017088:	d09f      	beq.n	8016fca <_strtod_l+0x98a>
 801708a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801708e:	e7a0      	b.n	8016fd2 <_strtod_l+0x992>
 8017090:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017118 <_strtod_l+0xad8>
 8017094:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017098:	ec57 6b17 	vmov	r6, r7, d7
 801709c:	e799      	b.n	8016fd2 <_strtod_l+0x992>
 801709e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80170a2:	9b08      	ldr	r3, [sp, #32]
 80170a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d1c1      	bne.n	8017030 <_strtod_l+0x9f0>
 80170ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170b0:	0d1b      	lsrs	r3, r3, #20
 80170b2:	051b      	lsls	r3, r3, #20
 80170b4:	429d      	cmp	r5, r3
 80170b6:	d1bb      	bne.n	8017030 <_strtod_l+0x9f0>
 80170b8:	4630      	mov	r0, r6
 80170ba:	4639      	mov	r1, r7
 80170bc:	f7e9 fe24 	bl	8000d08 <__aeabi_d2lz>
 80170c0:	f7e9 fa94 	bl	80005ec <__aeabi_l2d>
 80170c4:	4602      	mov	r2, r0
 80170c6:	460b      	mov	r3, r1
 80170c8:	4630      	mov	r0, r6
 80170ca:	4639      	mov	r1, r7
 80170cc:	f7e9 f904 	bl	80002d8 <__aeabi_dsub>
 80170d0:	460b      	mov	r3, r1
 80170d2:	4602      	mov	r2, r0
 80170d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80170d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80170dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170de:	ea46 060a 	orr.w	r6, r6, sl
 80170e2:	431e      	orrs	r6, r3
 80170e4:	d06f      	beq.n	80171c6 <_strtod_l+0xb86>
 80170e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8017120 <_strtod_l+0xae0>)
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	f7e9 fd1e 	bl	8000b2c <__aeabi_dcmplt>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	f47f acd3 	bne.w	8016a9c <_strtod_l+0x45c>
 80170f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8017128 <_strtod_l+0xae8>)
 80170f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017100:	f7e9 fd32 	bl	8000b68 <__aeabi_dcmpgt>
 8017104:	2800      	cmp	r0, #0
 8017106:	d093      	beq.n	8017030 <_strtod_l+0x9f0>
 8017108:	e4c8      	b.n	8016a9c <_strtod_l+0x45c>
 801710a:	bf00      	nop
 801710c:	f3af 8000 	nop.w
 8017110:	00000000 	.word	0x00000000
 8017114:	bff00000 	.word	0xbff00000
 8017118:	00000000 	.word	0x00000000
 801711c:	3ff00000 	.word	0x3ff00000
 8017120:	94a03595 	.word	0x94a03595
 8017124:	3fdfffff 	.word	0x3fdfffff
 8017128:	35afe535 	.word	0x35afe535
 801712c:	3fe00000 	.word	0x3fe00000
 8017130:	000fffff 	.word	0x000fffff
 8017134:	7ff00000 	.word	0x7ff00000
 8017138:	7fefffff 	.word	0x7fefffff
 801713c:	3ff00000 	.word	0x3ff00000
 8017140:	3fe00000 	.word	0x3fe00000
 8017144:	7fe00000 	.word	0x7fe00000
 8017148:	7c9fffff 	.word	0x7c9fffff
 801714c:	9b08      	ldr	r3, [sp, #32]
 801714e:	b323      	cbz	r3, 801719a <_strtod_l+0xb5a>
 8017150:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017154:	d821      	bhi.n	801719a <_strtod_l+0xb5a>
 8017156:	a328      	add	r3, pc, #160	@ (adr r3, 80171f8 <_strtod_l+0xbb8>)
 8017158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715c:	4630      	mov	r0, r6
 801715e:	4639      	mov	r1, r7
 8017160:	f7e9 fcee 	bl	8000b40 <__aeabi_dcmple>
 8017164:	b1a0      	cbz	r0, 8017190 <_strtod_l+0xb50>
 8017166:	4639      	mov	r1, r7
 8017168:	4630      	mov	r0, r6
 801716a:	f7e9 fd45 	bl	8000bf8 <__aeabi_d2uiz>
 801716e:	2801      	cmp	r0, #1
 8017170:	bf38      	it	cc
 8017172:	2001      	movcc	r0, #1
 8017174:	f7e9 f9ee 	bl	8000554 <__aeabi_ui2d>
 8017178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801717a:	4606      	mov	r6, r0
 801717c:	460f      	mov	r7, r1
 801717e:	b9fb      	cbnz	r3, 80171c0 <_strtod_l+0xb80>
 8017180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017184:	9014      	str	r0, [sp, #80]	@ 0x50
 8017186:	9315      	str	r3, [sp, #84]	@ 0x54
 8017188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801718c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017192:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017196:	1b5b      	subs	r3, r3, r5
 8017198:	9311      	str	r3, [sp, #68]	@ 0x44
 801719a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801719e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80171a2:	f7ff f8f1 	bl	8016388 <__ulp>
 80171a6:	4650      	mov	r0, sl
 80171a8:	ec53 2b10 	vmov	r2, r3, d0
 80171ac:	4659      	mov	r1, fp
 80171ae:	f7e9 fa4b 	bl	8000648 <__aeabi_dmul>
 80171b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80171b6:	f7e9 f891 	bl	80002dc <__adddf3>
 80171ba:	4682      	mov	sl, r0
 80171bc:	468b      	mov	fp, r1
 80171be:	e770      	b.n	80170a2 <_strtod_l+0xa62>
 80171c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80171c4:	e7e0      	b.n	8017188 <_strtod_l+0xb48>
 80171c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8017200 <_strtod_l+0xbc0>)
 80171c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171cc:	f7e9 fcae 	bl	8000b2c <__aeabi_dcmplt>
 80171d0:	e798      	b.n	8017104 <_strtod_l+0xac4>
 80171d2:	2300      	movs	r3, #0
 80171d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80171d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80171d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171da:	6013      	str	r3, [r2, #0]
 80171dc:	f7ff ba6d 	b.w	80166ba <_strtod_l+0x7a>
 80171e0:	2a65      	cmp	r2, #101	@ 0x65
 80171e2:	f43f ab68 	beq.w	80168b6 <_strtod_l+0x276>
 80171e6:	2a45      	cmp	r2, #69	@ 0x45
 80171e8:	f43f ab65 	beq.w	80168b6 <_strtod_l+0x276>
 80171ec:	2301      	movs	r3, #1
 80171ee:	f7ff bba0 	b.w	8016932 <_strtod_l+0x2f2>
 80171f2:	bf00      	nop
 80171f4:	f3af 8000 	nop.w
 80171f8:	ffc00000 	.word	0xffc00000
 80171fc:	41dfffff 	.word	0x41dfffff
 8017200:	94a03595 	.word	0x94a03595
 8017204:	3fcfffff 	.word	0x3fcfffff

08017208 <_strtod_r>:
 8017208:	4b01      	ldr	r3, [pc, #4]	@ (8017210 <_strtod_r+0x8>)
 801720a:	f7ff ba19 	b.w	8016640 <_strtod_l>
 801720e:	bf00      	nop
 8017210:	200000a4 	.word	0x200000a4

08017214 <_strtol_l.isra.0>:
 8017214:	2b24      	cmp	r3, #36	@ 0x24
 8017216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801721a:	4686      	mov	lr, r0
 801721c:	4690      	mov	r8, r2
 801721e:	d801      	bhi.n	8017224 <_strtol_l.isra.0+0x10>
 8017220:	2b01      	cmp	r3, #1
 8017222:	d106      	bne.n	8017232 <_strtol_l.isra.0+0x1e>
 8017224:	f7fd fdaa 	bl	8014d7c <__errno>
 8017228:	2316      	movs	r3, #22
 801722a:	6003      	str	r3, [r0, #0]
 801722c:	2000      	movs	r0, #0
 801722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017232:	4834      	ldr	r0, [pc, #208]	@ (8017304 <_strtol_l.isra.0+0xf0>)
 8017234:	460d      	mov	r5, r1
 8017236:	462a      	mov	r2, r5
 8017238:	f815 4b01 	ldrb.w	r4, [r5], #1
 801723c:	5d06      	ldrb	r6, [r0, r4]
 801723e:	f016 0608 	ands.w	r6, r6, #8
 8017242:	d1f8      	bne.n	8017236 <_strtol_l.isra.0+0x22>
 8017244:	2c2d      	cmp	r4, #45	@ 0x2d
 8017246:	d110      	bne.n	801726a <_strtol_l.isra.0+0x56>
 8017248:	782c      	ldrb	r4, [r5, #0]
 801724a:	2601      	movs	r6, #1
 801724c:	1c95      	adds	r5, r2, #2
 801724e:	f033 0210 	bics.w	r2, r3, #16
 8017252:	d115      	bne.n	8017280 <_strtol_l.isra.0+0x6c>
 8017254:	2c30      	cmp	r4, #48	@ 0x30
 8017256:	d10d      	bne.n	8017274 <_strtol_l.isra.0+0x60>
 8017258:	782a      	ldrb	r2, [r5, #0]
 801725a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801725e:	2a58      	cmp	r2, #88	@ 0x58
 8017260:	d108      	bne.n	8017274 <_strtol_l.isra.0+0x60>
 8017262:	786c      	ldrb	r4, [r5, #1]
 8017264:	3502      	adds	r5, #2
 8017266:	2310      	movs	r3, #16
 8017268:	e00a      	b.n	8017280 <_strtol_l.isra.0+0x6c>
 801726a:	2c2b      	cmp	r4, #43	@ 0x2b
 801726c:	bf04      	itt	eq
 801726e:	782c      	ldrbeq	r4, [r5, #0]
 8017270:	1c95      	addeq	r5, r2, #2
 8017272:	e7ec      	b.n	801724e <_strtol_l.isra.0+0x3a>
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1f6      	bne.n	8017266 <_strtol_l.isra.0+0x52>
 8017278:	2c30      	cmp	r4, #48	@ 0x30
 801727a:	bf14      	ite	ne
 801727c:	230a      	movne	r3, #10
 801727e:	2308      	moveq	r3, #8
 8017280:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017284:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017288:	2200      	movs	r2, #0
 801728a:	fbbc f9f3 	udiv	r9, ip, r3
 801728e:	4610      	mov	r0, r2
 8017290:	fb03 ca19 	mls	sl, r3, r9, ip
 8017294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017298:	2f09      	cmp	r7, #9
 801729a:	d80f      	bhi.n	80172bc <_strtol_l.isra.0+0xa8>
 801729c:	463c      	mov	r4, r7
 801729e:	42a3      	cmp	r3, r4
 80172a0:	dd1b      	ble.n	80172da <_strtol_l.isra.0+0xc6>
 80172a2:	1c57      	adds	r7, r2, #1
 80172a4:	d007      	beq.n	80172b6 <_strtol_l.isra.0+0xa2>
 80172a6:	4581      	cmp	r9, r0
 80172a8:	d314      	bcc.n	80172d4 <_strtol_l.isra.0+0xc0>
 80172aa:	d101      	bne.n	80172b0 <_strtol_l.isra.0+0x9c>
 80172ac:	45a2      	cmp	sl, r4
 80172ae:	db11      	blt.n	80172d4 <_strtol_l.isra.0+0xc0>
 80172b0:	fb00 4003 	mla	r0, r0, r3, r4
 80172b4:	2201      	movs	r2, #1
 80172b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172ba:	e7eb      	b.n	8017294 <_strtol_l.isra.0+0x80>
 80172bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80172c0:	2f19      	cmp	r7, #25
 80172c2:	d801      	bhi.n	80172c8 <_strtol_l.isra.0+0xb4>
 80172c4:	3c37      	subs	r4, #55	@ 0x37
 80172c6:	e7ea      	b.n	801729e <_strtol_l.isra.0+0x8a>
 80172c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80172cc:	2f19      	cmp	r7, #25
 80172ce:	d804      	bhi.n	80172da <_strtol_l.isra.0+0xc6>
 80172d0:	3c57      	subs	r4, #87	@ 0x57
 80172d2:	e7e4      	b.n	801729e <_strtol_l.isra.0+0x8a>
 80172d4:	f04f 32ff 	mov.w	r2, #4294967295
 80172d8:	e7ed      	b.n	80172b6 <_strtol_l.isra.0+0xa2>
 80172da:	1c53      	adds	r3, r2, #1
 80172dc:	d108      	bne.n	80172f0 <_strtol_l.isra.0+0xdc>
 80172de:	2322      	movs	r3, #34	@ 0x22
 80172e0:	f8ce 3000 	str.w	r3, [lr]
 80172e4:	4660      	mov	r0, ip
 80172e6:	f1b8 0f00 	cmp.w	r8, #0
 80172ea:	d0a0      	beq.n	801722e <_strtol_l.isra.0+0x1a>
 80172ec:	1e69      	subs	r1, r5, #1
 80172ee:	e006      	b.n	80172fe <_strtol_l.isra.0+0xea>
 80172f0:	b106      	cbz	r6, 80172f4 <_strtol_l.isra.0+0xe0>
 80172f2:	4240      	negs	r0, r0
 80172f4:	f1b8 0f00 	cmp.w	r8, #0
 80172f8:	d099      	beq.n	801722e <_strtol_l.isra.0+0x1a>
 80172fa:	2a00      	cmp	r2, #0
 80172fc:	d1f6      	bne.n	80172ec <_strtol_l.isra.0+0xd8>
 80172fe:	f8c8 1000 	str.w	r1, [r8]
 8017302:	e794      	b.n	801722e <_strtol_l.isra.0+0x1a>
 8017304:	0801b259 	.word	0x0801b259

08017308 <_strtol_r>:
 8017308:	f7ff bf84 	b.w	8017214 <_strtol_l.isra.0>

0801730c <__ssputs_r>:
 801730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017310:	688e      	ldr	r6, [r1, #8]
 8017312:	461f      	mov	r7, r3
 8017314:	42be      	cmp	r6, r7
 8017316:	680b      	ldr	r3, [r1, #0]
 8017318:	4682      	mov	sl, r0
 801731a:	460c      	mov	r4, r1
 801731c:	4690      	mov	r8, r2
 801731e:	d82d      	bhi.n	801737c <__ssputs_r+0x70>
 8017320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017328:	d026      	beq.n	8017378 <__ssputs_r+0x6c>
 801732a:	6965      	ldr	r5, [r4, #20]
 801732c:	6909      	ldr	r1, [r1, #16]
 801732e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017332:	eba3 0901 	sub.w	r9, r3, r1
 8017336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801733a:	1c7b      	adds	r3, r7, #1
 801733c:	444b      	add	r3, r9
 801733e:	106d      	asrs	r5, r5, #1
 8017340:	429d      	cmp	r5, r3
 8017342:	bf38      	it	cc
 8017344:	461d      	movcc	r5, r3
 8017346:	0553      	lsls	r3, r2, #21
 8017348:	d527      	bpl.n	801739a <__ssputs_r+0x8e>
 801734a:	4629      	mov	r1, r5
 801734c:	f7fe fc24 	bl	8015b98 <_malloc_r>
 8017350:	4606      	mov	r6, r0
 8017352:	b360      	cbz	r0, 80173ae <__ssputs_r+0xa2>
 8017354:	6921      	ldr	r1, [r4, #16]
 8017356:	464a      	mov	r2, r9
 8017358:	f7fd fd3d 	bl	8014dd6 <memcpy>
 801735c:	89a3      	ldrh	r3, [r4, #12]
 801735e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017366:	81a3      	strh	r3, [r4, #12]
 8017368:	6126      	str	r6, [r4, #16]
 801736a:	6165      	str	r5, [r4, #20]
 801736c:	444e      	add	r6, r9
 801736e:	eba5 0509 	sub.w	r5, r5, r9
 8017372:	6026      	str	r6, [r4, #0]
 8017374:	60a5      	str	r5, [r4, #8]
 8017376:	463e      	mov	r6, r7
 8017378:	42be      	cmp	r6, r7
 801737a:	d900      	bls.n	801737e <__ssputs_r+0x72>
 801737c:	463e      	mov	r6, r7
 801737e:	6820      	ldr	r0, [r4, #0]
 8017380:	4632      	mov	r2, r6
 8017382:	4641      	mov	r1, r8
 8017384:	f000 f9c6 	bl	8017714 <memmove>
 8017388:	68a3      	ldr	r3, [r4, #8]
 801738a:	1b9b      	subs	r3, r3, r6
 801738c:	60a3      	str	r3, [r4, #8]
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	4433      	add	r3, r6
 8017392:	6023      	str	r3, [r4, #0]
 8017394:	2000      	movs	r0, #0
 8017396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801739a:	462a      	mov	r2, r5
 801739c:	f000 fd7d 	bl	8017e9a <_realloc_r>
 80173a0:	4606      	mov	r6, r0
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d1e0      	bne.n	8017368 <__ssputs_r+0x5c>
 80173a6:	6921      	ldr	r1, [r4, #16]
 80173a8:	4650      	mov	r0, sl
 80173aa:	f7fe fb81 	bl	8015ab0 <_free_r>
 80173ae:	230c      	movs	r3, #12
 80173b0:	f8ca 3000 	str.w	r3, [sl]
 80173b4:	89a3      	ldrh	r3, [r4, #12]
 80173b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173ba:	81a3      	strh	r3, [r4, #12]
 80173bc:	f04f 30ff 	mov.w	r0, #4294967295
 80173c0:	e7e9      	b.n	8017396 <__ssputs_r+0x8a>
	...

080173c4 <_svfiprintf_r>:
 80173c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c8:	4698      	mov	r8, r3
 80173ca:	898b      	ldrh	r3, [r1, #12]
 80173cc:	061b      	lsls	r3, r3, #24
 80173ce:	b09d      	sub	sp, #116	@ 0x74
 80173d0:	4607      	mov	r7, r0
 80173d2:	460d      	mov	r5, r1
 80173d4:	4614      	mov	r4, r2
 80173d6:	d510      	bpl.n	80173fa <_svfiprintf_r+0x36>
 80173d8:	690b      	ldr	r3, [r1, #16]
 80173da:	b973      	cbnz	r3, 80173fa <_svfiprintf_r+0x36>
 80173dc:	2140      	movs	r1, #64	@ 0x40
 80173de:	f7fe fbdb 	bl	8015b98 <_malloc_r>
 80173e2:	6028      	str	r0, [r5, #0]
 80173e4:	6128      	str	r0, [r5, #16]
 80173e6:	b930      	cbnz	r0, 80173f6 <_svfiprintf_r+0x32>
 80173e8:	230c      	movs	r3, #12
 80173ea:	603b      	str	r3, [r7, #0]
 80173ec:	f04f 30ff 	mov.w	r0, #4294967295
 80173f0:	b01d      	add	sp, #116	@ 0x74
 80173f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f6:	2340      	movs	r3, #64	@ 0x40
 80173f8:	616b      	str	r3, [r5, #20]
 80173fa:	2300      	movs	r3, #0
 80173fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80173fe:	2320      	movs	r3, #32
 8017400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017404:	f8cd 800c 	str.w	r8, [sp, #12]
 8017408:	2330      	movs	r3, #48	@ 0x30
 801740a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80175a8 <_svfiprintf_r+0x1e4>
 801740e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017412:	f04f 0901 	mov.w	r9, #1
 8017416:	4623      	mov	r3, r4
 8017418:	469a      	mov	sl, r3
 801741a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801741e:	b10a      	cbz	r2, 8017424 <_svfiprintf_r+0x60>
 8017420:	2a25      	cmp	r2, #37	@ 0x25
 8017422:	d1f9      	bne.n	8017418 <_svfiprintf_r+0x54>
 8017424:	ebba 0b04 	subs.w	fp, sl, r4
 8017428:	d00b      	beq.n	8017442 <_svfiprintf_r+0x7e>
 801742a:	465b      	mov	r3, fp
 801742c:	4622      	mov	r2, r4
 801742e:	4629      	mov	r1, r5
 8017430:	4638      	mov	r0, r7
 8017432:	f7ff ff6b 	bl	801730c <__ssputs_r>
 8017436:	3001      	adds	r0, #1
 8017438:	f000 80a7 	beq.w	801758a <_svfiprintf_r+0x1c6>
 801743c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801743e:	445a      	add	r2, fp
 8017440:	9209      	str	r2, [sp, #36]	@ 0x24
 8017442:	f89a 3000 	ldrb.w	r3, [sl]
 8017446:	2b00      	cmp	r3, #0
 8017448:	f000 809f 	beq.w	801758a <_svfiprintf_r+0x1c6>
 801744c:	2300      	movs	r3, #0
 801744e:	f04f 32ff 	mov.w	r2, #4294967295
 8017452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017456:	f10a 0a01 	add.w	sl, sl, #1
 801745a:	9304      	str	r3, [sp, #16]
 801745c:	9307      	str	r3, [sp, #28]
 801745e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017462:	931a      	str	r3, [sp, #104]	@ 0x68
 8017464:	4654      	mov	r4, sl
 8017466:	2205      	movs	r2, #5
 8017468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801746c:	484e      	ldr	r0, [pc, #312]	@ (80175a8 <_svfiprintf_r+0x1e4>)
 801746e:	f7e8 fed7 	bl	8000220 <memchr>
 8017472:	9a04      	ldr	r2, [sp, #16]
 8017474:	b9d8      	cbnz	r0, 80174ae <_svfiprintf_r+0xea>
 8017476:	06d0      	lsls	r0, r2, #27
 8017478:	bf44      	itt	mi
 801747a:	2320      	movmi	r3, #32
 801747c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017480:	0711      	lsls	r1, r2, #28
 8017482:	bf44      	itt	mi
 8017484:	232b      	movmi	r3, #43	@ 0x2b
 8017486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801748a:	f89a 3000 	ldrb.w	r3, [sl]
 801748e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017490:	d015      	beq.n	80174be <_svfiprintf_r+0xfa>
 8017492:	9a07      	ldr	r2, [sp, #28]
 8017494:	4654      	mov	r4, sl
 8017496:	2000      	movs	r0, #0
 8017498:	f04f 0c0a 	mov.w	ip, #10
 801749c:	4621      	mov	r1, r4
 801749e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174a2:	3b30      	subs	r3, #48	@ 0x30
 80174a4:	2b09      	cmp	r3, #9
 80174a6:	d94b      	bls.n	8017540 <_svfiprintf_r+0x17c>
 80174a8:	b1b0      	cbz	r0, 80174d8 <_svfiprintf_r+0x114>
 80174aa:	9207      	str	r2, [sp, #28]
 80174ac:	e014      	b.n	80174d8 <_svfiprintf_r+0x114>
 80174ae:	eba0 0308 	sub.w	r3, r0, r8
 80174b2:	fa09 f303 	lsl.w	r3, r9, r3
 80174b6:	4313      	orrs	r3, r2
 80174b8:	9304      	str	r3, [sp, #16]
 80174ba:	46a2      	mov	sl, r4
 80174bc:	e7d2      	b.n	8017464 <_svfiprintf_r+0xa0>
 80174be:	9b03      	ldr	r3, [sp, #12]
 80174c0:	1d19      	adds	r1, r3, #4
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	9103      	str	r1, [sp, #12]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	bfbb      	ittet	lt
 80174ca:	425b      	neglt	r3, r3
 80174cc:	f042 0202 	orrlt.w	r2, r2, #2
 80174d0:	9307      	strge	r3, [sp, #28]
 80174d2:	9307      	strlt	r3, [sp, #28]
 80174d4:	bfb8      	it	lt
 80174d6:	9204      	strlt	r2, [sp, #16]
 80174d8:	7823      	ldrb	r3, [r4, #0]
 80174da:	2b2e      	cmp	r3, #46	@ 0x2e
 80174dc:	d10a      	bne.n	80174f4 <_svfiprintf_r+0x130>
 80174de:	7863      	ldrb	r3, [r4, #1]
 80174e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80174e2:	d132      	bne.n	801754a <_svfiprintf_r+0x186>
 80174e4:	9b03      	ldr	r3, [sp, #12]
 80174e6:	1d1a      	adds	r2, r3, #4
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	9203      	str	r2, [sp, #12]
 80174ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174f0:	3402      	adds	r4, #2
 80174f2:	9305      	str	r3, [sp, #20]
 80174f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80175b8 <_svfiprintf_r+0x1f4>
 80174f8:	7821      	ldrb	r1, [r4, #0]
 80174fa:	2203      	movs	r2, #3
 80174fc:	4650      	mov	r0, sl
 80174fe:	f7e8 fe8f 	bl	8000220 <memchr>
 8017502:	b138      	cbz	r0, 8017514 <_svfiprintf_r+0x150>
 8017504:	9b04      	ldr	r3, [sp, #16]
 8017506:	eba0 000a 	sub.w	r0, r0, sl
 801750a:	2240      	movs	r2, #64	@ 0x40
 801750c:	4082      	lsls	r2, r0
 801750e:	4313      	orrs	r3, r2
 8017510:	3401      	adds	r4, #1
 8017512:	9304      	str	r3, [sp, #16]
 8017514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017518:	4824      	ldr	r0, [pc, #144]	@ (80175ac <_svfiprintf_r+0x1e8>)
 801751a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801751e:	2206      	movs	r2, #6
 8017520:	f7e8 fe7e 	bl	8000220 <memchr>
 8017524:	2800      	cmp	r0, #0
 8017526:	d036      	beq.n	8017596 <_svfiprintf_r+0x1d2>
 8017528:	4b21      	ldr	r3, [pc, #132]	@ (80175b0 <_svfiprintf_r+0x1ec>)
 801752a:	bb1b      	cbnz	r3, 8017574 <_svfiprintf_r+0x1b0>
 801752c:	9b03      	ldr	r3, [sp, #12]
 801752e:	3307      	adds	r3, #7
 8017530:	f023 0307 	bic.w	r3, r3, #7
 8017534:	3308      	adds	r3, #8
 8017536:	9303      	str	r3, [sp, #12]
 8017538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801753a:	4433      	add	r3, r6
 801753c:	9309      	str	r3, [sp, #36]	@ 0x24
 801753e:	e76a      	b.n	8017416 <_svfiprintf_r+0x52>
 8017540:	fb0c 3202 	mla	r2, ip, r2, r3
 8017544:	460c      	mov	r4, r1
 8017546:	2001      	movs	r0, #1
 8017548:	e7a8      	b.n	801749c <_svfiprintf_r+0xd8>
 801754a:	2300      	movs	r3, #0
 801754c:	3401      	adds	r4, #1
 801754e:	9305      	str	r3, [sp, #20]
 8017550:	4619      	mov	r1, r3
 8017552:	f04f 0c0a 	mov.w	ip, #10
 8017556:	4620      	mov	r0, r4
 8017558:	f810 2b01 	ldrb.w	r2, [r0], #1
 801755c:	3a30      	subs	r2, #48	@ 0x30
 801755e:	2a09      	cmp	r2, #9
 8017560:	d903      	bls.n	801756a <_svfiprintf_r+0x1a6>
 8017562:	2b00      	cmp	r3, #0
 8017564:	d0c6      	beq.n	80174f4 <_svfiprintf_r+0x130>
 8017566:	9105      	str	r1, [sp, #20]
 8017568:	e7c4      	b.n	80174f4 <_svfiprintf_r+0x130>
 801756a:	fb0c 2101 	mla	r1, ip, r1, r2
 801756e:	4604      	mov	r4, r0
 8017570:	2301      	movs	r3, #1
 8017572:	e7f0      	b.n	8017556 <_svfiprintf_r+0x192>
 8017574:	ab03      	add	r3, sp, #12
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	462a      	mov	r2, r5
 801757a:	4b0e      	ldr	r3, [pc, #56]	@ (80175b4 <_svfiprintf_r+0x1f0>)
 801757c:	a904      	add	r1, sp, #16
 801757e:	4638      	mov	r0, r7
 8017580:	f7fc fc2a 	bl	8013dd8 <_printf_float>
 8017584:	1c42      	adds	r2, r0, #1
 8017586:	4606      	mov	r6, r0
 8017588:	d1d6      	bne.n	8017538 <_svfiprintf_r+0x174>
 801758a:	89ab      	ldrh	r3, [r5, #12]
 801758c:	065b      	lsls	r3, r3, #25
 801758e:	f53f af2d 	bmi.w	80173ec <_svfiprintf_r+0x28>
 8017592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017594:	e72c      	b.n	80173f0 <_svfiprintf_r+0x2c>
 8017596:	ab03      	add	r3, sp, #12
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	462a      	mov	r2, r5
 801759c:	4b05      	ldr	r3, [pc, #20]	@ (80175b4 <_svfiprintf_r+0x1f0>)
 801759e:	a904      	add	r1, sp, #16
 80175a0:	4638      	mov	r0, r7
 80175a2:	f7fc feb1 	bl	8014308 <_printf_i>
 80175a6:	e7ed      	b.n	8017584 <_svfiprintf_r+0x1c0>
 80175a8:	0801b055 	.word	0x0801b055
 80175ac:	0801b05f 	.word	0x0801b05f
 80175b0:	08013dd9 	.word	0x08013dd9
 80175b4:	0801730d 	.word	0x0801730d
 80175b8:	0801b05b 	.word	0x0801b05b

080175bc <__sflush_r>:
 80175bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175c4:	0716      	lsls	r6, r2, #28
 80175c6:	4605      	mov	r5, r0
 80175c8:	460c      	mov	r4, r1
 80175ca:	d454      	bmi.n	8017676 <__sflush_r+0xba>
 80175cc:	684b      	ldr	r3, [r1, #4]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	dc02      	bgt.n	80175d8 <__sflush_r+0x1c>
 80175d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	dd48      	ble.n	801766a <__sflush_r+0xae>
 80175d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175da:	2e00      	cmp	r6, #0
 80175dc:	d045      	beq.n	801766a <__sflush_r+0xae>
 80175de:	2300      	movs	r3, #0
 80175e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175e4:	682f      	ldr	r7, [r5, #0]
 80175e6:	6a21      	ldr	r1, [r4, #32]
 80175e8:	602b      	str	r3, [r5, #0]
 80175ea:	d030      	beq.n	801764e <__sflush_r+0x92>
 80175ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175ee:	89a3      	ldrh	r3, [r4, #12]
 80175f0:	0759      	lsls	r1, r3, #29
 80175f2:	d505      	bpl.n	8017600 <__sflush_r+0x44>
 80175f4:	6863      	ldr	r3, [r4, #4]
 80175f6:	1ad2      	subs	r2, r2, r3
 80175f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175fa:	b10b      	cbz	r3, 8017600 <__sflush_r+0x44>
 80175fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175fe:	1ad2      	subs	r2, r2, r3
 8017600:	2300      	movs	r3, #0
 8017602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017604:	6a21      	ldr	r1, [r4, #32]
 8017606:	4628      	mov	r0, r5
 8017608:	47b0      	blx	r6
 801760a:	1c43      	adds	r3, r0, #1
 801760c:	89a3      	ldrh	r3, [r4, #12]
 801760e:	d106      	bne.n	801761e <__sflush_r+0x62>
 8017610:	6829      	ldr	r1, [r5, #0]
 8017612:	291d      	cmp	r1, #29
 8017614:	d82b      	bhi.n	801766e <__sflush_r+0xb2>
 8017616:	4a2a      	ldr	r2, [pc, #168]	@ (80176c0 <__sflush_r+0x104>)
 8017618:	40ca      	lsrs	r2, r1
 801761a:	07d6      	lsls	r6, r2, #31
 801761c:	d527      	bpl.n	801766e <__sflush_r+0xb2>
 801761e:	2200      	movs	r2, #0
 8017620:	6062      	str	r2, [r4, #4]
 8017622:	04d9      	lsls	r1, r3, #19
 8017624:	6922      	ldr	r2, [r4, #16]
 8017626:	6022      	str	r2, [r4, #0]
 8017628:	d504      	bpl.n	8017634 <__sflush_r+0x78>
 801762a:	1c42      	adds	r2, r0, #1
 801762c:	d101      	bne.n	8017632 <__sflush_r+0x76>
 801762e:	682b      	ldr	r3, [r5, #0]
 8017630:	b903      	cbnz	r3, 8017634 <__sflush_r+0x78>
 8017632:	6560      	str	r0, [r4, #84]	@ 0x54
 8017634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017636:	602f      	str	r7, [r5, #0]
 8017638:	b1b9      	cbz	r1, 801766a <__sflush_r+0xae>
 801763a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801763e:	4299      	cmp	r1, r3
 8017640:	d002      	beq.n	8017648 <__sflush_r+0x8c>
 8017642:	4628      	mov	r0, r5
 8017644:	f7fe fa34 	bl	8015ab0 <_free_r>
 8017648:	2300      	movs	r3, #0
 801764a:	6363      	str	r3, [r4, #52]	@ 0x34
 801764c:	e00d      	b.n	801766a <__sflush_r+0xae>
 801764e:	2301      	movs	r3, #1
 8017650:	4628      	mov	r0, r5
 8017652:	47b0      	blx	r6
 8017654:	4602      	mov	r2, r0
 8017656:	1c50      	adds	r0, r2, #1
 8017658:	d1c9      	bne.n	80175ee <__sflush_r+0x32>
 801765a:	682b      	ldr	r3, [r5, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d0c6      	beq.n	80175ee <__sflush_r+0x32>
 8017660:	2b1d      	cmp	r3, #29
 8017662:	d001      	beq.n	8017668 <__sflush_r+0xac>
 8017664:	2b16      	cmp	r3, #22
 8017666:	d11e      	bne.n	80176a6 <__sflush_r+0xea>
 8017668:	602f      	str	r7, [r5, #0]
 801766a:	2000      	movs	r0, #0
 801766c:	e022      	b.n	80176b4 <__sflush_r+0xf8>
 801766e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017672:	b21b      	sxth	r3, r3
 8017674:	e01b      	b.n	80176ae <__sflush_r+0xf2>
 8017676:	690f      	ldr	r7, [r1, #16]
 8017678:	2f00      	cmp	r7, #0
 801767a:	d0f6      	beq.n	801766a <__sflush_r+0xae>
 801767c:	0793      	lsls	r3, r2, #30
 801767e:	680e      	ldr	r6, [r1, #0]
 8017680:	bf08      	it	eq
 8017682:	694b      	ldreq	r3, [r1, #20]
 8017684:	600f      	str	r7, [r1, #0]
 8017686:	bf18      	it	ne
 8017688:	2300      	movne	r3, #0
 801768a:	eba6 0807 	sub.w	r8, r6, r7
 801768e:	608b      	str	r3, [r1, #8]
 8017690:	f1b8 0f00 	cmp.w	r8, #0
 8017694:	dde9      	ble.n	801766a <__sflush_r+0xae>
 8017696:	6a21      	ldr	r1, [r4, #32]
 8017698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801769a:	4643      	mov	r3, r8
 801769c:	463a      	mov	r2, r7
 801769e:	4628      	mov	r0, r5
 80176a0:	47b0      	blx	r6
 80176a2:	2800      	cmp	r0, #0
 80176a4:	dc08      	bgt.n	80176b8 <__sflush_r+0xfc>
 80176a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176ae:	81a3      	strh	r3, [r4, #12]
 80176b0:	f04f 30ff 	mov.w	r0, #4294967295
 80176b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b8:	4407      	add	r7, r0
 80176ba:	eba8 0800 	sub.w	r8, r8, r0
 80176be:	e7e7      	b.n	8017690 <__sflush_r+0xd4>
 80176c0:	20400001 	.word	0x20400001

080176c4 <_fflush_r>:
 80176c4:	b538      	push	{r3, r4, r5, lr}
 80176c6:	690b      	ldr	r3, [r1, #16]
 80176c8:	4605      	mov	r5, r0
 80176ca:	460c      	mov	r4, r1
 80176cc:	b913      	cbnz	r3, 80176d4 <_fflush_r+0x10>
 80176ce:	2500      	movs	r5, #0
 80176d0:	4628      	mov	r0, r5
 80176d2:	bd38      	pop	{r3, r4, r5, pc}
 80176d4:	b118      	cbz	r0, 80176de <_fflush_r+0x1a>
 80176d6:	6a03      	ldr	r3, [r0, #32]
 80176d8:	b90b      	cbnz	r3, 80176de <_fflush_r+0x1a>
 80176da:	f7fd f9cd 	bl	8014a78 <__sinit>
 80176de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d0f3      	beq.n	80176ce <_fflush_r+0xa>
 80176e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176e8:	07d0      	lsls	r0, r2, #31
 80176ea:	d404      	bmi.n	80176f6 <_fflush_r+0x32>
 80176ec:	0599      	lsls	r1, r3, #22
 80176ee:	d402      	bmi.n	80176f6 <_fflush_r+0x32>
 80176f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176f2:	f7fd fb6e 	bl	8014dd2 <__retarget_lock_acquire_recursive>
 80176f6:	4628      	mov	r0, r5
 80176f8:	4621      	mov	r1, r4
 80176fa:	f7ff ff5f 	bl	80175bc <__sflush_r>
 80176fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017700:	07da      	lsls	r2, r3, #31
 8017702:	4605      	mov	r5, r0
 8017704:	d4e4      	bmi.n	80176d0 <_fflush_r+0xc>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	059b      	lsls	r3, r3, #22
 801770a:	d4e1      	bmi.n	80176d0 <_fflush_r+0xc>
 801770c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801770e:	f7fd fb61 	bl	8014dd4 <__retarget_lock_release_recursive>
 8017712:	e7dd      	b.n	80176d0 <_fflush_r+0xc>

08017714 <memmove>:
 8017714:	4288      	cmp	r0, r1
 8017716:	b510      	push	{r4, lr}
 8017718:	eb01 0402 	add.w	r4, r1, r2
 801771c:	d902      	bls.n	8017724 <memmove+0x10>
 801771e:	4284      	cmp	r4, r0
 8017720:	4623      	mov	r3, r4
 8017722:	d807      	bhi.n	8017734 <memmove+0x20>
 8017724:	1e43      	subs	r3, r0, #1
 8017726:	42a1      	cmp	r1, r4
 8017728:	d008      	beq.n	801773c <memmove+0x28>
 801772a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801772e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017732:	e7f8      	b.n	8017726 <memmove+0x12>
 8017734:	4402      	add	r2, r0
 8017736:	4601      	mov	r1, r0
 8017738:	428a      	cmp	r2, r1
 801773a:	d100      	bne.n	801773e <memmove+0x2a>
 801773c:	bd10      	pop	{r4, pc}
 801773e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017746:	e7f7      	b.n	8017738 <memmove+0x24>

08017748 <strncmp>:
 8017748:	b510      	push	{r4, lr}
 801774a:	b16a      	cbz	r2, 8017768 <strncmp+0x20>
 801774c:	3901      	subs	r1, #1
 801774e:	1884      	adds	r4, r0, r2
 8017750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017754:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017758:	429a      	cmp	r2, r3
 801775a:	d103      	bne.n	8017764 <strncmp+0x1c>
 801775c:	42a0      	cmp	r0, r4
 801775e:	d001      	beq.n	8017764 <strncmp+0x1c>
 8017760:	2a00      	cmp	r2, #0
 8017762:	d1f5      	bne.n	8017750 <strncmp+0x8>
 8017764:	1ad0      	subs	r0, r2, r3
 8017766:	bd10      	pop	{r4, pc}
 8017768:	4610      	mov	r0, r2
 801776a:	e7fc      	b.n	8017766 <strncmp+0x1e>

0801776c <_sbrk_r>:
 801776c:	b538      	push	{r3, r4, r5, lr}
 801776e:	4d06      	ldr	r5, [pc, #24]	@ (8017788 <_sbrk_r+0x1c>)
 8017770:	2300      	movs	r3, #0
 8017772:	4604      	mov	r4, r0
 8017774:	4608      	mov	r0, r1
 8017776:	602b      	str	r3, [r5, #0]
 8017778:	f7ec fece 	bl	8004518 <_sbrk>
 801777c:	1c43      	adds	r3, r0, #1
 801777e:	d102      	bne.n	8017786 <_sbrk_r+0x1a>
 8017780:	682b      	ldr	r3, [r5, #0]
 8017782:	b103      	cbz	r3, 8017786 <_sbrk_r+0x1a>
 8017784:	6023      	str	r3, [r4, #0]
 8017786:	bd38      	pop	{r3, r4, r5, pc}
 8017788:	20004d00 	.word	0x20004d00
 801778c:	00000000 	.word	0x00000000

08017790 <nan>:
 8017790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017798 <nan+0x8>
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	00000000 	.word	0x00000000
 801779c:	7ff80000 	.word	0x7ff80000

080177a0 <__assert_func>:
 80177a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80177a2:	4614      	mov	r4, r2
 80177a4:	461a      	mov	r2, r3
 80177a6:	4b09      	ldr	r3, [pc, #36]	@ (80177cc <__assert_func+0x2c>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	4605      	mov	r5, r0
 80177ac:	68d8      	ldr	r0, [r3, #12]
 80177ae:	b14c      	cbz	r4, 80177c4 <__assert_func+0x24>
 80177b0:	4b07      	ldr	r3, [pc, #28]	@ (80177d0 <__assert_func+0x30>)
 80177b2:	9100      	str	r1, [sp, #0]
 80177b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80177b8:	4906      	ldr	r1, [pc, #24]	@ (80177d4 <__assert_func+0x34>)
 80177ba:	462b      	mov	r3, r5
 80177bc:	f000 fba8 	bl	8017f10 <fiprintf>
 80177c0:	f000 fbb8 	bl	8017f34 <abort>
 80177c4:	4b04      	ldr	r3, [pc, #16]	@ (80177d8 <__assert_func+0x38>)
 80177c6:	461c      	mov	r4, r3
 80177c8:	e7f3      	b.n	80177b2 <__assert_func+0x12>
 80177ca:	bf00      	nop
 80177cc:	20000054 	.word	0x20000054
 80177d0:	0801b06e 	.word	0x0801b06e
 80177d4:	0801b07b 	.word	0x0801b07b
 80177d8:	0801b0a9 	.word	0x0801b0a9

080177dc <_calloc_r>:
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	fba1 5402 	umull	r5, r4, r1, r2
 80177e2:	b934      	cbnz	r4, 80177f2 <_calloc_r+0x16>
 80177e4:	4629      	mov	r1, r5
 80177e6:	f7fe f9d7 	bl	8015b98 <_malloc_r>
 80177ea:	4606      	mov	r6, r0
 80177ec:	b928      	cbnz	r0, 80177fa <_calloc_r+0x1e>
 80177ee:	4630      	mov	r0, r6
 80177f0:	bd70      	pop	{r4, r5, r6, pc}
 80177f2:	220c      	movs	r2, #12
 80177f4:	6002      	str	r2, [r0, #0]
 80177f6:	2600      	movs	r6, #0
 80177f8:	e7f9      	b.n	80177ee <_calloc_r+0x12>
 80177fa:	462a      	mov	r2, r5
 80177fc:	4621      	mov	r1, r4
 80177fe:	f7fd fa0c 	bl	8014c1a <memset>
 8017802:	e7f4      	b.n	80177ee <_calloc_r+0x12>

08017804 <rshift>:
 8017804:	6903      	ldr	r3, [r0, #16]
 8017806:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801780a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801780e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017812:	f100 0414 	add.w	r4, r0, #20
 8017816:	dd45      	ble.n	80178a4 <rshift+0xa0>
 8017818:	f011 011f 	ands.w	r1, r1, #31
 801781c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017824:	d10c      	bne.n	8017840 <rshift+0x3c>
 8017826:	f100 0710 	add.w	r7, r0, #16
 801782a:	4629      	mov	r1, r5
 801782c:	42b1      	cmp	r1, r6
 801782e:	d334      	bcc.n	801789a <rshift+0x96>
 8017830:	1a9b      	subs	r3, r3, r2
 8017832:	009b      	lsls	r3, r3, #2
 8017834:	1eea      	subs	r2, r5, #3
 8017836:	4296      	cmp	r6, r2
 8017838:	bf38      	it	cc
 801783a:	2300      	movcc	r3, #0
 801783c:	4423      	add	r3, r4
 801783e:	e015      	b.n	801786c <rshift+0x68>
 8017840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017844:	f1c1 0820 	rsb	r8, r1, #32
 8017848:	40cf      	lsrs	r7, r1
 801784a:	f105 0e04 	add.w	lr, r5, #4
 801784e:	46a1      	mov	r9, r4
 8017850:	4576      	cmp	r6, lr
 8017852:	46f4      	mov	ip, lr
 8017854:	d815      	bhi.n	8017882 <rshift+0x7e>
 8017856:	1a9a      	subs	r2, r3, r2
 8017858:	0092      	lsls	r2, r2, #2
 801785a:	3a04      	subs	r2, #4
 801785c:	3501      	adds	r5, #1
 801785e:	42ae      	cmp	r6, r5
 8017860:	bf38      	it	cc
 8017862:	2200      	movcc	r2, #0
 8017864:	18a3      	adds	r3, r4, r2
 8017866:	50a7      	str	r7, [r4, r2]
 8017868:	b107      	cbz	r7, 801786c <rshift+0x68>
 801786a:	3304      	adds	r3, #4
 801786c:	1b1a      	subs	r2, r3, r4
 801786e:	42a3      	cmp	r3, r4
 8017870:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017874:	bf08      	it	eq
 8017876:	2300      	moveq	r3, #0
 8017878:	6102      	str	r2, [r0, #16]
 801787a:	bf08      	it	eq
 801787c:	6143      	streq	r3, [r0, #20]
 801787e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017882:	f8dc c000 	ldr.w	ip, [ip]
 8017886:	fa0c fc08 	lsl.w	ip, ip, r8
 801788a:	ea4c 0707 	orr.w	r7, ip, r7
 801788e:	f849 7b04 	str.w	r7, [r9], #4
 8017892:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017896:	40cf      	lsrs	r7, r1
 8017898:	e7da      	b.n	8017850 <rshift+0x4c>
 801789a:	f851 cb04 	ldr.w	ip, [r1], #4
 801789e:	f847 cf04 	str.w	ip, [r7, #4]!
 80178a2:	e7c3      	b.n	801782c <rshift+0x28>
 80178a4:	4623      	mov	r3, r4
 80178a6:	e7e1      	b.n	801786c <rshift+0x68>

080178a8 <__hexdig_fun>:
 80178a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80178ac:	2b09      	cmp	r3, #9
 80178ae:	d802      	bhi.n	80178b6 <__hexdig_fun+0xe>
 80178b0:	3820      	subs	r0, #32
 80178b2:	b2c0      	uxtb	r0, r0
 80178b4:	4770      	bx	lr
 80178b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80178ba:	2b05      	cmp	r3, #5
 80178bc:	d801      	bhi.n	80178c2 <__hexdig_fun+0x1a>
 80178be:	3847      	subs	r0, #71	@ 0x47
 80178c0:	e7f7      	b.n	80178b2 <__hexdig_fun+0xa>
 80178c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80178c6:	2b05      	cmp	r3, #5
 80178c8:	d801      	bhi.n	80178ce <__hexdig_fun+0x26>
 80178ca:	3827      	subs	r0, #39	@ 0x27
 80178cc:	e7f1      	b.n	80178b2 <__hexdig_fun+0xa>
 80178ce:	2000      	movs	r0, #0
 80178d0:	4770      	bx	lr
	...

080178d4 <__gethex>:
 80178d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d8:	b085      	sub	sp, #20
 80178da:	468a      	mov	sl, r1
 80178dc:	9302      	str	r3, [sp, #8]
 80178de:	680b      	ldr	r3, [r1, #0]
 80178e0:	9001      	str	r0, [sp, #4]
 80178e2:	4690      	mov	r8, r2
 80178e4:	1c9c      	adds	r4, r3, #2
 80178e6:	46a1      	mov	r9, r4
 80178e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80178ec:	2830      	cmp	r0, #48	@ 0x30
 80178ee:	d0fa      	beq.n	80178e6 <__gethex+0x12>
 80178f0:	eba9 0303 	sub.w	r3, r9, r3
 80178f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80178f8:	f7ff ffd6 	bl	80178a8 <__hexdig_fun>
 80178fc:	4605      	mov	r5, r0
 80178fe:	2800      	cmp	r0, #0
 8017900:	d168      	bne.n	80179d4 <__gethex+0x100>
 8017902:	49a0      	ldr	r1, [pc, #640]	@ (8017b84 <__gethex+0x2b0>)
 8017904:	2201      	movs	r2, #1
 8017906:	4648      	mov	r0, r9
 8017908:	f7ff ff1e 	bl	8017748 <strncmp>
 801790c:	4607      	mov	r7, r0
 801790e:	2800      	cmp	r0, #0
 8017910:	d167      	bne.n	80179e2 <__gethex+0x10e>
 8017912:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017916:	4626      	mov	r6, r4
 8017918:	f7ff ffc6 	bl	80178a8 <__hexdig_fun>
 801791c:	2800      	cmp	r0, #0
 801791e:	d062      	beq.n	80179e6 <__gethex+0x112>
 8017920:	4623      	mov	r3, r4
 8017922:	7818      	ldrb	r0, [r3, #0]
 8017924:	2830      	cmp	r0, #48	@ 0x30
 8017926:	4699      	mov	r9, r3
 8017928:	f103 0301 	add.w	r3, r3, #1
 801792c:	d0f9      	beq.n	8017922 <__gethex+0x4e>
 801792e:	f7ff ffbb 	bl	80178a8 <__hexdig_fun>
 8017932:	fab0 f580 	clz	r5, r0
 8017936:	096d      	lsrs	r5, r5, #5
 8017938:	f04f 0b01 	mov.w	fp, #1
 801793c:	464a      	mov	r2, r9
 801793e:	4616      	mov	r6, r2
 8017940:	3201      	adds	r2, #1
 8017942:	7830      	ldrb	r0, [r6, #0]
 8017944:	f7ff ffb0 	bl	80178a8 <__hexdig_fun>
 8017948:	2800      	cmp	r0, #0
 801794a:	d1f8      	bne.n	801793e <__gethex+0x6a>
 801794c:	498d      	ldr	r1, [pc, #564]	@ (8017b84 <__gethex+0x2b0>)
 801794e:	2201      	movs	r2, #1
 8017950:	4630      	mov	r0, r6
 8017952:	f7ff fef9 	bl	8017748 <strncmp>
 8017956:	2800      	cmp	r0, #0
 8017958:	d13f      	bne.n	80179da <__gethex+0x106>
 801795a:	b944      	cbnz	r4, 801796e <__gethex+0x9a>
 801795c:	1c74      	adds	r4, r6, #1
 801795e:	4622      	mov	r2, r4
 8017960:	4616      	mov	r6, r2
 8017962:	3201      	adds	r2, #1
 8017964:	7830      	ldrb	r0, [r6, #0]
 8017966:	f7ff ff9f 	bl	80178a8 <__hexdig_fun>
 801796a:	2800      	cmp	r0, #0
 801796c:	d1f8      	bne.n	8017960 <__gethex+0x8c>
 801796e:	1ba4      	subs	r4, r4, r6
 8017970:	00a7      	lsls	r7, r4, #2
 8017972:	7833      	ldrb	r3, [r6, #0]
 8017974:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017978:	2b50      	cmp	r3, #80	@ 0x50
 801797a:	d13e      	bne.n	80179fa <__gethex+0x126>
 801797c:	7873      	ldrb	r3, [r6, #1]
 801797e:	2b2b      	cmp	r3, #43	@ 0x2b
 8017980:	d033      	beq.n	80179ea <__gethex+0x116>
 8017982:	2b2d      	cmp	r3, #45	@ 0x2d
 8017984:	d034      	beq.n	80179f0 <__gethex+0x11c>
 8017986:	1c71      	adds	r1, r6, #1
 8017988:	2400      	movs	r4, #0
 801798a:	7808      	ldrb	r0, [r1, #0]
 801798c:	f7ff ff8c 	bl	80178a8 <__hexdig_fun>
 8017990:	1e43      	subs	r3, r0, #1
 8017992:	b2db      	uxtb	r3, r3
 8017994:	2b18      	cmp	r3, #24
 8017996:	d830      	bhi.n	80179fa <__gethex+0x126>
 8017998:	f1a0 0210 	sub.w	r2, r0, #16
 801799c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179a0:	f7ff ff82 	bl	80178a8 <__hexdig_fun>
 80179a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80179a8:	fa5f fc8c 	uxtb.w	ip, ip
 80179ac:	f1bc 0f18 	cmp.w	ip, #24
 80179b0:	f04f 030a 	mov.w	r3, #10
 80179b4:	d91e      	bls.n	80179f4 <__gethex+0x120>
 80179b6:	b104      	cbz	r4, 80179ba <__gethex+0xe6>
 80179b8:	4252      	negs	r2, r2
 80179ba:	4417      	add	r7, r2
 80179bc:	f8ca 1000 	str.w	r1, [sl]
 80179c0:	b1ed      	cbz	r5, 80179fe <__gethex+0x12a>
 80179c2:	f1bb 0f00 	cmp.w	fp, #0
 80179c6:	bf0c      	ite	eq
 80179c8:	2506      	moveq	r5, #6
 80179ca:	2500      	movne	r5, #0
 80179cc:	4628      	mov	r0, r5
 80179ce:	b005      	add	sp, #20
 80179d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d4:	2500      	movs	r5, #0
 80179d6:	462c      	mov	r4, r5
 80179d8:	e7b0      	b.n	801793c <__gethex+0x68>
 80179da:	2c00      	cmp	r4, #0
 80179dc:	d1c7      	bne.n	801796e <__gethex+0x9a>
 80179de:	4627      	mov	r7, r4
 80179e0:	e7c7      	b.n	8017972 <__gethex+0x9e>
 80179e2:	464e      	mov	r6, r9
 80179e4:	462f      	mov	r7, r5
 80179e6:	2501      	movs	r5, #1
 80179e8:	e7c3      	b.n	8017972 <__gethex+0x9e>
 80179ea:	2400      	movs	r4, #0
 80179ec:	1cb1      	adds	r1, r6, #2
 80179ee:	e7cc      	b.n	801798a <__gethex+0xb6>
 80179f0:	2401      	movs	r4, #1
 80179f2:	e7fb      	b.n	80179ec <__gethex+0x118>
 80179f4:	fb03 0002 	mla	r0, r3, r2, r0
 80179f8:	e7ce      	b.n	8017998 <__gethex+0xc4>
 80179fa:	4631      	mov	r1, r6
 80179fc:	e7de      	b.n	80179bc <__gethex+0xe8>
 80179fe:	eba6 0309 	sub.w	r3, r6, r9
 8017a02:	3b01      	subs	r3, #1
 8017a04:	4629      	mov	r1, r5
 8017a06:	2b07      	cmp	r3, #7
 8017a08:	dc0a      	bgt.n	8017a20 <__gethex+0x14c>
 8017a0a:	9801      	ldr	r0, [sp, #4]
 8017a0c:	f7fe f950 	bl	8015cb0 <_Balloc>
 8017a10:	4604      	mov	r4, r0
 8017a12:	b940      	cbnz	r0, 8017a26 <__gethex+0x152>
 8017a14:	4b5c      	ldr	r3, [pc, #368]	@ (8017b88 <__gethex+0x2b4>)
 8017a16:	4602      	mov	r2, r0
 8017a18:	21e4      	movs	r1, #228	@ 0xe4
 8017a1a:	485c      	ldr	r0, [pc, #368]	@ (8017b8c <__gethex+0x2b8>)
 8017a1c:	f7ff fec0 	bl	80177a0 <__assert_func>
 8017a20:	3101      	adds	r1, #1
 8017a22:	105b      	asrs	r3, r3, #1
 8017a24:	e7ef      	b.n	8017a06 <__gethex+0x132>
 8017a26:	f100 0a14 	add.w	sl, r0, #20
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	4655      	mov	r5, sl
 8017a2e:	469b      	mov	fp, r3
 8017a30:	45b1      	cmp	r9, r6
 8017a32:	d337      	bcc.n	8017aa4 <__gethex+0x1d0>
 8017a34:	f845 bb04 	str.w	fp, [r5], #4
 8017a38:	eba5 050a 	sub.w	r5, r5, sl
 8017a3c:	10ad      	asrs	r5, r5, #2
 8017a3e:	6125      	str	r5, [r4, #16]
 8017a40:	4658      	mov	r0, fp
 8017a42:	f7fe fa27 	bl	8015e94 <__hi0bits>
 8017a46:	016d      	lsls	r5, r5, #5
 8017a48:	f8d8 6000 	ldr.w	r6, [r8]
 8017a4c:	1a2d      	subs	r5, r5, r0
 8017a4e:	42b5      	cmp	r5, r6
 8017a50:	dd54      	ble.n	8017afc <__gethex+0x228>
 8017a52:	1bad      	subs	r5, r5, r6
 8017a54:	4629      	mov	r1, r5
 8017a56:	4620      	mov	r0, r4
 8017a58:	f7fe fdb3 	bl	80165c2 <__any_on>
 8017a5c:	4681      	mov	r9, r0
 8017a5e:	b178      	cbz	r0, 8017a80 <__gethex+0x1ac>
 8017a60:	1e6b      	subs	r3, r5, #1
 8017a62:	1159      	asrs	r1, r3, #5
 8017a64:	f003 021f 	and.w	r2, r3, #31
 8017a68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017a6c:	f04f 0901 	mov.w	r9, #1
 8017a70:	fa09 f202 	lsl.w	r2, r9, r2
 8017a74:	420a      	tst	r2, r1
 8017a76:	d003      	beq.n	8017a80 <__gethex+0x1ac>
 8017a78:	454b      	cmp	r3, r9
 8017a7a:	dc36      	bgt.n	8017aea <__gethex+0x216>
 8017a7c:	f04f 0902 	mov.w	r9, #2
 8017a80:	4629      	mov	r1, r5
 8017a82:	4620      	mov	r0, r4
 8017a84:	f7ff febe 	bl	8017804 <rshift>
 8017a88:	442f      	add	r7, r5
 8017a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a8e:	42bb      	cmp	r3, r7
 8017a90:	da42      	bge.n	8017b18 <__gethex+0x244>
 8017a92:	9801      	ldr	r0, [sp, #4]
 8017a94:	4621      	mov	r1, r4
 8017a96:	f7fe f94b 	bl	8015d30 <_Bfree>
 8017a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	6013      	str	r3, [r2, #0]
 8017aa0:	25a3      	movs	r5, #163	@ 0xa3
 8017aa2:	e793      	b.n	80179cc <__gethex+0xf8>
 8017aa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017aa8:	2a2e      	cmp	r2, #46	@ 0x2e
 8017aaa:	d012      	beq.n	8017ad2 <__gethex+0x1fe>
 8017aac:	2b20      	cmp	r3, #32
 8017aae:	d104      	bne.n	8017aba <__gethex+0x1e6>
 8017ab0:	f845 bb04 	str.w	fp, [r5], #4
 8017ab4:	f04f 0b00 	mov.w	fp, #0
 8017ab8:	465b      	mov	r3, fp
 8017aba:	7830      	ldrb	r0, [r6, #0]
 8017abc:	9303      	str	r3, [sp, #12]
 8017abe:	f7ff fef3 	bl	80178a8 <__hexdig_fun>
 8017ac2:	9b03      	ldr	r3, [sp, #12]
 8017ac4:	f000 000f 	and.w	r0, r0, #15
 8017ac8:	4098      	lsls	r0, r3
 8017aca:	ea4b 0b00 	orr.w	fp, fp, r0
 8017ace:	3304      	adds	r3, #4
 8017ad0:	e7ae      	b.n	8017a30 <__gethex+0x15c>
 8017ad2:	45b1      	cmp	r9, r6
 8017ad4:	d8ea      	bhi.n	8017aac <__gethex+0x1d8>
 8017ad6:	492b      	ldr	r1, [pc, #172]	@ (8017b84 <__gethex+0x2b0>)
 8017ad8:	9303      	str	r3, [sp, #12]
 8017ada:	2201      	movs	r2, #1
 8017adc:	4630      	mov	r0, r6
 8017ade:	f7ff fe33 	bl	8017748 <strncmp>
 8017ae2:	9b03      	ldr	r3, [sp, #12]
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d1e1      	bne.n	8017aac <__gethex+0x1d8>
 8017ae8:	e7a2      	b.n	8017a30 <__gethex+0x15c>
 8017aea:	1ea9      	subs	r1, r5, #2
 8017aec:	4620      	mov	r0, r4
 8017aee:	f7fe fd68 	bl	80165c2 <__any_on>
 8017af2:	2800      	cmp	r0, #0
 8017af4:	d0c2      	beq.n	8017a7c <__gethex+0x1a8>
 8017af6:	f04f 0903 	mov.w	r9, #3
 8017afa:	e7c1      	b.n	8017a80 <__gethex+0x1ac>
 8017afc:	da09      	bge.n	8017b12 <__gethex+0x23e>
 8017afe:	1b75      	subs	r5, r6, r5
 8017b00:	4621      	mov	r1, r4
 8017b02:	9801      	ldr	r0, [sp, #4]
 8017b04:	462a      	mov	r2, r5
 8017b06:	f7fe fb23 	bl	8016150 <__lshift>
 8017b0a:	1b7f      	subs	r7, r7, r5
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	f100 0a14 	add.w	sl, r0, #20
 8017b12:	f04f 0900 	mov.w	r9, #0
 8017b16:	e7b8      	b.n	8017a8a <__gethex+0x1b6>
 8017b18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017b1c:	42bd      	cmp	r5, r7
 8017b1e:	dd6f      	ble.n	8017c00 <__gethex+0x32c>
 8017b20:	1bed      	subs	r5, r5, r7
 8017b22:	42ae      	cmp	r6, r5
 8017b24:	dc34      	bgt.n	8017b90 <__gethex+0x2bc>
 8017b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b2a:	2b02      	cmp	r3, #2
 8017b2c:	d022      	beq.n	8017b74 <__gethex+0x2a0>
 8017b2e:	2b03      	cmp	r3, #3
 8017b30:	d024      	beq.n	8017b7c <__gethex+0x2a8>
 8017b32:	2b01      	cmp	r3, #1
 8017b34:	d115      	bne.n	8017b62 <__gethex+0x28e>
 8017b36:	42ae      	cmp	r6, r5
 8017b38:	d113      	bne.n	8017b62 <__gethex+0x28e>
 8017b3a:	2e01      	cmp	r6, #1
 8017b3c:	d10b      	bne.n	8017b56 <__gethex+0x282>
 8017b3e:	9a02      	ldr	r2, [sp, #8]
 8017b40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	2301      	movs	r3, #1
 8017b48:	6123      	str	r3, [r4, #16]
 8017b4a:	f8ca 3000 	str.w	r3, [sl]
 8017b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b50:	2562      	movs	r5, #98	@ 0x62
 8017b52:	601c      	str	r4, [r3, #0]
 8017b54:	e73a      	b.n	80179cc <__gethex+0xf8>
 8017b56:	1e71      	subs	r1, r6, #1
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f7fe fd32 	bl	80165c2 <__any_on>
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	d1ed      	bne.n	8017b3e <__gethex+0x26a>
 8017b62:	9801      	ldr	r0, [sp, #4]
 8017b64:	4621      	mov	r1, r4
 8017b66:	f7fe f8e3 	bl	8015d30 <_Bfree>
 8017b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	6013      	str	r3, [r2, #0]
 8017b70:	2550      	movs	r5, #80	@ 0x50
 8017b72:	e72b      	b.n	80179cc <__gethex+0xf8>
 8017b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d1f3      	bne.n	8017b62 <__gethex+0x28e>
 8017b7a:	e7e0      	b.n	8017b3e <__gethex+0x26a>
 8017b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d1dd      	bne.n	8017b3e <__gethex+0x26a>
 8017b82:	e7ee      	b.n	8017b62 <__gethex+0x28e>
 8017b84:	0801b053 	.word	0x0801b053
 8017b88:	0801afe9 	.word	0x0801afe9
 8017b8c:	0801b0aa 	.word	0x0801b0aa
 8017b90:	1e6f      	subs	r7, r5, #1
 8017b92:	f1b9 0f00 	cmp.w	r9, #0
 8017b96:	d130      	bne.n	8017bfa <__gethex+0x326>
 8017b98:	b127      	cbz	r7, 8017ba4 <__gethex+0x2d0>
 8017b9a:	4639      	mov	r1, r7
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7fe fd10 	bl	80165c2 <__any_on>
 8017ba2:	4681      	mov	r9, r0
 8017ba4:	117a      	asrs	r2, r7, #5
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017bac:	f007 071f 	and.w	r7, r7, #31
 8017bb0:	40bb      	lsls	r3, r7
 8017bb2:	4213      	tst	r3, r2
 8017bb4:	4629      	mov	r1, r5
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	bf18      	it	ne
 8017bba:	f049 0902 	orrne.w	r9, r9, #2
 8017bbe:	f7ff fe21 	bl	8017804 <rshift>
 8017bc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017bc6:	1b76      	subs	r6, r6, r5
 8017bc8:	2502      	movs	r5, #2
 8017bca:	f1b9 0f00 	cmp.w	r9, #0
 8017bce:	d047      	beq.n	8017c60 <__gethex+0x38c>
 8017bd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bd4:	2b02      	cmp	r3, #2
 8017bd6:	d015      	beq.n	8017c04 <__gethex+0x330>
 8017bd8:	2b03      	cmp	r3, #3
 8017bda:	d017      	beq.n	8017c0c <__gethex+0x338>
 8017bdc:	2b01      	cmp	r3, #1
 8017bde:	d109      	bne.n	8017bf4 <__gethex+0x320>
 8017be0:	f019 0f02 	tst.w	r9, #2
 8017be4:	d006      	beq.n	8017bf4 <__gethex+0x320>
 8017be6:	f8da 3000 	ldr.w	r3, [sl]
 8017bea:	ea49 0903 	orr.w	r9, r9, r3
 8017bee:	f019 0f01 	tst.w	r9, #1
 8017bf2:	d10e      	bne.n	8017c12 <__gethex+0x33e>
 8017bf4:	f045 0510 	orr.w	r5, r5, #16
 8017bf8:	e032      	b.n	8017c60 <__gethex+0x38c>
 8017bfa:	f04f 0901 	mov.w	r9, #1
 8017bfe:	e7d1      	b.n	8017ba4 <__gethex+0x2d0>
 8017c00:	2501      	movs	r5, #1
 8017c02:	e7e2      	b.n	8017bca <__gethex+0x2f6>
 8017c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c06:	f1c3 0301 	rsb	r3, r3, #1
 8017c0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d0f0      	beq.n	8017bf4 <__gethex+0x320>
 8017c12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017c16:	f104 0314 	add.w	r3, r4, #20
 8017c1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017c1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017c22:	f04f 0c00 	mov.w	ip, #0
 8017c26:	4618      	mov	r0, r3
 8017c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c30:	d01b      	beq.n	8017c6a <__gethex+0x396>
 8017c32:	3201      	adds	r2, #1
 8017c34:	6002      	str	r2, [r0, #0]
 8017c36:	2d02      	cmp	r5, #2
 8017c38:	f104 0314 	add.w	r3, r4, #20
 8017c3c:	d13c      	bne.n	8017cb8 <__gethex+0x3e4>
 8017c3e:	f8d8 2000 	ldr.w	r2, [r8]
 8017c42:	3a01      	subs	r2, #1
 8017c44:	42b2      	cmp	r2, r6
 8017c46:	d109      	bne.n	8017c5c <__gethex+0x388>
 8017c48:	1171      	asrs	r1, r6, #5
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017c50:	f006 061f 	and.w	r6, r6, #31
 8017c54:	fa02 f606 	lsl.w	r6, r2, r6
 8017c58:	421e      	tst	r6, r3
 8017c5a:	d13a      	bne.n	8017cd2 <__gethex+0x3fe>
 8017c5c:	f045 0520 	orr.w	r5, r5, #32
 8017c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c62:	601c      	str	r4, [r3, #0]
 8017c64:	9b02      	ldr	r3, [sp, #8]
 8017c66:	601f      	str	r7, [r3, #0]
 8017c68:	e6b0      	b.n	80179cc <__gethex+0xf8>
 8017c6a:	4299      	cmp	r1, r3
 8017c6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c70:	d8d9      	bhi.n	8017c26 <__gethex+0x352>
 8017c72:	68a3      	ldr	r3, [r4, #8]
 8017c74:	459b      	cmp	fp, r3
 8017c76:	db17      	blt.n	8017ca8 <__gethex+0x3d4>
 8017c78:	6861      	ldr	r1, [r4, #4]
 8017c7a:	9801      	ldr	r0, [sp, #4]
 8017c7c:	3101      	adds	r1, #1
 8017c7e:	f7fe f817 	bl	8015cb0 <_Balloc>
 8017c82:	4681      	mov	r9, r0
 8017c84:	b918      	cbnz	r0, 8017c8e <__gethex+0x3ba>
 8017c86:	4b1a      	ldr	r3, [pc, #104]	@ (8017cf0 <__gethex+0x41c>)
 8017c88:	4602      	mov	r2, r0
 8017c8a:	2184      	movs	r1, #132	@ 0x84
 8017c8c:	e6c5      	b.n	8017a1a <__gethex+0x146>
 8017c8e:	6922      	ldr	r2, [r4, #16]
 8017c90:	3202      	adds	r2, #2
 8017c92:	f104 010c 	add.w	r1, r4, #12
 8017c96:	0092      	lsls	r2, r2, #2
 8017c98:	300c      	adds	r0, #12
 8017c9a:	f7fd f89c 	bl	8014dd6 <memcpy>
 8017c9e:	4621      	mov	r1, r4
 8017ca0:	9801      	ldr	r0, [sp, #4]
 8017ca2:	f7fe f845 	bl	8015d30 <_Bfree>
 8017ca6:	464c      	mov	r4, r9
 8017ca8:	6923      	ldr	r3, [r4, #16]
 8017caa:	1c5a      	adds	r2, r3, #1
 8017cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017cb0:	6122      	str	r2, [r4, #16]
 8017cb2:	2201      	movs	r2, #1
 8017cb4:	615a      	str	r2, [r3, #20]
 8017cb6:	e7be      	b.n	8017c36 <__gethex+0x362>
 8017cb8:	6922      	ldr	r2, [r4, #16]
 8017cba:	455a      	cmp	r2, fp
 8017cbc:	dd0b      	ble.n	8017cd6 <__gethex+0x402>
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7ff fd9f 	bl	8017804 <rshift>
 8017cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017cca:	3701      	adds	r7, #1
 8017ccc:	42bb      	cmp	r3, r7
 8017cce:	f6ff aee0 	blt.w	8017a92 <__gethex+0x1be>
 8017cd2:	2501      	movs	r5, #1
 8017cd4:	e7c2      	b.n	8017c5c <__gethex+0x388>
 8017cd6:	f016 061f 	ands.w	r6, r6, #31
 8017cda:	d0fa      	beq.n	8017cd2 <__gethex+0x3fe>
 8017cdc:	4453      	add	r3, sl
 8017cde:	f1c6 0620 	rsb	r6, r6, #32
 8017ce2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017ce6:	f7fe f8d5 	bl	8015e94 <__hi0bits>
 8017cea:	42b0      	cmp	r0, r6
 8017cec:	dbe7      	blt.n	8017cbe <__gethex+0x3ea>
 8017cee:	e7f0      	b.n	8017cd2 <__gethex+0x3fe>
 8017cf0:	0801afe9 	.word	0x0801afe9

08017cf4 <L_shift>:
 8017cf4:	f1c2 0208 	rsb	r2, r2, #8
 8017cf8:	0092      	lsls	r2, r2, #2
 8017cfa:	b570      	push	{r4, r5, r6, lr}
 8017cfc:	f1c2 0620 	rsb	r6, r2, #32
 8017d00:	6843      	ldr	r3, [r0, #4]
 8017d02:	6804      	ldr	r4, [r0, #0]
 8017d04:	fa03 f506 	lsl.w	r5, r3, r6
 8017d08:	432c      	orrs	r4, r5
 8017d0a:	40d3      	lsrs	r3, r2
 8017d0c:	6004      	str	r4, [r0, #0]
 8017d0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d12:	4288      	cmp	r0, r1
 8017d14:	d3f4      	bcc.n	8017d00 <L_shift+0xc>
 8017d16:	bd70      	pop	{r4, r5, r6, pc}

08017d18 <__match>:
 8017d18:	b530      	push	{r4, r5, lr}
 8017d1a:	6803      	ldr	r3, [r0, #0]
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d22:	b914      	cbnz	r4, 8017d2a <__match+0x12>
 8017d24:	6003      	str	r3, [r0, #0]
 8017d26:	2001      	movs	r0, #1
 8017d28:	bd30      	pop	{r4, r5, pc}
 8017d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017d32:	2d19      	cmp	r5, #25
 8017d34:	bf98      	it	ls
 8017d36:	3220      	addls	r2, #32
 8017d38:	42a2      	cmp	r2, r4
 8017d3a:	d0f0      	beq.n	8017d1e <__match+0x6>
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	e7f3      	b.n	8017d28 <__match+0x10>

08017d40 <__hexnan>:
 8017d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d44:	680b      	ldr	r3, [r1, #0]
 8017d46:	6801      	ldr	r1, [r0, #0]
 8017d48:	115e      	asrs	r6, r3, #5
 8017d4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017d4e:	f013 031f 	ands.w	r3, r3, #31
 8017d52:	b087      	sub	sp, #28
 8017d54:	bf18      	it	ne
 8017d56:	3604      	addne	r6, #4
 8017d58:	2500      	movs	r5, #0
 8017d5a:	1f37      	subs	r7, r6, #4
 8017d5c:	4682      	mov	sl, r0
 8017d5e:	4690      	mov	r8, r2
 8017d60:	9301      	str	r3, [sp, #4]
 8017d62:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d66:	46b9      	mov	r9, r7
 8017d68:	463c      	mov	r4, r7
 8017d6a:	9502      	str	r5, [sp, #8]
 8017d6c:	46ab      	mov	fp, r5
 8017d6e:	784a      	ldrb	r2, [r1, #1]
 8017d70:	1c4b      	adds	r3, r1, #1
 8017d72:	9303      	str	r3, [sp, #12]
 8017d74:	b342      	cbz	r2, 8017dc8 <__hexnan+0x88>
 8017d76:	4610      	mov	r0, r2
 8017d78:	9105      	str	r1, [sp, #20]
 8017d7a:	9204      	str	r2, [sp, #16]
 8017d7c:	f7ff fd94 	bl	80178a8 <__hexdig_fun>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d151      	bne.n	8017e28 <__hexnan+0xe8>
 8017d84:	9a04      	ldr	r2, [sp, #16]
 8017d86:	9905      	ldr	r1, [sp, #20]
 8017d88:	2a20      	cmp	r2, #32
 8017d8a:	d818      	bhi.n	8017dbe <__hexnan+0x7e>
 8017d8c:	9b02      	ldr	r3, [sp, #8]
 8017d8e:	459b      	cmp	fp, r3
 8017d90:	dd13      	ble.n	8017dba <__hexnan+0x7a>
 8017d92:	454c      	cmp	r4, r9
 8017d94:	d206      	bcs.n	8017da4 <__hexnan+0x64>
 8017d96:	2d07      	cmp	r5, #7
 8017d98:	dc04      	bgt.n	8017da4 <__hexnan+0x64>
 8017d9a:	462a      	mov	r2, r5
 8017d9c:	4649      	mov	r1, r9
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f7ff ffa8 	bl	8017cf4 <L_shift>
 8017da4:	4544      	cmp	r4, r8
 8017da6:	d952      	bls.n	8017e4e <__hexnan+0x10e>
 8017da8:	2300      	movs	r3, #0
 8017daa:	f1a4 0904 	sub.w	r9, r4, #4
 8017dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8017db2:	f8cd b008 	str.w	fp, [sp, #8]
 8017db6:	464c      	mov	r4, r9
 8017db8:	461d      	mov	r5, r3
 8017dba:	9903      	ldr	r1, [sp, #12]
 8017dbc:	e7d7      	b.n	8017d6e <__hexnan+0x2e>
 8017dbe:	2a29      	cmp	r2, #41	@ 0x29
 8017dc0:	d157      	bne.n	8017e72 <__hexnan+0x132>
 8017dc2:	3102      	adds	r1, #2
 8017dc4:	f8ca 1000 	str.w	r1, [sl]
 8017dc8:	f1bb 0f00 	cmp.w	fp, #0
 8017dcc:	d051      	beq.n	8017e72 <__hexnan+0x132>
 8017dce:	454c      	cmp	r4, r9
 8017dd0:	d206      	bcs.n	8017de0 <__hexnan+0xa0>
 8017dd2:	2d07      	cmp	r5, #7
 8017dd4:	dc04      	bgt.n	8017de0 <__hexnan+0xa0>
 8017dd6:	462a      	mov	r2, r5
 8017dd8:	4649      	mov	r1, r9
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f7ff ff8a 	bl	8017cf4 <L_shift>
 8017de0:	4544      	cmp	r4, r8
 8017de2:	d936      	bls.n	8017e52 <__hexnan+0x112>
 8017de4:	f1a8 0204 	sub.w	r2, r8, #4
 8017de8:	4623      	mov	r3, r4
 8017dea:	f853 1b04 	ldr.w	r1, [r3], #4
 8017dee:	f842 1f04 	str.w	r1, [r2, #4]!
 8017df2:	429f      	cmp	r7, r3
 8017df4:	d2f9      	bcs.n	8017dea <__hexnan+0xaa>
 8017df6:	1b3b      	subs	r3, r7, r4
 8017df8:	f023 0303 	bic.w	r3, r3, #3
 8017dfc:	3304      	adds	r3, #4
 8017dfe:	3401      	adds	r4, #1
 8017e00:	3e03      	subs	r6, #3
 8017e02:	42b4      	cmp	r4, r6
 8017e04:	bf88      	it	hi
 8017e06:	2304      	movhi	r3, #4
 8017e08:	4443      	add	r3, r8
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	f843 2b04 	str.w	r2, [r3], #4
 8017e10:	429f      	cmp	r7, r3
 8017e12:	d2fb      	bcs.n	8017e0c <__hexnan+0xcc>
 8017e14:	683b      	ldr	r3, [r7, #0]
 8017e16:	b91b      	cbnz	r3, 8017e20 <__hexnan+0xe0>
 8017e18:	4547      	cmp	r7, r8
 8017e1a:	d128      	bne.n	8017e6e <__hexnan+0x12e>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	603b      	str	r3, [r7, #0]
 8017e20:	2005      	movs	r0, #5
 8017e22:	b007      	add	sp, #28
 8017e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e28:	3501      	adds	r5, #1
 8017e2a:	2d08      	cmp	r5, #8
 8017e2c:	f10b 0b01 	add.w	fp, fp, #1
 8017e30:	dd06      	ble.n	8017e40 <__hexnan+0x100>
 8017e32:	4544      	cmp	r4, r8
 8017e34:	d9c1      	bls.n	8017dba <__hexnan+0x7a>
 8017e36:	2300      	movs	r3, #0
 8017e38:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e3c:	2501      	movs	r5, #1
 8017e3e:	3c04      	subs	r4, #4
 8017e40:	6822      	ldr	r2, [r4, #0]
 8017e42:	f000 000f 	and.w	r0, r0, #15
 8017e46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e4a:	6020      	str	r0, [r4, #0]
 8017e4c:	e7b5      	b.n	8017dba <__hexnan+0x7a>
 8017e4e:	2508      	movs	r5, #8
 8017e50:	e7b3      	b.n	8017dba <__hexnan+0x7a>
 8017e52:	9b01      	ldr	r3, [sp, #4]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d0dd      	beq.n	8017e14 <__hexnan+0xd4>
 8017e58:	f1c3 0320 	rsb	r3, r3, #32
 8017e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e60:	40da      	lsrs	r2, r3
 8017e62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017e66:	4013      	ands	r3, r2
 8017e68:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e6c:	e7d2      	b.n	8017e14 <__hexnan+0xd4>
 8017e6e:	3f04      	subs	r7, #4
 8017e70:	e7d0      	b.n	8017e14 <__hexnan+0xd4>
 8017e72:	2004      	movs	r0, #4
 8017e74:	e7d5      	b.n	8017e22 <__hexnan+0xe2>

08017e76 <__ascii_mbtowc>:
 8017e76:	b082      	sub	sp, #8
 8017e78:	b901      	cbnz	r1, 8017e7c <__ascii_mbtowc+0x6>
 8017e7a:	a901      	add	r1, sp, #4
 8017e7c:	b142      	cbz	r2, 8017e90 <__ascii_mbtowc+0x1a>
 8017e7e:	b14b      	cbz	r3, 8017e94 <__ascii_mbtowc+0x1e>
 8017e80:	7813      	ldrb	r3, [r2, #0]
 8017e82:	600b      	str	r3, [r1, #0]
 8017e84:	7812      	ldrb	r2, [r2, #0]
 8017e86:	1e10      	subs	r0, r2, #0
 8017e88:	bf18      	it	ne
 8017e8a:	2001      	movne	r0, #1
 8017e8c:	b002      	add	sp, #8
 8017e8e:	4770      	bx	lr
 8017e90:	4610      	mov	r0, r2
 8017e92:	e7fb      	b.n	8017e8c <__ascii_mbtowc+0x16>
 8017e94:	f06f 0001 	mvn.w	r0, #1
 8017e98:	e7f8      	b.n	8017e8c <__ascii_mbtowc+0x16>

08017e9a <_realloc_r>:
 8017e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e9e:	4607      	mov	r7, r0
 8017ea0:	4614      	mov	r4, r2
 8017ea2:	460d      	mov	r5, r1
 8017ea4:	b921      	cbnz	r1, 8017eb0 <_realloc_r+0x16>
 8017ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017eaa:	4611      	mov	r1, r2
 8017eac:	f7fd be74 	b.w	8015b98 <_malloc_r>
 8017eb0:	b92a      	cbnz	r2, 8017ebe <_realloc_r+0x24>
 8017eb2:	f7fd fdfd 	bl	8015ab0 <_free_r>
 8017eb6:	4625      	mov	r5, r4
 8017eb8:	4628      	mov	r0, r5
 8017eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ebe:	f000 f840 	bl	8017f42 <_malloc_usable_size_r>
 8017ec2:	4284      	cmp	r4, r0
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	d802      	bhi.n	8017ece <_realloc_r+0x34>
 8017ec8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ecc:	d8f4      	bhi.n	8017eb8 <_realloc_r+0x1e>
 8017ece:	4621      	mov	r1, r4
 8017ed0:	4638      	mov	r0, r7
 8017ed2:	f7fd fe61 	bl	8015b98 <_malloc_r>
 8017ed6:	4680      	mov	r8, r0
 8017ed8:	b908      	cbnz	r0, 8017ede <_realloc_r+0x44>
 8017eda:	4645      	mov	r5, r8
 8017edc:	e7ec      	b.n	8017eb8 <_realloc_r+0x1e>
 8017ede:	42b4      	cmp	r4, r6
 8017ee0:	4622      	mov	r2, r4
 8017ee2:	4629      	mov	r1, r5
 8017ee4:	bf28      	it	cs
 8017ee6:	4632      	movcs	r2, r6
 8017ee8:	f7fc ff75 	bl	8014dd6 <memcpy>
 8017eec:	4629      	mov	r1, r5
 8017eee:	4638      	mov	r0, r7
 8017ef0:	f7fd fdde 	bl	8015ab0 <_free_r>
 8017ef4:	e7f1      	b.n	8017eda <_realloc_r+0x40>

08017ef6 <__ascii_wctomb>:
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	4608      	mov	r0, r1
 8017efa:	b141      	cbz	r1, 8017f0e <__ascii_wctomb+0x18>
 8017efc:	2aff      	cmp	r2, #255	@ 0xff
 8017efe:	d904      	bls.n	8017f0a <__ascii_wctomb+0x14>
 8017f00:	228a      	movs	r2, #138	@ 0x8a
 8017f02:	601a      	str	r2, [r3, #0]
 8017f04:	f04f 30ff 	mov.w	r0, #4294967295
 8017f08:	4770      	bx	lr
 8017f0a:	700a      	strb	r2, [r1, #0]
 8017f0c:	2001      	movs	r0, #1
 8017f0e:	4770      	bx	lr

08017f10 <fiprintf>:
 8017f10:	b40e      	push	{r1, r2, r3}
 8017f12:	b503      	push	{r0, r1, lr}
 8017f14:	4601      	mov	r1, r0
 8017f16:	ab03      	add	r3, sp, #12
 8017f18:	4805      	ldr	r0, [pc, #20]	@ (8017f30 <fiprintf+0x20>)
 8017f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f1e:	6800      	ldr	r0, [r0, #0]
 8017f20:	9301      	str	r3, [sp, #4]
 8017f22:	f000 f83f 	bl	8017fa4 <_vfiprintf_r>
 8017f26:	b002      	add	sp, #8
 8017f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f2c:	b003      	add	sp, #12
 8017f2e:	4770      	bx	lr
 8017f30:	20000054 	.word	0x20000054

08017f34 <abort>:
 8017f34:	b508      	push	{r3, lr}
 8017f36:	2006      	movs	r0, #6
 8017f38:	f000 fa08 	bl	801834c <raise>
 8017f3c:	2001      	movs	r0, #1
 8017f3e:	f7ec fa73 	bl	8004428 <_exit>

08017f42 <_malloc_usable_size_r>:
 8017f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f46:	1f18      	subs	r0, r3, #4
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	bfbc      	itt	lt
 8017f4c:	580b      	ldrlt	r3, [r1, r0]
 8017f4e:	18c0      	addlt	r0, r0, r3
 8017f50:	4770      	bx	lr

08017f52 <__sfputc_r>:
 8017f52:	6893      	ldr	r3, [r2, #8]
 8017f54:	3b01      	subs	r3, #1
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	b410      	push	{r4}
 8017f5a:	6093      	str	r3, [r2, #8]
 8017f5c:	da08      	bge.n	8017f70 <__sfputc_r+0x1e>
 8017f5e:	6994      	ldr	r4, [r2, #24]
 8017f60:	42a3      	cmp	r3, r4
 8017f62:	db01      	blt.n	8017f68 <__sfputc_r+0x16>
 8017f64:	290a      	cmp	r1, #10
 8017f66:	d103      	bne.n	8017f70 <__sfputc_r+0x1e>
 8017f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f6c:	f000 b932 	b.w	80181d4 <__swbuf_r>
 8017f70:	6813      	ldr	r3, [r2, #0]
 8017f72:	1c58      	adds	r0, r3, #1
 8017f74:	6010      	str	r0, [r2, #0]
 8017f76:	7019      	strb	r1, [r3, #0]
 8017f78:	4608      	mov	r0, r1
 8017f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f7e:	4770      	bx	lr

08017f80 <__sfputs_r>:
 8017f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f82:	4606      	mov	r6, r0
 8017f84:	460f      	mov	r7, r1
 8017f86:	4614      	mov	r4, r2
 8017f88:	18d5      	adds	r5, r2, r3
 8017f8a:	42ac      	cmp	r4, r5
 8017f8c:	d101      	bne.n	8017f92 <__sfputs_r+0x12>
 8017f8e:	2000      	movs	r0, #0
 8017f90:	e007      	b.n	8017fa2 <__sfputs_r+0x22>
 8017f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f96:	463a      	mov	r2, r7
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f7ff ffda 	bl	8017f52 <__sfputc_r>
 8017f9e:	1c43      	adds	r3, r0, #1
 8017fa0:	d1f3      	bne.n	8017f8a <__sfputs_r+0xa>
 8017fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017fa4 <_vfiprintf_r>:
 8017fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fa8:	460d      	mov	r5, r1
 8017faa:	b09d      	sub	sp, #116	@ 0x74
 8017fac:	4614      	mov	r4, r2
 8017fae:	4698      	mov	r8, r3
 8017fb0:	4606      	mov	r6, r0
 8017fb2:	b118      	cbz	r0, 8017fbc <_vfiprintf_r+0x18>
 8017fb4:	6a03      	ldr	r3, [r0, #32]
 8017fb6:	b90b      	cbnz	r3, 8017fbc <_vfiprintf_r+0x18>
 8017fb8:	f7fc fd5e 	bl	8014a78 <__sinit>
 8017fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017fbe:	07d9      	lsls	r1, r3, #31
 8017fc0:	d405      	bmi.n	8017fce <_vfiprintf_r+0x2a>
 8017fc2:	89ab      	ldrh	r3, [r5, #12]
 8017fc4:	059a      	lsls	r2, r3, #22
 8017fc6:	d402      	bmi.n	8017fce <_vfiprintf_r+0x2a>
 8017fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017fca:	f7fc ff02 	bl	8014dd2 <__retarget_lock_acquire_recursive>
 8017fce:	89ab      	ldrh	r3, [r5, #12]
 8017fd0:	071b      	lsls	r3, r3, #28
 8017fd2:	d501      	bpl.n	8017fd8 <_vfiprintf_r+0x34>
 8017fd4:	692b      	ldr	r3, [r5, #16]
 8017fd6:	b99b      	cbnz	r3, 8018000 <_vfiprintf_r+0x5c>
 8017fd8:	4629      	mov	r1, r5
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f000 f938 	bl	8018250 <__swsetup_r>
 8017fe0:	b170      	cbz	r0, 8018000 <_vfiprintf_r+0x5c>
 8017fe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017fe4:	07dc      	lsls	r4, r3, #31
 8017fe6:	d504      	bpl.n	8017ff2 <_vfiprintf_r+0x4e>
 8017fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fec:	b01d      	add	sp, #116	@ 0x74
 8017fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff2:	89ab      	ldrh	r3, [r5, #12]
 8017ff4:	0598      	lsls	r0, r3, #22
 8017ff6:	d4f7      	bmi.n	8017fe8 <_vfiprintf_r+0x44>
 8017ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ffa:	f7fc feeb 	bl	8014dd4 <__retarget_lock_release_recursive>
 8017ffe:	e7f3      	b.n	8017fe8 <_vfiprintf_r+0x44>
 8018000:	2300      	movs	r3, #0
 8018002:	9309      	str	r3, [sp, #36]	@ 0x24
 8018004:	2320      	movs	r3, #32
 8018006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801800a:	f8cd 800c 	str.w	r8, [sp, #12]
 801800e:	2330      	movs	r3, #48	@ 0x30
 8018010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80181c0 <_vfiprintf_r+0x21c>
 8018014:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018018:	f04f 0901 	mov.w	r9, #1
 801801c:	4623      	mov	r3, r4
 801801e:	469a      	mov	sl, r3
 8018020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018024:	b10a      	cbz	r2, 801802a <_vfiprintf_r+0x86>
 8018026:	2a25      	cmp	r2, #37	@ 0x25
 8018028:	d1f9      	bne.n	801801e <_vfiprintf_r+0x7a>
 801802a:	ebba 0b04 	subs.w	fp, sl, r4
 801802e:	d00b      	beq.n	8018048 <_vfiprintf_r+0xa4>
 8018030:	465b      	mov	r3, fp
 8018032:	4622      	mov	r2, r4
 8018034:	4629      	mov	r1, r5
 8018036:	4630      	mov	r0, r6
 8018038:	f7ff ffa2 	bl	8017f80 <__sfputs_r>
 801803c:	3001      	adds	r0, #1
 801803e:	f000 80a7 	beq.w	8018190 <_vfiprintf_r+0x1ec>
 8018042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018044:	445a      	add	r2, fp
 8018046:	9209      	str	r2, [sp, #36]	@ 0x24
 8018048:	f89a 3000 	ldrb.w	r3, [sl]
 801804c:	2b00      	cmp	r3, #0
 801804e:	f000 809f 	beq.w	8018190 <_vfiprintf_r+0x1ec>
 8018052:	2300      	movs	r3, #0
 8018054:	f04f 32ff 	mov.w	r2, #4294967295
 8018058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801805c:	f10a 0a01 	add.w	sl, sl, #1
 8018060:	9304      	str	r3, [sp, #16]
 8018062:	9307      	str	r3, [sp, #28]
 8018064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018068:	931a      	str	r3, [sp, #104]	@ 0x68
 801806a:	4654      	mov	r4, sl
 801806c:	2205      	movs	r2, #5
 801806e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018072:	4853      	ldr	r0, [pc, #332]	@ (80181c0 <_vfiprintf_r+0x21c>)
 8018074:	f7e8 f8d4 	bl	8000220 <memchr>
 8018078:	9a04      	ldr	r2, [sp, #16]
 801807a:	b9d8      	cbnz	r0, 80180b4 <_vfiprintf_r+0x110>
 801807c:	06d1      	lsls	r1, r2, #27
 801807e:	bf44      	itt	mi
 8018080:	2320      	movmi	r3, #32
 8018082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018086:	0713      	lsls	r3, r2, #28
 8018088:	bf44      	itt	mi
 801808a:	232b      	movmi	r3, #43	@ 0x2b
 801808c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018090:	f89a 3000 	ldrb.w	r3, [sl]
 8018094:	2b2a      	cmp	r3, #42	@ 0x2a
 8018096:	d015      	beq.n	80180c4 <_vfiprintf_r+0x120>
 8018098:	9a07      	ldr	r2, [sp, #28]
 801809a:	4654      	mov	r4, sl
 801809c:	2000      	movs	r0, #0
 801809e:	f04f 0c0a 	mov.w	ip, #10
 80180a2:	4621      	mov	r1, r4
 80180a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180a8:	3b30      	subs	r3, #48	@ 0x30
 80180aa:	2b09      	cmp	r3, #9
 80180ac:	d94b      	bls.n	8018146 <_vfiprintf_r+0x1a2>
 80180ae:	b1b0      	cbz	r0, 80180de <_vfiprintf_r+0x13a>
 80180b0:	9207      	str	r2, [sp, #28]
 80180b2:	e014      	b.n	80180de <_vfiprintf_r+0x13a>
 80180b4:	eba0 0308 	sub.w	r3, r0, r8
 80180b8:	fa09 f303 	lsl.w	r3, r9, r3
 80180bc:	4313      	orrs	r3, r2
 80180be:	9304      	str	r3, [sp, #16]
 80180c0:	46a2      	mov	sl, r4
 80180c2:	e7d2      	b.n	801806a <_vfiprintf_r+0xc6>
 80180c4:	9b03      	ldr	r3, [sp, #12]
 80180c6:	1d19      	adds	r1, r3, #4
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	9103      	str	r1, [sp, #12]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	bfbb      	ittet	lt
 80180d0:	425b      	neglt	r3, r3
 80180d2:	f042 0202 	orrlt.w	r2, r2, #2
 80180d6:	9307      	strge	r3, [sp, #28]
 80180d8:	9307      	strlt	r3, [sp, #28]
 80180da:	bfb8      	it	lt
 80180dc:	9204      	strlt	r2, [sp, #16]
 80180de:	7823      	ldrb	r3, [r4, #0]
 80180e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80180e2:	d10a      	bne.n	80180fa <_vfiprintf_r+0x156>
 80180e4:	7863      	ldrb	r3, [r4, #1]
 80180e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80180e8:	d132      	bne.n	8018150 <_vfiprintf_r+0x1ac>
 80180ea:	9b03      	ldr	r3, [sp, #12]
 80180ec:	1d1a      	adds	r2, r3, #4
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	9203      	str	r2, [sp, #12]
 80180f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180f6:	3402      	adds	r4, #2
 80180f8:	9305      	str	r3, [sp, #20]
 80180fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80181d0 <_vfiprintf_r+0x22c>
 80180fe:	7821      	ldrb	r1, [r4, #0]
 8018100:	2203      	movs	r2, #3
 8018102:	4650      	mov	r0, sl
 8018104:	f7e8 f88c 	bl	8000220 <memchr>
 8018108:	b138      	cbz	r0, 801811a <_vfiprintf_r+0x176>
 801810a:	9b04      	ldr	r3, [sp, #16]
 801810c:	eba0 000a 	sub.w	r0, r0, sl
 8018110:	2240      	movs	r2, #64	@ 0x40
 8018112:	4082      	lsls	r2, r0
 8018114:	4313      	orrs	r3, r2
 8018116:	3401      	adds	r4, #1
 8018118:	9304      	str	r3, [sp, #16]
 801811a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801811e:	4829      	ldr	r0, [pc, #164]	@ (80181c4 <_vfiprintf_r+0x220>)
 8018120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018124:	2206      	movs	r2, #6
 8018126:	f7e8 f87b 	bl	8000220 <memchr>
 801812a:	2800      	cmp	r0, #0
 801812c:	d03f      	beq.n	80181ae <_vfiprintf_r+0x20a>
 801812e:	4b26      	ldr	r3, [pc, #152]	@ (80181c8 <_vfiprintf_r+0x224>)
 8018130:	bb1b      	cbnz	r3, 801817a <_vfiprintf_r+0x1d6>
 8018132:	9b03      	ldr	r3, [sp, #12]
 8018134:	3307      	adds	r3, #7
 8018136:	f023 0307 	bic.w	r3, r3, #7
 801813a:	3308      	adds	r3, #8
 801813c:	9303      	str	r3, [sp, #12]
 801813e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018140:	443b      	add	r3, r7
 8018142:	9309      	str	r3, [sp, #36]	@ 0x24
 8018144:	e76a      	b.n	801801c <_vfiprintf_r+0x78>
 8018146:	fb0c 3202 	mla	r2, ip, r2, r3
 801814a:	460c      	mov	r4, r1
 801814c:	2001      	movs	r0, #1
 801814e:	e7a8      	b.n	80180a2 <_vfiprintf_r+0xfe>
 8018150:	2300      	movs	r3, #0
 8018152:	3401      	adds	r4, #1
 8018154:	9305      	str	r3, [sp, #20]
 8018156:	4619      	mov	r1, r3
 8018158:	f04f 0c0a 	mov.w	ip, #10
 801815c:	4620      	mov	r0, r4
 801815e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018162:	3a30      	subs	r2, #48	@ 0x30
 8018164:	2a09      	cmp	r2, #9
 8018166:	d903      	bls.n	8018170 <_vfiprintf_r+0x1cc>
 8018168:	2b00      	cmp	r3, #0
 801816a:	d0c6      	beq.n	80180fa <_vfiprintf_r+0x156>
 801816c:	9105      	str	r1, [sp, #20]
 801816e:	e7c4      	b.n	80180fa <_vfiprintf_r+0x156>
 8018170:	fb0c 2101 	mla	r1, ip, r1, r2
 8018174:	4604      	mov	r4, r0
 8018176:	2301      	movs	r3, #1
 8018178:	e7f0      	b.n	801815c <_vfiprintf_r+0x1b8>
 801817a:	ab03      	add	r3, sp, #12
 801817c:	9300      	str	r3, [sp, #0]
 801817e:	462a      	mov	r2, r5
 8018180:	4b12      	ldr	r3, [pc, #72]	@ (80181cc <_vfiprintf_r+0x228>)
 8018182:	a904      	add	r1, sp, #16
 8018184:	4630      	mov	r0, r6
 8018186:	f7fb fe27 	bl	8013dd8 <_printf_float>
 801818a:	4607      	mov	r7, r0
 801818c:	1c78      	adds	r0, r7, #1
 801818e:	d1d6      	bne.n	801813e <_vfiprintf_r+0x19a>
 8018190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018192:	07d9      	lsls	r1, r3, #31
 8018194:	d405      	bmi.n	80181a2 <_vfiprintf_r+0x1fe>
 8018196:	89ab      	ldrh	r3, [r5, #12]
 8018198:	059a      	lsls	r2, r3, #22
 801819a:	d402      	bmi.n	80181a2 <_vfiprintf_r+0x1fe>
 801819c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801819e:	f7fc fe19 	bl	8014dd4 <__retarget_lock_release_recursive>
 80181a2:	89ab      	ldrh	r3, [r5, #12]
 80181a4:	065b      	lsls	r3, r3, #25
 80181a6:	f53f af1f 	bmi.w	8017fe8 <_vfiprintf_r+0x44>
 80181aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181ac:	e71e      	b.n	8017fec <_vfiprintf_r+0x48>
 80181ae:	ab03      	add	r3, sp, #12
 80181b0:	9300      	str	r3, [sp, #0]
 80181b2:	462a      	mov	r2, r5
 80181b4:	4b05      	ldr	r3, [pc, #20]	@ (80181cc <_vfiprintf_r+0x228>)
 80181b6:	a904      	add	r1, sp, #16
 80181b8:	4630      	mov	r0, r6
 80181ba:	f7fc f8a5 	bl	8014308 <_printf_i>
 80181be:	e7e4      	b.n	801818a <_vfiprintf_r+0x1e6>
 80181c0:	0801b055 	.word	0x0801b055
 80181c4:	0801b05f 	.word	0x0801b05f
 80181c8:	08013dd9 	.word	0x08013dd9
 80181cc:	08017f81 	.word	0x08017f81
 80181d0:	0801b05b 	.word	0x0801b05b

080181d4 <__swbuf_r>:
 80181d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d6:	460e      	mov	r6, r1
 80181d8:	4614      	mov	r4, r2
 80181da:	4605      	mov	r5, r0
 80181dc:	b118      	cbz	r0, 80181e6 <__swbuf_r+0x12>
 80181de:	6a03      	ldr	r3, [r0, #32]
 80181e0:	b90b      	cbnz	r3, 80181e6 <__swbuf_r+0x12>
 80181e2:	f7fc fc49 	bl	8014a78 <__sinit>
 80181e6:	69a3      	ldr	r3, [r4, #24]
 80181e8:	60a3      	str	r3, [r4, #8]
 80181ea:	89a3      	ldrh	r3, [r4, #12]
 80181ec:	071a      	lsls	r2, r3, #28
 80181ee:	d501      	bpl.n	80181f4 <__swbuf_r+0x20>
 80181f0:	6923      	ldr	r3, [r4, #16]
 80181f2:	b943      	cbnz	r3, 8018206 <__swbuf_r+0x32>
 80181f4:	4621      	mov	r1, r4
 80181f6:	4628      	mov	r0, r5
 80181f8:	f000 f82a 	bl	8018250 <__swsetup_r>
 80181fc:	b118      	cbz	r0, 8018206 <__swbuf_r+0x32>
 80181fe:	f04f 37ff 	mov.w	r7, #4294967295
 8018202:	4638      	mov	r0, r7
 8018204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	6922      	ldr	r2, [r4, #16]
 801820a:	1a98      	subs	r0, r3, r2
 801820c:	6963      	ldr	r3, [r4, #20]
 801820e:	b2f6      	uxtb	r6, r6
 8018210:	4283      	cmp	r3, r0
 8018212:	4637      	mov	r7, r6
 8018214:	dc05      	bgt.n	8018222 <__swbuf_r+0x4e>
 8018216:	4621      	mov	r1, r4
 8018218:	4628      	mov	r0, r5
 801821a:	f7ff fa53 	bl	80176c4 <_fflush_r>
 801821e:	2800      	cmp	r0, #0
 8018220:	d1ed      	bne.n	80181fe <__swbuf_r+0x2a>
 8018222:	68a3      	ldr	r3, [r4, #8]
 8018224:	3b01      	subs	r3, #1
 8018226:	60a3      	str	r3, [r4, #8]
 8018228:	6823      	ldr	r3, [r4, #0]
 801822a:	1c5a      	adds	r2, r3, #1
 801822c:	6022      	str	r2, [r4, #0]
 801822e:	701e      	strb	r6, [r3, #0]
 8018230:	6962      	ldr	r2, [r4, #20]
 8018232:	1c43      	adds	r3, r0, #1
 8018234:	429a      	cmp	r2, r3
 8018236:	d004      	beq.n	8018242 <__swbuf_r+0x6e>
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	07db      	lsls	r3, r3, #31
 801823c:	d5e1      	bpl.n	8018202 <__swbuf_r+0x2e>
 801823e:	2e0a      	cmp	r6, #10
 8018240:	d1df      	bne.n	8018202 <__swbuf_r+0x2e>
 8018242:	4621      	mov	r1, r4
 8018244:	4628      	mov	r0, r5
 8018246:	f7ff fa3d 	bl	80176c4 <_fflush_r>
 801824a:	2800      	cmp	r0, #0
 801824c:	d0d9      	beq.n	8018202 <__swbuf_r+0x2e>
 801824e:	e7d6      	b.n	80181fe <__swbuf_r+0x2a>

08018250 <__swsetup_r>:
 8018250:	b538      	push	{r3, r4, r5, lr}
 8018252:	4b29      	ldr	r3, [pc, #164]	@ (80182f8 <__swsetup_r+0xa8>)
 8018254:	4605      	mov	r5, r0
 8018256:	6818      	ldr	r0, [r3, #0]
 8018258:	460c      	mov	r4, r1
 801825a:	b118      	cbz	r0, 8018264 <__swsetup_r+0x14>
 801825c:	6a03      	ldr	r3, [r0, #32]
 801825e:	b90b      	cbnz	r3, 8018264 <__swsetup_r+0x14>
 8018260:	f7fc fc0a 	bl	8014a78 <__sinit>
 8018264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018268:	0719      	lsls	r1, r3, #28
 801826a:	d422      	bmi.n	80182b2 <__swsetup_r+0x62>
 801826c:	06da      	lsls	r2, r3, #27
 801826e:	d407      	bmi.n	8018280 <__swsetup_r+0x30>
 8018270:	2209      	movs	r2, #9
 8018272:	602a      	str	r2, [r5, #0]
 8018274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018278:	81a3      	strh	r3, [r4, #12]
 801827a:	f04f 30ff 	mov.w	r0, #4294967295
 801827e:	e033      	b.n	80182e8 <__swsetup_r+0x98>
 8018280:	0758      	lsls	r0, r3, #29
 8018282:	d512      	bpl.n	80182aa <__swsetup_r+0x5a>
 8018284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018286:	b141      	cbz	r1, 801829a <__swsetup_r+0x4a>
 8018288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801828c:	4299      	cmp	r1, r3
 801828e:	d002      	beq.n	8018296 <__swsetup_r+0x46>
 8018290:	4628      	mov	r0, r5
 8018292:	f7fd fc0d 	bl	8015ab0 <_free_r>
 8018296:	2300      	movs	r3, #0
 8018298:	6363      	str	r3, [r4, #52]	@ 0x34
 801829a:	89a3      	ldrh	r3, [r4, #12]
 801829c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182a0:	81a3      	strh	r3, [r4, #12]
 80182a2:	2300      	movs	r3, #0
 80182a4:	6063      	str	r3, [r4, #4]
 80182a6:	6923      	ldr	r3, [r4, #16]
 80182a8:	6023      	str	r3, [r4, #0]
 80182aa:	89a3      	ldrh	r3, [r4, #12]
 80182ac:	f043 0308 	orr.w	r3, r3, #8
 80182b0:	81a3      	strh	r3, [r4, #12]
 80182b2:	6923      	ldr	r3, [r4, #16]
 80182b4:	b94b      	cbnz	r3, 80182ca <__swsetup_r+0x7a>
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80182bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80182c0:	d003      	beq.n	80182ca <__swsetup_r+0x7a>
 80182c2:	4621      	mov	r1, r4
 80182c4:	4628      	mov	r0, r5
 80182c6:	f000 f883 	bl	80183d0 <__smakebuf_r>
 80182ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ce:	f013 0201 	ands.w	r2, r3, #1
 80182d2:	d00a      	beq.n	80182ea <__swsetup_r+0x9a>
 80182d4:	2200      	movs	r2, #0
 80182d6:	60a2      	str	r2, [r4, #8]
 80182d8:	6962      	ldr	r2, [r4, #20]
 80182da:	4252      	negs	r2, r2
 80182dc:	61a2      	str	r2, [r4, #24]
 80182de:	6922      	ldr	r2, [r4, #16]
 80182e0:	b942      	cbnz	r2, 80182f4 <__swsetup_r+0xa4>
 80182e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80182e6:	d1c5      	bne.n	8018274 <__swsetup_r+0x24>
 80182e8:	bd38      	pop	{r3, r4, r5, pc}
 80182ea:	0799      	lsls	r1, r3, #30
 80182ec:	bf58      	it	pl
 80182ee:	6962      	ldrpl	r2, [r4, #20]
 80182f0:	60a2      	str	r2, [r4, #8]
 80182f2:	e7f4      	b.n	80182de <__swsetup_r+0x8e>
 80182f4:	2000      	movs	r0, #0
 80182f6:	e7f7      	b.n	80182e8 <__swsetup_r+0x98>
 80182f8:	20000054 	.word	0x20000054

080182fc <_raise_r>:
 80182fc:	291f      	cmp	r1, #31
 80182fe:	b538      	push	{r3, r4, r5, lr}
 8018300:	4605      	mov	r5, r0
 8018302:	460c      	mov	r4, r1
 8018304:	d904      	bls.n	8018310 <_raise_r+0x14>
 8018306:	2316      	movs	r3, #22
 8018308:	6003      	str	r3, [r0, #0]
 801830a:	f04f 30ff 	mov.w	r0, #4294967295
 801830e:	bd38      	pop	{r3, r4, r5, pc}
 8018310:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018312:	b112      	cbz	r2, 801831a <_raise_r+0x1e>
 8018314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018318:	b94b      	cbnz	r3, 801832e <_raise_r+0x32>
 801831a:	4628      	mov	r0, r5
 801831c:	f000 f830 	bl	8018380 <_getpid_r>
 8018320:	4622      	mov	r2, r4
 8018322:	4601      	mov	r1, r0
 8018324:	4628      	mov	r0, r5
 8018326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801832a:	f000 b817 	b.w	801835c <_kill_r>
 801832e:	2b01      	cmp	r3, #1
 8018330:	d00a      	beq.n	8018348 <_raise_r+0x4c>
 8018332:	1c59      	adds	r1, r3, #1
 8018334:	d103      	bne.n	801833e <_raise_r+0x42>
 8018336:	2316      	movs	r3, #22
 8018338:	6003      	str	r3, [r0, #0]
 801833a:	2001      	movs	r0, #1
 801833c:	e7e7      	b.n	801830e <_raise_r+0x12>
 801833e:	2100      	movs	r1, #0
 8018340:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018344:	4620      	mov	r0, r4
 8018346:	4798      	blx	r3
 8018348:	2000      	movs	r0, #0
 801834a:	e7e0      	b.n	801830e <_raise_r+0x12>

0801834c <raise>:
 801834c:	4b02      	ldr	r3, [pc, #8]	@ (8018358 <raise+0xc>)
 801834e:	4601      	mov	r1, r0
 8018350:	6818      	ldr	r0, [r3, #0]
 8018352:	f7ff bfd3 	b.w	80182fc <_raise_r>
 8018356:	bf00      	nop
 8018358:	20000054 	.word	0x20000054

0801835c <_kill_r>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4d07      	ldr	r5, [pc, #28]	@ (801837c <_kill_r+0x20>)
 8018360:	2300      	movs	r3, #0
 8018362:	4604      	mov	r4, r0
 8018364:	4608      	mov	r0, r1
 8018366:	4611      	mov	r1, r2
 8018368:	602b      	str	r3, [r5, #0]
 801836a:	f7ec f84d 	bl	8004408 <_kill>
 801836e:	1c43      	adds	r3, r0, #1
 8018370:	d102      	bne.n	8018378 <_kill_r+0x1c>
 8018372:	682b      	ldr	r3, [r5, #0]
 8018374:	b103      	cbz	r3, 8018378 <_kill_r+0x1c>
 8018376:	6023      	str	r3, [r4, #0]
 8018378:	bd38      	pop	{r3, r4, r5, pc}
 801837a:	bf00      	nop
 801837c:	20004d00 	.word	0x20004d00

08018380 <_getpid_r>:
 8018380:	f7ec b83a 	b.w	80043f8 <_getpid>

08018384 <__swhatbuf_r>:
 8018384:	b570      	push	{r4, r5, r6, lr}
 8018386:	460c      	mov	r4, r1
 8018388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801838c:	2900      	cmp	r1, #0
 801838e:	b096      	sub	sp, #88	@ 0x58
 8018390:	4615      	mov	r5, r2
 8018392:	461e      	mov	r6, r3
 8018394:	da0d      	bge.n	80183b2 <__swhatbuf_r+0x2e>
 8018396:	89a3      	ldrh	r3, [r4, #12]
 8018398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801839c:	f04f 0100 	mov.w	r1, #0
 80183a0:	bf14      	ite	ne
 80183a2:	2340      	movne	r3, #64	@ 0x40
 80183a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183a8:	2000      	movs	r0, #0
 80183aa:	6031      	str	r1, [r6, #0]
 80183ac:	602b      	str	r3, [r5, #0]
 80183ae:	b016      	add	sp, #88	@ 0x58
 80183b0:	bd70      	pop	{r4, r5, r6, pc}
 80183b2:	466a      	mov	r2, sp
 80183b4:	f000 f848 	bl	8018448 <_fstat_r>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	dbec      	blt.n	8018396 <__swhatbuf_r+0x12>
 80183bc:	9901      	ldr	r1, [sp, #4]
 80183be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80183c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80183c6:	4259      	negs	r1, r3
 80183c8:	4159      	adcs	r1, r3
 80183ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80183ce:	e7eb      	b.n	80183a8 <__swhatbuf_r+0x24>

080183d0 <__smakebuf_r>:
 80183d0:	898b      	ldrh	r3, [r1, #12]
 80183d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183d4:	079d      	lsls	r5, r3, #30
 80183d6:	4606      	mov	r6, r0
 80183d8:	460c      	mov	r4, r1
 80183da:	d507      	bpl.n	80183ec <__smakebuf_r+0x1c>
 80183dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80183e0:	6023      	str	r3, [r4, #0]
 80183e2:	6123      	str	r3, [r4, #16]
 80183e4:	2301      	movs	r3, #1
 80183e6:	6163      	str	r3, [r4, #20]
 80183e8:	b003      	add	sp, #12
 80183ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ec:	ab01      	add	r3, sp, #4
 80183ee:	466a      	mov	r2, sp
 80183f0:	f7ff ffc8 	bl	8018384 <__swhatbuf_r>
 80183f4:	9f00      	ldr	r7, [sp, #0]
 80183f6:	4605      	mov	r5, r0
 80183f8:	4639      	mov	r1, r7
 80183fa:	4630      	mov	r0, r6
 80183fc:	f7fd fbcc 	bl	8015b98 <_malloc_r>
 8018400:	b948      	cbnz	r0, 8018416 <__smakebuf_r+0x46>
 8018402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018406:	059a      	lsls	r2, r3, #22
 8018408:	d4ee      	bmi.n	80183e8 <__smakebuf_r+0x18>
 801840a:	f023 0303 	bic.w	r3, r3, #3
 801840e:	f043 0302 	orr.w	r3, r3, #2
 8018412:	81a3      	strh	r3, [r4, #12]
 8018414:	e7e2      	b.n	80183dc <__smakebuf_r+0xc>
 8018416:	89a3      	ldrh	r3, [r4, #12]
 8018418:	6020      	str	r0, [r4, #0]
 801841a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801841e:	81a3      	strh	r3, [r4, #12]
 8018420:	9b01      	ldr	r3, [sp, #4]
 8018422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018426:	b15b      	cbz	r3, 8018440 <__smakebuf_r+0x70>
 8018428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801842c:	4630      	mov	r0, r6
 801842e:	f000 f81d 	bl	801846c <_isatty_r>
 8018432:	b128      	cbz	r0, 8018440 <__smakebuf_r+0x70>
 8018434:	89a3      	ldrh	r3, [r4, #12]
 8018436:	f023 0303 	bic.w	r3, r3, #3
 801843a:	f043 0301 	orr.w	r3, r3, #1
 801843e:	81a3      	strh	r3, [r4, #12]
 8018440:	89a3      	ldrh	r3, [r4, #12]
 8018442:	431d      	orrs	r5, r3
 8018444:	81a5      	strh	r5, [r4, #12]
 8018446:	e7cf      	b.n	80183e8 <__smakebuf_r+0x18>

08018448 <_fstat_r>:
 8018448:	b538      	push	{r3, r4, r5, lr}
 801844a:	4d07      	ldr	r5, [pc, #28]	@ (8018468 <_fstat_r+0x20>)
 801844c:	2300      	movs	r3, #0
 801844e:	4604      	mov	r4, r0
 8018450:	4608      	mov	r0, r1
 8018452:	4611      	mov	r1, r2
 8018454:	602b      	str	r3, [r5, #0]
 8018456:	f7ec f837 	bl	80044c8 <_fstat>
 801845a:	1c43      	adds	r3, r0, #1
 801845c:	d102      	bne.n	8018464 <_fstat_r+0x1c>
 801845e:	682b      	ldr	r3, [r5, #0]
 8018460:	b103      	cbz	r3, 8018464 <_fstat_r+0x1c>
 8018462:	6023      	str	r3, [r4, #0]
 8018464:	bd38      	pop	{r3, r4, r5, pc}
 8018466:	bf00      	nop
 8018468:	20004d00 	.word	0x20004d00

0801846c <_isatty_r>:
 801846c:	b538      	push	{r3, r4, r5, lr}
 801846e:	4d06      	ldr	r5, [pc, #24]	@ (8018488 <_isatty_r+0x1c>)
 8018470:	2300      	movs	r3, #0
 8018472:	4604      	mov	r4, r0
 8018474:	4608      	mov	r0, r1
 8018476:	602b      	str	r3, [r5, #0]
 8018478:	f7ec f836 	bl	80044e8 <_isatty>
 801847c:	1c43      	adds	r3, r0, #1
 801847e:	d102      	bne.n	8018486 <_isatty_r+0x1a>
 8018480:	682b      	ldr	r3, [r5, #0]
 8018482:	b103      	cbz	r3, 8018486 <_isatty_r+0x1a>
 8018484:	6023      	str	r3, [r4, #0]
 8018486:	bd38      	pop	{r3, r4, r5, pc}
 8018488:	20004d00 	.word	0x20004d00

0801848c <powf>:
 801848c:	b508      	push	{r3, lr}
 801848e:	ed2d 8b04 	vpush	{d8-d9}
 8018492:	eeb0 8a60 	vmov.f32	s16, s1
 8018496:	eeb0 9a40 	vmov.f32	s18, s0
 801849a:	f000 f85b 	bl	8018554 <__ieee754_powf>
 801849e:	eeb4 8a48 	vcmp.f32	s16, s16
 80184a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a6:	eef0 8a40 	vmov.f32	s17, s0
 80184aa:	d63e      	bvs.n	801852a <powf+0x9e>
 80184ac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80184b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184b4:	d112      	bne.n	80184dc <powf+0x50>
 80184b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80184ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184be:	d039      	beq.n	8018534 <powf+0xa8>
 80184c0:	eeb0 0a48 	vmov.f32	s0, s16
 80184c4:	f000 f839 	bl	801853a <finitef>
 80184c8:	b378      	cbz	r0, 801852a <powf+0x9e>
 80184ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d2:	d52a      	bpl.n	801852a <powf+0x9e>
 80184d4:	f7fc fc52 	bl	8014d7c <__errno>
 80184d8:	2322      	movs	r3, #34	@ 0x22
 80184da:	e014      	b.n	8018506 <powf+0x7a>
 80184dc:	f000 f82d 	bl	801853a <finitef>
 80184e0:	b998      	cbnz	r0, 801850a <powf+0x7e>
 80184e2:	eeb0 0a49 	vmov.f32	s0, s18
 80184e6:	f000 f828 	bl	801853a <finitef>
 80184ea:	b170      	cbz	r0, 801850a <powf+0x7e>
 80184ec:	eeb0 0a48 	vmov.f32	s0, s16
 80184f0:	f000 f823 	bl	801853a <finitef>
 80184f4:	b148      	cbz	r0, 801850a <powf+0x7e>
 80184f6:	eef4 8a68 	vcmp.f32	s17, s17
 80184fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184fe:	d7e9      	bvc.n	80184d4 <powf+0x48>
 8018500:	f7fc fc3c 	bl	8014d7c <__errno>
 8018504:	2321      	movs	r3, #33	@ 0x21
 8018506:	6003      	str	r3, [r0, #0]
 8018508:	e00f      	b.n	801852a <powf+0x9e>
 801850a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018512:	d10a      	bne.n	801852a <powf+0x9e>
 8018514:	eeb0 0a49 	vmov.f32	s0, s18
 8018518:	f000 f80f 	bl	801853a <finitef>
 801851c:	b128      	cbz	r0, 801852a <powf+0x9e>
 801851e:	eeb0 0a48 	vmov.f32	s0, s16
 8018522:	f000 f80a 	bl	801853a <finitef>
 8018526:	2800      	cmp	r0, #0
 8018528:	d1d4      	bne.n	80184d4 <powf+0x48>
 801852a:	eeb0 0a68 	vmov.f32	s0, s17
 801852e:	ecbd 8b04 	vpop	{d8-d9}
 8018532:	bd08      	pop	{r3, pc}
 8018534:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018538:	e7f7      	b.n	801852a <powf+0x9e>

0801853a <finitef>:
 801853a:	ee10 3a10 	vmov	r3, s0
 801853e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8018542:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8018546:	bfac      	ite	ge
 8018548:	2000      	movge	r0, #0
 801854a:	2001      	movlt	r0, #1
 801854c:	4770      	bx	lr

0801854e <__ieee754_sqrtf>:
 801854e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018552:	4770      	bx	lr

08018554 <__ieee754_powf>:
 8018554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018558:	ee10 4a90 	vmov	r4, s1
 801855c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018560:	ed2d 8b02 	vpush	{d8}
 8018564:	ee10 6a10 	vmov	r6, s0
 8018568:	eeb0 8a40 	vmov.f32	s16, s0
 801856c:	eef0 8a60 	vmov.f32	s17, s1
 8018570:	d10c      	bne.n	801858c <__ieee754_powf+0x38>
 8018572:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018576:	0076      	lsls	r6, r6, #1
 8018578:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801857c:	f240 8274 	bls.w	8018a68 <__ieee754_powf+0x514>
 8018580:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018584:	ecbd 8b02 	vpop	{d8}
 8018588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801858c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8018590:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018594:	d802      	bhi.n	801859c <__ieee754_powf+0x48>
 8018596:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801859a:	d908      	bls.n	80185ae <__ieee754_powf+0x5a>
 801859c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80185a0:	d1ee      	bne.n	8018580 <__ieee754_powf+0x2c>
 80185a2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80185a6:	0064      	lsls	r4, r4, #1
 80185a8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80185ac:	e7e6      	b.n	801857c <__ieee754_powf+0x28>
 80185ae:	2e00      	cmp	r6, #0
 80185b0:	da1f      	bge.n	80185f2 <__ieee754_powf+0x9e>
 80185b2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80185b6:	f080 8260 	bcs.w	8018a7a <__ieee754_powf+0x526>
 80185ba:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80185be:	d32f      	bcc.n	8018620 <__ieee754_powf+0xcc>
 80185c0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80185c4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80185c8:	fa49 f503 	asr.w	r5, r9, r3
 80185cc:	fa05 f303 	lsl.w	r3, r5, r3
 80185d0:	454b      	cmp	r3, r9
 80185d2:	d123      	bne.n	801861c <__ieee754_powf+0xc8>
 80185d4:	f005 0501 	and.w	r5, r5, #1
 80185d8:	f1c5 0502 	rsb	r5, r5, #2
 80185dc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80185e0:	d11f      	bne.n	8018622 <__ieee754_powf+0xce>
 80185e2:	2c00      	cmp	r4, #0
 80185e4:	f280 8246 	bge.w	8018a74 <__ieee754_powf+0x520>
 80185e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80185ec:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80185f0:	e7c8      	b.n	8018584 <__ieee754_powf+0x30>
 80185f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80185f6:	d111      	bne.n	801861c <__ieee754_powf+0xc8>
 80185f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80185fc:	f000 8234 	beq.w	8018a68 <__ieee754_powf+0x514>
 8018600:	d906      	bls.n	8018610 <__ieee754_powf+0xbc>
 8018602:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018918 <__ieee754_powf+0x3c4>
 8018606:	2c00      	cmp	r4, #0
 8018608:	bfa8      	it	ge
 801860a:	eeb0 0a68 	vmovge.f32	s0, s17
 801860e:	e7b9      	b.n	8018584 <__ieee754_powf+0x30>
 8018610:	2c00      	cmp	r4, #0
 8018612:	f280 822c 	bge.w	8018a6e <__ieee754_powf+0x51a>
 8018616:	eeb1 0a68 	vneg.f32	s0, s17
 801861a:	e7b3      	b.n	8018584 <__ieee754_powf+0x30>
 801861c:	2500      	movs	r5, #0
 801861e:	e7dd      	b.n	80185dc <__ieee754_powf+0x88>
 8018620:	2500      	movs	r5, #0
 8018622:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018626:	d102      	bne.n	801862e <__ieee754_powf+0xda>
 8018628:	ee28 0a08 	vmul.f32	s0, s16, s16
 801862c:	e7aa      	b.n	8018584 <__ieee754_powf+0x30>
 801862e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018632:	f040 8227 	bne.w	8018a84 <__ieee754_powf+0x530>
 8018636:	2e00      	cmp	r6, #0
 8018638:	f2c0 8224 	blt.w	8018a84 <__ieee754_powf+0x530>
 801863c:	eeb0 0a48 	vmov.f32	s0, s16
 8018640:	ecbd 8b02 	vpop	{d8}
 8018644:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018648:	f7ff bf81 	b.w	801854e <__ieee754_sqrtf>
 801864c:	2d01      	cmp	r5, #1
 801864e:	d199      	bne.n	8018584 <__ieee754_powf+0x30>
 8018650:	eeb1 0a40 	vneg.f32	s0, s0
 8018654:	e796      	b.n	8018584 <__ieee754_powf+0x30>
 8018656:	0ff0      	lsrs	r0, r6, #31
 8018658:	3801      	subs	r0, #1
 801865a:	ea55 0300 	orrs.w	r3, r5, r0
 801865e:	d104      	bne.n	801866a <__ieee754_powf+0x116>
 8018660:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018664:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018668:	e78c      	b.n	8018584 <__ieee754_powf+0x30>
 801866a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801866e:	d96d      	bls.n	801874c <__ieee754_powf+0x1f8>
 8018670:	4baa      	ldr	r3, [pc, #680]	@ (801891c <__ieee754_powf+0x3c8>)
 8018672:	4598      	cmp	r8, r3
 8018674:	d808      	bhi.n	8018688 <__ieee754_powf+0x134>
 8018676:	2c00      	cmp	r4, #0
 8018678:	da0b      	bge.n	8018692 <__ieee754_powf+0x13e>
 801867a:	2000      	movs	r0, #0
 801867c:	ecbd 8b02 	vpop	{d8}
 8018680:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018684:	f000 bac2 	b.w	8018c0c <__math_oflowf>
 8018688:	4ba5      	ldr	r3, [pc, #660]	@ (8018920 <__ieee754_powf+0x3cc>)
 801868a:	4598      	cmp	r8, r3
 801868c:	d908      	bls.n	80186a0 <__ieee754_powf+0x14c>
 801868e:	2c00      	cmp	r4, #0
 8018690:	dcf3      	bgt.n	801867a <__ieee754_powf+0x126>
 8018692:	2000      	movs	r0, #0
 8018694:	ecbd 8b02 	vpop	{d8}
 8018698:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801869c:	f000 bab0 	b.w	8018c00 <__math_uflowf>
 80186a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80186a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80186a8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018924 <__ieee754_powf+0x3d0>
 80186ac:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80186b0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80186b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80186b8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80186bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80186c0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018928 <__ieee754_powf+0x3d4>
 80186c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80186c8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801892c <__ieee754_powf+0x3d8>
 80186cc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80186d0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8018930 <__ieee754_powf+0x3dc>
 80186d4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80186d8:	eeb0 7a67 	vmov.f32	s14, s15
 80186dc:	eea0 7a26 	vfma.f32	s14, s0, s13
 80186e0:	ee17 3a10 	vmov	r3, s14
 80186e4:	f36f 030b 	bfc	r3, #0, #12
 80186e8:	ee07 3a10 	vmov	s14, r3
 80186ec:	eeb0 6a47 	vmov.f32	s12, s14
 80186f0:	eea0 6a66 	vfms.f32	s12, s0, s13
 80186f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80186f8:	3d01      	subs	r5, #1
 80186fa:	4305      	orrs	r5, r0
 80186fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018700:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018704:	f36f 040b 	bfc	r4, #0, #12
 8018708:	bf18      	it	ne
 801870a:	eeb0 8a66 	vmovne.f32	s16, s13
 801870e:	ee06 4a90 	vmov	s13, r4
 8018712:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018716:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801871a:	ee67 7a26 	vmul.f32	s15, s14, s13
 801871e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018722:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018726:	ee17 1a10 	vmov	r1, s14
 801872a:	2900      	cmp	r1, #0
 801872c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018730:	f340 80dd 	ble.w	80188ee <__ieee754_powf+0x39a>
 8018734:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018738:	f240 80ca 	bls.w	80188d0 <__ieee754_powf+0x37c>
 801873c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018744:	bf4c      	ite	mi
 8018746:	2001      	movmi	r0, #1
 8018748:	2000      	movpl	r0, #0
 801874a:	e797      	b.n	801867c <__ieee754_powf+0x128>
 801874c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018750:	bf01      	itttt	eq
 8018752:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018934 <__ieee754_powf+0x3e0>
 8018756:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801875a:	f06f 0317 	mvneq.w	r3, #23
 801875e:	ee17 7a90 	vmoveq	r7, s15
 8018762:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018766:	bf18      	it	ne
 8018768:	2300      	movne	r3, #0
 801876a:	3a7f      	subs	r2, #127	@ 0x7f
 801876c:	441a      	add	r2, r3
 801876e:	4b72      	ldr	r3, [pc, #456]	@ (8018938 <__ieee754_powf+0x3e4>)
 8018770:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018774:	429f      	cmp	r7, r3
 8018776:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801877a:	dd06      	ble.n	801878a <__ieee754_powf+0x236>
 801877c:	4b6f      	ldr	r3, [pc, #444]	@ (801893c <__ieee754_powf+0x3e8>)
 801877e:	429f      	cmp	r7, r3
 8018780:	f340 80a4 	ble.w	80188cc <__ieee754_powf+0x378>
 8018784:	3201      	adds	r2, #1
 8018786:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801878a:	2600      	movs	r6, #0
 801878c:	4b6c      	ldr	r3, [pc, #432]	@ (8018940 <__ieee754_powf+0x3ec>)
 801878e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018792:	ee07 1a10 	vmov	s14, r1
 8018796:	edd3 5a00 	vldr	s11, [r3]
 801879a:	4b6a      	ldr	r3, [pc, #424]	@ (8018944 <__ieee754_powf+0x3f0>)
 801879c:	ee75 7a87 	vadd.f32	s15, s11, s14
 80187a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187a4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80187a8:	1049      	asrs	r1, r1, #1
 80187aa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80187ae:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80187b2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80187b6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80187ba:	ee07 1a90 	vmov	s15, r1
 80187be:	ee26 5a24 	vmul.f32	s10, s12, s9
 80187c2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80187c6:	ee15 7a10 	vmov	r7, s10
 80187ca:	401f      	ands	r7, r3
 80187cc:	ee06 7a90 	vmov	s13, r7
 80187d0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80187d4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80187d8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80187dc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80187e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018948 <__ieee754_powf+0x3f4>
 80187e4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801894c <__ieee754_powf+0x3f8>
 80187e8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80187ec:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018950 <__ieee754_powf+0x3fc>
 80187f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80187f4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018924 <__ieee754_powf+0x3d0>
 80187f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80187fc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018954 <__ieee754_powf+0x400>
 8018800:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018804:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018958 <__ieee754_powf+0x404>
 8018808:	ee26 6a24 	vmul.f32	s12, s12, s9
 801880c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018810:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018814:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018818:	ee27 7a06 	vmul.f32	s14, s14, s12
 801881c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018820:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018824:	eef0 5a67 	vmov.f32	s11, s15
 8018828:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801882c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018830:	ee15 1a90 	vmov	r1, s11
 8018834:	4019      	ands	r1, r3
 8018836:	ee05 1a90 	vmov	s11, r1
 801883a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801883e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018846:	ee67 7a85 	vmul.f32	s15, s15, s10
 801884a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801884e:	eeb0 6a67 	vmov.f32	s12, s15
 8018852:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018856:	ee16 1a10 	vmov	r1, s12
 801885a:	4019      	ands	r1, r3
 801885c:	ee06 1a10 	vmov	s12, r1
 8018860:	eeb0 7a46 	vmov.f32	s14, s12
 8018864:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018868:	493c      	ldr	r1, [pc, #240]	@ (801895c <__ieee754_powf+0x408>)
 801886a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801886e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018872:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018960 <__ieee754_powf+0x40c>
 8018876:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018964 <__ieee754_powf+0x410>
 801887a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801887e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018968 <__ieee754_powf+0x414>
 8018882:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018886:	ed91 7a00 	vldr	s14, [r1]
 801888a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801888e:	ee07 2a10 	vmov	s14, r2
 8018892:	4a36      	ldr	r2, [pc, #216]	@ (801896c <__ieee754_powf+0x418>)
 8018894:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018898:	eeb0 7a67 	vmov.f32	s14, s15
 801889c:	eea6 7a25 	vfma.f32	s14, s12, s11
 80188a0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80188a4:	ed92 5a00 	vldr	s10, [r2]
 80188a8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80188ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80188b0:	ee17 2a10 	vmov	r2, s14
 80188b4:	401a      	ands	r2, r3
 80188b6:	ee07 2a10 	vmov	s14, r2
 80188ba:	ee77 6a66 	vsub.f32	s13, s14, s13
 80188be:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80188c2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80188c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80188ca:	e715      	b.n	80186f8 <__ieee754_powf+0x1a4>
 80188cc:	2601      	movs	r6, #1
 80188ce:	e75d      	b.n	801878c <__ieee754_powf+0x238>
 80188d0:	d152      	bne.n	8018978 <__ieee754_powf+0x424>
 80188d2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018970 <__ieee754_powf+0x41c>
 80188d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80188da:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80188de:	eef4 6ac7 	vcmpe.f32	s13, s14
 80188e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e6:	f73f af29 	bgt.w	801873c <__ieee754_powf+0x1e8>
 80188ea:	2386      	movs	r3, #134	@ 0x86
 80188ec:	e048      	b.n	8018980 <__ieee754_powf+0x42c>
 80188ee:	4a21      	ldr	r2, [pc, #132]	@ (8018974 <__ieee754_powf+0x420>)
 80188f0:	4293      	cmp	r3, r2
 80188f2:	d907      	bls.n	8018904 <__ieee754_powf+0x3b0>
 80188f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80188f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fc:	bf4c      	ite	mi
 80188fe:	2001      	movmi	r0, #1
 8018900:	2000      	movpl	r0, #0
 8018902:	e6c7      	b.n	8018694 <__ieee754_powf+0x140>
 8018904:	d138      	bne.n	8018978 <__ieee754_powf+0x424>
 8018906:	ee37 7a67 	vsub.f32	s14, s14, s15
 801890a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801890e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018912:	dbea      	blt.n	80188ea <__ieee754_powf+0x396>
 8018914:	e7ee      	b.n	80188f4 <__ieee754_powf+0x3a0>
 8018916:	bf00      	nop
 8018918:	00000000 	.word	0x00000000
 801891c:	3f7ffff3 	.word	0x3f7ffff3
 8018920:	3f800007 	.word	0x3f800007
 8018924:	3eaaaaab 	.word	0x3eaaaaab
 8018928:	3fb8aa00 	.word	0x3fb8aa00
 801892c:	3fb8aa3b 	.word	0x3fb8aa3b
 8018930:	36eca570 	.word	0x36eca570
 8018934:	4b800000 	.word	0x4b800000
 8018938:	001cc471 	.word	0x001cc471
 801893c:	005db3d6 	.word	0x005db3d6
 8018940:	0801b36c 	.word	0x0801b36c
 8018944:	fffff000 	.word	0xfffff000
 8018948:	3e6c3255 	.word	0x3e6c3255
 801894c:	3e53f142 	.word	0x3e53f142
 8018950:	3e8ba305 	.word	0x3e8ba305
 8018954:	3edb6db7 	.word	0x3edb6db7
 8018958:	3f19999a 	.word	0x3f19999a
 801895c:	0801b35c 	.word	0x0801b35c
 8018960:	3f76384f 	.word	0x3f76384f
 8018964:	3f763800 	.word	0x3f763800
 8018968:	369dc3a0 	.word	0x369dc3a0
 801896c:	0801b364 	.word	0x0801b364
 8018970:	3338aa3c 	.word	0x3338aa3c
 8018974:	43160000 	.word	0x43160000
 8018978:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801897c:	d96f      	bls.n	8018a5e <__ieee754_powf+0x50a>
 801897e:	15db      	asrs	r3, r3, #23
 8018980:	3b7e      	subs	r3, #126	@ 0x7e
 8018982:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018986:	4118      	asrs	r0, r3
 8018988:	4408      	add	r0, r1
 801898a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801898e:	4a4e      	ldr	r2, [pc, #312]	@ (8018ac8 <__ieee754_powf+0x574>)
 8018990:	3b7f      	subs	r3, #127	@ 0x7f
 8018992:	411a      	asrs	r2, r3
 8018994:	4002      	ands	r2, r0
 8018996:	ee07 2a10 	vmov	s14, r2
 801899a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801899e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80189a2:	f1c3 0317 	rsb	r3, r3, #23
 80189a6:	4118      	asrs	r0, r3
 80189a8:	2900      	cmp	r1, #0
 80189aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189ae:	bfb8      	it	lt
 80189b0:	4240      	neglt	r0, r0
 80189b2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80189b6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018acc <__ieee754_powf+0x578>
 80189ba:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8018ad0 <__ieee754_powf+0x57c>
 80189be:	ee16 3a90 	vmov	r3, s13
 80189c2:	f36f 030b 	bfc	r3, #0, #12
 80189c6:	ee06 3a90 	vmov	s13, r3
 80189ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80189ce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80189d2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80189d6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8018ad4 <__ieee754_powf+0x580>
 80189da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189de:	eee0 7a87 	vfma.f32	s15, s1, s14
 80189e2:	eeb0 7a67 	vmov.f32	s14, s15
 80189e6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80189ea:	eef0 5a47 	vmov.f32	s11, s14
 80189ee:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80189f2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80189f6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80189fa:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8018ad8 <__ieee754_powf+0x584>
 80189fe:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8018adc <__ieee754_powf+0x588>
 8018a02:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018a06:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8018ae0 <__ieee754_powf+0x58c>
 8018a0a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018a0e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018ae4 <__ieee754_powf+0x590>
 8018a12:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018a16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018ae8 <__ieee754_powf+0x594>
 8018a1a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018a1e:	eeb0 6a47 	vmov.f32	s12, s14
 8018a22:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018a26:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018a2a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8018a2e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018a32:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018a36:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018a3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018a46:	ee10 3a10 	vmov	r3, s0
 8018a4a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018a4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018a52:	da06      	bge.n	8018a62 <__ieee754_powf+0x50e>
 8018a54:	f000 f854 	bl	8018b00 <scalbnf>
 8018a58:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018a5c:	e592      	b.n	8018584 <__ieee754_powf+0x30>
 8018a5e:	2000      	movs	r0, #0
 8018a60:	e7a7      	b.n	80189b2 <__ieee754_powf+0x45e>
 8018a62:	ee00 3a10 	vmov	s0, r3
 8018a66:	e7f7      	b.n	8018a58 <__ieee754_powf+0x504>
 8018a68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018a6c:	e58a      	b.n	8018584 <__ieee754_powf+0x30>
 8018a6e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018aec <__ieee754_powf+0x598>
 8018a72:	e587      	b.n	8018584 <__ieee754_powf+0x30>
 8018a74:	eeb0 0a48 	vmov.f32	s0, s16
 8018a78:	e584      	b.n	8018584 <__ieee754_powf+0x30>
 8018a7a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018a7e:	f43f adbb 	beq.w	80185f8 <__ieee754_powf+0xa4>
 8018a82:	2502      	movs	r5, #2
 8018a84:	eeb0 0a48 	vmov.f32	s0, s16
 8018a88:	f000 f832 	bl	8018af0 <fabsf>
 8018a8c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018a90:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018a94:	4647      	mov	r7, r8
 8018a96:	d003      	beq.n	8018aa0 <__ieee754_powf+0x54c>
 8018a98:	f1b8 0f00 	cmp.w	r8, #0
 8018a9c:	f47f addb 	bne.w	8018656 <__ieee754_powf+0x102>
 8018aa0:	2c00      	cmp	r4, #0
 8018aa2:	bfbc      	itt	lt
 8018aa4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018aa8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018aac:	2e00      	cmp	r6, #0
 8018aae:	f6bf ad69 	bge.w	8018584 <__ieee754_powf+0x30>
 8018ab2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018ab6:	ea58 0805 	orrs.w	r8, r8, r5
 8018aba:	f47f adc7 	bne.w	801864c <__ieee754_powf+0xf8>
 8018abe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ac2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018ac6:	e55d      	b.n	8018584 <__ieee754_powf+0x30>
 8018ac8:	ff800000 	.word	0xff800000
 8018acc:	3f317218 	.word	0x3f317218
 8018ad0:	3f317200 	.word	0x3f317200
 8018ad4:	35bfbe8c 	.word	0x35bfbe8c
 8018ad8:	b5ddea0e 	.word	0xb5ddea0e
 8018adc:	3331bb4c 	.word	0x3331bb4c
 8018ae0:	388ab355 	.word	0x388ab355
 8018ae4:	bb360b61 	.word	0xbb360b61
 8018ae8:	3e2aaaab 	.word	0x3e2aaaab
 8018aec:	00000000 	.word	0x00000000

08018af0 <fabsf>:
 8018af0:	ee10 3a10 	vmov	r3, s0
 8018af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018af8:	ee00 3a10 	vmov	s0, r3
 8018afc:	4770      	bx	lr
	...

08018b00 <scalbnf>:
 8018b00:	ee10 3a10 	vmov	r3, s0
 8018b04:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018b08:	d02b      	beq.n	8018b62 <scalbnf+0x62>
 8018b0a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018b0e:	d302      	bcc.n	8018b16 <scalbnf+0x16>
 8018b10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018b14:	4770      	bx	lr
 8018b16:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018b1a:	d123      	bne.n	8018b64 <scalbnf+0x64>
 8018b1c:	4b24      	ldr	r3, [pc, #144]	@ (8018bb0 <scalbnf+0xb0>)
 8018b1e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018bb4 <scalbnf+0xb4>
 8018b22:	4298      	cmp	r0, r3
 8018b24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b28:	db17      	blt.n	8018b5a <scalbnf+0x5a>
 8018b2a:	ee10 3a10 	vmov	r3, s0
 8018b2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018b32:	3a19      	subs	r2, #25
 8018b34:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018b38:	4288      	cmp	r0, r1
 8018b3a:	dd15      	ble.n	8018b68 <scalbnf+0x68>
 8018b3c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018bb8 <scalbnf+0xb8>
 8018b40:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018bbc <scalbnf+0xbc>
 8018b44:	ee10 3a10 	vmov	r3, s0
 8018b48:	eeb0 7a67 	vmov.f32	s14, s15
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	bfb8      	it	lt
 8018b50:	eef0 7a66 	vmovlt.f32	s15, s13
 8018b54:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018b58:	4770      	bx	lr
 8018b5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018bc0 <scalbnf+0xc0>
 8018b5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018b62:	4770      	bx	lr
 8018b64:	0dd2      	lsrs	r2, r2, #23
 8018b66:	e7e5      	b.n	8018b34 <scalbnf+0x34>
 8018b68:	4410      	add	r0, r2
 8018b6a:	28fe      	cmp	r0, #254	@ 0xfe
 8018b6c:	dce6      	bgt.n	8018b3c <scalbnf+0x3c>
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	dd06      	ble.n	8018b80 <scalbnf+0x80>
 8018b72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018b76:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018b7a:	ee00 3a10 	vmov	s0, r3
 8018b7e:	4770      	bx	lr
 8018b80:	f110 0f16 	cmn.w	r0, #22
 8018b84:	da09      	bge.n	8018b9a <scalbnf+0x9a>
 8018b86:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018bc0 <scalbnf+0xc0>
 8018b8a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018bc4 <scalbnf+0xc4>
 8018b8e:	ee10 3a10 	vmov	r3, s0
 8018b92:	eeb0 7a67 	vmov.f32	s14, s15
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	e7d9      	b.n	8018b4e <scalbnf+0x4e>
 8018b9a:	3019      	adds	r0, #25
 8018b9c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018ba0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ba4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018bc8 <scalbnf+0xc8>
 8018ba8:	ee07 3a90 	vmov	s15, r3
 8018bac:	e7d7      	b.n	8018b5e <scalbnf+0x5e>
 8018bae:	bf00      	nop
 8018bb0:	ffff3cb0 	.word	0xffff3cb0
 8018bb4:	4c000000 	.word	0x4c000000
 8018bb8:	7149f2ca 	.word	0x7149f2ca
 8018bbc:	f149f2ca 	.word	0xf149f2ca
 8018bc0:	0da24260 	.word	0x0da24260
 8018bc4:	8da24260 	.word	0x8da24260
 8018bc8:	33000000 	.word	0x33000000

08018bcc <with_errnof>:
 8018bcc:	b510      	push	{r4, lr}
 8018bce:	ed2d 8b02 	vpush	{d8}
 8018bd2:	eeb0 8a40 	vmov.f32	s16, s0
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	f7fc f8d0 	bl	8014d7c <__errno>
 8018bdc:	eeb0 0a48 	vmov.f32	s0, s16
 8018be0:	ecbd 8b02 	vpop	{d8}
 8018be4:	6004      	str	r4, [r0, #0]
 8018be6:	bd10      	pop	{r4, pc}

08018be8 <xflowf>:
 8018be8:	b130      	cbz	r0, 8018bf8 <xflowf+0x10>
 8018bea:	eef1 7a40 	vneg.f32	s15, s0
 8018bee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018bf2:	2022      	movs	r0, #34	@ 0x22
 8018bf4:	f7ff bfea 	b.w	8018bcc <with_errnof>
 8018bf8:	eef0 7a40 	vmov.f32	s15, s0
 8018bfc:	e7f7      	b.n	8018bee <xflowf+0x6>
	...

08018c00 <__math_uflowf>:
 8018c00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018c08 <__math_uflowf+0x8>
 8018c04:	f7ff bff0 	b.w	8018be8 <xflowf>
 8018c08:	10000000 	.word	0x10000000

08018c0c <__math_oflowf>:
 8018c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018c14 <__math_oflowf+0x8>
 8018c10:	f7ff bfea 	b.w	8018be8 <xflowf>
 8018c14:	70000000 	.word	0x70000000

08018c18 <_init>:
 8018c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c1a:	bf00      	nop
 8018c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c1e:	bc08      	pop	{r3}
 8018c20:	469e      	mov	lr, r3
 8018c22:	4770      	bx	lr

08018c24 <_fini>:
 8018c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c26:	bf00      	nop
 8018c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c2a:	bc08      	pop	{r3}
 8018c2c:	469e      	mov	lr, r3
 8018c2e:	4770      	bx	lr
